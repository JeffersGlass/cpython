// $ /home/jglass/.pyenv/versions/3.12.1/bin/python Tools/jit/build_two_reuse.py x86_64-unknown-linux-gnu --all_ops

typedef enum {
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGE21,
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGEOFF12,
    HoleKind_ARM64_RELOC_UNSIGNED,
    HoleKind_IMAGE_REL_AMD64_ADDR64,
    HoleKind_IMAGE_REL_I386_DIR32,
    HoleKind_R_AARCH64_ABS64,
    HoleKind_R_AARCH64_CALL26,
    HoleKind_R_AARCH64_JUMP26,
    HoleKind_R_AARCH64_MOVW_UABS_G0_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G1_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G2_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G3,
    HoleKind_R_X86_64_64,
    HoleKind_X86_64_RELOC_UNSIGNED,
} HoleKind;

typedef enum {
    HoleValue_CODE,
    HoleValue_CONTINUE,
    HoleValue_DATA,
    HoleValue_EXECUTOR,
    HoleValue_GOT,
    HoleValue_OPARG,
    HoleValue_OPERAND,
    HoleValue_TARGET,
    HoleValue_TOP,
    HoleValue_ZERO,
} HoleValue;

typedef struct {
    const uint64_t offset;
    const HoleKind kind;
    const HoleValue value;
    const void *symbol;
    const uint64_t addend;
} Hole;

typedef struct {
    const size_t body_size;
    const unsigned char * const body;
    const size_t holes_size;
    const Hole * const holes;
} Stencil;

typedef struct {
    const Stencil code;
    const Stencil data;
} StencilGroup;

// _CHECK_EG_MATCHplus_BEFORE_ASYNC_WITH
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BEFORE_ASYNC_WITH.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3c                         js      0x71 <_JIT_ENTRY+0x71>
// 35: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 3d: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 50: 48 89 e2                      movq    %rsp, %rdx
// 53: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 58: 4c 89 ef                      movq    %r13, %rdi
// 5b: 4c 89 e6                      movq    %r12, %rsi
// 5e: ff d0                         callq   *%rax
// 60: 89 c5                         movl    %eax, %ebp
// 62: 49 8b 45 00                   movq    (%r13), %rax
// 66: 48 85 c0                      testq   %rax, %rax
// 69: 7e 18                         jle     0x83 <_JIT_ENTRY+0x83>
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 79 3a                         jns     0xa9 <_JIT_ENTRY+0xa9>
// 6f: eb 4a                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 71: 49 8b 45 00                   movq    (%r13), %rax
// 75: 48 85 c0                      testq   %rax, %rax
// 78: 7e 57                         jle     0xd1 <_JIT_ENTRY+0xd1>
// 7a: 85 c0                         testl   %eax, %eax
// 7c: 79 79                         jns     0xf7 <_JIT_ENTRY+0xf7>
// 7e: e9 8a 00 00 00                jmp     0x10d <_JIT_ENTRY+0x10d>
// 83: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000085:  R_X86_64_64  .rodata.str1.1
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_NegativeRefcount
// 97: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9c: 4c 89 ea                      movq    %r13, %rdx
// 9f: ff d0                         callq   *%rax
// a1: 49 8b 45 00                   movq    (%r13), %rax
// a5: 85 c0                         testl   %eax, %eax
// a7: 78 12                         js      0xbb <_JIT_ENTRY+0xbb>
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b3: ff d0                         callq   *%rax
// b5: 49 ff 4d 00                   decq    (%r13)
// b9: 74 6c                         je      0x127 <_JIT_ENTRY+0x127>
// bb: 49 8b 04 24                   movq    (%r12), %rax
// bf: 48 85 c0                      testq   %rax, %rax
// c2: 7e 7b                         jle     0x13f <_JIT_ENTRY+0x13f>
// c4: 85 c0                         testl   %eax, %eax
// c6: 0f 89 99 00 00 00             jns     0x165 <_JIT_ENTRY+0x165>
// cc: e9 aa 00 00 00                jmp     0x17b <_JIT_ENTRY+0x17b>
// d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d3:  R_X86_64_64  .rodata.str1.1
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_NegativeRefcount
// e5: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ea: 4c 89 ea                      movq    %r13, %rdx
// ed: ff d0                         callq   *%rax
// ef: 49 8b 45 00                   movq    (%r13), %rax
// f3: 85 c0                         testl   %eax, %eax
// f5: 78 16                         js      0x10d <_JIT_ENTRY+0x10d>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 101: ff d0                         callq   *%rax
// 103: 49 ff 4d 00                   decq    (%r13)
// 107: 0f 84 fd 01 00 00             je      0x30a <_JIT_ENTRY+0x30a>
// 10d: 49 8b 04 24                   movq    (%r12), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 0f 8e 0c 02 00 00             jle     0x326 <_JIT_ENTRY+0x326>
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 0f 89 2a 02 00 00             jns     0x34c <_JIT_ENTRY+0x34c>
// 122: e9 46 02 00 00                jmp     0x36d <_JIT_ENTRY+0x36d>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_Dealloc
// 131: 4c 89 ef                      movq    %r13, %rdi
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 85                         jg      0xc4 <_JIT_ENTRY+0xc4>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 16                         js      0x17b <_JIT_ENTRY+0x17b>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0c 24                   decq    (%r12)
// 175: 0f 84 2c 01 00 00             je      0x2a7 <_JIT_ENTRY+0x2a7>
// 17b: 85 ed                         testl   %ebp, %ebp
// 17d: 0f 88 ea 01 00 00             js      0x36d <_JIT_ENTRY+0x36d>
// 183: 48 8b 3c 24                   movq    (%rsp), %rdi
// 187: 48 85 ff                      testq   %rdi, %rdi
// 18a: 0f 84 dd 01 00 00             je      0x36d <_JIT_ENTRY+0x36d>
// 190: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000192:  R_X86_64_64  _Py_NoneStruct
// 19a: 48 39 ef                      cmpq    %rbp, %rdi
// 19d: 74 10                         je      0x1af <_JIT_ENTRY+0x1af>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  PyErr_SetHandledException
// 1a9: ff d0                         callq   *%rax
// 1ab: 48 8b 2c 24                   movq    (%rsp), %rbp
// 1af: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b4: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 1b8: 48 89 6b f8                   movq    %rbp, -0x8(%rbx)
// 1bc: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001be:  R_X86_64_64  _PyObject_LookupSpecial
// 1c6: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001c8:  R_X86_64_64  _PyRuntime
// 1d0: 49 8d b5 68 a6 00 00          leaq    0xa668(%r13), %rsi
// 1d7: 48 89 ef                      movq    %rbp, %rdi
// 1da: 41 ff d4                      callq   *%r12
// 1dd: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1e2: 48 85 c0                      testq   %rax, %rax
// 1e5: 0f 84 d8 00 00 00             je      0x2c3 <_JIT_ENTRY+0x2c3>
// 1eb: 49 81 c5 a0 a6 00 00          addq    $0xa6a0, %r13           # imm = 0xA6A0
// 1f2: 48 89 ef                      movq    %rbp, %rdi
// 1f5: 4c 89 ee                      movq    %r13, %rsi
// 1f8: 41 ff d4                      callq   *%r12
// 1fb: 48 85 c0                      testq   %rax, %rax
// 1fe: 0f 84 30 02 00 00             je      0x434 <_JIT_ENTRY+0x434>
// 204: 49 89 c5                      movq    %rax, %r13
// 207: 48 8b 45 00                   movq    (%rbp), %rax
// 20b: 48 85 c0                      testq   %rax, %rax
// 20e: 7f 22                         jg      0x232 <_JIT_ENTRY+0x232>
// 210: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000212:  R_X86_64_64  .rodata.str1.1
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_NegativeRefcount
// 224: be 14 09 00 00                movl    $0x914, %esi            # imm = 0x914
// 229: 48 89 ea                      movq    %rbp, %rdx
// 22c: ff d0                         callq   *%rax
// 22e: 48 8b 45 00                   movq    (%rbp), %rax
// 232: 85 c0                         testl   %eax, %eax
// 234: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 239: 78 21                         js      0x25c <_JIT_ENTRY+0x25c>
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 245: ff d0                         callq   *%rax
// 247: 48 ff 4d 00                   decq    (%rbp)
// 24b: 75 0f                         jne     0x25c <_JIT_ENTRY+0x25c>
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_Dealloc
// 257: 48 89 ef                      movq    %rbp, %rdi
// 25a: ff d0                         callq   *%rax
// 25c: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 261: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 268: 0f 84 27 01 00 00             je      0x395 <_JIT_ENTRY+0x395>
// 26e: 48 8b 40 38                   movq    0x38(%rax), %rax
// 272: 49 8b 04 04                   movq    (%r12,%rax), %rax
// 276: 48 85 c0                      testq   %rax, %rax
// 279: 0f 84 16 01 00 00             je      0x395 <_JIT_ENTRY+0x395>
// 27f: 4c 89 e7                      movq    %r12, %rdi
// 282: 31 f6                         xorl    %esi, %esi
// 284: 31 d2                         xorl    %edx, %edx
// 286: 31 c9                         xorl    %ecx, %ecx
// 288: ff d0                         callq   *%rax
// 28a: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000028c:  R_X86_64_64  _Py_CheckFunctionResult
// 294: 4c 89 ff                      movq    %r15, %rdi
// 297: 4c 89 e6                      movq    %r12, %rsi
// 29a: 48 89 c2                      movq    %rax, %rdx
// 29d: 31 c9                         xorl    %ecx, %ecx
// 29f: 41 ff d0                      callq   *%r8
// 2a2: e9 07 01 00 00                jmp     0x3ae <_JIT_ENTRY+0x3ae>
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _Py_Dealloc
// 2b1: 4c 89 e7                      movq    %r12, %rdi
// 2b4: ff d0                         callq   *%rax
// 2b6: 85 ed                         testl   %ebp, %ebp
// 2b8: 0f 89 c5 fe ff ff             jns     0x183 <_JIT_ENTRY+0x183>
// 2be: e9 aa 00 00 00                jmp     0x36d <_JIT_ENTRY+0x36d>
// 2c3: 49 8b 47 68                   movq    0x68(%r15), %rax
// 2c7: 48 85 c0                      testq   %rax, %rax
// 2ca: 74 0b                         je      0x2d7 <_JIT_ENTRY+0x2d7>
// 2cc: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 2d1: 0f 85 9e 00 00 00             jne     0x375 <_JIT_ENTRY+0x375>
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  PyExc_TypeError
// 2e1: 48 8b 30                      movq    (%rax), %rsi
// 2e4: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2e8: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2ec: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002ee:  R_X86_64_64  .rodata.str1.1+0x39
// 2f6: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002f8:  R_X86_64_64  _PyErr_Format
// 300: 4c 89 ff                      movq    %r15, %rdi
// 303: 31 c0                         xorl    %eax, %eax
// 305: 41 ff d0                      callq   *%r8
// 308: eb 6b                         jmp     0x375 <_JIT_ENTRY+0x375>
// 30a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030c:  R_X86_64_64  _Py_Dealloc
// 314: 4c 89 ef                      movq    %r13, %rdi
// 317: ff d0                         callq   *%rax
// 319: 49 8b 04 24                   movq    (%r12), %rax
// 31d: 48 85 c0                      testq   %rax, %rax
// 320: 0f 8f f4 fd ff ff             jg      0x11a <_JIT_ENTRY+0x11a>
// 326: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000328:  R_X86_64_64  .rodata.str1.1
// 330: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000332:  R_X86_64_64  _Py_NegativeRefcount
// 33a: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 33f: 4c 89 e2                      movq    %r12, %rdx
// 342: ff d0                         callq   *%rax
// 344: 49 8b 04 24                   movq    (%r12), %rax
// 348: 85 c0                         testl   %eax, %eax
// 34a: 78 21                         js      0x36d <_JIT_ENTRY+0x36d>
// 34c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 356: ff d0                         callq   *%rax
// 358: 49 ff 0c 24                   decq    (%r12)
// 35c: 75 0f                         jne     0x36d <_JIT_ENTRY+0x36d>
// 35e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000360:  R_X86_64_64  _Py_Dealloc
// 368: 4c 89 e7                      movq    %r12, %rdi
// 36b: ff d0                         callq   *%rax
// 36d: 48 83 c3 f8                   addq    $-0x8, %rbx
// 371: 48 83 c3 f8                   addq    $-0x8, %rbx
// 375: 4c 29 f3                      subq    %r14, %rbx
// 378: 48 83 c3 b8                   addq    $-0x48, %rbx
// 37c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 380: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 384: 31 c0                         xorl    %eax, %eax
// 386: 48 83 c4 18                   addq    $0x18, %rsp
// 38a: 5b                            popq    %rbx
// 38b: 41 5c                         popq    %r12
// 38d: 41 5d                         popq    %r13
// 38f: 41 5e                         popq    %r14
// 391: 41 5f                         popq    %r15
// 393: 5d                            popq    %rbp
// 394: c3                            retq
// 395: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000397:  R_X86_64_64  _PyObject_MakeTpCall
// 39f: 4c 89 ff                      movq    %r15, %rdi
// 3a2: 4c 89 e6                      movq    %r12, %rsi
// 3a5: 31 d2                         xorl    %edx, %edx
// 3a7: 31 c9                         xorl    %ecx, %ecx
// 3a9: 45 31 c0                      xorl    %r8d, %r8d
// 3ac: ff d0                         callq   *%rax
// 3ae: 48 89 c5                      movq    %rax, %rbp
// 3b1: 49 8b 04 24                   movq    (%r12), %rax
// 3b5: 48 85 c0                      testq   %rax, %rax
// 3b8: 7f 22                         jg      0x3dc <_JIT_ENTRY+0x3dc>
// 3ba: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003bc:  R_X86_64_64  .rodata.str1.1
// 3c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c6:  R_X86_64_64  _Py_NegativeRefcount
// 3ce: be 16 09 00 00                movl    $0x916, %esi            # imm = 0x916
// 3d3: 4c 89 e2                      movq    %r12, %rdx
// 3d6: ff d0                         callq   *%rax
// 3d8: 49 8b 04 24                   movq    (%r12), %rax
// 3dc: 85 c0                         testl   %eax, %eax
// 3de: 78 21                         js      0x401 <_JIT_ENTRY+0x401>
// 3e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3ea: ff d0                         callq   *%rax
// 3ec: 49 ff 0c 24                   decq    (%r12)
// 3f0: 75 0f                         jne     0x401 <_JIT_ENTRY+0x401>
// 3f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f4:  R_X86_64_64  _Py_Dealloc
// 3fc: 4c 89 e7                      movq    %r12, %rdi
// 3ff: ff d0                         callq   *%rax
// 401: 48 85 ed                      testq   %rbp, %rbp
// 404: 74 60                         je      0x466 <_JIT_ENTRY+0x466>
// 406: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 40a: 48 89 2b                      movq    %rbp, (%rbx)
// 40d: 48 83 c3 08                   addq    $0x8, %rbx
// 411: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000413:  R_X86_64_64  _JIT_CONTINUE
// 41b: 4c 89 f7                      movq    %r14, %rdi
// 41e: 48 89 de                      movq    %rbx, %rsi
// 421: 4c 89 fa                      movq    %r15, %rdx
// 424: 48 83 c4 18                   addq    $0x18, %rsp
// 428: 5b                            popq    %rbx
// 429: 41 5c                         popq    %r12
// 42b: 41 5d                         popq    %r13
// 42d: 41 5e                         popq    %r14
// 42f: 41 5f                         popq    %r15
// 431: 5d                            popq    %rbp
// 432: ff e0                         jmpq    *%rax
// 434: 49 8b 47 68                   movq    0x68(%r15), %rax
// 438: 48 85 c0                      testq   %rax, %rax
// 43b: 0f 84 82 00 00 00             je      0x4c3 <_JIT_ENTRY+0x4c3>
// 441: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 446: 74 7b                         je      0x4c3 <_JIT_ENTRY+0x4c3>
// 448: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 44d: 49 8b 07                      movq    (%r15), %rax
// 450: 48 85 c0                      testq   %rax, %rax
// 453: 0f 8e ac 00 00 00             jle     0x505 <_JIT_ENTRY+0x505>
// 459: 85 c0                         testl   %eax, %eax
// 45b: 0f 88 14 ff ff ff             js      0x375 <_JIT_ENTRY+0x375>
// 461: e9 c8 00 00 00                jmp     0x52e <_JIT_ENTRY+0x52e>
// 466: 49 8b 45 00                   movq    (%r13), %rax
// 46a: 48 85 c0                      testq   %rax, %rax
// 46d: 7f 22                         jg      0x491 <_JIT_ENTRY+0x491>
// 46f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000471:  R_X86_64_64  .rodata.str1.1
// 479: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000047b:  R_X86_64_64  _Py_NegativeRefcount
// 483: be 18 09 00 00                movl    $0x918, %esi            # imm = 0x918
// 488: 4c 89 ea                      movq    %r13, %rdx
// 48b: ff d0                         callq   *%rax
// 48d: 49 8b 45 00                   movq    (%r13), %rax
// 491: 85 c0                         testl   %eax, %eax
// 493: 0f 88 d8 fe ff ff             js      0x371 <_JIT_ENTRY+0x371>
// 499: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000049b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a3: ff d0                         callq   *%rax
// 4a5: 49 ff 4d 00                   decq    (%r13)
// 4a9: 0f 85 c2 fe ff ff             jne     0x371 <_JIT_ENTRY+0x371>
// 4af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004b1:  R_X86_64_64  _Py_Dealloc
// 4b9: 4c 89 ef                      movq    %r13, %rdi
// 4bc: ff d0                         callq   *%rax
// 4be: e9 ae fe ff ff                jmp     0x371 <_JIT_ENTRY+0x371>
// 4c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004c5:  R_X86_64_64  PyExc_TypeError
// 4cd: 48 8b 30                      movq    (%rax), %rsi
// 4d0: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 4d4: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 4d8: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000004da:  R_X86_64_64  .rodata.str1.1+0x84
// 4e2: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000004e4:  R_X86_64_64  _PyErr_Format
// 4ec: 4c 89 ff                      movq    %r15, %rdi
// 4ef: 31 c0                         xorl    %eax, %eax
// 4f1: 41 ff d0                      callq   *%r8
// 4f4: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 4f9: 49 8b 07                      movq    (%r15), %rax
// 4fc: 48 85 c0                      testq   %rax, %rax
// 4ff: 0f 8f 54 ff ff ff             jg      0x459 <_JIT_ENTRY+0x459>
// 505: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000507:  R_X86_64_64  .rodata.str1.1
// 50f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000511:  R_X86_64_64  _Py_NegativeRefcount
// 519: be 11 09 00 00                movl    $0x911, %esi            # imm = 0x911
// 51e: 4c 89 fa                      movq    %r15, %rdx
// 521: ff d0                         callq   *%rax
// 523: 49 8b 07                      movq    (%r15), %rax
// 526: 85 c0                         testl   %eax, %eax
// 528: 0f 88 47 fe ff ff             js      0x375 <_JIT_ENTRY+0x375>
// 52e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000530:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 538: ff d0                         callq   *%rax
// 53a: 49 ff 0f                      decq    (%r15)
// 53d: 0f 85 32 fe ff ff             jne     0x375 <_JIT_ENTRY+0x375>
// 543: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000545:  R_X86_64_64  _Py_Dealloc
// 54d: 4c 89 ff                      movq    %r15, %rdi
// 550: ff d0                         callq   *%rax
// 552: e9 1e fe ff ff                jmp     0x375 <_JIT_ENTRY+0x375>
// 557: 
static const unsigned char _CHECK_EG_MATCHplus_BEFORE_ASYNC_WITH_code_body[1368] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xfd, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x0c, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x2a, 0x02, 0x00, 0x00, 0xe9, 0x46, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x2c, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xea, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xdd, 0x01, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xef, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x2c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x48, 0x89, 0x6b, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb5, 0x68, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0x41, 0xff, 0xd4, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xd8, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xa0, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x41, 0xff, 0xd4, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x30, 0x02, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x84, 0x27, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x04, 0x04, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x16, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0xe9, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0xc5, 0xfe, 0xff, 0xff, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0x9e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xeb, 0x6b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xf4, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x60, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0x89, 0x2b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x7b, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xac, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x14, 0xff, 0xff, 0xff, 0xe9, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xd8, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0xc2, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0xae, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x54, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x47, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x32, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x1e, 0xfe, 0xff, 0xff};
static const Hole _CHECK_EG_MATCHplus_BEFORE_ASYNC_WITH_code_holes[48] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x332, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x34e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x360, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x397, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x3bc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x413, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x471, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x47b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x49b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x4c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x4da, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x84},
    {0x4e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x507, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x511, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x530, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x545, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the asynchronous context manager protocol\x00'%.200s' object does not support the asynchronous context manager protocol (missed __aexit__ method)\x00"
// e9: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_BEFORE_ASYNC_WITH_data_body[241] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x61, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BEFORE_ASYNC_WITH_data_holes[1];

// _CHECK_EG_MATCHplus_BEFORE_WITH
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BEFORE_WITH.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3c                         js      0x71 <_JIT_ENTRY+0x71>
// 35: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 3d: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 50: 48 89 e2                      movq    %rsp, %rdx
// 53: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 58: 4c 89 ef                      movq    %r13, %rdi
// 5b: 4c 89 e6                      movq    %r12, %rsi
// 5e: ff d0                         callq   *%rax
// 60: 89 c5                         movl    %eax, %ebp
// 62: 49 8b 45 00                   movq    (%r13), %rax
// 66: 48 85 c0                      testq   %rax, %rax
// 69: 7e 18                         jle     0x83 <_JIT_ENTRY+0x83>
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 79 3a                         jns     0xa9 <_JIT_ENTRY+0xa9>
// 6f: eb 4a                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 71: 49 8b 45 00                   movq    (%r13), %rax
// 75: 48 85 c0                      testq   %rax, %rax
// 78: 7e 57                         jle     0xd1 <_JIT_ENTRY+0xd1>
// 7a: 85 c0                         testl   %eax, %eax
// 7c: 79 79                         jns     0xf7 <_JIT_ENTRY+0xf7>
// 7e: e9 8a 00 00 00                jmp     0x10d <_JIT_ENTRY+0x10d>
// 83: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000085:  R_X86_64_64  .rodata.str1.1
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_NegativeRefcount
// 97: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9c: 4c 89 ea                      movq    %r13, %rdx
// 9f: ff d0                         callq   *%rax
// a1: 49 8b 45 00                   movq    (%r13), %rax
// a5: 85 c0                         testl   %eax, %eax
// a7: 78 12                         js      0xbb <_JIT_ENTRY+0xbb>
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b3: ff d0                         callq   *%rax
// b5: 49 ff 4d 00                   decq    (%r13)
// b9: 74 6c                         je      0x127 <_JIT_ENTRY+0x127>
// bb: 49 8b 04 24                   movq    (%r12), %rax
// bf: 48 85 c0                      testq   %rax, %rax
// c2: 7e 7b                         jle     0x13f <_JIT_ENTRY+0x13f>
// c4: 85 c0                         testl   %eax, %eax
// c6: 0f 89 99 00 00 00             jns     0x165 <_JIT_ENTRY+0x165>
// cc: e9 aa 00 00 00                jmp     0x17b <_JIT_ENTRY+0x17b>
// d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d3:  R_X86_64_64  .rodata.str1.1
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_NegativeRefcount
// e5: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ea: 4c 89 ea                      movq    %r13, %rdx
// ed: ff d0                         callq   *%rax
// ef: 49 8b 45 00                   movq    (%r13), %rax
// f3: 85 c0                         testl   %eax, %eax
// f5: 78 16                         js      0x10d <_JIT_ENTRY+0x10d>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 101: ff d0                         callq   *%rax
// 103: 49 ff 4d 00                   decq    (%r13)
// 107: 0f 84 fd 01 00 00             je      0x30a <_JIT_ENTRY+0x30a>
// 10d: 49 8b 04 24                   movq    (%r12), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 0f 8e 0c 02 00 00             jle     0x326 <_JIT_ENTRY+0x326>
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 0f 89 2a 02 00 00             jns     0x34c <_JIT_ENTRY+0x34c>
// 122: e9 46 02 00 00                jmp     0x36d <_JIT_ENTRY+0x36d>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_Dealloc
// 131: 4c 89 ef                      movq    %r13, %rdi
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 85                         jg      0xc4 <_JIT_ENTRY+0xc4>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 16                         js      0x17b <_JIT_ENTRY+0x17b>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0c 24                   decq    (%r12)
// 175: 0f 84 2c 01 00 00             je      0x2a7 <_JIT_ENTRY+0x2a7>
// 17b: 85 ed                         testl   %ebp, %ebp
// 17d: 0f 88 ea 01 00 00             js      0x36d <_JIT_ENTRY+0x36d>
// 183: 48 8b 3c 24                   movq    (%rsp), %rdi
// 187: 48 85 ff                      testq   %rdi, %rdi
// 18a: 0f 84 dd 01 00 00             je      0x36d <_JIT_ENTRY+0x36d>
// 190: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000192:  R_X86_64_64  _Py_NoneStruct
// 19a: 48 39 ef                      cmpq    %rbp, %rdi
// 19d: 74 10                         je      0x1af <_JIT_ENTRY+0x1af>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  PyErr_SetHandledException
// 1a9: ff d0                         callq   *%rax
// 1ab: 48 8b 2c 24                   movq    (%rsp), %rbp
// 1af: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b4: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 1b8: 48 89 6b f8                   movq    %rbp, -0x8(%rbx)
// 1bc: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001be:  R_X86_64_64  _PyObject_LookupSpecial
// 1c6: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001c8:  R_X86_64_64  _PyRuntime
// 1d0: 49 8d b5 50 ae 00 00          leaq    0xae50(%r13), %rsi
// 1d7: 48 89 ef                      movq    %rbp, %rdi
// 1da: 41 ff d4                      callq   *%r12
// 1dd: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1e2: 48 85 c0                      testq   %rax, %rax
// 1e5: 0f 84 d8 00 00 00             je      0x2c3 <_JIT_ENTRY+0x2c3>
// 1eb: 49 81 c5 b8 ae 00 00          addq    $0xaeb8, %r13           # imm = 0xAEB8
// 1f2: 48 89 ef                      movq    %rbp, %rdi
// 1f5: 4c 89 ee                      movq    %r13, %rsi
// 1f8: 41 ff d4                      callq   *%r12
// 1fb: 48 85 c0                      testq   %rax, %rax
// 1fe: 0f 84 30 02 00 00             je      0x434 <_JIT_ENTRY+0x434>
// 204: 49 89 c5                      movq    %rax, %r13
// 207: 48 8b 45 00                   movq    (%rbp), %rax
// 20b: 48 85 c0                      testq   %rax, %rax
// 20e: 7f 22                         jg      0x232 <_JIT_ENTRY+0x232>
// 210: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000212:  R_X86_64_64  .rodata.str1.1
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_NegativeRefcount
// 224: be 3f 09 00 00                movl    $0x93f, %esi            # imm = 0x93F
// 229: 48 89 ea                      movq    %rbp, %rdx
// 22c: ff d0                         callq   *%rax
// 22e: 48 8b 45 00                   movq    (%rbp), %rax
// 232: 85 c0                         testl   %eax, %eax
// 234: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 239: 78 21                         js      0x25c <_JIT_ENTRY+0x25c>
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 245: ff d0                         callq   *%rax
// 247: 48 ff 4d 00                   decq    (%rbp)
// 24b: 75 0f                         jne     0x25c <_JIT_ENTRY+0x25c>
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_Dealloc
// 257: 48 89 ef                      movq    %rbp, %rdi
// 25a: ff d0                         callq   *%rax
// 25c: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 261: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 268: 0f 84 27 01 00 00             je      0x395 <_JIT_ENTRY+0x395>
// 26e: 48 8b 40 38                   movq    0x38(%rax), %rax
// 272: 49 8b 04 04                   movq    (%r12,%rax), %rax
// 276: 48 85 c0                      testq   %rax, %rax
// 279: 0f 84 16 01 00 00             je      0x395 <_JIT_ENTRY+0x395>
// 27f: 4c 89 e7                      movq    %r12, %rdi
// 282: 31 f6                         xorl    %esi, %esi
// 284: 31 d2                         xorl    %edx, %edx
// 286: 31 c9                         xorl    %ecx, %ecx
// 288: ff d0                         callq   *%rax
// 28a: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000028c:  R_X86_64_64  _Py_CheckFunctionResult
// 294: 4c 89 ff                      movq    %r15, %rdi
// 297: 4c 89 e6                      movq    %r12, %rsi
// 29a: 48 89 c2                      movq    %rax, %rdx
// 29d: 31 c9                         xorl    %ecx, %ecx
// 29f: 41 ff d0                      callq   *%r8
// 2a2: e9 07 01 00 00                jmp     0x3ae <_JIT_ENTRY+0x3ae>
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _Py_Dealloc
// 2b1: 4c 89 e7                      movq    %r12, %rdi
// 2b4: ff d0                         callq   *%rax
// 2b6: 85 ed                         testl   %ebp, %ebp
// 2b8: 0f 89 c5 fe ff ff             jns     0x183 <_JIT_ENTRY+0x183>
// 2be: e9 aa 00 00 00                jmp     0x36d <_JIT_ENTRY+0x36d>
// 2c3: 49 8b 47 68                   movq    0x68(%r15), %rax
// 2c7: 48 85 c0                      testq   %rax, %rax
// 2ca: 74 0b                         je      0x2d7 <_JIT_ENTRY+0x2d7>
// 2cc: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 2d1: 0f 85 9e 00 00 00             jne     0x375 <_JIT_ENTRY+0x375>
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  PyExc_TypeError
// 2e1: 48 8b 30                      movq    (%rax), %rsi
// 2e4: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 2e8: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2ec: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002ee:  R_X86_64_64  .rodata.str1.1+0x39
// 2f6: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002f8:  R_X86_64_64  _PyErr_Format
// 300: 4c 89 ff                      movq    %r15, %rdi
// 303: 31 c0                         xorl    %eax, %eax
// 305: 41 ff d0                      callq   *%r8
// 308: eb 6b                         jmp     0x375 <_JIT_ENTRY+0x375>
// 30a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030c:  R_X86_64_64  _Py_Dealloc
// 314: 4c 89 ef                      movq    %r13, %rdi
// 317: ff d0                         callq   *%rax
// 319: 49 8b 04 24                   movq    (%r12), %rax
// 31d: 48 85 c0                      testq   %rax, %rax
// 320: 0f 8f f4 fd ff ff             jg      0x11a <_JIT_ENTRY+0x11a>
// 326: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000328:  R_X86_64_64  .rodata.str1.1
// 330: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000332:  R_X86_64_64  _Py_NegativeRefcount
// 33a: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 33f: 4c 89 e2                      movq    %r12, %rdx
// 342: ff d0                         callq   *%rax
// 344: 49 8b 04 24                   movq    (%r12), %rax
// 348: 85 c0                         testl   %eax, %eax
// 34a: 78 21                         js      0x36d <_JIT_ENTRY+0x36d>
// 34c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 356: ff d0                         callq   *%rax
// 358: 49 ff 0c 24                   decq    (%r12)
// 35c: 75 0f                         jne     0x36d <_JIT_ENTRY+0x36d>
// 35e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000360:  R_X86_64_64  _Py_Dealloc
// 368: 4c 89 e7                      movq    %r12, %rdi
// 36b: ff d0                         callq   *%rax
// 36d: 48 83 c3 f8                   addq    $-0x8, %rbx
// 371: 48 83 c3 f8                   addq    $-0x8, %rbx
// 375: 4c 29 f3                      subq    %r14, %rbx
// 378: 48 83 c3 b8                   addq    $-0x48, %rbx
// 37c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 380: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 384: 31 c0                         xorl    %eax, %eax
// 386: 48 83 c4 18                   addq    $0x18, %rsp
// 38a: 5b                            popq    %rbx
// 38b: 41 5c                         popq    %r12
// 38d: 41 5d                         popq    %r13
// 38f: 41 5e                         popq    %r14
// 391: 41 5f                         popq    %r15
// 393: 5d                            popq    %rbp
// 394: c3                            retq
// 395: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000397:  R_X86_64_64  _PyObject_MakeTpCall
// 39f: 4c 89 ff                      movq    %r15, %rdi
// 3a2: 4c 89 e6                      movq    %r12, %rsi
// 3a5: 31 d2                         xorl    %edx, %edx
// 3a7: 31 c9                         xorl    %ecx, %ecx
// 3a9: 45 31 c0                      xorl    %r8d, %r8d
// 3ac: ff d0                         callq   *%rax
// 3ae: 48 89 c5                      movq    %rax, %rbp
// 3b1: 49 8b 04 24                   movq    (%r12), %rax
// 3b5: 48 85 c0                      testq   %rax, %rax
// 3b8: 7f 22                         jg      0x3dc <_JIT_ENTRY+0x3dc>
// 3ba: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003bc:  R_X86_64_64  .rodata.str1.1
// 3c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c6:  R_X86_64_64  _Py_NegativeRefcount
// 3ce: be 41 09 00 00                movl    $0x941, %esi            # imm = 0x941
// 3d3: 4c 89 e2                      movq    %r12, %rdx
// 3d6: ff d0                         callq   *%rax
// 3d8: 49 8b 04 24                   movq    (%r12), %rax
// 3dc: 85 c0                         testl   %eax, %eax
// 3de: 78 21                         js      0x401 <_JIT_ENTRY+0x401>
// 3e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3ea: ff d0                         callq   *%rax
// 3ec: 49 ff 0c 24                   decq    (%r12)
// 3f0: 75 0f                         jne     0x401 <_JIT_ENTRY+0x401>
// 3f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f4:  R_X86_64_64  _Py_Dealloc
// 3fc: 4c 89 e7                      movq    %r12, %rdi
// 3ff: ff d0                         callq   *%rax
// 401: 48 85 ed                      testq   %rbp, %rbp
// 404: 74 60                         je      0x466 <_JIT_ENTRY+0x466>
// 406: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 40a: 48 89 2b                      movq    %rbp, (%rbx)
// 40d: 48 83 c3 08                   addq    $0x8, %rbx
// 411: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000413:  R_X86_64_64  _JIT_CONTINUE
// 41b: 4c 89 f7                      movq    %r14, %rdi
// 41e: 48 89 de                      movq    %rbx, %rsi
// 421: 4c 89 fa                      movq    %r15, %rdx
// 424: 48 83 c4 18                   addq    $0x18, %rsp
// 428: 5b                            popq    %rbx
// 429: 41 5c                         popq    %r12
// 42b: 41 5d                         popq    %r13
// 42d: 41 5e                         popq    %r14
// 42f: 41 5f                         popq    %r15
// 431: 5d                            popq    %rbp
// 432: ff e0                         jmpq    *%rax
// 434: 49 8b 47 68                   movq    0x68(%r15), %rax
// 438: 48 85 c0                      testq   %rax, %rax
// 43b: 0f 84 82 00 00 00             je      0x4c3 <_JIT_ENTRY+0x4c3>
// 441: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 446: 74 7b                         je      0x4c3 <_JIT_ENTRY+0x4c3>
// 448: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 44d: 49 8b 07                      movq    (%r15), %rax
// 450: 48 85 c0                      testq   %rax, %rax
// 453: 0f 8e ac 00 00 00             jle     0x505 <_JIT_ENTRY+0x505>
// 459: 85 c0                         testl   %eax, %eax
// 45b: 0f 88 14 ff ff ff             js      0x375 <_JIT_ENTRY+0x375>
// 461: e9 c8 00 00 00                jmp     0x52e <_JIT_ENTRY+0x52e>
// 466: 49 8b 45 00                   movq    (%r13), %rax
// 46a: 48 85 c0                      testq   %rax, %rax
// 46d: 7f 22                         jg      0x491 <_JIT_ENTRY+0x491>
// 46f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000471:  R_X86_64_64  .rodata.str1.1
// 479: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000047b:  R_X86_64_64  _Py_NegativeRefcount
// 483: be 43 09 00 00                movl    $0x943, %esi            # imm = 0x943
// 488: 4c 89 ea                      movq    %r13, %rdx
// 48b: ff d0                         callq   *%rax
// 48d: 49 8b 45 00                   movq    (%r13), %rax
// 491: 85 c0                         testl   %eax, %eax
// 493: 0f 88 d8 fe ff ff             js      0x371 <_JIT_ENTRY+0x371>
// 499: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000049b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a3: ff d0                         callq   *%rax
// 4a5: 49 ff 4d 00                   decq    (%r13)
// 4a9: 0f 85 c2 fe ff ff             jne     0x371 <_JIT_ENTRY+0x371>
// 4af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004b1:  R_X86_64_64  _Py_Dealloc
// 4b9: 4c 89 ef                      movq    %r13, %rdi
// 4bc: ff d0                         callq   *%rax
// 4be: e9 ae fe ff ff                jmp     0x371 <_JIT_ENTRY+0x371>
// 4c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004c5:  R_X86_64_64  PyExc_TypeError
// 4cd: 48 8b 30                      movq    (%rax), %rsi
// 4d0: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 4d4: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 4d8: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000004da:  R_X86_64_64  .rodata.str1.1+0x77
// 4e2: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000004e4:  R_X86_64_64  _PyErr_Format
// 4ec: 4c 89 ff                      movq    %r15, %rdi
// 4ef: 31 c0                         xorl    %eax, %eax
// 4f1: 41 ff d0                      callq   *%r8
// 4f4: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 4f9: 49 8b 07                      movq    (%r15), %rax
// 4fc: 48 85 c0                      testq   %rax, %rax
// 4ff: 0f 8f 54 ff ff ff             jg      0x459 <_JIT_ENTRY+0x459>
// 505: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000507:  R_X86_64_64  .rodata.str1.1
// 50f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000511:  R_X86_64_64  _Py_NegativeRefcount
// 519: be 3c 09 00 00                movl    $0x93c, %esi            # imm = 0x93C
// 51e: 4c 89 fa                      movq    %r15, %rdx
// 521: ff d0                         callq   *%rax
// 523: 49 8b 07                      movq    (%r15), %rax
// 526: 85 c0                         testl   %eax, %eax
// 528: 0f 88 47 fe ff ff             js      0x375 <_JIT_ENTRY+0x375>
// 52e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000530:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 538: ff d0                         callq   *%rax
// 53a: 49 ff 0f                      decq    (%r15)
// 53d: 0f 85 32 fe ff ff             jne     0x375 <_JIT_ENTRY+0x375>
// 543: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000545:  R_X86_64_64  _Py_Dealloc
// 54d: 4c 89 ff                      movq    %r15, %rdi
// 550: ff d0                         callq   *%rax
// 552: e9 1e fe ff ff                jmp     0x375 <_JIT_ENTRY+0x375>
// 557: 
static const unsigned char _CHECK_EG_MATCHplus_BEFORE_WITH_code_body[1368] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xfd, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x0c, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x2a, 0x02, 0x00, 0x00, 0xe9, 0x46, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x2c, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xea, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xdd, 0x01, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xef, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x2c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x48, 0x89, 0x6b, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb5, 0x50, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0x41, 0xff, 0xd4, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xd8, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xb8, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x41, 0xff, 0xd4, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x30, 0x02, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3f, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x0f, 0x84, 0x27, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x04, 0x04, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x16, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0xe9, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0xc5, 0xfe, 0xff, 0xff, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0x9e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xeb, 0x6b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xf4, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x41, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x60, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0x89, 0x2b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x7b, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xac, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x14, 0xff, 0xff, 0xff, 0xe9, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xd8, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0xc2, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0xae, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x54, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3c, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x47, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x32, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x1e, 0xfe, 0xff, 0xff};
static const Hole _CHECK_EG_MATCHplus_BEFORE_WITH_code_holes[48] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x332, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x34e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x360, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x397, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x3bc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x413, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x471, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x47b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x49b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x4c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x4da, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x77},
    {0x4e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x507, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x511, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x530, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x545, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the context manager protocol\x00'%.200s' object does not support the context manager protocol (missed __exit__ method)\x00"
// ce: 00 00
static const unsigned char _CHECK_EG_MATCHplus_BEFORE_WITH_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BEFORE_WITH_data_holes[1];

// _CHECK_EG_MATCHplus_BINARY_OP
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BINARY_OP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 4c 8d 76 f0                   leaq    -0x10(%rsi), %r14
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 e6                      movq    %r12, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 1c                         jle     0x90 <_JIT_ENTRY+0x90>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3e                         jns     0xb6 <_JIT_ENTRY+0xb6>
// 78: eb 52                         jmp     0xcc <_JIT_ENTRY+0xcc>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 63                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 83: 85 c0                         testl   %eax, %eax
// 85: 0f 89 81 00 00 00             jns     0x10c <_JIT_ENTRY+0x10c>
// 8b: e9 9d 00 00 00                jmp     0x12d <_JIT_ENTRY+0x12d>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_NegativeRefcount
// a4: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a9: 4c 89 ea                      movq    %r13, %rdx
// ac: ff d0                         callq   *%rax
// ae: 49 8b 45 00                   movq    (%r13), %rax
// b2: 85 c0                         testl   %eax, %eax
// b4: 78 16                         js      0xcc <_JIT_ENTRY+0xcc>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c0: ff d0                         callq   *%rax
// c2: 49 ff 4d 00                   decq    (%r13)
// c6: 0f 84 c7 00 00 00             je      0x193 <_JIT_ENTRY+0x193>
// cc: 49 8b 04 24                   movq    (%r12), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 0f 8e d6 00 00 00             jle     0x1af <_JIT_ENTRY+0x1af>
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 89 f4 00 00 00             jns     0x1d5 <_JIT_ENTRY+0x1d5>
// e1: e9 05 01 00 00                jmp     0x1eb <_JIT_ENTRY+0x1eb>
// e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_NegativeRefcount
// fa: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ff: 4c 89 ea                      movq    %r13, %rdx
// 102: ff d0                         callq   *%rax
// 104: 49 8b 45 00                   movq    (%r13), %rax
// 108: 85 c0                         testl   %eax, %eax
// 10a: 78 21                         js      0x12d <_JIT_ENTRY+0x12d>
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 116: ff d0                         callq   *%rax
// 118: 49 ff 4d 00                   decq    (%r13)
// 11c: 75 0f                         jne     0x12d <_JIT_ENTRY+0x12d>
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _Py_Dealloc
// 128: 4c 89 ef                      movq    %r13, %rdi
// 12b: ff d0                         callq   *%rax
// 12d: 49 8b 04 24                   movq    (%r12), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 09                         jle     0x13f <_JIT_ENTRY+0x13f>
// 136: 85 c0                         testl   %eax, %eax
// 138: 79 2f                         jns     0x169 <_JIT_ENTRY+0x169>
// 13a: e9 00 02 00 00                jmp     0x33f <_JIT_ENTRY+0x33f>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 d6 01 00 00             js      0x33f <_JIT_ENTRY+0x33f>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 0c 24                   decq    (%r12)
// 179: 0f 85 c0 01 00 00             jne     0x33f <_JIT_ENTRY+0x33f>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_Dealloc
// 189: 4c 89 e7                      movq    %r12, %rdi
// 18c: ff d0                         callq   *%rax
// 18e: e9 ac 01 00 00                jmp     0x33f <_JIT_ENTRY+0x33f>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_Dealloc
// 19d: 4c 89 ef                      movq    %r13, %rdi
// 1a0: ff d0                         callq   *%rax
// 1a2: 49 8b 04 24                   movq    (%r12), %rax
// 1a6: 48 85 c0                      testq   %rax, %rax
// 1a9: 0f 8f 2a ff ff ff             jg      0xd9 <_JIT_ENTRY+0xd9>
// 1af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b1:  R_X86_64_64  .rodata.str1.1
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_NegativeRefcount
// 1c3: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c8: 4c 89 e2                      movq    %r12, %rdx
// 1cb: ff d0                         callq   *%rax
// 1cd: 49 8b 04 24                   movq    (%r12), %rax
// 1d1: 85 c0                         testl   %eax, %eax
// 1d3: 78 16                         js      0x1eb <_JIT_ENTRY+0x1eb>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1df: ff d0                         callq   *%rax
// 1e1: 49 ff 0c 24                   decq    (%r12)
// 1e5: 0f 84 27 01 00 00             je      0x312 <_JIT_ENTRY+0x312>
// 1eb: 85 ed                         testl   %ebp, %ebp
// 1ed: 0f 88 4c 01 00 00             js      0x33f <_JIT_ENTRY+0x33f>
// 1f3: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f7: 48 85 ff                      testq   %rdi, %rdi
// 1fa: 0f 84 3f 01 00 00             je      0x33f <_JIT_ENTRY+0x33f>
// 200: 49 83 c7 f8                   addq    $-0x8, %r15
// 204: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000206:  R_X86_64_64  _Py_NoneStruct
// 20e: 4c 39 e7                      cmpq    %r12, %rdi
// 211: 74 10                         je      0x223 <_JIT_ENTRY+0x223>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  PyErr_SetHandledException
// 21d: ff d0                         callq   *%rax
// 21f: 4c 8b 24 24                   movq    (%rsp), %r12
// 223: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 228: 49 89 2e                      movq    %rbp, (%r14)
// 22b: 4d 89 27                      movq    %r12, (%r15)
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _JIT_OPARG
// 238: 0f b7 c0                      movzwl  %ax, %eax
// 23b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023d:  R_X86_64_64  _PyEval_BinaryOps
// 245: 48 89 ef                      movq    %rbp, %rdi
// 248: 4c 89 e6                      movq    %r12, %rsi
// 24b: ff 14 c1                      callq   *(%rcx,%rax,8)
// 24e: 49 89 c5                      movq    %rax, %r13
// 251: 48 8b 45 00                   movq    (%rbp), %rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 7f 22                         jg      0x27c <_JIT_ENTRY+0x27c>
// 25a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025c:  R_X86_64_64  .rodata.str1.1
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_NegativeRefcount
// 26e: be d4 0c 00 00                movl    $0xcd4, %esi            # imm = 0xCD4
// 273: 48 89 ea                      movq    %rbp, %rdx
// 276: ff d0                         callq   *%rax
// 278: 48 8b 45 00                   movq    (%rbp), %rax
// 27c: 85 c0                         testl   %eax, %eax
// 27e: 78 21                         js      0x2a1 <_JIT_ENTRY+0x2a1>
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28a: ff d0                         callq   *%rax
// 28c: 48 ff 4d 00                   decq    (%rbp)
// 290: 75 0f                         jne     0x2a1 <_JIT_ENTRY+0x2a1>
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _Py_Dealloc
// 29c: 48 89 ef                      movq    %rbp, %rdi
// 29f: ff d0                         callq   *%rax
// 2a1: 49 8b 04 24                   movq    (%r12), %rax
// 2a5: 48 85 c0                      testq   %rax, %rax
// 2a8: 7f 22                         jg      0x2cc <_JIT_ENTRY+0x2cc>
// 2aa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ac:  R_X86_64_64  .rodata.str1.1
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _Py_NegativeRefcount
// 2be: be d5 0c 00 00                movl    $0xcd5, %esi            # imm = 0xCD5
// 2c3: 4c 89 e2                      movq    %r12, %rdx
// 2c6: ff d0                         callq   *%rax
// 2c8: 49 8b 04 24                   movq    (%r12), %rax
// 2cc: 85 c0                         testl   %eax, %eax
// 2ce: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 2d3: 78 12                         js      0x2e7 <_JIT_ENTRY+0x2e7>
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2df: ff d0                         callq   *%rax
// 2e1: 49 ff 0c 24                   decq    (%r12)
// 2e5: 74 44                         je      0x32b <_JIT_ENTRY+0x32b>
// 2e7: 4d 85 ed                      testq   %r13, %r13
// 2ea: 74 53                         je      0x33f <_JIT_ENTRY+0x33f>
// 2ec: 4d 89 2e                      movq    %r13, (%r14)
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _JIT_CONTINUE
// 2f9: 48 89 df                      movq    %rbx, %rdi
// 2fc: 4c 89 fe                      movq    %r15, %rsi
// 2ff: 48 89 ea                      movq    %rbp, %rdx
// 302: 48 83 c4 18                   addq    $0x18, %rsp
// 306: 5b                            popq    %rbx
// 307: 41 5c                         popq    %r12
// 309: 41 5d                         popq    %r13
// 30b: 41 5e                         popq    %r14
// 30d: 41 5f                         popq    %r15
// 30f: 5d                            popq    %rbp
// 310: ff e0                         jmpq    *%rax
// 312: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000314:  R_X86_64_64  _Py_Dealloc
// 31c: 4c 89 e7                      movq    %r12, %rdi
// 31f: ff d0                         callq   *%rax
// 321: 85 ed                         testl   %ebp, %ebp
// 323: 0f 89 ca fe ff ff             jns     0x1f3 <_JIT_ENTRY+0x1f3>
// 329: eb 14                         jmp     0x33f <_JIT_ENTRY+0x33f>
// 32b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032d:  R_X86_64_64  _Py_Dealloc
// 335: 4c 89 e7                      movq    %r12, %rdi
// 338: ff d0                         callq   *%rax
// 33a: 4d 85 ed                      testq   %r13, %r13
// 33d: 75 ad                         jne     0x2ec <_JIT_ENTRY+0x2ec>
// 33f: 49 29 de                      subq    %rbx, %r14
// 342: 49 83 c6 b8                   addq    $-0x48, %r14
// 346: 49 c1 ee 03                   shrq    $0x3, %r14
// 34a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 34e: 31 c0                         xorl    %eax, %eax
// 350: 48 83 c4 18                   addq    $0x18, %rsp
// 354: 5b                            popq    %rbx
// 355: 41 5c                         popq    %r12
// 357: 41 5d                         popq    %r13
// 359: 41 5e                         popq    %r14
// 35b: 41 5f                         popq    %r15
// 35d: 5d                            popq    %rbp
// 35e: c3                            retq
// 35f: 
static const unsigned char _CHECK_EG_MATCHplus_BINARY_OP_code_body[864] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8d, 0x76, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0x00, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xd6, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xc0, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xac, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x27, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x4c, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x3f, 0x01, 0x00, 0x00, 0x49, 0x83, 0xc7, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x49, 0x89, 0x2e, 0x4d, 0x89, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0x14, 0xc1, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd4, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd5, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x44, 0x4d, 0x85, 0xed, 0x74, 0x53, 0x4d, 0x89, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0xca, 0xfe, 0xff, 0xff, 0xeb, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0xad, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_BINARY_OP_code_holes[32] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_BinaryOps, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x314, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x32d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_BINARY_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BINARY_OP_data_holes[1];

// _CHECK_EG_MATCHplus_BINARY_OP_ADD_FLOAT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BINARY_OP_ADD_FLOAT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 4c 8d 76 f0                   leaq    -0x10(%rsi), %r14
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 fe                      movq    %r15, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 fe                      movq    %r15, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 56                         jle     0xd9 <_JIT_ENTRY+0xd9>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 78                         jns     0xff <_JIT_ENTRY+0xff>
// 87: e9 89 00 00 00                jmp     0x115 <_JIT_ENTRY+0x115>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 4c 89 ea                      movq    %r13, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 45 00                   movq    (%r13), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 4d 00                   decq    (%r13)
// c2: 74 6a                         je      0x12e <_JIT_ENTRY+0x12e>
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7e 79                         jle     0x145 <_JIT_ENTRY+0x145>
// cc: 85 c0                         testl   %eax, %eax
// ce: 0f 89 96 00 00 00             jns     0x16a <_JIT_ENTRY+0x16a>
// d4: e9 a6 00 00 00                jmp     0x17f <_JIT_ENTRY+0x17f>
// d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000db:  R_X86_64_64  .rodata.str1.1
// e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e5:  R_X86_64_64  _Py_NegativeRefcount
// ed: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f2: 4c 89 ea                      movq    %r13, %rdx
// f5: ff d0                         callq   *%rax
// f7: 49 8b 45 00                   movq    (%r13), %rax
// fb: 85 c0                         testl   %eax, %eax
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 4d 00                   decq    (%r13)
// 10f: 0f 84 54 01 00 00             je      0x269 <_JIT_ENTRY+0x269>
// 115: 49 8b 07                      movq    (%r15), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 0f 8e 63 01 00 00             jle     0x284 <_JIT_ENTRY+0x284>
// 121: 85 c0                         testl   %eax, %eax
// 123: 0f 89 80 01 00 00             jns     0x2a9 <_JIT_ENTRY+0x2a9>
// 129: e9 9b 01 00 00                jmp     0x2c9 <_JIT_ENTRY+0x2c9>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_Dealloc
// 138: 4c 89 ef                      movq    %r13, %rdi
// 13b: ff d0                         callq   *%rax
// 13d: 49 8b 07                      movq    (%r15), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 87                         jg      0xcc <_JIT_ENTRY+0xcc>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15e: 4c 89 fa                      movq    %r15, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 07                      movq    (%r15), %rax
// 166: 85 c0                         testl   %eax, %eax
// 168: 78 15                         js      0x17f <_JIT_ENTRY+0x17f>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 0f                      decq    (%r15)
// 179: 0f 84 d1 00 00 00             je      0x250 <_JIT_ENTRY+0x250>
// 17f: 85 ed                         testl   %ebp, %ebp
// 181: 0f 88 42 01 00 00             js      0x2c9 <_JIT_ENTRY+0x2c9>
// 187: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 35 01 00 00             je      0x2c9 <_JIT_ENTRY+0x2c9>
// 194: 4d 8d 7c 24 f8                leaq    -0x8(%r12), %r15
// 199: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000019b:  R_X86_64_64  _Py_NoneStruct
// 1a3: 48 39 ef                      cmpq    %rbp, %rdi
// 1a6: 74 10                         je      0x1b8 <_JIT_ENTRY+0x1b8>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  PyErr_SetHandledException
// 1b2: ff d0                         callq   *%rax
// 1b4: 48 8b 2c 24                   movq    (%rsp), %rbp
// 1b8: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 1bd: 4d 89 2e                      movq    %r13, (%r14)
// 1c0: 49 89 2f                      movq    %rbp, (%r15)
// 1c3: f2 41 0f 10 45 10             movsd   0x10(%r13), %xmm0       # xmm0 = mem[0],zero
// 1c9: f2 0f 58 45 10                addsd   0x10(%rbp), %xmm0
// 1ce: 49 83 7d 00 01                cmpq    $0x1, (%r13)
// 1d3: 75 3c                         jne     0x211 <_JIT_ENTRY+0x211>
// 1d5: f2 41 0f 11 45 10             movsd   %xmm0, 0x10(%r13)
// 1db: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 1df: 75 28                         jne     0x209 <_JIT_ENTRY+0x209>
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  PyInterpreterState_Get
// 1eb: ff d0                         callq   *%rax
// 1ed: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1f4: 48 ff 4d 00                   decq    (%rbp)
// 1f8: 75 0f                         jne     0x209 <_JIT_ENTRY+0x209>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _PyFloat_ExactDealloc
// 204: 48 89 ef                      movq    %rbp, %rdi
// 207: ff d0                         callq   *%rax
// 209: 4c 89 ed                      movq    %r13, %rbp
// 20c: e9 72 01 00 00                jmp     0x383 <_JIT_ENTRY+0x383>
// 211: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// 216: 0f 85 d0 00 00 00             jne     0x2ec <_JIT_ENTRY+0x2ec>
// 21c: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// 221: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 226: 0f 85 57 01 00 00             jne     0x383 <_JIT_ENTRY+0x383>
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  PyInterpreterState_Get
// 236: ff d0                         callq   *%rax
// 238: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 23f: 49 8b 45 00                   movq    (%r13), %rax
// 243: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 247: 49 89 4d 00                   movq    %rcx, (%r13)
// 24b: e9 0a 01 00 00                jmp     0x35a <_JIT_ENTRY+0x35a>
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _Py_Dealloc
// 25a: 4c 89 ff                      movq    %r15, %rdi
// 25d: ff d0                         callq   *%rax
// 25f: 85 ed                         testl   %ebp, %ebp
// 261: 0f 89 20 ff ff ff             jns     0x187 <_JIT_ENTRY+0x187>
// 267: eb 60                         jmp     0x2c9 <_JIT_ENTRY+0x2c9>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_Dealloc
// 273: 4c 89 ef                      movq    %r13, %rdi
// 276: ff d0                         callq   *%rax
// 278: 49 8b 07                      movq    (%r15), %rax
// 27b: 48 85 c0                      testq   %rax, %rax
// 27e: 0f 8f 9d fe ff ff             jg      0x121 <_JIT_ENTRY+0x121>
// 284: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000286:  R_X86_64_64  .rodata.str1.1
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_NegativeRefcount
// 298: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 29d: 4c 89 fa                      movq    %r15, %rdx
// 2a0: ff d0                         callq   *%rax
// 2a2: 49 8b 07                      movq    (%r15), %rax
// 2a5: 85 c0                         testl   %eax, %eax
// 2a7: 78 20                         js      0x2c9 <_JIT_ENTRY+0x2c9>
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b3: ff d0                         callq   *%rax
// 2b5: 49 ff 0f                      decq    (%r15)
// 2b8: 75 0f                         jne     0x2c9 <_JIT_ENTRY+0x2c9>
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _Py_Dealloc
// 2c4: 4c 89 ff                      movq    %r15, %rdi
// 2c7: ff d0                         callq   *%rax
// 2c9: 4d 89 f4                      movq    %r14, %r12
// 2cc: 49 29 dc                      subq    %rbx, %r12
// 2cf: 49 83 c4 b8                   addq    $-0x48, %r12
// 2d3: 49 c1 ec 03                   shrq    $0x3, %r12
// 2d7: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2db: 31 c0                         xorl    %eax, %eax
// 2dd: 48 83 c4 18                   addq    $0x18, %rsp
// 2e1: 5b                            popq    %rbx
// 2e2: 41 5c                         popq    %r12
// 2e4: 41 5d                         popq    %r13
// 2e6: 41 5e                         popq    %r14
// 2e8: 41 5f                         popq    %r15
// 2ea: 5d                            popq    %rbp
// 2eb: c3                            retq
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  PyFloat_FromDouble
// 2f6: ff d0                         callq   *%rax
// 2f8: 48 85 c0                      testq   %rax, %rax
// 2fb: 74 cf                         je      0x2cc <_JIT_ENTRY+0x2cc>
// 2fd: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 302: 75 2b                         jne     0x32f <_JIT_ENTRY+0x32f>
// 304: 49 89 c4                      movq    %rax, %r12
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  PyInterpreterState_Get
// 311: ff d0                         callq   *%rax
// 313: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 31a: 49 8b 45 00                   movq    (%r13), %rax
// 31e: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 322: 49 89 4d 00                   movq    %rcx, (%r13)
// 326: 48 83 f8 01                   cmpq    $0x1, %rax
// 32a: 4c 89 e0                      movq    %r12, %rax
// 32d: 7e 31                         jle     0x360 <_JIT_ENTRY+0x360>
// 32f: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 333: 75 4b                         jne     0x380 <_JIT_ENTRY+0x380>
// 335: 49 89 c4                      movq    %rax, %r12
// 338: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033a:  R_X86_64_64  PyInterpreterState_Get
// 342: ff d0                         callq   *%rax
// 344: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 34b: 48 8b 45 00                   movq    (%rbp), %rax
// 34f: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 353: 48 89 4d 00                   movq    %rcx, (%rbp)
// 357: 4c 89 e5                      movq    %r12, %rbp
// 35a: 48 83 f8 01                   cmpq    $0x1, %rax
// 35e: 7f 23                         jg      0x383 <_JIT_ENTRY+0x383>
// 360: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000362:  R_X86_64_64  .rodata.str1.1+0x39
// 36a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000036c:  R_X86_64_64  .rodata.str1.1+0x4f
// 374: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000376:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 37e: ff d0                         callq   *%rax
// 380: 48 89 c5                      movq    %rax, %rbp
// 383: 49 89 2e                      movq    %rbp, (%r14)
// 386: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000388:  R_X86_64_64  _JIT_CONTINUE
// 390: 48 89 df                      movq    %rbx, %rdi
// 393: 4c 89 fe                      movq    %r15, %rsi
// 396: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 39b: 48 83 c4 18                   addq    $0x18, %rsp
// 39f: 5b                            popq    %rbx
// 3a0: 41 5c                         popq    %r12
// 3a2: 41 5d                         popq    %r13
// 3a4: 41 5e                         popq    %r14
// 3a6: 41 5f                         popq    %r15
// 3a8: 5d                            popq    %rbp
// 3a9: ff e0                         jmpq    *%rax
// 3ab: 
static const unsigned char _CHECK_EG_MATCHplus_BINARY_OP_ADD_FLOAT_code_body[940] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x4c, 0x8d, 0x76, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x54, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x63, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x80, 0x01, 0x00, 0x00, 0xe9, 0x9b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0xd1, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x42, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x35, 0x01, 0x00, 0x00, 0x4d, 0x8d, 0x7c, 0x24, 0xf8, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xef, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x2c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x4d, 0x89, 0x2e, 0x49, 0x89, 0x2f, 0xf2, 0x41, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x0f, 0x58, 0x45, 0x10, 0x49, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x3c, 0xf2, 0x41, 0x0f, 0x11, 0x45, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x89, 0xed, 0xe9, 0x72, 0x01, 0x00, 0x00, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x0f, 0x85, 0xd0, 0x00, 0x00, 0x00, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0x57, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0xe9, 0x0a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x20, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x9d, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xcf, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x2b, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x4c, 0x89, 0xe0, 0x7e, 0x31, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x4b, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x4c, 0x89, 0xe5, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x23, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x89, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_BINARY_OP_ADD_FLOAT_code_holes[31] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x33a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x362, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x36c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x376, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x388, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _CHECK_EG_MATCHplus_BINARY_OP_ADD_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BINARY_OP_ADD_FLOAT_data_holes[1];

// _CHECK_EG_MATCHplus_BINARY_OP_ADD_INT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BINARY_OP_ADD_INT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 19: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1d: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 21: 48 8d 5e f0                   leaq    -0x10(%rsi), %rbx
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2f: 48 89 d7                      movq    %rdx, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: ff d0                         callq   *%rax
// 37: 85 c0                         testl   %eax, %eax
// 39: 78 3c                         js      0x77 <_JIT_ENTRY+0x77>
// 3b: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 43: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 56: 48 89 e2                      movq    %rsp, %rdx
// 59: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5e: 4c 89 ef                      movq    %r13, %rdi
// 61: 4c 89 e6                      movq    %r12, %rsi
// 64: ff d0                         callq   *%rax
// 66: 89 c5                         movl    %eax, %ebp
// 68: 49 8b 45 00                   movq    (%r13), %rax
// 6c: 48 85 c0                      testq   %rax, %rax
// 6f: 7e 1c                         jle     0x8d <_JIT_ENTRY+0x8d>
// 71: 85 c0                         testl   %eax, %eax
// 73: 79 3e                         jns     0xb3 <_JIT_ENTRY+0xb3>
// 75: eb 52                         jmp     0xc9 <_JIT_ENTRY+0xc9>
// 77: 49 8b 45 00                   movq    (%r13), %rax
// 7b: 48 85 c0                      testq   %rax, %rax
// 7e: 7e 63                         jle     0xe3 <_JIT_ENTRY+0xe3>
// 80: 85 c0                         testl   %eax, %eax
// 82: 0f 89 81 00 00 00             jns     0x109 <_JIT_ENTRY+0x109>
// 88: e9 9d 00 00 00                jmp     0x12a <_JIT_ENTRY+0x12a>
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_NegativeRefcount
// a1: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a6: 4c 89 ea                      movq    %r13, %rdx
// a9: ff d0                         callq   *%rax
// ab: 49 8b 45 00                   movq    (%r13), %rax
// af: 85 c0                         testl   %eax, %eax
// b1: 78 16                         js      0xc9 <_JIT_ENTRY+0xc9>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: ff d0                         callq   *%rax
// bf: 49 ff 4d 00                   decq    (%r13)
// c3: 0f 84 c7 00 00 00             je      0x190 <_JIT_ENTRY+0x190>
// c9: 49 8b 04 24                   movq    (%r12), %rax
// cd: 48 85 c0                      testq   %rax, %rax
// d0: 0f 8e d6 00 00 00             jle     0x1ac <_JIT_ENTRY+0x1ac>
// d6: 85 c0                         testl   %eax, %eax
// d8: 0f 89 f4 00 00 00             jns     0x1d2 <_JIT_ENTRY+0x1d2>
// de: e9 05 01 00 00                jmp     0x1e8 <_JIT_ENTRY+0x1e8>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// fc: 4c 89 ea                      movq    %r13, %rdx
// ff: ff d0                         callq   *%rax
// 101: 49 8b 45 00                   movq    (%r13), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 49 ff 4d 00                   decq    (%r13)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 4c 89 ef                      movq    %r13, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7e 09                         jle     0x13c <_JIT_ENTRY+0x13c>
// 133: 85 c0                         testl   %eax, %eax
// 135: 79 2f                         jns     0x166 <_JIT_ENTRY+0x166>
// 137: e9 c1 01 00 00                jmp     0x2fd <_JIT_ENTRY+0x2fd>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 155: 4c 89 e2                      movq    %r12, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 49 8b 04 24                   movq    (%r12), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 0f 88 97 01 00 00             js      0x2fd <_JIT_ENTRY+0x2fd>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 0c 24                   decq    (%r12)
// 176: 0f 85 81 01 00 00             jne     0x2fd <_JIT_ENTRY+0x2fd>
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_Dealloc
// 186: 4c 89 e7                      movq    %r12, %rdi
// 189: ff d0                         callq   *%rax
// 18b: e9 6d 01 00 00                jmp     0x2fd <_JIT_ENTRY+0x2fd>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8b 04 24                   movq    (%r12), %rax
// 1a3: 48 85 c0                      testq   %rax, %rax
// 1a6: 0f 8f 2a ff ff ff             jg      0xd6 <_JIT_ENTRY+0xd6>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 49 8b 04 24                   movq    (%r12), %rax
// 1ce: 85 c0                         testl   %eax, %eax
// 1d0: 78 16                         js      0x1e8 <_JIT_ENTRY+0x1e8>
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1dc: ff d0                         callq   *%rax
// 1de: 49 ff 0c 24                   decq    (%r12)
// 1e2: 0f 84 e8 00 00 00             je      0x2d0 <_JIT_ENTRY+0x2d0>
// 1e8: 85 ed                         testl   %ebp, %ebp
// 1ea: 0f 88 0d 01 00 00             js      0x2fd <_JIT_ENTRY+0x2fd>
// 1f0: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f4: 48 85 ff                      testq   %rdi, %rdi
// 1f7: 0f 84 00 01 00 00             je      0x2fd <_JIT_ENTRY+0x2fd>
// 1fd: 49 83 c7 f8                   addq    $-0x8, %r15
// 201: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000203:  R_X86_64_64  _Py_NoneStruct
// 20b: 48 39 ef                      cmpq    %rbp, %rdi
// 20e: 74 10                         je      0x220 <_JIT_ENTRY+0x220>
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  PyErr_SetHandledException
// 21a: ff d0                         callq   *%rax
// 21c: 48 8b 2c 24                   movq    (%rsp), %rbp
// 220: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 225: 4c 89 23                      movq    %r12, (%rbx)
// 228: 49 89 2f                      movq    %rbp, (%r15)
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _PyLong_Add
// 235: 4c 89 e7                      movq    %r12, %rdi
// 238: 48 89 ee                      movq    %rbp, %rsi
// 23b: ff d0                         callq   *%rax
// 23d: 49 89 c5                      movq    %rax, %r13
// 240: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 244: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000246:  R_X86_64_64  PyInterpreterState_Get
// 24e: 75 3c                         jne     0x28c <_JIT_ENTRY+0x28c>
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  PyInterpreterState_Get
// 25a: ff d0                         callq   *%rax
// 25c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 263: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000265:  R_X86_64_64  PyInterpreterState_Get
// 26d: 48 ff 4d 00                   decq    (%rbp)
// 271: 75 19                         jne     0x28c <_JIT_ENTRY+0x28c>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  PyObject_Free
// 27d: 48 89 ef                      movq    %rbp, %rdi
// 280: ff d0                         callq   *%rax
// 282: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000284:  R_X86_64_64  PyInterpreterState_Get
// 28c: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 292: 75 0f                         jne     0x2a3 <_JIT_ENTRY+0x2a3>
// 294: ff d1                         callq   *%rcx
// 296: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 29d: 49 ff 0c 24                   decq    (%r12)
// 2a1: 74 46                         je      0x2e9 <_JIT_ENTRY+0x2e9>
// 2a3: 4d 85 ed                      testq   %r13, %r13
// 2a6: 74 55                         je      0x2fd <_JIT_ENTRY+0x2fd>
// 2a8: 4c 89 2b                      movq    %r13, (%rbx)
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _JIT_CONTINUE
// 2b5: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2ba: 4c 89 fe                      movq    %r15, %rsi
// 2bd: 4c 89 f2                      movq    %r14, %rdx
// 2c0: 48 83 c4 18                   addq    $0x18, %rsp
// 2c4: 5b                            popq    %rbx
// 2c5: 41 5c                         popq    %r12
// 2c7: 41 5d                         popq    %r13
// 2c9: 41 5e                         popq    %r14
// 2cb: 41 5f                         popq    %r15
// 2cd: 5d                            popq    %rbp
// 2ce: ff e0                         jmpq    *%rax
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _Py_Dealloc
// 2da: 4c 89 e7                      movq    %r12, %rdi
// 2dd: ff d0                         callq   *%rax
// 2df: 85 ed                         testl   %ebp, %ebp
// 2e1: 0f 89 09 ff ff ff             jns     0x1f0 <_JIT_ENTRY+0x1f0>
// 2e7: eb 14                         jmp     0x2fd <_JIT_ENTRY+0x2fd>
// 2e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002eb:  R_X86_64_64  PyObject_Free
// 2f3: 4c 89 e7                      movq    %r12, %rdi
// 2f6: ff d0                         callq   *%rax
// 2f8: 4d 85 ed                      testq   %r13, %r13
// 2fb: 75 ab                         jne     0x2a8 <_JIT_ENTRY+0x2a8>
// 2fd: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 302: 48 29 c3                      subq    %rax, %rbx
// 305: 48 83 c3 b8                   addq    $-0x48, %rbx
// 309: 48 c1 eb 03                   shrq    $0x3, %rbx
// 30d: 89 58 40                      movl    %ebx, 0x40(%rax)
// 310: 31 c0                         xorl    %eax, %eax
// 312: 48 83 c4 18                   addq    $0x18, %rsp
// 316: 5b                            popq    %rbx
// 317: 41 5c                         popq    %r12
// 319: 41 5d                         popq    %r13
// 31b: 41 5e                         popq    %r14
// 31d: 41 5f                         popq    %r15
// 31f: 5d                            popq    %rbp
// 320: c3                            retq
// 321: 
static const unsigned char _CHECK_EG_MATCHplus_BINARY_OP_ADD_INT_code_body[802] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0x8d, 0x5e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0xc1, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x97, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x81, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x6d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xe8, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x0d, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x00, 0x01, 0x00, 0x00, 0x49, 0x83, 0xc7, 0xf8, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xef, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x2c, 0x24, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x4c, 0x89, 0x23, 0x49, 0x89, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x0f, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x46, 0x4d, 0x85, 0xed, 0x74, 0x55, 0x4c, 0x89, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x09, 0xff, 0xff, 0xff, 0xeb, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0xab, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x58, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_BINARY_OP_ADD_INT_code_holes[29] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Add, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_BINARY_OP_ADD_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BINARY_OP_ADD_INT_data_holes[1];

// _CHECK_EG_MATCHplus_BINARY_OP_ADD_UNICODE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BINARY_OP_ADD_UNICODE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 8d 5e f0                   leaq    -0x10(%rsi), %rbx
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 e6                      movq    %r12, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 1c                         jle     0x90 <_JIT_ENTRY+0x90>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3e                         jns     0xb6 <_JIT_ENTRY+0xb6>
// 78: eb 52                         jmp     0xcc <_JIT_ENTRY+0xcc>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 63                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 83: 85 c0                         testl   %eax, %eax
// 85: 0f 89 81 00 00 00             jns     0x10c <_JIT_ENTRY+0x10c>
// 8b: e9 9d 00 00 00                jmp     0x12d <_JIT_ENTRY+0x12d>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_NegativeRefcount
// a4: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a9: 4c 89 ea                      movq    %r13, %rdx
// ac: ff d0                         callq   *%rax
// ae: 49 8b 45 00                   movq    (%r13), %rax
// b2: 85 c0                         testl   %eax, %eax
// b4: 78 16                         js      0xcc <_JIT_ENTRY+0xcc>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c0: ff d0                         callq   *%rax
// c2: 49 ff 4d 00                   decq    (%r13)
// c6: 0f 84 c7 00 00 00             je      0x193 <_JIT_ENTRY+0x193>
// cc: 49 8b 04 24                   movq    (%r12), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 0f 8e d6 00 00 00             jle     0x1af <_JIT_ENTRY+0x1af>
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 89 f4 00 00 00             jns     0x1d5 <_JIT_ENTRY+0x1d5>
// e1: e9 05 01 00 00                jmp     0x1eb <_JIT_ENTRY+0x1eb>
// e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_NegativeRefcount
// fa: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ff: 4c 89 ea                      movq    %r13, %rdx
// 102: ff d0                         callq   *%rax
// 104: 49 8b 45 00                   movq    (%r13), %rax
// 108: 85 c0                         testl   %eax, %eax
// 10a: 78 21                         js      0x12d <_JIT_ENTRY+0x12d>
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 116: ff d0                         callq   *%rax
// 118: 49 ff 4d 00                   decq    (%r13)
// 11c: 75 0f                         jne     0x12d <_JIT_ENTRY+0x12d>
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _Py_Dealloc
// 128: 4c 89 ef                      movq    %r13, %rdi
// 12b: ff d0                         callq   *%rax
// 12d: 49 8b 04 24                   movq    (%r12), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 09                         jle     0x13f <_JIT_ENTRY+0x13f>
// 136: 85 c0                         testl   %eax, %eax
// 138: 79 2f                         jns     0x169 <_JIT_ENTRY+0x169>
// 13a: e9 d3 01 00 00                jmp     0x312 <_JIT_ENTRY+0x312>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 a9 01 00 00             js      0x312 <_JIT_ENTRY+0x312>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 0c 24                   decq    (%r12)
// 179: 0f 85 93 01 00 00             jne     0x312 <_JIT_ENTRY+0x312>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_Dealloc
// 189: 4c 89 e7                      movq    %r12, %rdi
// 18c: ff d0                         callq   *%rax
// 18e: e9 7f 01 00 00                jmp     0x312 <_JIT_ENTRY+0x312>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_Dealloc
// 19d: 4c 89 ef                      movq    %r13, %rdi
// 1a0: ff d0                         callq   *%rax
// 1a2: 49 8b 04 24                   movq    (%r12), %rax
// 1a6: 48 85 c0                      testq   %rax, %rax
// 1a9: 0f 8f 2a ff ff ff             jg      0xd9 <_JIT_ENTRY+0xd9>
// 1af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b1:  R_X86_64_64  .rodata.str1.1
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_NegativeRefcount
// 1c3: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c8: 4c 89 e2                      movq    %r12, %rdx
// 1cb: ff d0                         callq   *%rax
// 1cd: 49 8b 04 24                   movq    (%r12), %rax
// 1d1: 85 c0                         testl   %eax, %eax
// 1d3: 78 16                         js      0x1eb <_JIT_ENTRY+0x1eb>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1df: ff d0                         callq   *%rax
// 1e1: 49 ff 0c 24                   decq    (%r12)
// 1e5: 0f 84 f0 00 00 00             je      0x2db <_JIT_ENTRY+0x2db>
// 1eb: 85 ed                         testl   %ebp, %ebp
// 1ed: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 1f2: 0f 88 1a 01 00 00             js      0x312 <_JIT_ENTRY+0x312>
// 1f8: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1fc: 48 85 ff                      testq   %rdi, %rdi
// 1ff: 0f 84 0d 01 00 00             je      0x312 <_JIT_ENTRY+0x312>
// 205: 49 83 c7 f8                   addq    $-0x8, %r15
// 209: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000020b:  R_X86_64_64  _Py_NoneStruct
// 213: 4c 39 e7                      cmpq    %r12, %rdi
// 216: 74 10                         je      0x228 <_JIT_ENTRY+0x228>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  PyErr_SetHandledException
// 222: ff d0                         callq   *%rax
// 224: 4c 8b 24 24                   movq    (%rsp), %r12
// 228: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 22d: 48 89 2b                      movq    %rbp, (%rbx)
// 230: 4d 89 27                      movq    %r12, (%r15)
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  PyUnicode_Concat
// 23d: 48 89 ef                      movq    %rbp, %rdi
// 240: 4c 89 e6                      movq    %r12, %rsi
// 243: ff d0                         callq   *%rax
// 245: 49 89 c5                      movq    %rax, %r13
// 248: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 24c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024e:  R_X86_64_64  PyInterpreterState_Get
// 256: 75 3c                         jne     0x294 <_JIT_ENTRY+0x294>
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  PyInterpreterState_Get
// 262: ff d0                         callq   *%rax
// 264: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 26b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000026d:  R_X86_64_64  PyInterpreterState_Get
// 275: 48 ff 4d 00                   decq    (%rbp)
// 279: 75 19                         jne     0x294 <_JIT_ENTRY+0x294>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _PyUnicode_ExactDealloc
// 285: 48 89 ef                      movq    %rbp, %rdi
// 288: ff d0                         callq   *%rax
// 28a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000028c:  R_X86_64_64  PyInterpreterState_Get
// 294: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 29a: 75 0f                         jne     0x2ab <_JIT_ENTRY+0x2ab>
// 29c: ff d1                         callq   *%rcx
// 29e: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2a5: 49 ff 0c 24                   decq    (%r12)
// 2a9: 74 4e                         je      0x2f9 <_JIT_ENTRY+0x2f9>
// 2ab: 4d 85 ed                      testq   %r13, %r13
// 2ae: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 2b3: 74 5d                         je      0x312 <_JIT_ENTRY+0x312>
// 2b5: 4c 89 2b                      movq    %r13, (%rbx)
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _JIT_CONTINUE
// 2c2: 48 89 ef                      movq    %rbp, %rdi
// 2c5: 4c 89 fe                      movq    %r15, %rsi
// 2c8: 4c 89 f2                      movq    %r14, %rdx
// 2cb: 48 83 c4 18                   addq    $0x18, %rsp
// 2cf: 5b                            popq    %rbx
// 2d0: 41 5c                         popq    %r12
// 2d2: 41 5d                         popq    %r13
// 2d4: 41 5e                         popq    %r14
// 2d6: 41 5f                         popq    %r15
// 2d8: 5d                            popq    %rbp
// 2d9: ff e0                         jmpq    *%rax
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _Py_Dealloc
// 2e5: 4c 89 e7                      movq    %r12, %rdi
// 2e8: ff d0                         callq   *%rax
// 2ea: 85 ed                         testl   %ebp, %ebp
// 2ec: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 2f1: 0f 89 01 ff ff ff             jns     0x1f8 <_JIT_ENTRY+0x1f8>
// 2f7: eb 19                         jmp     0x312 <_JIT_ENTRY+0x312>
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _PyUnicode_ExactDealloc
// 303: 4c 89 e7                      movq    %r12, %rdi
// 306: ff d0                         callq   *%rax
// 308: 4d 85 ed                      testq   %r13, %r13
// 30b: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 310: 75 a3                         jne     0x2b5 <_JIT_ENTRY+0x2b5>
// 312: 48 29 eb                      subq    %rbp, %rbx
// 315: 48 83 c3 b8                   addq    $-0x48, %rbx
// 319: 48 c1 eb 03                   shrq    $0x3, %rbx
// 31d: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 320: 31 c0                         xorl    %eax, %eax
// 322: 48 83 c4 18                   addq    $0x18, %rsp
// 326: 5b                            popq    %rbx
// 327: 41 5c                         popq    %r12
// 329: 41 5d                         popq    %r13
// 32b: 41 5e                         popq    %r14
// 32d: 41 5f                         popq    %r15
// 32f: 5d                            popq    %rbp
// 330: c3                            retq
// 331: 
static const unsigned char _CHECK_EG_MATCHplus_BINARY_OP_ADD_UNICODE_code_body[818] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0x8d, 0x5e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0xd3, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xa9, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x93, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x7f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xf0, 0x00, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x0f, 0x88, 0x1a, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x0d, 0x01, 0x00, 0x00, 0x49, 0x83, 0xc7, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x2b, 0x4d, 0x89, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x0f, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x4e, 0x4d, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x74, 0x5d, 0x4c, 0x89, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x0f, 0x89, 0x01, 0xff, 0xff, 0xff, 0xeb, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x75, 0xa3, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_BINARY_OP_ADD_UNICODE_code_holes[29] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Concat, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_BINARY_OP_ADD_UNICODE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BINARY_OP_ADD_UNICODE_data_holes[1];

// _CHECK_EG_MATCHplus_BINARY_OP_MULTIPLY_FLOAT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BINARY_OP_MULTIPLY_FLOAT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 4c 8d 76 f0                   leaq    -0x10(%rsi), %r14
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 fe                      movq    %r15, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 fe                      movq    %r15, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 56                         jle     0xd9 <_JIT_ENTRY+0xd9>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 78                         jns     0xff <_JIT_ENTRY+0xff>
// 87: e9 89 00 00 00                jmp     0x115 <_JIT_ENTRY+0x115>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 4c 89 ea                      movq    %r13, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 45 00                   movq    (%r13), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 4d 00                   decq    (%r13)
// c2: 74 6a                         je      0x12e <_JIT_ENTRY+0x12e>
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7e 79                         jle     0x145 <_JIT_ENTRY+0x145>
// cc: 85 c0                         testl   %eax, %eax
// ce: 0f 89 96 00 00 00             jns     0x16a <_JIT_ENTRY+0x16a>
// d4: e9 a6 00 00 00                jmp     0x17f <_JIT_ENTRY+0x17f>
// d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000db:  R_X86_64_64  .rodata.str1.1
// e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e5:  R_X86_64_64  _Py_NegativeRefcount
// ed: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f2: 4c 89 ea                      movq    %r13, %rdx
// f5: ff d0                         callq   *%rax
// f7: 49 8b 45 00                   movq    (%r13), %rax
// fb: 85 c0                         testl   %eax, %eax
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 4d 00                   decq    (%r13)
// 10f: 0f 84 54 01 00 00             je      0x269 <_JIT_ENTRY+0x269>
// 115: 49 8b 07                      movq    (%r15), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 0f 8e 63 01 00 00             jle     0x284 <_JIT_ENTRY+0x284>
// 121: 85 c0                         testl   %eax, %eax
// 123: 0f 89 80 01 00 00             jns     0x2a9 <_JIT_ENTRY+0x2a9>
// 129: e9 9b 01 00 00                jmp     0x2c9 <_JIT_ENTRY+0x2c9>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_Dealloc
// 138: 4c 89 ef                      movq    %r13, %rdi
// 13b: ff d0                         callq   *%rax
// 13d: 49 8b 07                      movq    (%r15), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 87                         jg      0xcc <_JIT_ENTRY+0xcc>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15e: 4c 89 fa                      movq    %r15, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 07                      movq    (%r15), %rax
// 166: 85 c0                         testl   %eax, %eax
// 168: 78 15                         js      0x17f <_JIT_ENTRY+0x17f>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 0f                      decq    (%r15)
// 179: 0f 84 d1 00 00 00             je      0x250 <_JIT_ENTRY+0x250>
// 17f: 85 ed                         testl   %ebp, %ebp
// 181: 0f 88 42 01 00 00             js      0x2c9 <_JIT_ENTRY+0x2c9>
// 187: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 35 01 00 00             je      0x2c9 <_JIT_ENTRY+0x2c9>
// 194: 4d 8d 7c 24 f8                leaq    -0x8(%r12), %r15
// 199: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000019b:  R_X86_64_64  _Py_NoneStruct
// 1a3: 48 39 ef                      cmpq    %rbp, %rdi
// 1a6: 74 10                         je      0x1b8 <_JIT_ENTRY+0x1b8>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  PyErr_SetHandledException
// 1b2: ff d0                         callq   *%rax
// 1b4: 48 8b 2c 24                   movq    (%rsp), %rbp
// 1b8: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 1bd: 4d 89 2e                      movq    %r13, (%r14)
// 1c0: 49 89 2f                      movq    %rbp, (%r15)
// 1c3: f2 41 0f 10 45 10             movsd   0x10(%r13), %xmm0       # xmm0 = mem[0],zero
// 1c9: f2 0f 59 45 10                mulsd   0x10(%rbp), %xmm0
// 1ce: 49 83 7d 00 01                cmpq    $0x1, (%r13)
// 1d3: 75 3c                         jne     0x211 <_JIT_ENTRY+0x211>
// 1d5: f2 41 0f 11 45 10             movsd   %xmm0, 0x10(%r13)
// 1db: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 1df: 75 28                         jne     0x209 <_JIT_ENTRY+0x209>
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  PyInterpreterState_Get
// 1eb: ff d0                         callq   *%rax
// 1ed: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1f4: 48 ff 4d 00                   decq    (%rbp)
// 1f8: 75 0f                         jne     0x209 <_JIT_ENTRY+0x209>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _PyFloat_ExactDealloc
// 204: 48 89 ef                      movq    %rbp, %rdi
// 207: ff d0                         callq   *%rax
// 209: 4c 89 ed                      movq    %r13, %rbp
// 20c: e9 72 01 00 00                jmp     0x383 <_JIT_ENTRY+0x383>
// 211: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// 216: 0f 85 d0 00 00 00             jne     0x2ec <_JIT_ENTRY+0x2ec>
// 21c: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// 221: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 226: 0f 85 57 01 00 00             jne     0x383 <_JIT_ENTRY+0x383>
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  PyInterpreterState_Get
// 236: ff d0                         callq   *%rax
// 238: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 23f: 49 8b 45 00                   movq    (%r13), %rax
// 243: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 247: 49 89 4d 00                   movq    %rcx, (%r13)
// 24b: e9 0a 01 00 00                jmp     0x35a <_JIT_ENTRY+0x35a>
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _Py_Dealloc
// 25a: 4c 89 ff                      movq    %r15, %rdi
// 25d: ff d0                         callq   *%rax
// 25f: 85 ed                         testl   %ebp, %ebp
// 261: 0f 89 20 ff ff ff             jns     0x187 <_JIT_ENTRY+0x187>
// 267: eb 60                         jmp     0x2c9 <_JIT_ENTRY+0x2c9>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_Dealloc
// 273: 4c 89 ef                      movq    %r13, %rdi
// 276: ff d0                         callq   *%rax
// 278: 49 8b 07                      movq    (%r15), %rax
// 27b: 48 85 c0                      testq   %rax, %rax
// 27e: 0f 8f 9d fe ff ff             jg      0x121 <_JIT_ENTRY+0x121>
// 284: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000286:  R_X86_64_64  .rodata.str1.1
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_NegativeRefcount
// 298: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 29d: 4c 89 fa                      movq    %r15, %rdx
// 2a0: ff d0                         callq   *%rax
// 2a2: 49 8b 07                      movq    (%r15), %rax
// 2a5: 85 c0                         testl   %eax, %eax
// 2a7: 78 20                         js      0x2c9 <_JIT_ENTRY+0x2c9>
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b3: ff d0                         callq   *%rax
// 2b5: 49 ff 0f                      decq    (%r15)
// 2b8: 75 0f                         jne     0x2c9 <_JIT_ENTRY+0x2c9>
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _Py_Dealloc
// 2c4: 4c 89 ff                      movq    %r15, %rdi
// 2c7: ff d0                         callq   *%rax
// 2c9: 4d 89 f4                      movq    %r14, %r12
// 2cc: 49 29 dc                      subq    %rbx, %r12
// 2cf: 49 83 c4 b8                   addq    $-0x48, %r12
// 2d3: 49 c1 ec 03                   shrq    $0x3, %r12
// 2d7: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2db: 31 c0                         xorl    %eax, %eax
// 2dd: 48 83 c4 18                   addq    $0x18, %rsp
// 2e1: 5b                            popq    %rbx
// 2e2: 41 5c                         popq    %r12
// 2e4: 41 5d                         popq    %r13
// 2e6: 41 5e                         popq    %r14
// 2e8: 41 5f                         popq    %r15
// 2ea: 5d                            popq    %rbp
// 2eb: c3                            retq
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  PyFloat_FromDouble
// 2f6: ff d0                         callq   *%rax
// 2f8: 48 85 c0                      testq   %rax, %rax
// 2fb: 74 cf                         je      0x2cc <_JIT_ENTRY+0x2cc>
// 2fd: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 302: 75 2b                         jne     0x32f <_JIT_ENTRY+0x32f>
// 304: 49 89 c4                      movq    %rax, %r12
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  PyInterpreterState_Get
// 311: ff d0                         callq   *%rax
// 313: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 31a: 49 8b 45 00                   movq    (%r13), %rax
// 31e: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 322: 49 89 4d 00                   movq    %rcx, (%r13)
// 326: 48 83 f8 01                   cmpq    $0x1, %rax
// 32a: 4c 89 e0                      movq    %r12, %rax
// 32d: 7e 31                         jle     0x360 <_JIT_ENTRY+0x360>
// 32f: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 333: 75 4b                         jne     0x380 <_JIT_ENTRY+0x380>
// 335: 49 89 c4                      movq    %rax, %r12
// 338: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033a:  R_X86_64_64  PyInterpreterState_Get
// 342: ff d0                         callq   *%rax
// 344: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 34b: 48 8b 45 00                   movq    (%rbp), %rax
// 34f: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 353: 48 89 4d 00                   movq    %rcx, (%rbp)
// 357: 4c 89 e5                      movq    %r12, %rbp
// 35a: 48 83 f8 01                   cmpq    $0x1, %rax
// 35e: 7f 23                         jg      0x383 <_JIT_ENTRY+0x383>
// 360: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000362:  R_X86_64_64  .rodata.str1.1+0x39
// 36a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000036c:  R_X86_64_64  .rodata.str1.1+0x4f
// 374: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000376:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 37e: ff d0                         callq   *%rax
// 380: 48 89 c5                      movq    %rax, %rbp
// 383: 49 89 2e                      movq    %rbp, (%r14)
// 386: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000388:  R_X86_64_64  _JIT_CONTINUE
// 390: 48 89 df                      movq    %rbx, %rdi
// 393: 4c 89 fe                      movq    %r15, %rsi
// 396: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 39b: 48 83 c4 18                   addq    $0x18, %rsp
// 39f: 5b                            popq    %rbx
// 3a0: 41 5c                         popq    %r12
// 3a2: 41 5d                         popq    %r13
// 3a4: 41 5e                         popq    %r14
// 3a6: 41 5f                         popq    %r15
// 3a8: 5d                            popq    %rbp
// 3a9: ff e0                         jmpq    *%rax
// 3ab: 
static const unsigned char _CHECK_EG_MATCHplus_BINARY_OP_MULTIPLY_FLOAT_code_body[940] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x4c, 0x8d, 0x76, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x54, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x63, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x80, 0x01, 0x00, 0x00, 0xe9, 0x9b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0xd1, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x42, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x35, 0x01, 0x00, 0x00, 0x4d, 0x8d, 0x7c, 0x24, 0xf8, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xef, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x2c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x4d, 0x89, 0x2e, 0x49, 0x89, 0x2f, 0xf2, 0x41, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x0f, 0x59, 0x45, 0x10, 0x49, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x3c, 0xf2, 0x41, 0x0f, 0x11, 0x45, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x89, 0xed, 0xe9, 0x72, 0x01, 0x00, 0x00, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x0f, 0x85, 0xd0, 0x00, 0x00, 0x00, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0x57, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0xe9, 0x0a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x20, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x9d, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xcf, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x2b, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x4c, 0x89, 0xe0, 0x7e, 0x31, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x4b, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x4c, 0x89, 0xe5, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x23, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x89, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_BINARY_OP_MULTIPLY_FLOAT_code_holes[31] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x33a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x362, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x36c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x376, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x388, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _CHECK_EG_MATCHplus_BINARY_OP_MULTIPLY_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BINARY_OP_MULTIPLY_FLOAT_data_holes[1];

// _CHECK_EG_MATCHplus_BINARY_OP_MULTIPLY_INT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BINARY_OP_MULTIPLY_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 19: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1d: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 21: 48 8d 5e f0                   leaq    -0x10(%rsi), %rbx
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2f: 48 89 d7                      movq    %rdx, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: ff d0                         callq   *%rax
// 37: 85 c0                         testl   %eax, %eax
// 39: 78 3c                         js      0x77 <_JIT_ENTRY+0x77>
// 3b: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 43: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 56: 48 89 e2                      movq    %rsp, %rdx
// 59: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5e: 4c 89 ef                      movq    %r13, %rdi
// 61: 4c 89 e6                      movq    %r12, %rsi
// 64: ff d0                         callq   *%rax
// 66: 89 c5                         movl    %eax, %ebp
// 68: 49 8b 45 00                   movq    (%r13), %rax
// 6c: 48 85 c0                      testq   %rax, %rax
// 6f: 7e 1c                         jle     0x8d <_JIT_ENTRY+0x8d>
// 71: 85 c0                         testl   %eax, %eax
// 73: 79 3e                         jns     0xb3 <_JIT_ENTRY+0xb3>
// 75: eb 52                         jmp     0xc9 <_JIT_ENTRY+0xc9>
// 77: 49 8b 45 00                   movq    (%r13), %rax
// 7b: 48 85 c0                      testq   %rax, %rax
// 7e: 7e 63                         jle     0xe3 <_JIT_ENTRY+0xe3>
// 80: 85 c0                         testl   %eax, %eax
// 82: 0f 89 81 00 00 00             jns     0x109 <_JIT_ENTRY+0x109>
// 88: e9 9d 00 00 00                jmp     0x12a <_JIT_ENTRY+0x12a>
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_NegativeRefcount
// a1: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a6: 4c 89 ea                      movq    %r13, %rdx
// a9: ff d0                         callq   *%rax
// ab: 49 8b 45 00                   movq    (%r13), %rax
// af: 85 c0                         testl   %eax, %eax
// b1: 78 16                         js      0xc9 <_JIT_ENTRY+0xc9>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: ff d0                         callq   *%rax
// bf: 49 ff 4d 00                   decq    (%r13)
// c3: 0f 84 c7 00 00 00             je      0x190 <_JIT_ENTRY+0x190>
// c9: 49 8b 04 24                   movq    (%r12), %rax
// cd: 48 85 c0                      testq   %rax, %rax
// d0: 0f 8e d6 00 00 00             jle     0x1ac <_JIT_ENTRY+0x1ac>
// d6: 85 c0                         testl   %eax, %eax
// d8: 0f 89 f4 00 00 00             jns     0x1d2 <_JIT_ENTRY+0x1d2>
// de: e9 05 01 00 00                jmp     0x1e8 <_JIT_ENTRY+0x1e8>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// fc: 4c 89 ea                      movq    %r13, %rdx
// ff: ff d0                         callq   *%rax
// 101: 49 8b 45 00                   movq    (%r13), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 49 ff 4d 00                   decq    (%r13)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 4c 89 ef                      movq    %r13, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7e 09                         jle     0x13c <_JIT_ENTRY+0x13c>
// 133: 85 c0                         testl   %eax, %eax
// 135: 79 2f                         jns     0x166 <_JIT_ENTRY+0x166>
// 137: e9 c1 01 00 00                jmp     0x2fd <_JIT_ENTRY+0x2fd>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 155: 4c 89 e2                      movq    %r12, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 49 8b 04 24                   movq    (%r12), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 0f 88 97 01 00 00             js      0x2fd <_JIT_ENTRY+0x2fd>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 0c 24                   decq    (%r12)
// 176: 0f 85 81 01 00 00             jne     0x2fd <_JIT_ENTRY+0x2fd>
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_Dealloc
// 186: 4c 89 e7                      movq    %r12, %rdi
// 189: ff d0                         callq   *%rax
// 18b: e9 6d 01 00 00                jmp     0x2fd <_JIT_ENTRY+0x2fd>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8b 04 24                   movq    (%r12), %rax
// 1a3: 48 85 c0                      testq   %rax, %rax
// 1a6: 0f 8f 2a ff ff ff             jg      0xd6 <_JIT_ENTRY+0xd6>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 49 8b 04 24                   movq    (%r12), %rax
// 1ce: 85 c0                         testl   %eax, %eax
// 1d0: 78 16                         js      0x1e8 <_JIT_ENTRY+0x1e8>
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1dc: ff d0                         callq   *%rax
// 1de: 49 ff 0c 24                   decq    (%r12)
// 1e2: 0f 84 e8 00 00 00             je      0x2d0 <_JIT_ENTRY+0x2d0>
// 1e8: 85 ed                         testl   %ebp, %ebp
// 1ea: 0f 88 0d 01 00 00             js      0x2fd <_JIT_ENTRY+0x2fd>
// 1f0: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f4: 48 85 ff                      testq   %rdi, %rdi
// 1f7: 0f 84 00 01 00 00             je      0x2fd <_JIT_ENTRY+0x2fd>
// 1fd: 49 83 c7 f8                   addq    $-0x8, %r15
// 201: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000203:  R_X86_64_64  _Py_NoneStruct
// 20b: 48 39 ef                      cmpq    %rbp, %rdi
// 20e: 74 10                         je      0x220 <_JIT_ENTRY+0x220>
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  PyErr_SetHandledException
// 21a: ff d0                         callq   *%rax
// 21c: 48 8b 2c 24                   movq    (%rsp), %rbp
// 220: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 225: 4c 89 23                      movq    %r12, (%rbx)
// 228: 49 89 2f                      movq    %rbp, (%r15)
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _PyLong_Multiply
// 235: 4c 89 e7                      movq    %r12, %rdi
// 238: 48 89 ee                      movq    %rbp, %rsi
// 23b: ff d0                         callq   *%rax
// 23d: 49 89 c5                      movq    %rax, %r13
// 240: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 244: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000246:  R_X86_64_64  PyInterpreterState_Get
// 24e: 75 3c                         jne     0x28c <_JIT_ENTRY+0x28c>
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  PyInterpreterState_Get
// 25a: ff d0                         callq   *%rax
// 25c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 263: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000265:  R_X86_64_64  PyInterpreterState_Get
// 26d: 48 ff 4d 00                   decq    (%rbp)
// 271: 75 19                         jne     0x28c <_JIT_ENTRY+0x28c>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  PyObject_Free
// 27d: 48 89 ef                      movq    %rbp, %rdi
// 280: ff d0                         callq   *%rax
// 282: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000284:  R_X86_64_64  PyInterpreterState_Get
// 28c: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 292: 75 0f                         jne     0x2a3 <_JIT_ENTRY+0x2a3>
// 294: ff d1                         callq   *%rcx
// 296: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 29d: 49 ff 0c 24                   decq    (%r12)
// 2a1: 74 46                         je      0x2e9 <_JIT_ENTRY+0x2e9>
// 2a3: 4d 85 ed                      testq   %r13, %r13
// 2a6: 74 55                         je      0x2fd <_JIT_ENTRY+0x2fd>
// 2a8: 4c 89 2b                      movq    %r13, (%rbx)
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _JIT_CONTINUE
// 2b5: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2ba: 4c 89 fe                      movq    %r15, %rsi
// 2bd: 4c 89 f2                      movq    %r14, %rdx
// 2c0: 48 83 c4 18                   addq    $0x18, %rsp
// 2c4: 5b                            popq    %rbx
// 2c5: 41 5c                         popq    %r12
// 2c7: 41 5d                         popq    %r13
// 2c9: 41 5e                         popq    %r14
// 2cb: 41 5f                         popq    %r15
// 2cd: 5d                            popq    %rbp
// 2ce: ff e0                         jmpq    *%rax
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _Py_Dealloc
// 2da: 4c 89 e7                      movq    %r12, %rdi
// 2dd: ff d0                         callq   *%rax
// 2df: 85 ed                         testl   %ebp, %ebp
// 2e1: 0f 89 09 ff ff ff             jns     0x1f0 <_JIT_ENTRY+0x1f0>
// 2e7: eb 14                         jmp     0x2fd <_JIT_ENTRY+0x2fd>
// 2e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002eb:  R_X86_64_64  PyObject_Free
// 2f3: 4c 89 e7                      movq    %r12, %rdi
// 2f6: ff d0                         callq   *%rax
// 2f8: 4d 85 ed                      testq   %r13, %r13
// 2fb: 75 ab                         jne     0x2a8 <_JIT_ENTRY+0x2a8>
// 2fd: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 302: 48 29 c3                      subq    %rax, %rbx
// 305: 48 83 c3 b8                   addq    $-0x48, %rbx
// 309: 48 c1 eb 03                   shrq    $0x3, %rbx
// 30d: 89 58 40                      movl    %ebx, 0x40(%rax)
// 310: 31 c0                         xorl    %eax, %eax
// 312: 48 83 c4 18                   addq    $0x18, %rsp
// 316: 5b                            popq    %rbx
// 317: 41 5c                         popq    %r12
// 319: 41 5d                         popq    %r13
// 31b: 41 5e                         popq    %r14
// 31d: 41 5f                         popq    %r15
// 31f: 5d                            popq    %rbp
// 320: c3                            retq
// 321: 
static const unsigned char _CHECK_EG_MATCHplus_BINARY_OP_MULTIPLY_INT_code_body[802] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0x8d, 0x5e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0xc1, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x97, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x81, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x6d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xe8, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x0d, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x00, 0x01, 0x00, 0x00, 0x49, 0x83, 0xc7, 0xf8, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xef, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x2c, 0x24, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x4c, 0x89, 0x23, 0x49, 0x89, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x0f, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x46, 0x4d, 0x85, 0xed, 0x74, 0x55, 0x4c, 0x89, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x09, 0xff, 0xff, 0xff, 0xeb, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0xab, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x58, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_BINARY_OP_MULTIPLY_INT_code_holes[29] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Multiply, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_BINARY_OP_MULTIPLY_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BINARY_OP_MULTIPLY_INT_data_holes[1];

// _CHECK_EG_MATCHplus_BINARY_OP_SUBTRACT_FLOAT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BINARY_OP_SUBTRACT_FLOAT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 4c 8d 76 f0                   leaq    -0x10(%rsi), %r14
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 fe                      movq    %r15, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 fe                      movq    %r15, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 56                         jle     0xd9 <_JIT_ENTRY+0xd9>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 78                         jns     0xff <_JIT_ENTRY+0xff>
// 87: e9 89 00 00 00                jmp     0x115 <_JIT_ENTRY+0x115>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 4c 89 ea                      movq    %r13, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 45 00                   movq    (%r13), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 4d 00                   decq    (%r13)
// c2: 74 6a                         je      0x12e <_JIT_ENTRY+0x12e>
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7e 79                         jle     0x145 <_JIT_ENTRY+0x145>
// cc: 85 c0                         testl   %eax, %eax
// ce: 0f 89 96 00 00 00             jns     0x16a <_JIT_ENTRY+0x16a>
// d4: e9 a6 00 00 00                jmp     0x17f <_JIT_ENTRY+0x17f>
// d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000db:  R_X86_64_64  .rodata.str1.1
// e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e5:  R_X86_64_64  _Py_NegativeRefcount
// ed: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f2: 4c 89 ea                      movq    %r13, %rdx
// f5: ff d0                         callq   *%rax
// f7: 49 8b 45 00                   movq    (%r13), %rax
// fb: 85 c0                         testl   %eax, %eax
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 4d 00                   decq    (%r13)
// 10f: 0f 84 54 01 00 00             je      0x269 <_JIT_ENTRY+0x269>
// 115: 49 8b 07                      movq    (%r15), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 0f 8e 63 01 00 00             jle     0x284 <_JIT_ENTRY+0x284>
// 121: 85 c0                         testl   %eax, %eax
// 123: 0f 89 80 01 00 00             jns     0x2a9 <_JIT_ENTRY+0x2a9>
// 129: e9 9b 01 00 00                jmp     0x2c9 <_JIT_ENTRY+0x2c9>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_Dealloc
// 138: 4c 89 ef                      movq    %r13, %rdi
// 13b: ff d0                         callq   *%rax
// 13d: 49 8b 07                      movq    (%r15), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 87                         jg      0xcc <_JIT_ENTRY+0xcc>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15e: 4c 89 fa                      movq    %r15, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 07                      movq    (%r15), %rax
// 166: 85 c0                         testl   %eax, %eax
// 168: 78 15                         js      0x17f <_JIT_ENTRY+0x17f>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 0f                      decq    (%r15)
// 179: 0f 84 d1 00 00 00             je      0x250 <_JIT_ENTRY+0x250>
// 17f: 85 ed                         testl   %ebp, %ebp
// 181: 0f 88 42 01 00 00             js      0x2c9 <_JIT_ENTRY+0x2c9>
// 187: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 35 01 00 00             je      0x2c9 <_JIT_ENTRY+0x2c9>
// 194: 4d 8d 7c 24 f8                leaq    -0x8(%r12), %r15
// 199: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000019b:  R_X86_64_64  _Py_NoneStruct
// 1a3: 48 39 ef                      cmpq    %rbp, %rdi
// 1a6: 74 10                         je      0x1b8 <_JIT_ENTRY+0x1b8>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  PyErr_SetHandledException
// 1b2: ff d0                         callq   *%rax
// 1b4: 48 8b 2c 24                   movq    (%rsp), %rbp
// 1b8: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 1bd: 4d 89 2e                      movq    %r13, (%r14)
// 1c0: 49 89 2f                      movq    %rbp, (%r15)
// 1c3: f2 41 0f 10 45 10             movsd   0x10(%r13), %xmm0       # xmm0 = mem[0],zero
// 1c9: f2 0f 5c 45 10                subsd   0x10(%rbp), %xmm0
// 1ce: 49 83 7d 00 01                cmpq    $0x1, (%r13)
// 1d3: 75 3c                         jne     0x211 <_JIT_ENTRY+0x211>
// 1d5: f2 41 0f 11 45 10             movsd   %xmm0, 0x10(%r13)
// 1db: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 1df: 75 28                         jne     0x209 <_JIT_ENTRY+0x209>
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  PyInterpreterState_Get
// 1eb: ff d0                         callq   *%rax
// 1ed: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1f4: 48 ff 4d 00                   decq    (%rbp)
// 1f8: 75 0f                         jne     0x209 <_JIT_ENTRY+0x209>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _PyFloat_ExactDealloc
// 204: 48 89 ef                      movq    %rbp, %rdi
// 207: ff d0                         callq   *%rax
// 209: 4c 89 ed                      movq    %r13, %rbp
// 20c: e9 72 01 00 00                jmp     0x383 <_JIT_ENTRY+0x383>
// 211: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// 216: 0f 85 d0 00 00 00             jne     0x2ec <_JIT_ENTRY+0x2ec>
// 21c: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// 221: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 226: 0f 85 57 01 00 00             jne     0x383 <_JIT_ENTRY+0x383>
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  PyInterpreterState_Get
// 236: ff d0                         callq   *%rax
// 238: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 23f: 49 8b 45 00                   movq    (%r13), %rax
// 243: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 247: 49 89 4d 00                   movq    %rcx, (%r13)
// 24b: e9 0a 01 00 00                jmp     0x35a <_JIT_ENTRY+0x35a>
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _Py_Dealloc
// 25a: 4c 89 ff                      movq    %r15, %rdi
// 25d: ff d0                         callq   *%rax
// 25f: 85 ed                         testl   %ebp, %ebp
// 261: 0f 89 20 ff ff ff             jns     0x187 <_JIT_ENTRY+0x187>
// 267: eb 60                         jmp     0x2c9 <_JIT_ENTRY+0x2c9>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_Dealloc
// 273: 4c 89 ef                      movq    %r13, %rdi
// 276: ff d0                         callq   *%rax
// 278: 49 8b 07                      movq    (%r15), %rax
// 27b: 48 85 c0                      testq   %rax, %rax
// 27e: 0f 8f 9d fe ff ff             jg      0x121 <_JIT_ENTRY+0x121>
// 284: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000286:  R_X86_64_64  .rodata.str1.1
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_NegativeRefcount
// 298: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 29d: 4c 89 fa                      movq    %r15, %rdx
// 2a0: ff d0                         callq   *%rax
// 2a2: 49 8b 07                      movq    (%r15), %rax
// 2a5: 85 c0                         testl   %eax, %eax
// 2a7: 78 20                         js      0x2c9 <_JIT_ENTRY+0x2c9>
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b3: ff d0                         callq   *%rax
// 2b5: 49 ff 0f                      decq    (%r15)
// 2b8: 75 0f                         jne     0x2c9 <_JIT_ENTRY+0x2c9>
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _Py_Dealloc
// 2c4: 4c 89 ff                      movq    %r15, %rdi
// 2c7: ff d0                         callq   *%rax
// 2c9: 4d 89 f4                      movq    %r14, %r12
// 2cc: 49 29 dc                      subq    %rbx, %r12
// 2cf: 49 83 c4 b8                   addq    $-0x48, %r12
// 2d3: 49 c1 ec 03                   shrq    $0x3, %r12
// 2d7: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2db: 31 c0                         xorl    %eax, %eax
// 2dd: 48 83 c4 18                   addq    $0x18, %rsp
// 2e1: 5b                            popq    %rbx
// 2e2: 41 5c                         popq    %r12
// 2e4: 41 5d                         popq    %r13
// 2e6: 41 5e                         popq    %r14
// 2e8: 41 5f                         popq    %r15
// 2ea: 5d                            popq    %rbp
// 2eb: c3                            retq
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  PyFloat_FromDouble
// 2f6: ff d0                         callq   *%rax
// 2f8: 48 85 c0                      testq   %rax, %rax
// 2fb: 74 cf                         je      0x2cc <_JIT_ENTRY+0x2cc>
// 2fd: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 302: 75 2b                         jne     0x32f <_JIT_ENTRY+0x32f>
// 304: 49 89 c4                      movq    %rax, %r12
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  PyInterpreterState_Get
// 311: ff d0                         callq   *%rax
// 313: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 31a: 49 8b 45 00                   movq    (%r13), %rax
// 31e: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 322: 49 89 4d 00                   movq    %rcx, (%r13)
// 326: 48 83 f8 01                   cmpq    $0x1, %rax
// 32a: 4c 89 e0                      movq    %r12, %rax
// 32d: 7e 31                         jle     0x360 <_JIT_ENTRY+0x360>
// 32f: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 333: 75 4b                         jne     0x380 <_JIT_ENTRY+0x380>
// 335: 49 89 c4                      movq    %rax, %r12
// 338: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033a:  R_X86_64_64  PyInterpreterState_Get
// 342: ff d0                         callq   *%rax
// 344: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 34b: 48 8b 45 00                   movq    (%rbp), %rax
// 34f: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 353: 48 89 4d 00                   movq    %rcx, (%rbp)
// 357: 4c 89 e5                      movq    %r12, %rbp
// 35a: 48 83 f8 01                   cmpq    $0x1, %rax
// 35e: 7f 23                         jg      0x383 <_JIT_ENTRY+0x383>
// 360: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000362:  R_X86_64_64  .rodata.str1.1+0x39
// 36a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000036c:  R_X86_64_64  .rodata.str1.1+0x4f
// 374: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000376:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 37e: ff d0                         callq   *%rax
// 380: 48 89 c5                      movq    %rax, %rbp
// 383: 49 89 2e                      movq    %rbp, (%r14)
// 386: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000388:  R_X86_64_64  _JIT_CONTINUE
// 390: 48 89 df                      movq    %rbx, %rdi
// 393: 4c 89 fe                      movq    %r15, %rsi
// 396: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 39b: 48 83 c4 18                   addq    $0x18, %rsp
// 39f: 5b                            popq    %rbx
// 3a0: 41 5c                         popq    %r12
// 3a2: 41 5d                         popq    %r13
// 3a4: 41 5e                         popq    %r14
// 3a6: 41 5f                         popq    %r15
// 3a8: 5d                            popq    %rbp
// 3a9: ff e0                         jmpq    *%rax
// 3ab: 
static const unsigned char _CHECK_EG_MATCHplus_BINARY_OP_SUBTRACT_FLOAT_code_body[940] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x4c, 0x8d, 0x76, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x54, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x63, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x80, 0x01, 0x00, 0x00, 0xe9, 0x9b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0xd1, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x42, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x35, 0x01, 0x00, 0x00, 0x4d, 0x8d, 0x7c, 0x24, 0xf8, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xef, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x2c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x4d, 0x89, 0x2e, 0x49, 0x89, 0x2f, 0xf2, 0x41, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x0f, 0x5c, 0x45, 0x10, 0x49, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x3c, 0xf2, 0x41, 0x0f, 0x11, 0x45, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x89, 0xed, 0xe9, 0x72, 0x01, 0x00, 0x00, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x0f, 0x85, 0xd0, 0x00, 0x00, 0x00, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0x57, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0xe9, 0x0a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x20, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x9d, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xcf, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x2b, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x4c, 0x89, 0xe0, 0x7e, 0x31, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x4b, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x4c, 0x89, 0xe5, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x23, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x89, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_BINARY_OP_SUBTRACT_FLOAT_code_holes[31] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x33a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x362, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x36c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x376, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x388, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _CHECK_EG_MATCHplus_BINARY_OP_SUBTRACT_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BINARY_OP_SUBTRACT_FLOAT_data_holes[1];

// _CHECK_EG_MATCHplus_BINARY_OP_SUBTRACT_INT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BINARY_OP_SUBTRACT_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 19: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1d: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 21: 48 8d 5e f0                   leaq    -0x10(%rsi), %rbx
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2f: 48 89 d7                      movq    %rdx, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: ff d0                         callq   *%rax
// 37: 85 c0                         testl   %eax, %eax
// 39: 78 3c                         js      0x77 <_JIT_ENTRY+0x77>
// 3b: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 43: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 56: 48 89 e2                      movq    %rsp, %rdx
// 59: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5e: 4c 89 ef                      movq    %r13, %rdi
// 61: 4c 89 e6                      movq    %r12, %rsi
// 64: ff d0                         callq   *%rax
// 66: 89 c5                         movl    %eax, %ebp
// 68: 49 8b 45 00                   movq    (%r13), %rax
// 6c: 48 85 c0                      testq   %rax, %rax
// 6f: 7e 1c                         jle     0x8d <_JIT_ENTRY+0x8d>
// 71: 85 c0                         testl   %eax, %eax
// 73: 79 3e                         jns     0xb3 <_JIT_ENTRY+0xb3>
// 75: eb 52                         jmp     0xc9 <_JIT_ENTRY+0xc9>
// 77: 49 8b 45 00                   movq    (%r13), %rax
// 7b: 48 85 c0                      testq   %rax, %rax
// 7e: 7e 63                         jle     0xe3 <_JIT_ENTRY+0xe3>
// 80: 85 c0                         testl   %eax, %eax
// 82: 0f 89 81 00 00 00             jns     0x109 <_JIT_ENTRY+0x109>
// 88: e9 9d 00 00 00                jmp     0x12a <_JIT_ENTRY+0x12a>
// 8d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008f:  R_X86_64_64  .rodata.str1.1
// 97: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000099:  R_X86_64_64  _Py_NegativeRefcount
// a1: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a6: 4c 89 ea                      movq    %r13, %rdx
// a9: ff d0                         callq   *%rax
// ab: 49 8b 45 00                   movq    (%r13), %rax
// af: 85 c0                         testl   %eax, %eax
// b1: 78 16                         js      0xc9 <_JIT_ENTRY+0xc9>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bd: ff d0                         callq   *%rax
// bf: 49 ff 4d 00                   decq    (%r13)
// c3: 0f 84 c7 00 00 00             je      0x190 <_JIT_ENTRY+0x190>
// c9: 49 8b 04 24                   movq    (%r12), %rax
// cd: 48 85 c0                      testq   %rax, %rax
// d0: 0f 8e d6 00 00 00             jle     0x1ac <_JIT_ENTRY+0x1ac>
// d6: 85 c0                         testl   %eax, %eax
// d8: 0f 89 f4 00 00 00             jns     0x1d2 <_JIT_ENTRY+0x1d2>
// de: e9 05 01 00 00                jmp     0x1e8 <_JIT_ENTRY+0x1e8>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// fc: 4c 89 ea                      movq    %r13, %rdx
// ff: ff d0                         callq   *%rax
// 101: 49 8b 45 00                   movq    (%r13), %rax
// 105: 85 c0                         testl   %eax, %eax
// 107: 78 21                         js      0x12a <_JIT_ENTRY+0x12a>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 113: ff d0                         callq   *%rax
// 115: 49 ff 4d 00                   decq    (%r13)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_Dealloc
// 125: 4c 89 ef                      movq    %r13, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7e 09                         jle     0x13c <_JIT_ENTRY+0x13c>
// 133: 85 c0                         testl   %eax, %eax
// 135: 79 2f                         jns     0x166 <_JIT_ENTRY+0x166>
// 137: e9 c1 01 00 00                jmp     0x2fd <_JIT_ENTRY+0x2fd>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 155: 4c 89 e2                      movq    %r12, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 49 8b 04 24                   movq    (%r12), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 0f 88 97 01 00 00             js      0x2fd <_JIT_ENTRY+0x2fd>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 0c 24                   decq    (%r12)
// 176: 0f 85 81 01 00 00             jne     0x2fd <_JIT_ENTRY+0x2fd>
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_Dealloc
// 186: 4c 89 e7                      movq    %r12, %rdi
// 189: ff d0                         callq   *%rax
// 18b: e9 6d 01 00 00                jmp     0x2fd <_JIT_ENTRY+0x2fd>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_Dealloc
// 19a: 4c 89 ef                      movq    %r13, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 8b 04 24                   movq    (%r12), %rax
// 1a3: 48 85 c0                      testq   %rax, %rax
// 1a6: 0f 8f 2a ff ff ff             jg      0xd6 <_JIT_ENTRY+0xd6>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 49 8b 04 24                   movq    (%r12), %rax
// 1ce: 85 c0                         testl   %eax, %eax
// 1d0: 78 16                         js      0x1e8 <_JIT_ENTRY+0x1e8>
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1dc: ff d0                         callq   *%rax
// 1de: 49 ff 0c 24                   decq    (%r12)
// 1e2: 0f 84 e8 00 00 00             je      0x2d0 <_JIT_ENTRY+0x2d0>
// 1e8: 85 ed                         testl   %ebp, %ebp
// 1ea: 0f 88 0d 01 00 00             js      0x2fd <_JIT_ENTRY+0x2fd>
// 1f0: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f4: 48 85 ff                      testq   %rdi, %rdi
// 1f7: 0f 84 00 01 00 00             je      0x2fd <_JIT_ENTRY+0x2fd>
// 1fd: 49 83 c7 f8                   addq    $-0x8, %r15
// 201: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000203:  R_X86_64_64  _Py_NoneStruct
// 20b: 48 39 ef                      cmpq    %rbp, %rdi
// 20e: 74 10                         je      0x220 <_JIT_ENTRY+0x220>
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  PyErr_SetHandledException
// 21a: ff d0                         callq   *%rax
// 21c: 48 8b 2c 24                   movq    (%rsp), %rbp
// 220: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 225: 4c 89 23                      movq    %r12, (%rbx)
// 228: 49 89 2f                      movq    %rbp, (%r15)
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _PyLong_Subtract
// 235: 4c 89 e7                      movq    %r12, %rdi
// 238: 48 89 ee                      movq    %rbp, %rsi
// 23b: ff d0                         callq   *%rax
// 23d: 49 89 c5                      movq    %rax, %r13
// 240: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 244: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000246:  R_X86_64_64  PyInterpreterState_Get
// 24e: 75 3c                         jne     0x28c <_JIT_ENTRY+0x28c>
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  PyInterpreterState_Get
// 25a: ff d0                         callq   *%rax
// 25c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 263: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000265:  R_X86_64_64  PyInterpreterState_Get
// 26d: 48 ff 4d 00                   decq    (%rbp)
// 271: 75 19                         jne     0x28c <_JIT_ENTRY+0x28c>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  PyObject_Free
// 27d: 48 89 ef                      movq    %rbp, %rdi
// 280: ff d0                         callq   *%rax
// 282: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000284:  R_X86_64_64  PyInterpreterState_Get
// 28c: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 292: 75 0f                         jne     0x2a3 <_JIT_ENTRY+0x2a3>
// 294: ff d1                         callq   *%rcx
// 296: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 29d: 49 ff 0c 24                   decq    (%r12)
// 2a1: 74 46                         je      0x2e9 <_JIT_ENTRY+0x2e9>
// 2a3: 4d 85 ed                      testq   %r13, %r13
// 2a6: 74 55                         je      0x2fd <_JIT_ENTRY+0x2fd>
// 2a8: 4c 89 2b                      movq    %r13, (%rbx)
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _JIT_CONTINUE
// 2b5: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2ba: 4c 89 fe                      movq    %r15, %rsi
// 2bd: 4c 89 f2                      movq    %r14, %rdx
// 2c0: 48 83 c4 18                   addq    $0x18, %rsp
// 2c4: 5b                            popq    %rbx
// 2c5: 41 5c                         popq    %r12
// 2c7: 41 5d                         popq    %r13
// 2c9: 41 5e                         popq    %r14
// 2cb: 41 5f                         popq    %r15
// 2cd: 5d                            popq    %rbp
// 2ce: ff e0                         jmpq    *%rax
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _Py_Dealloc
// 2da: 4c 89 e7                      movq    %r12, %rdi
// 2dd: ff d0                         callq   *%rax
// 2df: 85 ed                         testl   %ebp, %ebp
// 2e1: 0f 89 09 ff ff ff             jns     0x1f0 <_JIT_ENTRY+0x1f0>
// 2e7: eb 14                         jmp     0x2fd <_JIT_ENTRY+0x2fd>
// 2e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002eb:  R_X86_64_64  PyObject_Free
// 2f3: 4c 89 e7                      movq    %r12, %rdi
// 2f6: ff d0                         callq   *%rax
// 2f8: 4d 85 ed                      testq   %r13, %r13
// 2fb: 75 ab                         jne     0x2a8 <_JIT_ENTRY+0x2a8>
// 2fd: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 302: 48 29 c3                      subq    %rax, %rbx
// 305: 48 83 c3 b8                   addq    $-0x48, %rbx
// 309: 48 c1 eb 03                   shrq    $0x3, %rbx
// 30d: 89 58 40                      movl    %ebx, 0x40(%rax)
// 310: 31 c0                         xorl    %eax, %eax
// 312: 48 83 c4 18                   addq    $0x18, %rsp
// 316: 5b                            popq    %rbx
// 317: 41 5c                         popq    %r12
// 319: 41 5d                         popq    %r13
// 31b: 41 5e                         popq    %r14
// 31d: 41 5f                         popq    %r15
// 31f: 5d                            popq    %rbp
// 320: c3                            retq
// 321: 
static const unsigned char _CHECK_EG_MATCHplus_BINARY_OP_SUBTRACT_INT_code_body[802] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0x8d, 0x5e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0xc1, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x97, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x81, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x6d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xe8, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x0d, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x00, 0x01, 0x00, 0x00, 0x49, 0x83, 0xc7, 0xf8, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xef, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x2c, 0x24, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x4c, 0x89, 0x23, 0x49, 0x89, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x0f, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x46, 0x4d, 0x85, 0xed, 0x74, 0x55, 0x4c, 0x89, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x09, 0xff, 0xff, 0xff, 0xeb, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0xab, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x58, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_BINARY_OP_SUBTRACT_INT_code_holes[29] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x99, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Subtract, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_BINARY_OP_SUBTRACT_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BINARY_OP_SUBTRACT_INT_data_holes[1];

// _CHECK_EG_MATCHplus_BINARY_SLICE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BINARY_SLICE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 cc 01 00 00             je      0x2dc <_JIT_ENTRY+0x2dc>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e db 01 00 00             jle     0x2f8 <_JIT_ENTRY+0x2f8>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 f9 01 00 00             jns     0x31e <_JIT_ENTRY+0x31e>
// 125: e9 33 02 00 00                jmp     0x35d <_JIT_ENTRY+0x35d>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 c6 00 00 00             je      0x244 <_JIT_ENTRY+0x244>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 d7 01 00 00             js      0x35d <_JIT_ENTRY+0x35d>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 c9 01 00 00             je      0x35d <_JIT_ENTRY+0x35d>
// 194: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 48 39 f7                      cmpq    %rsi, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 1b4: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 1b9: 48 89 7b f0                   movq    %rdi, -0x10(%rbx)
// 1bd: 48 89 73 f8                   movq    %rsi, -0x8(%rbx)
// 1c1: 4c 8b 63 e8                   movq    -0x18(%rbx), %r12
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 1cf: ff d0                         callq   *%rax
// 1d1: 48 85 c0                      testq   %rax, %rax
// 1d4: 0f 84 86 00 00 00             je      0x260 <_JIT_ENTRY+0x260>
// 1da: 48 89 c5                      movq    %rax, %rbp
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  PyObject_GetItem
// 1e7: 4c 89 e7                      movq    %r12, %rdi
// 1ea: 48 89 ee                      movq    %rbp, %rsi
// 1ed: ff d0                         callq   *%rax
// 1ef: 49 89 c5                      movq    %rax, %r13
// 1f2: 48 8b 45 00                   movq    (%rbp), %rax
// 1f6: 48 85 c0                      testq   %rax, %rax
// 1f9: 7f 22                         jg      0x21d <_JIT_ENTRY+0x21d>
// 1fb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fd:  R_X86_64_64  .rodata.str1.1
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_NegativeRefcount
// 20f: be 99 01 00 00                movl    $0x199, %esi            # imm = 0x199
// 214: 48 89 ea                      movq    %rbp, %rdx
// 217: ff d0                         callq   *%rax
// 219: 48 8b 45 00                   movq    (%rbp), %rax
// 21d: 85 c0                         testl   %eax, %eax
// 21f: 78 42                         js      0x263 <_JIT_ENTRY+0x263>
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22b: ff d0                         callq   *%rax
// 22d: 48 ff 4d 00                   decq    (%rbp)
// 231: 75 30                         jne     0x263 <_JIT_ENTRY+0x263>
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_Dealloc
// 23d: 48 89 ef                      movq    %rbp, %rdi
// 240: ff d0                         callq   *%rax
// 242: eb 1f                         jmp     0x263 <_JIT_ENTRY+0x263>
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _Py_Dealloc
// 24e: 4c 89 e7                      movq    %r12, %rdi
// 251: ff d0                         callq   *%rax
// 253: 85 ed                         testl   %ebp, %ebp
// 255: 0f 89 2b ff ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 25b: e9 fd 00 00 00                jmp     0x35d <_JIT_ENTRY+0x35d>
// 260: 45 31 ed                      xorl    %r13d, %r13d
// 263: 49 8b 04 24                   movq    (%r12), %rax
// 267: 48 85 c0                      testq   %rax, %rax
// 26a: 7f 22                         jg      0x28e <_JIT_ENTRY+0x28e>
// 26c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026e:  R_X86_64_64  .rodata.str1.1
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_NegativeRefcount
// 280: be 9b 01 00 00                movl    $0x19b, %esi            # imm = 0x19B
// 285: 4c 89 e2                      movq    %r12, %rdx
// 288: ff d0                         callq   *%rax
// 28a: 49 8b 04 24                   movq    (%r12), %rax
// 28e: 85 c0                         testl   %eax, %eax
// 290: 78 16                         js      0x2a8 <_JIT_ENTRY+0x2a8>
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 29c: ff d0                         callq   *%rax
// 29e: 49 ff 0c 24                   decq    (%r12)
// 2a2: 0f 84 99 00 00 00             je      0x341 <_JIT_ENTRY+0x341>
// 2a8: 4d 85 ed                      testq   %r13, %r13
// 2ab: 0f 84 a8 00 00 00             je      0x359 <_JIT_ENTRY+0x359>
// 2b1: 4c 89 6b e8                   movq    %r13, -0x18(%rbx)
// 2b5: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _JIT_CONTINUE
// 2c3: 4c 89 f7                      movq    %r14, %rdi
// 2c6: 48 89 de                      movq    %rbx, %rsi
// 2c9: 4c 89 fa                      movq    %r15, %rdx
// 2cc: 48 83 c4 18                   addq    $0x18, %rsp
// 2d0: 5b                            popq    %rbx
// 2d1: 41 5c                         popq    %r12
// 2d3: 41 5d                         popq    %r13
// 2d5: 41 5e                         popq    %r14
// 2d7: 41 5f                         popq    %r15
// 2d9: 5d                            popq    %rbp
// 2da: ff e0                         jmpq    *%rax
// 2dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002de:  R_X86_64_64  _Py_Dealloc
// 2e6: 4c 89 ef                      movq    %r13, %rdi
// 2e9: ff d0                         callq   *%rax
// 2eb: 49 8b 04 24                   movq    (%r12), %rax
// 2ef: 48 85 c0                      testq   %rax, %rax
// 2f2: 0f 8f 25 fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 2f8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002fa:  R_X86_64_64  .rodata.str1.1
// 302: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000304:  R_X86_64_64  _Py_NegativeRefcount
// 30c: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 311: 4c 89 e2                      movq    %r12, %rdx
// 314: ff d0                         callq   *%rax
// 316: 49 8b 04 24                   movq    (%r12), %rax
// 31a: 85 c0                         testl   %eax, %eax
// 31c: 78 3f                         js      0x35d <_JIT_ENTRY+0x35d>
// 31e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000320:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 328: ff d0                         callq   *%rax
// 32a: 49 ff 0c 24                   decq    (%r12)
// 32e: 75 2d                         jne     0x35d <_JIT_ENTRY+0x35d>
// 330: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000332:  R_X86_64_64  _Py_Dealloc
// 33a: 4c 89 e7                      movq    %r12, %rdi
// 33d: ff d0                         callq   *%rax
// 33f: eb 1c                         jmp     0x35d <_JIT_ENTRY+0x35d>
// 341: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000343:  R_X86_64_64  _Py_Dealloc
// 34b: 4c 89 e7                      movq    %r12, %rdi
// 34e: ff d0                         callq   *%rax
// 350: 4d 85 ed                      testq   %r13, %r13
// 353: 0f 85 58 ff ff ff             jne     0x2b1 <_JIT_ENTRY+0x2b1>
// 359: 48 83 c3 f8                   addq    $-0x8, %rbx
// 35d: 4c 29 f3                      subq    %r14, %rbx
// 360: 48 83 c3 a8                   addq    $-0x58, %rbx
// 364: 48 c1 eb 03                   shrq    $0x3, %rbx
// 368: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 36c: 31 c0                         xorl    %eax, %eax
// 36e: 48 83 c4 18                   addq    $0x18, %rsp
// 372: 5b                            popq    %rbx
// 373: 41 5c                         popq    %r12
// 375: 41 5d                         popq    %r13
// 377: 41 5e                         popq    %r14
// 379: 41 5f                         popq    %r15
// 37b: 5d                            popq    %rbp
// 37c: c3                            retq
// 37d: 
static const unsigned char _CHECK_EG_MATCHplus_BINARY_SLICE_code_body[894] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xcc, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xdb, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf9, 0x01, 0x00, 0x00, 0xe9, 0x33, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xc6, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xd7, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xc9, 0x01, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x89, 0x7b, 0xf0, 0x48, 0x89, 0x73, 0xf8, 0x4c, 0x8b, 0x63, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x42, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x1f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x2b, 0xff, 0xff, 0xff, 0xe9, 0xfd, 0x00, 0x00, 0x00, 0x45, 0x31, 0xed, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x9b, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x99, 0x00, 0x00, 0x00, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xa8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x6b, 0xe8, 0x48, 0x83, 0xc3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x25, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x1c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0x58, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_BINARY_SLICE_code_holes[32] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x320, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x332, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x343, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_BINARY_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BINARY_SLICE_data_holes[1];

// _CHECK_EG_MATCHplus_BINARY_SUBSCR
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BINARY_SUBSCR.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 8d 5e f0                   leaq    -0x10(%rsi), %rbx
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 e6                      movq    %r12, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 1c                         jle     0x90 <_JIT_ENTRY+0x90>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3e                         jns     0xb6 <_JIT_ENTRY+0xb6>
// 78: eb 52                         jmp     0xcc <_JIT_ENTRY+0xcc>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 63                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 83: 85 c0                         testl   %eax, %eax
// 85: 0f 89 81 00 00 00             jns     0x10c <_JIT_ENTRY+0x10c>
// 8b: e9 9d 00 00 00                jmp     0x12d <_JIT_ENTRY+0x12d>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_NegativeRefcount
// a4: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a9: 4c 89 ea                      movq    %r13, %rdx
// ac: ff d0                         callq   *%rax
// ae: 49 8b 45 00                   movq    (%r13), %rax
// b2: 85 c0                         testl   %eax, %eax
// b4: 78 16                         js      0xcc <_JIT_ENTRY+0xcc>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c0: ff d0                         callq   *%rax
// c2: 49 ff 4d 00                   decq    (%r13)
// c6: 0f 84 c7 00 00 00             je      0x193 <_JIT_ENTRY+0x193>
// cc: 49 8b 04 24                   movq    (%r12), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 0f 8e d6 00 00 00             jle     0x1af <_JIT_ENTRY+0x1af>
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 89 f4 00 00 00             jns     0x1d5 <_JIT_ENTRY+0x1d5>
// e1: e9 05 01 00 00                jmp     0x1eb <_JIT_ENTRY+0x1eb>
// e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_NegativeRefcount
// fa: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ff: 4c 89 ea                      movq    %r13, %rdx
// 102: ff d0                         callq   *%rax
// 104: 49 8b 45 00                   movq    (%r13), %rax
// 108: 85 c0                         testl   %eax, %eax
// 10a: 78 21                         js      0x12d <_JIT_ENTRY+0x12d>
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 116: ff d0                         callq   *%rax
// 118: 49 ff 4d 00                   decq    (%r13)
// 11c: 75 0f                         jne     0x12d <_JIT_ENTRY+0x12d>
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _Py_Dealloc
// 128: 4c 89 ef                      movq    %r13, %rdi
// 12b: ff d0                         callq   *%rax
// 12d: 49 8b 04 24                   movq    (%r12), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 09                         jle     0x13f <_JIT_ENTRY+0x13f>
// 136: 85 c0                         testl   %eax, %eax
// 138: 79 2f                         jns     0x169 <_JIT_ENTRY+0x169>
// 13a: e9 fc 01 00 00                jmp     0x33b <_JIT_ENTRY+0x33b>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 d2 01 00 00             js      0x33b <_JIT_ENTRY+0x33b>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 0c 24                   decq    (%r12)
// 179: 0f 85 bc 01 00 00             jne     0x33b <_JIT_ENTRY+0x33b>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_Dealloc
// 189: 4c 89 e7                      movq    %r12, %rdi
// 18c: ff d0                         callq   *%rax
// 18e: e9 a8 01 00 00                jmp     0x33b <_JIT_ENTRY+0x33b>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_Dealloc
// 19d: 4c 89 ef                      movq    %r13, %rdi
// 1a0: ff d0                         callq   *%rax
// 1a2: 49 8b 04 24                   movq    (%r12), %rax
// 1a6: 48 85 c0                      testq   %rax, %rax
// 1a9: 0f 8f 2a ff ff ff             jg      0xd9 <_JIT_ENTRY+0xd9>
// 1af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b1:  R_X86_64_64  .rodata.str1.1
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_NegativeRefcount
// 1c3: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c8: 4c 89 e2                      movq    %r12, %rdx
// 1cb: ff d0                         callq   *%rax
// 1cd: 49 8b 04 24                   movq    (%r12), %rax
// 1d1: 85 c0                         testl   %eax, %eax
// 1d3: 78 16                         js      0x1eb <_JIT_ENTRY+0x1eb>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1df: ff d0                         callq   *%rax
// 1e1: 49 ff 0c 24                   decq    (%r12)
// 1e5: 0f 84 1e 01 00 00             je      0x309 <_JIT_ENTRY+0x309>
// 1eb: 85 ed                         testl   %ebp, %ebp
// 1ed: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 1f2: 0f 88 43 01 00 00             js      0x33b <_JIT_ENTRY+0x33b>
// 1f8: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1fc: 48 85 ff                      testq   %rdi, %rdi
// 1ff: 0f 84 36 01 00 00             je      0x33b <_JIT_ENTRY+0x33b>
// 205: 49 83 c7 f8                   addq    $-0x8, %r15
// 209: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000020b:  R_X86_64_64  _Py_NoneStruct
// 213: 4c 39 e7                      cmpq    %r12, %rdi
// 216: 74 10                         je      0x228 <_JIT_ENTRY+0x228>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  PyErr_SetHandledException
// 222: ff d0                         callq   *%rax
// 224: 4c 8b 24 24                   movq    (%rsp), %r12
// 228: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 22d: 48 89 2b                      movq    %rbp, (%rbx)
// 230: 4d 89 27                      movq    %r12, (%r15)
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  PyObject_GetItem
// 23d: 48 89 ef                      movq    %rbp, %rdi
// 240: 4c 89 e6                      movq    %r12, %rsi
// 243: ff d0                         callq   *%rax
// 245: 49 89 c5                      movq    %rax, %r13
// 248: 48 8b 45 00                   movq    (%rbp), %rax
// 24c: 48 85 c0                      testq   %rax, %rax
// 24f: 7f 22                         jg      0x273 <_JIT_ENTRY+0x273>
// 251: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000253:  R_X86_64_64  .rodata.str1.1
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_NegativeRefcount
// 265: be 81 01 00 00                movl    $0x181, %esi            # imm = 0x181
// 26a: 48 89 ea                      movq    %rbp, %rdx
// 26d: ff d0                         callq   *%rax
// 26f: 48 8b 45 00                   movq    (%rbp), %rax
// 273: 85 c0                         testl   %eax, %eax
// 275: 78 21                         js      0x298 <_JIT_ENTRY+0x298>
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 281: ff d0                         callq   *%rax
// 283: 48 ff 4d 00                   decq    (%rbp)
// 287: 75 0f                         jne     0x298 <_JIT_ENTRY+0x298>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_Dealloc
// 293: 48 89 ef                      movq    %rbp, %rdi
// 296: ff d0                         callq   *%rax
// 298: 49 8b 04 24                   movq    (%r12), %rax
// 29c: 48 85 c0                      testq   %rax, %rax
// 29f: 7f 22                         jg      0x2c3 <_JIT_ENTRY+0x2c3>
// 2a1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a3:  R_X86_64_64  .rodata.str1.1
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_NegativeRefcount
// 2b5: be 82 01 00 00                movl    $0x182, %esi            # imm = 0x182
// 2ba: 4c 89 e2                      movq    %r12, %rdx
// 2bd: ff d0                         callq   *%rax
// 2bf: 49 8b 04 24                   movq    (%r12), %rax
// 2c3: 85 c0                         testl   %eax, %eax
// 2c5: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 2ca: 78 12                         js      0x2de <_JIT_ENTRY+0x2de>
// 2cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ce:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d6: ff d0                         callq   *%rax
// 2d8: 49 ff 0c 24                   decq    (%r12)
// 2dc: 74 49                         je      0x327 <_JIT_ENTRY+0x327>
// 2de: 4d 85 ed                      testq   %r13, %r13
// 2e1: 74 58                         je      0x33b <_JIT_ENTRY+0x33b>
// 2e3: 4c 89 2b                      movq    %r13, (%rbx)
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _JIT_CONTINUE
// 2f0: 48 89 ef                      movq    %rbp, %rdi
// 2f3: 4c 89 fe                      movq    %r15, %rsi
// 2f6: 4c 89 f2                      movq    %r14, %rdx
// 2f9: 48 83 c4 18                   addq    $0x18, %rsp
// 2fd: 5b                            popq    %rbx
// 2fe: 41 5c                         popq    %r12
// 300: 41 5d                         popq    %r13
// 302: 41 5e                         popq    %r14
// 304: 41 5f                         popq    %r15
// 306: 5d                            popq    %rbp
// 307: ff e0                         jmpq    *%rax
// 309: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030b:  R_X86_64_64  _Py_Dealloc
// 313: 4c 89 e7                      movq    %r12, %rdi
// 316: ff d0                         callq   *%rax
// 318: 85 ed                         testl   %ebp, %ebp
// 31a: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 31f: 0f 89 d3 fe ff ff             jns     0x1f8 <_JIT_ENTRY+0x1f8>
// 325: eb 14                         jmp     0x33b <_JIT_ENTRY+0x33b>
// 327: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000329:  R_X86_64_64  _Py_Dealloc
// 331: 4c 89 e7                      movq    %r12, %rdi
// 334: ff d0                         callq   *%rax
// 336: 4d 85 ed                      testq   %r13, %r13
// 339: 75 a8                         jne     0x2e3 <_JIT_ENTRY+0x2e3>
// 33b: 48 29 eb                      subq    %rbp, %rbx
// 33e: 48 83 c3 b8                   addq    $-0x48, %rbx
// 342: 48 c1 eb 03                   shrq    $0x3, %rbx
// 346: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 349: 31 c0                         xorl    %eax, %eax
// 34b: 48 83 c4 18                   addq    $0x18, %rsp
// 34f: 5b                            popq    %rbx
// 350: 41 5c                         popq    %r12
// 352: 41 5d                         popq    %r13
// 354: 41 5e                         popq    %r14
// 356: 41 5f                         popq    %r15
// 358: 5d                            popq    %rbp
// 359: c3                            retq
// 35a: 
static const unsigned char _CHECK_EG_MATCHplus_BINARY_SUBSCR_code_body[859] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0x8d, 0x5e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0xfc, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xd2, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xbc, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xa8, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x1e, 0x01, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x0f, 0x88, 0x43, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x36, 0x01, 0x00, 0x00, 0x49, 0x83, 0xc7, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x2b, 0x4d, 0x89, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x81, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x82, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x49, 0x4d, 0x85, 0xed, 0x74, 0x58, 0x4c, 0x89, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x0f, 0x89, 0xd3, 0xfe, 0xff, 0xff, 0xeb, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0xa8, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_BINARY_SUBSCR_code_holes[31] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x30b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x329, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_BINARY_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BINARY_SUBSCR_data_holes[1];

// _CHECK_EG_MATCHplus_BINARY_SUBSCR_DICT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BINARY_SUBSCR_DICT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 4c 8d 76 f0                   leaq    -0x10(%rsi), %r14
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 fe                      movq    %r15, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3e: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 47: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 5e: 48 89 e1                      movq    %rsp, %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 fe                      movq    %r15, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 56                         jle     0xd9 <_JIT_ENTRY+0xd9>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 78                         jns     0xff <_JIT_ENTRY+0xff>
// 87: e9 89 00 00 00                jmp     0x115 <_JIT_ENTRY+0x115>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 4c 89 ea                      movq    %r13, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 45 00                   movq    (%r13), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 4d 00                   decq    (%r13)
// c2: 74 6a                         je      0x12e <_JIT_ENTRY+0x12e>
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7e 79                         jle     0x145 <_JIT_ENTRY+0x145>
// cc: 85 c0                         testl   %eax, %eax
// ce: 0f 89 96 00 00 00             jns     0x16a <_JIT_ENTRY+0x16a>
// d4: e9 a6 00 00 00                jmp     0x17f <_JIT_ENTRY+0x17f>
// d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000db:  R_X86_64_64  .rodata.str1.1
// e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e5:  R_X86_64_64  _Py_NegativeRefcount
// ed: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f2: 4c 89 ea                      movq    %r13, %rdx
// f5: ff d0                         callq   *%rax
// f7: 49 8b 45 00                   movq    (%r13), %rax
// fb: 85 c0                         testl   %eax, %eax
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 4d 00                   decq    (%r13)
// 10f: 0f 84 42 01 00 00             je      0x257 <_JIT_ENTRY+0x257>
// 115: 49 8b 07                      movq    (%r15), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 0f 8e 51 01 00 00             jle     0x272 <_JIT_ENTRY+0x272>
// 121: 85 c0                         testl   %eax, %eax
// 123: 0f 89 72 01 00 00             jns     0x29b <_JIT_ENTRY+0x29b>
// 129: e9 7d 02 00 00                jmp     0x3ab <_JIT_ENTRY+0x3ab>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_Dealloc
// 138: 4c 89 ef                      movq    %r13, %rdi
// 13b: ff d0                         callq   *%rax
// 13d: 49 8b 07                      movq    (%r15), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 87                         jg      0xcc <_JIT_ENTRY+0xcc>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15e: 4c 89 fa                      movq    %r15, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 07                      movq    (%r15), %rax
// 166: 85 c0                         testl   %eax, %eax
// 168: 78 15                         js      0x17f <_JIT_ENTRY+0x17f>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 0f                      decq    (%r15)
// 179: 0f 84 82 00 00 00             je      0x201 <_JIT_ENTRY+0x201>
// 17f: 85 ed                         testl   %ebp, %ebp
// 181: 0f 88 24 02 00 00             js      0x3ab <_JIT_ENTRY+0x3ab>
// 187: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18c: 48 85 ff                      testq   %rdi, %rdi
// 18f: 0f 84 16 02 00 00             je      0x3ab <_JIT_ENTRY+0x3ab>
// 195: 4d 8d 7c 24 f8                leaq    -0x8(%r12), %r15
// 19a: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000019c:  R_X86_64_64  _Py_NoneStruct
// 1a4: 4c 39 ef                      cmpq    %r13, %rdi
// 1a7: 74 11                         je      0x1ba <_JIT_ENTRY+0x1ba>
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  PyErr_SetHandledException
// 1b3: ff d0                         callq   *%rax
// 1b5: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 1ba: 48 8b 2c 24                   movq    (%rsp), %rbp
// 1be: 49 89 2e                      movq    %rbp, (%r14)
// 1c1: 4d 89 2f                      movq    %r13, (%r15)
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  PyDict_Type
// 1ce: 48 39 45 08                   cmpq    %rax, 0x8(%rbp)
// 1d2: 74 49                         je      0x21d <_JIT_ENTRY+0x21d>
// 1d4: 49 29 dc                      subq    %rbx, %r12
// 1d7: 49 83 c4 b8                   addq    $-0x48, %r12
// 1db: 49 c1 ec 03                   shrq    $0x3, %r12
// 1df: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 1e3: 48 8b 03                      movq    (%rbx), %rax
// 1e6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e8:  R_X86_64_64  _JIT_TARGET
// 1f0: 89 c9                         movl    %ecx, %ecx
// 1f2: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f6: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1fc: e9 bb 01 00 00                jmp     0x3bc <_JIT_ENTRY+0x3bc>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_Dealloc
// 20b: 4c 89 ff                      movq    %r15, %rdi
// 20e: ff d0                         callq   *%rax
// 210: 85 ed                         testl   %ebp, %ebp
// 212: 0f 89 6f ff ff ff             jns     0x187 <_JIT_ENTRY+0x187>
// 218: e9 8e 01 00 00                jmp     0x3ab <_JIT_ENTRY+0x3ab>
// 21d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021f:  R_X86_64_64  PyDict_GetItemRef
// 227: 48 89 e2                      movq    %rsp, %rdx
// 22a: 48 89 ef                      movq    %rbp, %rdi
// 22d: 4c 89 ee                      movq    %r13, %rsi
// 230: ff d0                         callq   *%rax
// 232: 41 89 c4                      movl    %eax, %r12d
// 235: 85 c0                         testl   %eax, %eax
// 237: 0f 84 87 00 00 00             je      0x2c4 <_JIT_ENTRY+0x2c4>
// 23d: 48 8b 45 00                   movq    (%rbp), %rax
// 241: 48 85 c0                      testq   %rax, %rax
// 244: 0f 8e 96 00 00 00             jle     0x2e0 <_JIT_ENTRY+0x2e0>
// 24a: 85 c0                         testl   %eax, %eax
// 24c: 0f 89 b4 00 00 00             jns     0x306 <_JIT_ENTRY+0x306>
// 252: e9 d0 00 00 00                jmp     0x327 <_JIT_ENTRY+0x327>
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_Dealloc
// 261: 4c 89 ef                      movq    %r13, %rdi
// 264: ff d0                         callq   *%rax
// 266: 49 8b 07                      movq    (%r15), %rax
// 269: 48 85 c0                      testq   %rax, %rax
// 26c: 0f 8f af fe ff ff             jg      0x121 <_JIT_ENTRY+0x121>
// 272: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000274:  R_X86_64_64  .rodata.str1.1
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_NegativeRefcount
// 286: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 28b: 4c 89 fa                      movq    %r15, %rdx
// 28e: ff d0                         callq   *%rax
// 290: 49 8b 07                      movq    (%r15), %rax
// 293: 85 c0                         testl   %eax, %eax
// 295: 0f 88 10 01 00 00             js      0x3ab <_JIT_ENTRY+0x3ab>
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a5: ff d0                         callq   *%rax
// 2a7: 49 ff 0f                      decq    (%r15)
// 2aa: 0f 85 fb 00 00 00             jne     0x3ab <_JIT_ENTRY+0x3ab>
// 2b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b2:  R_X86_64_64  _Py_Dealloc
// 2ba: 4c 89 ff                      movq    %r15, %rdi
// 2bd: ff d0                         callq   *%rax
// 2bf: e9 e7 00 00 00                jmp     0x3ab <_JIT_ENTRY+0x3ab>
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  _PyErr_SetKeyError
// 2ce: 4c 89 ef                      movq    %r13, %rdi
// 2d1: ff d0                         callq   *%rax
// 2d3: 48 8b 45 00                   movq    (%rbp), %rax
// 2d7: 48 85 c0                      testq   %rax, %rax
// 2da: 0f 8f 6a ff ff ff             jg      0x24a <_JIT_ENTRY+0x24a>
// 2e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e2:  R_X86_64_64  .rodata.str1.1
// 2ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ec:  R_X86_64_64  _Py_NegativeRefcount
// 2f4: be 0c 02 00 00                movl    $0x20c, %esi            # imm = 0x20C
// 2f9: 48 89 ea                      movq    %rbp, %rdx
// 2fc: ff d0                         callq   *%rax
// 2fe: 48 8b 45 00                   movq    (%rbp), %rax
// 302: 85 c0                         testl   %eax, %eax
// 304: 78 21                         js      0x327 <_JIT_ENTRY+0x327>
// 306: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000308:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 310: ff d0                         callq   *%rax
// 312: 48 ff 4d 00                   decq    (%rbp)
// 316: 75 0f                         jne     0x327 <_JIT_ENTRY+0x327>
// 318: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031a:  R_X86_64_64  _Py_Dealloc
// 322: 48 89 ef                      movq    %rbp, %rdi
// 325: ff d0                         callq   *%rax
// 327: 49 8b 45 00                   movq    (%r13), %rax
// 32b: 48 85 c0                      testq   %rax, %rax
// 32e: 7f 22                         jg      0x352 <_JIT_ENTRY+0x352>
// 330: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000332:  R_X86_64_64  .rodata.str1.1
// 33a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033c:  R_X86_64_64  _Py_NegativeRefcount
// 344: be 0d 02 00 00                movl    $0x20d, %esi            # imm = 0x20D
// 349: 4c 89 ea                      movq    %r13, %rdx
// 34c: ff d0                         callq   *%rax
// 34e: 49 8b 45 00                   movq    (%r13), %rax
// 352: 85 c0                         testl   %eax, %eax
// 354: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 359: 78 21                         js      0x37c <_JIT_ENTRY+0x37c>
// 35b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 365: ff d0                         callq   *%rax
// 367: 49 ff 4d 00                   decq    (%r13)
// 36b: 75 0f                         jne     0x37c <_JIT_ENTRY+0x37c>
// 36d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036f:  R_X86_64_64  _Py_Dealloc
// 377: 4c 89 ef                      movq    %r13, %rdi
// 37a: ff d0                         callq   *%rax
// 37c: 45 85 e4                      testl   %r12d, %r12d
// 37f: 7e 2a                         jle     0x3ab <_JIT_ENTRY+0x3ab>
// 381: 48 8b 04 24                   movq    (%rsp), %rax
// 385: 49 89 06                      movq    %rax, (%r14)
// 388: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038a:  R_X86_64_64  _JIT_CONTINUE
// 392: 48 89 df                      movq    %rbx, %rdi
// 395: 4c 89 fe                      movq    %r15, %rsi
// 398: 48 89 ea                      movq    %rbp, %rdx
// 39b: 48 83 c4 18                   addq    $0x18, %rsp
// 39f: 5b                            popq    %rbx
// 3a0: 41 5c                         popq    %r12
// 3a2: 41 5d                         popq    %r13
// 3a4: 41 5e                         popq    %r14
// 3a6: 41 5f                         popq    %r15
// 3a8: 5d                            popq    %rbp
// 3a9: ff e0                         jmpq    *%rax
// 3ab: 49 29 de                      subq    %rbx, %r14
// 3ae: 49 83 c6 b8                   addq    $-0x48, %r14
// 3b2: 49 c1 ee 03                   shrq    $0x3, %r14
// 3b6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 3ba: 31 c0                         xorl    %eax, %eax
// 3bc: 48 83 c4 18                   addq    $0x18, %rsp
// 3c0: 5b                            popq    %rbx
// 3c1: 41 5c                         popq    %r12
// 3c3: 41 5d                         popq    %r13
// 3c5: 41 5e                         popq    %r14
// 3c7: 41 5f                         popq    %r15
// 3c9: 5d                            popq    %rbp
// 3ca: c3                            retq
// 3cb: 
static const unsigned char _CHECK_EG_MATCHplus_BINARY_SUBSCR_DICT_code_body[972] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x4c, 0x8d, 0x76, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x89, 0xe1, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x42, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x51, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x72, 0x01, 0x00, 0x00, 0xe9, 0x7d, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x24, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x16, 0x02, 0x00, 0x00, 0x4d, 0x8d, 0x7c, 0x24, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xef, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x49, 0x89, 0x2e, 0x4d, 0x89, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x45, 0x08, 0x74, 0x49, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xbb, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x6f, 0xff, 0xff, 0xff, 0xe9, 0x8e, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x41, 0x89, 0xc4, 0x85, 0xc0, 0x0f, 0x84, 0x87, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xb4, 0x00, 0x00, 0x00, 0xe9, 0xd0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xaf, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x10, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0xfb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xe7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x6a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0d, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x45, 0x85, 0xe4, 0x7e, 0x2a, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_BINARY_SUBSCR_DICT_code_holes[34] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetKeyError, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x332, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x33c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x35d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x36f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x38a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_BINARY_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BINARY_SUBSCR_DICT_data_holes[1];

// _CHECK_EG_MATCHplus_BINARY_SUBSCR_LIST_INT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BINARY_SUBSCR_LIST_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 4c 8d 76 f0                   leaq    -0x10(%rsi), %r14
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 fe                      movq    %r15, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 fe                      movq    %r15, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 56                         jle     0xd9 <_JIT_ENTRY+0xd9>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 78                         jns     0xff <_JIT_ENTRY+0xff>
// 87: e9 89 00 00 00                jmp     0x115 <_JIT_ENTRY+0x115>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 4c 89 ea                      movq    %r13, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 45 00                   movq    (%r13), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 4d 00                   decq    (%r13)
// c2: 74 6a                         je      0x12e <_JIT_ENTRY+0x12e>
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7e 79                         jle     0x145 <_JIT_ENTRY+0x145>
// cc: 85 c0                         testl   %eax, %eax
// ce: 0f 89 96 00 00 00             jns     0x16a <_JIT_ENTRY+0x16a>
// d4: e9 a6 00 00 00                jmp     0x17f <_JIT_ENTRY+0x17f>
// d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000db:  R_X86_64_64  .rodata.str1.1
// e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e5:  R_X86_64_64  _Py_NegativeRefcount
// ed: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f2: 4c 89 ea                      movq    %r13, %rdx
// f5: ff d0                         callq   *%rax
// f7: 49 8b 45 00                   movq    (%r13), %rax
// fb: 85 c0                         testl   %eax, %eax
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 4d 00                   decq    (%r13)
// 10f: 0f 84 fd 01 00 00             je      0x312 <_JIT_ENTRY+0x312>
// 115: 49 8b 07                      movq    (%r15), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 0f 8e 0c 02 00 00             jle     0x32d <_JIT_ENTRY+0x32d>
// 121: 85 c0                         testl   %eax, %eax
// 123: 0f 89 29 02 00 00             jns     0x352 <_JIT_ENTRY+0x352>
// 129: e9 44 02 00 00                jmp     0x372 <_JIT_ENTRY+0x372>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_Dealloc
// 138: 4c 89 ef                      movq    %r13, %rdi
// 13b: ff d0                         callq   *%rax
// 13d: 49 8b 07                      movq    (%r15), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 87                         jg      0xcc <_JIT_ENTRY+0xcc>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15e: 4c 89 fa                      movq    %r15, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 07                      movq    (%r15), %rax
// 166: 85 c0                         testl   %eax, %eax
// 168: 78 15                         js      0x17f <_JIT_ENTRY+0x17f>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 0f                      decq    (%r15)
// 179: 0f 84 7a 01 00 00             je      0x2f9 <_JIT_ENTRY+0x2f9>
// 17f: 85 ed                         testl   %ebp, %ebp
// 181: 0f 88 eb 01 00 00             js      0x372 <_JIT_ENTRY+0x372>
// 187: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 de 01 00 00             je      0x372 <_JIT_ENTRY+0x372>
// 194: 4d 8d 7c 24 f8                leaq    -0x8(%r12), %r15
// 199: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000019b:  R_X86_64_64  _Py_NoneStruct
// 1a3: 48 39 ef                      cmpq    %rbp, %rdi
// 1a6: 74 10                         je      0x1b8 <_JIT_ENTRY+0x1b8>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  PyErr_SetHandledException
// 1b2: ff d0                         callq   *%rax
// 1b4: 48 8b 2c 24                   movq    (%rsp), %rbp
// 1b8: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 1bd: 4d 89 2e                      movq    %r13, (%r14)
// 1c0: 49 89 2f                      movq    %rbp, (%r15)
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  PyLong_Type
// 1cd: 48 39 45 08                   cmpq    %rax, 0x8(%rbp)
// 1d1: 0f 85 f5 00 00 00             jne     0x2cc <_JIT_ENTRY+0x2cc>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  PyList_Type
// 1e1: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1e5: 0f 85 e1 00 00 00             jne     0x2cc <_JIT_ENTRY+0x2cc>
// 1eb: 48 83 7d 10 08                cmpq    $0x8, 0x10(%rbp)
// 1f0: 0f 87 d6 00 00 00             ja      0x2cc <_JIT_ENTRY+0x2cc>
// 1f6: 8b 45 18                      movl    0x18(%rbp), %eax
// 1f9: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 1fd: 0f 8e c9 00 00 00             jle     0x2cc <_JIT_ENTRY+0x2cc>
// 203: 49 8b 4d 18                   movq    0x18(%r13), %rcx
// 207: 4c 8b 24 c1                   movq    (%rcx,%rax,8), %r12
// 20b: 41 8b 04 24                   movl    (%r12), %eax
// 20f: ff c0                         incl    %eax
// 211: 74 10                         je      0x223 <_JIT_ENTRY+0x223>
// 213: 41 89 04 24                   movl    %eax, (%r12)
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 221: ff d0                         callq   *%rax
// 223: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 227: 75 28                         jne     0x251 <_JIT_ENTRY+0x251>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  PyInterpreterState_Get
// 233: ff d0                         callq   *%rax
// 235: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 23c: 48 ff 4d 00                   decq    (%rbp)
// 240: 75 0f                         jne     0x251 <_JIT_ENTRY+0x251>
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  PyObject_Free
// 24c: 48 89 ef                      movq    %rbp, %rdi
// 24f: ff d0                         callq   *%rax
// 251: 49 8b 45 00                   movq    (%r13), %rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 7f 22                         jg      0x27c <_JIT_ENTRY+0x27c>
// 25a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025c:  R_X86_64_64  .rodata.str1.1
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_NegativeRefcount
// 26e: be cc 01 00 00                movl    $0x1cc, %esi            # imm = 0x1CC
// 273: 4c 89 ea                      movq    %r13, %rdx
// 276: ff d0                         callq   *%rax
// 278: 49 8b 45 00                   movq    (%r13), %rax
// 27c: 85 c0                         testl   %eax, %eax
// 27e: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 283: 78 21                         js      0x2a6 <_JIT_ENTRY+0x2a6>
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28f: ff d0                         callq   *%rax
// 291: 49 ff 4d 00                   decq    (%r13)
// 295: 75 0f                         jne     0x2a6 <_JIT_ENTRY+0x2a6>
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _Py_Dealloc
// 2a1: 4c 89 ef                      movq    %r13, %rdi
// 2a4: ff d0                         callq   *%rax
// 2a6: 4d 89 26                      movq    %r12, (%r14)
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _JIT_CONTINUE
// 2b3: 48 89 df                      movq    %rbx, %rdi
// 2b6: 4c 89 fe                      movq    %r15, %rsi
// 2b9: 48 89 ea                      movq    %rbp, %rdx
// 2bc: 48 83 c4 18                   addq    $0x18, %rsp
// 2c0: 5b                            popq    %rbx
// 2c1: 41 5c                         popq    %r12
// 2c3: 41 5d                         popq    %r13
// 2c5: 41 5e                         popq    %r14
// 2c7: 41 5f                         popq    %r15
// 2c9: 5d                            popq    %rbp
// 2ca: ff e0                         jmpq    *%rax
// 2cc: 49 29 dc                      subq    %rbx, %r12
// 2cf: 49 83 c4 b8                   addq    $-0x48, %r12
// 2d3: 49 c1 ec 03                   shrq    $0x3, %r12
// 2d7: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2db: 48 8b 03                      movq    (%rbx), %rax
// 2de: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002e0:  R_X86_64_64  _JIT_TARGET
// 2e8: 89 c9                         movl    %ecx, %ecx
// 2ea: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2ee: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2f4: e9 8a 00 00 00                jmp     0x383 <_JIT_ENTRY+0x383>
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_Dealloc
// 303: 4c 89 ff                      movq    %r15, %rdi
// 306: ff d0                         callq   *%rax
// 308: 85 ed                         testl   %ebp, %ebp
// 30a: 0f 89 77 fe ff ff             jns     0x187 <_JIT_ENTRY+0x187>
// 310: eb 60                         jmp     0x372 <_JIT_ENTRY+0x372>
// 312: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000314:  R_X86_64_64  _Py_Dealloc
// 31c: 4c 89 ef                      movq    %r13, %rdi
// 31f: ff d0                         callq   *%rax
// 321: 49 8b 07                      movq    (%r15), %rax
// 324: 48 85 c0                      testq   %rax, %rax
// 327: 0f 8f f4 fd ff ff             jg      0x121 <_JIT_ENTRY+0x121>
// 32d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000032f:  R_X86_64_64  .rodata.str1.1
// 337: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000339:  R_X86_64_64  _Py_NegativeRefcount
// 341: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 346: 4c 89 fa                      movq    %r15, %rdx
// 349: ff d0                         callq   *%rax
// 34b: 49 8b 07                      movq    (%r15), %rax
// 34e: 85 c0                         testl   %eax, %eax
// 350: 78 20                         js      0x372 <_JIT_ENTRY+0x372>
// 352: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000354:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 35c: ff d0                         callq   *%rax
// 35e: 49 ff 0f                      decq    (%r15)
// 361: 75 0f                         jne     0x372 <_JIT_ENTRY+0x372>
// 363: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000365:  R_X86_64_64  _Py_Dealloc
// 36d: 4c 89 ff                      movq    %r15, %rdi
// 370: ff d0                         callq   *%rax
// 372: 49 29 de                      subq    %rbx, %r14
// 375: 49 83 c6 b8                   addq    $-0x48, %r14
// 379: 49 c1 ee 03                   shrq    $0x3, %r14
// 37d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 381: 31 c0                         xorl    %eax, %eax
// 383: 48 83 c4 18                   addq    $0x18, %rsp
// 387: 5b                            popq    %rbx
// 388: 41 5c                         popq    %r12
// 38a: 41 5d                         popq    %r13
// 38c: 41 5e                         popq    %r14
// 38e: 41 5f                         popq    %r15
// 390: 5d                            popq    %rbp
// 391: c3                            retq
// 392: 
static const unsigned char _CHECK_EG_MATCHplus_BINARY_SUBSCR_LIST_INT_code_body[915] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x4c, 0x8d, 0x76, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xfd, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x0c, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x29, 0x02, 0x00, 0x00, 0xe9, 0x44, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x7a, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xeb, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xde, 0x01, 0x00, 0x00, 0x4d, 0x8d, 0x7c, 0x24, 0xf8, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xef, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x2c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x4d, 0x89, 0x2e, 0x49, 0x89, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xf5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xe1, 0x00, 0x00, 0x00, 0x48, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xd6, 0x00, 0x00, 0x00, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x8e, 0xc9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x4d, 0x18, 0x4c, 0x8b, 0x24, 0xc1, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcc, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x77, 0xfe, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xf4, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_BINARY_SUBSCR_LIST_INT_code_holes[32] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x314, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x32f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x339, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x354, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x365, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_BINARY_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BINARY_SUBSCR_LIST_INT_data_holes[1];

// _CHECK_EG_MATCHplus_BINARY_SUBSCR_STR_INT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BINARY_SUBSCR_STR_INT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 4c 8d 76 f0                   leaq    -0x10(%rsi), %r14
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 44                         js      0x7d <_JIT_ENTRY+0x7d>
// 39: 48 89 6c 24 20                movq    %rbp, 0x20(%rsp)
// 3e: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 47: 48 c7 44 24 18 00 00 00 00    movq    $0x0, 0x18(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 5a: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 5f: 48 8d 4c 24 18                leaq    0x18(%rsp), %rcx
// 64: 4c 89 ef                      movq    %r13, %rdi
// 67: 4c 89 e6                      movq    %r12, %rsi
// 6a: ff d0                         callq   *%rax
// 6c: 89 c5                         movl    %eax, %ebp
// 6e: 49 8b 45 00                   movq    (%r13), %rax
// 72: 48 85 c0                      testq   %rax, %rax
// 75: 7e 18                         jle     0x8f <_JIT_ENTRY+0x8f>
// 77: 85 c0                         testl   %eax, %eax
// 79: 79 3a                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 7b: eb 4a                         jmp     0xc7 <_JIT_ENTRY+0xc7>
// 7d: 49 8b 45 00                   movq    (%r13), %rax
// 81: 48 85 c0                      testq   %rax, %rax
// 84: 7e 57                         jle     0xdd <_JIT_ENTRY+0xdd>
// 86: 85 c0                         testl   %eax, %eax
// 88: 79 79                         jns     0x103 <_JIT_ENTRY+0x103>
// 8a: e9 8a 00 00 00                jmp     0x119 <_JIT_ENTRY+0x119>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a8: 4c 89 ea                      movq    %r13, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 45 00                   movq    (%r13), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 12                         js      0xc7 <_JIT_ENTRY+0xc7>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 4d 00                   decq    (%r13)
// c5: 74 6c                         je      0x133 <_JIT_ENTRY+0x133>
// c7: 49 8b 04 24                   movq    (%r12), %rax
// cb: 48 85 c0                      testq   %rax, %rax
// ce: 7e 7b                         jle     0x14b <_JIT_ENTRY+0x14b>
// d0: 85 c0                         testl   %eax, %eax
// d2: 0f 89 99 00 00 00             jns     0x171 <_JIT_ENTRY+0x171>
// d8: e9 aa 00 00 00                jmp     0x187 <_JIT_ENTRY+0x187>
// dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000df:  R_X86_64_64  .rodata.str1.1
// e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e9:  R_X86_64_64  _Py_NegativeRefcount
// f1: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f6: 4c 89 ea                      movq    %r13, %rdx
// f9: ff d0                         callq   *%rax
// fb: 49 8b 45 00                   movq    (%r13), %rax
// ff: 85 c0                         testl   %eax, %eax
// 101: 78 16                         js      0x119 <_JIT_ENTRY+0x119>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10d: ff d0                         callq   *%rax
// 10f: 49 ff 4d 00                   decq    (%r13)
// 113: 0f 84 41 01 00 00             je      0x25a <_JIT_ENTRY+0x25a>
// 119: 49 8b 04 24                   movq    (%r12), %rax
// 11d: 48 85 c0                      testq   %rax, %rax
// 120: 0f 8e 50 01 00 00             jle     0x276 <_JIT_ENTRY+0x276>
// 126: 85 c0                         testl   %eax, %eax
// 128: 0f 89 6e 01 00 00             jns     0x29c <_JIT_ENTRY+0x29c>
// 12e: e9 8a 01 00 00                jmp     0x2bd <_JIT_ENTRY+0x2bd>
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_Dealloc
// 13d: 4c 89 ef                      movq    %r13, %rdi
// 140: ff d0                         callq   *%rax
// 142: 49 8b 04 24                   movq    (%r12), %rax
// 146: 48 85 c0                      testq   %rax, %rax
// 149: 7f 85                         jg      0xd0 <_JIT_ENTRY+0xd0>
// 14b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014d:  R_X86_64_64  .rodata.str1.1
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  _Py_NegativeRefcount
// 15f: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 164: 4c 89 e2                      movq    %r12, %rdx
// 167: ff d0                         callq   *%rax
// 169: 49 8b 04 24                   movq    (%r12), %rax
// 16d: 85 c0                         testl   %eax, %eax
// 16f: 78 16                         js      0x187 <_JIT_ENTRY+0x187>
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17b: ff d0                         callq   *%rax
// 17d: 49 ff 0c 24                   decq    (%r12)
// 181: 0f 84 ba 00 00 00             je      0x241 <_JIT_ENTRY+0x241>
// 187: 85 ed                         testl   %ebp, %ebp
// 189: 0f 88 2e 01 00 00             js      0x2bd <_JIT_ENTRY+0x2bd>
// 18f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 194: 48 85 ff                      testq   %rdi, %rdi
// 197: 0f 84 20 01 00 00             je      0x2bd <_JIT_ENTRY+0x2bd>
// 19d: 4d 8d 67 f8                   leaq    -0x8(%r15), %r12
// 1a1: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001a3:  R_X86_64_64  _Py_NoneStruct
// 1ab: 48 39 ef                      cmpq    %rbp, %rdi
// 1ae: 74 11                         je      0x1c1 <_JIT_ENTRY+0x1c1>
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  PyErr_SetHandledException
// 1ba: ff d0                         callq   *%rax
// 1bc: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 1c1: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 1c6: 4d 89 2e                      movq    %r13, (%r14)
// 1c9: 49 89 2c 24                   movq    %rbp, (%r12)
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  PyLong_Type
// 1d7: 48 39 45 08                   cmpq    %rax, 0x8(%rbp)
// 1db: 0f 85 5c 01 00 00             jne     0x33d <_JIT_ENTRY+0x33d>
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  PyUnicode_Type
// 1eb: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1ef: 0f 85 48 01 00 00             jne     0x33d <_JIT_ENTRY+0x33d>
// 1f5: 48 83 7d 10 08                cmpq    $0x8, 0x10(%rbp)
// 1fa: 0f 87 3d 01 00 00             ja      0x33d <_JIT_ENTRY+0x33d>
// 200: 8b 45 18                      movl    0x18(%rbp), %eax
// 203: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 207: 0f 8e 30 01 00 00             jle     0x33d <_JIT_ENTRY+0x33d>
// 20d: 41 8b 4d 20                   movl    0x20(%r13), %ecx
// 211: 89 ca                         movl    %ecx, %edx
// 213: c1 ea 02                      shrl    $0x2, %edx
// 216: 83 e2 07                      andl    $0x7, %edx
// 219: 83 fa 02                      cmpl    $0x2, %edx
// 21c: 0f 84 b1 00 00 00             je      0x2d3 <_JIT_ENTRY+0x2d3>
// 222: 83 fa 01                      cmpl    $0x1, %edx
// 225: 0f 85 b7 00 00 00             jne     0x2e2 <_JIT_ENTRY+0x2e2>
// 22b: f6 c1 20                      testb   $0x20, %cl
// 22e: 0f 85 b9 00 00 00             jne     0x2ed <_JIT_ENTRY+0x2ed>
// 234: 49 8b 4d 38                   movq    0x38(%r13), %rcx
// 238: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 23c: e9 f7 00 00 00                jmp     0x338 <_JIT_ENTRY+0x338>
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _Py_Dealloc
// 24b: 4c 89 e7                      movq    %r12, %rdi
// 24e: ff d0                         callq   *%rax
// 250: 85 ed                         testl   %ebp, %ebp
// 252: 0f 89 37 ff ff ff             jns     0x18f <_JIT_ENTRY+0x18f>
// 258: eb 63                         jmp     0x2bd <_JIT_ENTRY+0x2bd>
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _Py_Dealloc
// 264: 4c 89 ef                      movq    %r13, %rdi
// 267: ff d0                         callq   *%rax
// 269: 49 8b 04 24                   movq    (%r12), %rax
// 26d: 48 85 c0                      testq   %rax, %rax
// 270: 0f 8f b0 fe ff ff             jg      0x126 <_JIT_ENTRY+0x126>
// 276: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000278:  R_X86_64_64  .rodata.str1.1
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_NegativeRefcount
// 28a: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 28f: 4c 89 e2                      movq    %r12, %rdx
// 292: ff d0                         callq   *%rax
// 294: 49 8b 04 24                   movq    (%r12), %rax
// 298: 85 c0                         testl   %eax, %eax
// 29a: 78 21                         js      0x2bd <_JIT_ENTRY+0x2bd>
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a6: ff d0                         callq   *%rax
// 2a8: 49 ff 0c 24                   decq    (%r12)
// 2ac: 75 0f                         jne     0x2bd <_JIT_ENTRY+0x2bd>
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _Py_Dealloc
// 2b8: 4c 89 e7                      movq    %r12, %rdi
// 2bb: ff d0                         callq   *%rax
// 2bd: 49 29 de                      subq    %rbx, %r14
// 2c0: 49 83 c6 b8                   addq    $-0x48, %r14
// 2c4: 49 c1 ee 03                   shrq    $0x3, %r14
// 2c8: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2cc: 31 c0                         xorl    %eax, %eax
// 2ce: e9 92 00 00 00                jmp     0x365 <_JIT_ENTRY+0x365>
// 2d3: f6 c1 20                      testb   $0x20, %cl
// 2d6: 75 2f                         jne     0x307 <_JIT_ENTRY+0x307>
// 2d8: 49 8b 4d 38                   movq    0x38(%r13), %rcx
// 2dc: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 2e0: eb 56                         jmp     0x338 <_JIT_ENTRY+0x338>
// 2e2: f6 c1 20                      testb   $0x20, %cl
// 2e5: 75 3a                         jne     0x321 <_JIT_ENTRY+0x321>
// 2e7: 49 8b 4d 38                   movq    0x38(%r13), %rcx
// 2eb: eb 48                         jmp     0x335 <_JIT_ENTRY+0x335>
// 2ed: 31 d2                         xorl    %edx, %edx
// 2ef: f6 c1 40                      testb   $0x40, %cl
// 2f2: 0f 94 c2                      sete    %dl
// 2f5: 48 c1 e2 04                   shlq    $0x4, %rdx
// 2f9: 4a 8d 0c 2a                   leaq    (%rdx,%r13), %rcx
// 2fd: 48 83 c1 28                   addq    $0x28, %rcx
// 301: 0f b6 04 01                   movzbl  (%rcx,%rax), %eax
// 305: eb 31                         jmp     0x338 <_JIT_ENTRY+0x338>
// 307: 31 d2                         xorl    %edx, %edx
// 309: f6 c1 40                      testb   $0x40, %cl
// 30c: 0f 94 c2                      sete    %dl
// 30f: 48 c1 e2 04                   shlq    $0x4, %rdx
// 313: 4a 8d 0c 2a                   leaq    (%rdx,%r13), %rcx
// 317: 48 83 c1 28                   addq    $0x28, %rcx
// 31b: 0f b7 04 41                   movzwl  (%rcx,%rax,2), %eax
// 31f: eb 17                         jmp     0x338 <_JIT_ENTRY+0x338>
// 321: 31 d2                         xorl    %edx, %edx
// 323: f6 c1 40                      testb   $0x40, %cl
// 326: 0f 94 c2                      sete    %dl
// 329: 48 c1 e2 04                   shlq    $0x4, %rdx
// 32d: 4a 8d 0c 2a                   leaq    (%rdx,%r13), %rcx
// 331: 48 83 c1 28                   addq    $0x28, %rcx
// 335: 8b 04 81                      movl    (%rcx,%rax,4), %eax
// 338: 83 f8 7f                      cmpl    $0x7f, %eax
// 33b: 76 37                         jbe     0x374 <_JIT_ENTRY+0x374>
// 33d: 49 29 df                      subq    %rbx, %r15
// 340: 49 83 c7 b8                   addq    $-0x48, %r15
// 344: 49 c1 ef 03                   shrq    $0x3, %r15
// 348: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 34c: 48 8b 03                      movq    (%rbx), %rax
// 34f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000351:  R_X86_64_64  _JIT_TARGET
// 359: 89 c9                         movl    %ecx, %ecx
// 35b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 35f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 365: 48 83 c4 28                   addq    $0x28, %rsp
// 369: 5b                            popq    %rbx
// 36a: 41 5c                         popq    %r12
// 36c: 41 5d                         popq    %r13
// 36e: 41 5e                         popq    %r14
// 370: 41 5f                         popq    %r15
// 372: 5d                            popq    %rbp
// 373: c3                            retq
// 374: 89 44 24 14                   movl    %eax, 0x14(%rsp)
// 378: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 37c: 75 28                         jne     0x3a6 <_JIT_ENTRY+0x3a6>
// 37e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000380:  R_X86_64_64  PyInterpreterState_Get
// 388: ff d0                         callq   *%rax
// 38a: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 391: 48 ff 4d 00                   decq    (%rbp)
// 395: 75 0f                         jne     0x3a6 <_JIT_ENTRY+0x3a6>
// 397: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000399:  R_X86_64_64  PyObject_Free
// 3a1: 48 89 ef                      movq    %rbp, %rdi
// 3a4: ff d0                         callq   *%rax
// 3a6: 49 8b 45 00                   movq    (%r13), %rax
// 3aa: 48 85 c0                      testq   %rax, %rax
// 3ad: 7f 22                         jg      0x3d1 <_JIT_ENTRY+0x3d1>
// 3af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003b1:  R_X86_64_64  .rodata.str1.1
// 3b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bb:  R_X86_64_64  _Py_NegativeRefcount
// 3c3: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 3c8: 4c 89 ea                      movq    %r13, %rdx
// 3cb: ff d0                         callq   *%rax
// 3cd: 49 8b 45 00                   movq    (%r13), %rax
// 3d1: 85 c0                         testl   %eax, %eax
// 3d3: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 3d8: 78 21                         js      0x3fb <_JIT_ENTRY+0x3fb>
// 3da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003dc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3e4: ff d0                         callq   *%rax
// 3e6: 49 ff 4d 00                   decq    (%r13)
// 3ea: 75 0f                         jne     0x3fb <_JIT_ENTRY+0x3fb>
// 3ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ee:  R_X86_64_64  _Py_Dealloc
// 3f6: 4c 89 ef                      movq    %r13, %rdi
// 3f9: ff d0                         callq   *%rax
// 3fb: 8b 44 24 14                   movl    0x14(%rsp), %eax
// 3ff: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 403: 48 c1 e0 04                   shlq    $0x4, %rax
// 407: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000409:  R_X86_64_64  _PyRuntime
// 411: 48 01 c8                      addq    %rcx, %rax
// 414: 48 05 a0 32 01 00             addq    $0x132a0, %rax          # imm = 0x132A0
// 41a: 49 89 06                      movq    %rax, (%r14)
// 41d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000041f:  R_X86_64_64  _JIT_CONTINUE
// 427: 48 89 df                      movq    %rbx, %rdi
// 42a: 4c 89 e6                      movq    %r12, %rsi
// 42d: 4c 89 fa                      movq    %r15, %rdx
// 430: 48 83 c4 28                   addq    $0x28, %rsp
// 434: 5b                            popq    %rbx
// 435: 41 5c                         popq    %r12
// 437: 41 5d                         popq    %r13
// 439: 41 5e                         popq    %r14
// 43b: 41 5f                         popq    %r15
// 43d: 5d                            popq    %rbp
// 43e: ff e0                         jmpq    *%rax
// 440: 
static const unsigned char _CHECK_EG_MATCHplus_BINARY_SUBSCR_STR_INT_code_body[1089] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8d, 0x76, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x44, 0x48, 0x89, 0x6c, 0x24, 0x20, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x18, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x41, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x50, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x6e, 0x01, 0x00, 0x00, 0xe9, 0x8a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xba, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x2e, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x20, 0x01, 0x00, 0x00, 0x4d, 0x8d, 0x67, 0xf8, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xef, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x4d, 0x89, 0x2e, 0x49, 0x89, 0x2c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x5c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x48, 0x01, 0x00, 0x00, 0x48, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x3d, 0x01, 0x00, 0x00, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x8e, 0x30, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x4d, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x83, 0xfa, 0x01, 0x0f, 0x85, 0xb7, 0x00, 0x00, 0x00, 0xf6, 0xc1, 0x20, 0x0f, 0x85, 0xb9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x4d, 0x38, 0x0f, 0xb6, 0x04, 0x01, 0xe9, 0xf7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x37, 0xff, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xb0, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x92, 0x00, 0x00, 0x00, 0xf6, 0xc1, 0x20, 0x75, 0x2f, 0x49, 0x8b, 0x4d, 0x38, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x56, 0xf6, 0xc1, 0x20, 0x75, 0x3a, 0x49, 0x8b, 0x4d, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x2a, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x04, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x2a, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x04, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x2a, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x04, 0x81, 0x83, 0xf8, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x44, 0x24, 0x14, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x8b, 0x44, 0x24, 0x14, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xc8, 0x48, 0x05, 0xa0, 0x32, 0x01, 0x00, 0x49, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_BINARY_SUBSCR_STR_INT_code_holes[32] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x351, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x380, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x399, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x3b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x409, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x41f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_BINARY_SUBSCR_STR_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BINARY_SUBSCR_STR_INT_data_holes[1];

// _CHECK_EG_MATCHplus_BINARY_SUBSCR_TUPLE_INT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BINARY_SUBSCR_TUPLE_INT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 4c 8d 76 f0                   leaq    -0x10(%rsi), %r14
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 fe                      movq    %r15, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 fe                      movq    %r15, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 56                         jle     0xd9 <_JIT_ENTRY+0xd9>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 78                         jns     0xff <_JIT_ENTRY+0xff>
// 87: e9 89 00 00 00                jmp     0x115 <_JIT_ENTRY+0x115>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 4c 89 ea                      movq    %r13, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 45 00                   movq    (%r13), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 4d 00                   decq    (%r13)
// c2: 74 6a                         je      0x12e <_JIT_ENTRY+0x12e>
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7e 79                         jle     0x145 <_JIT_ENTRY+0x145>
// cc: 85 c0                         testl   %eax, %eax
// ce: 0f 89 96 00 00 00             jns     0x16a <_JIT_ENTRY+0x16a>
// d4: e9 a6 00 00 00                jmp     0x17f <_JIT_ENTRY+0x17f>
// d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000db:  R_X86_64_64  .rodata.str1.1
// e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e5:  R_X86_64_64  _Py_NegativeRefcount
// ed: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f2: 4c 89 ea                      movq    %r13, %rdx
// f5: ff d0                         callq   *%rax
// f7: 49 8b 45 00                   movq    (%r13), %rax
// fb: 85 c0                         testl   %eax, %eax
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 4d 00                   decq    (%r13)
// 10f: 0f 84 fa 01 00 00             je      0x30f <_JIT_ENTRY+0x30f>
// 115: 49 8b 07                      movq    (%r15), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 0f 8e 09 02 00 00             jle     0x32a <_JIT_ENTRY+0x32a>
// 121: 85 c0                         testl   %eax, %eax
// 123: 0f 89 26 02 00 00             jns     0x34f <_JIT_ENTRY+0x34f>
// 129: e9 41 02 00 00                jmp     0x36f <_JIT_ENTRY+0x36f>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_Dealloc
// 138: 4c 89 ef                      movq    %r13, %rdi
// 13b: ff d0                         callq   *%rax
// 13d: 49 8b 07                      movq    (%r15), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 87                         jg      0xcc <_JIT_ENTRY+0xcc>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15e: 4c 89 fa                      movq    %r15, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 07                      movq    (%r15), %rax
// 166: 85 c0                         testl   %eax, %eax
// 168: 78 15                         js      0x17f <_JIT_ENTRY+0x17f>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 0f                      decq    (%r15)
// 179: 0f 84 77 01 00 00             je      0x2f6 <_JIT_ENTRY+0x2f6>
// 17f: 85 ed                         testl   %ebp, %ebp
// 181: 0f 88 e8 01 00 00             js      0x36f <_JIT_ENTRY+0x36f>
// 187: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 db 01 00 00             je      0x36f <_JIT_ENTRY+0x36f>
// 194: 4d 8d 7c 24 f8                leaq    -0x8(%r12), %r15
// 199: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000019b:  R_X86_64_64  _Py_NoneStruct
// 1a3: 48 39 ef                      cmpq    %rbp, %rdi
// 1a6: 74 10                         je      0x1b8 <_JIT_ENTRY+0x1b8>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  PyErr_SetHandledException
// 1b2: ff d0                         callq   *%rax
// 1b4: 48 8b 2c 24                   movq    (%rsp), %rbp
// 1b8: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 1bd: 4d 89 2e                      movq    %r13, (%r14)
// 1c0: 49 89 2f                      movq    %rbp, (%r15)
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  PyLong_Type
// 1cd: 48 39 45 08                   cmpq    %rax, 0x8(%rbp)
// 1d1: 0f 85 f2 00 00 00             jne     0x2c9 <_JIT_ENTRY+0x2c9>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  PyTuple_Type
// 1e1: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1e5: 0f 85 de 00 00 00             jne     0x2c9 <_JIT_ENTRY+0x2c9>
// 1eb: 48 83 7d 10 08                cmpq    $0x8, 0x10(%rbp)
// 1f0: 0f 87 d3 00 00 00             ja      0x2c9 <_JIT_ENTRY+0x2c9>
// 1f6: 8b 45 18                      movl    0x18(%rbp), %eax
// 1f9: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 1fd: 0f 8e c6 00 00 00             jle     0x2c9 <_JIT_ENTRY+0x2c9>
// 203: 4d 8b 64 c5 18                movq    0x18(%r13,%rax,8), %r12
// 208: 41 8b 04 24                   movl    (%r12), %eax
// 20c: ff c0                         incl    %eax
// 20e: 74 10                         je      0x220 <_JIT_ENTRY+0x220>
// 210: 41 89 04 24                   movl    %eax, (%r12)
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 21e: ff d0                         callq   *%rax
// 220: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 224: 75 28                         jne     0x24e <_JIT_ENTRY+0x24e>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  PyInterpreterState_Get
// 230: ff d0                         callq   *%rax
// 232: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 239: 48 ff 4d 00                   decq    (%rbp)
// 23d: 75 0f                         jne     0x24e <_JIT_ENTRY+0x24e>
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  PyObject_Free
// 249: 48 89 ef                      movq    %rbp, %rdi
// 24c: ff d0                         callq   *%rax
// 24e: 49 8b 45 00                   movq    (%r13), %rax
// 252: 48 85 c0                      testq   %rax, %rax
// 255: 7f 22                         jg      0x279 <_JIT_ENTRY+0x279>
// 257: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000259:  R_X86_64_64  .rodata.str1.1
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_NegativeRefcount
// 26b: be fa 01 00 00                movl    $0x1fa, %esi            # imm = 0x1FA
// 270: 4c 89 ea                      movq    %r13, %rdx
// 273: ff d0                         callq   *%rax
// 275: 49 8b 45 00                   movq    (%r13), %rax
// 279: 85 c0                         testl   %eax, %eax
// 27b: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 280: 78 21                         js      0x2a3 <_JIT_ENTRY+0x2a3>
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28c: ff d0                         callq   *%rax
// 28e: 49 ff 4d 00                   decq    (%r13)
// 292: 75 0f                         jne     0x2a3 <_JIT_ENTRY+0x2a3>
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _Py_Dealloc
// 29e: 4c 89 ef                      movq    %r13, %rdi
// 2a1: ff d0                         callq   *%rax
// 2a3: 4d 89 26                      movq    %r12, (%r14)
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  _JIT_CONTINUE
// 2b0: 48 89 df                      movq    %rbx, %rdi
// 2b3: 4c 89 fe                      movq    %r15, %rsi
// 2b6: 48 89 ea                      movq    %rbp, %rdx
// 2b9: 48 83 c4 18                   addq    $0x18, %rsp
// 2bd: 5b                            popq    %rbx
// 2be: 41 5c                         popq    %r12
// 2c0: 41 5d                         popq    %r13
// 2c2: 41 5e                         popq    %r14
// 2c4: 41 5f                         popq    %r15
// 2c6: 5d                            popq    %rbp
// 2c7: ff e0                         jmpq    *%rax
// 2c9: 49 29 dc                      subq    %rbx, %r12
// 2cc: 49 83 c4 b8                   addq    $-0x48, %r12
// 2d0: 49 c1 ec 03                   shrq    $0x3, %r12
// 2d4: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2d8: 48 8b 03                      movq    (%rbx), %rax
// 2db: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002dd:  R_X86_64_64  _JIT_TARGET
// 2e5: 89 c9                         movl    %ecx, %ecx
// 2e7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2eb: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2f1: e9 8a 00 00 00                jmp     0x380 <_JIT_ENTRY+0x380>
// 2f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f8:  R_X86_64_64  _Py_Dealloc
// 300: 4c 89 ff                      movq    %r15, %rdi
// 303: ff d0                         callq   *%rax
// 305: 85 ed                         testl   %ebp, %ebp
// 307: 0f 89 7a fe ff ff             jns     0x187 <_JIT_ENTRY+0x187>
// 30d: eb 60                         jmp     0x36f <_JIT_ENTRY+0x36f>
// 30f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000311:  R_X86_64_64  _Py_Dealloc
// 319: 4c 89 ef                      movq    %r13, %rdi
// 31c: ff d0                         callq   *%rax
// 31e: 49 8b 07                      movq    (%r15), %rax
// 321: 48 85 c0                      testq   %rax, %rax
// 324: 0f 8f f7 fd ff ff             jg      0x121 <_JIT_ENTRY+0x121>
// 32a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000032c:  R_X86_64_64  .rodata.str1.1
// 334: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000336:  R_X86_64_64  _Py_NegativeRefcount
// 33e: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 343: 4c 89 fa                      movq    %r15, %rdx
// 346: ff d0                         callq   *%rax
// 348: 49 8b 07                      movq    (%r15), %rax
// 34b: 85 c0                         testl   %eax, %eax
// 34d: 78 20                         js      0x36f <_JIT_ENTRY+0x36f>
// 34f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000351:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 359: ff d0                         callq   *%rax
// 35b: 49 ff 0f                      decq    (%r15)
// 35e: 75 0f                         jne     0x36f <_JIT_ENTRY+0x36f>
// 360: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000362:  R_X86_64_64  _Py_Dealloc
// 36a: 4c 89 ff                      movq    %r15, %rdi
// 36d: ff d0                         callq   *%rax
// 36f: 49 29 de                      subq    %rbx, %r14
// 372: 49 83 c6 b8                   addq    $-0x48, %r14
// 376: 49 c1 ee 03                   shrq    $0x3, %r14
// 37a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 37e: 31 c0                         xorl    %eax, %eax
// 380: 48 83 c4 18                   addq    $0x18, %rsp
// 384: 5b                            popq    %rbx
// 385: 41 5c                         popq    %r12
// 387: 41 5d                         popq    %r13
// 389: 41 5e                         popq    %r14
// 38b: 41 5f                         popq    %r15
// 38d: 5d                            popq    %rbp
// 38e: c3                            retq
// 38f: 
static const unsigned char _CHECK_EG_MATCHplus_BINARY_SUBSCR_TUPLE_INT_code_body[912] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x4c, 0x8d, 0x76, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xfa, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x09, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x26, 0x02, 0x00, 0x00, 0xe9, 0x41, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x77, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xe8, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xdb, 0x01, 0x00, 0x00, 0x4d, 0x8d, 0x7c, 0x24, 0xf8, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xef, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x2c, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x4d, 0x89, 0x2e, 0x49, 0x89, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xf2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xde, 0x00, 0x00, 0x00, 0x48, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xd3, 0x00, 0x00, 0x00, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x8e, 0xc6, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x64, 0xc5, 0x18, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfa, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x7a, 0xfe, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xf7, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_BINARY_SUBSCR_TUPLE_INT_code_holes[32] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x336, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x351, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x362, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_BINARY_SUBSCR_TUPLE_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BINARY_SUBSCR_TUPLE_INT_data_holes[1];

// _CHECK_EG_MATCHplus_BUILD_CONST_KEY_MAP
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BUILD_CONST_KEY_MAP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 0d 02 00 00             je      0x31d <_JIT_ENTRY+0x31d>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 1c 02 00 00             jle     0x339 <_JIT_ENTRY+0x339>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 3a 02 00 00             jns     0x35f <_JIT_ENTRY+0x35f>
// 125: e9 56 02 00 00                jmp     0x380 <_JIT_ENTRY+0x380>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 86 01 00 00             je      0x304 <_JIT_ENTRY+0x304>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 fa 01 00 00             js      0x380 <_JIT_ENTRY+0x380>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 ec 01 00 00             je      0x380 <_JIT_ENTRY+0x380>
// 194: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 4c 39 e7                      cmpq    %r12, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 1b4: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b9: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 1bd: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  PyTuple_Type
// 1cb: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1d0: 0f 85 03 01 00 00             jne     0x2d9 <_JIT_ENTRY+0x2d9>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _JIT_OPARG
// 1e0: 0f b7 c0                      movzwl  %ax, %eax
// 1e3: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 1e8: 0f 85 eb 00 00 00             jne     0x2d9 <_JIT_ENTRY+0x2d9>
// 1ee: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _JIT_OPARG
// 1fd: f7 d0                         notl    %eax
// 1ff: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 204: 48 98                         cltq
// 206: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// 20a: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// 20f: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000211:  R_X86_64_64  _JIT_OPARG
// 219: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 21d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021f:  R_X86_64_64  _PyDict_FromItems
// 227: be 01 00 00 00                movl    $0x1, %esi
// 22c: b9 01 00 00 00                movl    $0x1, %ecx
// 231: 4c 89 ea                      movq    %r13, %rdx
// 234: ff d0                         callq   *%rax
// 236: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 23b: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 242: 0f 8e 5f 01 00 00             jle     0x3a7 <_JIT_ENTRY+0x3a7>
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _JIT_OPARG
// 252: 44 0f b7 f8                   movzwl  %ax, %r15d
// 256: 49 ff c7                      incq    %r15
// 259: eb 12                         jmp     0x26d <_JIT_ENTRY+0x26d>
// 25b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 260: 49 ff cf                      decq    %r15
// 263: 49 83 ff 01                   cmpq    $0x1, %r15
// 267: 0f 8e 3a 01 00 00             jle     0x3a7 <_JIT_ENTRY+0x3a7>
// 26d: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// 271: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// 276: 48 8b 45 00                   movq    (%rbp), %rax
// 27a: 48 85 c0                      testq   %rax, %rax
// 27d: 7e 11                         jle     0x290 <_JIT_ENTRY+0x290>
// 27f: 85 c0                         testl   %eax, %eax
// 281: 78 dd                         js      0x260 <_JIT_ENTRY+0x260>
// 283: eb 31                         jmp     0x2b6 <_JIT_ENTRY+0x2b6>
// 285: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 290: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000292:  R_X86_64_64  .rodata.str1.1
// 29a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 29f: 48 89 ea                      movq    %rbp, %rdx
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _Py_NegativeRefcount
// 2ac: ff d0                         callq   *%rax
// 2ae: 48 8b 45 00                   movq    (%rbp), %rax
// 2b2: 85 c0                         testl   %eax, %eax
// 2b4: 78 aa                         js      0x260 <_JIT_ENTRY+0x260>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c0: ff d0                         callq   *%rax
// 2c2: 48 ff 4d 00                   decq    (%rbp)
// 2c6: 75 98                         jne     0x260 <_JIT_ENTRY+0x260>
// 2c8: 48 89 ef                      movq    %rbp, %rdi
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _Py_Dealloc
// 2d5: ff d0                         callq   *%rax
// 2d7: eb 87                         jmp     0x260 <_JIT_ENTRY+0x260>
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  PyExc_SystemError
// 2e3: 48 8b 30                      movq    (%rax), %rsi
// 2e6: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002e8:  R_X86_64_64  .rodata.str1.1+0x39
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  _PyErr_SetString
// 2fa: 4c 89 ff                      movq    %r15, %rdi
// 2fd: ff d0                         callq   *%rax
// 2ff: e9 80 00 00 00                jmp     0x384 <_JIT_ENTRY+0x384>
// 304: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000306:  R_X86_64_64  _Py_Dealloc
// 30e: 4c 89 e7                      movq    %r12, %rdi
// 311: ff d0                         callq   *%rax
// 313: 85 ed                         testl   %ebp, %ebp
// 315: 0f 89 6b fe ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 31b: eb 63                         jmp     0x380 <_JIT_ENTRY+0x380>
// 31d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031f:  R_X86_64_64  _Py_Dealloc
// 327: 4c 89 ef                      movq    %r13, %rdi
// 32a: ff d0                         callq   *%rax
// 32c: 49 8b 04 24                   movq    (%r12), %rax
// 330: 48 85 c0                      testq   %rax, %rax
// 333: 0f 8f e4 fd ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 339: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000033b:  R_X86_64_64  .rodata.str1.1
// 343: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000345:  R_X86_64_64  _Py_NegativeRefcount
// 34d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 352: 4c 89 e2                      movq    %r12, %rdx
// 355: ff d0                         callq   *%rax
// 357: 49 8b 04 24                   movq    (%r12), %rax
// 35b: 85 c0                         testl   %eax, %eax
// 35d: 78 21                         js      0x380 <_JIT_ENTRY+0x380>
// 35f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000361:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 369: ff d0                         callq   *%rax
// 36b: 49 ff 0c 24                   decq    (%r12)
// 36f: 75 0f                         jne     0x380 <_JIT_ENTRY+0x380>
// 371: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000373:  R_X86_64_64  _Py_Dealloc
// 37b: 4c 89 e7                      movq    %r12, %rdi
// 37e: ff d0                         callq   *%rax
// 380: 49 83 c6 f0                   addq    $-0x10, %r14
// 384: 4d 89 f5                      movq    %r14, %r13
// 387: 49 29 dd                      subq    %rbx, %r13
// 38a: 49 83 c5 b8                   addq    $-0x48, %r13
// 38e: 49 c1 ed 03                   shrq    $0x3, %r13
// 392: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 396: 31 c0                         xorl    %eax, %eax
// 398: 48 83 c4 28                   addq    $0x28, %rsp
// 39c: 5b                            popq    %rbx
// 39d: 41 5c                         popq    %r12
// 39f: 41 5d                         popq    %r13
// 3a1: 41 5e                         popq    %r14
// 3a3: 41 5f                         popq    %r15
// 3a5: 5d                            popq    %rbp
// 3a6: c3                            retq
// 3a7: 49 8b 04 24                   movq    (%r12), %rax
// 3ab: 48 85 c0                      testq   %rax, %rax
// 3ae: 7f 22                         jg      0x3d2 <_JIT_ENTRY+0x3d2>
// 3b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003b2:  R_X86_64_64  .rodata.str1.1
// 3ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bc:  R_X86_64_64  _Py_NegativeRefcount
// 3c4: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 3c9: 4c 89 e2                      movq    %r12, %rdx
// 3cc: ff d0                         callq   *%rax
// 3ce: 49 8b 04 24                   movq    (%r12), %rax
// 3d2: 85 c0                         testl   %eax, %eax
// 3d4: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 3d9: 78 21                         js      0x3fc <_JIT_ENTRY+0x3fc>
// 3db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003dd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3e5: ff d0                         callq   *%rax
// 3e7: 49 ff 0c 24                   decq    (%r12)
// 3eb: 75 0f                         jne     0x3fc <_JIT_ENTRY+0x3fc>
// 3ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ef:  R_X86_64_64  _Py_Dealloc
// 3f7: 4c 89 e7                      movq    %r12, %rdi
// 3fa: ff d0                         callq   *%rax
// 3fc: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 401: 48 85 d2                      testq   %rdx, %rdx
// 404: 74 81                         je      0x387 <_JIT_ENTRY+0x387>
// 406: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000408:  R_X86_64_64  _JIT_OPARG
// 410: 0f b7 c8                      movzwl  %ax, %ecx
// 413: f7 d0                         notl    %eax
// 415: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 41a: 48 98                         cltq
// 41c: 49 89 14 c6                   movq    %rdx, (%r14,%rax,8)
// 420: 48 c1 e1 03                   shlq    $0x3, %rcx
// 424: 49 29 ce                      subq    %rcx, %r14
// 427: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000429:  R_X86_64_64  _JIT_CONTINUE
// 431: 48 89 df                      movq    %rbx, %rdi
// 434: 4c 89 f6                      movq    %r14, %rsi
// 437: 4c 89 fa                      movq    %r15, %rdx
// 43a: 48 83 c4 28                   addq    $0x28, %rsp
// 43e: 5b                            popq    %rbx
// 43f: 41 5c                         popq    %r12
// 441: 41 5d                         popq    %r13
// 443: 41 5e                         popq    %r14
// 445: 41 5f                         popq    %r15
// 447: 5d                            popq    %rbp
// 448: ff e0                         jmpq    *%rax
// 44a: 
static const unsigned char _CHECK_EG_MATCHplus_BUILD_CONST_KEY_MAP_code_body[1099] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x0d, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x1c, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x3a, 0x02, 0x00, 0x00, 0xe9, 0x56, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x86, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xfa, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xec, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x89, 0x46, 0xf0, 0x4d, 0x89, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x03, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xeb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x5f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x12, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0x3a, 0x01, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x80, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x6b, 0xfe, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xe4, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x74, 0x81, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x89, 0x14, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_BUILD_CONST_KEY_MAP_code_holes[40] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x306, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x345, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x361, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x373, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x408, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x429, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _CHECK_EG_MATCHplus_BUILD_CONST_KEY_MAP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BUILD_CONST_KEY_MAP_data_holes[1];

// _CHECK_EG_MATCHplus_BUILD_LIST
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BUILD_LIST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 45 01 00 00             je      0x255 <_JIT_ENTRY+0x255>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 54 01 00 00             jle     0x271 <_JIT_ENTRY+0x271>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 72 01 00 00             jns     0x297 <_JIT_ENTRY+0x297>
// 125: e9 8e 01 00 00                jmp     0x2b8 <_JIT_ENTRY+0x2b8>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 be 00 00 00             je      0x23c <_JIT_ENTRY+0x23c>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 32 01 00 00             js      0x2b8 <_JIT_ENTRY+0x2b8>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 24 01 00 00             je      0x2b8 <_JIT_ENTRY+0x2b8>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 48 39 c7                      cmpq    %rax, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1b4: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b9: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1bd: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _JIT_OPARG
// 1cb: 0f b7 f0                      movzwl  %ax, %esi
// 1ce: 48 8d 04 f5 00 00 00 00       leaq    (,%rsi,8), %rax
// 1d6: 4d 89 f4                      movq    %r14, %r12
// 1d9: 49 29 c4                      subq    %rax, %r12
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _PyList_FromArraySteal
// 1e6: 4c 89 e7                      movq    %r12, %rdi
// 1e9: ff d0                         callq   *%rax
// 1eb: 48 85 c0                      testq   %rax, %rax
// 1ee: 0f 84 cb 00 00 00             je      0x2bf <_JIT_ENTRY+0x2bf>
// 1f4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f6:  R_X86_64_64  _JIT_OPARG
// 1fe: 0f b7 d1                      movzwl  %cx, %edx
// 201: 0f b7 c9                      movzwl  %cx, %ecx
// 204: 48 c1 e1 03                   shlq    $0x3, %rcx
// 208: 48 f7 d9                      negq    %rcx
// 20b: 49 89 04 0e                   movq    %rax, (%r14,%rcx)
// 20f: b8 01 00 00 00                movl    $0x1, %eax
// 214: 29 d0                         subl    %edx, %eax
// 216: 48 98                         cltq
// 218: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _JIT_CONTINUE
// 226: 48 89 df                      movq    %rbx, %rdi
// 229: 4c 89 fa                      movq    %r15, %rdx
// 22c: 48 83 c4 18                   addq    $0x18, %rsp
// 230: 5b                            popq    %rbx
// 231: 41 5c                         popq    %r12
// 233: 41 5d                         popq    %r13
// 235: 41 5e                         popq    %r14
// 237: 41 5f                         popq    %r15
// 239: 5d                            popq    %rbp
// 23a: ff e0                         jmpq    *%rax
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_Dealloc
// 246: 4c 89 e7                      movq    %r12, %rdi
// 249: ff d0                         callq   *%rax
// 24b: 85 ed                         testl   %ebp, %ebp
// 24d: 0f 89 33 ff ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 253: eb 63                         jmp     0x2b8 <_JIT_ENTRY+0x2b8>
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _Py_Dealloc
// 25f: 4c 89 ef                      movq    %r13, %rdi
// 262: ff d0                         callq   *%rax
// 264: 49 8b 04 24                   movq    (%r12), %rax
// 268: 48 85 c0                      testq   %rax, %rax
// 26b: 0f 8f ac fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 271: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000273:  R_X86_64_64  .rodata.str1.1
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_NegativeRefcount
// 285: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 28a: 4c 89 e2                      movq    %r12, %rdx
// 28d: ff d0                         callq   *%rax
// 28f: 49 8b 04 24                   movq    (%r12), %rax
// 293: 85 c0                         testl   %eax, %eax
// 295: 78 21                         js      0x2b8 <_JIT_ENTRY+0x2b8>
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a1: ff d0                         callq   *%rax
// 2a3: 49 ff 0c 24                   decq    (%r12)
// 2a7: 75 0f                         jne     0x2b8 <_JIT_ENTRY+0x2b8>
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _Py_Dealloc
// 2b3: 4c 89 e7                      movq    %r12, %rdi
// 2b6: ff d0                         callq   *%rax
// 2b8: 49 83 c6 f0                   addq    $-0x10, %r14
// 2bc: 4d 89 f4                      movq    %r14, %r12
// 2bf: 49 29 dc                      subq    %rbx, %r12
// 2c2: 49 83 c4 b8                   addq    $-0x48, %r12
// 2c6: 49 c1 ec 03                   shrq    $0x3, %r12
// 2ca: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2ce: 31 c0                         xorl    %eax, %eax
// 2d0: 48 83 c4 18                   addq    $0x18, %rsp
// 2d4: 5b                            popq    %rbx
// 2d5: 41 5c                         popq    %r12
// 2d7: 41 5d                         popq    %r13
// 2d9: 41 5e                         popq    %r14
// 2db: 41 5f                         popq    %r15
// 2dd: 5d                            popq    %rbp
// 2de: c3                            retq
// 2df: 
static const unsigned char _CHECK_EG_MATCHplus_BUILD_LIST_code_body[736] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x45, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x54, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x72, 0x01, 0x00, 0x00, 0xe9, 0x8e, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xbe, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x32, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x24, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x89, 0x4e, 0xf0, 0x49, 0x89, 0x46, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0x8d, 0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xcb, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x49, 0x89, 0x04, 0x0e, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x98, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x33, 0xff, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xac, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_BUILD_LIST_code_holes[25] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_FromArraySteal, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_BUILD_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BUILD_LIST_data_holes[1];

// _CHECK_EG_MATCHplus_BUILD_MAP
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BUILD_MAP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3c                         js      0x71 <_JIT_ENTRY+0x71>
// 35: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 3d: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 50: 48 89 e2                      movq    %rsp, %rdx
// 53: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 58: 4c 89 ef                      movq    %r13, %rdi
// 5b: 4c 89 e6                      movq    %r12, %rsi
// 5e: ff d0                         callq   *%rax
// 60: 89 c5                         movl    %eax, %ebp
// 62: 49 8b 45 00                   movq    (%r13), %rax
// 66: 48 85 c0                      testq   %rax, %rax
// 69: 7e 18                         jle     0x83 <_JIT_ENTRY+0x83>
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 79 3a                         jns     0xa9 <_JIT_ENTRY+0xa9>
// 6f: eb 4a                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 71: 49 8b 45 00                   movq    (%r13), %rax
// 75: 48 85 c0                      testq   %rax, %rax
// 78: 7e 57                         jle     0xd1 <_JIT_ENTRY+0xd1>
// 7a: 85 c0                         testl   %eax, %eax
// 7c: 79 79                         jns     0xf7 <_JIT_ENTRY+0xf7>
// 7e: e9 8a 00 00 00                jmp     0x10d <_JIT_ENTRY+0x10d>
// 83: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000085:  R_X86_64_64  .rodata.str1.1
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_NegativeRefcount
// 97: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9c: 4c 89 ea                      movq    %r13, %rdx
// 9f: ff d0                         callq   *%rax
// a1: 49 8b 45 00                   movq    (%r13), %rax
// a5: 85 c0                         testl   %eax, %eax
// a7: 78 12                         js      0xbb <_JIT_ENTRY+0xbb>
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b3: ff d0                         callq   *%rax
// b5: 49 ff 4d 00                   decq    (%r13)
// b9: 74 6c                         je      0x127 <_JIT_ENTRY+0x127>
// bb: 49 8b 04 24                   movq    (%r12), %rax
// bf: 48 85 c0                      testq   %rax, %rax
// c2: 7e 7b                         jle     0x13f <_JIT_ENTRY+0x13f>
// c4: 85 c0                         testl   %eax, %eax
// c6: 0f 89 99 00 00 00             jns     0x165 <_JIT_ENTRY+0x165>
// cc: e9 aa 00 00 00                jmp     0x17b <_JIT_ENTRY+0x17b>
// d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d3:  R_X86_64_64  .rodata.str1.1
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_NegativeRefcount
// e5: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ea: 4c 89 ea                      movq    %r13, %rdx
// ed: ff d0                         callq   *%rax
// ef: 49 8b 45 00                   movq    (%r13), %rax
// f3: 85 c0                         testl   %eax, %eax
// f5: 78 16                         js      0x10d <_JIT_ENTRY+0x10d>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 101: ff d0                         callq   *%rax
// 103: 49 ff 4d 00                   decq    (%r13)
// 107: 0f 84 00 02 00 00             je      0x30d <_JIT_ENTRY+0x30d>
// 10d: 49 8b 04 24                   movq    (%r12), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 0f 8e 0f 02 00 00             jle     0x329 <_JIT_ENTRY+0x329>
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 0f 89 2d 02 00 00             jns     0x34f <_JIT_ENTRY+0x34f>
// 122: e9 49 02 00 00                jmp     0x370 <_JIT_ENTRY+0x370>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_Dealloc
// 131: 4c 89 ef                      movq    %r13, %rdi
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 85                         jg      0xc4 <_JIT_ENTRY+0xc4>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 16                         js      0x17b <_JIT_ENTRY+0x17b>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0c 24                   decq    (%r12)
// 175: 0f 84 79 01 00 00             je      0x2f4 <_JIT_ENTRY+0x2f4>
// 17b: 85 ed                         testl   %ebp, %ebp
// 17d: 0f 88 ed 01 00 00             js      0x370 <_JIT_ENTRY+0x370>
// 183: 48 8b 3c 24                   movq    (%rsp), %rdi
// 187: 48 85 ff                      testq   %rdi, %rdi
// 18a: 0f 84 e0 01 00 00             je      0x370 <_JIT_ENTRY+0x370>
// 190: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 195: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  _Py_NoneStruct
// 1a4: 48 39 c7                      cmpq    %rax, %rdi
// 1a7: 74 10                         je      0x1b9 <_JIT_ENTRY+0x1b9>
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  PyErr_SetHandledException
// 1b3: ff d0                         callq   *%rax
// 1b5: 48 8b 04 24                   movq    (%rsp), %rax
// 1b9: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1be: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1c2: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _JIT_OPARG
// 1d0: 0f b7 d8                      movzwl  %ax, %ebx
// 1d3: 89 d9                         movl    %ebx, %ecx
// 1d5: f7 d9                         negl    %ecx
// 1d7: 01 c9                         addl    %ecx, %ecx
// 1d9: 48 63 c9                      movslq  %ecx, %rcx
// 1dc: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// 1e0: 49 8d 14 ce                   leaq    (%r14,%rcx,8), %rdx
// 1e4: 48 83 c2 08                   addq    $0x8, %rdx
// 1e8: 44 0f b7 c0                   movzwl  %ax, %r8d
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _PyDict_FromItems
// 1f6: be 02 00 00 00                movl    $0x2, %esi
// 1fb: b9 02 00 00 00                movl    $0x2, %ecx
// 200: 4c 89 e7                      movq    %r12, %rdi
// 203: ff d0                         callq   *%rax
// 205: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 20a: 01 db                         addl    %ebx, %ebx
// 20c: 85 db                         testl   %ebx, %ebx
// 20e: 0f 8e 81 00 00 00             jle     0x295 <_JIT_ENTRY+0x295>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _JIT_OPARG
// 21e: 0f b7 c0                      movzwl  %ax, %eax
// 221: 4c 8d 3c 00                   leaq    (%rax,%rax), %r15
// 225: 49 ff c7                      incq    %r15
// 228: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000022a:  R_X86_64_64  _Py_NegativeRefcount
// 232: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000234:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23c: eb 0b                         jmp     0x249 <_JIT_ENTRY+0x249>
// 23e: 66 90                         nop
// 240: 49 ff cf                      decq    %r15
// 243: 49 83 ff 01                   cmpq    $0x1, %r15
// 247: 7e 4c                         jle     0x295 <_JIT_ENTRY+0x295>
// 249: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// 24d: 4d 8b 2c c4                   movq    (%r12,%rax,8), %r13
// 251: 49 8b 45 00                   movq    (%r13), %rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 7e 06                         jle     0x260 <_JIT_ENTRY+0x260>
// 25a: 85 c0                         testl   %eax, %eax
// 25c: 78 e2                         js      0x240 <_JIT_ENTRY+0x240>
// 25e: eb 1c                         jmp     0x27c <_JIT_ENTRY+0x27c>
// 260: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000262:  R_X86_64_64  .rodata.str1.1
// 26a: be 7b 05 00 00                movl    $0x57b, %esi            # imm = 0x57B
// 26f: 4c 89 ea                      movq    %r13, %rdx
// 272: ff d3                         callq   *%rbx
// 274: 49 8b 45 00                   movq    (%r13), %rax
// 278: 85 c0                         testl   %eax, %eax
// 27a: 78 c4                         js      0x240 <_JIT_ENTRY+0x240>
// 27c: ff d5                         callq   *%rbp
// 27e: 49 ff 4d 00                   decq    (%r13)
// 282: 75 bc                         jne     0x240 <_JIT_ENTRY+0x240>
// 284: 4c 89 ef                      movq    %r13, %rdi
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _Py_Dealloc
// 291: ff d0                         callq   *%rax
// 293: eb ab                         jmp     0x240 <_JIT_ENTRY+0x240>
// 295: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 29a: 48 85 d2                      testq   %rdx, %rdx
// 29d: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 2a2: 0f 84 cf 00 00 00             je      0x377 <_JIT_ENTRY+0x377>
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _JIT_OPARG
// 2b2: 0f b7 c0                      movzwl  %ax, %eax
// 2b5: 89 c1                         movl    %eax, %ecx
// 2b7: f7 d9                         negl    %ecx
// 2b9: 01 c9                         addl    %ecx, %ecx
// 2bb: 48 63 c9                      movslq  %ecx, %rcx
// 2be: 49 89 14 ce                   movq    %rdx, (%r14,%rcx,8)
// 2c2: 01 c0                         addl    %eax, %eax
// 2c4: b9 01 00 00 00                movl    $0x1, %ecx
// 2c9: 29 c1                         subl    %eax, %ecx
// 2cb: 48 63 c1                      movslq  %ecx, %rax
// 2ce: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _JIT_CONTINUE
// 2dc: 48 89 df                      movq    %rbx, %rdi
// 2df: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2e4: 48 83 c4 28                   addq    $0x28, %rsp
// 2e8: 5b                            popq    %rbx
// 2e9: 41 5c                         popq    %r12
// 2eb: 41 5d                         popq    %r13
// 2ed: 41 5e                         popq    %r14
// 2ef: 41 5f                         popq    %r15
// 2f1: 5d                            popq    %rbp
// 2f2: ff e0                         jmpq    *%rax
// 2f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f6:  R_X86_64_64  _Py_Dealloc
// 2fe: 4c 89 e7                      movq    %r12, %rdi
// 301: ff d0                         callq   *%rax
// 303: 85 ed                         testl   %ebp, %ebp
// 305: 0f 89 78 fe ff ff             jns     0x183 <_JIT_ENTRY+0x183>
// 30b: eb 63                         jmp     0x370 <_JIT_ENTRY+0x370>
// 30d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030f:  R_X86_64_64  _Py_Dealloc
// 317: 4c 89 ef                      movq    %r13, %rdi
// 31a: ff d0                         callq   *%rax
// 31c: 49 8b 04 24                   movq    (%r12), %rax
// 320: 48 85 c0                      testq   %rax, %rax
// 323: 0f 8f f1 fd ff ff             jg      0x11a <_JIT_ENTRY+0x11a>
// 329: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000032b:  R_X86_64_64  .rodata.str1.1
// 333: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000335:  R_X86_64_64  _Py_NegativeRefcount
// 33d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 342: 4c 89 e2                      movq    %r12, %rdx
// 345: ff d0                         callq   *%rax
// 347: 49 8b 04 24                   movq    (%r12), %rax
// 34b: 85 c0                         testl   %eax, %eax
// 34d: 78 21                         js      0x370 <_JIT_ENTRY+0x370>
// 34f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000351:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 359: ff d0                         callq   *%rax
// 35b: 49 ff 0c 24                   decq    (%r12)
// 35f: 75 0f                         jne     0x370 <_JIT_ENTRY+0x370>
// 361: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000363:  R_X86_64_64  _Py_Dealloc
// 36b: 4c 89 e7                      movq    %r12, %rdi
// 36e: ff d0                         callq   *%rax
// 370: 49 83 c6 f0                   addq    $-0x10, %r14
// 374: 4d 89 f4                      movq    %r14, %r12
// 377: 49 29 dc                      subq    %rbx, %r12
// 37a: 49 83 c4 b8                   addq    $-0x48, %r12
// 37e: 49 c1 ec 03                   shrq    $0x3, %r12
// 382: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 386: 31 c0                         xorl    %eax, %eax
// 388: 48 83 c4 28                   addq    $0x28, %rsp
// 38c: 5b                            popq    %rbx
// 38d: 41 5c                         popq    %r12
// 38f: 41 5d                         popq    %r13
// 391: 41 5e                         popq    %r14
// 393: 41 5f                         popq    %r15
// 395: 5d                            popq    %rbp
// 396: c3                            retq
// 397: 
static const unsigned char _CHECK_EG_MATCHplus_BUILD_MAP_code_body[920] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x00, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x0f, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x2d, 0x02, 0x00, 0x00, 0xe9, 0x49, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x79, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xed, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xe0, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x89, 0x4e, 0xf0, 0x49, 0x89, 0x46, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x89, 0xd9, 0xf7, 0xd9, 0x01, 0xc9, 0x48, 0x63, 0xc9, 0x4d, 0x8d, 0x24, 0xce, 0x49, 0x8d, 0x14, 0xce, 0x48, 0x83, 0xc2, 0x08, 0x44, 0x0f, 0xb7, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x01, 0xdb, 0x85, 0xdb, 0x0f, 0x8e, 0x81, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8d, 0x3c, 0x00, 0x49, 0xff, 0xc7, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0b, 0x66, 0x90, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x4c, 0x41, 0x8d, 0x47, 0xfe, 0x4d, 0x8b, 0x2c, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x1c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7b, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd3, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xc4, 0xff, 0xd5, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xbc, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xab, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x0f, 0x84, 0xcf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd9, 0x01, 0xc9, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xce, 0x01, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x78, 0xfe, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xf1, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_BUILD_MAP_code_holes[30] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x32b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x335, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x351, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x363, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_BUILD_MAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BUILD_MAP_data_holes[1];

// _CHECK_EG_MATCHplus_BUILD_SET
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BUILD_SET.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 ff                      movq    %rdi, %r15
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3c                         js      0x71 <_JIT_ENTRY+0x71>
// 35: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 3d: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 50: 48 89 e2                      movq    %rsp, %rdx
// 53: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 58: 4c 89 ef                      movq    %r13, %rdi
// 5b: 4c 89 e6                      movq    %r12, %rsi
// 5e: ff d0                         callq   *%rax
// 60: 89 c5                         movl    %eax, %ebp
// 62: 49 8b 45 00                   movq    (%r13), %rax
// 66: 48 85 c0                      testq   %rax, %rax
// 69: 7e 18                         jle     0x83 <_JIT_ENTRY+0x83>
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 79 3a                         jns     0xa9 <_JIT_ENTRY+0xa9>
// 6f: eb 4a                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 71: 49 8b 45 00                   movq    (%r13), %rax
// 75: 48 85 c0                      testq   %rax, %rax
// 78: 7e 57                         jle     0xd1 <_JIT_ENTRY+0xd1>
// 7a: 85 c0                         testl   %eax, %eax
// 7c: 79 79                         jns     0xf7 <_JIT_ENTRY+0xf7>
// 7e: e9 8a 00 00 00                jmp     0x10d <_JIT_ENTRY+0x10d>
// 83: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000085:  R_X86_64_64  .rodata.str1.1
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_NegativeRefcount
// 97: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9c: 4c 89 ea                      movq    %r13, %rdx
// 9f: ff d0                         callq   *%rax
// a1: 49 8b 45 00                   movq    (%r13), %rax
// a5: 85 c0                         testl   %eax, %eax
// a7: 78 12                         js      0xbb <_JIT_ENTRY+0xbb>
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b3: ff d0                         callq   *%rax
// b5: 49 ff 4d 00                   decq    (%r13)
// b9: 74 6c                         je      0x127 <_JIT_ENTRY+0x127>
// bb: 49 8b 04 24                   movq    (%r12), %rax
// bf: 48 85 c0                      testq   %rax, %rax
// c2: 7e 7b                         jle     0x13f <_JIT_ENTRY+0x13f>
// c4: 85 c0                         testl   %eax, %eax
// c6: 0f 89 99 00 00 00             jns     0x165 <_JIT_ENTRY+0x165>
// cc: e9 aa 00 00 00                jmp     0x17b <_JIT_ENTRY+0x17b>
// d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d3:  R_X86_64_64  .rodata.str1.1
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_NegativeRefcount
// e5: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ea: 4c 89 ea                      movq    %r13, %rdx
// ed: ff d0                         callq   *%rax
// ef: 49 8b 45 00                   movq    (%r13), %rax
// f3: 85 c0                         testl   %eax, %eax
// f5: 78 16                         js      0x10d <_JIT_ENTRY+0x10d>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 101: ff d0                         callq   *%rax
// 103: 49 ff 4d 00                   decq    (%r13)
// 107: 0f 84 93 02 00 00             je      0x3a0 <_JIT_ENTRY+0x3a0>
// 10d: 49 8b 04 24                   movq    (%r12), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 0f 8e a2 02 00 00             jle     0x3bc <_JIT_ENTRY+0x3bc>
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 0f 89 c0 02 00 00             jns     0x3e2 <_JIT_ENTRY+0x3e2>
// 122: e9 dc 02 00 00                jmp     0x403 <_JIT_ENTRY+0x403>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_Dealloc
// 131: 4c 89 ef                      movq    %r13, %rdi
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 85                         jg      0xc4 <_JIT_ENTRY+0xc4>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 16                         js      0x17b <_JIT_ENTRY+0x17b>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0c 24                   decq    (%r12)
// 175: 0f 84 54 01 00 00             je      0x2cf <_JIT_ENTRY+0x2cf>
// 17b: 85 ed                         testl   %ebp, %ebp
// 17d: 0f 88 80 02 00 00             js      0x403 <_JIT_ENTRY+0x403>
// 183: 48 8b 3c 24                   movq    (%rsp), %rdi
// 187: 48 85 ff                      testq   %rdi, %rdi
// 18a: 0f 84 73 02 00 00             je      0x403 <_JIT_ENTRY+0x403>
// 190: 4c 89 74 24 20                movq    %r14, 0x20(%rsp)
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NoneStruct
// 19f: 48 39 c7                      cmpq    %rax, %rdi
// 1a2: 74 10                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  PyErr_SetHandledException
// 1ae: ff d0                         callq   *%rax
// 1b0: 48 8b 04 24                   movq    (%rsp), %rax
// 1b4: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b9: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1bd: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  PySet_New
// 1cb: 31 ff                         xorl    %edi, %edi
// 1cd: ff d0                         callq   *%rax
// 1cf: 48 85 c0                      testq   %rax, %rax
// 1d2: 0f 84 2f 02 00 00             je      0x407 <_JIT_ENTRY+0x407>
// 1d8: 49 89 c4                      movq    %rax, %r12
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _JIT_OPARG
// 1e5: 66 85 c0                      testw   %ax, %ax
// 1e8: 0f 84 68 01 00 00             je      0x356 <_JIT_ENTRY+0x356>
// 1ee: 4c 89 64 24 08                movq    %r12, 0x8(%rsp)
// 1f3: 4c 89 7c 24 18                movq    %r15, 0x18(%rsp)
// 1f8: 0f b7 c0                      movzwl  %ax, %eax
// 1fb: 48 c1 e0 03                   shlq    $0x3, %rax
// 1ff: 49 89 de                      movq    %rbx, %r14
// 202: 49 29 c6                      subq    %rax, %r14
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _JIT_OPARG
// 20f: 0f b7 c0                      movzwl  %ax, %eax
// 212: 83 f8 02                      cmpl    $0x2, %eax
// 215: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 21b: 44 0f 43 f8                   cmovael %eax, %r15d
// 21f: 45 31 e4                      xorl    %r12d, %r12d
// 222: 31 ed                         xorl    %ebp, %ebp
// 224: eb 16                         jmp     0x23c <_JIT_ENTRY+0x23c>
// 226: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 230: 49 ff c4                      incq    %r12
// 233: 4d 39 e7                      cmpq    %r12, %r15
// 236: 0f 84 af 00 00 00             je      0x2eb <_JIT_ENTRY+0x2eb>
// 23c: 4f 8b 2c e6                   movq    (%r14,%r12,8), %r13
// 240: 85 ed                         testl   %ebp, %ebp
// 242: 74 1c                         je      0x260 <_JIT_ENTRY+0x260>
// 244: 49 8b 45 00                   movq    (%r13), %rax
// 248: 48 85 c0                      testq   %rax, %rax
// 24b: 7e 32                         jle     0x27f <_JIT_ENTRY+0x27f>
// 24d: 85 c0                         testl   %eax, %eax
// 24f: 78 df                         js      0x230 <_JIT_ENTRY+0x230>
// 251: eb 52                         jmp     0x2a5 <_JIT_ENTRY+0x2a5>
// 253: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 260: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 265: 4c 89 ee                      movq    %r13, %rsi
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  PySet_Add
// 272: ff d0                         callq   *%rax
// 274: 89 c5                         movl    %eax, %ebp
// 276: 49 8b 45 00                   movq    (%r13), %rax
// 27a: 48 85 c0                      testq   %rax, %rax
// 27d: 7f ce                         jg      0x24d <_JIT_ENTRY+0x24d>
// 27f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000281:  R_X86_64_64  .rodata.str1.1
// 289: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// 28e: 4c 89 ea                      movq    %r13, %rdx
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _Py_NegativeRefcount
// 29b: ff d0                         callq   *%rax
// 29d: 49 8b 45 00                   movq    (%r13), %rax
// 2a1: 85 c0                         testl   %eax, %eax
// 2a3: 78 8b                         js      0x230 <_JIT_ENTRY+0x230>
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2af: ff d0                         callq   *%rax
// 2b1: 49 ff 4d 00                   decq    (%r13)
// 2b5: 0f 85 75 ff ff ff             jne     0x230 <_JIT_ENTRY+0x230>
// 2bb: 4c 89 ef                      movq    %r13, %rdi
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_Dealloc
// 2c8: ff d0                         callq   *%rax
// 2ca: e9 61 ff ff ff                jmp     0x230 <_JIT_ENTRY+0x230>
// 2cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d1:  R_X86_64_64  _Py_Dealloc
// 2d9: 4c 89 e7                      movq    %r12, %rdi
// 2dc: ff d0                         callq   *%rax
// 2de: 85 ed                         testl   %ebp, %ebp
// 2e0: 0f 89 9d fe ff ff             jns     0x183 <_JIT_ENTRY+0x183>
// 2e6: e9 18 01 00 00                jmp     0x403 <_JIT_ENTRY+0x403>
// 2eb: 85 ed                         testl   %ebp, %ebp
// 2ed: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 2f2: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 2f7: 74 5d                         je      0x356 <_JIT_ENTRY+0x356>
// 2f9: 49 8b 04 24                   movq    (%r12), %rax
// 2fd: 48 85 c0                      testq   %rax, %rax
// 300: 7f 22                         jg      0x324 <_JIT_ENTRY+0x324>
// 302: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000304:  R_X86_64_64  .rodata.str1.1
// 30c: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 311: 4c 89 e2                      movq    %r12, %rdx
// 314: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000316:  R_X86_64_64  _Py_NegativeRefcount
// 31e: ff d0                         callq   *%rax
// 320: 49 8b 04 24                   movq    (%r12), %rax
// 324: 85 c0                         testl   %eax, %eax
// 326: 0f 88 de 00 00 00             js      0x40a <_JIT_ENTRY+0x40a>
// 32c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 336: ff d0                         callq   *%rax
// 338: 49 ff 0c 24                   decq    (%r12)
// 33c: 0f 85 c8 00 00 00             jne     0x40a <_JIT_ENTRY+0x40a>
// 342: 4c 89 e7                      movq    %r12, %rdi
// 345: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000347:  R_X86_64_64  _Py_Dealloc
// 34f: ff d0                         callq   *%rax
// 351: e9 b4 00 00 00                jmp     0x40a <_JIT_ENTRY+0x40a>
// 356: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000358:  R_X86_64_64  _JIT_OPARG
// 360: 0f b7 c8                      movzwl  %ax, %ecx
// 363: 0f b7 c0                      movzwl  %ax, %eax
// 366: 48 c1 e0 03                   shlq    $0x3, %rax
// 36a: 48 f7 d8                      negq    %rax
// 36d: 4c 89 24 03                   movq    %r12, (%rbx,%rax)
// 371: b8 01 00 00 00                movl    $0x1, %eax
// 376: 29 c8                         subl    %ecx, %eax
// 378: 48 98                         cltq
// 37a: 48 8d 34 c3                   leaq    (%rbx,%rax,8), %rsi
// 37e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000380:  R_X86_64_64  _JIT_CONTINUE
// 388: 4c 89 ff                      movq    %r15, %rdi
// 38b: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 390: 48 83 c4 28                   addq    $0x28, %rsp
// 394: 5b                            popq    %rbx
// 395: 41 5c                         popq    %r12
// 397: 41 5d                         popq    %r13
// 399: 41 5e                         popq    %r14
// 39b: 41 5f                         popq    %r15
// 39d: 5d                            popq    %rbp
// 39e: ff e0                         jmpq    *%rax
// 3a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a2:  R_X86_64_64  _Py_Dealloc
// 3aa: 4c 89 ef                      movq    %r13, %rdi
// 3ad: ff d0                         callq   *%rax
// 3af: 49 8b 04 24                   movq    (%r12), %rax
// 3b3: 48 85 c0                      testq   %rax, %rax
// 3b6: 0f 8f 5e fd ff ff             jg      0x11a <_JIT_ENTRY+0x11a>
// 3bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003be:  R_X86_64_64  .rodata.str1.1
// 3c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c8:  R_X86_64_64  _Py_NegativeRefcount
// 3d0: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 3d5: 4c 89 e2                      movq    %r12, %rdx
// 3d8: ff d0                         callq   *%rax
// 3da: 49 8b 04 24                   movq    (%r12), %rax
// 3de: 85 c0                         testl   %eax, %eax
// 3e0: 78 21                         js      0x403 <_JIT_ENTRY+0x403>
// 3e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3ec: ff d0                         callq   *%rax
// 3ee: 49 ff 0c 24                   decq    (%r12)
// 3f2: 75 0f                         jne     0x403 <_JIT_ENTRY+0x403>
// 3f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f6:  R_X86_64_64  _Py_Dealloc
// 3fe: 4c 89 e7                      movq    %r12, %rdi
// 401: ff d0                         callq   *%rax
// 403: 48 83 c3 f0                   addq    $-0x10, %rbx
// 407: 49 89 de                      movq    %rbx, %r14
// 40a: 4d 29 fe                      subq    %r15, %r14
// 40d: 49 83 c6 b8                   addq    $-0x48, %r14
// 411: 49 c1 ee 03                   shrq    $0x3, %r14
// 415: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 419: 31 c0                         xorl    %eax, %eax
// 41b: 48 83 c4 28                   addq    $0x28, %rsp
// 41f: 5b                            popq    %rbx
// 420: 41 5c                         popq    %r12
// 422: 41 5d                         popq    %r13
// 424: 41 5e                         popq    %r14
// 426: 41 5f                         popq    %r15
// 428: 5d                            popq    %rbp
// 429: c3                            retq
// 42a: 
static const unsigned char _CHECK_EG_MATCHplus_BUILD_SET_code_body[1067] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd6, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xff, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x93, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xa2, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xc0, 0x02, 0x00, 0x00, 0xe9, 0xdc, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x54, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x80, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x73, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x2f, 0x02, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x68, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x64, 0x24, 0x08, 0x4c, 0x89, 0x7c, 0x24, 0x18, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x89, 0xde, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xf8, 0x45, 0x31, 0xe4, 0x31, 0xed, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe7, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x4f, 0x8b, 0x2c, 0xe6, 0x85, 0xed, 0x74, 0x1c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x32, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x52, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xce, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x8b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x75, 0xff, 0xff, 0xff, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x61, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x9d, 0xfe, 0xff, 0xff, 0xe9, 0x18, 0x01, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x74, 0x5d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xde, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xc8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0xb4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x24, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x5e, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x49, 0x89, 0xde, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_BUILD_SET_code_holes[35] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x316, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x32e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x347, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x358, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x380, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3be, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_BUILD_SET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BUILD_SET_data_holes[1];

// _CHECK_EG_MATCHplus_BUILD_SLICE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BUILD_SLICE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3c                         js      0x71 <_JIT_ENTRY+0x71>
// 35: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 3d: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 50: 48 89 e2                      movq    %rsp, %rdx
// 53: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 58: 4c 89 ef                      movq    %r13, %rdi
// 5b: 4c 89 e6                      movq    %r12, %rsi
// 5e: ff d0                         callq   *%rax
// 60: 89 c5                         movl    %eax, %ebp
// 62: 49 8b 45 00                   movq    (%r13), %rax
// 66: 48 85 c0                      testq   %rax, %rax
// 69: 7e 18                         jle     0x83 <_JIT_ENTRY+0x83>
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 79 3a                         jns     0xa9 <_JIT_ENTRY+0xa9>
// 6f: eb 4a                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 71: 49 8b 45 00                   movq    (%r13), %rax
// 75: 48 85 c0                      testq   %rax, %rax
// 78: 7e 57                         jle     0xd1 <_JIT_ENTRY+0xd1>
// 7a: 85 c0                         testl   %eax, %eax
// 7c: 79 79                         jns     0xf7 <_JIT_ENTRY+0xf7>
// 7e: e9 8a 00 00 00                jmp     0x10d <_JIT_ENTRY+0x10d>
// 83: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000085:  R_X86_64_64  .rodata.str1.1
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_NegativeRefcount
// 97: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9c: 4c 89 ea                      movq    %r13, %rdx
// 9f: ff d0                         callq   *%rax
// a1: 49 8b 45 00                   movq    (%r13), %rax
// a5: 85 c0                         testl   %eax, %eax
// a7: 78 12                         js      0xbb <_JIT_ENTRY+0xbb>
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b3: ff d0                         callq   *%rax
// b5: 49 ff 4d 00                   decq    (%r13)
// b9: 74 6c                         je      0x127 <_JIT_ENTRY+0x127>
// bb: 49 8b 04 24                   movq    (%r12), %rax
// bf: 48 85 c0                      testq   %rax, %rax
// c2: 7e 7b                         jle     0x13f <_JIT_ENTRY+0x13f>
// c4: 85 c0                         testl   %eax, %eax
// c6: 0f 89 99 00 00 00             jns     0x165 <_JIT_ENTRY+0x165>
// cc: e9 aa 00 00 00                jmp     0x17b <_JIT_ENTRY+0x17b>
// d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d3:  R_X86_64_64  .rodata.str1.1
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_NegativeRefcount
// e5: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ea: 4c 89 ea                      movq    %r13, %rdx
// ed: ff d0                         callq   *%rax
// ef: 49 8b 45 00                   movq    (%r13), %rax
// f3: 85 c0                         testl   %eax, %eax
// f5: 78 16                         js      0x10d <_JIT_ENTRY+0x10d>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 101: ff d0                         callq   *%rax
// 103: 49 ff 4d 00                   decq    (%r13)
// 107: 0f 84 66 02 00 00             je      0x373 <_JIT_ENTRY+0x373>
// 10d: 49 8b 04 24                   movq    (%r12), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 0f 8e 75 02 00 00             jle     0x38f <_JIT_ENTRY+0x38f>
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 0f 89 93 02 00 00             jns     0x3b5 <_JIT_ENTRY+0x3b5>
// 122: e9 af 02 00 00                jmp     0x3d6 <_JIT_ENTRY+0x3d6>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_Dealloc
// 131: 4c 89 ef                      movq    %r13, %rdi
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 85                         jg      0xc4 <_JIT_ENTRY+0xc4>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 16                         js      0x17b <_JIT_ENTRY+0x17b>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0c 24                   decq    (%r12)
// 175: 0f 84 df 01 00 00             je      0x35a <_JIT_ENTRY+0x35a>
// 17b: 85 ed                         testl   %ebp, %ebp
// 17d: 0f 88 53 02 00 00             js      0x3d6 <_JIT_ENTRY+0x3d6>
// 183: 48 8b 3c 24                   movq    (%rsp), %rdi
// 187: 48 85 ff                      testq   %rdi, %rdi
// 18a: 0f 84 46 02 00 00             je      0x3d6 <_JIT_ENTRY+0x3d6>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_NoneStruct
// 19a: 48 39 c7                      cmpq    %rax, %rdi
// 19d: 74 10                         je      0x1af <_JIT_ENTRY+0x1af>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  PyErr_SetHandledException
// 1a9: ff d0                         callq   *%rax
// 1ab: 48 8b 04 24                   movq    (%rsp), %rax
// 1af: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1b4: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1b8: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _JIT_OPARG
// 1c6: 66 83 f8 03                   cmpw    $0x3, %ax
// 1ca: 75 10                         jne     0x1dc <_JIT_ENTRY+0x1dc>
// 1cc: 31 c9                         xorl    %ecx, %ecx
// 1ce: 66 83 f8 03                   cmpw    $0x3, %ax
// 1d2: 0f 95 c1                      setne   %cl
// 1d5: 4d 8b 64 ce f8                movq    -0x8(%r14,%rcx,8), %r12
// 1da: eb 03                         jmp     0x1df <_JIT_ENTRY+0x1df>
// 1dc: 45 31 e4                      xorl    %r12d, %r12d
// 1df: 31 c9                         xorl    %ecx, %ecx
// 1e1: 66 83 f8 03                   cmpw    $0x3, %ax
// 1e5: 0f 94 c1                      sete    %cl
// 1e8: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// 1ed: 29 c8                         subl    %ecx, %eax
// 1ef: f7 d1                         notl    %ecx
// 1f1: 48 63 c9                      movslq  %ecx, %rcx
// 1f4: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 1f9: 49 8b 2c ce                   movq    (%r14,%rcx,8), %rbp
// 1fd: 48 98                         cltq
// 1ff: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 204: 4d 8b 2c c6                   movq    (%r14,%rax,8), %r13
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  PySlice_New
// 212: 4c 89 ef                      movq    %r13, %rdi
// 215: 48 89 ee                      movq    %rbp, %rsi
// 218: 4c 89 e2                      movq    %r12, %rdx
// 21b: ff d0                         callq   *%rax
// 21d: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 222: 49 8b 45 00                   movq    (%r13), %rax
// 226: 48 85 c0                      testq   %rax, %rax
// 229: 7f 22                         jg      0x24d <_JIT_ENTRY+0x24d>
// 22b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022d:  R_X86_64_64  .rodata.str1.1
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _Py_NegativeRefcount
// 23f: be 86 0c 00 00                movl    $0xc86, %esi            # imm = 0xC86
// 244: 4c 89 ea                      movq    %r13, %rdx
// 247: ff d0                         callq   *%rax
// 249: 49 8b 45 00                   movq    (%r13), %rax
// 24d: 85 c0                         testl   %eax, %eax
// 24f: 78 21                         js      0x272 <_JIT_ENTRY+0x272>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25b: ff d0                         callq   *%rax
// 25d: 49 ff 4d 00                   decq    (%r13)
// 261: 75 0f                         jne     0x272 <_JIT_ENTRY+0x272>
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _Py_Dealloc
// 26d: 4c 89 ef                      movq    %r13, %rdi
// 270: ff d0                         callq   *%rax
// 272: 48 8b 45 00                   movq    (%rbp), %rax
// 276: 48 85 c0                      testq   %rax, %rax
// 279: 7f 22                         jg      0x29d <_JIT_ENTRY+0x29d>
// 27b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027d:  R_X86_64_64  .rodata.str1.1
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _Py_NegativeRefcount
// 28f: be 87 0c 00 00                movl    $0xc87, %esi            # imm = 0xC87
// 294: 48 89 ea                      movq    %rbp, %rdx
// 297: ff d0                         callq   *%rax
// 299: 48 8b 45 00                   movq    (%rbp), %rax
// 29d: 85 c0                         testl   %eax, %eax
// 29f: 78 21                         js      0x2c2 <_JIT_ENTRY+0x2c2>
// 2a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ab: ff d0                         callq   *%rax
// 2ad: 48 ff 4d 00                   decq    (%rbp)
// 2b1: 75 0f                         jne     0x2c2 <_JIT_ENTRY+0x2c2>
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _Py_Dealloc
// 2bd: 48 89 ef                      movq    %rbp, %rdi
// 2c0: ff d0                         callq   *%rax
// 2c2: 4d 85 e4                      testq   %r12, %r12
// 2c5: 74 50                         je      0x317 <_JIT_ENTRY+0x317>
// 2c7: 49 8b 04 24                   movq    (%r12), %rax
// 2cb: 48 85 c0                      testq   %rax, %rax
// 2ce: 7f 22                         jg      0x2f2 <_JIT_ENTRY+0x2f2>
// 2d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d2:  R_X86_64_64  .rodata.str1.1+0x39
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  _Py_NegativeRefcount
// 2e4: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 2e9: 4c 89 e2                      movq    %r12, %rdx
// 2ec: ff d0                         callq   *%rax
// 2ee: 49 8b 04 24                   movq    (%r12), %rax
// 2f2: 85 c0                         testl   %eax, %eax
// 2f4: 78 21                         js      0x317 <_JIT_ENTRY+0x317>
// 2f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 300: ff d0                         callq   *%rax
// 302: 49 ff 0c 24                   decq    (%r12)
// 306: 75 0f                         jne     0x317 <_JIT_ENTRY+0x317>
// 308: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030a:  R_X86_64_64  _Py_Dealloc
// 312: 4c 89 e7                      movq    %r12, %rdi
// 315: ff d0                         callq   *%rax
// 317: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 31c: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 320: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 325: 48 85 d2                      testq   %rdx, %rdx
// 328: 0f 84 af 00 00 00             je      0x3dd <_JIT_ENTRY+0x3dd>
// 32e: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 333: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 337: 48 89 10                      movq    %rdx, (%rax)
// 33a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033c:  R_X86_64_64  _JIT_CONTINUE
// 344: 48 89 df                      movq    %rbx, %rdi
// 347: 4c 89 fa                      movq    %r15, %rdx
// 34a: 48 83 c4 28                   addq    $0x28, %rsp
// 34e: 5b                            popq    %rbx
// 34f: 41 5c                         popq    %r12
// 351: 41 5d                         popq    %r13
// 353: 41 5e                         popq    %r14
// 355: 41 5f                         popq    %r15
// 357: 5d                            popq    %rbp
// 358: ff e0                         jmpq    *%rax
// 35a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035c:  R_X86_64_64  _Py_Dealloc
// 364: 4c 89 e7                      movq    %r12, %rdi
// 367: ff d0                         callq   *%rax
// 369: 85 ed                         testl   %ebp, %ebp
// 36b: 0f 89 12 fe ff ff             jns     0x183 <_JIT_ENTRY+0x183>
// 371: eb 63                         jmp     0x3d6 <_JIT_ENTRY+0x3d6>
// 373: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000375:  R_X86_64_64  _Py_Dealloc
// 37d: 4c 89 ef                      movq    %r13, %rdi
// 380: ff d0                         callq   *%rax
// 382: 49 8b 04 24                   movq    (%r12), %rax
// 386: 48 85 c0                      testq   %rax, %rax
// 389: 0f 8f 8b fd ff ff             jg      0x11a <_JIT_ENTRY+0x11a>
// 38f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000391:  R_X86_64_64  .rodata.str1.1
// 399: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039b:  R_X86_64_64  _Py_NegativeRefcount
// 3a3: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 3a8: 4c 89 e2                      movq    %r12, %rdx
// 3ab: ff d0                         callq   *%rax
// 3ad: 49 8b 04 24                   movq    (%r12), %rax
// 3b1: 85 c0                         testl   %eax, %eax
// 3b3: 78 21                         js      0x3d6 <_JIT_ENTRY+0x3d6>
// 3b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3bf: ff d0                         callq   *%rax
// 3c1: 49 ff 0c 24                   decq    (%r12)
// 3c5: 75 0f                         jne     0x3d6 <_JIT_ENTRY+0x3d6>
// 3c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c9:  R_X86_64_64  _Py_Dealloc
// 3d1: 4c 89 e7                      movq    %r12, %rdi
// 3d4: ff d0                         callq   *%rax
// 3d6: 49 83 c6 f0                   addq    $-0x10, %r14
// 3da: 4c 89 f0                      movq    %r14, %rax
// 3dd: 48 29 d8                      subq    %rbx, %rax
// 3e0: 48 83 c0 b8                   addq    $-0x48, %rax
// 3e4: 48 c1 e8 03                   shrq    $0x3, %rax
// 3e8: 89 43 40                      movl    %eax, 0x40(%rbx)
// 3eb: 31 c0                         xorl    %eax, %eax
// 3ed: 48 83 c4 28                   addq    $0x28, %rsp
// 3f1: 5b                            popq    %rbx
// 3f2: 41 5c                         popq    %r12
// 3f4: 41 5d                         popq    %r13
// 3f6: 41 5e                         popq    %r14
// 3f8: 41 5f                         popq    %r15
// 3fa: 5d                            popq    %rbp
// 3fb: c3                            retq
// 3fc: 
static const unsigned char _CHECK_EG_MATCHplus_BUILD_SLICE_code_body[1021] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x66, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x75, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x93, 0x02, 0x00, 0x00, 0xe9, 0xaf, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xdf, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x53, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x46, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x89, 0x4e, 0xf0, 0x49, 0x89, 0x46, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xf8, 0x03, 0x75, 0x10, 0x31, 0xc9, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x95, 0xc1, 0x4d, 0x8b, 0x64, 0xce, 0xf8, 0xeb, 0x03, 0x45, 0x31, 0xe4, 0x31, 0xc9, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc1, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc8, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x49, 0x8b, 0x2c, 0xce, 0x48, 0x98, 0x48, 0x89, 0x44, 0x24, 0x20, 0x4d, 0x8b, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x8d, 0x34, 0xce, 0x48, 0x89, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x12, 0xfe, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x8b, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_BUILD_SLICE_code_holes[36] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySlice_New, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x35c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x375, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x391, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x39b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_BUILD_SLICE_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BUILD_SLICE_data_holes[1];

// _CHECK_EG_MATCHplus_BUILD_STRING
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BUILD_STRING.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3c                         js      0x71 <_JIT_ENTRY+0x71>
// 35: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 3d: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 50: 48 89 e2                      movq    %rsp, %rdx
// 53: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 58: 4c 89 ef                      movq    %r13, %rdi
// 5b: 4c 89 e6                      movq    %r12, %rsi
// 5e: ff d0                         callq   *%rax
// 60: 89 c5                         movl    %eax, %ebp
// 62: 49 8b 45 00                   movq    (%r13), %rax
// 66: 48 85 c0                      testq   %rax, %rax
// 69: 7e 18                         jle     0x83 <_JIT_ENTRY+0x83>
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 79 3a                         jns     0xa9 <_JIT_ENTRY+0xa9>
// 6f: eb 4a                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 71: 49 8b 45 00                   movq    (%r13), %rax
// 75: 48 85 c0                      testq   %rax, %rax
// 78: 7e 57                         jle     0xd1 <_JIT_ENTRY+0xd1>
// 7a: 85 c0                         testl   %eax, %eax
// 7c: 79 79                         jns     0xf7 <_JIT_ENTRY+0xf7>
// 7e: e9 8a 00 00 00                jmp     0x10d <_JIT_ENTRY+0x10d>
// 83: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000085:  R_X86_64_64  .rodata.str1.1
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_NegativeRefcount
// 97: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9c: 4c 89 ea                      movq    %r13, %rdx
// 9f: ff d0                         callq   *%rax
// a1: 49 8b 45 00                   movq    (%r13), %rax
// a5: 85 c0                         testl   %eax, %eax
// a7: 78 12                         js      0xbb <_JIT_ENTRY+0xbb>
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b3: ff d0                         callq   *%rax
// b5: 49 ff 4d 00                   decq    (%r13)
// b9: 74 6c                         je      0x127 <_JIT_ENTRY+0x127>
// bb: 49 8b 04 24                   movq    (%r12), %rax
// bf: 48 85 c0                      testq   %rax, %rax
// c2: 7e 7b                         jle     0x13f <_JIT_ENTRY+0x13f>
// c4: 85 c0                         testl   %eax, %eax
// c6: 0f 89 99 00 00 00             jns     0x165 <_JIT_ENTRY+0x165>
// cc: e9 aa 00 00 00                jmp     0x17b <_JIT_ENTRY+0x17b>
// d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d3:  R_X86_64_64  .rodata.str1.1
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_NegativeRefcount
// e5: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ea: 4c 89 ea                      movq    %r13, %rdx
// ed: ff d0                         callq   *%rax
// ef: 49 8b 45 00                   movq    (%r13), %rax
// f3: 85 c0                         testl   %eax, %eax
// f5: 78 16                         js      0x10d <_JIT_ENTRY+0x10d>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 101: ff d0                         callq   *%rax
// 103: 49 ff 4d 00                   decq    (%r13)
// 107: 0f 84 fe 01 00 00             je      0x30b <_JIT_ENTRY+0x30b>
// 10d: 49 8b 04 24                   movq    (%r12), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 0f 8e 0d 02 00 00             jle     0x327 <_JIT_ENTRY+0x327>
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 0f 89 2b 02 00 00             jns     0x34d <_JIT_ENTRY+0x34d>
// 122: e9 47 02 00 00                jmp     0x36e <_JIT_ENTRY+0x36e>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_Dealloc
// 131: 4c 89 ef                      movq    %r13, %rdi
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 85                         jg      0xc4 <_JIT_ENTRY+0xc4>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 16                         js      0x17b <_JIT_ENTRY+0x17b>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0c 24                   decq    (%r12)
// 175: 0f 84 77 01 00 00             je      0x2f2 <_JIT_ENTRY+0x2f2>
// 17b: 85 ed                         testl   %ebp, %ebp
// 17d: 0f 88 eb 01 00 00             js      0x36e <_JIT_ENTRY+0x36e>
// 183: 48 8b 3c 24                   movq    (%rsp), %rdi
// 187: 48 85 ff                      testq   %rdi, %rdi
// 18a: 0f 84 de 01 00 00             je      0x36e <_JIT_ENTRY+0x36e>
// 190: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 195: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  _Py_NoneStruct
// 1a4: 48 39 c7                      cmpq    %rax, %rdi
// 1a7: 74 10                         je      0x1b9 <_JIT_ENTRY+0x1b9>
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  PyErr_SetHandledException
// 1b3: ff d0                         callq   *%rax
// 1b5: 48 8b 04 24                   movq    (%rsp), %rax
// 1b9: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1be: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1c2: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 1c6: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001c8:  R_X86_64_64  _JIT_OPARG
// 1d0: 0f b7 d3                      movzwl  %bx, %edx
// 1d3: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 1db: 4d 89 f4                      movq    %r14, %r12
// 1de: 49 29 c4                      subq    %rax, %r12
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _PyUnicode_JoinArray
// 1eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ed:  R_X86_64_64  _PyRuntime
// 1f5: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 1fc: 4c 89 e6                      movq    %r12, %rsi
// 1ff: ff d0                         callq   *%rax
// 201: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 206: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 20c: 0f 8e 83 00 00 00             jle     0x295 <_JIT_ENTRY+0x295>
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _JIT_OPARG
// 21c: 44 0f b7 f8                   movzwl  %ax, %r15d
// 220: 49 ff c7                      incq    %r15
// 223: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000225:  R_X86_64_64  _Py_NegativeRefcount
// 22d: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000022f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 237: eb 10                         jmp     0x249 <_JIT_ENTRY+0x249>
// 239: 0f 1f 80 00 00 00 00          nopl    (%rax)
// 240: 49 ff cf                      decq    %r15
// 243: 49 83 ff 01                   cmpq    $0x1, %r15
// 247: 7e 4c                         jle     0x295 <_JIT_ENTRY+0x295>
// 249: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// 24d: 4d 8b 2c c4                   movq    (%r12,%rax,8), %r13
// 251: 49 8b 45 00                   movq    (%r13), %rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 7e 06                         jle     0x260 <_JIT_ENTRY+0x260>
// 25a: 85 c0                         testl   %eax, %eax
// 25c: 78 e2                         js      0x240 <_JIT_ENTRY+0x240>
// 25e: eb 1c                         jmp     0x27c <_JIT_ENTRY+0x27c>
// 260: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000262:  R_X86_64_64  .rodata.str1.1
// 26a: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// 26f: 4c 89 ea                      movq    %r13, %rdx
// 272: ff d3                         callq   *%rbx
// 274: 49 8b 45 00                   movq    (%r13), %rax
// 278: 85 c0                         testl   %eax, %eax
// 27a: 78 c4                         js      0x240 <_JIT_ENTRY+0x240>
// 27c: ff d5                         callq   *%rbp
// 27e: 49 ff 4d 00                   decq    (%r13)
// 282: 75 bc                         jne     0x240 <_JIT_ENTRY+0x240>
// 284: 4c 89 ef                      movq    %r13, %rdi
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _Py_Dealloc
// 291: ff d0                         callq   *%rax
// 293: eb ab                         jmp     0x240 <_JIT_ENTRY+0x240>
// 295: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 29a: 48 85 d2                      testq   %rdx, %rdx
// 29d: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 2a2: 0f 84 cd 00 00 00             je      0x375 <_JIT_ENTRY+0x375>
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _JIT_OPARG
// 2b2: 0f b7 c8                      movzwl  %ax, %ecx
// 2b5: 0f b7 c0                      movzwl  %ax, %eax
// 2b8: 48 c1 e0 03                   shlq    $0x3, %rax
// 2bc: 48 f7 d8                      negq    %rax
// 2bf: 49 89 14 06                   movq    %rdx, (%r14,%rax)
// 2c3: b8 01 00 00 00                movl    $0x1, %eax
// 2c8: 29 c8                         subl    %ecx, %eax
// 2ca: 48 98                         cltq
// 2cc: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _JIT_CONTINUE
// 2da: 48 89 df                      movq    %rbx, %rdi
// 2dd: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2e2: 48 83 c4 28                   addq    $0x28, %rsp
// 2e6: 5b                            popq    %rbx
// 2e7: 41 5c                         popq    %r12
// 2e9: 41 5d                         popq    %r13
// 2eb: 41 5e                         popq    %r14
// 2ed: 41 5f                         popq    %r15
// 2ef: 5d                            popq    %rbp
// 2f0: ff e0                         jmpq    *%rax
// 2f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f4:  R_X86_64_64  _Py_Dealloc
// 2fc: 4c 89 e7                      movq    %r12, %rdi
// 2ff: ff d0                         callq   *%rax
// 301: 85 ed                         testl   %ebp, %ebp
// 303: 0f 89 7a fe ff ff             jns     0x183 <_JIT_ENTRY+0x183>
// 309: eb 63                         jmp     0x36e <_JIT_ENTRY+0x36e>
// 30b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030d:  R_X86_64_64  _Py_Dealloc
// 315: 4c 89 ef                      movq    %r13, %rdi
// 318: ff d0                         callq   *%rax
// 31a: 49 8b 04 24                   movq    (%r12), %rax
// 31e: 48 85 c0                      testq   %rax, %rax
// 321: 0f 8f f3 fd ff ff             jg      0x11a <_JIT_ENTRY+0x11a>
// 327: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000329:  R_X86_64_64  .rodata.str1.1
// 331: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000333:  R_X86_64_64  _Py_NegativeRefcount
// 33b: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 340: 4c 89 e2                      movq    %r12, %rdx
// 343: ff d0                         callq   *%rax
// 345: 49 8b 04 24                   movq    (%r12), %rax
// 349: 85 c0                         testl   %eax, %eax
// 34b: 78 21                         js      0x36e <_JIT_ENTRY+0x36e>
// 34d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 357: ff d0                         callq   *%rax
// 359: 49 ff 0c 24                   decq    (%r12)
// 35d: 75 0f                         jne     0x36e <_JIT_ENTRY+0x36e>
// 35f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000361:  R_X86_64_64  _Py_Dealloc
// 369: 4c 89 e7                      movq    %r12, %rdi
// 36c: ff d0                         callq   *%rax
// 36e: 49 83 c6 f0                   addq    $-0x10, %r14
// 372: 4d 89 f4                      movq    %r14, %r12
// 375: 49 29 dc                      subq    %rbx, %r12
// 378: 49 83 c4 b8                   addq    $-0x48, %r12
// 37c: 49 c1 ec 03                   shrq    $0x3, %r12
// 380: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 384: 31 c0                         xorl    %eax, %eax
// 386: 48 83 c4 28                   addq    $0x28, %rsp
// 38a: 5b                            popq    %rbx
// 38b: 41 5c                         popq    %r12
// 38d: 41 5d                         popq    %r13
// 38f: 41 5e                         popq    %r14
// 391: 41 5f                         popq    %r15
// 393: 5d                            popq    %rbp
// 394: c3                            retq
// 395: 
static const unsigned char _CHECK_EG_MATCHplus_BUILD_STRING_code_body[918] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xfe, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x0d, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x2b, 0x02, 0x00, 0x00, 0xe9, 0x47, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x77, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xeb, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xde, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x89, 0x4e, 0xf0, 0x49, 0x89, 0x46, 0xf8, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x83, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x7e, 0x4c, 0x41, 0x8d, 0x47, 0xfe, 0x4d, 0x8b, 0x2c, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x1c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd3, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xc4, 0xff, 0xd5, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xbc, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xab, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x85, 0xd2, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x0f, 0x84, 0xcd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x49, 0x89, 0x14, 0x06, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x7a, 0xfe, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xf3, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_BUILD_STRING_code_holes[31] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x329, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x333, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x34f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x361, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_BUILD_STRING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BUILD_STRING_data_holes[1];

// _CHECK_EG_MATCHplus_BUILD_TUPLE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_BUILD_TUPLE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 45 01 00 00             je      0x255 <_JIT_ENTRY+0x255>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 54 01 00 00             jle     0x271 <_JIT_ENTRY+0x271>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 72 01 00 00             jns     0x297 <_JIT_ENTRY+0x297>
// 125: e9 8e 01 00 00                jmp     0x2b8 <_JIT_ENTRY+0x2b8>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 be 00 00 00             je      0x23c <_JIT_ENTRY+0x23c>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 32 01 00 00             js      0x2b8 <_JIT_ENTRY+0x2b8>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 24 01 00 00             je      0x2b8 <_JIT_ENTRY+0x2b8>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 48 39 c7                      cmpq    %rax, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1b4: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b9: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1bd: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _JIT_OPARG
// 1cb: 0f b7 f0                      movzwl  %ax, %esi
// 1ce: 48 8d 04 f5 00 00 00 00       leaq    (,%rsi,8), %rax
// 1d6: 4d 89 f4                      movq    %r14, %r12
// 1d9: 49 29 c4                      subq    %rax, %r12
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _PyTuple_FromArraySteal
// 1e6: 4c 89 e7                      movq    %r12, %rdi
// 1e9: ff d0                         callq   *%rax
// 1eb: 48 85 c0                      testq   %rax, %rax
// 1ee: 0f 84 cb 00 00 00             je      0x2bf <_JIT_ENTRY+0x2bf>
// 1f4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f6:  R_X86_64_64  _JIT_OPARG
// 1fe: 0f b7 d1                      movzwl  %cx, %edx
// 201: 0f b7 c9                      movzwl  %cx, %ecx
// 204: 48 c1 e1 03                   shlq    $0x3, %rcx
// 208: 48 f7 d9                      negq    %rcx
// 20b: 49 89 04 0e                   movq    %rax, (%r14,%rcx)
// 20f: b8 01 00 00 00                movl    $0x1, %eax
// 214: 29 d0                         subl    %edx, %eax
// 216: 48 98                         cltq
// 218: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _JIT_CONTINUE
// 226: 48 89 df                      movq    %rbx, %rdi
// 229: 4c 89 fa                      movq    %r15, %rdx
// 22c: 48 83 c4 18                   addq    $0x18, %rsp
// 230: 5b                            popq    %rbx
// 231: 41 5c                         popq    %r12
// 233: 41 5d                         popq    %r13
// 235: 41 5e                         popq    %r14
// 237: 41 5f                         popq    %r15
// 239: 5d                            popq    %rbp
// 23a: ff e0                         jmpq    *%rax
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_Dealloc
// 246: 4c 89 e7                      movq    %r12, %rdi
// 249: ff d0                         callq   *%rax
// 24b: 85 ed                         testl   %ebp, %ebp
// 24d: 0f 89 33 ff ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 253: eb 63                         jmp     0x2b8 <_JIT_ENTRY+0x2b8>
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _Py_Dealloc
// 25f: 4c 89 ef                      movq    %r13, %rdi
// 262: ff d0                         callq   *%rax
// 264: 49 8b 04 24                   movq    (%r12), %rax
// 268: 48 85 c0                      testq   %rax, %rax
// 26b: 0f 8f ac fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 271: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000273:  R_X86_64_64  .rodata.str1.1
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_NegativeRefcount
// 285: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 28a: 4c 89 e2                      movq    %r12, %rdx
// 28d: ff d0                         callq   *%rax
// 28f: 49 8b 04 24                   movq    (%r12), %rax
// 293: 85 c0                         testl   %eax, %eax
// 295: 78 21                         js      0x2b8 <_JIT_ENTRY+0x2b8>
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a1: ff d0                         callq   *%rax
// 2a3: 49 ff 0c 24                   decq    (%r12)
// 2a7: 75 0f                         jne     0x2b8 <_JIT_ENTRY+0x2b8>
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _Py_Dealloc
// 2b3: 4c 89 e7                      movq    %r12, %rdi
// 2b6: ff d0                         callq   *%rax
// 2b8: 49 83 c6 f0                   addq    $-0x10, %r14
// 2bc: 4d 89 f4                      movq    %r14, %r12
// 2bf: 49 29 dc                      subq    %rbx, %r12
// 2c2: 49 83 c4 b8                   addq    $-0x48, %r12
// 2c6: 49 c1 ec 03                   shrq    $0x3, %r12
// 2ca: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2ce: 31 c0                         xorl    %eax, %eax
// 2d0: 48 83 c4 18                   addq    $0x18, %rsp
// 2d4: 5b                            popq    %rbx
// 2d5: 41 5c                         popq    %r12
// 2d7: 41 5d                         popq    %r13
// 2d9: 41 5e                         popq    %r14
// 2db: 41 5f                         popq    %r15
// 2dd: 5d                            popq    %rbp
// 2de: c3                            retq
// 2df: 
static const unsigned char _CHECK_EG_MATCHplus_BUILD_TUPLE_code_body[736] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x45, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x54, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x72, 0x01, 0x00, 0x00, 0xe9, 0x8e, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xbe, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x32, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x24, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x89, 0x4e, 0xf0, 0x49, 0x89, 0x46, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0x8d, 0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xcb, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x49, 0x89, 0x04, 0x0e, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x98, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x33, 0xff, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xac, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_BUILD_TUPLE_code_holes[25] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyTuple_FromArraySteal, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_BUILD_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_BUILD_TUPLE_data_holes[1];

// _CHECK_EG_MATCHplus_CALL_BUILTIN_CLASS
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CALL_BUILTIN_CLASS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3c                         js      0x71 <_JIT_ENTRY+0x71>
// 35: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 3d: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 50: 48 89 e2                      movq    %rsp, %rdx
// 53: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 58: 4c 89 ef                      movq    %r13, %rdi
// 5b: 4c 89 e6                      movq    %r12, %rsi
// 5e: ff d0                         callq   *%rax
// 60: 89 c5                         movl    %eax, %ebp
// 62: 49 8b 45 00                   movq    (%r13), %rax
// 66: 48 85 c0                      testq   %rax, %rax
// 69: 7e 1c                         jle     0x87 <_JIT_ENTRY+0x87>
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 79 3e                         jns     0xad <_JIT_ENTRY+0xad>
// 6f: eb 52                         jmp     0xc3 <_JIT_ENTRY+0xc3>
// 71: 49 8b 45 00                   movq    (%r13), %rax
// 75: 48 85 c0                      testq   %rax, %rax
// 78: 7e 63                         jle     0xdd <_JIT_ENTRY+0xdd>
// 7a: 85 c0                         testl   %eax, %eax
// 7c: 0f 89 81 00 00 00             jns     0x103 <_JIT_ENTRY+0x103>
// 82: e9 9d 00 00 00                jmp     0x124 <_JIT_ENTRY+0x124>
// 87: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000089:  R_X86_64_64  .rodata.str1.1
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_NegativeRefcount
// 9b: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a0: 4c 89 ea                      movq    %r13, %rdx
// a3: ff d0                         callq   *%rax
// a5: 49 8b 45 00                   movq    (%r13), %rax
// a9: 85 c0                         testl   %eax, %eax
// ab: 78 16                         js      0xc3 <_JIT_ENTRY+0xc3>
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b7: ff d0                         callq   *%rax
// b9: 49 ff 4d 00                   decq    (%r13)
// bd: 0f 84 c7 00 00 00             je      0x18a <_JIT_ENTRY+0x18a>
// c3: 49 8b 04 24                   movq    (%r12), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 0f 8e d6 00 00 00             jle     0x1a6 <_JIT_ENTRY+0x1a6>
// d0: 85 c0                         testl   %eax, %eax
// d2: 0f 89 f4 00 00 00             jns     0x1cc <_JIT_ENTRY+0x1cc>
// d8: e9 05 01 00 00                jmp     0x1e2 <_JIT_ENTRY+0x1e2>
// dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000df:  R_X86_64_64  .rodata.str1.1
// e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e9:  R_X86_64_64  _Py_NegativeRefcount
// f1: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f6: 4c 89 ea                      movq    %r13, %rdx
// f9: ff d0                         callq   *%rax
// fb: 49 8b 45 00                   movq    (%r13), %rax
// ff: 85 c0                         testl   %eax, %eax
// 101: 78 21                         js      0x124 <_JIT_ENTRY+0x124>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10d: ff d0                         callq   *%rax
// 10f: 49 ff 4d 00                   decq    (%r13)
// 113: 75 0f                         jne     0x124 <_JIT_ENTRY+0x124>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_Dealloc
// 11f: 4c 89 ef                      movq    %r13, %rdi
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 48 85 c0                      testq   %rax, %rax
// 12b: 7e 09                         jle     0x136 <_JIT_ENTRY+0x136>
// 12d: 85 c0                         testl   %eax, %eax
// 12f: 79 2f                         jns     0x160 <_JIT_ENTRY+0x160>
// 131: e9 96 02 00 00                jmp     0x3cc <_JIT_ENTRY+0x3cc>
// 136: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000138:  R_X86_64_64  .rodata.str1.1
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_NegativeRefcount
// 14a: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 14f: 4c 89 e2                      movq    %r12, %rdx
// 152: ff d0                         callq   *%rax
// 154: 49 8b 04 24                   movq    (%r12), %rax
// 158: 85 c0                         testl   %eax, %eax
// 15a: 0f 88 6c 02 00 00             js      0x3cc <_JIT_ENTRY+0x3cc>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 0f 85 56 02 00 00             jne     0x3cc <_JIT_ENTRY+0x3cc>
// 176: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000178:  R_X86_64_64  _Py_Dealloc
// 180: 4c 89 e7                      movq    %r12, %rdi
// 183: ff d0                         callq   *%rax
// 185: e9 42 02 00 00                jmp     0x3cc <_JIT_ENTRY+0x3cc>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_Dealloc
// 194: 4c 89 ef                      movq    %r13, %rdi
// 197: ff d0                         callq   *%rax
// 199: 49 8b 04 24                   movq    (%r12), %rax
// 19d: 48 85 c0                      testq   %rax, %rax
// 1a0: 0f 8f 2a ff ff ff             jg      0xd0 <_JIT_ENTRY+0xd0>
// 1a6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a8:  R_X86_64_64  .rodata.str1.1
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _Py_NegativeRefcount
// 1ba: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1bf: 4c 89 e2                      movq    %r12, %rdx
// 1c2: ff d0                         callq   *%rax
// 1c4: 49 8b 04 24                   movq    (%r12), %rax
// 1c8: 85 c0                         testl   %eax, %eax
// 1ca: 78 16                         js      0x1e2 <_JIT_ENTRY+0x1e2>
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d6: ff d0                         callq   *%rax
// 1d8: 49 ff 0c 24                   decq    (%r12)
// 1dc: 0f 84 d3 01 00 00             je      0x3b5 <_JIT_ENTRY+0x3b5>
// 1e2: 85 ed                         testl   %ebp, %ebp
// 1e4: 0f 88 e2 01 00 00             js      0x3cc <_JIT_ENTRY+0x3cc>
// 1ea: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ee: 48 85 ff                      testq   %rdi, %rdi
// 1f1: 0f 84 d5 01 00 00             je      0x3cc <_JIT_ENTRY+0x3cc>
// 1f7: 4c 89 7c 24 30                movq    %r15, 0x30(%rsp)
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_NoneStruct
// 206: 48 39 c7                      cmpq    %rax, %rdi
// 209: 74 10                         je      0x21b <_JIT_ENTRY+0x21b>
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  PyErr_SetHandledException
// 215: ff d0                         callq   *%rax
// 217: 48 8b 04 24                   movq    (%rsp), %rax
// 21b: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 220: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 224: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 228: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022a:  R_X86_64_64  _JIT_OPARG
// 232: 0f b7 d1                      movzwl  %cx, %edx
// 235: 89 d0                         movl    %edx, %eax
// 237: f7 d0                         notl    %eax
// 239: 4c 63 d0                      movslq  %eax, %r10
// 23c: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// 240: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 245: 29 d6                         subl    %edx, %esi
// 247: 4c 63 ce                      movslq  %esi, %r9
// 24a: 0f b7 c9                      movzwl  %cx, %ecx
// 24d: 48 89 ce                      movq    %rcx, %rsi
// 250: 48 f7 de                      negq    %rsi
// 253: 44 8d 7a 01                   leal    0x1(%rdx), %r15d
// 257: 48 85 c0                      testq   %rax, %rax
// 25a: 48 f7 d1                      notq    %rcx
// 25d: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 261: 44 0f 44 fa                   cmovel  %edx, %r15d
// 265: 4b 8b 3c ce                   movq    (%r14,%r9,8), %rdi
// 269: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 26d: f6 82 ab 00 00 00 80          testb   $-0x80, 0xab(%rdx)
// 274: 0f 84 11 01 00 00             je      0x38b <_JIT_ENTRY+0x38b>
// 27a: 4c 8b 87 90 01 00 00          movq    0x190(%rdi), %r8
// 281: 4d 85 c0                      testq   %r8, %r8
// 284: 0f 84 01 01 00 00             je      0x38b <_JIT_ENTRY+0x38b>
// 28a: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 28f: 4c 89 54 24 28                movq    %r10, 0x28(%rsp)
// 294: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 298: 48 85 c0                      testq   %rax, %rax
// 29b: 41 0f 94 c4                   sete    %r12b
// 29f: 44 89 fa                      movl    %r15d, %edx
// 2a2: 48 89 7c 24 18                movq    %rdi, 0x18(%rsp)
// 2a7: 48 89 ee                      movq    %rbp, %rsi
// 2aa: 31 c9                         xorl    %ecx, %ecx
// 2ac: 41 ff d0                      callq   *%r8
// 2af: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _JIT_OPARG
// 2be: 66 85 c0                      testw   %ax, %ax
// 2c1: 0f 94 c0                      sete    %al
// 2c4: 41 84 c4                      testb   %al, %r12b
// 2c7: 0f 84 25 01 00 00             je      0x3f2 <_JIT_ENTRY+0x3f2>
// 2cd: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 2d2: 49 8b 45 00                   movq    (%r13), %rax
// 2d6: 48 85 c0                      testq   %rax, %rax
// 2d9: 7f 22                         jg      0x2fd <_JIT_ENTRY+0x2fd>
// 2db: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002dd:  R_X86_64_64  .rodata.str1.1
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _Py_NegativeRefcount
// 2ef: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 2f4: 4c 89 ea                      movq    %r13, %rdx
// 2f7: ff d0                         callq   *%rax
// 2f9: 49 8b 45 00                   movq    (%r13), %rax
// 2fd: 85 c0                         testl   %eax, %eax
// 2ff: 4c 8b 7c 24 30                movq    0x30(%rsp), %r15
// 304: 4c 8b 64 24 28                movq    0x28(%rsp), %r12
// 309: 78 21                         js      0x32c <_JIT_ENTRY+0x32c>
// 30b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 315: ff d0                         callq   *%rax
// 317: 49 ff 4d 00                   decq    (%r13)
// 31b: 75 0f                         jne     0x32c <_JIT_ENTRY+0x32c>
// 31d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031f:  R_X86_64_64  _Py_Dealloc
// 327: 4c 89 ef                      movq    %r13, %rdi
// 32a: ff d0                         callq   *%rax
// 32c: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 331: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 335: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 33a: 48 85 c9                      testq   %rcx, %rcx
// 33d: 0f 84 90 00 00 00             je      0x3d3 <_JIT_ENTRY+0x3d3>
// 343: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 347: 48 89 08                      movq    %rcx, (%rax)
// 34a: 49 8b 47 10                   movq    0x10(%r15), %rax
// 34e: 48 8b 00                      movq    (%rax), %rax
// 351: 84 c0                         testb   %al, %al
// 353: 74 13                         je      0x368 <_JIT_ENTRY+0x368>
// 355: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000357:  R_X86_64_64  _Py_HandlePending
// 35f: 4c 89 ff                      movq    %r15, %rdi
// 362: ff d0                         callq   *%rax
// 364: 85 c0                         testl   %eax, %eax
// 366: 75 68                         jne     0x3d0 <_JIT_ENTRY+0x3d0>
// 368: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036a:  R_X86_64_64  _JIT_CONTINUE
// 372: 48 89 df                      movq    %rbx, %rdi
// 375: 4c 89 f6                      movq    %r14, %rsi
// 378: 4c 89 fa                      movq    %r15, %rdx
// 37b: 48 83 c4 38                   addq    $0x38, %rsp
// 37f: 5b                            popq    %rbx
// 380: 41 5c                         popq    %r12
// 382: 41 5d                         popq    %r13
// 384: 41 5e                         popq    %r14
// 386: 41 5f                         popq    %r15
// 388: 5d                            popq    %rbp
// 389: ff e0                         jmpq    *%rax
// 38b: 49 29 de                      subq    %rbx, %r14
// 38e: 49 83 c6 b8                   addq    $-0x48, %r14
// 392: 49 c1 ee 03                   shrq    $0x3, %r14
// 396: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 39a: 48 8b 03                      movq    (%rbx), %rax
// 39d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000039f:  R_X86_64_64  _JIT_TARGET
// 3a7: 89 c9                         movl    %ecx, %ecx
// 3a9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 3ad: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 3b3: eb 2e                         jmp     0x3e3 <_JIT_ENTRY+0x3e3>
// 3b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b7:  R_X86_64_64  _Py_Dealloc
// 3bf: 4c 89 e7                      movq    %r12, %rdi
// 3c2: ff d0                         callq   *%rax
// 3c4: 85 ed                         testl   %ebp, %ebp
// 3c6: 0f 89 1e fe ff ff             jns     0x1ea <_JIT_ENTRY+0x1ea>
// 3cc: 49 83 c6 f0                   addq    $-0x10, %r14
// 3d0: 4c 89 f0                      movq    %r14, %rax
// 3d3: 48 29 d8                      subq    %rbx, %rax
// 3d6: 48 83 c0 b8                   addq    $-0x48, %rax
// 3da: 48 c1 e8 03                   shrq    $0x3, %rax
// 3de: 89 43 40                      movl    %eax, 0x40(%rbx)
// 3e1: 31 c0                         xorl    %eax, %eax
// 3e3: 48 83 c4 38                   addq    $0x38, %rsp
// 3e7: 5b                            popq    %rbx
// 3e8: 41 5c                         popq    %r12
// 3ea: 41 5d                         popq    %r13
// 3ec: 41 5e                         popq    %r14
// 3ee: 41 5f                         popq    %r15
// 3f0: 5d                            popq    %rbp
// 3f1: c3                            retq
// 3f2: 41 83 ff 02                   cmpl    $0x2, %r15d
// 3f6: 41 bc 01 00 00 00             movl    $0x1, %r12d
// 3fc: 45 0f 43 e7                   cmovael %r15d, %r12d
// 400: 45 31 ff                      xorl    %r15d, %r15d
// 403: eb 17                         jmp     0x41c <_JIT_ENTRY+0x41c>
// 405: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 410: 49 ff c7                      incq    %r15
// 413: 4d 39 fc                      cmpq    %r15, %r12
// 416: 0f 84 b1 fe ff ff             je      0x2cd <_JIT_ENTRY+0x2cd>
// 41c: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 421: 49 8b 45 00                   movq    (%r13), %rax
// 425: 48 85 c0                      testq   %rax, %rax
// 428: 7e 06                         jle     0x430 <_JIT_ENTRY+0x430>
// 42a: 85 c0                         testl   %eax, %eax
// 42c: 78 e2                         js      0x410 <_JIT_ENTRY+0x410>
// 42e: eb 26                         jmp     0x456 <_JIT_ENTRY+0x456>
// 430: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000432:  R_X86_64_64  .rodata.str1.1
// 43a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 43f: 4c 89 ea                      movq    %r13, %rdx
// 442: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000444:  R_X86_64_64  _Py_NegativeRefcount
// 44c: ff d0                         callq   *%rax
// 44e: 49 8b 45 00                   movq    (%r13), %rax
// 452: 85 c0                         testl   %eax, %eax
// 454: 78 ba                         js      0x410 <_JIT_ENTRY+0x410>
// 456: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000458:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 460: ff d0                         callq   *%rax
// 462: 49 ff 4d 00                   decq    (%r13)
// 466: 75 a8                         jne     0x410 <_JIT_ENTRY+0x410>
// 468: 4c 89 ef                      movq    %r13, %rdi
// 46b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000046d:  R_X86_64_64  _Py_Dealloc
// 475: ff d0                         callq   *%rax
// 477: eb 97                         jmp     0x410 <_JIT_ENTRY+0x410>
// 479: 
static const unsigned char _CHECK_EG_MATCHplus_CALL_BUILTIN_CLASS_code_body[1146] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0x96, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x6c, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x56, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x42, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xd3, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xe2, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xd5, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x89, 0x4e, 0xf0, 0x49, 0x89, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd6, 0x4c, 0x63, 0xce, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x7a, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xfa, 0x4b, 0x8b, 0x3c, 0xce, 0x48, 0x8b, 0x57, 0x08, 0xf6, 0x82, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x11, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x87, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x01, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x54, 0x24, 0x28, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc4, 0x44, 0x89, 0xfa, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc4, 0x0f, 0x84, 0x25, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x30, 0x4c, 0x8b, 0x64, 0x24, 0x28, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xe6, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x68, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x1e, 0xfe, 0xff, 0xff, 0x49, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xff, 0x02, 0x41, 0xbc, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xe7, 0x45, 0x31, 0xff, 0xeb, 0x17, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4d, 0x39, 0xfc, 0x0f, 0x84, 0xb1, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97};
static const Hole _CHECK_EG_MATCHplus_CALL_BUILTIN_CLASS_code_holes[34] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x357, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x36a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x39f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x3b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x432, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x444, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x458, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x46d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CALL_BUILTIN_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CALL_BUILTIN_CLASS_data_holes[1];

// _CHECK_EG_MATCHplus_CALL_BUILTIN_FAST
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CALL_BUILTIN_FAST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3c                         js      0x71 <_JIT_ENTRY+0x71>
// 35: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 3d: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 50: 48 89 e2                      movq    %rsp, %rdx
// 53: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 58: 4c 89 ef                      movq    %r13, %rdi
// 5b: 4c 89 e6                      movq    %r12, %rsi
// 5e: ff d0                         callq   *%rax
// 60: 89 c5                         movl    %eax, %ebp
// 62: 49 8b 45 00                   movq    (%r13), %rax
// 66: 48 85 c0                      testq   %rax, %rax
// 69: 7e 18                         jle     0x83 <_JIT_ENTRY+0x83>
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 79 3a                         jns     0xa9 <_JIT_ENTRY+0xa9>
// 6f: eb 4a                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 71: 49 8b 45 00                   movq    (%r13), %rax
// 75: 48 85 c0                      testq   %rax, %rax
// 78: 7e 57                         jle     0xd1 <_JIT_ENTRY+0xd1>
// 7a: 85 c0                         testl   %eax, %eax
// 7c: 79 79                         jns     0xf7 <_JIT_ENTRY+0xf7>
// 7e: e9 8a 00 00 00                jmp     0x10d <_JIT_ENTRY+0x10d>
// 83: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000085:  R_X86_64_64  .rodata.str1.1
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_NegativeRefcount
// 97: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9c: 4c 89 ea                      movq    %r13, %rdx
// 9f: ff d0                         callq   *%rax
// a1: 49 8b 45 00                   movq    (%r13), %rax
// a5: 85 c0                         testl   %eax, %eax
// a7: 78 12                         js      0xbb <_JIT_ENTRY+0xbb>
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b3: ff d0                         callq   *%rax
// b5: 49 ff 4d 00                   decq    (%r13)
// b9: 74 6c                         je      0x127 <_JIT_ENTRY+0x127>
// bb: 49 8b 04 24                   movq    (%r12), %rax
// bf: 48 85 c0                      testq   %rax, %rax
// c2: 7e 7b                         jle     0x13f <_JIT_ENTRY+0x13f>
// c4: 85 c0                         testl   %eax, %eax
// c6: 0f 89 99 00 00 00             jns     0x165 <_JIT_ENTRY+0x165>
// cc: e9 aa 00 00 00                jmp     0x17b <_JIT_ENTRY+0x17b>
// d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d3:  R_X86_64_64  .rodata.str1.1
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_NegativeRefcount
// e5: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ea: 4c 89 ea                      movq    %r13, %rdx
// ed: ff d0                         callq   *%rax
// ef: 49 8b 45 00                   movq    (%r13), %rax
// f3: 85 c0                         testl   %eax, %eax
// f5: 78 16                         js      0x10d <_JIT_ENTRY+0x10d>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 101: ff d0                         callq   *%rax
// 103: 49 ff 4d 00                   decq    (%r13)
// 107: 0f 84 69 02 00 00             je      0x376 <_JIT_ENTRY+0x376>
// 10d: 49 8b 04 24                   movq    (%r12), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 0f 8e 78 02 00 00             jle     0x392 <_JIT_ENTRY+0x392>
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 0f 89 96 02 00 00             jns     0x3b8 <_JIT_ENTRY+0x3b8>
// 122: e9 b2 02 00 00                jmp     0x3d9 <_JIT_ENTRY+0x3d9>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_Dealloc
// 131: 4c 89 ef                      movq    %r13, %rdi
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 85                         jg      0xc4 <_JIT_ENTRY+0xc4>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 16                         js      0x17b <_JIT_ENTRY+0x17b>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0c 24                   decq    (%r12)
// 175: 0f 84 e2 01 00 00             je      0x35d <_JIT_ENTRY+0x35d>
// 17b: 85 ed                         testl   %ebp, %ebp
// 17d: 0f 88 56 02 00 00             js      0x3d9 <_JIT_ENTRY+0x3d9>
// 183: 48 8b 3c 24                   movq    (%rsp), %rdi
// 187: 48 85 ff                      testq   %rdi, %rdi
// 18a: 0f 84 49 02 00 00             je      0x3d9 <_JIT_ENTRY+0x3d9>
// 190: 4c 89 7c 24 30                movq    %r15, 0x30(%rsp)
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NoneStruct
// 19f: 48 39 c7                      cmpq    %rax, %rdi
// 1a2: 74 10                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  PyErr_SetHandledException
// 1ae: ff d0                         callq   *%rax
// 1b0: 48 8b 04 24                   movq    (%rsp), %rax
// 1b4: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1b9: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1bd: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 1c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c3:  R_X86_64_64  _JIT_OPARG
// 1cb: 0f b7 d1                      movzwl  %cx, %edx
// 1ce: 89 d0                         movl    %edx, %eax
// 1d0: f7 d0                         notl    %eax
// 1d2: 48 63 f8                      movslq  %eax, %rdi
// 1d5: 49 8b 04 fe                   movq    (%r14,%rdi,8), %rax
// 1d9: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 1de: 29 d6                         subl    %edx, %esi
// 1e0: 4c 63 ce                      movslq  %esi, %r9
// 1e3: 0f b7 c9                      movzwl  %cx, %ecx
// 1e6: 48 89 ce                      movq    %rcx, %rsi
// 1e9: 48 f7 de                      negq    %rsi
// 1ec: 44 8d 7a 01                   leal    0x1(%rdx), %r15d
// 1f0: 48 85 c0                      testq   %rax, %rax
// 1f3: 48 f7 d1                      notq    %rcx
// 1f6: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 1fa: 44 0f 44 fa                   cmovel  %edx, %r15d
// 1fe: 4b 8b 34 ce                   movq    (%r14,%r9,8), %rsi
// 202: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000204:  R_X86_64_64  PyCFunction_Type
// 20c: 48 39 56 08                   cmpq    %rdx, 0x8(%rsi)
// 210: 0f 85 1a 01 00 00             jne     0x330 <_JIT_ENTRY+0x330>
// 216: 4c 8b 46 10                   movq    0x10(%rsi), %r8
// 21a: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 222: 0f 85 08 01 00 00             jne     0x330 <_JIT_ENTRY+0x330>
// 228: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 22d: 48 89 7c 24 28                movq    %rdi, 0x28(%rsp)
// 232: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 236: 48 85 c0                      testq   %rax, %rax
// 239: 41 0f 94 c4                   sete    %r12b
// 23d: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 242: 48 8b 7e 18                   movq    0x18(%rsi), %rdi
// 246: 44 89 fa                      movl    %r15d, %edx
// 249: 48 89 ee                      movq    %rbp, %rsi
// 24c: 41 ff 50 08                   callq   *0x8(%r8)
// 250: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _JIT_OPARG
// 25f: 66 85 c0                      testw   %ax, %ax
// 262: 0f 94 c0                      sete    %al
// 265: 41 84 c4                      testb   %al, %r12b
// 268: 0f 84 91 01 00 00             je      0x3ff <_JIT_ENTRY+0x3ff>
// 26e: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 273: 49 8b 45 00                   movq    (%r13), %rax
// 277: 48 85 c0                      testq   %rax, %rax
// 27a: 7f 22                         jg      0x29e <_JIT_ENTRY+0x29e>
// 27c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027e:  R_X86_64_64  .rodata.str1.1
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_NegativeRefcount
// 290: be 28 0b 00 00                movl    $0xb28, %esi            # imm = 0xB28
// 295: 4c 89 ea                      movq    %r13, %rdx
// 298: ff d0                         callq   *%rax
// 29a: 49 8b 45 00                   movq    (%r13), %rax
// 29e: 85 c0                         testl   %eax, %eax
// 2a0: 4c 8b 7c 24 30                movq    0x30(%rsp), %r15
// 2a5: 4c 8b 64 24 28                movq    0x28(%rsp), %r12
// 2aa: 78 21                         js      0x2cd <_JIT_ENTRY+0x2cd>
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b6: ff d0                         callq   *%rax
// 2b8: 49 ff 4d 00                   decq    (%r13)
// 2bc: 75 0f                         jne     0x2cd <_JIT_ENTRY+0x2cd>
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_Dealloc
// 2c8: 4c 89 ef                      movq    %r13, %rdi
// 2cb: ff d0                         callq   *%rax
// 2cd: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 2d2: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 2d6: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 2db: 48 85 c9                      testq   %rcx, %rcx
// 2de: 0f 84 fc 00 00 00             je      0x3e0 <_JIT_ENTRY+0x3e0>
// 2e4: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 2e8: 48 89 08                      movq    %rcx, (%rax)
// 2eb: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2ef: 48 8b 00                      movq    (%rax), %rax
// 2f2: 84 c0                         testb   %al, %al
// 2f4: 74 17                         je      0x30d <_JIT_ENTRY+0x30d>
// 2f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f8:  R_X86_64_64  _Py_HandlePending
// 300: 4c 89 ff                      movq    %r15, %rdi
// 303: ff d0                         callq   *%rax
// 305: 85 c0                         testl   %eax, %eax
// 307: 0f 85 d0 00 00 00             jne     0x3dd <_JIT_ENTRY+0x3dd>
// 30d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030f:  R_X86_64_64  _JIT_CONTINUE
// 317: 48 89 df                      movq    %rbx, %rdi
// 31a: 4c 89 f6                      movq    %r14, %rsi
// 31d: 4c 89 fa                      movq    %r15, %rdx
// 320: 48 83 c4 38                   addq    $0x38, %rsp
// 324: 5b                            popq    %rbx
// 325: 41 5c                         popq    %r12
// 327: 41 5d                         popq    %r13
// 329: 41 5e                         popq    %r14
// 32b: 41 5f                         popq    %r15
// 32d: 5d                            popq    %rbp
// 32e: ff e0                         jmpq    *%rax
// 330: 49 29 de                      subq    %rbx, %r14
// 333: 49 83 c6 b8                   addq    $-0x48, %r14
// 337: 49 c1 ee 03                   shrq    $0x3, %r14
// 33b: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 33f: 48 8b 03                      movq    (%rbx), %rax
// 342: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000344:  R_X86_64_64  _JIT_TARGET
// 34c: 89 c9                         movl    %ecx, %ecx
// 34e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 352: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 358: e9 93 00 00 00                jmp     0x3f0 <_JIT_ENTRY+0x3f0>
// 35d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035f:  R_X86_64_64  _Py_Dealloc
// 367: 4c 89 e7                      movq    %r12, %rdi
// 36a: ff d0                         callq   *%rax
// 36c: 85 ed                         testl   %ebp, %ebp
// 36e: 0f 89 0f fe ff ff             jns     0x183 <_JIT_ENTRY+0x183>
// 374: eb 63                         jmp     0x3d9 <_JIT_ENTRY+0x3d9>
// 376: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000378:  R_X86_64_64  _Py_Dealloc
// 380: 4c 89 ef                      movq    %r13, %rdi
// 383: ff d0                         callq   *%rax
// 385: 49 8b 04 24                   movq    (%r12), %rax
// 389: 48 85 c0                      testq   %rax, %rax
// 38c: 0f 8f 88 fd ff ff             jg      0x11a <_JIT_ENTRY+0x11a>
// 392: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000394:  R_X86_64_64  .rodata.str1.1
// 39c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039e:  R_X86_64_64  _Py_NegativeRefcount
// 3a6: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 3ab: 4c 89 e2                      movq    %r12, %rdx
// 3ae: ff d0                         callq   *%rax
// 3b0: 49 8b 04 24                   movq    (%r12), %rax
// 3b4: 85 c0                         testl   %eax, %eax
// 3b6: 78 21                         js      0x3d9 <_JIT_ENTRY+0x3d9>
// 3b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3c2: ff d0                         callq   *%rax
// 3c4: 49 ff 0c 24                   decq    (%r12)
// 3c8: 75 0f                         jne     0x3d9 <_JIT_ENTRY+0x3d9>
// 3ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003cc:  R_X86_64_64  _Py_Dealloc
// 3d4: 4c 89 e7                      movq    %r12, %rdi
// 3d7: ff d0                         callq   *%rax
// 3d9: 49 83 c6 f0                   addq    $-0x10, %r14
// 3dd: 4c 89 f0                      movq    %r14, %rax
// 3e0: 48 29 d8                      subq    %rbx, %rax
// 3e3: 48 83 c0 b8                   addq    $-0x48, %rax
// 3e7: 48 c1 e8 03                   shrq    $0x3, %rax
// 3eb: 89 43 40                      movl    %eax, 0x40(%rbx)
// 3ee: 31 c0                         xorl    %eax, %eax
// 3f0: 48 83 c4 38                   addq    $0x38, %rsp
// 3f4: 5b                            popq    %rbx
// 3f5: 41 5c                         popq    %r12
// 3f7: 41 5d                         popq    %r13
// 3f9: 41 5e                         popq    %r14
// 3fb: 41 5f                         popq    %r15
// 3fd: 5d                            popq    %rbp
// 3fe: c3                            retq
// 3ff: 41 83 ff 02                   cmpl    $0x2, %r15d
// 403: 41 bc 01 00 00 00             movl    $0x1, %r12d
// 409: 45 0f 43 e7                   cmovael %r15d, %r12d
// 40d: 45 31 ff                      xorl    %r15d, %r15d
// 410: eb 1a                         jmp     0x42c <_JIT_ENTRY+0x42c>
// 412: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 420: 49 ff c7                      incq    %r15
// 423: 4d 39 fc                      cmpq    %r15, %r12
// 426: 0f 84 42 fe ff ff             je      0x26e <_JIT_ENTRY+0x26e>
// 42c: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 431: 49 8b 45 00                   movq    (%r13), %rax
// 435: 48 85 c0                      testq   %rax, %rax
// 438: 7e 06                         jle     0x440 <_JIT_ENTRY+0x440>
// 43a: 85 c0                         testl   %eax, %eax
// 43c: 78 e2                         js      0x420 <_JIT_ENTRY+0x420>
// 43e: eb 26                         jmp     0x466 <_JIT_ENTRY+0x466>
// 440: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000442:  R_X86_64_64  .rodata.str1.1
// 44a: be 26 0b 00 00                movl    $0xb26, %esi            # imm = 0xB26
// 44f: 4c 89 ea                      movq    %r13, %rdx
// 452: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000454:  R_X86_64_64  _Py_NegativeRefcount
// 45c: ff d0                         callq   *%rax
// 45e: 49 8b 45 00                   movq    (%r13), %rax
// 462: 85 c0                         testl   %eax, %eax
// 464: 78 ba                         js      0x420 <_JIT_ENTRY+0x420>
// 466: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000468:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 470: ff d0                         callq   *%rax
// 472: 49 ff 4d 00                   decq    (%r13)
// 476: 75 a8                         jne     0x420 <_JIT_ENTRY+0x420>
// 478: 4c 89 ef                      movq    %r13, %rdi
// 47b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000047d:  R_X86_64_64  _Py_Dealloc
// 485: ff d0                         callq   *%rax
// 487: eb 97                         jmp     0x420 <_JIT_ENTRY+0x420>
// 489: 
static const unsigned char _CHECK_EG_MATCHplus_CALL_BUILTIN_FAST_code_body[1162] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x69, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x78, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x02, 0x00, 0x00, 0xe9, 0xb2, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xe2, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x56, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x49, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x89, 0x4e, 0xf0, 0x49, 0x89, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x48, 0x63, 0xf8, 0x49, 0x8b, 0x04, 0xfe, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd6, 0x4c, 0x63, 0xce, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x7a, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xfa, 0x4b, 0x8b, 0x34, 0xce, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x56, 0x08, 0x0f, 0x85, 0x1a, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x46, 0x10, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x48, 0x89, 0x7c, 0x24, 0x28, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc4, 0x48, 0x89, 0x74, 0x24, 0x18, 0x48, 0x8b, 0x7e, 0x18, 0x44, 0x89, 0xfa, 0x48, 0x89, 0xee, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc4, 0x0f, 0x84, 0x91, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x28, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x30, 0x4c, 0x8b, 0x64, 0x24, 0x28, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xfc, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xe6, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xd0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x93, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x0f, 0xfe, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x88, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xff, 0x02, 0x41, 0xbc, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xe7, 0x45, 0x31, 0xff, 0xeb, 0x1a, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4d, 0x39, 0xfc, 0x0f, 0x84, 0x42, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x26, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97};
static const Hole _CHECK_EG_MATCHplus_CALL_BUILTIN_FAST_code_holes[35] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x30f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x344, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x35f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x378, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x394, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x39e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x442, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x454, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x468, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x47d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CALL_BUILTIN_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CALL_BUILTIN_FAST_data_holes[1];

// _CHECK_EG_MATCHplus_CALL_BUILTIN_FAST_WITH_KEYWORDS
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CALL_BUILTIN_FAST_WITH_KEYWORDS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3c                         js      0x71 <_JIT_ENTRY+0x71>
// 35: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 3d: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 50: 48 89 e2                      movq    %rsp, %rdx
// 53: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 58: 4c 89 ef                      movq    %r13, %rdi
// 5b: 4c 89 e6                      movq    %r12, %rsi
// 5e: ff d0                         callq   *%rax
// 60: 89 c5                         movl    %eax, %ebp
// 62: 49 8b 45 00                   movq    (%r13), %rax
// 66: 48 85 c0                      testq   %rax, %rax
// 69: 7e 18                         jle     0x83 <_JIT_ENTRY+0x83>
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 79 3a                         jns     0xa9 <_JIT_ENTRY+0xa9>
// 6f: eb 4a                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 71: 49 8b 45 00                   movq    (%r13), %rax
// 75: 48 85 c0                      testq   %rax, %rax
// 78: 7e 57                         jle     0xd1 <_JIT_ENTRY+0xd1>
// 7a: 85 c0                         testl   %eax, %eax
// 7c: 79 79                         jns     0xf7 <_JIT_ENTRY+0xf7>
// 7e: e9 8a 00 00 00                jmp     0x10d <_JIT_ENTRY+0x10d>
// 83: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000085:  R_X86_64_64  .rodata.str1.1
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_NegativeRefcount
// 97: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9c: 4c 89 ea                      movq    %r13, %rdx
// 9f: ff d0                         callq   *%rax
// a1: 49 8b 45 00                   movq    (%r13), %rax
// a5: 85 c0                         testl   %eax, %eax
// a7: 78 12                         js      0xbb <_JIT_ENTRY+0xbb>
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b3: ff d0                         callq   *%rax
// b5: 49 ff 4d 00                   decq    (%r13)
// b9: 74 6c                         je      0x127 <_JIT_ENTRY+0x127>
// bb: 49 8b 04 24                   movq    (%r12), %rax
// bf: 48 85 c0                      testq   %rax, %rax
// c2: 7e 7b                         jle     0x13f <_JIT_ENTRY+0x13f>
// c4: 85 c0                         testl   %eax, %eax
// c6: 0f 89 99 00 00 00             jns     0x165 <_JIT_ENTRY+0x165>
// cc: e9 aa 00 00 00                jmp     0x17b <_JIT_ENTRY+0x17b>
// d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d3:  R_X86_64_64  .rodata.str1.1
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_NegativeRefcount
// e5: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ea: 4c 89 ea                      movq    %r13, %rdx
// ed: ff d0                         callq   *%rax
// ef: 49 8b 45 00                   movq    (%r13), %rax
// f3: 85 c0                         testl   %eax, %eax
// f5: 78 16                         js      0x10d <_JIT_ENTRY+0x10d>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 101: ff d0                         callq   *%rax
// 103: 49 ff 4d 00                   decq    (%r13)
// 107: 0f 84 6b 02 00 00             je      0x378 <_JIT_ENTRY+0x378>
// 10d: 49 8b 04 24                   movq    (%r12), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 0f 8e 7a 02 00 00             jle     0x394 <_JIT_ENTRY+0x394>
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 0f 89 98 02 00 00             jns     0x3ba <_JIT_ENTRY+0x3ba>
// 122: e9 b4 02 00 00                jmp     0x3db <_JIT_ENTRY+0x3db>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_Dealloc
// 131: 4c 89 ef                      movq    %r13, %rdi
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 85                         jg      0xc4 <_JIT_ENTRY+0xc4>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 16                         js      0x17b <_JIT_ENTRY+0x17b>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0c 24                   decq    (%r12)
// 175: 0f 84 e4 01 00 00             je      0x35f <_JIT_ENTRY+0x35f>
// 17b: 85 ed                         testl   %ebp, %ebp
// 17d: 0f 88 58 02 00 00             js      0x3db <_JIT_ENTRY+0x3db>
// 183: 48 8b 3c 24                   movq    (%rsp), %rdi
// 187: 48 85 ff                      testq   %rdi, %rdi
// 18a: 0f 84 4b 02 00 00             je      0x3db <_JIT_ENTRY+0x3db>
// 190: 4c 89 7c 24 30                movq    %r15, 0x30(%rsp)
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NoneStruct
// 19f: 48 39 c7                      cmpq    %rax, %rdi
// 1a2: 74 10                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  PyErr_SetHandledException
// 1ae: ff d0                         callq   *%rax
// 1b0: 48 8b 04 24                   movq    (%rsp), %rax
// 1b4: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1b9: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1bd: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 1c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c3:  R_X86_64_64  _JIT_OPARG
// 1cb: 0f b7 d1                      movzwl  %cx, %edx
// 1ce: 89 d0                         movl    %edx, %eax
// 1d0: f7 d0                         notl    %eax
// 1d2: 48 63 f8                      movslq  %eax, %rdi
// 1d5: 49 8b 04 fe                   movq    (%r14,%rdi,8), %rax
// 1d9: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 1de: 29 d6                         subl    %edx, %esi
// 1e0: 4c 63 ce                      movslq  %esi, %r9
// 1e3: 0f b7 c9                      movzwl  %cx, %ecx
// 1e6: 48 89 ce                      movq    %rcx, %rsi
// 1e9: 48 f7 de                      negq    %rsi
// 1ec: 44 8d 7a 01                   leal    0x1(%rdx), %r15d
// 1f0: 48 85 c0                      testq   %rax, %rax
// 1f3: 48 f7 d1                      notq    %rcx
// 1f6: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 1fa: 44 0f 44 fa                   cmovel  %edx, %r15d
// 1fe: 4b 8b 34 ce                   movq    (%r14,%r9,8), %rsi
// 202: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000204:  R_X86_64_64  PyCFunction_Type
// 20c: 48 39 56 08                   cmpq    %rdx, 0x8(%rsi)
// 210: 0f 85 1c 01 00 00             jne     0x332 <_JIT_ENTRY+0x332>
// 216: 4c 8b 46 10                   movq    0x10(%rsi), %r8
// 21a: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 222: 0f 85 0a 01 00 00             jne     0x332 <_JIT_ENTRY+0x332>
// 228: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 22d: 48 89 7c 24 28                movq    %rdi, 0x28(%rsp)
// 232: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 236: 48 85 c0                      testq   %rax, %rax
// 239: 41 0f 94 c4                   sete    %r12b
// 23d: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 242: 48 8b 7e 18                   movq    0x18(%rsi), %rdi
// 246: 44 89 fa                      movl    %r15d, %edx
// 249: 48 89 ee                      movq    %rbp, %rsi
// 24c: 31 c9                         xorl    %ecx, %ecx
// 24e: 41 ff 50 08                   callq   *0x8(%r8)
// 252: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _JIT_OPARG
// 261: 66 85 c0                      testw   %ax, %ax
// 264: 0f 94 c0                      sete    %al
// 267: 41 84 c4                      testb   %al, %r12b
// 26a: 0f 84 91 01 00 00             je      0x401 <_JIT_ENTRY+0x401>
// 270: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 275: 49 8b 45 00                   movq    (%r13), %rax
// 279: 48 85 c0                      testq   %rax, %rax
// 27c: 7f 22                         jg      0x2a0 <_JIT_ENTRY+0x2a0>
// 27e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000280:  R_X86_64_64  .rodata.str1.1
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _Py_NegativeRefcount
// 292: be 51 0b 00 00                movl    $0xb51, %esi            # imm = 0xB51
// 297: 4c 89 ea                      movq    %r13, %rdx
// 29a: ff d0                         callq   *%rax
// 29c: 49 8b 45 00                   movq    (%r13), %rax
// 2a0: 85 c0                         testl   %eax, %eax
// 2a2: 4c 8b 7c 24 30                movq    0x30(%rsp), %r15
// 2a7: 4c 8b 64 24 28                movq    0x28(%rsp), %r12
// 2ac: 78 21                         js      0x2cf <_JIT_ENTRY+0x2cf>
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b8: ff d0                         callq   *%rax
// 2ba: 49 ff 4d 00                   decq    (%r13)
// 2be: 75 0f                         jne     0x2cf <_JIT_ENTRY+0x2cf>
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  _Py_Dealloc
// 2ca: 4c 89 ef                      movq    %r13, %rdi
// 2cd: ff d0                         callq   *%rax
// 2cf: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 2d4: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 2d8: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 2dd: 48 85 c9                      testq   %rcx, %rcx
// 2e0: 0f 84 fc 00 00 00             je      0x3e2 <_JIT_ENTRY+0x3e2>
// 2e6: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 2ea: 48 89 08                      movq    %rcx, (%rax)
// 2ed: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2f1: 48 8b 00                      movq    (%rax), %rax
// 2f4: 84 c0                         testb   %al, %al
// 2f6: 74 17                         je      0x30f <_JIT_ENTRY+0x30f>
// 2f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fa:  R_X86_64_64  _Py_HandlePending
// 302: 4c 89 ff                      movq    %r15, %rdi
// 305: ff d0                         callq   *%rax
// 307: 85 c0                         testl   %eax, %eax
// 309: 0f 85 d0 00 00 00             jne     0x3df <_JIT_ENTRY+0x3df>
// 30f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000311:  R_X86_64_64  _JIT_CONTINUE
// 319: 48 89 df                      movq    %rbx, %rdi
// 31c: 4c 89 f6                      movq    %r14, %rsi
// 31f: 4c 89 fa                      movq    %r15, %rdx
// 322: 48 83 c4 38                   addq    $0x38, %rsp
// 326: 5b                            popq    %rbx
// 327: 41 5c                         popq    %r12
// 329: 41 5d                         popq    %r13
// 32b: 41 5e                         popq    %r14
// 32d: 41 5f                         popq    %r15
// 32f: 5d                            popq    %rbp
// 330: ff e0                         jmpq    *%rax
// 332: 49 29 de                      subq    %rbx, %r14
// 335: 49 83 c6 b8                   addq    $-0x48, %r14
// 339: 49 c1 ee 03                   shrq    $0x3, %r14
// 33d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 341: 48 8b 03                      movq    (%rbx), %rax
// 344: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000346:  R_X86_64_64  _JIT_TARGET
// 34e: 89 c9                         movl    %ecx, %ecx
// 350: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 354: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 35a: e9 93 00 00 00                jmp     0x3f2 <_JIT_ENTRY+0x3f2>
// 35f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000361:  R_X86_64_64  _Py_Dealloc
// 369: 4c 89 e7                      movq    %r12, %rdi
// 36c: ff d0                         callq   *%rax
// 36e: 85 ed                         testl   %ebp, %ebp
// 370: 0f 89 0d fe ff ff             jns     0x183 <_JIT_ENTRY+0x183>
// 376: eb 63                         jmp     0x3db <_JIT_ENTRY+0x3db>
// 378: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037a:  R_X86_64_64  _Py_Dealloc
// 382: 4c 89 ef                      movq    %r13, %rdi
// 385: ff d0                         callq   *%rax
// 387: 49 8b 04 24                   movq    (%r12), %rax
// 38b: 48 85 c0                      testq   %rax, %rax
// 38e: 0f 8f 86 fd ff ff             jg      0x11a <_JIT_ENTRY+0x11a>
// 394: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000396:  R_X86_64_64  .rodata.str1.1
// 39e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a0:  R_X86_64_64  _Py_NegativeRefcount
// 3a8: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 3ad: 4c 89 e2                      movq    %r12, %rdx
// 3b0: ff d0                         callq   *%rax
// 3b2: 49 8b 04 24                   movq    (%r12), %rax
// 3b6: 85 c0                         testl   %eax, %eax
// 3b8: 78 21                         js      0x3db <_JIT_ENTRY+0x3db>
// 3ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3c4: ff d0                         callq   *%rax
// 3c6: 49 ff 0c 24                   decq    (%r12)
// 3ca: 75 0f                         jne     0x3db <_JIT_ENTRY+0x3db>
// 3cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ce:  R_X86_64_64  _Py_Dealloc
// 3d6: 4c 89 e7                      movq    %r12, %rdi
// 3d9: ff d0                         callq   *%rax
// 3db: 49 83 c6 f0                   addq    $-0x10, %r14
// 3df: 4c 89 f0                      movq    %r14, %rax
// 3e2: 48 29 d8                      subq    %rbx, %rax
// 3e5: 48 83 c0 b8                   addq    $-0x48, %rax
// 3e9: 48 c1 e8 03                   shrq    $0x3, %rax
// 3ed: 89 43 40                      movl    %eax, 0x40(%rbx)
// 3f0: 31 c0                         xorl    %eax, %eax
// 3f2: 48 83 c4 38                   addq    $0x38, %rsp
// 3f6: 5b                            popq    %rbx
// 3f7: 41 5c                         popq    %r12
// 3f9: 41 5d                         popq    %r13
// 3fb: 41 5e                         popq    %r14
// 3fd: 41 5f                         popq    %r15
// 3ff: 5d                            popq    %rbp
// 400: c3                            retq
// 401: 41 83 ff 02                   cmpl    $0x2, %r15d
// 405: 41 bc 01 00 00 00             movl    $0x1, %r12d
// 40b: 45 0f 43 e7                   cmovael %r15d, %r12d
// 40f: 45 31 ff                      xorl    %r15d, %r15d
// 412: eb 18                         jmp     0x42c <_JIT_ENTRY+0x42c>
// 414: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 420: 49 ff c7                      incq    %r15
// 423: 4d 39 fc                      cmpq    %r15, %r12
// 426: 0f 84 44 fe ff ff             je      0x270 <_JIT_ENTRY+0x270>
// 42c: 4e 8b 6c fd 00                movq    (%rbp,%r15,8), %r13
// 431: 49 8b 45 00                   movq    (%r13), %rax
// 435: 48 85 c0                      testq   %rax, %rax
// 438: 7e 06                         jle     0x440 <_JIT_ENTRY+0x440>
// 43a: 85 c0                         testl   %eax, %eax
// 43c: 78 e2                         js      0x420 <_JIT_ENTRY+0x420>
// 43e: eb 26                         jmp     0x466 <_JIT_ENTRY+0x466>
// 440: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000442:  R_X86_64_64  .rodata.str1.1
// 44a: be 4f 0b 00 00                movl    $0xb4f, %esi            # imm = 0xB4F
// 44f: 4c 89 ea                      movq    %r13, %rdx
// 452: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000454:  R_X86_64_64  _Py_NegativeRefcount
// 45c: ff d0                         callq   *%rax
// 45e: 49 8b 45 00                   movq    (%r13), %rax
// 462: 85 c0                         testl   %eax, %eax
// 464: 78 ba                         js      0x420 <_JIT_ENTRY+0x420>
// 466: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000468:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 470: ff d0                         callq   *%rax
// 472: 49 ff 4d 00                   decq    (%r13)
// 476: 75 a8                         jne     0x420 <_JIT_ENTRY+0x420>
// 478: 4c 89 ef                      movq    %r13, %rdi
// 47b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000047d:  R_X86_64_64  _Py_Dealloc
// 485: ff d0                         callq   *%rax
// 487: eb 97                         jmp     0x420 <_JIT_ENTRY+0x420>
// 489: 
static const unsigned char _CHECK_EG_MATCHplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_body[1162] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x6b, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x7a, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x98, 0x02, 0x00, 0x00, 0xe9, 0xb4, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xe4, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x58, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x4b, 0x02, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x89, 0x4e, 0xf0, 0x49, 0x89, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x48, 0x63, 0xf8, 0x49, 0x8b, 0x04, 0xfe, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd6, 0x4c, 0x63, 0xce, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x7a, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xfa, 0x4b, 0x8b, 0x34, 0xce, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x56, 0x08, 0x0f, 0x85, 0x1c, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x46, 0x10, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x0a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x48, 0x89, 0x7c, 0x24, 0x28, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc4, 0x48, 0x89, 0x74, 0x24, 0x18, 0x48, 0x8b, 0x7e, 0x18, 0x44, 0x89, 0xfa, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc4, 0x0f, 0x84, 0x91, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x51, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x30, 0x4c, 0x8b, 0x64, 0x24, 0x28, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xfc, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xe6, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xd0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x93, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x0d, 0xfe, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x86, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xff, 0x02, 0x41, 0xbc, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xe7, 0x45, 0x31, 0xff, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc7, 0x4d, 0x39, 0xfc, 0x0f, 0x84, 0x44, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xfd, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4f, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97};
static const Hole _CHECK_EG_MATCHplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_holes[35] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x346, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x361, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x37a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x396, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x442, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x454, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x468, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x47d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_holes[1];

// _CHECK_EG_MATCHplus_CALL_BUILTIN_O
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CALL_BUILTIN_O.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 9c 01 00 00             je      0x2ac <_JIT_ENTRY+0x2ac>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e ab 01 00 00             jle     0x2c8 <_JIT_ENTRY+0x2c8>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 c9 01 00 00             jns     0x2ee <_JIT_ENTRY+0x2ee>
// 125: e9 e5 01 00 00                jmp     0x30f <_JIT_ENTRY+0x30f>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 15 01 00 00             je      0x293 <_JIT_ENTRY+0x293>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 89 01 00 00             js      0x30f <_JIT_ENTRY+0x30f>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 7b 01 00 00             je      0x30f <_JIT_ENTRY+0x30f>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 48 39 c7                      cmpq    %rax, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1b4: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b9: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1bd: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 1c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c3:  R_X86_64_64  _JIT_OPARG
// 1cb: 0f b7 c1                      movzwl  %cx, %eax
// 1ce: 89 c2                         movl    %eax, %edx
// 1d0: f7 d2                         notl    %edx
// 1d2: 4c 63 ea                      movslq  %edx, %r13
// 1d5: 0f b7 e9                      movzwl  %cx, %ebp
// 1d8: 48 89 e9                      movq    %rbp, %rcx
// 1db: 48 f7 d9                      negq    %rcx
// 1de: 31 d2                         xorl    %edx, %edx
// 1e0: 66 85 ed                      testw   %bp, %bp
// 1e3: 0f 94 c2                      sete    %dl
// 1e6: 31 f6                         xorl    %esi, %esi
// 1e8: 66 83 fd 01                   cmpw    $0x1, %bp
// 1ec: 40 0f 94 c6                   sete    %sil
// 1f0: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 1f5: 48 f7 d5                      notq    %rbp
// 1f8: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 1fc: 0f 44 d6                      cmovel  %esi, %edx
// 1ff: 80 fa 01                      cmpb    $0x1, %dl
// 202: 75 62                         jne     0x266 <_JIT_ENTRY+0x266>
// 204: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 209: 29 c1                         subl    %eax, %ecx
// 20b: 48 63 c9                      movslq  %ecx, %rcx
// 20e: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  PyCFunction_Type
// 21c: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 221: 75 43                         jne     0x266 <_JIT_ENTRY+0x266>
// 223: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 228: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 22c: 75 38                         jne     0x266 <_JIT_ENTRY+0x266>
// 22e: 48 89 4c 24 20                movq    %rcx, 0x20(%rsp)
// 233: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 237: 41 8b 4f 2c                   movl    0x2c(%r15), %ecx
// 23b: 8d 51 ff                      leal    -0x1(%rcx), %edx
// 23e: 41 89 57 2c                   movl    %edx, 0x2c(%r15)
// 242: 85 c9                         testl   %ecx, %ecx
// 244: 0f 8e e9 00 00 00             jle     0x333 <_JIT_ENTRY+0x333>
// 24a: 49 8b 0c ee                   movq    (%r14,%rbp,8), %rcx
// 24e: 48 89 0c 24                   movq    %rcx, (%rsp)
// 252: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 256: 0f 85 13 01 00 00             jne     0x36f <_JIT_ENTRY+0x36f>
// 25c: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// 261: e9 0b 01 00 00                jmp     0x371 <_JIT_ENTRY+0x371>
// 266: 49 29 de                      subq    %rbx, %r14
// 269: 49 83 c6 b8                   addq    $-0x48, %r14
// 26d: 49 c1 ee 03                   shrq    $0x3, %r14
// 271: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 275: 48 8b 03                      movq    (%rbx), %rax
// 278: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027a:  R_X86_64_64  _JIT_TARGET
// 282: 89 c9                         movl    %ecx, %ecx
// 284: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 288: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 28e: e9 91 00 00 00                jmp     0x324 <_JIT_ENTRY+0x324>
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  _Py_Dealloc
// 29d: 4c 89 e7                      movq    %r12, %rdi
// 2a0: ff d0                         callq   *%rax
// 2a2: 85 ed                         testl   %ebp, %ebp
// 2a4: 0f 89 dc fe ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 2aa: eb 63                         jmp     0x30f <_JIT_ENTRY+0x30f>
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  _Py_Dealloc
// 2b6: 4c 89 ef                      movq    %r13, %rdi
// 2b9: ff d0                         callq   *%rax
// 2bb: 49 8b 04 24                   movq    (%r12), %rax
// 2bf: 48 85 c0                      testq   %rax, %rax
// 2c2: 0f 8f 55 fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 2c8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ca:  R_X86_64_64  .rodata.str1.1
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_NegativeRefcount
// 2dc: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2e1: 4c 89 e2                      movq    %r12, %rdx
// 2e4: ff d0                         callq   *%rax
// 2e6: 49 8b 04 24                   movq    (%r12), %rax
// 2ea: 85 c0                         testl   %eax, %eax
// 2ec: 78 21                         js      0x30f <_JIT_ENTRY+0x30f>
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f8: ff d0                         callq   *%rax
// 2fa: 49 ff 0c 24                   decq    (%r12)
// 2fe: 75 0f                         jne     0x30f <_JIT_ENTRY+0x30f>
// 300: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000302:  R_X86_64_64  _Py_Dealloc
// 30a: 4c 89 e7                      movq    %r12, %rdi
// 30d: ff d0                         callq   *%rax
// 30f: 49 83 c6 f0                   addq    $-0x10, %r14
// 313: 49 29 de                      subq    %rbx, %r14
// 316: 49 83 c6 b8                   addq    $-0x48, %r14
// 31a: 49 c1 ee 03                   shrq    $0x3, %r14
// 31e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 322: 31 c0                         xorl    %eax, %eax
// 324: 48 83 c4 28                   addq    $0x28, %rsp
// 328: 5b                            popq    %rbx
// 329: 41 5c                         popq    %r12
// 32b: 41 5d                         popq    %r13
// 32d: 41 5e                         popq    %r14
// 32f: 41 5f                         popq    %r15
// 331: 5d                            popq    %rbp
// 332: c3                            retq
// 333: 4c 89 04 24                   movq    %r8, (%rsp)
// 337: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000339:  R_X86_64_64  .rodata.str1.1+0x39
// 341: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000343:  R_X86_64_64  _Py_CheckRecursiveCall
// 34b: 4c 89 ff                      movq    %r15, %rdi
// 34e: ff d0                         callq   *%rax
// 350: 85 c0                         testl   %eax, %eax
// 352: 75 bf                         jne     0x313 <_JIT_ENTRY+0x313>
// 354: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 359: 4c 8b 04 24                   movq    (%rsp), %r8
// 35d: 49 8b 0c ee                   movq    (%r14,%rbp,8), %rcx
// 361: 48 89 0c 24                   movq    %rcx, (%rsp)
// 365: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 369: 0f 84 ed fe ff ff             je      0x25c <_JIT_ENTRY+0x25c>
// 36f: 31 ff                         xorl    %edi, %edi
// 371: 48 8b 2c 24                   movq    (%rsp), %rbp
// 375: 48 89 ee                      movq    %rbp, %rsi
// 378: 41 ff d0                      callq   *%r8
// 37b: 41 ff 47 2c                   incl    0x2c(%r15)
// 37f: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 384: 48 8b 45 00                   movq    (%rbp), %rax
// 388: 48 85 c0                      testq   %rax, %rax
// 38b: 7f 26                         jg      0x3b3 <_JIT_ENTRY+0x3b3>
// 38d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000038f:  R_X86_64_64  .rodata.str1.1
// 397: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000399:  R_X86_64_64  _Py_NegativeRefcount
// 3a1: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 3a6: 48 8b 2c 24                   movq    (%rsp), %rbp
// 3aa: 48 89 ea                      movq    %rbp, %rdx
// 3ad: ff d0                         callq   *%rax
// 3af: 48 8b 45 00                   movq    (%rbp), %rax
// 3b3: 85 c0                         testl   %eax, %eax
// 3b5: 78 25                         js      0x3dc <_JIT_ENTRY+0x3dc>
// 3b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3c1: ff d0                         callq   *%rax
// 3c3: 48 8b 04 24                   movq    (%rsp), %rax
// 3c7: 48 ff 08                      decq    (%rax)
// 3ca: 75 10                         jne     0x3dc <_JIT_ENTRY+0x3dc>
// 3cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ce:  R_X86_64_64  _Py_Dealloc
// 3d6: 48 8b 3c 24                   movq    (%rsp), %rdi
// 3da: ff d0                         callq   *%rax
// 3dc: 49 8b 04 24                   movq    (%r12), %rax
// 3e0: 48 85 c0                      testq   %rax, %rax
// 3e3: 7f 22                         jg      0x407 <_JIT_ENTRY+0x407>
// 3e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003e7:  R_X86_64_64  .rodata.str1.1
// 3ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f1:  R_X86_64_64  _Py_NegativeRefcount
// 3f9: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 3fe: 4c 89 e2                      movq    %r12, %rdx
// 401: ff d0                         callq   *%rax
// 403: 49 8b 04 24                   movq    (%r12), %rax
// 407: 85 c0                         testl   %eax, %eax
// 409: 78 21                         js      0x42c <_JIT_ENTRY+0x42c>
// 40b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000040d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 415: ff d0                         callq   *%rax
// 417: 49 ff 0c 24                   decq    (%r12)
// 41b: 75 0f                         jne     0x42c <_JIT_ENTRY+0x42c>
// 41d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000041f:  R_X86_64_64  _Py_Dealloc
// 427: 4c 89 e7                      movq    %r12, %rdi
// 42a: ff d0                         callq   *%rax
// 42c: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 431: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 435: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 43a: 48 85 c9                      testq   %rcx, %rcx
// 43d: 74 4c                         je      0x48b <_JIT_ENTRY+0x48b>
// 43f: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 443: 48 89 08                      movq    %rcx, (%rax)
// 446: 49 8b 47 10                   movq    0x10(%r15), %rax
// 44a: 48 8b 00                      movq    (%rax), %rax
// 44d: 84 c0                         testb   %al, %al
// 44f: 74 17                         je      0x468 <_JIT_ENTRY+0x468>
// 451: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000453:  R_X86_64_64  _Py_HandlePending
// 45b: 4c 89 ff                      movq    %r15, %rdi
// 45e: ff d0                         callq   *%rax
// 460: 85 c0                         testl   %eax, %eax
// 462: 0f 85 ab fe ff ff             jne     0x313 <_JIT_ENTRY+0x313>
// 468: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000046a:  R_X86_64_64  _JIT_CONTINUE
// 472: 48 89 df                      movq    %rbx, %rdi
// 475: 4c 89 f6                      movq    %r14, %rsi
// 478: 4c 89 fa                      movq    %r15, %rdx
// 47b: 48 83 c4 28                   addq    $0x28, %rsp
// 47f: 5b                            popq    %rbx
// 480: 41 5c                         popq    %r12
// 482: 41 5d                         popq    %r13
// 484: 41 5e                         popq    %r14
// 486: 41 5f                         popq    %r15
// 488: 5d                            popq    %rbp
// 489: ff e0                         jmpq    *%rax
// 48b: 49 89 c6                      movq    %rax, %r14
// 48e: e9 80 fe ff ff                jmp     0x313 <_JIT_ENTRY+0x313>
// 493: 
static const unsigned char _CHECK_EG_MATCHplus_CALL_BUILTIN_O_code_body[1172] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x9c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xab, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xc9, 0x01, 0x00, 0x00, 0xe9, 0xe5, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x15, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x89, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x7b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x89, 0x4e, 0xf0, 0x49, 0x89, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x31, 0xd2, 0x66, 0x85, 0xed, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xfd, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x0f, 0x44, 0xd6, 0x80, 0xfa, 0x01, 0x75, 0x62, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x43, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x38, 0x48, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x8b, 0x40, 0x08, 0x41, 0x8b, 0x4f, 0x2c, 0x8d, 0x51, 0xff, 0x41, 0x89, 0x57, 0x2c, 0x85, 0xc9, 0x0f, 0x8e, 0xe9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x0c, 0xee, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x85, 0x13, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xe9, 0x0b, 0x01, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x91, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0xdc, 0xfe, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x55, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x04, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0xbf, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x0c, 0xee, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x0f, 0x84, 0xed, 0xfe, 0xff, 0xff, 0x31, 0xff, 0x48, 0x8b, 0x2c, 0x24, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x41, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x2c, 0x24, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x08, 0x75, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x4c, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xab, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xe9, 0x80, 0xfe, 0xff, 0xff};
static const Hole _CHECK_EG_MATCHplus_CALL_BUILTIN_O_code_holes[36] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x339, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x343, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x38f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x399, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3e7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x40d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x41f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x453, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x46a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CHECK_EG_MATCHplus_CALL_BUILTIN_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CHECK_EG_MATCHplus_CALL_BUILTIN_O_data_holes[1];

// _CHECK_EG_MATCHplus_CALL_INTRINSIC_1
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CALL_INTRINSIC_1.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 63                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 81 00 00 00             jns     0x106 <_JIT_ENTRY+0x106>
// 85: e9 9d 00 00 00                jmp     0x127 <_JIT_ENTRY+0x127>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c7 00 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// c6: 49 8b 04 24                   movq    (%r12), %rax
// ca: 48 85 c0                      testq   %rax, %rax
// cd: 0f 8e d6 00 00 00             jle     0x1a9 <_JIT_ENTRY+0x1a9>
// d3: 85 c0                         testl   %eax, %eax
// d5: 0f 89 f4 00 00 00             jns     0x1cf <_JIT_ENTRY+0x1cf>
// db: e9 05 01 00 00                jmp     0x1e5 <_JIT_ENTRY+0x1e5>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f9: 4c 89 ea                      movq    %r13, %rdx
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 21                         js      0x127 <_JIT_ENTRY+0x127>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 4d 00                   decq    (%r13)
// 116: 75 0f                         jne     0x127 <_JIT_ENTRY+0x127>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_Dealloc
// 122: 4c 89 ef                      movq    %r13, %rdi
// 125: ff d0                         callq   *%rax
// 127: 49 8b 04 24                   movq    (%r12), %rax
// 12b: 48 85 c0                      testq   %rax, %rax
// 12e: 7e 09                         jle     0x139 <_JIT_ENTRY+0x139>
// 130: 85 c0                         testl   %eax, %eax
// 132: 79 2f                         jns     0x163 <_JIT_ENTRY+0x163>
// 134: e9 9a 01 00 00                jmp     0x2d3 <_JIT_ENTRY+0x2d3>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_NegativeRefcount
// 14d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 152: 4c 89 e2                      movq    %r12, %rdx
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 70 01 00 00             js      0x2d3 <_JIT_ENTRY+0x2d3>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 5a 01 00 00             jne     0x2d3 <_JIT_ENTRY+0x2d3>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: 4c 89 e7                      movq    %r12, %rdi
// 186: ff d0                         callq   *%rax
// 188: e9 46 01 00 00                jmp     0x2d3 <_JIT_ENTRY+0x2d3>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: 4c 89 ef                      movq    %r13, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 49 8b 04 24                   movq    (%r12), %rax
// 1a0: 48 85 c0                      testq   %rax, %rax
// 1a3: 0f 8f 2a ff ff ff             jg      0xd3 <_JIT_ENTRY+0xd3>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 49 8b 04 24                   movq    (%r12), %rax
// 1cb: 85 c0                         testl   %eax, %eax
// 1cd: 78 16                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 49 ff 0c 24                   decq    (%r12)
// 1df: 0f 84 d7 00 00 00             je      0x2bc <_JIT_ENTRY+0x2bc>
// 1e5: 85 ed                         testl   %ebp, %ebp
// 1e7: 0f 88 e6 00 00 00             js      0x2d3 <_JIT_ENTRY+0x2d3>
// 1ed: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1f2: 48 85 ff                      testq   %rdi, %rdi
// 1f5: 0f 84 d8 00 00 00             je      0x2d3 <_JIT_ENTRY+0x2d3>
// 1fb: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001fd:  R_X86_64_64  _Py_NoneStruct
// 205: 4c 39 e7                      cmpq    %r12, %rdi
// 208: 74 11                         je      0x21b <_JIT_ENTRY+0x21b>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyErr_SetHandledException
// 214: ff d0                         callq   *%rax
// 216: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 21b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 220: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 224: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _JIT_OPARG
// 232: 0f b7 c8                      movzwl  %ax, %ecx
// 235: 48 c1 e1 04                   shlq    $0x4, %rcx
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _PyIntrinsics_UnaryFunctions
// 243: 4c 89 ff                      movq    %r15, %rdi
// 246: 4c 89 e6                      movq    %r12, %rsi
// 249: ff 14 01                      callq   *(%rcx,%rax)
// 24c: 49 89 c5                      movq    %rax, %r13
// 24f: 49 8b 04 24                   movq    (%r12), %rax
// 253: 48 85 c0                      testq   %rax, %rax
// 256: 7f 22                         jg      0x27a <_JIT_ENTRY+0x27a>
// 258: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025a:  R_X86_64_64  .rodata.str1.1
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_NegativeRefcount
// 26c: be 7e 02 00 00                movl    $0x27e, %esi            # imm = 0x27E
// 271: 4c 89 e2                      movq    %r12, %rdx
// 274: ff d0                         callq   *%rax
// 276: 49 8b 04 24                   movq    (%r12), %rax
// 27a: 85 c0                         testl   %eax, %eax
// 27c: 78 12                         js      0x290 <_JIT_ENTRY+0x290>
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 288: ff d0                         callq   *%rax
// 28a: 49 ff 0c 24                   decq    (%r12)
// 28e: 74 67                         je      0x2f7 <_JIT_ENTRY+0x2f7>
// 290: 4d 85 ed                      testq   %r13, %r13
// 293: 74 42                         je      0x2d7 <_JIT_ENTRY+0x2d7>
// 295: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _JIT_CONTINUE
// 2a3: 4c 89 f7                      movq    %r14, %rdi
// 2a6: 48 89 de                      movq    %rbx, %rsi
// 2a9: 4c 89 fa                      movq    %r15, %rdx
// 2ac: 48 83 c4 18                   addq    $0x18, %rsp
// 2b0: 5b                            popq    %rbx
// 2b1: 41 5c                         popq    %r12
// 2b3: 41 5d                         popq    %r13
// 2b5: 41 5e                         popq    %r14
// 2b7: 41 5f                         popq    %r15
// 2b9: 5d                            popq    %rbp
// 2ba: ff e0                         jmpq    *%rax
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  _Py_Dealloc
// 2c6: 4c 89 e7                      movq    %r12, %rdi
// 2c9: ff d0                         callq   *%rax
// 2cb: 85 ed                         testl   %ebp, %ebp
// 2cd: 0f 89 1a ff ff ff             jns     0x1ed <_JIT_ENTRY+0x1ed>
// 2d3: 48 83 c3 f8                   addq    $-0x8, %rbx
// 2d7: 4c 29 f3                      subq    %r14, %rbx
// 2da: 48 83 c3 b0                   addq    $-0x50, %rbx
// 2de: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2e2: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2e6: 31 c0                         xorl    %eax, %eax
// 2e8: 48 83 c4 18                   addq    $0x18, %rsp
// 2ec: 5b                            popq    %rbx
// 2ed: 41 5c                         popq    %r12
// 2ef: 41 5d                         popq    %r13
// 2f1: 41 5e                         popq    %r14
// 2f3: 41 5f                         popq    %r15
// 2f5: 5d                            popq    %rbp
// 2f6: c3                            retq
// 2f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f9:  R_X86_64_64  _Py_Dealloc
// 301: 4c 89 e7                      movq    %r12, %rdi
// 304: ff d0                         callq   *%rax
// 306: 4d 85 ed                      testq   %r13, %r13
// 309: 75 8a                         jne     0x295 <_JIT_ENTRY+0x295>
// 30b: eb ca                         jmp     0x2d7 <_JIT_ENTRY+0x2d7>
// 30d: 
static const unsigned char _CHECK_EG_MATCHplus_CALL_INTRINSIC_1_code_body[782] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0x9a, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x70, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x5a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x46, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xe6, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xd8, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0x14, 0x01, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x67, 0x4d, 0x85, 0xed, 0x74, 0x42, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x1a, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0x8a, 0xeb, 0xca};
static const Hole _CHECK_EG_MATCHplus_CALL_INTRINSIC_1_code_holes[28] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_UnaryFunctions, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CALL_INTRINSIC_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CALL_INTRINSIC_1_data_holes[1];

// _CHECK_EG_MATCHplus_CALL_INTRINSIC_2
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CALL_INTRINSIC_2.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 8d 5e f0                   leaq    -0x10(%rsi), %rbx
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 e6                      movq    %r12, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 1c                         jle     0x90 <_JIT_ENTRY+0x90>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3e                         jns     0xb6 <_JIT_ENTRY+0xb6>
// 78: eb 52                         jmp     0xcc <_JIT_ENTRY+0xcc>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 63                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 83: 85 c0                         testl   %eax, %eax
// 85: 0f 89 81 00 00 00             jns     0x10c <_JIT_ENTRY+0x10c>
// 8b: e9 9d 00 00 00                jmp     0x12d <_JIT_ENTRY+0x12d>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_NegativeRefcount
// a4: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a9: 4c 89 ea                      movq    %r13, %rdx
// ac: ff d0                         callq   *%rax
// ae: 49 8b 45 00                   movq    (%r13), %rax
// b2: 85 c0                         testl   %eax, %eax
// b4: 78 16                         js      0xcc <_JIT_ENTRY+0xcc>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c0: ff d0                         callq   *%rax
// c2: 49 ff 4d 00                   decq    (%r13)
// c6: 0f 84 c7 00 00 00             je      0x193 <_JIT_ENTRY+0x193>
// cc: 49 8b 04 24                   movq    (%r12), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 0f 8e d6 00 00 00             jle     0x1af <_JIT_ENTRY+0x1af>
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 89 f4 00 00 00             jns     0x1d5 <_JIT_ENTRY+0x1d5>
// e1: e9 05 01 00 00                jmp     0x1eb <_JIT_ENTRY+0x1eb>
// e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_NegativeRefcount
// fa: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ff: 4c 89 ea                      movq    %r13, %rdx
// 102: ff d0                         callq   *%rax
// 104: 49 8b 45 00                   movq    (%r13), %rax
// 108: 85 c0                         testl   %eax, %eax
// 10a: 78 21                         js      0x12d <_JIT_ENTRY+0x12d>
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 116: ff d0                         callq   *%rax
// 118: 49 ff 4d 00                   decq    (%r13)
// 11c: 75 0f                         jne     0x12d <_JIT_ENTRY+0x12d>
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _Py_Dealloc
// 128: 4c 89 ef                      movq    %r13, %rdi
// 12b: ff d0                         callq   *%rax
// 12d: 49 8b 04 24                   movq    (%r12), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 09                         jle     0x13f <_JIT_ENTRY+0x13f>
// 136: 85 c0                         testl   %eax, %eax
// 138: 79 2f                         jns     0x169 <_JIT_ENTRY+0x169>
// 13a: e9 11 02 00 00                jmp     0x350 <_JIT_ENTRY+0x350>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 e7 01 00 00             js      0x350 <_JIT_ENTRY+0x350>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 0c 24                   decq    (%r12)
// 179: 0f 85 d1 01 00 00             jne     0x350 <_JIT_ENTRY+0x350>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_Dealloc
// 189: 4c 89 e7                      movq    %r12, %rdi
// 18c: ff d0                         callq   *%rax
// 18e: e9 bd 01 00 00                jmp     0x350 <_JIT_ENTRY+0x350>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_Dealloc
// 19d: 4c 89 ef                      movq    %r13, %rdi
// 1a0: ff d0                         callq   *%rax
// 1a2: 49 8b 04 24                   movq    (%r12), %rax
// 1a6: 48 85 c0                      testq   %rax, %rax
// 1a9: 0f 8f 2a ff ff ff             jg      0xd9 <_JIT_ENTRY+0xd9>
// 1af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b1:  R_X86_64_64  .rodata.str1.1
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_NegativeRefcount
// 1c3: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c8: 4c 89 e2                      movq    %r12, %rdx
// 1cb: ff d0                         callq   *%rax
// 1cd: 49 8b 04 24                   movq    (%r12), %rax
// 1d1: 85 c0                         testl   %eax, %eax
// 1d3: 78 16                         js      0x1eb <_JIT_ENTRY+0x1eb>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1df: ff d0                         callq   *%rax
// 1e1: 49 ff 0c 24                   decq    (%r12)
// 1e5: 0f 84 33 01 00 00             je      0x31e <_JIT_ENTRY+0x31e>
// 1eb: 85 ed                         testl   %ebp, %ebp
// 1ed: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 1f2: 0f 88 58 01 00 00             js      0x350 <_JIT_ENTRY+0x350>
// 1f8: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1fc: 48 85 ff                      testq   %rdi, %rdi
// 1ff: 0f 84 4b 01 00 00             je      0x350 <_JIT_ENTRY+0x350>
// 205: 49 83 c7 f8                   addq    $-0x8, %r15
// 209: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000020b:  R_X86_64_64  _Py_NoneStruct
// 213: 4c 39 e7                      cmpq    %r12, %rdi
// 216: 74 10                         je      0x228 <_JIT_ENTRY+0x228>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  PyErr_SetHandledException
// 222: ff d0                         callq   *%rax
// 224: 4c 8b 24 24                   movq    (%rsp), %r12
// 228: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 22d: 48 89 2b                      movq    %rbp, (%rbx)
// 230: 4d 89 27                      movq    %r12, (%r15)
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _JIT_OPARG
// 23d: 0f b7 c8                      movzwl  %ax, %ecx
// 240: 48 c1 e1 04                   shlq    $0x4, %rcx
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _PyIntrinsics_BinaryFunctions
// 24e: 4c 89 f7                      movq    %r14, %rdi
// 251: 48 89 ee                      movq    %rbp, %rsi
// 254: 4c 89 e2                      movq    %r12, %rdx
// 257: ff 14 01                      callq   *(%rcx,%rax)
// 25a: 49 89 c5                      movq    %rax, %r13
// 25d: 48 8b 45 00                   movq    (%rbp), %rax
// 261: 48 85 c0                      testq   %rax, %rax
// 264: 7f 22                         jg      0x288 <_JIT_ENTRY+0x288>
// 266: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000268:  R_X86_64_64  .rodata.str1.1
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_NegativeRefcount
// 27a: be 8d 02 00 00                movl    $0x28d, %esi            # imm = 0x28D
// 27f: 48 89 ea                      movq    %rbp, %rdx
// 282: ff d0                         callq   *%rax
// 284: 48 8b 45 00                   movq    (%rbp), %rax
// 288: 85 c0                         testl   %eax, %eax
// 28a: 78 21                         js      0x2ad <_JIT_ENTRY+0x2ad>
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 296: ff d0                         callq   *%rax
// 298: 48 ff 4d 00                   decq    (%rbp)
// 29c: 75 0f                         jne     0x2ad <_JIT_ENTRY+0x2ad>
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _Py_Dealloc
// 2a8: 48 89 ef                      movq    %rbp, %rdi
// 2ab: ff d0                         callq   *%rax
// 2ad: 49 8b 04 24                   movq    (%r12), %rax
// 2b1: 48 85 c0                      testq   %rax, %rax
// 2b4: 7f 22                         jg      0x2d8 <_JIT_ENTRY+0x2d8>
// 2b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b8:  R_X86_64_64  .rodata.str1.1
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  _Py_NegativeRefcount
// 2ca: be 8e 02 00 00                movl    $0x28e, %esi            # imm = 0x28E
// 2cf: 4c 89 e2                      movq    %r12, %rdx
// 2d2: ff d0                         callq   *%rax
// 2d4: 49 8b 04 24                   movq    (%r12), %rax
// 2d8: 85 c0                         testl   %eax, %eax
// 2da: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 2df: 78 12                         js      0x2f3 <_JIT_ENTRY+0x2f3>
// 2e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2eb: ff d0                         callq   *%rax
// 2ed: 49 ff 0c 24                   decq    (%r12)
// 2f1: 74 49                         je      0x33c <_JIT_ENTRY+0x33c>
// 2f3: 4d 85 ed                      testq   %r13, %r13
// 2f6: 74 58                         je      0x350 <_JIT_ENTRY+0x350>
// 2f8: 4c 89 2b                      movq    %r13, (%rbx)
// 2fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fd:  R_X86_64_64  _JIT_CONTINUE
// 305: 48 89 ef                      movq    %rbp, %rdi
// 308: 4c 89 fe                      movq    %r15, %rsi
// 30b: 4c 89 f2                      movq    %r14, %rdx
// 30e: 48 83 c4 18                   addq    $0x18, %rsp
// 312: 5b                            popq    %rbx
// 313: 41 5c                         popq    %r12
// 315: 41 5d                         popq    %r13
// 317: 41 5e                         popq    %r14
// 319: 41 5f                         popq    %r15
// 31b: 5d                            popq    %rbp
// 31c: ff e0                         jmpq    *%rax
// 31e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000320:  R_X86_64_64  _Py_Dealloc
// 328: 4c 89 e7                      movq    %r12, %rdi
// 32b: ff d0                         callq   *%rax
// 32d: 85 ed                         testl   %ebp, %ebp
// 32f: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 334: 0f 89 be fe ff ff             jns     0x1f8 <_JIT_ENTRY+0x1f8>
// 33a: eb 14                         jmp     0x350 <_JIT_ENTRY+0x350>
// 33c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033e:  R_X86_64_64  _Py_Dealloc
// 346: 4c 89 e7                      movq    %r12, %rdi
// 349: ff d0                         callq   *%rax
// 34b: 4d 85 ed                      testq   %r13, %r13
// 34e: 75 a8                         jne     0x2f8 <_JIT_ENTRY+0x2f8>
// 350: 48 29 eb                      subq    %rbp, %rbx
// 353: 48 83 c3 b8                   addq    $-0x48, %rbx
// 357: 48 c1 eb 03                   shrq    $0x3, %rbx
// 35b: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 35e: 31 c0                         xorl    %eax, %eax
// 360: 48 83 c4 18                   addq    $0x18, %rsp
// 364: 5b                            popq    %rbx
// 365: 41 5c                         popq    %r12
// 367: 41 5d                         popq    %r13
// 369: 41 5e                         popq    %r14
// 36b: 41 5f                         popq    %r15
// 36d: 5d                            popq    %rbp
// 36e: c3                            retq
// 36f: 
static const unsigned char _CHECK_EG_MATCHplus_CALL_INTRINSIC_2_code_body[880] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0x8d, 0x5e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0x11, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xe7, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xd1, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xbd, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x33, 0x01, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x0f, 0x88, 0x58, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x4b, 0x01, 0x00, 0x00, 0x49, 0x83, 0xc7, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x2b, 0x4d, 0x89, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xe2, 0xff, 0x14, 0x01, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8d, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x49, 0x4d, 0x85, 0xed, 0x74, 0x58, 0x4c, 0x89, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x0f, 0x89, 0xbe, 0xfe, 0xff, 0xff, 0xeb, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0xa8, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_CALL_INTRINSIC_2_code_holes[32] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_BinaryFunctions, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x320, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CALL_INTRINSIC_2_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CALL_INTRINSIC_2_data_holes[1];

// _CHECK_EG_MATCHplus_CALL_ISINSTANCE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CALL_ISINSTANCE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3c                         js      0x71 <_JIT_ENTRY+0x71>
// 35: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 3d: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 50: 48 89 e2                      movq    %rsp, %rdx
// 53: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 58: 4c 89 ef                      movq    %r13, %rdi
// 5b: 4c 89 e6                      movq    %r12, %rsi
// 5e: ff d0                         callq   *%rax
// 60: 89 c5                         movl    %eax, %ebp
// 62: 49 8b 45 00                   movq    (%r13), %rax
// 66: 48 85 c0                      testq   %rax, %rax
// 69: 7e 18                         jle     0x83 <_JIT_ENTRY+0x83>
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 79 3a                         jns     0xa9 <_JIT_ENTRY+0xa9>
// 6f: eb 4a                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 71: 49 8b 45 00                   movq    (%r13), %rax
// 75: 48 85 c0                      testq   %rax, %rax
// 78: 7e 57                         jle     0xd1 <_JIT_ENTRY+0xd1>
// 7a: 85 c0                         testl   %eax, %eax
// 7c: 79 79                         jns     0xf7 <_JIT_ENTRY+0xf7>
// 7e: e9 8a 00 00 00                jmp     0x10d <_JIT_ENTRY+0x10d>
// 83: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000085:  R_X86_64_64  .rodata.str1.1
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_NegativeRefcount
// 97: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9c: 4c 89 ea                      movq    %r13, %rdx
// 9f: ff d0                         callq   *%rax
// a1: 49 8b 45 00                   movq    (%r13), %rax
// a5: 85 c0                         testl   %eax, %eax
// a7: 78 12                         js      0xbb <_JIT_ENTRY+0xbb>
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b3: ff d0                         callq   *%rax
// b5: 49 ff 4d 00                   decq    (%r13)
// b9: 74 6c                         je      0x127 <_JIT_ENTRY+0x127>
// bb: 49 8b 04 24                   movq    (%r12), %rax
// bf: 48 85 c0                      testq   %rax, %rax
// c2: 7e 7b                         jle     0x13f <_JIT_ENTRY+0x13f>
// c4: 85 c0                         testl   %eax, %eax
// c6: 0f 89 99 00 00 00             jns     0x165 <_JIT_ENTRY+0x165>
// cc: e9 aa 00 00 00                jmp     0x17b <_JIT_ENTRY+0x17b>
// d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d3:  R_X86_64_64  .rodata.str1.1
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_NegativeRefcount
// e5: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ea: 4c 89 ea                      movq    %r13, %rdx
// ed: ff d0                         callq   *%rax
// ef: 49 8b 45 00                   movq    (%r13), %rax
// f3: 85 c0                         testl   %eax, %eax
// f5: 78 16                         js      0x10d <_JIT_ENTRY+0x10d>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 101: ff d0                         callq   *%rax
// 103: 49 ff 4d 00                   decq    (%r13)
// 107: 0f 84 5a 01 00 00             je      0x267 <_JIT_ENTRY+0x267>
// 10d: 49 8b 04 24                   movq    (%r12), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 0f 8e 69 01 00 00             jle     0x283 <_JIT_ENTRY+0x283>
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 0f 89 87 01 00 00             jns     0x2a9 <_JIT_ENTRY+0x2a9>
// 122: e9 a3 01 00 00                jmp     0x2ca <_JIT_ENTRY+0x2ca>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_Dealloc
// 131: 4c 89 ef                      movq    %r13, %rdi
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 85                         jg      0xc4 <_JIT_ENTRY+0xc4>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 16                         js      0x17b <_JIT_ENTRY+0x17b>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0c 24                   decq    (%r12)
// 175: 0f 84 d3 00 00 00             je      0x24e <_JIT_ENTRY+0x24e>
// 17b: 85 ed                         testl   %ebp, %ebp
// 17d: 0f 88 47 01 00 00             js      0x2ca <_JIT_ENTRY+0x2ca>
// 183: 48 8b 3c 24                   movq    (%rsp), %rdi
// 187: 48 85 ff                      testq   %rdi, %rdi
// 18a: 0f 84 3a 01 00 00             je      0x2ca <_JIT_ENTRY+0x2ca>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_NoneStruct
// 19a: 48 39 c7                      cmpq    %rax, %rdi
// 19d: 74 10                         je      0x1af <_JIT_ENTRY+0x1af>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  PyErr_SetHandledException
// 1a9: ff d0                         callq   *%rax
// 1ab: 48 8b 04 24                   movq    (%rsp), %rax
// 1af: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1b4: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1b8: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _JIT_OPARG
// 1c6: 0f b7 c8                      movzwl  %ax, %ecx
// 1c9: 89 ca                         movl    %ecx, %edx
// 1cb: f7 d2                         notl    %edx
// 1cd: 48 63 ea                      movslq  %edx, %rbp
// 1d0: 0f b7 c0                      movzwl  %ax, %eax
// 1d3: 48 89 c2                      movq    %rax, %rdx
// 1d6: 48 f7 da                      negq    %rdx
// 1d9: 31 f6                         xorl    %esi, %esi
// 1db: 66 83 f8 01                   cmpw    $0x1, %ax
// 1df: 40 0f 94 c6                   sete    %sil
// 1e3: 31 ff                         xorl    %edi, %edi
// 1e5: 66 83 f8 02                   cmpw    $0x2, %ax
// 1e9: 40 0f 94 c7                   sete    %dil
// 1ed: 49 83 3c ee 00                cmpq    $0x0, (%r14,%rbp,8)
// 1f2: 48 f7 d0                      notq    %rax
// 1f5: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1f9: 0f 44 f7                      cmovel  %edi, %esi
// 1fc: 40 80 fe 01                   cmpb    $0x1, %sil
// 200: 75 1f                         jne     0x221 <_JIT_ENTRY+0x221>
// 202: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 207: 29 ca                         subl    %ecx, %edx
// 209: 48 63 d2                      movslq  %edx, %rdx
// 20c: 4d 8b 24 d6                   movq    (%r14,%rdx,8), %r12
// 210: 49 8b 4f 10                   movq    0x10(%r15), %rcx
// 214: 4c 3b a1 b8 54 06 00          cmpq    0x654b8(%rcx), %r12
// 21b: 0f 84 cd 00 00 00             je      0x2ee <_JIT_ENTRY+0x2ee>
// 221: 49 29 de                      subq    %rbx, %r14
// 224: 49 83 c6 b8                   addq    $-0x48, %r14
// 228: 49 c1 ee 03                   shrq    $0x3, %r14
// 22c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 230: 48 8b 03                      movq    (%rbx), %rax
// 233: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000235:  R_X86_64_64  _JIT_TARGET
// 23d: 89 c9                         movl    %ecx, %ecx
// 23f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 243: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 249: e9 91 00 00 00                jmp     0x2df <_JIT_ENTRY+0x2df>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_Dealloc
// 258: 4c 89 e7                      movq    %r12, %rdi
// 25b: ff d0                         callq   *%rax
// 25d: 85 ed                         testl   %ebp, %ebp
// 25f: 0f 89 1e ff ff ff             jns     0x183 <_JIT_ENTRY+0x183>
// 265: eb 63                         jmp     0x2ca <_JIT_ENTRY+0x2ca>
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _Py_Dealloc
// 271: 4c 89 ef                      movq    %r13, %rdi
// 274: ff d0                         callq   *%rax
// 276: 49 8b 04 24                   movq    (%r12), %rax
// 27a: 48 85 c0                      testq   %rax, %rax
// 27d: 0f 8f 97 fe ff ff             jg      0x11a <_JIT_ENTRY+0x11a>
// 283: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000285:  R_X86_64_64  .rodata.str1.1
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  _Py_NegativeRefcount
// 297: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 29c: 4c 89 e2                      movq    %r12, %rdx
// 29f: ff d0                         callq   *%rax
// 2a1: 49 8b 04 24                   movq    (%r12), %rax
// 2a5: 85 c0                         testl   %eax, %eax
// 2a7: 78 21                         js      0x2ca <_JIT_ENTRY+0x2ca>
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b3: ff d0                         callq   *%rax
// 2b5: 49 ff 0c 24                   decq    (%r12)
// 2b9: 75 0f                         jne     0x2ca <_JIT_ENTRY+0x2ca>
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _Py_Dealloc
// 2c5: 4c 89 e7                      movq    %r12, %rdi
// 2c8: ff d0                         callq   *%rax
// 2ca: 49 83 c6 f0                   addq    $-0x10, %r14
// 2ce: 49 29 de                      subq    %rbx, %r14
// 2d1: 49 83 c6 b8                   addq    $-0x48, %r14
// 2d5: 49 c1 ee 03                   shrq    $0x3, %r14
// 2d9: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2dd: 31 c0                         xorl    %eax, %eax
// 2df: 48 83 c4 28                   addq    $0x28, %rsp
// 2e3: 5b                            popq    %rbx
// 2e4: 41 5c                         popq    %r12
// 2e6: 41 5d                         popq    %r13
// 2e8: 41 5e                         popq    %r14
// 2ea: 41 5f                         popq    %r15
// 2ec: 5d                            popq    %rbp
// 2ed: c3                            retq
// 2ee: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 2f3: 4d 8b 2c c6                   movq    (%r14,%rax,8), %r13
// 2f7: 49 8b 74 c6 08                movq    0x8(%r14,%rax,8), %rsi
// 2fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fe:  R_X86_64_64  PyObject_IsInstance
// 306: 4c 89 ef                      movq    %r13, %rdi
// 309: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 30e: ff d0                         callq   *%rax
// 310: 85 c0                         testl   %eax, %eax
// 312: 78 ba                         js      0x2ce <_JIT_ENTRY+0x2ce>
// 314: 89 c7                         movl    %eax, %edi
// 316: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000318:  R_X86_64_64  PyBool_FromLong
// 320: ff d0                         callq   *%rax
// 322: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 327: 49 8b 45 00                   movq    (%r13), %rax
// 32b: 48 85 c0                      testq   %rax, %rax
// 32e: 7f 22                         jg      0x352 <_JIT_ENTRY+0x352>
// 330: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000332:  R_X86_64_64  .rodata.str1.1
// 33a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033c:  R_X86_64_64  _Py_NegativeRefcount
// 344: be 96 0b 00 00                movl    $0xb96, %esi            # imm = 0xB96
// 349: 4c 89 ea                      movq    %r13, %rdx
// 34c: ff d0                         callq   *%rax
// 34e: 49 8b 45 00                   movq    (%r13), %rax
// 352: 85 c0                         testl   %eax, %eax
// 354: 78 21                         js      0x377 <_JIT_ENTRY+0x377>
// 356: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000358:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 360: ff d0                         callq   *%rax
// 362: 49 ff 4d 00                   decq    (%r13)
// 366: 75 0f                         jne     0x377 <_JIT_ENTRY+0x377>
// 368: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036a:  R_X86_64_64  _Py_Dealloc
// 372: 4c 89 ef                      movq    %r13, %rdi
// 375: ff d0                         callq   *%rax
// 377: 4c 8b 6c 24 18                movq    0x18(%rsp), %r13
// 37c: 49 8b 45 00                   movq    (%r13), %rax
// 380: 48 85 c0                      testq   %rax, %rax
// 383: 7f 22                         jg      0x3a7 <_JIT_ENTRY+0x3a7>
// 385: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000387:  R_X86_64_64  .rodata.str1.1
// 38f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000391:  R_X86_64_64  _Py_NegativeRefcount
// 399: be 97 0b 00 00                movl    $0xb97, %esi            # imm = 0xB97
// 39e: 4c 89 ea                      movq    %r13, %rdx
// 3a1: ff d0                         callq   *%rax
// 3a3: 49 8b 45 00                   movq    (%r13), %rax
// 3a7: 85 c0                         testl   %eax, %eax
// 3a9: 78 21                         js      0x3cc <_JIT_ENTRY+0x3cc>
// 3ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3b5: ff d0                         callq   *%rax
// 3b7: 49 ff 4d 00                   decq    (%r13)
// 3bb: 75 0f                         jne     0x3cc <_JIT_ENTRY+0x3cc>
// 3bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bf:  R_X86_64_64  _Py_Dealloc
// 3c7: 4c 89 ef                      movq    %r13, %rdi
// 3ca: ff d0                         callq   *%rax
// 3cc: 49 8b 04 24                   movq    (%r12), %rax
// 3d0: 48 85 c0                      testq   %rax, %rax
// 3d3: 7f 22                         jg      0x3f7 <_JIT_ENTRY+0x3f7>
// 3d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003d7:  R_X86_64_64  .rodata.str1.1
// 3df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e1:  R_X86_64_64  _Py_NegativeRefcount
// 3e9: be 98 0b 00 00                movl    $0xb98, %esi            # imm = 0xB98
// 3ee: 4c 89 e2                      movq    %r12, %rdx
// 3f1: ff d0                         callq   *%rax
// 3f3: 49 8b 04 24                   movq    (%r12), %rax
// 3f7: 85 c0                         testl   %eax, %eax
// 3f9: 78 21                         js      0x41c <_JIT_ENTRY+0x41c>
// 3fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 405: ff d0                         callq   *%rax
// 407: 49 ff 0c 24                   decq    (%r12)
// 40b: 75 0f                         jne     0x41c <_JIT_ENTRY+0x41c>
// 40d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000040f:  R_X86_64_64  _Py_Dealloc
// 417: 4c 89 e7                      movq    %r12, %rdi
// 41a: ff d0                         callq   *%rax
// 41c: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 421: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 425: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 42a: 48 85 c9                      testq   %rcx, %rcx
// 42d: 74 27                         je      0x456 <_JIT_ENTRY+0x456>
// 42f: 49 8d 34 ee                   leaq    (%r14,%rbp,8), %rsi
// 433: 48 89 08                      movq    %rcx, (%rax)
// 436: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000438:  R_X86_64_64  _JIT_CONTINUE
// 440: 48 89 df                      movq    %rbx, %rdi
// 443: 4c 89 fa                      movq    %r15, %rdx
// 446: 48 83 c4 28                   addq    $0x28, %rsp
// 44a: 5b                            popq    %rbx
// 44b: 41 5c                         popq    %r12
// 44d: 41 5d                         popq    %r13
// 44f: 41 5e                         popq    %r14
// 451: 41 5f                         popq    %r15
// 453: 5d                            popq    %rbp
// 454: ff e0                         jmpq    *%rax
// 456: 49 89 c6                      movq    %rax, %r14
// 459: e9 70 fe ff ff                jmp     0x2ce <_JIT_ENTRY+0x2ce>
// 45e: 
static const unsigned char _CHECK_EG_MATCHplus_CALL_ISINSTANCE_code_body[1119] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x69, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x87, 0x01, 0x00, 0x00, 0xe9, 0xa3, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xd3, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x47, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x3a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x89, 0x4e, 0xf0, 0x49, 0x89, 0x46, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xea, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x02, 0x40, 0x0f, 0x94, 0xc7, 0x49, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1f, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x4d, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x4f, 0x10, 0x4c, 0x3b, 0xa1, 0xb8, 0x54, 0x06, 0x00, 0x0f, 0x84, 0xcd, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x91, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x1e, 0xff, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x97, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x20, 0x4d, 0x8b, 0x2c, 0xc6, 0x49, 0x8b, 0x74, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0x74, 0x24, 0x18, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xba, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x6c, 0x24, 0x18, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x27, 0x49, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xe9, 0x70, 0xfe, 0xff, 0xff};
static const Hole _CHECK_EG_MATCHplus_CALL_ISINSTANCE_code_holes[38] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsInstance, 0x0},
    {0x318, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_FromLong, 0x0},
    {0x332, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x33c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x358, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x36a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x387, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x391, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3d7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x40f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x438, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CALL_ISINSTANCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CALL_ISINSTANCE_data_holes[1];

// _CHECK_EG_MATCHplus_CALL_LEN
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CALL_LEN.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 5b 01 00 00             je      0x26b <_JIT_ENTRY+0x26b>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 6a 01 00 00             jle     0x287 <_JIT_ENTRY+0x287>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 88 01 00 00             jns     0x2ad <_JIT_ENTRY+0x2ad>
// 125: e9 a4 01 00 00                jmp     0x2ce <_JIT_ENTRY+0x2ce>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 d4 00 00 00             je      0x252 <_JIT_ENTRY+0x252>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 48 01 00 00             js      0x2ce <_JIT_ENTRY+0x2ce>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 3a 01 00 00             je      0x2ce <_JIT_ENTRY+0x2ce>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 48 39 c7                      cmpq    %rax, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1b4: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b9: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1bd: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _JIT_OPARG
// 1cb: 0f b7 c8                      movzwl  %ax, %ecx
// 1ce: 89 ca                         movl    %ecx, %edx
// 1d0: f7 d2                         notl    %edx
// 1d2: 4c 63 ea                      movslq  %edx, %r13
// 1d5: 0f b7 c0                      movzwl  %ax, %eax
// 1d8: 48 89 c2                      movq    %rax, %rdx
// 1db: 48 f7 da                      negq    %rdx
// 1de: 31 f6                         xorl    %esi, %esi
// 1e0: 66 85 c0                      testw   %ax, %ax
// 1e3: 40 0f 94 c6                   sete    %sil
// 1e7: 31 ff                         xorl    %edi, %edi
// 1e9: 66 83 f8 01                   cmpw    $0x1, %ax
// 1ed: 40 0f 94 c7                   sete    %dil
// 1f1: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 1f6: 48 f7 d0                      notq    %rax
// 1f9: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1fd: 0f 44 f7                      cmovel  %edi, %esi
// 200: 40 80 fe 01                   cmpb    $0x1, %sil
// 204: 75 1f                         jne     0x225 <_JIT_ENTRY+0x225>
// 206: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 20b: 29 ca                         subl    %ecx, %edx
// 20d: 4c 63 e2                      movslq  %edx, %r12
// 210: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 214: 49 8b 4f 10                   movq    0x10(%r15), %rcx
// 218: 48 3b a9 c0 54 06 00          cmpq    0x654c0(%rcx), %rbp
// 21f: 0f 84 cd 00 00 00             je      0x2f2 <_JIT_ENTRY+0x2f2>
// 225: 49 29 de                      subq    %rbx, %r14
// 228: 49 83 c6 b8                   addq    $-0x48, %r14
// 22c: 49 c1 ee 03                   shrq    $0x3, %r14
// 230: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 234: 48 8b 03                      movq    (%rbx), %rax
// 237: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000239:  R_X86_64_64  _JIT_TARGET
// 241: 89 c9                         movl    %ecx, %ecx
// 243: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 247: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 24d: e9 91 00 00 00                jmp     0x2e3 <_JIT_ENTRY+0x2e3>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_Dealloc
// 25c: 4c 89 e7                      movq    %r12, %rdi
// 25f: ff d0                         callq   *%rax
// 261: 85 ed                         testl   %ebp, %ebp
// 263: 0f 89 1d ff ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 269: eb 63                         jmp     0x2ce <_JIT_ENTRY+0x2ce>
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_Dealloc
// 275: 4c 89 ef                      movq    %r13, %rdi
// 278: ff d0                         callq   *%rax
// 27a: 49 8b 04 24                   movq    (%r12), %rax
// 27e: 48 85 c0                      testq   %rax, %rax
// 281: 0f 8f 96 fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 287: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000289:  R_X86_64_64  .rodata.str1.1
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _Py_NegativeRefcount
// 29b: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2a0: 4c 89 e2                      movq    %r12, %rdx
// 2a3: ff d0                         callq   *%rax
// 2a5: 49 8b 04 24                   movq    (%r12), %rax
// 2a9: 85 c0                         testl   %eax, %eax
// 2ab: 78 21                         js      0x2ce <_JIT_ENTRY+0x2ce>
// 2ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002af:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b7: ff d0                         callq   *%rax
// 2b9: 49 ff 0c 24                   decq    (%r12)
// 2bd: 75 0f                         jne     0x2ce <_JIT_ENTRY+0x2ce>
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_Dealloc
// 2c9: 4c 89 e7                      movq    %r12, %rdi
// 2cc: ff d0                         callq   *%rax
// 2ce: 49 83 c6 f0                   addq    $-0x10, %r14
// 2d2: 49 29 de                      subq    %rbx, %r14
// 2d5: 49 83 c6 b8                   addq    $-0x48, %r14
// 2d9: 49 c1 ee 03                   shrq    $0x3, %r14
// 2dd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2e1: 31 c0                         xorl    %eax, %eax
// 2e3: 48 83 c4 28                   addq    $0x28, %rsp
// 2e7: 5b                            popq    %rbx
// 2e8: 41 5c                         popq    %r12
// 2ea: 41 5d                         popq    %r13
// 2ec: 41 5e                         popq    %r14
// 2ee: 41 5f                         popq    %r15
// 2f0: 5d                            popq    %rbp
// 2f1: c3                            retq
// 2f2: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// 2f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f8:  R_X86_64_64  PyObject_Size
// 300: 48 89 7c 24 20                movq    %rdi, 0x20(%rsp)
// 305: ff d0                         callq   *%rax
// 307: 48 85 c0                      testq   %rax, %rax
// 30a: 78 c6                         js      0x2d2 <_JIT_ENTRY+0x2d2>
// 30c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000030e:  R_X86_64_64  PyLong_FromSsize_t
// 316: 48 89 c7                      movq    %rax, %rdi
// 319: ff d1                         callq   *%rcx
// 31b: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 320: 48 8b 45 00                   movq    (%rbp), %rax
// 324: 48 85 c0                      testq   %rax, %rax
// 327: 7f 22                         jg      0x34b <_JIT_ENTRY+0x34b>
// 329: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000032b:  R_X86_64_64  .rodata.str1.1
// 333: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000335:  R_X86_64_64  _Py_NegativeRefcount
// 33d: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 342: 48 89 ea                      movq    %rbp, %rdx
// 345: ff d0                         callq   *%rax
// 347: 48 8b 45 00                   movq    (%rbp), %rax
// 34b: 85 c0                         testl   %eax, %eax
// 34d: 78 21                         js      0x370 <_JIT_ENTRY+0x370>
// 34f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000351:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 359: ff d0                         callq   *%rax
// 35b: 48 ff 4d 00                   decq    (%rbp)
// 35f: 75 0f                         jne     0x370 <_JIT_ENTRY+0x370>
// 361: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000363:  R_X86_64_64  _Py_Dealloc
// 36b: 48 89 ef                      movq    %rbp, %rdi
// 36e: ff d0                         callq   *%rax
// 370: 48 8b 6c 24 20                movq    0x20(%rsp), %rbp
// 375: 48 8b 45 00                   movq    (%rbp), %rax
// 379: 48 85 c0                      testq   %rax, %rax
// 37c: 7f 22                         jg      0x3a0 <_JIT_ENTRY+0x3a0>
// 37e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000380:  R_X86_64_64  .rodata.str1.1
// 388: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038a:  R_X86_64_64  _Py_NegativeRefcount
// 392: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 397: 48 89 ea                      movq    %rbp, %rdx
// 39a: ff d0                         callq   *%rax
// 39c: 48 8b 45 00                   movq    (%rbp), %rax
// 3a0: 85 c0                         testl   %eax, %eax
// 3a2: 78 21                         js      0x3c5 <_JIT_ENTRY+0x3c5>
// 3a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3ae: ff d0                         callq   *%rax
// 3b0: 48 ff 4d 00                   decq    (%rbp)
// 3b4: 75 0f                         jne     0x3c5 <_JIT_ENTRY+0x3c5>
// 3b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b8:  R_X86_64_64  _Py_Dealloc
// 3c0: 48 89 ef                      movq    %rbp, %rdi
// 3c3: ff d0                         callq   *%rax
// 3c5: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 3c9: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 3ce: 48 85 c9                      testq   %rcx, %rcx
// 3d1: 74 27                         je      0x3fa <_JIT_ENTRY+0x3fa>
// 3d3: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 3d7: 48 89 08                      movq    %rcx, (%rax)
// 3da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003dc:  R_X86_64_64  _JIT_CONTINUE
// 3e4: 48 89 df                      movq    %rbx, %rdi
// 3e7: 4c 89 fa                      movq    %r15, %rdx
// 3ea: 48 83 c4 28                   addq    $0x28, %rsp
// 3ee: 5b                            popq    %rbx
// 3ef: 41 5c                         popq    %r12
// 3f1: 41 5d                         popq    %r13
// 3f3: 41 5e                         popq    %r14
// 3f5: 41 5f                         popq    %r15
// 3f7: 5d                            popq    %rbp
// 3f8: ff e0                         jmpq    *%rax
// 3fa: 49 89 c6                      movq    %rax, %r14
// 3fd: e9 d0 fe ff ff                jmp     0x2d2 <_JIT_ENTRY+0x2d2>
// 402: 
static const unsigned char _CHECK_EG_MATCHplus_CALL_LEN_code_body[1027] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x5b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x6a, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x88, 0x01, 0x00, 0x00, 0xe9, 0xa4, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xd4, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x48, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x3a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x89, 0x4e, 0xf0, 0x49, 0x89, 0x46, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1f, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x4f, 0x10, 0x48, 0x3b, 0xa9, 0xc0, 0x54, 0x06, 0x00, 0x0f, 0x84, 0xcd, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x91, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x1d, 0xff, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x96, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x20, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x78, 0xc6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x18, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x27, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xe9, 0xd0, 0xfe, 0xff, 0xff};
static const Hole _CHECK_EG_MATCHplus_CALL_LEN_code_holes[34] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x32b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x335, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x351, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x363, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x380, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x38a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3dc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CALL_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CALL_LEN_data_holes[1];

// _CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_FAST
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_FAST.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3c                         js      0x71 <_JIT_ENTRY+0x71>
// 35: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 3d: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 50: 48 89 e2                      movq    %rsp, %rdx
// 53: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 58: 4c 89 ef                      movq    %r13, %rdi
// 5b: 4c 89 e6                      movq    %r12, %rsi
// 5e: ff d0                         callq   *%rax
// 60: 89 c5                         movl    %eax, %ebp
// 62: 49 8b 45 00                   movq    (%r13), %rax
// 66: 48 85 c0                      testq   %rax, %rax
// 69: 7e 18                         jle     0x83 <_JIT_ENTRY+0x83>
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 79 3a                         jns     0xa9 <_JIT_ENTRY+0xa9>
// 6f: eb 4a                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 71: 49 8b 45 00                   movq    (%r13), %rax
// 75: 48 85 c0                      testq   %rax, %rax
// 78: 7e 57                         jle     0xd1 <_JIT_ENTRY+0xd1>
// 7a: 85 c0                         testl   %eax, %eax
// 7c: 79 79                         jns     0xf7 <_JIT_ENTRY+0xf7>
// 7e: e9 8a 00 00 00                jmp     0x10d <_JIT_ENTRY+0x10d>
// 83: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000085:  R_X86_64_64  .rodata.str1.1
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_NegativeRefcount
// 97: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9c: 4c 89 ea                      movq    %r13, %rdx
// 9f: ff d0                         callq   *%rax
// a1: 49 8b 45 00                   movq    (%r13), %rax
// a5: 85 c0                         testl   %eax, %eax
// a7: 78 12                         js      0xbb <_JIT_ENTRY+0xbb>
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b3: ff d0                         callq   *%rax
// b5: 49 ff 4d 00                   decq    (%r13)
// b9: 74 6c                         je      0x127 <_JIT_ENTRY+0x127>
// bb: 49 8b 04 24                   movq    (%r12), %rax
// bf: 48 85 c0                      testq   %rax, %rax
// c2: 7e 7b                         jle     0x13f <_JIT_ENTRY+0x13f>
// c4: 85 c0                         testl   %eax, %eax
// c6: 0f 89 99 00 00 00             jns     0x165 <_JIT_ENTRY+0x165>
// cc: e9 aa 00 00 00                jmp     0x17b <_JIT_ENTRY+0x17b>
// d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d3:  R_X86_64_64  .rodata.str1.1
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_NegativeRefcount
// e5: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ea: 4c 89 ea                      movq    %r13, %rdx
// ed: ff d0                         callq   *%rax
// ef: 49 8b 45 00                   movq    (%r13), %rax
// f3: 85 c0                         testl   %eax, %eax
// f5: 78 16                         js      0x10d <_JIT_ENTRY+0x10d>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 101: ff d0                         callq   *%rax
// 103: 49 ff 4d 00                   decq    (%r13)
// 107: 0f 84 6c 01 00 00             je      0x279 <_JIT_ENTRY+0x279>
// 10d: 49 8b 04 24                   movq    (%r12), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 0f 8e 7b 01 00 00             jle     0x295 <_JIT_ENTRY+0x295>
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 0f 89 99 01 00 00             jns     0x2bb <_JIT_ENTRY+0x2bb>
// 122: e9 b5 01 00 00                jmp     0x2dc <_JIT_ENTRY+0x2dc>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_Dealloc
// 131: 4c 89 ef                      movq    %r13, %rdi
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 85                         jg      0xc4 <_JIT_ENTRY+0xc4>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 16                         js      0x17b <_JIT_ENTRY+0x17b>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0c 24                   decq    (%r12)
// 175: 0f 84 e5 00 00 00             je      0x260 <_JIT_ENTRY+0x260>
// 17b: 85 ed                         testl   %ebp, %ebp
// 17d: 0f 88 59 01 00 00             js      0x2dc <_JIT_ENTRY+0x2dc>
// 183: 48 8b 3c 24                   movq    (%rsp), %rdi
// 187: 48 85 ff                      testq   %rdi, %rdi
// 18a: 0f 84 4c 01 00 00             je      0x2dc <_JIT_ENTRY+0x2dc>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_NoneStruct
// 19a: 48 39 c7                      cmpq    %rax, %rdi
// 19d: 74 10                         je      0x1af <_JIT_ENTRY+0x1af>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  PyErr_SetHandledException
// 1a9: ff d0                         callq   *%rax
// 1ab: 48 8b 04 24                   movq    (%rsp), %rax
// 1af: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1b4: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1b8: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 1bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001be:  R_X86_64_64  _JIT_OPARG
// 1c6: 0f b7 d1                      movzwl  %cx, %edx
// 1c9: 89 d0                         movl    %edx, %eax
// 1cb: f7 d0                         notl    %eax
// 1cd: 4c 63 c8                      movslq  %eax, %r9
// 1d0: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 1d4: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 1d9: 29 d6                         subl    %edx, %esi
// 1db: 4c 63 d6                      movslq  %esi, %r10
// 1de: 0f b7 c9                      movzwl  %cx, %ecx
// 1e1: 48 89 ce                      movq    %rcx, %rsi
// 1e4: 48 f7 de                      negq    %rsi
// 1e7: 44 8d 6a 01                   leal    0x1(%rdx), %r13d
// 1eb: 48 85 c0                      testq   %rax, %rax
// 1ee: 48 f7 d1                      notq    %rcx
// 1f1: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 1f5: 44 0f 44 ea                   cmovel  %edx, %r13d
// 1f9: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 1fd: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001ff:  R_X86_64_64  PyMethodDescr_Type
// 207: 49 39 54 24 08                cmpq    %rdx, 0x8(%r12)
// 20c: 75 25                         jne     0x233 <_JIT_ENTRY+0x233>
// 20e: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 213: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 21b: 75 16                         jne     0x233 <_JIT_ENTRY+0x233>
// 21d: 49 8d 14 ce                   leaq    (%r14,%rcx,8), %rdx
// 221: 48 8b 3a                      movq    (%rdx), %rdi
// 224: 48 8b 4f 08                   movq    0x8(%rdi), %rcx
// 228: 49 3b 4c 24 10                cmpq    0x10(%r12), %rcx
// 22d: 0f 84 cf 00 00 00             je      0x302 <_JIT_ENTRY+0x302>
// 233: 49 29 de                      subq    %rbx, %r14
// 236: 49 83 c6 b8                   addq    $-0x48, %r14
// 23a: 49 c1 ee 03                   shrq    $0x3, %r14
// 23e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 242: 48 8b 03                      movq    (%rbx), %rax
// 245: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000247:  R_X86_64_64  _JIT_TARGET
// 24f: 89 c9                         movl    %ecx, %ecx
// 251: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 255: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 25b: e9 93 00 00 00                jmp     0x2f3 <_JIT_ENTRY+0x2f3>
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _Py_Dealloc
// 26a: 4c 89 e7                      movq    %r12, %rdi
// 26d: ff d0                         callq   *%rax
// 26f: 85 ed                         testl   %ebp, %ebp
// 271: 0f 89 0c ff ff ff             jns     0x183 <_JIT_ENTRY+0x183>
// 277: eb 63                         jmp     0x2dc <_JIT_ENTRY+0x2dc>
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_Dealloc
// 283: 4c 89 ef                      movq    %r13, %rdi
// 286: ff d0                         callq   *%rax
// 288: 49 8b 04 24                   movq    (%r12), %rax
// 28c: 48 85 c0                      testq   %rax, %rax
// 28f: 0f 8f 85 fe ff ff             jg      0x11a <_JIT_ENTRY+0x11a>
// 295: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000297:  R_X86_64_64  .rodata.str1.1
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _Py_NegativeRefcount
// 2a9: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2ae: 4c 89 e2                      movq    %r12, %rdx
// 2b1: ff d0                         callq   *%rax
// 2b3: 49 8b 04 24                   movq    (%r12), %rax
// 2b7: 85 c0                         testl   %eax, %eax
// 2b9: 78 21                         js      0x2dc <_JIT_ENTRY+0x2dc>
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c5: ff d0                         callq   *%rax
// 2c7: 49 ff 0c 24                   decq    (%r12)
// 2cb: 75 0f                         jne     0x2dc <_JIT_ENTRY+0x2dc>
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _Py_Dealloc
// 2d7: 4c 89 e7                      movq    %r12, %rdi
// 2da: ff d0                         callq   *%rax
// 2dc: 49 83 c6 f0                   addq    $-0x10, %r14
// 2e0: 4c 89 f0                      movq    %r14, %rax
// 2e3: 48 29 d8                      subq    %rbx, %rax
// 2e6: 48 83 c0 b8                   addq    $-0x48, %rax
// 2ea: 48 c1 e8 03                   shrq    $0x3, %rax
// 2ee: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2f1: 31 c0                         xorl    %eax, %eax
// 2f3: 48 83 c4 38                   addq    $0x38, %rsp
// 2f7: 5b                            popq    %rbx
// 2f8: 41 5c                         popq    %r12
// 2fa: 41 5d                         popq    %r13
// 2fc: 41 5e                         popq    %r14
// 2fe: 41 5f                         popq    %r15
// 300: 5d                            popq    %rbp
// 301: c3                            retq
// 302: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 307: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 30c: 48 85 c0                      testq   %rax, %rax
// 30f: 40 0f 94 c5                   sete    %bpl
// 313: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// 317: 48 89 54 24 30                movq    %rdx, 0x30(%rsp)
// 31c: 48 8d 72 08                   leaq    0x8(%rdx), %rsi
// 320: 48 63 d0                      movslq  %eax, %rdx
// 323: 41 ff 50 08                   callq   *0x8(%r8)
// 327: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 32c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032e:  R_X86_64_64  _JIT_OPARG
// 336: 66 85 c0                      testw   %ax, %ax
// 339: 0f 94 c0                      sete    %al
// 33c: 40 84 c5                      testb   %al, %bpl
// 33f: 0f 84 b8 00 00 00             je      0x3fd <_JIT_ENTRY+0x3fd>
// 345: 49 8b 04 24                   movq    (%r12), %rax
// 349: 48 85 c0                      testq   %rax, %rax
// 34c: 7f 22                         jg      0x370 <_JIT_ENTRY+0x370>
// 34e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000350:  R_X86_64_64  .rodata.str1.1
// 358: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035a:  R_X86_64_64  _Py_NegativeRefcount
// 362: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 367: 4c 89 e2                      movq    %r12, %rdx
// 36a: ff d0                         callq   *%rax
// 36c: 49 8b 04 24                   movq    (%r12), %rax
// 370: 85 c0                         testl   %eax, %eax
// 372: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// 377: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 37c: 78 21                         js      0x39f <_JIT_ENTRY+0x39f>
// 37e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000380:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 388: ff d0                         callq   *%rax
// 38a: 49 ff 0c 24                   decq    (%r12)
// 38e: 75 0f                         jne     0x39f <_JIT_ENTRY+0x39f>
// 390: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000392:  R_X86_64_64  _Py_Dealloc
// 39a: 4c 89 e7                      movq    %r12, %rdi
// 39d: ff d0                         callq   *%rax
// 39f: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 3a3: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 3a8: 48 85 c9                      testq   %rcx, %rcx
// 3ab: 0f 84 32 ff ff ff             je      0x2e3 <_JIT_ENTRY+0x2e3>
// 3b1: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 3b5: 48 89 08                      movq    %rcx, (%rax)
// 3b8: 49 8b 47 10                   movq    0x10(%r15), %rax
// 3bc: 48 8b 00                      movq    (%rax), %rax
// 3bf: 84 c0                         testb   %al, %al
// 3c1: 74 17                         je      0x3da <_JIT_ENTRY+0x3da>
// 3c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c5:  R_X86_64_64  _Py_HandlePending
// 3cd: 4c 89 ff                      movq    %r15, %rdi
// 3d0: ff d0                         callq   *%rax
// 3d2: 85 c0                         testl   %eax, %eax
// 3d4: 0f 85 06 ff ff ff             jne     0x2e0 <_JIT_ENTRY+0x2e0>
// 3da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003dc:  R_X86_64_64  _JIT_CONTINUE
// 3e4: 48 89 df                      movq    %rbx, %rdi
// 3e7: 4c 89 f6                      movq    %r14, %rsi
// 3ea: 4c 89 fa                      movq    %r15, %rdx
// 3ed: 48 83 c4 38                   addq    $0x38, %rsp
// 3f1: 5b                            popq    %rbx
// 3f2: 41 5c                         popq    %r12
// 3f4: 41 5d                         popq    %r13
// 3f6: 41 5e                         popq    %r14
// 3f8: 41 5f                         popq    %r15
// 3fa: 5d                            popq    %rbp
// 3fb: ff e0                         jmpq    *%rax
// 3fd: 41 83 fd 02                   cmpl    $0x2, %r13d
// 401: b8 01 00 00 00                movl    $0x1, %eax
// 406: 41 0f 43 c5                   cmovael %r13d, %eax
// 40a: 48 89 44 24 28                movq    %rax, 0x28(%rsp)
// 40f: 31 ed                         xorl    %ebp, %ebp
// 411: eb 1b                         jmp     0x42e <_JIT_ENTRY+0x42e>
// 413: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 420: 48 ff c5                      incq    %rbp
// 423: 48 39 6c 24 28                cmpq    %rbp, 0x28(%rsp)
// 428: 0f 84 17 ff ff ff             je      0x345 <_JIT_ENTRY+0x345>
// 42e: 48 8b 44 24 30                movq    0x30(%rsp), %rax
// 433: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 437: 49 8b 45 00                   movq    (%r13), %rax
// 43b: 48 85 c0                      testq   %rax, %rax
// 43e: 7f 22                         jg      0x462 <_JIT_ENTRY+0x462>
// 440: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000442:  R_X86_64_64  .rodata.str1.1
// 44a: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 44f: 4c 89 ea                      movq    %r13, %rdx
// 452: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000454:  R_X86_64_64  _Py_NegativeRefcount
// 45c: ff d0                         callq   *%rax
// 45e: 49 8b 45 00                   movq    (%r13), %rax
// 462: 85 c0                         testl   %eax, %eax
// 464: 78 ba                         js      0x420 <_JIT_ENTRY+0x420>
// 466: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000468:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 470: ff d0                         callq   *%rax
// 472: 49 ff 4d 00                   decq    (%r13)
// 476: 75 a8                         jne     0x420 <_JIT_ENTRY+0x420>
// 478: 4c 89 ef                      movq    %r13, %rdi
// 47b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000047d:  R_X86_64_64  _Py_Dealloc
// 485: ff d0                         callq   *%rax
// 487: eb 97                         jmp     0x420 <_JIT_ENTRY+0x420>
// 489: 
static const unsigned char _CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_FAST_code_body[1162] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x6c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x7b, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x01, 0x00, 0x00, 0xe9, 0xb5, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xe5, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x59, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x4c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x89, 0x4e, 0xf0, 0x49, 0x89, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd6, 0x4c, 0x63, 0xd6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x6a, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xea, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x54, 0x24, 0x08, 0x75, 0x25, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x16, 0x49, 0x8d, 0x14, 0xce, 0x48, 0x8b, 0x3a, 0x48, 0x8b, 0x4f, 0x08, 0x49, 0x3b, 0x4c, 0x24, 0x10, 0x0f, 0x84, 0xcf, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x93, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x0c, 0xff, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x85, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x89, 0x54, 0x24, 0x30, 0x48, 0x8d, 0x72, 0x08, 0x48, 0x63, 0xd0, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb8, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x32, 0xff, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x06, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x41, 0x83, 0xfd, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xc5, 0x48, 0x89, 0x44, 0x24, 0x28, 0x31, 0xed, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x48, 0x39, 0x6c, 0x24, 0x28, 0x0f, 0x84, 0x17, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x30, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97};
static const Hole _CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_FAST_code_holes[35] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x32e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x350, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x35a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x380, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x392, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3dc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x442, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x454, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x468, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x47d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_FAST_data_holes[1];

// _CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3c                         js      0x71 <_JIT_ENTRY+0x71>
// 35: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 3d: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 50: 48 89 e2                      movq    %rsp, %rdx
// 53: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 58: 4c 89 ef                      movq    %r13, %rdi
// 5b: 4c 89 e6                      movq    %r12, %rsi
// 5e: ff d0                         callq   *%rax
// 60: 89 c5                         movl    %eax, %ebp
// 62: 49 8b 45 00                   movq    (%r13), %rax
// 66: 48 85 c0                      testq   %rax, %rax
// 69: 7e 18                         jle     0x83 <_JIT_ENTRY+0x83>
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 79 3a                         jns     0xa9 <_JIT_ENTRY+0xa9>
// 6f: eb 4a                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 71: 49 8b 45 00                   movq    (%r13), %rax
// 75: 48 85 c0                      testq   %rax, %rax
// 78: 7e 57                         jle     0xd1 <_JIT_ENTRY+0xd1>
// 7a: 85 c0                         testl   %eax, %eax
// 7c: 79 79                         jns     0xf7 <_JIT_ENTRY+0xf7>
// 7e: e9 8a 00 00 00                jmp     0x10d <_JIT_ENTRY+0x10d>
// 83: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000085:  R_X86_64_64  .rodata.str1.1
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_NegativeRefcount
// 97: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9c: 4c 89 ea                      movq    %r13, %rdx
// 9f: ff d0                         callq   *%rax
// a1: 49 8b 45 00                   movq    (%r13), %rax
// a5: 85 c0                         testl   %eax, %eax
// a7: 78 12                         js      0xbb <_JIT_ENTRY+0xbb>
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b3: ff d0                         callq   *%rax
// b5: 49 ff 4d 00                   decq    (%r13)
// b9: 74 6c                         je      0x127 <_JIT_ENTRY+0x127>
// bb: 49 8b 04 24                   movq    (%r12), %rax
// bf: 48 85 c0                      testq   %rax, %rax
// c2: 7e 7b                         jle     0x13f <_JIT_ENTRY+0x13f>
// c4: 85 c0                         testl   %eax, %eax
// c6: 0f 89 99 00 00 00             jns     0x165 <_JIT_ENTRY+0x165>
// cc: e9 aa 00 00 00                jmp     0x17b <_JIT_ENTRY+0x17b>
// d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d3:  R_X86_64_64  .rodata.str1.1
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_NegativeRefcount
// e5: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ea: 4c 89 ea                      movq    %r13, %rdx
// ed: ff d0                         callq   *%rax
// ef: 49 8b 45 00                   movq    (%r13), %rax
// f3: 85 c0                         testl   %eax, %eax
// f5: 78 16                         js      0x10d <_JIT_ENTRY+0x10d>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 101: ff d0                         callq   *%rax
// 103: 49 ff 4d 00                   decq    (%r13)
// 107: 0f 84 6c 01 00 00             je      0x279 <_JIT_ENTRY+0x279>
// 10d: 49 8b 04 24                   movq    (%r12), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 0f 8e 7b 01 00 00             jle     0x295 <_JIT_ENTRY+0x295>
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 0f 89 99 01 00 00             jns     0x2bb <_JIT_ENTRY+0x2bb>
// 122: e9 b5 01 00 00                jmp     0x2dc <_JIT_ENTRY+0x2dc>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_Dealloc
// 131: 4c 89 ef                      movq    %r13, %rdi
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 85                         jg      0xc4 <_JIT_ENTRY+0xc4>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 16                         js      0x17b <_JIT_ENTRY+0x17b>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0c 24                   decq    (%r12)
// 175: 0f 84 e5 00 00 00             je      0x260 <_JIT_ENTRY+0x260>
// 17b: 85 ed                         testl   %ebp, %ebp
// 17d: 0f 88 59 01 00 00             js      0x2dc <_JIT_ENTRY+0x2dc>
// 183: 48 8b 3c 24                   movq    (%rsp), %rdi
// 187: 48 85 ff                      testq   %rdi, %rdi
// 18a: 0f 84 4c 01 00 00             je      0x2dc <_JIT_ENTRY+0x2dc>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_NoneStruct
// 19a: 48 39 c7                      cmpq    %rax, %rdi
// 19d: 74 10                         je      0x1af <_JIT_ENTRY+0x1af>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  PyErr_SetHandledException
// 1a9: ff d0                         callq   *%rax
// 1ab: 48 8b 04 24                   movq    (%rsp), %rax
// 1af: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1b4: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1b8: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 1bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001be:  R_X86_64_64  _JIT_OPARG
// 1c6: 0f b7 d1                      movzwl  %cx, %edx
// 1c9: 89 d0                         movl    %edx, %eax
// 1cb: f7 d0                         notl    %eax
// 1cd: 4c 63 c8                      movslq  %eax, %r9
// 1d0: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// 1d4: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 1d9: 29 d6                         subl    %edx, %esi
// 1db: 4c 63 d6                      movslq  %esi, %r10
// 1de: 0f b7 c9                      movzwl  %cx, %ecx
// 1e1: 48 89 ce                      movq    %rcx, %rsi
// 1e4: 48 f7 de                      negq    %rsi
// 1e7: 44 8d 6a 01                   leal    0x1(%rdx), %r13d
// 1eb: 48 85 c0                      testq   %rax, %rax
// 1ee: 48 f7 d1                      notq    %rcx
// 1f1: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 1f5: 44 0f 44 ea                   cmovel  %edx, %r13d
// 1f9: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 1fd: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001ff:  R_X86_64_64  PyMethodDescr_Type
// 207: 49 39 54 24 08                cmpq    %rdx, 0x8(%r12)
// 20c: 75 25                         jne     0x233 <_JIT_ENTRY+0x233>
// 20e: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 213: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 21b: 75 16                         jne     0x233 <_JIT_ENTRY+0x233>
// 21d: 49 8d 14 ce                   leaq    (%r14,%rcx,8), %rdx
// 221: 48 8b 3a                      movq    (%rdx), %rdi
// 224: 48 8b 4f 08                   movq    0x8(%rdi), %rcx
// 228: 49 3b 4c 24 10                cmpq    0x10(%r12), %rcx
// 22d: 0f 84 cf 00 00 00             je      0x302 <_JIT_ENTRY+0x302>
// 233: 49 29 de                      subq    %rbx, %r14
// 236: 49 83 c6 b8                   addq    $-0x48, %r14
// 23a: 49 c1 ee 03                   shrq    $0x3, %r14
// 23e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 242: 48 8b 03                      movq    (%rbx), %rax
// 245: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000247:  R_X86_64_64  _JIT_TARGET
// 24f: 89 c9                         movl    %ecx, %ecx
// 251: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 255: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 25b: e9 93 00 00 00                jmp     0x2f3 <_JIT_ENTRY+0x2f3>
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _Py_Dealloc
// 26a: 4c 89 e7                      movq    %r12, %rdi
// 26d: ff d0                         callq   *%rax
// 26f: 85 ed                         testl   %ebp, %ebp
// 271: 0f 89 0c ff ff ff             jns     0x183 <_JIT_ENTRY+0x183>
// 277: eb 63                         jmp     0x2dc <_JIT_ENTRY+0x2dc>
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_Dealloc
// 283: 4c 89 ef                      movq    %r13, %rdi
// 286: ff d0                         callq   *%rax
// 288: 49 8b 04 24                   movq    (%r12), %rax
// 28c: 48 85 c0                      testq   %rax, %rax
// 28f: 0f 8f 85 fe ff ff             jg      0x11a <_JIT_ENTRY+0x11a>
// 295: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000297:  R_X86_64_64  .rodata.str1.1
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _Py_NegativeRefcount
// 2a9: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2ae: 4c 89 e2                      movq    %r12, %rdx
// 2b1: ff d0                         callq   *%rax
// 2b3: 49 8b 04 24                   movq    (%r12), %rax
// 2b7: 85 c0                         testl   %eax, %eax
// 2b9: 78 21                         js      0x2dc <_JIT_ENTRY+0x2dc>
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c5: ff d0                         callq   *%rax
// 2c7: 49 ff 0c 24                   decq    (%r12)
// 2cb: 75 0f                         jne     0x2dc <_JIT_ENTRY+0x2dc>
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _Py_Dealloc
// 2d7: 4c 89 e7                      movq    %r12, %rdi
// 2da: ff d0                         callq   *%rax
// 2dc: 49 83 c6 f0                   addq    $-0x10, %r14
// 2e0: 4c 89 f0                      movq    %r14, %rax
// 2e3: 48 29 d8                      subq    %rbx, %rax
// 2e6: 48 83 c0 b8                   addq    $-0x48, %rax
// 2ea: 48 c1 e8 03                   shrq    $0x3, %rax
// 2ee: 89 43 40                      movl    %eax, 0x40(%rbx)
// 2f1: 31 c0                         xorl    %eax, %eax
// 2f3: 48 83 c4 38                   addq    $0x38, %rsp
// 2f7: 5b                            popq    %rbx
// 2f8: 41 5c                         popq    %r12
// 2fa: 41 5d                         popq    %r13
// 2fc: 41 5e                         popq    %r14
// 2fe: 41 5f                         popq    %r15
// 300: 5d                            popq    %rbp
// 301: c3                            retq
// 302: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 307: 4c 89 4c 24 20                movq    %r9, 0x20(%rsp)
// 30c: 48 85 c0                      testq   %rax, %rax
// 30f: 40 0f 94 c5                   sete    %bpl
// 313: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// 317: 48 89 54 24 30                movq    %rdx, 0x30(%rsp)
// 31c: 48 8d 72 08                   leaq    0x8(%rdx), %rsi
// 320: 48 63 d0                      movslq  %eax, %rdx
// 323: 31 c9                         xorl    %ecx, %ecx
// 325: 41 ff 50 08                   callq   *0x8(%r8)
// 329: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 32e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000330:  R_X86_64_64  _JIT_OPARG
// 338: 66 85 c0                      testw   %ax, %ax
// 33b: 0f 94 c0                      sete    %al
// 33e: 40 84 c5                      testb   %al, %bpl
// 341: 0f 84 b8 00 00 00             je      0x3ff <_JIT_ENTRY+0x3ff>
// 347: 49 8b 04 24                   movq    (%r12), %rax
// 34b: 48 85 c0                      testq   %rax, %rax
// 34e: 7f 22                         jg      0x372 <_JIT_ENTRY+0x372>
// 350: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000352:  R_X86_64_64  .rodata.str1.1
// 35a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035c:  R_X86_64_64  _Py_NegativeRefcount
// 364: be e8 0b 00 00                movl    $0xbe8, %esi            # imm = 0xBE8
// 369: 4c 89 e2                      movq    %r12, %rdx
// 36c: ff d0                         callq   *%rax
// 36e: 49 8b 04 24                   movq    (%r12), %rax
// 372: 85 c0                         testl   %eax, %eax
// 374: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// 379: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 37e: 78 21                         js      0x3a1 <_JIT_ENTRY+0x3a1>
// 380: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000382:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 38a: ff d0                         callq   *%rax
// 38c: 49 ff 0c 24                   decq    (%r12)
// 390: 75 0f                         jne     0x3a1 <_JIT_ENTRY+0x3a1>
// 392: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000394:  R_X86_64_64  _Py_Dealloc
// 39c: 4c 89 e7                      movq    %r12, %rdi
// 39f: ff d0                         callq   *%rax
// 3a1: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 3a5: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 3aa: 48 85 c9                      testq   %rcx, %rcx
// 3ad: 0f 84 30 ff ff ff             je      0x2e3 <_JIT_ENTRY+0x2e3>
// 3b3: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 3b7: 48 89 08                      movq    %rcx, (%rax)
// 3ba: 49 8b 47 10                   movq    0x10(%r15), %rax
// 3be: 48 8b 00                      movq    (%rax), %rax
// 3c1: 84 c0                         testb   %al, %al
// 3c3: 74 17                         je      0x3dc <_JIT_ENTRY+0x3dc>
// 3c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c7:  R_X86_64_64  _Py_HandlePending
// 3cf: 4c 89 ff                      movq    %r15, %rdi
// 3d2: ff d0                         callq   *%rax
// 3d4: 85 c0                         testl   %eax, %eax
// 3d6: 0f 85 04 ff ff ff             jne     0x2e0 <_JIT_ENTRY+0x2e0>
// 3dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003de:  R_X86_64_64  _JIT_CONTINUE
// 3e6: 48 89 df                      movq    %rbx, %rdi
// 3e9: 4c 89 f6                      movq    %r14, %rsi
// 3ec: 4c 89 fa                      movq    %r15, %rdx
// 3ef: 48 83 c4 38                   addq    $0x38, %rsp
// 3f3: 5b                            popq    %rbx
// 3f4: 41 5c                         popq    %r12
// 3f6: 41 5d                         popq    %r13
// 3f8: 41 5e                         popq    %r14
// 3fa: 41 5f                         popq    %r15
// 3fc: 5d                            popq    %rbp
// 3fd: ff e0                         jmpq    *%rax
// 3ff: 41 83 fd 02                   cmpl    $0x2, %r13d
// 403: b8 01 00 00 00                movl    $0x1, %eax
// 408: 41 0f 43 c5                   cmovael %r13d, %eax
// 40c: 48 89 44 24 28                movq    %rax, 0x28(%rsp)
// 411: 31 ed                         xorl    %ebp, %ebp
// 413: eb 19                         jmp     0x42e <_JIT_ENTRY+0x42e>
// 415: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 420: 48 ff c5                      incq    %rbp
// 423: 48 39 6c 24 28                cmpq    %rbp, 0x28(%rsp)
// 428: 0f 84 19 ff ff ff             je      0x347 <_JIT_ENTRY+0x347>
// 42e: 48 8b 44 24 30                movq    0x30(%rsp), %rax
// 433: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 437: 49 8b 45 00                   movq    (%r13), %rax
// 43b: 48 85 c0                      testq   %rax, %rax
// 43e: 7f 22                         jg      0x462 <_JIT_ENTRY+0x462>
// 440: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000442:  R_X86_64_64  .rodata.str1.1
// 44a: be e6 0b 00 00                movl    $0xbe6, %esi            # imm = 0xBE6
// 44f: 4c 89 ea                      movq    %r13, %rdx
// 452: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000454:  R_X86_64_64  _Py_NegativeRefcount
// 45c: ff d0                         callq   *%rax
// 45e: 49 8b 45 00                   movq    (%r13), %rax
// 462: 85 c0                         testl   %eax, %eax
// 464: 78 ba                         js      0x420 <_JIT_ENTRY+0x420>
// 466: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000468:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 470: ff d0                         callq   *%rax
// 472: 49 ff 4d 00                   decq    (%r13)
// 476: 75 a8                         jne     0x420 <_JIT_ENTRY+0x420>
// 478: 4c 89 ef                      movq    %r13, %rdi
// 47b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000047d:  R_X86_64_64  _Py_Dealloc
// 485: ff d0                         callq   *%rax
// 487: eb 97                         jmp     0x420 <_JIT_ENTRY+0x420>
// 489: 
static const unsigned char _CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_body[1162] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x6c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x7b, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x01, 0x00, 0x00, 0xe9, 0xb5, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xe5, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x59, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x4c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x89, 0x4e, 0xf0, 0x49, 0x89, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd6, 0x4c, 0x63, 0xd6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x6a, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xea, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x54, 0x24, 0x08, 0x75, 0x25, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x75, 0x16, 0x49, 0x8d, 0x14, 0xce, 0x48, 0x8b, 0x3a, 0x48, 0x8b, 0x4f, 0x08, 0x49, 0x3b, 0x4c, 0x24, 0x10, 0x0f, 0x84, 0xcf, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x93, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x0c, 0xff, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x85, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x89, 0x54, 0x24, 0x30, 0x48, 0x8d, 0x72, 0x08, 0x48, 0x63, 0xd0, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xb8, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe8, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x30, 0xff, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x04, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x41, 0x83, 0xfd, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xc5, 0x48, 0x89, 0x44, 0x24, 0x28, 0x31, 0xed, 0xeb, 0x19, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x48, 0x39, 0x6c, 0x24, 0x28, 0x0f, 0x84, 0x19, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x30, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97};
static const Hole _CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_holes[35] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x330, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x352, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x35c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x382, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x394, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3de, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x442, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x454, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x468, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x47d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_holes[1];

// _CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_NOARGS
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_NOARGS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 18 00 00 00 00    movq    $0x0, 0x18(%rsp)
// 3e: 48 c7 44 24 20 00 00 00 00    movq    $0x0, 0x20(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 18                leaq    0x18(%rsp), %rdx
// 56: 48 8d 4c 24 20                leaq    0x20(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 40 02 00 00             je      0x350 <_JIT_ENTRY+0x350>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 4f 02 00 00             jle     0x36c <_JIT_ENTRY+0x36c>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 6d 02 00 00             jns     0x392 <_JIT_ENTRY+0x392>
// 125: e9 89 02 00 00                jmp     0x3b3 <_JIT_ENTRY+0x3b3>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 b9 01 00 00             je      0x337 <_JIT_ENTRY+0x337>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 2d 02 00 00             js      0x3b3 <_JIT_ENTRY+0x3b3>
// 186: 48 8b 7c 24 18                movq    0x18(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 1f 02 00 00             je      0x3b3 <_JIT_ENTRY+0x3b3>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 48 39 c7                      cmpq    %rax, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 1b4: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 1b9: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1bd: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _JIT_OPARG
// 1cb: 0f b7 c8                      movzwl  %ax, %ecx
// 1ce: 89 ca                         movl    %ecx, %edx
// 1d0: f7 d2                         notl    %edx
// 1d2: 48 63 ea                      movslq  %edx, %rbp
// 1d5: 0f b7 c0                      movzwl  %ax, %eax
// 1d8: 48 89 c2                      movq    %rax, %rdx
// 1db: 48 f7 da                      negq    %rdx
// 1de: 31 f6                         xorl    %esi, %esi
// 1e0: 66 85 c0                      testw   %ax, %ax
// 1e3: 40 0f 94 c6                   sete    %sil
// 1e7: 31 ff                         xorl    %edi, %edi
// 1e9: 66 83 f8 01                   cmpw    $0x1, %ax
// 1ed: 40 0f 94 c7                   sete    %dil
// 1f1: 49 83 3c ee 00                cmpq    $0x0, (%r14,%rbp,8)
// 1f6: 48 f7 d0                      notq    %rax
// 1f9: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1fd: 0f 44 f7                      cmovel  %edi, %esi
// 200: 40 80 fe 01                   cmpb    $0x1, %sil
// 204: 0f 85 00 01 00 00             jne     0x30a <_JIT_ENTRY+0x30a>
// 20a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 20f: 29 ca                         subl    %ecx, %edx
// 211: 4c 63 ea                      movslq  %edx, %r13
// 214: 4f 8b 24 ee                   movq    (%r14,%r13,8), %r12
// 218: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021a:  R_X86_64_64  PyMethodDescr_Type
// 222: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 227: 0f 85 dd 00 00 00             jne     0x30a <_JIT_ENTRY+0x30a>
// 22d: 49 8b 14 c6                   movq    (%r14,%rax,8), %rdx
// 231: 48 8b 42 08                   movq    0x8(%rdx), %rax
// 235: 49 3b 44 24 10                cmpq    0x10(%r12), %rax
// 23a: 0f 85 ca 00 00 00             jne     0x30a <_JIT_ENTRY+0x30a>
// 240: 49 8b 44 24 28                movq    0x28(%r12), %rax
// 245: 83 78 10 04                   cmpl    $0x4, 0x10(%rax)
// 249: 0f 85 bb 00 00 00             jne     0x30a <_JIT_ENTRY+0x30a>
// 24f: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 253: 41 8b 47 2c                   movl    0x2c(%r15), %eax
// 257: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 25a: 41 89 4f 2c                   movl    %ecx, 0x2c(%r15)
// 25e: 85 c0                         testl   %eax, %eax
// 260: 0f 8e 71 01 00 00             jle     0x3d7 <_JIT_ENTRY+0x3d7>
// 266: 4b 8d 04 ee                   leaq    (%r14,%r13,8), %rax
// 26a: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 26f: 49 89 d5                      movq    %rdx, %r13
// 272: 48 89 d7                      movq    %rdx, %rdi
// 275: 31 f6                         xorl    %esi, %esi
// 277: 41 ff d0                      callq   *%r8
// 27a: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 27f: 41 ff 47 2c                   incl    0x2c(%r15)
// 283: bf 10 0c 00 00                movl    $0xc10, %edi            # imm = 0xC10
// 288: 4c 89 ee                      movq    %r13, %rsi
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  .text+0x420
// 295: ff d0                         callq   *%rax
// 297: bf 11 0c 00 00                movl    $0xc11, %edi            # imm = 0xC11
// 29c: 4c 89 e6                      movq    %r12, %rsi
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  .text+0x420
// 2a9: ff d0                         callq   *%rax
// 2ab: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 2b0: 48 85 c9                      testq   %rcx, %rcx
// 2b3: 0f 84 54 01 00 00             je      0x40d <_JIT_ENTRY+0x40d>
// 2b9: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 2bd: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2c2: 48 89 08                      movq    %rcx, (%rax)
// 2c5: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2c9: 48 8b 00                      movq    (%rax), %rax
// 2cc: 84 c0                         testb   %al, %al
// 2ce: 74 17                         je      0x2e7 <_JIT_ENTRY+0x2e7>
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _Py_HandlePending
// 2da: 4c 89 ff                      movq    %r15, %rdi
// 2dd: ff d0                         callq   *%rax
// 2df: 85 c0                         testl   %eax, %eax
// 2e1: 0f 85 d0 00 00 00             jne     0x3b7 <_JIT_ENTRY+0x3b7>
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  _JIT_CONTINUE
// 2f1: 48 89 df                      movq    %rbx, %rdi
// 2f4: 4c 89 f6                      movq    %r14, %rsi
// 2f7: 4c 89 fa                      movq    %r15, %rdx
// 2fa: 48 83 c4 28                   addq    $0x28, %rsp
// 2fe: 5b                            popq    %rbx
// 2ff: 41 5c                         popq    %r12
// 301: 41 5d                         popq    %r13
// 303: 41 5e                         popq    %r14
// 305: 41 5f                         popq    %r15
// 307: 5d                            popq    %rbp
// 308: ff e0                         jmpq    *%rax
// 30a: 49 29 de                      subq    %rbx, %r14
// 30d: 49 83 c6 b8                   addq    $-0x48, %r14
// 311: 49 c1 ee 03                   shrq    $0x3, %r14
// 315: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 319: 48 8b 03                      movq    (%rbx), %rax
// 31c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000031e:  R_X86_64_64  _JIT_TARGET
// 326: 89 c9                         movl    %ecx, %ecx
// 328: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 32c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 332: e9 91 00 00 00                jmp     0x3c8 <_JIT_ENTRY+0x3c8>
// 337: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000339:  R_X86_64_64  _Py_Dealloc
// 341: 4c 89 e7                      movq    %r12, %rdi
// 344: ff d0                         callq   *%rax
// 346: 85 ed                         testl   %ebp, %ebp
// 348: 0f 89 38 fe ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 34e: eb 63                         jmp     0x3b3 <_JIT_ENTRY+0x3b3>
// 350: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000352:  R_X86_64_64  _Py_Dealloc
// 35a: 4c 89 ef                      movq    %r13, %rdi
// 35d: ff d0                         callq   *%rax
// 35f: 49 8b 04 24                   movq    (%r12), %rax
// 363: 48 85 c0                      testq   %rax, %rax
// 366: 0f 8f b1 fd ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 36c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000036e:  R_X86_64_64  .rodata.str1.1
// 376: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000378:  R_X86_64_64  _Py_NegativeRefcount
// 380: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 385: 4c 89 e2                      movq    %r12, %rdx
// 388: ff d0                         callq   *%rax
// 38a: 49 8b 04 24                   movq    (%r12), %rax
// 38e: 85 c0                         testl   %eax, %eax
// 390: 78 21                         js      0x3b3 <_JIT_ENTRY+0x3b3>
// 392: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000394:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 39c: ff d0                         callq   *%rax
// 39e: 49 ff 0c 24                   decq    (%r12)
// 3a2: 75 0f                         jne     0x3b3 <_JIT_ENTRY+0x3b3>
// 3a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a6:  R_X86_64_64  _Py_Dealloc
// 3ae: 4c 89 e7                      movq    %r12, %rdi
// 3b1: ff d0                         callq   *%rax
// 3b3: 49 83 c6 f0                   addq    $-0x10, %r14
// 3b7: 49 29 de                      subq    %rbx, %r14
// 3ba: 49 83 c6 b8                   addq    $-0x48, %r14
// 3be: 49 c1 ee 03                   shrq    $0x3, %r14
// 3c2: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 3c6: 31 c0                         xorl    %eax, %eax
// 3c8: 48 83 c4 28                   addq    $0x28, %rsp
// 3cc: 5b                            popq    %rbx
// 3cd: 41 5c                         popq    %r12
// 3cf: 41 5d                         popq    %r13
// 3d1: 41 5e                         popq    %r14
// 3d3: 41 5f                         popq    %r15
// 3d5: 5d                            popq    %rbp
// 3d6: c3                            retq
// 3d7: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000003d9:  R_X86_64_64  .rodata.str1.1+0x39
// 3e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e3:  R_X86_64_64  _Py_CheckRecursiveCall
// 3eb: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 3f0: 4c 89 ff                      movq    %r15, %rdi
// 3f3: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// 3f8: ff d0                         callq   *%rax
// 3fa: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 3ff: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 404: 85 c0                         testl   %eax, %eax
// 406: 75 af                         jne     0x3b7 <_JIT_ENTRY+0x3b7>
// 408: e9 59 fe ff ff                jmp     0x266 <_JIT_ENTRY+0x266>
// 40d: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 412: eb a3                         jmp     0x3b7 <_JIT_ENTRY+0x3b7>
// 414: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 
// 0000000000000420 <Py_DECREF>:
// 420: 53                            pushq   %rbx
// 421: 48 89 f3                      movq    %rsi, %rbx
// 424: 48 8b 06                      movq    (%rsi), %rax
// 427: 48 85 c0                      testq   %rax, %rax
// 42a: 7e 06                         jle     0x432 <Py_DECREF+0x12>
// 42c: 85 c0                         testl   %eax, %eax
// 42e: 79 24                         jns     0x454 <Py_DECREF+0x34>
// 430: eb 33                         jmp     0x465 <Py_DECREF+0x45>
// 432: 89 fe                         movl    %edi, %esi
// 434: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000436:  R_X86_64_64  .rodata.str1.1
// 43e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000440:  R_X86_64_64  _Py_NegativeRefcount
// 448: 48 89 da                      movq    %rbx, %rdx
// 44b: ff d0                         callq   *%rax
// 44d: 48 8b 03                      movq    (%rbx), %rax
// 450: 85 c0                         testl   %eax, %eax
// 452: 78 11                         js      0x465 <Py_DECREF+0x45>
// 454: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000456:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 45e: ff d0                         callq   *%rax
// 460: 48 ff 0b                      decq    (%rbx)
// 463: 74 02                         je      0x467 <Py_DECREF+0x47>
// 465: 5b                            popq    %rbx
// 466: c3                            retq
// 467: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000469:  R_X86_64_64  _Py_Dealloc
// 471: 48 89 df                      movq    %rbx, %rdi
// 474: 5b                            popq    %rbx
// 475: ff e0                         jmpq    *%rax
// 477: 
static const unsigned char _CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_body[1144] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x18, 0x48, 0x8d, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x40, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x4f, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x6d, 0x02, 0x00, 0x00, 0xe9, 0x89, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xb9, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x2d, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x18, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x1f, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x49, 0x89, 0x4e, 0xf0, 0x49, 0x89, 0x46, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xea, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x49, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x0f, 0x85, 0x00, 0x01, 0x00, 0x00, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x4c, 0x63, 0xea, 0x4f, 0x8b, 0x24, 0xee, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0xdd, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x14, 0xc6, 0x48, 0x8b, 0x42, 0x08, 0x49, 0x3b, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xca, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x28, 0x83, 0x78, 0x10, 0x04, 0x0f, 0x85, 0xbb, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x41, 0x8b, 0x47, 0x2c, 0x8d, 0x48, 0xff, 0x41, 0x89, 0x4f, 0x2c, 0x85, 0xc0, 0x0f, 0x8e, 0x71, 0x01, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xee, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x89, 0xd5, 0x48, 0x89, 0xd7, 0x31, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xff, 0x47, 0x2c, 0xbf, 0x10, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xbf, 0x11, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x54, 0x01, 0x00, 0x00, 0x4d, 0x8d, 0x34, 0xee, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xd0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x91, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x38, 0xfe, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xb1, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x10, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x85, 0xc0, 0x75, 0xaf, 0xe9, 0x59, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0xeb, 0xa3, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_holes[34] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x420},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x420},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x31e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x339, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x352, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x36e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x378, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x394, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3d9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x3e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x436, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x440, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x456, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x469, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_holes[1];

// _CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_O
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_O.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 3e: 48 c7 44 24 20 00 00 00 00    movq    $0x0, 0x20(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 10                leaq    0x10(%rsp), %rdx
// 56: 48 8d 4c 24 20                leaq    0x20(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 7a 01 00 00             je      0x28a <_JIT_ENTRY+0x28a>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 89 01 00 00             jle     0x2a6 <_JIT_ENTRY+0x2a6>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 a7 01 00 00             jns     0x2cc <_JIT_ENTRY+0x2cc>
// 125: e9 c3 01 00 00                jmp     0x2ed <_JIT_ENTRY+0x2ed>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 f3 00 00 00             je      0x271 <_JIT_ENTRY+0x271>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 67 01 00 00             js      0x2ed <_JIT_ENTRY+0x2ed>
// 186: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 59 01 00 00             je      0x2ed <_JIT_ENTRY+0x2ed>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 48 39 c7                      cmpq    %rax, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b4: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
// 1b9: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1bd: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _JIT_OPARG
// 1cb: 0f b7 c8                      movzwl  %ax, %ecx
// 1ce: 89 ca                         movl    %ecx, %edx
// 1d0: f7 d2                         notl    %edx
// 1d2: 4c 63 ea                      movslq  %edx, %r13
// 1d5: 0f b7 c0                      movzwl  %ax, %eax
// 1d8: 48 89 c2                      movq    %rax, %rdx
// 1db: 48 f7 da                      negq    %rdx
// 1de: 31 f6                         xorl    %esi, %esi
// 1e0: 66 83 f8 01                   cmpw    $0x1, %ax
// 1e4: 40 0f 94 c6                   sete    %sil
// 1e8: 31 ff                         xorl    %edi, %edi
// 1ea: 66 83 f8 02                   cmpw    $0x2, %ax
// 1ee: 40 0f 94 c7                   sete    %dil
// 1f2: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// 1f7: 48 f7 d0                      notq    %rax
// 1fa: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1fe: 0f 44 f7                      cmovel  %edi, %esi
// 201: 40 80 fe 01                   cmpb    $0x1, %sil
// 205: 75 3d                         jne     0x244 <_JIT_ENTRY+0x244>
// 207: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 20c: 29 ca                         subl    %ecx, %edx
// 20e: 48 63 ea                      movslq  %edx, %rbp
// 211: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 215: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000217:  R_X86_64_64  PyMethodDescr_Type
// 21f: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 224: 75 1e                         jne     0x244 <_JIT_ENTRY+0x244>
// 226: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 22b: 83 79 10 08                   cmpl    $0x8, 0x10(%rcx)
// 22f: 75 13                         jne     0x244 <_JIT_ENTRY+0x244>
// 231: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// 235: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 239: 49 3b 54 24 10                cmpq    0x10(%r12), %rdx
// 23e: 0f 84 cd 00 00 00             je      0x311 <_JIT_ENTRY+0x311>
// 244: 49 29 de                      subq    %rbx, %r14
// 247: 49 83 c6 b8                   addq    $-0x48, %r14
// 24b: 49 c1 ee 03                   shrq    $0x3, %r14
// 24f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 253: 48 8b 03                      movq    (%rbx), %rax
// 256: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000258:  R_X86_64_64  _JIT_TARGET
// 260: 89 c9                         movl    %ecx, %ecx
// 262: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 266: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 26c: e9 91 00 00 00                jmp     0x302 <_JIT_ENTRY+0x302>
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_Dealloc
// 27b: 4c 89 e7                      movq    %r12, %rdi
// 27e: ff d0                         callq   *%rax
// 280: 85 ed                         testl   %ebp, %ebp
// 282: 0f 89 fe fe ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 288: eb 63                         jmp     0x2ed <_JIT_ENTRY+0x2ed>
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _Py_Dealloc
// 294: 4c 89 ef                      movq    %r13, %rdi
// 297: ff d0                         callq   *%rax
// 299: 49 8b 04 24                   movq    (%r12), %rax
// 29d: 48 85 c0                      testq   %rax, %rax
// 2a0: 0f 8f 77 fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 2a6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a8:  R_X86_64_64  .rodata.str1.1
// 2b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b2:  R_X86_64_64  _Py_NegativeRefcount
// 2ba: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2bf: 4c 89 e2                      movq    %r12, %rdx
// 2c2: ff d0                         callq   *%rax
// 2c4: 49 8b 04 24                   movq    (%r12), %rax
// 2c8: 85 c0                         testl   %eax, %eax
// 2ca: 78 21                         js      0x2ed <_JIT_ENTRY+0x2ed>
// 2cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ce:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d6: ff d0                         callq   *%rax
// 2d8: 49 ff 0c 24                   decq    (%r12)
// 2dc: 75 0f                         jne     0x2ed <_JIT_ENTRY+0x2ed>
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_Dealloc
// 2e8: 4c 89 e7                      movq    %r12, %rdi
// 2eb: ff d0                         callq   *%rax
// 2ed: 49 83 c6 f0                   addq    $-0x10, %r14
// 2f1: 49 29 de                      subq    %rbx, %r14
// 2f4: 49 83 c6 b8                   addq    $-0x48, %r14
// 2f8: 49 c1 ee 03                   shrq    $0x3, %r14
// 2fc: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 300: 31 c0                         xorl    %eax, %eax
// 302: 48 83 c4 28                   addq    $0x28, %rsp
// 306: 5b                            popq    %rbx
// 307: 41 5c                         popq    %r12
// 309: 41 5d                         popq    %r13
// 30b: 41 5e                         popq    %r14
// 30d: 41 5f                         popq    %r15
// 30f: 5d                            popq    %rbp
// 310: c3                            retq
// 311: 49 8b 54 c6 08                movq    0x8(%r14,%rax,8), %rdx
// 316: 4c 8b 41 08                   movq    0x8(%rcx), %r8
// 31a: 41 8b 47 2c                   movl    0x2c(%r15), %eax
// 31e: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 321: 41 89 4f 2c                   movl    %ecx, 0x2c(%r15)
// 325: 85 c0                         testl   %eax, %eax
// 327: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 32c: 0f 8e ac 00 00 00             jle     0x3de <_JIT_ENTRY+0x3de>
// 332: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 336: 48 89 04 24                   movq    %rax, (%rsp)
// 33a: 48 89 fd                      movq    %rdi, %rbp
// 33d: 48 89 d6                      movq    %rdx, %rsi
// 340: 41 ff d0                      callq   *%r8
// 343: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 348: 41 ff 47 2c                   incl    0x2c(%r15)
// 34c: bf bf 0b 00 00                movl    $0xbbf, %edi            # imm = 0xBBF
// 351: 48 89 ee                      movq    %rbp, %rsi
// 354: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000356:  R_X86_64_64  .text+0x430
// 35e: ff d0                         callq   *%rax
// 360: bf c0 0b 00 00                movl    $0xbc0, %edi            # imm = 0xBC0
// 365: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// 36a: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000036c:  R_X86_64_64  .text+0x430
// 374: ff d5                         callq   *%rbp
// 376: bf c1 0b 00 00                movl    $0xbc1, %edi            # imm = 0xBC1
// 37b: 4c 89 e6                      movq    %r12, %rsi
// 37e: ff d5                         callq   *%rbp
// 380: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 385: 48 85 c9                      testq   %rcx, %rcx
// 388: 0f 84 8d 00 00 00             je      0x41b <_JIT_ENTRY+0x41b>
// 38e: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 392: 48 8b 04 24                   movq    (%rsp), %rax
// 396: 48 89 08                      movq    %rcx, (%rax)
// 399: 49 8b 47 10                   movq    0x10(%r15), %rax
// 39d: 48 8b 00                      movq    (%rax), %rax
// 3a0: 84 c0                         testb   %al, %al
// 3a2: 74 17                         je      0x3bb <_JIT_ENTRY+0x3bb>
// 3a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a6:  R_X86_64_64  _Py_HandlePending
// 3ae: 4c 89 ff                      movq    %r15, %rdi
// 3b1: ff d0                         callq   *%rax
// 3b3: 85 c0                         testl   %eax, %eax
// 3b5: 0f 85 36 ff ff ff             jne     0x2f1 <_JIT_ENTRY+0x2f1>
// 3bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bd:  R_X86_64_64  _JIT_CONTINUE
// 3c5: 48 89 df                      movq    %rbx, %rdi
// 3c8: 4c 89 f6                      movq    %r14, %rsi
// 3cb: 4c 89 fa                      movq    %r15, %rdx
// 3ce: 48 83 c4 28                   addq    $0x28, %rsp
// 3d2: 5b                            popq    %rbx
// 3d3: 41 5c                         popq    %r12
// 3d5: 41 5d                         popq    %r13
// 3d7: 41 5e                         popq    %r14
// 3d9: 41 5f                         popq    %r15
// 3db: 5d                            popq    %rbp
// 3dc: ff e0                         jmpq    *%rax
// 3de: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000003e0:  R_X86_64_64  .rodata.str1.1+0x39
// 3e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ea:  R_X86_64_64  _Py_CheckRecursiveCall
// 3f2: 48 89 3c 24                   movq    %rdi, (%rsp)
// 3f6: 4c 89 ff                      movq    %r15, %rdi
// 3f9: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// 3fe: ff d0                         callq   *%rax
// 400: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 405: 48 8b 3c 24                   movq    (%rsp), %rdi
// 409: 48 8b 54 24 18                movq    0x18(%rsp), %rdx
// 40e: 85 c0                         testl   %eax, %eax
// 410: 0f 85 db fe ff ff             jne     0x2f1 <_JIT_ENTRY+0x2f1>
// 416: e9 17 ff ff ff                jmp     0x332 <_JIT_ENTRY+0x332>
// 41b: 4c 8b 34 24                   movq    (%rsp), %r14
// 41f: e9 cd fe ff ff                jmp     0x2f1 <_JIT_ENTRY+0x2f1>
// 424: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 
// 0000000000000430 <Py_DECREF>:
// 430: 53                            pushq   %rbx
// 431: 48 89 f3                      movq    %rsi, %rbx
// 434: 48 8b 06                      movq    (%rsi), %rax
// 437: 48 85 c0                      testq   %rax, %rax
// 43a: 7e 06                         jle     0x442 <Py_DECREF+0x12>
// 43c: 85 c0                         testl   %eax, %eax
// 43e: 79 24                         jns     0x464 <Py_DECREF+0x34>
// 440: eb 33                         jmp     0x475 <Py_DECREF+0x45>
// 442: 89 fe                         movl    %edi, %esi
// 444: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000446:  R_X86_64_64  .rodata.str1.1
// 44e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000450:  R_X86_64_64  _Py_NegativeRefcount
// 458: 48 89 da                      movq    %rbx, %rdx
// 45b: ff d0                         callq   *%rax
// 45d: 48 8b 03                      movq    (%rbx), %rax
// 460: 85 c0                         testl   %eax, %eax
// 462: 78 11                         js      0x475 <Py_DECREF+0x45>
// 464: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000466:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 46e: ff d0                         callq   *%rax
// 470: 48 ff 0b                      decq    (%rbx)
// 473: 74 02                         je      0x477 <Py_DECREF+0x47>
// 475: 5b                            popq    %rbx
// 476: c3                            retq
// 477: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000479:  R_X86_64_64  _Py_Dealloc
// 481: 48 89 df                      movq    %rbx, %rdi
// 484: 5b                            popq    %rbx
// 485: ff e0                         jmpq    *%rax
// 487: 
static const unsigned char _CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_O_code_body[1160] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x10, 0x48, 0x8d, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x7a, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x89, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xa7, 0x01, 0x00, 0x00, 0xe9, 0xc3, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xf3, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x67, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x59, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x49, 0x89, 0x4e, 0xf0, 0x49, 0x89, 0x46, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x02, 0x40, 0x0f, 0x94, 0xc7, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x3d, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xea, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x1e, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x83, 0x79, 0x10, 0x08, 0x75, 0x13, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0x8b, 0x57, 0x08, 0x49, 0x3b, 0x54, 0x24, 0x10, 0x0f, 0x84, 0xcd, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x91, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0xfe, 0xfe, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x77, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x54, 0xc6, 0x08, 0x4c, 0x8b, 0x41, 0x08, 0x41, 0x8b, 0x47, 0x2c, 0x8d, 0x48, 0xff, 0x41, 0x89, 0x4f, 0x2c, 0x85, 0xc0, 0x48, 0x89, 0x54, 0x24, 0x18, 0x0f, 0x8e, 0xac, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x89, 0x04, 0x24, 0x48, 0x89, 0xfd, 0x48, 0x89, 0xd6, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x41, 0xff, 0x47, 0x2c, 0xbf, 0xbf, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xbf, 0xc0, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd5, 0xbf, 0xc1, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd5, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x36, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x3c, 0x24, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x18, 0x85, 0xc0, 0x0f, 0x85, 0xdb, 0xfe, 0xff, 0xff, 0xe9, 0x17, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x34, 0x24, 0xe9, 0xcd, 0xfe, 0xff, 0xff, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_O_code_holes[34] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x356, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x430},
    {0x36c, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x430},
    {0x3a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3bd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3e0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x3ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x446, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x450, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x466, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x479, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_O_data_holes[1];

// _CHECK_EG_MATCHplus_CALL_STR_1
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CALL_STR_1.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3c                         js      0x71 <_JIT_ENTRY+0x71>
// 35: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 3d: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 50: 48 89 e2                      movq    %rsp, %rdx
// 53: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 58: 4c 89 ef                      movq    %r13, %rdi
// 5b: 4c 89 e6                      movq    %r12, %rsi
// 5e: ff d0                         callq   *%rax
// 60: 89 c5                         movl    %eax, %ebp
// 62: 49 8b 45 00                   movq    (%r13), %rax
// 66: 48 85 c0                      testq   %rax, %rax
// 69: 7e 18                         jle     0x83 <_JIT_ENTRY+0x83>
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 79 3a                         jns     0xa9 <_JIT_ENTRY+0xa9>
// 6f: eb 4a                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 71: 49 8b 45 00                   movq    (%r13), %rax
// 75: 48 85 c0                      testq   %rax, %rax
// 78: 7e 57                         jle     0xd1 <_JIT_ENTRY+0xd1>
// 7a: 85 c0                         testl   %eax, %eax
// 7c: 79 79                         jns     0xf7 <_JIT_ENTRY+0xf7>
// 7e: e9 8a 00 00 00                jmp     0x10d <_JIT_ENTRY+0x10d>
// 83: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000085:  R_X86_64_64  .rodata.str1.1
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_NegativeRefcount
// 97: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9c: 4c 89 ea                      movq    %r13, %rdx
// 9f: ff d0                         callq   *%rax
// a1: 49 8b 45 00                   movq    (%r13), %rax
// a5: 85 c0                         testl   %eax, %eax
// a7: 78 12                         js      0xbb <_JIT_ENTRY+0xbb>
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b3: ff d0                         callq   *%rax
// b5: 49 ff 4d 00                   decq    (%r13)
// b9: 74 6c                         je      0x127 <_JIT_ENTRY+0x127>
// bb: 49 8b 04 24                   movq    (%r12), %rax
// bf: 48 85 c0                      testq   %rax, %rax
// c2: 7e 7b                         jle     0x13f <_JIT_ENTRY+0x13f>
// c4: 85 c0                         testl   %eax, %eax
// c6: 0f 89 99 00 00 00             jns     0x165 <_JIT_ENTRY+0x165>
// cc: e9 aa 00 00 00                jmp     0x17b <_JIT_ENTRY+0x17b>
// d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d3:  R_X86_64_64  .rodata.str1.1
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_NegativeRefcount
// e5: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ea: 4c 89 ea                      movq    %r13, %rdx
// ed: ff d0                         callq   *%rax
// ef: 49 8b 45 00                   movq    (%r13), %rax
// f3: 85 c0                         testl   %eax, %eax
// f5: 78 16                         js      0x10d <_JIT_ENTRY+0x10d>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 101: ff d0                         callq   *%rax
// 103: 49 ff 4d 00                   decq    (%r13)
// 107: 0f 84 34 01 00 00             je      0x241 <_JIT_ENTRY+0x241>
// 10d: 49 8b 04 24                   movq    (%r12), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 0f 8e 43 01 00 00             jle     0x25d <_JIT_ENTRY+0x25d>
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 0f 89 61 01 00 00             jns     0x283 <_JIT_ENTRY+0x283>
// 122: e9 7d 01 00 00                jmp     0x2a4 <_JIT_ENTRY+0x2a4>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_Dealloc
// 131: 4c 89 ef                      movq    %r13, %rdi
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 85                         jg      0xc4 <_JIT_ENTRY+0xc4>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 16                         js      0x17b <_JIT_ENTRY+0x17b>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0c 24                   decq    (%r12)
// 175: 0f 84 ad 00 00 00             je      0x228 <_JIT_ENTRY+0x228>
// 17b: 85 ed                         testl   %ebp, %ebp
// 17d: 0f 88 21 01 00 00             js      0x2a4 <_JIT_ENTRY+0x2a4>
// 183: 48 8b 3c 24                   movq    (%rsp), %rdi
// 187: 48 85 ff                      testq   %rdi, %rdi
// 18a: 0f 84 14 01 00 00             je      0x2a4 <_JIT_ENTRY+0x2a4>
// 190: 4d 89 f4                      movq    %r14, %r12
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NoneStruct
// 19d: 48 39 c7                      cmpq    %rax, %rdi
// 1a0: 74 10                         je      0x1b2 <_JIT_ENTRY+0x1b2>
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  PyErr_SetHandledException
// 1ac: ff d0                         callq   *%rax
// 1ae: 48 8b 04 24                   movq    (%rsp), %rax
// 1b2: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1b7: 49 89 4f f0                   movq    %rcx, -0x10(%r15)
// 1bb: 49 89 47 f8                   movq    %rax, -0x8(%r15)
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _JIT_OPARG
// 1c9: 0f b7 c0                      movzwl  %ax, %eax
// 1cc: 89 c1                         movl    %eax, %ecx
// 1ce: f7 d1                         notl    %ecx
// 1d0: 4c 63 e9                      movslq  %ecx, %r13
// 1d3: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 1d8: 75 21                         jne     0x1fb <_JIT_ENTRY+0x1fb>
// 1da: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1df: 29 c1                         subl    %eax, %ecx
// 1e1: 48 63 c1                      movslq  %ecx, %rax
// 1e4: 4d 8d 34 c7                   leaq    (%r15,%rax,8), %r14
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  PyUnicode_Type
// 1f2: 49 39 06                      cmpq    %rax, (%r14)
// 1f5: 0f 84 d0 00 00 00             je      0x2cb <_JIT_ENTRY+0x2cb>
// 1fb: 49 29 df                      subq    %rbx, %r15
// 1fe: 49 83 c7 b8                   addq    $-0x48, %r15
// 202: 49 c1 ef 03                   shrq    $0x3, %r15
// 206: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 20a: 48 8b 03                      movq    (%rbx), %rax
// 20d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020f:  R_X86_64_64  _JIT_TARGET
// 217: 89 c9                         movl    %ecx, %ecx
// 219: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 21d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 223: e9 94 00 00 00                jmp     0x2bc <_JIT_ENTRY+0x2bc>
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _Py_Dealloc
// 232: 4c 89 e7                      movq    %r12, %rdi
// 235: ff d0                         callq   *%rax
// 237: 85 ed                         testl   %ebp, %ebp
// 239: 0f 89 44 ff ff ff             jns     0x183 <_JIT_ENTRY+0x183>
// 23f: eb 63                         jmp     0x2a4 <_JIT_ENTRY+0x2a4>
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _Py_Dealloc
// 24b: 4c 89 ef                      movq    %r13, %rdi
// 24e: ff d0                         callq   *%rax
// 250: 49 8b 04 24                   movq    (%r12), %rax
// 254: 48 85 c0                      testq   %rax, %rax
// 257: 0f 8f bd fe ff ff             jg      0x11a <_JIT_ENTRY+0x11a>
// 25d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025f:  R_X86_64_64  .rodata.str1.1
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _Py_NegativeRefcount
// 271: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 276: 4c 89 e2                      movq    %r12, %rdx
// 279: ff d0                         callq   *%rax
// 27b: 49 8b 04 24                   movq    (%r12), %rax
// 27f: 85 c0                         testl   %eax, %eax
// 281: 78 21                         js      0x2a4 <_JIT_ENTRY+0x2a4>
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28d: ff d0                         callq   *%rax
// 28f: 49 ff 0c 24                   decq    (%r12)
// 293: 75 0f                         jne     0x2a4 <_JIT_ENTRY+0x2a4>
// 295: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000297:  R_X86_64_64  _Py_Dealloc
// 29f: 4c 89 e7                      movq    %r12, %rdi
// 2a2: ff d0                         callq   *%rax
// 2a4: 49 83 c7 f0                   addq    $-0x10, %r15
// 2a8: 4d 89 fe                      movq    %r15, %r14
// 2ab: 49 29 de                      subq    %rbx, %r14
// 2ae: 49 83 c6 b8                   addq    $-0x48, %r14
// 2b2: 49 c1 ee 03                   shrq    $0x3, %r14
// 2b6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2ba: 31 c0                         xorl    %eax, %eax
// 2bc: 48 83 c4 18                   addq    $0x18, %rsp
// 2c0: 5b                            popq    %rbx
// 2c1: 41 5c                         popq    %r12
// 2c3: 41 5d                         popq    %r13
// 2c5: 41 5e                         popq    %r14
// 2c7: 41 5f                         popq    %r15
// 2c9: 5d                            popq    %rbp
// 2ca: c3                            retq
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _JIT_OPARG
// 2d5: 0f b7 c0                      movzwl  %ax, %eax
// 2d8: 48 c1 e0 03                   shlq    $0x3, %rax
// 2dc: 4c 89 f9                      movq    %r15, %rcx
// 2df: 48 29 c1                      subq    %rax, %rcx
// 2e2: 48 8b 29                      movq    (%rcx), %rbp
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  PyObject_Str
// 2ef: 48 89 ef                      movq    %rbp, %rdi
// 2f2: ff d0                         callq   *%rax
// 2f4: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 2f9: 48 8b 45 00                   movq    (%rbp), %rax
// 2fd: 48 85 c0                      testq   %rax, %rax
// 300: 7f 22                         jg      0x324 <_JIT_ENTRY+0x324>
// 302: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000304:  R_X86_64_64  .rodata.str1.1
// 30c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030e:  R_X86_64_64  _Py_NegativeRefcount
// 316: be 95 0a 00 00                movl    $0xa95, %esi            # imm = 0xA95
// 31b: 48 89 ea                      movq    %rbp, %rdx
// 31e: ff d0                         callq   *%rax
// 320: 48 8b 45 00                   movq    (%rbp), %rax
// 324: 85 c0                         testl   %eax, %eax
// 326: 78 21                         js      0x349 <_JIT_ENTRY+0x349>
// 328: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 332: ff d0                         callq   *%rax
// 334: 48 ff 4d 00                   decq    (%rbp)
// 338: 75 0f                         jne     0x349 <_JIT_ENTRY+0x349>
// 33a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033c:  R_X86_64_64  _Py_Dealloc
// 344: 48 89 ef                      movq    %rbp, %rdi
// 347: ff d0                         callq   *%rax
// 349: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000034b:  R_X86_64_64  PyUnicode_Type
// 353: 48 8b 45 00                   movq    (%rbp), %rax
// 357: 48 85 c0                      testq   %rax, %rax
// 35a: 7f 22                         jg      0x37e <_JIT_ENTRY+0x37e>
// 35c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000035e:  R_X86_64_64  .rodata.str1.1
// 366: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000368:  R_X86_64_64  _Py_NegativeRefcount
// 370: be 96 0a 00 00                movl    $0xa96, %esi            # imm = 0xA96
// 375: 48 89 ea                      movq    %rbp, %rdx
// 378: ff d0                         callq   *%rax
// 37a: 48 8b 45 00                   movq    (%rbp), %rax
// 37e: 85 c0                         testl   %eax, %eax
// 380: 78 28                         js      0x3aa <_JIT_ENTRY+0x3aa>
// 382: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000384:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 38c: ff d0                         callq   *%rax
// 38e: 48 ff 4d 00                   decq    (%rbp)
// 392: 75 16                         jne     0x3aa <_JIT_ENTRY+0x3aa>
// 394: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000396:  R_X86_64_64  PyUnicode_Type
// 39e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a0:  R_X86_64_64  _Py_Dealloc
// 3a8: ff d0                         callq   *%rax
// 3aa: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 3af: 48 85 c0                      testq   %rax, %rax
// 3b2: 0f 84 f3 fe ff ff             je      0x2ab <_JIT_ENTRY+0x2ab>
// 3b8: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// 3bc: 49 89 06                      movq    %rax, (%r14)
// 3bf: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 3c4: 48 8b 00                      movq    (%rax), %rax
// 3c7: 84 c0                         testb   %al, %al
// 3c9: 74 17                         je      0x3e2 <_JIT_ENTRY+0x3e2>
// 3cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003cd:  R_X86_64_64  _Py_HandlePending
// 3d5: 4c 89 e7                      movq    %r12, %rdi
// 3d8: ff d0                         callq   *%rax
// 3da: 85 c0                         testl   %eax, %eax
// 3dc: 0f 85 c6 fe ff ff             jne     0x2a8 <_JIT_ENTRY+0x2a8>
// 3e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e4:  R_X86_64_64  _JIT_CONTINUE
// 3ec: 48 89 df                      movq    %rbx, %rdi
// 3ef: 4c 89 fe                      movq    %r15, %rsi
// 3f2: 4c 89 e2                      movq    %r12, %rdx
// 3f5: 48 83 c4 18                   addq    $0x18, %rsp
// 3f9: 5b                            popq    %rbx
// 3fa: 41 5c                         popq    %r12
// 3fc: 41 5d                         popq    %r13
// 3fe: 41 5e                         popq    %r14
// 400: 41 5f                         popq    %r15
// 402: 5d                            popq    %rbp
// 403: ff e0                         jmpq    *%rax
// 405: 
static const unsigned char _CHECK_EG_MATCHplus_CALL_STR_1_code_body[1030] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x34, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x43, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x61, 0x01, 0x00, 0x00, 0xe9, 0x7d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xad, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x21, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x14, 0x01, 0x00, 0x00, 0x4d, 0x89, 0xf4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x89, 0x4f, 0xf0, 0x49, 0x89, 0x47, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x4c, 0x63, 0xe9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x75, 0x21, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x06, 0x0f, 0x84, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x94, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x44, 0xff, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xbd, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc7, 0xf0, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf9, 0x48, 0x29, 0xc1, 0x48, 0x8b, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x95, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xf3, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x3c, 0xef, 0x49, 0x89, 0x06, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xc6, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_CALL_STR_1_code_holes[38] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x32a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x33c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x34b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x35e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x368, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x384, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x396, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x3a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3e4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CALL_STR_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CALL_STR_1_data_holes[1];

// _CHECK_EG_MATCHplus_CALL_TUPLE_1
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CALL_TUPLE_1.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3c                         js      0x71 <_JIT_ENTRY+0x71>
// 35: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 3d: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 50: 48 89 e2                      movq    %rsp, %rdx
// 53: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 58: 4c 89 ef                      movq    %r13, %rdi
// 5b: 4c 89 e6                      movq    %r12, %rsi
// 5e: ff d0                         callq   *%rax
// 60: 89 c5                         movl    %eax, %ebp
// 62: 49 8b 45 00                   movq    (%r13), %rax
// 66: 48 85 c0                      testq   %rax, %rax
// 69: 7e 18                         jle     0x83 <_JIT_ENTRY+0x83>
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 79 3a                         jns     0xa9 <_JIT_ENTRY+0xa9>
// 6f: eb 4a                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 71: 49 8b 45 00                   movq    (%r13), %rax
// 75: 48 85 c0                      testq   %rax, %rax
// 78: 7e 57                         jle     0xd1 <_JIT_ENTRY+0xd1>
// 7a: 85 c0                         testl   %eax, %eax
// 7c: 79 79                         jns     0xf7 <_JIT_ENTRY+0xf7>
// 7e: e9 8a 00 00 00                jmp     0x10d <_JIT_ENTRY+0x10d>
// 83: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000085:  R_X86_64_64  .rodata.str1.1
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_NegativeRefcount
// 97: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9c: 4c 89 ea                      movq    %r13, %rdx
// 9f: ff d0                         callq   *%rax
// a1: 49 8b 45 00                   movq    (%r13), %rax
// a5: 85 c0                         testl   %eax, %eax
// a7: 78 12                         js      0xbb <_JIT_ENTRY+0xbb>
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b3: ff d0                         callq   *%rax
// b5: 49 ff 4d 00                   decq    (%r13)
// b9: 74 6c                         je      0x127 <_JIT_ENTRY+0x127>
// bb: 49 8b 04 24                   movq    (%r12), %rax
// bf: 48 85 c0                      testq   %rax, %rax
// c2: 7e 7b                         jle     0x13f <_JIT_ENTRY+0x13f>
// c4: 85 c0                         testl   %eax, %eax
// c6: 0f 89 99 00 00 00             jns     0x165 <_JIT_ENTRY+0x165>
// cc: e9 aa 00 00 00                jmp     0x17b <_JIT_ENTRY+0x17b>
// d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d3:  R_X86_64_64  .rodata.str1.1
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_NegativeRefcount
// e5: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ea: 4c 89 ea                      movq    %r13, %rdx
// ed: ff d0                         callq   *%rax
// ef: 49 8b 45 00                   movq    (%r13), %rax
// f3: 85 c0                         testl   %eax, %eax
// f5: 78 16                         js      0x10d <_JIT_ENTRY+0x10d>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 101: ff d0                         callq   *%rax
// 103: 49 ff 4d 00                   decq    (%r13)
// 107: 0f 84 34 01 00 00             je      0x241 <_JIT_ENTRY+0x241>
// 10d: 49 8b 04 24                   movq    (%r12), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 0f 8e 43 01 00 00             jle     0x25d <_JIT_ENTRY+0x25d>
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 0f 89 61 01 00 00             jns     0x283 <_JIT_ENTRY+0x283>
// 122: e9 7d 01 00 00                jmp     0x2a4 <_JIT_ENTRY+0x2a4>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_Dealloc
// 131: 4c 89 ef                      movq    %r13, %rdi
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 85                         jg      0xc4 <_JIT_ENTRY+0xc4>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 16                         js      0x17b <_JIT_ENTRY+0x17b>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0c 24                   decq    (%r12)
// 175: 0f 84 ad 00 00 00             je      0x228 <_JIT_ENTRY+0x228>
// 17b: 85 ed                         testl   %ebp, %ebp
// 17d: 0f 88 21 01 00 00             js      0x2a4 <_JIT_ENTRY+0x2a4>
// 183: 48 8b 3c 24                   movq    (%rsp), %rdi
// 187: 48 85 ff                      testq   %rdi, %rdi
// 18a: 0f 84 14 01 00 00             je      0x2a4 <_JIT_ENTRY+0x2a4>
// 190: 4d 89 f4                      movq    %r14, %r12
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_NoneStruct
// 19d: 48 39 c7                      cmpq    %rax, %rdi
// 1a0: 74 10                         je      0x1b2 <_JIT_ENTRY+0x1b2>
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  PyErr_SetHandledException
// 1ac: ff d0                         callq   *%rax
// 1ae: 48 8b 04 24                   movq    (%rsp), %rax
// 1b2: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1b7: 49 89 4f f0                   movq    %rcx, -0x10(%r15)
// 1bb: 49 89 47 f8                   movq    %rax, -0x8(%r15)
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _JIT_OPARG
// 1c9: 0f b7 c0                      movzwl  %ax, %eax
// 1cc: 89 c1                         movl    %eax, %ecx
// 1ce: f7 d1                         notl    %ecx
// 1d0: 4c 63 e9                      movslq  %ecx, %r13
// 1d3: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 1d8: 75 21                         jne     0x1fb <_JIT_ENTRY+0x1fb>
// 1da: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1df: 29 c1                         subl    %eax, %ecx
// 1e1: 48 63 c1                      movslq  %ecx, %rax
// 1e4: 4d 8d 34 c7                   leaq    (%r15,%rax,8), %r14
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  PyTuple_Type
// 1f2: 49 39 06                      cmpq    %rax, (%r14)
// 1f5: 0f 84 d0 00 00 00             je      0x2cb <_JIT_ENTRY+0x2cb>
// 1fb: 49 29 df                      subq    %rbx, %r15
// 1fe: 49 83 c7 b8                   addq    $-0x48, %r15
// 202: 49 c1 ef 03                   shrq    $0x3, %r15
// 206: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 20a: 48 8b 03                      movq    (%rbx), %rax
// 20d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020f:  R_X86_64_64  _JIT_TARGET
// 217: 89 c9                         movl    %ecx, %ecx
// 219: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 21d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 223: e9 94 00 00 00                jmp     0x2bc <_JIT_ENTRY+0x2bc>
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _Py_Dealloc
// 232: 4c 89 e7                      movq    %r12, %rdi
// 235: ff d0                         callq   *%rax
// 237: 85 ed                         testl   %ebp, %ebp
// 239: 0f 89 44 ff ff ff             jns     0x183 <_JIT_ENTRY+0x183>
// 23f: eb 63                         jmp     0x2a4 <_JIT_ENTRY+0x2a4>
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _Py_Dealloc
// 24b: 4c 89 ef                      movq    %r13, %rdi
// 24e: ff d0                         callq   *%rax
// 250: 49 8b 04 24                   movq    (%r12), %rax
// 254: 48 85 c0                      testq   %rax, %rax
// 257: 0f 8f bd fe ff ff             jg      0x11a <_JIT_ENTRY+0x11a>
// 25d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025f:  R_X86_64_64  .rodata.str1.1
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _Py_NegativeRefcount
// 271: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 276: 4c 89 e2                      movq    %r12, %rdx
// 279: ff d0                         callq   *%rax
// 27b: 49 8b 04 24                   movq    (%r12), %rax
// 27f: 85 c0                         testl   %eax, %eax
// 281: 78 21                         js      0x2a4 <_JIT_ENTRY+0x2a4>
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28d: ff d0                         callq   *%rax
// 28f: 49 ff 0c 24                   decq    (%r12)
// 293: 75 0f                         jne     0x2a4 <_JIT_ENTRY+0x2a4>
// 295: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000297:  R_X86_64_64  _Py_Dealloc
// 29f: 4c 89 e7                      movq    %r12, %rdi
// 2a2: ff d0                         callq   *%rax
// 2a4: 49 83 c7 f0                   addq    $-0x10, %r15
// 2a8: 4d 89 fe                      movq    %r15, %r14
// 2ab: 49 29 de                      subq    %rbx, %r14
// 2ae: 49 83 c6 b8                   addq    $-0x48, %r14
// 2b2: 49 c1 ee 03                   shrq    $0x3, %r14
// 2b6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2ba: 31 c0                         xorl    %eax, %eax
// 2bc: 48 83 c4 18                   addq    $0x18, %rsp
// 2c0: 5b                            popq    %rbx
// 2c1: 41 5c                         popq    %r12
// 2c3: 41 5d                         popq    %r13
// 2c5: 41 5e                         popq    %r14
// 2c7: 41 5f                         popq    %r15
// 2c9: 5d                            popq    %rbp
// 2ca: c3                            retq
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _JIT_OPARG
// 2d5: 0f b7 c0                      movzwl  %ax, %eax
// 2d8: 48 c1 e0 03                   shlq    $0x3, %rax
// 2dc: 4c 89 f9                      movq    %r15, %rcx
// 2df: 48 29 c1                      subq    %rax, %rcx
// 2e2: 48 8b 29                      movq    (%rcx), %rbp
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  PySequence_Tuple
// 2ef: 48 89 ef                      movq    %rbp, %rdi
// 2f2: ff d0                         callq   *%rax
// 2f4: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 2f9: 48 8b 45 00                   movq    (%rbp), %rax
// 2fd: 48 85 c0                      testq   %rax, %rax
// 300: 7f 22                         jg      0x324 <_JIT_ENTRY+0x324>
// 302: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000304:  R_X86_64_64  .rodata.str1.1
// 30c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030e:  R_X86_64_64  _Py_NegativeRefcount
// 316: be ad 0a 00 00                movl    $0xaad, %esi            # imm = 0xAAD
// 31b: 48 89 ea                      movq    %rbp, %rdx
// 31e: ff d0                         callq   *%rax
// 320: 48 8b 45 00                   movq    (%rbp), %rax
// 324: 85 c0                         testl   %eax, %eax
// 326: 78 21                         js      0x349 <_JIT_ENTRY+0x349>
// 328: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 332: ff d0                         callq   *%rax
// 334: 48 ff 4d 00                   decq    (%rbp)
// 338: 75 0f                         jne     0x349 <_JIT_ENTRY+0x349>
// 33a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033c:  R_X86_64_64  _Py_Dealloc
// 344: 48 89 ef                      movq    %rbp, %rdi
// 347: ff d0                         callq   *%rax
// 349: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000034b:  R_X86_64_64  PyTuple_Type
// 353: 48 8b 45 00                   movq    (%rbp), %rax
// 357: 48 85 c0                      testq   %rax, %rax
// 35a: 7f 22                         jg      0x37e <_JIT_ENTRY+0x37e>
// 35c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000035e:  R_X86_64_64  .rodata.str1.1
// 366: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000368:  R_X86_64_64  _Py_NegativeRefcount
// 370: be ae 0a 00 00                movl    $0xaae, %esi            # imm = 0xAAE
// 375: 48 89 ea                      movq    %rbp, %rdx
// 378: ff d0                         callq   *%rax
// 37a: 48 8b 45 00                   movq    (%rbp), %rax
// 37e: 85 c0                         testl   %eax, %eax
// 380: 78 28                         js      0x3aa <_JIT_ENTRY+0x3aa>
// 382: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000384:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 38c: ff d0                         callq   *%rax
// 38e: 48 ff 4d 00                   decq    (%rbp)
// 392: 75 16                         jne     0x3aa <_JIT_ENTRY+0x3aa>
// 394: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000396:  R_X86_64_64  PyTuple_Type
// 39e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a0:  R_X86_64_64  _Py_Dealloc
// 3a8: ff d0                         callq   *%rax
// 3aa: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 3af: 48 85 c0                      testq   %rax, %rax
// 3b2: 0f 84 f3 fe ff ff             je      0x2ab <_JIT_ENTRY+0x2ab>
// 3b8: 4f 8d 3c ef                   leaq    (%r15,%r13,8), %r15
// 3bc: 49 89 06                      movq    %rax, (%r14)
// 3bf: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 3c4: 48 8b 00                      movq    (%rax), %rax
// 3c7: 84 c0                         testb   %al, %al
// 3c9: 74 17                         je      0x3e2 <_JIT_ENTRY+0x3e2>
// 3cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003cd:  R_X86_64_64  _Py_HandlePending
// 3d5: 4c 89 e7                      movq    %r12, %rdi
// 3d8: ff d0                         callq   *%rax
// 3da: 85 c0                         testl   %eax, %eax
// 3dc: 0f 85 c6 fe ff ff             jne     0x2a8 <_JIT_ENTRY+0x2a8>
// 3e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e4:  R_X86_64_64  _JIT_CONTINUE
// 3ec: 48 89 df                      movq    %rbx, %rdi
// 3ef: 4c 89 fe                      movq    %r15, %rsi
// 3f2: 4c 89 e2                      movq    %r12, %rdx
// 3f5: 48 83 c4 18                   addq    $0x18, %rsp
// 3f9: 5b                            popq    %rbx
// 3fa: 41 5c                         popq    %r12
// 3fc: 41 5d                         popq    %r13
// 3fe: 41 5e                         popq    %r14
// 400: 41 5f                         popq    %r15
// 402: 5d                            popq    %rbp
// 403: ff e0                         jmpq    *%rax
// 405: 
static const unsigned char _CHECK_EG_MATCHplus_CALL_TUPLE_1_code_body[1030] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x34, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x43, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x61, 0x01, 0x00, 0x00, 0xe9, 0x7d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xad, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x21, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x14, 0x01, 0x00, 0x00, 0x4d, 0x89, 0xf4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x89, 0x4f, 0xf0, 0x49, 0x89, 0x47, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x4c, 0x63, 0xe9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x75, 0x21, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x06, 0x0f, 0x84, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x94, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x44, 0xff, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xbd, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc7, 0xf0, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf9, 0x48, 0x29, 0xc1, 0x48, 0x8b, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xad, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xf3, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x3c, 0xef, 0x49, 0x89, 0x06, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xc6, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_CALL_TUPLE_1_code_holes[38] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Tuple, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x32a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x33c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x34b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x35e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x368, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x384, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x396, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x3a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x3e4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CALL_TUPLE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CALL_TUPLE_1_data_holes[1];

// _CHECK_EG_MATCHplus_CALL_TYPE_1
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CALL_TYPE_1.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3c                         js      0x71 <_JIT_ENTRY+0x71>
// 35: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 3d: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 50: 48 89 e2                      movq    %rsp, %rdx
// 53: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 58: 4c 89 ef                      movq    %r13, %rdi
// 5b: 4c 89 e6                      movq    %r12, %rsi
// 5e: ff d0                         callq   *%rax
// 60: 89 c5                         movl    %eax, %ebp
// 62: 49 8b 45 00                   movq    (%r13), %rax
// 66: 48 85 c0                      testq   %rax, %rax
// 69: 7e 18                         jle     0x83 <_JIT_ENTRY+0x83>
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 79 3a                         jns     0xa9 <_JIT_ENTRY+0xa9>
// 6f: eb 4a                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 71: 49 8b 45 00                   movq    (%r13), %rax
// 75: 48 85 c0                      testq   %rax, %rax
// 78: 7e 57                         jle     0xd1 <_JIT_ENTRY+0xd1>
// 7a: 85 c0                         testl   %eax, %eax
// 7c: 79 79                         jns     0xf7 <_JIT_ENTRY+0xf7>
// 7e: e9 8a 00 00 00                jmp     0x10d <_JIT_ENTRY+0x10d>
// 83: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000085:  R_X86_64_64  .rodata.str1.1
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_NegativeRefcount
// 97: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9c: 4c 89 ea                      movq    %r13, %rdx
// 9f: ff d0                         callq   *%rax
// a1: 49 8b 45 00                   movq    (%r13), %rax
// a5: 85 c0                         testl   %eax, %eax
// a7: 78 12                         js      0xbb <_JIT_ENTRY+0xbb>
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b3: ff d0                         callq   *%rax
// b5: 49 ff 4d 00                   decq    (%r13)
// b9: 74 6c                         je      0x127 <_JIT_ENTRY+0x127>
// bb: 49 8b 04 24                   movq    (%r12), %rax
// bf: 48 85 c0                      testq   %rax, %rax
// c2: 7e 7b                         jle     0x13f <_JIT_ENTRY+0x13f>
// c4: 85 c0                         testl   %eax, %eax
// c6: 0f 89 99 00 00 00             jns     0x165 <_JIT_ENTRY+0x165>
// cc: e9 aa 00 00 00                jmp     0x17b <_JIT_ENTRY+0x17b>
// d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d3:  R_X86_64_64  .rodata.str1.1
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_NegativeRefcount
// e5: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ea: 4c 89 ea                      movq    %r13, %rdx
// ed: ff d0                         callq   *%rax
// ef: 49 8b 45 00                   movq    (%r13), %rax
// f3: 85 c0                         testl   %eax, %eax
// f5: 78 16                         js      0x10d <_JIT_ENTRY+0x10d>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 101: ff d0                         callq   *%rax
// 103: 49 ff 4d 00                   decq    (%r13)
// 107: 0f 84 3b 01 00 00             je      0x248 <_JIT_ENTRY+0x248>
// 10d: 49 8b 04 24                   movq    (%r12), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 0f 8e 4a 01 00 00             jle     0x264 <_JIT_ENTRY+0x264>
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 0f 89 68 01 00 00             jns     0x28a <_JIT_ENTRY+0x28a>
// 122: e9 84 01 00 00                jmp     0x2ab <_JIT_ENTRY+0x2ab>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_Dealloc
// 131: 4c 89 ef                      movq    %r13, %rdi
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 85                         jg      0xc4 <_JIT_ENTRY+0xc4>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 16                         js      0x17b <_JIT_ENTRY+0x17b>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0c 24                   decq    (%r12)
// 175: 0f 84 b4 00 00 00             je      0x22f <_JIT_ENTRY+0x22f>
// 17b: 85 ed                         testl   %ebp, %ebp
// 17d: 0f 88 28 01 00 00             js      0x2ab <_JIT_ENTRY+0x2ab>
// 183: 48 8b 3c 24                   movq    (%rsp), %rdi
// 187: 48 85 ff                      testq   %rdi, %rdi
// 18a: 0f 84 1b 01 00 00             je      0x2ab <_JIT_ENTRY+0x2ab>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_NoneStruct
// 19a: 48 39 c7                      cmpq    %rax, %rdi
// 19d: 74 10                         je      0x1af <_JIT_ENTRY+0x1af>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  PyErr_SetHandledException
// 1a9: ff d0                         callq   *%rax
// 1ab: 48 8b 04 24                   movq    (%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1b8: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _JIT_OPARG
// 1c6: f7 d0                         notl    %eax
// 1c8: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1cd: 48 63 e8                      movslq  %eax, %rbp
// 1d0: 49 83 3c ee 00                cmpq    $0x0, (%r14,%rbp,8)
// 1d5: 75 2b                         jne     0x202 <_JIT_ENTRY+0x202>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _JIT_OPARG
// 1e1: 0f b7 c0                      movzwl  %ax, %eax
// 1e4: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1e9: 29 c1                         subl    %eax, %ecx
// 1eb: 48 63 c1                      movslq  %ecx, %rax
// 1ee: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001f0:  R_X86_64_64  PyType_Type
// 1f8: 4d 39 24 c6                   cmpq    %r12, (%r14,%rax,8)
// 1fc: 0f 84 cd 00 00 00             je      0x2cf <_JIT_ENTRY+0x2cf>
// 202: 49 29 de                      subq    %rbx, %r14
// 205: 49 83 c6 b8                   addq    $-0x48, %r14
// 209: 49 c1 ee 03                   shrq    $0x3, %r14
// 20d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 211: 48 8b 03                      movq    (%rbx), %rax
// 214: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000216:  R_X86_64_64  _JIT_TARGET
// 21e: 89 c9                         movl    %ecx, %ecx
// 220: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 224: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 22a: e9 91 00 00 00                jmp     0x2c0 <_JIT_ENTRY+0x2c0>
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _Py_Dealloc
// 239: 4c 89 e7                      movq    %r12, %rdi
// 23c: ff d0                         callq   *%rax
// 23e: 85 ed                         testl   %ebp, %ebp
// 240: 0f 89 3d ff ff ff             jns     0x183 <_JIT_ENTRY+0x183>
// 246: eb 63                         jmp     0x2ab <_JIT_ENTRY+0x2ab>
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _Py_Dealloc
// 252: 4c 89 ef                      movq    %r13, %rdi
// 255: ff d0                         callq   *%rax
// 257: 49 8b 04 24                   movq    (%r12), %rax
// 25b: 48 85 c0                      testq   %rax, %rax
// 25e: 0f 8f b6 fe ff ff             jg      0x11a <_JIT_ENTRY+0x11a>
// 264: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000266:  R_X86_64_64  .rodata.str1.1
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_NegativeRefcount
// 278: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 27d: 4c 89 e2                      movq    %r12, %rdx
// 280: ff d0                         callq   *%rax
// 282: 49 8b 04 24                   movq    (%r12), %rax
// 286: 85 c0                         testl   %eax, %eax
// 288: 78 21                         js      0x2ab <_JIT_ENTRY+0x2ab>
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 294: ff d0                         callq   *%rax
// 296: 49 ff 0c 24                   decq    (%r12)
// 29a: 75 0f                         jne     0x2ab <_JIT_ENTRY+0x2ab>
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _Py_Dealloc
// 2a6: 4c 89 e7                      movq    %r12, %rdi
// 2a9: ff d0                         callq   *%rax
// 2ab: 49 83 c6 f0                   addq    $-0x10, %r14
// 2af: 49 29 de                      subq    %rbx, %r14
// 2b2: 49 83 c6 b8                   addq    $-0x48, %r14
// 2b6: 49 c1 ee 03                   shrq    $0x3, %r14
// 2ba: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2be: 31 c0                         xorl    %eax, %eax
// 2c0: 48 83 c4 18                   addq    $0x18, %rsp
// 2c4: 5b                            popq    %rbx
// 2c5: 41 5c                         popq    %r12
// 2c7: 41 5d                         popq    %r13
// 2c9: 41 5e                         popq    %r14
// 2cb: 41 5f                         popq    %r15
// 2cd: 5d                            popq    %rbp
// 2ce: c3                            retq
// 2cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d1:  R_X86_64_64  _JIT_OPARG
// 2d9: 0f b7 c0                      movzwl  %ax, %eax
// 2dc: 48 c1 e0 03                   shlq    $0x3, %rax
// 2e0: 4c 89 f1                      movq    %r14, %rcx
// 2e3: 48 29 c1                      subq    %rax, %rcx
// 2e6: 4c 8b 29                      movq    (%rcx), %r13
// 2e9: 49 8b 45 08                   movq    0x8(%r13), %rax
// 2ed: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 2f2: 8b 00                         movl    (%rax), %eax
// 2f4: ff c0                         incl    %eax
// 2f6: 75 0f                         jne     0x307 <_JIT_ENTRY+0x307>
// 2f8: 49 8b 45 00                   movq    (%r13), %rax
// 2fc: 48 85 c0                      testq   %rax, %rax
// 2ff: 7e 22                         jle     0x323 <_JIT_ENTRY+0x323>
// 301: 85 c0                         testl   %eax, %eax
// 303: 79 44                         jns     0x349 <_JIT_ENTRY+0x349>
// 305: eb 63                         jmp     0x36a <_JIT_ENTRY+0x36a>
// 307: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 30c: 89 01                         movl    %eax, (%rcx)
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 318: ff d0                         callq   *%rax
// 31a: 49 8b 45 00                   movq    (%r13), %rax
// 31e: 48 85 c0                      testq   %rax, %rax
// 321: 7f de                         jg      0x301 <_JIT_ENTRY+0x301>
// 323: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000325:  R_X86_64_64  .rodata.str1.1
// 32d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032f:  R_X86_64_64  _Py_NegativeRefcount
// 337: be 7f 0a 00 00                movl    $0xa7f, %esi            # imm = 0xA7F
// 33c: 4c 89 ea                      movq    %r13, %rdx
// 33f: ff d0                         callq   *%rax
// 341: 49 8b 45 00                   movq    (%r13), %rax
// 345: 85 c0                         testl   %eax, %eax
// 347: 78 21                         js      0x36a <_JIT_ENTRY+0x36a>
// 349: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 353: ff d0                         callq   *%rax
// 355: 49 ff 4d 00                   decq    (%r13)
// 359: 75 0f                         jne     0x36a <_JIT_ENTRY+0x36a>
// 35b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035d:  R_X86_64_64  _Py_Dealloc
// 365: 4c 89 ef                      movq    %r13, %rdi
// 368: ff d0                         callq   *%rax
// 36a: 49 8b 04 24                   movq    (%r12), %rax
// 36e: 48 85 c0                      testq   %rax, %rax
// 371: 7f 22                         jg      0x395 <_JIT_ENTRY+0x395>
// 373: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000375:  R_X86_64_64  .rodata.str1.1
// 37d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037f:  R_X86_64_64  _Py_NegativeRefcount
// 387: be 80 0a 00 00                movl    $0xa80, %esi            # imm = 0xA80
// 38c: 4c 89 e2                      movq    %r12, %rdx
// 38f: ff d0                         callq   *%rax
// 391: 49 8b 04 24                   movq    (%r12), %rax
// 395: 4d 8d 2c ee                   leaq    (%r14,%rbp,8), %r13
// 399: 85 c0                         testl   %eax, %eax
// 39b: 78 28                         js      0x3c5 <_JIT_ENTRY+0x3c5>
// 39d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3a7: ff d0                         callq   *%rax
// 3a9: 49 ff 0c 24                   decq    (%r12)
// 3ad: 75 16                         jne     0x3c5 <_JIT_ENTRY+0x3c5>
// 3af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003b1:  R_X86_64_64  PyType_Type
// 3b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bb:  R_X86_64_64  _Py_Dealloc
// 3c3: ff d0                         callq   *%rax
// 3c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c7:  R_X86_64_64  _JIT_OPARG
// 3cf: 0f b7 c0                      movzwl  %ax, %eax
// 3d2: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 3d7: 29 c1                         subl    %eax, %ecx
// 3d9: 48 63 c1                      movslq  %ecx, %rax
// 3dc: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 3e1: 49 89 0c c6                   movq    %rcx, (%r14,%rax,8)
// 3e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e7:  R_X86_64_64  _JIT_CONTINUE
// 3ef: 48 89 df                      movq    %rbx, %rdi
// 3f2: 4c 89 ee                      movq    %r13, %rsi
// 3f5: 4c 89 fa                      movq    %r15, %rdx
// 3f8: 48 83 c4 18                   addq    $0x18, %rsp
// 3fc: 5b                            popq    %rbx
// 3fd: 41 5c                         popq    %r12
// 3ff: 41 5d                         popq    %r13
// 401: 41 5e                         popq    %r14
// 403: 41 5f                         popq    %r15
// 405: 5d                            popq    %rbp
// 406: ff e0                         jmpq    *%rax
// 408: 
static const unsigned char _CHECK_EG_MATCHplus_CALL_TYPE_1_code_body[1033] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x3b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x4a, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x68, 0x01, 0x00, 0x00, 0xe9, 0x84, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xb4, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x28, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x1b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x89, 0x4e, 0xf0, 0x49, 0x89, 0x46, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xe8, 0x49, 0x83, 0x3c, 0xee, 0x00, 0x75, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x24, 0xc6, 0x0f, 0x84, 0xcd, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x91, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x3d, 0xff, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xb6, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x4c, 0x8b, 0x29, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x8b, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x63, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x89, 0x01, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7f, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x2c, 0xee, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x89, 0x0c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_CALL_TYPE_1_code_holes[38] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x325, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x32f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x34b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x35d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x375, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x37f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x39f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x3bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3c7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3e7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CALL_TYPE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CALL_TYPE_1_data_holes[1];

// _CHECK_EG_MATCHplus_CHECK_ATTR_CLASS
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CHECK_ATTR_CLASS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 62                         jle     0xdf <_JIT_ENTRY+0xdf>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 80 00 00 00             jns     0x105 <_JIT_ENTRY+0x105>
// 85: e9 9c 00 00 00                jmp     0x126 <_JIT_ENTRY+0x126>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c3 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// c6: 49 8b 07                      movq    (%r15), %rax
// c9: 48 85 c0                      testq   %rax, %rax
// cc: 0f 8e d2 00 00 00             jle     0x1a4 <_JIT_ENTRY+0x1a4>
// d2: 85 c0                         testl   %eax, %eax
// d4: 0f 89 ef 00 00 00             jns     0x1c9 <_JIT_ENTRY+0x1c9>
// da: e9 ff 00 00 00                jmp     0x1de <_JIT_ENTRY+0x1de>
// df: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e1:  R_X86_64_64  .rodata.str1.1
// e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000eb:  R_X86_64_64  _Py_NegativeRefcount
// f3: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f8: 4c 89 ea                      movq    %r13, %rdx
// fb: ff d0                         callq   *%rax
// fd: 49 8b 45 00                   movq    (%r13), %rax
// 101: 85 c0                         testl   %eax, %eax
// 103: 78 21                         js      0x126 <_JIT_ENTRY+0x126>
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10f: ff d0                         callq   *%rax
// 111: 49 ff 4d 00                   decq    (%r13)
// 115: 75 0f                         jne     0x126 <_JIT_ENTRY+0x126>
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_Dealloc
// 121: 4c 89 ef                      movq    %r13, %rdi
// 124: ff d0                         callq   *%rax
// 126: 49 8b 07                      movq    (%r15), %rax
// 129: 48 85 c0                      testq   %rax, %rax
// 12c: 7e 09                         jle     0x137 <_JIT_ENTRY+0x137>
// 12e: 85 c0                         testl   %eax, %eax
// 130: 79 2e                         jns     0x160 <_JIT_ENTRY+0x160>
// 132: e9 6d 01 00 00                jmp     0x2a4 <_JIT_ENTRY+0x2a4>
// 137: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000139:  R_X86_64_64  .rodata.str1.1
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_NegativeRefcount
// 14b: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 150: 4c 89 fa                      movq    %r15, %rdx
// 153: ff d0                         callq   *%rax
// 155: 49 8b 07                      movq    (%r15), %rax
// 158: 85 c0                         testl   %eax, %eax
// 15a: 0f 88 44 01 00 00             js      0x2a4 <_JIT_ENTRY+0x2a4>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0f                      decq    (%r15)
// 16f: 0f 85 2f 01 00 00             jne     0x2a4 <_JIT_ENTRY+0x2a4>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ff                      movq    %r15, %rdi
// 182: ff d0                         callq   *%rax
// 184: e9 1b 01 00 00                jmp     0x2a4 <_JIT_ENTRY+0x2a4>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 49 8b 07                      movq    (%r15), %rax
// 19b: 48 85 c0                      testq   %rax, %rax
// 19e: 0f 8f 2e ff ff ff             jg      0xd2 <_JIT_ENTRY+0xd2>
// 1a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a6:  R_X86_64_64  .rodata.str1.1
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_NegativeRefcount
// 1b8: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1bd: 4c 89 fa                      movq    %r15, %rdx
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 8b 07                      movq    (%r15), %rax
// 1c5: 85 c0                         testl   %eax, %eax
// 1c7: 78 15                         js      0x1de <_JIT_ENTRY+0x1de>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d3: ff d0                         callq   *%rax
// 1d5: 49 ff 0f                      decq    (%r15)
// 1d8: 0f 84 af 00 00 00             je      0x28d <_JIT_ENTRY+0x28d>
// 1de: 85 ed                         testl   %ebp, %ebp
// 1e0: 0f 88 be 00 00 00             js      0x2a4 <_JIT_ENTRY+0x2a4>
// 1e6: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1eb: 48 85 ff                      testq   %rdi, %rdi
// 1ee: 0f 84 b0 00 00 00             je      0x2a4 <_JIT_ENTRY+0x2a4>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_NoneStruct
// 1fe: 48 39 c7                      cmpq    %rax, %rdi
// 201: 74 11                         je      0x214 <_JIT_ENTRY+0x214>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  PyErr_SetHandledException
// 20d: ff d0                         callq   *%rax
// 20f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 214: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 219: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 21d: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 221: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 225: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
// 22c: 74 35                         je      0x263 <_JIT_ENTRY+0x263>
// 22e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000230:  R_X86_64_64  _JIT_OPERAND
// 238: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 23e: 75 23                         jne     0x263 <_JIT_ENTRY+0x263>
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _JIT_CONTINUE
// 24a: 4c 89 f7                      movq    %r14, %rdi
// 24d: 48 89 de                      movq    %rbx, %rsi
// 250: 4c 89 e2                      movq    %r12, %rdx
// 253: 48 83 c4 18                   addq    $0x18, %rsp
// 257: 5b                            popq    %rbx
// 258: 41 5c                         popq    %r12
// 25a: 41 5d                         popq    %r13
// 25c: 41 5e                         popq    %r14
// 25e: 41 5f                         popq    %r15
// 260: 5d                            popq    %rbp
// 261: ff e0                         jmpq    *%rax
// 263: 4c 29 f3                      subq    %r14, %rbx
// 266: 48 83 c3 b8                   addq    $-0x48, %rbx
// 26a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 26e: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 272: 49 8b 06                      movq    (%r14), %rax
// 275: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000277:  R_X86_64_64  _JIT_TARGET
// 27f: 89 c9                         movl    %ecx, %ecx
// 281: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 285: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 28b: eb 2c                         jmp     0x2b9 <_JIT_ENTRY+0x2b9>
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  _Py_Dealloc
// 297: 4c 89 ff                      movq    %r15, %rdi
// 29a: ff d0                         callq   *%rax
// 29c: 85 ed                         testl   %ebp, %ebp
// 29e: 0f 89 42 ff ff ff             jns     0x1e6 <_JIT_ENTRY+0x1e6>
// 2a4: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2a8: 4c 29 f3                      subq    %r14, %rbx
// 2ab: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2af: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2b3: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2b7: 31 c0                         xorl    %eax, %eax
// 2b9: 48 83 c4 18                   addq    $0x18, %rsp
// 2bd: 5b                            popq    %rbx
// 2be: 41 5c                         popq    %r12
// 2c0: 41 5d                         popq    %r13
// 2c2: 41 5e                         popq    %r14
// 2c4: 41 5f                         popq    %r15
// 2c6: 5d                            popq    %rbp
// 2c7: c3                            retq
// 2c8: 
static const unsigned char _CHECK_EG_MATCHplus_CHECK_ATTR_CLASS_code_body[713] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x62, 0x85, 0xc0, 0x0f, 0x89, 0x80, 0x00, 0x00, 0x00, 0xe9, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd2, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xef, 0x00, 0x00, 0x00, 0xe9, 0xff, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2e, 0xe9, 0x6d, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x44, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x2f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x1b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2e, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0xaf, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xbe, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xb0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x35, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x42, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_CHECK_ATTR_CLASS_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CHECK_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CHECK_ATTR_CLASS_data_holes[1];

// _CHECK_EG_MATCHplus_CHECK_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CHECK_ATTR_METHOD_LAZY_DICT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 2b 01 00 00             je      0x23a <_JIT_ENTRY+0x23a>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 3a 01 00 00             jle     0x255 <_JIT_ENTRY+0x255>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 57 01 00 00             jns     0x27a <_JIT_ENTRY+0x27a>
// 123: e9 72 01 00 00                jmp     0x29a <_JIT_ENTRY+0x29a>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 82 00 00 00             je      0x1fb <_JIT_ENTRY+0x1fb>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 19 01 00 00             js      0x29a <_JIT_ENTRY+0x29a>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 0b 01 00 00             je      0x29a <_JIT_ENTRY+0x29a>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 1c0: 48 8b 89 20 01 00 00          movq    0x120(%rcx), %rcx
// 1c7: 48 83 3c 08 00                cmpq    $0x0, (%rax,%rcx)
// 1cc: 74 49                         je      0x217 <_JIT_ENTRY+0x217>
// 1ce: 4c 29 f3                      subq    %r14, %rbx
// 1d1: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1d5: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1d9: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1dd: 49 8b 06                      movq    (%r14), %rax
// 1e0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e2:  R_X86_64_64  _JIT_TARGET
// 1ea: 89 c9                         movl    %ecx, %ecx
// 1ec: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f6: e9 b4 00 00 00                jmp     0x2af <_JIT_ENTRY+0x2af>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: 4c 89 ff                      movq    %r15, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 85 ed                         testl   %ebp, %ebp
// 20c: 0f 89 6f ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 212: e9 83 00 00 00                jmp     0x29a <_JIT_ENTRY+0x29a>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _JIT_CONTINUE
// 221: 4c 89 f7                      movq    %r14, %rdi
// 224: 48 89 de                      movq    %rbx, %rsi
// 227: 4c 89 e2                      movq    %r12, %rdx
// 22a: 48 83 c4 18                   addq    $0x18, %rsp
// 22e: 5b                            popq    %rbx
// 22f: 41 5c                         popq    %r12
// 231: 41 5d                         popq    %r13
// 233: 41 5e                         popq    %r14
// 235: 41 5f                         popq    %r15
// 237: 5d                            popq    %rbp
// 238: ff e0                         jmpq    *%rax
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_Dealloc
// 244: 4c 89 ef                      movq    %r13, %rdi
// 247: ff d0                         callq   *%rax
// 249: 49 8b 07                      movq    (%r15), %rax
// 24c: 48 85 c0                      testq   %rax, %rax
// 24f: 0f 8f c6 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 255: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000257:  R_X86_64_64  .rodata.str1.1
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _Py_NegativeRefcount
// 269: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 26e: 4c 89 fa                      movq    %r15, %rdx
// 271: ff d0                         callq   *%rax
// 273: 49 8b 07                      movq    (%r15), %rax
// 276: 85 c0                         testl   %eax, %eax
// 278: 78 20                         js      0x29a <_JIT_ENTRY+0x29a>
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 284: ff d0                         callq   *%rax
// 286: 49 ff 0f                      decq    (%r15)
// 289: 75 0f                         jne     0x29a <_JIT_ENTRY+0x29a>
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_Dealloc
// 295: 4c 89 ff                      movq    %r15, %rdi
// 298: ff d0                         callq   *%rax
// 29a: 48 83 c3 f0                   addq    $-0x10, %rbx
// 29e: 4c 29 f3                      subq    %r14, %rbx
// 2a1: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2a5: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2a9: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2ad: 31 c0                         xorl    %eax, %eax
// 2af: 48 83 c4 18                   addq    $0x18, %rsp
// 2b3: 5b                            popq    %rbx
// 2b4: 41 5c                         popq    %r12
// 2b6: 41 5d                         popq    %r13
// 2b8: 41 5e                         popq    %r14
// 2ba: 41 5f                         popq    %r15
// 2bc: 5d                            popq    %rbp
// 2bd: c3                            retq
// 2be: 
static const unsigned char _CHECK_EG_MATCHplus_CHECK_ATTR_METHOD_LAZY_DICT_code_body[703] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x2b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x3a, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x57, 0x01, 0x00, 0x00, 0xe9, 0x72, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x19, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x0b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0x48, 0x8b, 0x89, 0x20, 0x01, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x08, 0x00, 0x74, 0x49, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xb4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x6f, 0xff, 0xff, 0xff, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xc6, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_CHECK_ATTR_METHOD_LAZY_DICT_code_holes[23] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CHECK_ATTR_METHOD_LAZY_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CHECK_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _CHECK_EG_MATCHplus_CHECK_ATTR_MODULE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CHECK_ATTR_MODULE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 62                         jle     0xdf <_JIT_ENTRY+0xdf>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 80 00 00 00             jns     0x105 <_JIT_ENTRY+0x105>
// 85: e9 9c 00 00 00                jmp     0x126 <_JIT_ENTRY+0x126>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c3 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// c6: 49 8b 07                      movq    (%r15), %rax
// c9: 48 85 c0                      testq   %rax, %rax
// cc: 0f 8e d2 00 00 00             jle     0x1a4 <_JIT_ENTRY+0x1a4>
// d2: 85 c0                         testl   %eax, %eax
// d4: 0f 89 ef 00 00 00             jns     0x1c9 <_JIT_ENTRY+0x1c9>
// da: e9 ff 00 00 00                jmp     0x1de <_JIT_ENTRY+0x1de>
// df: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e1:  R_X86_64_64  .rodata.str1.1
// e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000eb:  R_X86_64_64  _Py_NegativeRefcount
// f3: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f8: 4c 89 ea                      movq    %r13, %rdx
// fb: ff d0                         callq   *%rax
// fd: 49 8b 45 00                   movq    (%r13), %rax
// 101: 85 c0                         testl   %eax, %eax
// 103: 78 21                         js      0x126 <_JIT_ENTRY+0x126>
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10f: ff d0                         callq   *%rax
// 111: 49 ff 4d 00                   decq    (%r13)
// 115: 75 0f                         jne     0x126 <_JIT_ENTRY+0x126>
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_Dealloc
// 121: 4c 89 ef                      movq    %r13, %rdi
// 124: ff d0                         callq   *%rax
// 126: 49 8b 07                      movq    (%r15), %rax
// 129: 48 85 c0                      testq   %rax, %rax
// 12c: 7e 09                         jle     0x137 <_JIT_ENTRY+0x137>
// 12e: 85 c0                         testl   %eax, %eax
// 130: 79 2e                         jns     0x160 <_JIT_ENTRY+0x160>
// 132: e9 75 01 00 00                jmp     0x2ac <_JIT_ENTRY+0x2ac>
// 137: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000139:  R_X86_64_64  .rodata.str1.1
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_NegativeRefcount
// 14b: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 150: 4c 89 fa                      movq    %r15, %rdx
// 153: ff d0                         callq   *%rax
// 155: 49 8b 07                      movq    (%r15), %rax
// 158: 85 c0                         testl   %eax, %eax
// 15a: 0f 88 4c 01 00 00             js      0x2ac <_JIT_ENTRY+0x2ac>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0f                      decq    (%r15)
// 16f: 0f 85 37 01 00 00             jne     0x2ac <_JIT_ENTRY+0x2ac>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ff                      movq    %r15, %rdi
// 182: ff d0                         callq   *%rax
// 184: e9 23 01 00 00                jmp     0x2ac <_JIT_ENTRY+0x2ac>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 49 8b 07                      movq    (%r15), %rax
// 19b: 48 85 c0                      testq   %rax, %rax
// 19e: 0f 8f 2e ff ff ff             jg      0xd2 <_JIT_ENTRY+0xd2>
// 1a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a6:  R_X86_64_64  .rodata.str1.1
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_NegativeRefcount
// 1b8: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1bd: 4c 89 fa                      movq    %r15, %rdx
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 8b 07                      movq    (%r15), %rax
// 1c5: 85 c0                         testl   %eax, %eax
// 1c7: 78 15                         js      0x1de <_JIT_ENTRY+0x1de>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d3: ff d0                         callq   *%rax
// 1d5: 49 ff 0f                      decq    (%r15)
// 1d8: 0f 84 b7 00 00 00             je      0x295 <_JIT_ENTRY+0x295>
// 1de: 85 ed                         testl   %ebp, %ebp
// 1e0: 0f 88 c6 00 00 00             js      0x2ac <_JIT_ENTRY+0x2ac>
// 1e6: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1eb: 48 85 ff                      testq   %rdi, %rdi
// 1ee: 0f 84 b8 00 00 00             je      0x2ac <_JIT_ENTRY+0x2ac>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_NoneStruct
// 1fe: 48 39 c7                      cmpq    %rax, %rdi
// 201: 74 11                         je      0x214 <_JIT_ENTRY+0x214>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  PyErr_SetHandledException
// 20d: ff d0                         callq   *%rax
// 20f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 214: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 219: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 21d: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 221: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000223:  R_X86_64_64  PyModule_Type
// 22b: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 22f: 75 3a                         jne     0x26b <_JIT_ENTRY+0x26b>
// 231: 48 8b 40 10                   movq    0x10(%rax), %rax
// 235: 48 8b 40 20                   movq    0x20(%rax), %rax
// 239: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023b:  R_X86_64_64  _JIT_OPERAND
// 243: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 246: 75 23                         jne     0x26b <_JIT_ENTRY+0x26b>
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _JIT_CONTINUE
// 252: 4c 89 f7                      movq    %r14, %rdi
// 255: 48 89 de                      movq    %rbx, %rsi
// 258: 4c 89 e2                      movq    %r12, %rdx
// 25b: 48 83 c4 18                   addq    $0x18, %rsp
// 25f: 5b                            popq    %rbx
// 260: 41 5c                         popq    %r12
// 262: 41 5d                         popq    %r13
// 264: 41 5e                         popq    %r14
// 266: 41 5f                         popq    %r15
// 268: 5d                            popq    %rbp
// 269: ff e0                         jmpq    *%rax
// 26b: 4c 29 f3                      subq    %r14, %rbx
// 26e: 48 83 c3 b8                   addq    $-0x48, %rbx
// 272: 48 c1 eb 03                   shrq    $0x3, %rbx
// 276: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 27a: 49 8b 06                      movq    (%r14), %rax
// 27d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027f:  R_X86_64_64  _JIT_TARGET
// 287: 89 c9                         movl    %ecx, %ecx
// 289: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 28d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 293: eb 2c                         jmp     0x2c1 <_JIT_ENTRY+0x2c1>
// 295: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000297:  R_X86_64_64  _Py_Dealloc
// 29f: 4c 89 ff                      movq    %r15, %rdi
// 2a2: ff d0                         callq   *%rax
// 2a4: 85 ed                         testl   %ebp, %ebp
// 2a6: 0f 89 3a ff ff ff             jns     0x1e6 <_JIT_ENTRY+0x1e6>
// 2ac: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2b0: 4c 29 f3                      subq    %r14, %rbx
// 2b3: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2b7: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2bb: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2bf: 31 c0                         xorl    %eax, %eax
// 2c1: 48 83 c4 18                   addq    $0x18, %rsp
// 2c5: 5b                            popq    %rbx
// 2c6: 41 5c                         popq    %r12
// 2c8: 41 5d                         popq    %r13
// 2ca: 41 5e                         popq    %r14
// 2cc: 41 5f                         popq    %r15
// 2ce: 5d                            popq    %rbp
// 2cf: c3                            retq
// 2d0: 
static const unsigned char _CHECK_EG_MATCHplus_CHECK_ATTR_MODULE_code_body[721] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x62, 0x85, 0xc0, 0x0f, 0x89, 0x80, 0x00, 0x00, 0x00, 0xe9, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd2, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xef, 0x00, 0x00, 0x00, 0xe9, 0xff, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2e, 0xe9, 0x75, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x4c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x37, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x23, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2e, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xc6, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xb8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x3a, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x3a, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_CHECK_ATTR_MODULE_code_holes[25] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyModule_Type, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CHECK_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CHECK_ATTR_MODULE_data_holes[1];

// _CHECK_EG_MATCHplus_CHECK_ATTR_WITH_HINT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CHECK_ATTR_WITH_HINT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a2 00 00 00                jmp     0x175 <_JIT_ENTRY+0x175>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 1b 01 00 00             je      0x22a <_JIT_ENTRY+0x22a>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 2a 01 00 00             jle     0x245 <_JIT_ENTRY+0x245>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 47 01 00 00             jns     0x26a <_JIT_ENTRY+0x26a>
// 123: e9 62 01 00 00                jmp     0x28a <_JIT_ENTRY+0x28a>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 11                         js      0x175 <_JIT_ENTRY+0x175>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 74 73                         je      0x1e8 <_JIT_ENTRY+0x1e8>
// 175: 85 ed                         testl   %ebp, %ebp
// 177: 0f 88 0d 01 00 00             js      0x28a <_JIT_ENTRY+0x28a>
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 85 ff                      testq   %rdi, %rdi
// 185: 0f 84 ff 00 00 00             je      0x28a <_JIT_ENTRY+0x28a>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NoneStruct
// 195: 48 39 c7                      cmpq    %rax, %rdi
// 198: 74 11                         je      0x1ab <_JIT_ENTRY+0x1ab>
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  PyErr_SetHandledException
// 1a4: ff d0                         callq   *%rax
// 1a6: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1ab: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b0: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b4: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1b8: 48 8b 40 e8                   movq    -0x18(%rax), %rax
// 1bc: a8 01                         testb   $0x1, %al
// 1be: 75 40                         jne     0x200 <_JIT_ENTRY+0x200>
// 1c0: 48 85 c0                      testq   %rax, %rax
// 1c3: 74 3b                         je      0x200 <_JIT_ENTRY+0x200>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _JIT_CONTINUE
// 1cf: 4c 89 f7                      movq    %r14, %rdi
// 1d2: 48 89 de                      movq    %rbx, %rsi
// 1d5: 4c 89 e2                      movq    %r12, %rdx
// 1d8: 48 83 c4 18                   addq    $0x18, %rsp
// 1dc: 5b                            popq    %rbx
// 1dd: 41 5c                         popq    %r12
// 1df: 41 5d                         popq    %r13
// 1e1: 41 5e                         popq    %r14
// 1e3: 41 5f                         popq    %r15
// 1e5: 5d                            popq    %rbp
// 1e6: ff e0                         jmpq    *%rax
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _Py_Dealloc
// 1f2: 4c 89 ff                      movq    %r15, %rdi
// 1f5: ff d0                         callq   *%rax
// 1f7: 85 ed                         testl   %ebp, %ebp
// 1f9: 79 82                         jns     0x17d <_JIT_ENTRY+0x17d>
// 1fb: e9 8a 00 00 00                jmp     0x28a <_JIT_ENTRY+0x28a>
// 200: 4c 29 f3                      subq    %r14, %rbx
// 203: 48 83 c3 b8                   addq    $-0x48, %rbx
// 207: 48 c1 eb 03                   shrq    $0x3, %rbx
// 20b: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 20f: 49 8b 06                      movq    (%r14), %rax
// 212: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000214:  R_X86_64_64  _JIT_TARGET
// 21c: 89 c9                         movl    %ecx, %ecx
// 21e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 222: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 228: eb 75                         jmp     0x29f <_JIT_ENTRY+0x29f>
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_Dealloc
// 234: 4c 89 ef                      movq    %r13, %rdi
// 237: ff d0                         callq   *%rax
// 239: 49 8b 07                      movq    (%r15), %rax
// 23c: 48 85 c0                      testq   %rax, %rax
// 23f: 0f 8f d6 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 245: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000247:  R_X86_64_64  .rodata.str1.1
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _Py_NegativeRefcount
// 259: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 25e: 4c 89 fa                      movq    %r15, %rdx
// 261: ff d0                         callq   *%rax
// 263: 49 8b 07                      movq    (%r15), %rax
// 266: 85 c0                         testl   %eax, %eax
// 268: 78 20                         js      0x28a <_JIT_ENTRY+0x28a>
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 274: ff d0                         callq   *%rax
// 276: 49 ff 0f                      decq    (%r15)
// 279: 75 0f                         jne     0x28a <_JIT_ENTRY+0x28a>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_Dealloc
// 285: 4c 89 ff                      movq    %r15, %rdi
// 288: ff d0                         callq   *%rax
// 28a: 48 83 c3 f0                   addq    $-0x10, %rbx
// 28e: 4c 29 f3                      subq    %r14, %rbx
// 291: 48 83 c3 b8                   addq    $-0x48, %rbx
// 295: 48 c1 eb 03                   shrq    $0x3, %rbx
// 299: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 29d: 31 c0                         xorl    %eax, %eax
// 29f: 48 83 c4 18                   addq    $0x18, %rsp
// 2a3: 5b                            popq    %rbx
// 2a4: 41 5c                         popq    %r12
// 2a6: 41 5d                         popq    %r13
// 2a8: 41 5e                         popq    %r14
// 2aa: 41 5f                         popq    %r15
// 2ac: 5d                            popq    %rbp
// 2ad: c3                            retq
// 2ae: 
static const unsigned char _CHECK_EG_MATCHplus_CHECK_ATTR_WITH_HINT_code_body[687] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x1b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x2a, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x47, 0x01, 0x00, 0x00, 0xe9, 0x62, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x73, 0x85, 0xed, 0x0f, 0x88, 0x0d, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xff, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0x8b, 0x40, 0xe8, 0xa8, 0x01, 0x75, 0x40, 0x48, 0x85, 0xc0, 0x74, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x79, 0x82, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x75, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xd6, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_CHECK_ATTR_WITH_HINT_code_holes[23] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CHECK_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CHECK_ATTR_WITH_HINT_data_holes[1];

// _CHECK_EG_MATCHplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 62                         jle     0xdf <_JIT_ENTRY+0xdf>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 80 00 00 00             jns     0x105 <_JIT_ENTRY+0x105>
// 85: e9 9c 00 00 00                jmp     0x126 <_JIT_ENTRY+0x126>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c3 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// c6: 49 8b 07                      movq    (%r15), %rax
// c9: 48 85 c0                      testq   %rax, %rax
// cc: 0f 8e d2 00 00 00             jle     0x1a4 <_JIT_ENTRY+0x1a4>
// d2: 85 c0                         testl   %eax, %eax
// d4: 0f 89 ef 00 00 00             jns     0x1c9 <_JIT_ENTRY+0x1c9>
// da: e9 ff 00 00 00                jmp     0x1de <_JIT_ENTRY+0x1de>
// df: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e1:  R_X86_64_64  .rodata.str1.1
// e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000eb:  R_X86_64_64  _Py_NegativeRefcount
// f3: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f8: 4c 89 ea                      movq    %r13, %rdx
// fb: ff d0                         callq   *%rax
// fd: 49 8b 45 00                   movq    (%r13), %rax
// 101: 85 c0                         testl   %eax, %eax
// 103: 78 21                         js      0x126 <_JIT_ENTRY+0x126>
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10f: ff d0                         callq   *%rax
// 111: 49 ff 4d 00                   decq    (%r13)
// 115: 75 0f                         jne     0x126 <_JIT_ENTRY+0x126>
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_Dealloc
// 121: 4c 89 ef                      movq    %r13, %rdi
// 124: ff d0                         callq   *%rax
// 126: 49 8b 07                      movq    (%r15), %rax
// 129: 48 85 c0                      testq   %rax, %rax
// 12c: 7e 09                         jle     0x137 <_JIT_ENTRY+0x137>
// 12e: 85 c0                         testl   %eax, %eax
// 130: 79 2e                         jns     0x160 <_JIT_ENTRY+0x160>
// 132: e9 70 01 00 00                jmp     0x2a7 <_JIT_ENTRY+0x2a7>
// 137: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000139:  R_X86_64_64  .rodata.str1.1
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_NegativeRefcount
// 14b: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 150: 4c 89 fa                      movq    %r15, %rdx
// 153: ff d0                         callq   *%rax
// 155: 49 8b 07                      movq    (%r15), %rax
// 158: 85 c0                         testl   %eax, %eax
// 15a: 0f 88 47 01 00 00             js      0x2a7 <_JIT_ENTRY+0x2a7>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0f                      decq    (%r15)
// 16f: 0f 85 32 01 00 00             jne     0x2a7 <_JIT_ENTRY+0x2a7>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ff                      movq    %r15, %rdi
// 182: ff d0                         callq   *%rax
// 184: e9 1e 01 00 00                jmp     0x2a7 <_JIT_ENTRY+0x2a7>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 49 8b 07                      movq    (%r15), %rax
// 19b: 48 85 c0                      testq   %rax, %rax
// 19e: 0f 8f 2e ff ff ff             jg      0xd2 <_JIT_ENTRY+0xd2>
// 1a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a6:  R_X86_64_64  .rodata.str1.1
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_NegativeRefcount
// 1b8: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1bd: 4c 89 fa                      movq    %r15, %rdx
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 8b 07                      movq    (%r15), %rax
// 1c5: 85 c0                         testl   %eax, %eax
// 1c7: 78 15                         js      0x1de <_JIT_ENTRY+0x1de>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d3: ff d0                         callq   *%rax
// 1d5: 49 ff 0f                      decq    (%r15)
// 1d8: 0f 84 b2 00 00 00             je      0x290 <_JIT_ENTRY+0x290>
// 1de: 85 ed                         testl   %ebp, %ebp
// 1e0: 0f 88 c1 00 00 00             js      0x2a7 <_JIT_ENTRY+0x2a7>
// 1e6: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1eb: 48 85 ff                      testq   %rdi, %rdi
// 1ee: 0f 84 b3 00 00 00             je      0x2a7 <_JIT_ENTRY+0x2a7>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_NoneStruct
// 1fe: 48 39 c7                      cmpq    %rax, %rdi
// 201: 74 11                         je      0x214 <_JIT_ENTRY+0x214>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  PyErr_SetHandledException
// 20d: ff d0                         callq   *%rax
// 20f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 214: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 219: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 21d: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _JIT_OPARG
// 22b: f7 d0                         notl    %eax
// 22d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 232: 48 98                         cltq
// 234: 48 83 3c c3 00                cmpq    $0x0, (%rbx,%rax,8)
// 239: 75 2b                         jne     0x266 <_JIT_ENTRY+0x266>
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _JIT_OPARG
// 245: 0f b7 c0                      movzwl  %ax, %eax
// 248: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 24d: 29 c1                         subl    %eax, %ecx
// 24f: 48 63 c1                      movslq  %ecx, %rax
// 252: 48 8b 04 c3                   movq    (%rbx,%rax,8), %rax
// 256: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000258:  R_X86_64_64  PyMethod_Type
// 260: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 264: 74 65                         je      0x2cb <_JIT_ENTRY+0x2cb>
// 266: 4c 29 f3                      subq    %r14, %rbx
// 269: 48 83 c3 b8                   addq    $-0x48, %rbx
// 26d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 271: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 275: 49 8b 06                      movq    (%r14), %rax
// 278: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027a:  R_X86_64_64  _JIT_TARGET
// 282: 89 c9                         movl    %ecx, %ecx
// 284: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 288: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 28e: eb 2c                         jmp     0x2bc <_JIT_ENTRY+0x2bc>
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  _Py_Dealloc
// 29a: 4c 89 ff                      movq    %r15, %rdi
// 29d: ff d0                         callq   *%rax
// 29f: 85 ed                         testl   %ebp, %ebp
// 2a1: 0f 89 3f ff ff ff             jns     0x1e6 <_JIT_ENTRY+0x1e6>
// 2a7: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2ab: 4c 29 f3                      subq    %r14, %rbx
// 2ae: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2b2: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2b6: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2ba: 31 c0                         xorl    %eax, %eax
// 2bc: 48 83 c4 18                   addq    $0x18, %rsp
// 2c0: 5b                            popq    %rbx
// 2c1: 41 5c                         popq    %r12
// 2c3: 41 5d                         popq    %r13
// 2c5: 41 5e                         popq    %r14
// 2c7: 41 5f                         popq    %r15
// 2c9: 5d                            popq    %rbp
// 2ca: c3                            retq
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _JIT_CONTINUE
// 2d5: 4c 89 f7                      movq    %r14, %rdi
// 2d8: 48 89 de                      movq    %rbx, %rsi
// 2db: 4c 89 e2                      movq    %r12, %rdx
// 2de: 48 83 c4 18                   addq    $0x18, %rsp
// 2e2: 5b                            popq    %rbx
// 2e3: 41 5c                         popq    %r12
// 2e5: 41 5d                         popq    %r13
// 2e7: 41 5e                         popq    %r14
// 2e9: 41 5f                         popq    %r15
// 2eb: 5d                            popq    %rbp
// 2ec: ff e0                         jmpq    *%rax
// 2ee: 
static const unsigned char _CHECK_EG_MATCHplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_body[751] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x62, 0x85, 0xc0, 0x0f, 0x89, 0x80, 0x00, 0x00, 0x00, 0xe9, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd2, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xef, 0x00, 0x00, 0x00, 0xe9, 0xff, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2e, 0xe9, 0x70, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x47, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x32, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x1e, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2e, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xc1, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x83, 0x3c, 0xc3, 0x00, 0x75, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x04, 0xc3, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x65, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x3f, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[26] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethod_Type, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _CHECK_EG_MATCHplus_CHECK_EG_MATCH
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CHECK_EG_MATCH.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: 41 ff d6                      callq   *%r14
// 32: 85 c0                         testl   %eax, %eax
// 34: 0f 88 69 02 00 00             js      0x2a3 <_JIT_ENTRY+0x2a3>
// 3a: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3f: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 47: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 5a: 48 89 e2                      movq    %rsp, %rdx
// 5d: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 62: 4c 89 ef                      movq    %r13, %rdi
// 65: 4c 89 e6                      movq    %r12, %rsi
// 68: ff d0                         callq   *%rax
// 6a: 89 c5                         movl    %eax, %ebp
// 6c: 49 8b 45 00                   movq    (%r13), %rax
// 70: 48 85 c0                      testq   %rax, %rax
// 73: 7e 06                         jle     0x7b <_JIT_ENTRY+0x7b>
// 75: 85 c0                         testl   %eax, %eax
// 77: 79 28                         jns     0xa1 <_JIT_ENTRY+0xa1>
// 79: eb 38                         jmp     0xb3 <_JIT_ENTRY+0xb3>
// 7b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007d:  R_X86_64_64  .rodata.str1.1
// 85: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000087:  R_X86_64_64  _Py_NegativeRefcount
// 8f: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 94: 4c 89 ea                      movq    %r13, %rdx
// 97: ff d0                         callq   *%rax
// 99: 49 8b 45 00                   movq    (%r13), %rax
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 12                         js      0xb3 <_JIT_ENTRY+0xb3>
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ab: ff d0                         callq   *%rax
// ad: 49 ff 4d 00                   decq    (%r13)
// b1: 74 0f                         je      0xc2 <_JIT_ENTRY+0xc2>
// b3: 49 8b 04 24                   movq    (%r12), %rax
// b7: 48 85 c0                      testq   %rax, %rax
// ba: 7e 1e                         jle     0xda <_JIT_ENTRY+0xda>
// bc: 85 c0                         testl   %eax, %eax
// be: 79 40                         jns     0x100 <_JIT_ENTRY+0x100>
// c0: eb 54                         jmp     0x116 <_JIT_ENTRY+0x116>
// c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c4:  R_X86_64_64  _Py_Dealloc
// cc: 4c 89 ef                      movq    %r13, %rdi
// cf: ff d0                         callq   *%rax
// d1: 49 8b 04 24                   movq    (%r12), %rax
// d5: 48 85 c0                      testq   %rax, %rax
// d8: 7f e2                         jg      0xbc <_JIT_ENTRY+0xbc>
// da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000dc:  R_X86_64_64  .rodata.str1.1
// e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e6:  R_X86_64_64  _Py_NegativeRefcount
// ee: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// f3: 4c 89 e2                      movq    %r12, %rdx
// f6: ff d0                         callq   *%rax
// f8: 49 8b 04 24                   movq    (%r12), %rax
// fc: 85 c0                         testl   %eax, %eax
// fe: 78 16                         js      0x116 <_JIT_ENTRY+0x116>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10a: ff d0                         callq   *%rax
// 10c: 49 ff 0c 24                   decq    (%r12)
// 110: 0f 84 e3 01 00 00             je      0x2f9 <_JIT_ENTRY+0x2f9>
// 116: 85 ed                         testl   %ebp, %ebp
// 118: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 11d: 0f 88 53 02 00 00             js      0x376 <_JIT_ENTRY+0x376>
// 123: 48 8b 3c 24                   movq    (%rsp), %rdi
// 127: 48 85 ff                      testq   %rdi, %rdi
// 12a: 0f 84 46 02 00 00             je      0x376 <_JIT_ENTRY+0x376>
// 130: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000132:  R_X86_64_64  _Py_NoneStruct
// 13a: 4c 39 e7                      cmpq    %r12, %rdi
// 13d: 74 10                         je      0x14f <_JIT_ENTRY+0x14f>
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  PyErr_SetHandledException
// 149: ff d0                         callq   *%rax
// 14b: 4c 8b 24 24                   movq    (%rsp), %r12
// 14f: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 154: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 158: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 15c: 4c 89 ff                      movq    %r15, %rdi
// 15f: 4c 89 e6                      movq    %r12, %rsi
// 162: 41 ff d6                      callq   *%r14
// 165: 85 c0                         testl   %eax, %eax
// 167: 0f 88 36 01 00 00             js      0x2a3 <_JIT_ENTRY+0x2a3>
// 16d: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 175: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 17e: 48 89 e2                      movq    %rsp, %rdx
// 181: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 186: 4c 89 ef                      movq    %r13, %rdi
// 189: 4c 89 e6                      movq    %r12, %rsi
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 196: ff d0                         callq   *%rax
// 198: 89 c5                         movl    %eax, %ebp
// 19a: 49 8b 45 00                   movq    (%r13), %rax
// 19e: 48 85 c0                      testq   %rax, %rax
// 1a1: 7f 22                         jg      0x1c5 <_JIT_ENTRY+0x1c5>
// 1a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a5:  R_X86_64_64  .rodata.str1.1
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  _Py_NegativeRefcount
// 1b7: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 1bc: 4c 89 ea                      movq    %r13, %rdx
// 1bf: ff d0                         callq   *%rax
// 1c1: 49 8b 45 00                   movq    (%r13), %rax
// 1c5: 85 c0                         testl   %eax, %eax
// 1c7: 78 21                         js      0x1ea <_JIT_ENTRY+0x1ea>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d3: ff d0                         callq   *%rax
// 1d5: 49 ff 4d 00                   decq    (%r13)
// 1d9: 75 0f                         jne     0x1ea <_JIT_ENTRY+0x1ea>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: 4c 89 ef                      movq    %r13, %rdi
// 1e8: ff d0                         callq   *%rax
// 1ea: 49 8b 04 24                   movq    (%r12), %rax
// 1ee: 48 85 c0                      testq   %rax, %rax
// 1f1: 7f 22                         jg      0x215 <_JIT_ENTRY+0x215>
// 1f3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f5:  R_X86_64_64  .rodata.str1.1
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  _Py_NegativeRefcount
// 207: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 20c: 4c 89 e2                      movq    %r12, %rdx
// 20f: ff d0                         callq   *%rax
// 211: 49 8b 04 24                   movq    (%r12), %rax
// 215: 85 c0                         testl   %eax, %eax
// 217: 78 21                         js      0x23a <_JIT_ENTRY+0x23a>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 223: ff d0                         callq   *%rax
// 225: 49 ff 0c 24                   decq    (%r12)
// 229: 75 0f                         jne     0x23a <_JIT_ENTRY+0x23a>
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_Dealloc
// 235: 4c 89 e7                      movq    %r12, %rdi
// 238: ff d0                         callq   *%rax
// 23a: 85 ed                         testl   %ebp, %ebp
// 23c: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 241: 0f 88 2f 01 00 00             js      0x376 <_JIT_ENTRY+0x376>
// 247: 48 8b 3c 24                   movq    (%rsp), %rdi
// 24b: 48 85 ff                      testq   %rdi, %rdi
// 24e: 0f 84 22 01 00 00             je      0x376 <_JIT_ENTRY+0x376>
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _Py_NoneStruct
// 25e: 48 39 c7                      cmpq    %rax, %rdi
// 261: 74 10                         je      0x273 <_JIT_ENTRY+0x273>
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  PyErr_SetHandledException
// 26d: ff d0                         callq   *%rax
// 26f: 48 8b 04 24                   movq    (%rsp), %rax
// 273: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 278: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 27c: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _JIT_CONTINUE
// 28a: 48 89 ef                      movq    %rbp, %rdi
// 28d: 48 89 de                      movq    %rbx, %rsi
// 290: 4c 89 fa                      movq    %r15, %rdx
// 293: 48 83 c4 18                   addq    $0x18, %rsp
// 297: 5b                            popq    %rbx
// 298: 41 5c                         popq    %r12
// 29a: 41 5d                         popq    %r13
// 29c: 41 5e                         popq    %r14
// 29e: 41 5f                         popq    %r15
// 2a0: 5d                            popq    %rbp
// 2a1: ff e0                         jmpq    *%rax
// 2a3: 49 8b 45 00                   movq    (%r13), %rax
// 2a7: 48 85 c0                      testq   %rax, %rax
// 2aa: 7e 06                         jle     0x2b2 <_JIT_ENTRY+0x2b2>
// 2ac: 85 c0                         testl   %eax, %eax
// 2ae: 79 28                         jns     0x2d8 <_JIT_ENTRY+0x2d8>
// 2b0: eb 38                         jmp     0x2ea <_JIT_ENTRY+0x2ea>
// 2b2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b4:  R_X86_64_64  .rodata.str1.1
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  _Py_NegativeRefcount
// 2c6: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 2cb: 4c 89 ea                      movq    %r13, %rdx
// 2ce: ff d0                         callq   *%rax
// 2d0: 49 8b 45 00                   movq    (%r13), %rax
// 2d4: 85 c0                         testl   %eax, %eax
// 2d6: 78 12                         js      0x2ea <_JIT_ENTRY+0x2ea>
// 2d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002da:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e2: ff d0                         callq   *%rax
// 2e4: 49 ff 4d 00                   decq    (%r13)
// 2e8: 74 2d                         je      0x317 <_JIT_ENTRY+0x317>
// 2ea: 49 8b 04 24                   movq    (%r12), %rax
// 2ee: 48 85 c0                      testq   %rax, %rax
// 2f1: 7e 3c                         jle     0x32f <_JIT_ENTRY+0x32f>
// 2f3: 85 c0                         testl   %eax, %eax
// 2f5: 79 5e                         jns     0x355 <_JIT_ENTRY+0x355>
// 2f7: eb 7d                         jmp     0x376 <_JIT_ENTRY+0x376>
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_Dealloc
// 303: 4c 89 e7                      movq    %r12, %rdi
// 306: ff d0                         callq   *%rax
// 308: 85 ed                         testl   %ebp, %ebp
// 30a: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 30f: 0f 89 0e fe ff ff             jns     0x123 <_JIT_ENTRY+0x123>
// 315: eb 5f                         jmp     0x376 <_JIT_ENTRY+0x376>
// 317: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000319:  R_X86_64_64  _Py_Dealloc
// 321: 4c 89 ef                      movq    %r13, %rdi
// 324: ff d0                         callq   *%rax
// 326: 49 8b 04 24                   movq    (%r12), %rax
// 32a: 48 85 c0                      testq   %rax, %rax
// 32d: 7f c4                         jg      0x2f3 <_JIT_ENTRY+0x2f3>
// 32f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000331:  R_X86_64_64  .rodata.str1.1
// 339: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033b:  R_X86_64_64  _Py_NegativeRefcount
// 343: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 348: 4c 89 e2                      movq    %r12, %rdx
// 34b: ff d0                         callq   *%rax
// 34d: 49 8b 04 24                   movq    (%r12), %rax
// 351: 85 c0                         testl   %eax, %eax
// 353: 78 21                         js      0x376 <_JIT_ENTRY+0x376>
// 355: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000357:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 35f: ff d0                         callq   *%rax
// 361: 49 ff 0c 24                   decq    (%r12)
// 365: 75 0f                         jne     0x376 <_JIT_ENTRY+0x376>
// 367: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000369:  R_X86_64_64  _Py_Dealloc
// 371: 4c 89 e7                      movq    %r12, %rdi
// 374: ff d0                         callq   *%rax
// 376: 48 83 c3 f0                   addq    $-0x10, %rbx
// 37a: 48 29 eb                      subq    %rbp, %rbx
// 37d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 381: 48 c1 eb 03                   shrq    $0x3, %rbx
// 385: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 388: 31 c0                         xorl    %eax, %eax
// 38a: 48 83 c4 18                   addq    $0x18, %rsp
// 38e: 5b                            popq    %rbx
// 38f: 41 5c                         popq    %r12
// 391: 41 5d                         popq    %r13
// 393: 41 5e                         popq    %r14
// 395: 41 5f                         popq    %r15
// 397: 5d                            popq    %rbp
// 398: c3                            retq
// 399: 
static const unsigned char _CHECK_EG_MATCHplus_CHECK_EG_MATCH_code_body[922] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x48, 0x89, 0xfd, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd6, 0x85, 0xc0, 0x0f, 0x88, 0x69, 0x02, 0x00, 0x00, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xe3, 0x01, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x88, 0x53, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x46, 0x02, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x89, 0x6b, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd6, 0x85, 0xc0, 0x0f, 0x88, 0x36, 0x01, 0x00, 0x00, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x88, 0x2f, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x22, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x2d, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3c, 0x85, 0xc0, 0x79, 0x5e, 0xeb, 0x7d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x89, 0x0e, 0xfe, 0xff, 0xff, 0xeb, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xc4, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_CHECK_EG_MATCH_code_holes[33] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x87, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x319, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x331, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x357, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x369, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CHECK_EG_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CHECK_EG_MATCH_data_holes[1];

// _CHECK_EG_MATCHplus_CHECK_EXC_MATCH
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CHECK_EXC_MATCH.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 e2 01 00 00             je      0x2f2 <_JIT_ENTRY+0x2f2>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e f1 01 00 00             jle     0x30e <_JIT_ENTRY+0x30e>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 0f 02 00 00             jns     0x334 <_JIT_ENTRY+0x334>
// 125: e9 2b 02 00 00                jmp     0x355 <_JIT_ENTRY+0x355>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 02 01 00 00             je      0x280 <_JIT_ENTRY+0x280>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 cf 01 00 00             js      0x355 <_JIT_ENTRY+0x355>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 c1 01 00 00             je      0x355 <_JIT_ENTRY+0x355>
// 194: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 4c 39 e7                      cmpq    %r12, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 1b4: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 1b9: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 1bd: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _PyEval_CheckExceptTypeValid
// 1cb: 4c 89 ff                      movq    %r15, %rdi
// 1ce: 4c 89 e6                      movq    %r12, %rsi
// 1d1: ff d0                         callq   *%rax
// 1d3: 85 c0                         testl   %eax, %eax
// 1d5: 0f 88 c1 00 00 00             js      0x29c <_JIT_ENTRY+0x29c>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  PyErr_GivenExceptionMatches
// 1e5: 4c 89 ef                      movq    %r13, %rdi
// 1e8: 4c 89 e6                      movq    %r12, %rsi
// 1eb: ff d0                         callq   *%rax
// 1ed: 89 c5                         movl    %eax, %ebp
// 1ef: 49 8b 04 24                   movq    (%r12), %rax
// 1f3: 48 85 c0                      testq   %rax, %rax
// 1f6: 7f 22                         jg      0x21a <_JIT_ENTRY+0x21a>
// 1f8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fa:  R_X86_64_64  .rodata.str1.1
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: be da 07 00 00                movl    $0x7da, %esi            # imm = 0x7DA
// 211: 4c 89 e2                      movq    %r12, %rdx
// 214: ff d0                         callq   *%rax
// 216: 49 8b 04 24                   movq    (%r12), %rax
// 21a: 85 c0                         testl   %eax, %eax
// 21c: 78 21                         js      0x23f <_JIT_ENTRY+0x23f>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 228: ff d0                         callq   *%rax
// 22a: 49 ff 0c 24                   decq    (%r12)
// 22e: 75 0f                         jne     0x23f <_JIT_ENTRY+0x23f>
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _Py_Dealloc
// 23a: 4c 89 e7                      movq    %r12, %rdi
// 23d: ff d0                         callq   *%rax
// 23f: 85 ed                         testl   %ebp, %ebp
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _Py_FalseStruct
// 24b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024d:  R_X86_64_64  _Py_TrueStruct
// 255: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 259: 48 89 4b f8                   movq    %rcx, -0x8(%rbx)
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _JIT_CONTINUE
// 267: 4c 89 f7                      movq    %r14, %rdi
// 26a: 48 89 de                      movq    %rbx, %rsi
// 26d: 4c 89 fa                      movq    %r15, %rdx
// 270: 48 83 c4 18                   addq    $0x18, %rsp
// 274: 5b                            popq    %rbx
// 275: 41 5c                         popq    %r12
// 277: 41 5d                         popq    %r13
// 279: 41 5e                         popq    %r14
// 27b: 41 5f                         popq    %r15
// 27d: 5d                            popq    %rbp
// 27e: ff e0                         jmpq    *%rax
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_Dealloc
// 28a: 4c 89 e7                      movq    %r12, %rdi
// 28d: ff d0                         callq   *%rax
// 28f: 85 ed                         testl   %ebp, %ebp
// 291: 0f 89 ef fe ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 297: e9 b9 00 00 00                jmp     0x355 <_JIT_ENTRY+0x355>
// 29c: 49 8b 04 24                   movq    (%r12), %rax
// 2a0: 48 85 c0                      testq   %rax, %rax
// 2a3: 7f 22                         jg      0x2c7 <_JIT_ENTRY+0x2c7>
// 2a5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a7:  R_X86_64_64  .rodata.str1.1
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _Py_NegativeRefcount
// 2b9: be d6 07 00 00                movl    $0x7d6, %esi            # imm = 0x7D6
// 2be: 4c 89 e2                      movq    %r12, %rdx
// 2c1: ff d0                         callq   *%rax
// 2c3: 49 8b 04 24                   movq    (%r12), %rax
// 2c7: 85 c0                         testl   %eax, %eax
// 2c9: 0f 88 8a 00 00 00             js      0x359 <_JIT_ENTRY+0x359>
// 2cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d9: ff d0                         callq   *%rax
// 2db: 49 ff 0c 24                   decq    (%r12)
// 2df: 75 78                         jne     0x359 <_JIT_ENTRY+0x359>
// 2e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e3:  R_X86_64_64  _Py_Dealloc
// 2eb: 4c 89 e7                      movq    %r12, %rdi
// 2ee: ff d0                         callq   *%rax
// 2f0: eb 67                         jmp     0x359 <_JIT_ENTRY+0x359>
// 2f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f4:  R_X86_64_64  _Py_Dealloc
// 2fc: 4c 89 ef                      movq    %r13, %rdi
// 2ff: ff d0                         callq   *%rax
// 301: 49 8b 04 24                   movq    (%r12), %rax
// 305: 48 85 c0                      testq   %rax, %rax
// 308: 0f 8f 0f fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 30e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000310:  R_X86_64_64  .rodata.str1.1
// 318: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031a:  R_X86_64_64  _Py_NegativeRefcount
// 322: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 327: 4c 89 e2                      movq    %r12, %rdx
// 32a: ff d0                         callq   *%rax
// 32c: 49 8b 04 24                   movq    (%r12), %rax
// 330: 85 c0                         testl   %eax, %eax
// 332: 78 21                         js      0x355 <_JIT_ENTRY+0x355>
// 334: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000336:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 33e: ff d0                         callq   *%rax
// 340: 49 ff 0c 24                   decq    (%r12)
// 344: 75 0f                         jne     0x355 <_JIT_ENTRY+0x355>
// 346: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000348:  R_X86_64_64  _Py_Dealloc
// 350: 4c 89 e7                      movq    %r12, %rdi
// 353: ff d0                         callq   *%rax
// 355: 48 83 c3 f8                   addq    $-0x8, %rbx
// 359: 4c 29 f3                      subq    %r14, %rbx
// 35c: 48 83 c3 b0                   addq    $-0x50, %rbx
// 360: 48 c1 eb 03                   shrq    $0x3, %rbx
// 364: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 368: 31 c0                         xorl    %eax, %eax
// 36a: 48 83 c4 18                   addq    $0x18, %rsp
// 36e: 5b                            popq    %rbx
// 36f: 41 5c                         popq    %r12
// 371: 41 5d                         popq    %r13
// 373: 41 5e                         popq    %r14
// 375: 41 5f                         popq    %r15
// 377: 5d                            popq    %rbp
// 378: c3                            retq
// 379: 
static const unsigned char _CHECK_EG_MATCHplus_CHECK_EXC_MATCH_code_body[890] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xe2, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xf1, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x0f, 0x02, 0x00, 0x00, 0xe9, 0x2b, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x02, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xcf, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xc1, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x4c, 0x89, 0x6b, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xc1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xda, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x4b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0xef, 0xfe, 0xff, 0xff, 0xe9, 0xb9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x78, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x67, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x0f, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_CHECK_EXC_MATCH_code_holes[34] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptTypeValid, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_GivenExceptionMatches, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x336, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x348, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CHECK_EXC_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CHECK_EXC_MATCH_data_holes[1];

// _CHECK_EG_MATCHplus_CHECK_FUNCTION_EXACT_ARGS
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CHECK_FUNCTION_EXACT_ARGS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 75 01 00 00             je      0x284 <_JIT_ENTRY+0x284>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 84 01 00 00             jle     0x29f <_JIT_ENTRY+0x29f>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 a1 01 00 00             jns     0x2c4 <_JIT_ENTRY+0x2c4>
// 123: e9 bc 01 00 00                jmp     0x2e4 <_JIT_ENTRY+0x2e4>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 f2 00 00 00             je      0x26b <_JIT_ENTRY+0x26b>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 63 01 00 00             js      0x2e4 <_JIT_ENTRY+0x2e4>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 55 01 00 00             je      0x2e4 <_JIT_ENTRY+0x2e4>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _JIT_OPARG
// 1c6: 0f b7 c0                      movzwl  %ax, %eax
// 1c9: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ce: 29 c1                         subl    %eax, %ecx
// 1d0: 48 63 c9                      movslq  %ecx, %rcx
// 1d3: 48 8b 0c cb                   movq    (%rbx,%rcx,8), %rcx
// 1d7: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001d9:  R_X86_64_64  PyFunction_Type
// 1e1: 48 39 51 08                   cmpq    %rdx, 0x8(%rcx)
// 1e5: 75 57                         jne     0x23e <_JIT_ENTRY+0x23e>
// 1e7: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001e9:  R_X86_64_64  _JIT_OPERAND
// 1f1: 39 91 88 00 00 00             cmpl    %edx, 0x88(%rcx)
// 1f7: 75 45                         jne     0x23e <_JIT_ENTRY+0x23e>
// 1f9: f7 d0                         notl    %eax
// 1fb: 48 98                         cltq
// 1fd: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 201: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000203:  R_X86_64_64  _JIT_OPARG
// 20b: 0f b7 d2                      movzwl  %dx, %edx
// 20e: 48 83 3c c3 01                cmpq    $0x1, (%rbx,%rax,8)
// 213: 83 da ff                      sbbl    $-0x1, %edx
// 216: 39 51 34                      cmpl    %edx, 0x34(%rcx)
// 219: 75 23                         jne     0x23e <_JIT_ENTRY+0x23e>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _JIT_CONTINUE
// 225: 4c 89 f7                      movq    %r14, %rdi
// 228: 48 89 de                      movq    %rbx, %rsi
// 22b: 4c 89 e2                      movq    %r12, %rdx
// 22e: 48 83 c4 18                   addq    $0x18, %rsp
// 232: 5b                            popq    %rbx
// 233: 41 5c                         popq    %r12
// 235: 41 5d                         popq    %r13
// 237: 41 5e                         popq    %r14
// 239: 41 5f                         popq    %r15
// 23b: 5d                            popq    %rbp
// 23c: ff e0                         jmpq    *%rax
// 23e: 4c 29 f3                      subq    %r14, %rbx
// 241: 48 83 c3 b8                   addq    $-0x48, %rbx
// 245: 48 c1 eb 03                   shrq    $0x3, %rbx
// 249: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 24d: 49 8b 06                      movq    (%r14), %rax
// 250: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000252:  R_X86_64_64  _JIT_TARGET
// 25a: 89 c9                         movl    %ecx, %ecx
// 25c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 260: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 266: e9 8e 00 00 00                jmp     0x2f9 <_JIT_ENTRY+0x2f9>
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_Dealloc
// 275: 4c 89 ff                      movq    %r15, %rdi
// 278: ff d0                         callq   *%rax
// 27a: 85 ed                         testl   %ebp, %ebp
// 27c: 0f 89 ff fe ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 282: eb 60                         jmp     0x2e4 <_JIT_ENTRY+0x2e4>
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_Dealloc
// 28e: 4c 89 ef                      movq    %r13, %rdi
// 291: ff d0                         callq   *%rax
// 293: 49 8b 07                      movq    (%r15), %rax
// 296: 48 85 c0                      testq   %rax, %rax
// 299: 0f 8f 7c fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 29f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a1:  R_X86_64_64  .rodata.str1.1
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _Py_NegativeRefcount
// 2b3: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2b8: 4c 89 fa                      movq    %r15, %rdx
// 2bb: ff d0                         callq   *%rax
// 2bd: 49 8b 07                      movq    (%r15), %rax
// 2c0: 85 c0                         testl   %eax, %eax
// 2c2: 78 20                         js      0x2e4 <_JIT_ENTRY+0x2e4>
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ce: ff d0                         callq   *%rax
// 2d0: 49 ff 0f                      decq    (%r15)
// 2d3: 75 0f                         jne     0x2e4 <_JIT_ENTRY+0x2e4>
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _Py_Dealloc
// 2df: 4c 89 ff                      movq    %r15, %rdi
// 2e2: ff d0                         callq   *%rax
// 2e4: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2e8: 4c 29 f3                      subq    %r14, %rbx
// 2eb: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2ef: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2f3: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2f7: 31 c0                         xorl    %eax, %eax
// 2f9: 48 83 c4 18                   addq    $0x18, %rsp
// 2fd: 5b                            popq    %rbx
// 2fe: 41 5c                         popq    %r12
// 300: 41 5d                         popq    %r13
// 302: 41 5e                         popq    %r14
// 304: 41 5f                         popq    %r15
// 306: 5d                            popq    %rbp
// 307: c3                            retq
// 308: 
static const unsigned char _CHECK_EG_MATCHplus_CHECK_FUNCTION_EXACT_ARGS_code_body[777] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x75, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x84, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xa1, 0x01, 0x00, 0x00, 0xe9, 0xbc, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0xf2, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x63, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x55, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x48, 0x8b, 0x0c, 0xcb, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x51, 0x08, 0x75, 0x57, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x91, 0x88, 0x00, 0x00, 0x00, 0x75, 0x45, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x8b, 0x49, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x48, 0x83, 0x3c, 0xc3, 0x01, 0x83, 0xda, 0xff, 0x39, 0x51, 0x34, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0xff, 0xfe, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x7c, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_CHECK_FUNCTION_EXACT_ARGS_code_holes[27] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_Type, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CHECK_FUNCTION_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CHECK_FUNCTION_EXACT_ARGS_data_holes[1];

// _CHECK_EG_MATCHplus_CHECK_MANAGED_OBJECT_HAS_VALUES
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CHECK_MANAGED_OBJECT_HAS_VALUES.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 62                         jle     0xdf <_JIT_ENTRY+0xdf>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 80 00 00 00             jns     0x105 <_JIT_ENTRY+0x105>
// 85: e9 9c 00 00 00                jmp     0x126 <_JIT_ENTRY+0x126>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c3 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// c6: 49 8b 07                      movq    (%r15), %rax
// c9: 48 85 c0                      testq   %rax, %rax
// cc: 0f 8e d2 00 00 00             jle     0x1a4 <_JIT_ENTRY+0x1a4>
// d2: 85 c0                         testl   %eax, %eax
// d4: 0f 89 ef 00 00 00             jns     0x1c9 <_JIT_ENTRY+0x1c9>
// da: e9 ff 00 00 00                jmp     0x1de <_JIT_ENTRY+0x1de>
// df: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e1:  R_X86_64_64  .rodata.str1.1
// e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000eb:  R_X86_64_64  _Py_NegativeRefcount
// f3: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f8: 4c 89 ea                      movq    %r13, %rdx
// fb: ff d0                         callq   *%rax
// fd: 49 8b 45 00                   movq    (%r13), %rax
// 101: 85 c0                         testl   %eax, %eax
// 103: 78 21                         js      0x126 <_JIT_ENTRY+0x126>
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10f: ff d0                         callq   *%rax
// 111: 49 ff 4d 00                   decq    (%r13)
// 115: 75 0f                         jne     0x126 <_JIT_ENTRY+0x126>
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_Dealloc
// 121: 4c 89 ef                      movq    %r13, %rdi
// 124: ff d0                         callq   *%rax
// 126: 49 8b 07                      movq    (%r15), %rax
// 129: 48 85 c0                      testq   %rax, %rax
// 12c: 7e 09                         jle     0x137 <_JIT_ENTRY+0x137>
// 12e: 85 c0                         testl   %eax, %eax
// 130: 79 2e                         jns     0x160 <_JIT_ENTRY+0x160>
// 132: e9 41 01 00 00                jmp     0x278 <_JIT_ENTRY+0x278>
// 137: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000139:  R_X86_64_64  .rodata.str1.1
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_NegativeRefcount
// 14b: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 150: 4c 89 fa                      movq    %r15, %rdx
// 153: ff d0                         callq   *%rax
// 155: 49 8b 07                      movq    (%r15), %rax
// 158: 85 c0                         testl   %eax, %eax
// 15a: 0f 88 18 01 00 00             js      0x278 <_JIT_ENTRY+0x278>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0f                      decq    (%r15)
// 16f: 0f 85 03 01 00 00             jne     0x278 <_JIT_ENTRY+0x278>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ff                      movq    %r15, %rdi
// 182: ff d0                         callq   *%rax
// 184: e9 ef 00 00 00                jmp     0x278 <_JIT_ENTRY+0x278>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 49 8b 07                      movq    (%r15), %rax
// 19b: 48 85 c0                      testq   %rax, %rax
// 19e: 0f 8f 2e ff ff ff             jg      0xd2 <_JIT_ENTRY+0xd2>
// 1a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a6:  R_X86_64_64  .rodata.str1.1
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_NegativeRefcount
// 1b8: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1bd: 4c 89 fa                      movq    %r15, %rdx
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 8b 07                      movq    (%r15), %rax
// 1c5: 85 c0                         testl   %eax, %eax
// 1c7: 78 15                         js      0x1de <_JIT_ENTRY+0x1de>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d3: ff d0                         callq   *%rax
// 1d5: 49 ff 0f                      decq    (%r15)
// 1d8: 0f 84 83 00 00 00             je      0x261 <_JIT_ENTRY+0x261>
// 1de: 85 ed                         testl   %ebp, %ebp
// 1e0: 0f 88 92 00 00 00             js      0x278 <_JIT_ENTRY+0x278>
// 1e6: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1eb: 48 85 c0                      testq   %rax, %rax
// 1ee: 0f 84 84 00 00 00             je      0x278 <_JIT_ENTRY+0x278>
// 1f4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f6:  R_X86_64_64  _Py_NoneStruct
// 1fe: 48 39 f8                      cmpq    %rdi, %rax
// 201: 74 14                         je      0x217 <_JIT_ENTRY+0x217>
// 203: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000205:  R_X86_64_64  PyErr_SetHandledException
// 20d: 48 89 c7                      movq    %rax, %rdi
// 210: ff d1                         callq   *%rcx
// 212: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 217: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 21c: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 220: 48 89 7b f8                   movq    %rdi, -0x8(%rbx)
// 224: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 228: 75 14                         jne     0x23e <_JIT_ENTRY+0x23e>
// 22a: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 238: ff d0                         callq   *%rax
// 23a: 84 c0                         testb   %al, %al
// 23c: 74 5e                         je      0x29c <_JIT_ENTRY+0x29c>
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _JIT_CONTINUE
// 248: 4c 89 f7                      movq    %r14, %rdi
// 24b: 48 89 de                      movq    %rbx, %rsi
// 24e: 4c 89 e2                      movq    %r12, %rdx
// 251: 48 83 c4 18                   addq    $0x18, %rsp
// 255: 5b                            popq    %rbx
// 256: 41 5c                         popq    %r12
// 258: 41 5d                         popq    %r13
// 25a: 41 5e                         popq    %r14
// 25c: 41 5f                         popq    %r15
// 25e: 5d                            popq    %rbp
// 25f: ff e0                         jmpq    *%rax
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_Dealloc
// 26b: 4c 89 ff                      movq    %r15, %rdi
// 26e: ff d0                         callq   *%rax
// 270: 85 ed                         testl   %ebp, %ebp
// 272: 0f 89 6e ff ff ff             jns     0x1e6 <_JIT_ENTRY+0x1e6>
// 278: 48 83 c3 f0                   addq    $-0x10, %rbx
// 27c: 4c 29 f3                      subq    %r14, %rbx
// 27f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 283: 48 c1 eb 03                   shrq    $0x3, %rbx
// 287: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 28b: 31 c0                         xorl    %eax, %eax
// 28d: 48 83 c4 18                   addq    $0x18, %rsp
// 291: 5b                            popq    %rbx
// 292: 41 5c                         popq    %r12
// 294: 41 5d                         popq    %r13
// 296: 41 5e                         popq    %r14
// 298: 41 5f                         popq    %r15
// 29a: 5d                            popq    %rbp
// 29b: c3                            retq
// 29c: 4c 29 f3                      subq    %r14, %rbx
// 29f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2a3: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2a7: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2ab: 49 8b 06                      movq    (%r14), %rax
// 2ae: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002b0:  R_X86_64_64  _JIT_TARGET
// 2b8: 89 c9                         movl    %ecx, %ecx
// 2ba: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2be: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2c4: eb c7                         jmp     0x28d <_JIT_ENTRY+0x28d>
// 2c6: 
static const unsigned char _CHECK_EG_MATCHplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_body[711] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x62, 0x85, 0xc0, 0x0f, 0x89, 0x80, 0x00, 0x00, 0x00, 0xe9, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd2, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xef, 0x00, 0x00, 0x00, 0xe9, 0xff, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2e, 0xe9, 0x41, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x18, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x03, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xef, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2e, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x92, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf8, 0x74, 0x14, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x48, 0x89, 0x7b, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x14, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x74, 0x5e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x6e, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0xc7};
static const Hole _CHECK_EG_MATCHplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_holes[1];

// _CHECK_EG_MATCHplus_CHECK_PEP_523
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CHECK_PEP_523.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a2 00 00 00                jmp     0x175 <_JIT_ENTRY+0x175>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 24 01 00 00             je      0x233 <_JIT_ENTRY+0x233>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 33 01 00 00             jle     0x24e <_JIT_ENTRY+0x24e>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 50 01 00 00             jns     0x273 <_JIT_ENTRY+0x273>
// 123: e9 6b 01 00 00                jmp     0x293 <_JIT_ENTRY+0x293>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 11                         js      0x175 <_JIT_ENTRY+0x175>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 74 7f                         je      0x1f4 <_JIT_ENTRY+0x1f4>
// 175: 85 ed                         testl   %ebp, %ebp
// 177: 0f 88 16 01 00 00             js      0x293 <_JIT_ENTRY+0x293>
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 85 ff                      testq   %rdi, %rdi
// 185: 0f 84 08 01 00 00             je      0x293 <_JIT_ENTRY+0x293>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NoneStruct
// 195: 48 39 c7                      cmpq    %rax, %rdi
// 198: 74 11                         je      0x1ab <_JIT_ENTRY+0x1ab>
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  PyErr_SetHandledException
// 1a4: ff d0                         callq   *%rax
// 1a6: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1ab: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b0: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b4: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1b8: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 1bd: 48 83 b8 20 08 00 00 00       cmpq    $0x0, 0x820(%rax)
// 1c5: 74 49                         je      0x210 <_JIT_ENTRY+0x210>
// 1c7: 4c 29 f3                      subq    %r14, %rbx
// 1ca: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1ce: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1d2: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1d6: 49 8b 06                      movq    (%r14), %rax
// 1d9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001db:  R_X86_64_64  _JIT_TARGET
// 1e3: 89 c9                         movl    %ecx, %ecx
// 1e5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1e9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ef: e9 b4 00 00 00                jmp     0x2a8 <_JIT_ENTRY+0x2a8>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_Dealloc
// 1fe: 4c 89 ff                      movq    %r15, %rdi
// 201: ff d0                         callq   *%rax
// 203: 85 ed                         testl   %ebp, %ebp
// 205: 0f 89 72 ff ff ff             jns     0x17d <_JIT_ENTRY+0x17d>
// 20b: e9 83 00 00 00                jmp     0x293 <_JIT_ENTRY+0x293>
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _JIT_CONTINUE
// 21a: 4c 89 f7                      movq    %r14, %rdi
// 21d: 48 89 de                      movq    %rbx, %rsi
// 220: 4c 89 e2                      movq    %r12, %rdx
// 223: 48 83 c4 18                   addq    $0x18, %rsp
// 227: 5b                            popq    %rbx
// 228: 41 5c                         popq    %r12
// 22a: 41 5d                         popq    %r13
// 22c: 41 5e                         popq    %r14
// 22e: 41 5f                         popq    %r15
// 230: 5d                            popq    %rbp
// 231: ff e0                         jmpq    *%rax
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_Dealloc
// 23d: 4c 89 ef                      movq    %r13, %rdi
// 240: ff d0                         callq   *%rax
// 242: 49 8b 07                      movq    (%r15), %rax
// 245: 48 85 c0                      testq   %rax, %rax
// 248: 0f 8f cd fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 24e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000250:  R_X86_64_64  .rodata.str1.1
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _Py_NegativeRefcount
// 262: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 267: 4c 89 fa                      movq    %r15, %rdx
// 26a: ff d0                         callq   *%rax
// 26c: 49 8b 07                      movq    (%r15), %rax
// 26f: 85 c0                         testl   %eax, %eax
// 271: 78 20                         js      0x293 <_JIT_ENTRY+0x293>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27d: ff d0                         callq   *%rax
// 27f: 49 ff 0f                      decq    (%r15)
// 282: 75 0f                         jne     0x293 <_JIT_ENTRY+0x293>
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_Dealloc
// 28e: 4c 89 ff                      movq    %r15, %rdi
// 291: ff d0                         callq   *%rax
// 293: 48 83 c3 f0                   addq    $-0x10, %rbx
// 297: 4c 29 f3                      subq    %r14, %rbx
// 29a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 29e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2a2: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2a6: 31 c0                         xorl    %eax, %eax
// 2a8: 48 83 c4 18                   addq    $0x18, %rsp
// 2ac: 5b                            popq    %rbx
// 2ad: 41 5c                         popq    %r12
// 2af: 41 5d                         popq    %r13
// 2b1: 41 5e                         popq    %r14
// 2b3: 41 5f                         popq    %r15
// 2b5: 5d                            popq    %rbp
// 2b6: c3                            retq
// 2b7: 
static const unsigned char _CHECK_EG_MATCHplus_CHECK_PEP_523_code_body[696] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x24, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x33, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x50, 0x01, 0x00, 0x00, 0xe9, 0x6b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x7f, 0x85, 0xed, 0x0f, 0x88, 0x16, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x08, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x83, 0xb8, 0x20, 0x08, 0x00, 0x00, 0x00, 0x74, 0x49, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xb4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x72, 0xff, 0xff, 0xff, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xcd, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_CHECK_PEP_523_code_holes[23] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CHECK_PEP_523_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CHECK_PEP_523_data_holes[1];

// _CHECK_EG_MATCHplus_CHECK_STACK_SPACE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CHECK_STACK_SPACE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 62                         jle     0xdf <_JIT_ENTRY+0xdf>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 80 00 00 00             jns     0x105 <_JIT_ENTRY+0x105>
// 85: e9 9c 00 00 00                jmp     0x126 <_JIT_ENTRY+0x126>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c3 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// c6: 49 8b 07                      movq    (%r15), %rax
// c9: 48 85 c0                      testq   %rax, %rax
// cc: 0f 8e d2 00 00 00             jle     0x1a4 <_JIT_ENTRY+0x1a4>
// d2: 85 c0                         testl   %eax, %eax
// d4: 0f 89 ef 00 00 00             jns     0x1c9 <_JIT_ENTRY+0x1c9>
// da: e9 ff 00 00 00                jmp     0x1de <_JIT_ENTRY+0x1de>
// df: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e1:  R_X86_64_64  .rodata.str1.1
// e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000eb:  R_X86_64_64  _Py_NegativeRefcount
// f3: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f8: 4c 89 ea                      movq    %r13, %rdx
// fb: ff d0                         callq   *%rax
// fd: 49 8b 45 00                   movq    (%r13), %rax
// 101: 85 c0                         testl   %eax, %eax
// 103: 78 21                         js      0x126 <_JIT_ENTRY+0x126>
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10f: ff d0                         callq   *%rax
// 111: 49 ff 4d 00                   decq    (%r13)
// 115: 75 0f                         jne     0x126 <_JIT_ENTRY+0x126>
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_Dealloc
// 121: 4c 89 ef                      movq    %r13, %rdi
// 124: ff d0                         callq   *%rax
// 126: 49 8b 07                      movq    (%r15), %rax
// 129: 48 85 c0                      testq   %rax, %rax
// 12c: 7e 09                         jle     0x137 <_JIT_ENTRY+0x137>
// 12e: 85 c0                         testl   %eax, %eax
// 130: 79 2e                         jns     0x160 <_JIT_ENTRY+0x160>
// 132: e9 77 01 00 00                jmp     0x2ae <_JIT_ENTRY+0x2ae>
// 137: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000139:  R_X86_64_64  .rodata.str1.1
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_NegativeRefcount
// 14b: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 150: 4c 89 fa                      movq    %r15, %rdx
// 153: ff d0                         callq   *%rax
// 155: 49 8b 07                      movq    (%r15), %rax
// 158: 85 c0                         testl   %eax, %eax
// 15a: 0f 88 4e 01 00 00             js      0x2ae <_JIT_ENTRY+0x2ae>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0f                      decq    (%r15)
// 16f: 0f 85 39 01 00 00             jne     0x2ae <_JIT_ENTRY+0x2ae>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ff                      movq    %r15, %rdi
// 182: ff d0                         callq   *%rax
// 184: e9 25 01 00 00                jmp     0x2ae <_JIT_ENTRY+0x2ae>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 49 8b 07                      movq    (%r15), %rax
// 19b: 48 85 c0                      testq   %rax, %rax
// 19e: 0f 8f 2e ff ff ff             jg      0xd2 <_JIT_ENTRY+0xd2>
// 1a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a6:  R_X86_64_64  .rodata.str1.1
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_NegativeRefcount
// 1b8: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1bd: 4c 89 fa                      movq    %r15, %rdx
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 8b 07                      movq    (%r15), %rax
// 1c5: 85 c0                         testl   %eax, %eax
// 1c7: 78 15                         js      0x1de <_JIT_ENTRY+0x1de>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d3: ff d0                         callq   *%rax
// 1d5: 49 ff 0f                      decq    (%r15)
// 1d8: 0f 84 b9 00 00 00             je      0x297 <_JIT_ENTRY+0x297>
// 1de: 85 ed                         testl   %ebp, %ebp
// 1e0: 0f 88 c8 00 00 00             js      0x2ae <_JIT_ENTRY+0x2ae>
// 1e6: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1eb: 48 85 ff                      testq   %rdi, %rdi
// 1ee: 0f 84 ba 00 00 00             je      0x2ae <_JIT_ENTRY+0x2ae>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_NoneStruct
// 1fe: 48 39 c7                      cmpq    %rax, %rdi
// 201: 74 11                         je      0x214 <_JIT_ENTRY+0x214>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  PyErr_SetHandledException
// 20d: ff d0                         callq   *%rax
// 20f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 214: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 219: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 21d: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 221: 49 8b 84 24 00 01 00 00       movq    0x100(%r12), %rax
// 229: 48 85 c0                      testq   %rax, %rax
// 22c: 74 3f                         je      0x26d <_JIT_ENTRY+0x26d>
// 22e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000230:  R_X86_64_64  _JIT_OPARG
// 238: 0f b7 c9                      movzwl  %cx, %ecx
// 23b: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 240: 29 ca                         subl    %ecx, %edx
// 242: 48 63 ca                      movslq  %edx, %rcx
// 245: 48 8b 0c cb                   movq    (%rbx,%rcx,8), %rcx
// 249: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 24d: 48 63 49 4c                   movslq  0x4c(%rcx), %rcx
// 251: 49 8b 94 24 08 01 00 00       movq    0x108(%r12), %rdx
// 259: 48 29 c2                      subq    %rax, %rdx
// 25c: 48 c1 fa 03                   sarq    $0x3, %rdx
// 260: 48 39 ca                      cmpq    %rcx, %rdx
// 263: 7e 08                         jle     0x26d <_JIT_ENTRY+0x26d>
// 265: 41 83 7c 24 24 02             cmpl    $0x2, 0x24(%r12)
// 26b: 7d 65                         jge     0x2d2 <_JIT_ENTRY+0x2d2>
// 26d: 4c 29 f3                      subq    %r14, %rbx
// 270: 48 83 c3 b8                   addq    $-0x48, %rbx
// 274: 48 c1 eb 03                   shrq    $0x3, %rbx
// 278: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 27c: 49 8b 06                      movq    (%r14), %rax
// 27f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000281:  R_X86_64_64  _JIT_TARGET
// 289: 89 c9                         movl    %ecx, %ecx
// 28b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 28f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 295: eb 2c                         jmp     0x2c3 <_JIT_ENTRY+0x2c3>
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _Py_Dealloc
// 2a1: 4c 89 ff                      movq    %r15, %rdi
// 2a4: ff d0                         callq   *%rax
// 2a6: 85 ed                         testl   %ebp, %ebp
// 2a8: 0f 89 38 ff ff ff             jns     0x1e6 <_JIT_ENTRY+0x1e6>
// 2ae: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2b2: 4c 29 f3                      subq    %r14, %rbx
// 2b5: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2b9: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2bd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2c1: 31 c0                         xorl    %eax, %eax
// 2c3: 48 83 c4 18                   addq    $0x18, %rsp
// 2c7: 5b                            popq    %rbx
// 2c8: 41 5c                         popq    %r12
// 2ca: 41 5d                         popq    %r13
// 2cc: 41 5e                         popq    %r14
// 2ce: 41 5f                         popq    %r15
// 2d0: 5d                            popq    %rbp
// 2d1: c3                            retq
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _JIT_CONTINUE
// 2dc: 4c 89 f7                      movq    %r14, %rdi
// 2df: 48 89 de                      movq    %rbx, %rsi
// 2e2: 4c 89 e2                      movq    %r12, %rdx
// 2e5: 48 83 c4 18                   addq    $0x18, %rsp
// 2e9: 5b                            popq    %rbx
// 2ea: 41 5c                         popq    %r12
// 2ec: 41 5d                         popq    %r13
// 2ee: 41 5e                         popq    %r14
// 2f0: 41 5f                         popq    %r15
// 2f2: 5d                            popq    %rbp
// 2f3: ff e0                         jmpq    *%rax
// 2f5: 
static const unsigned char _CHECK_EG_MATCHplus_CHECK_STACK_SPACE_code_body[758] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x62, 0x85, 0xc0, 0x0f, 0x89, 0x80, 0x00, 0x00, 0x00, 0xe9, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd2, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xef, 0x00, 0x00, 0x00, 0xe9, 0xff, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2e, 0xe9, 0x77, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x4e, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x39, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x25, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2e, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0xb9, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xba, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x49, 0x8b, 0x84, 0x24, 0x00, 0x01, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x3f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x8b, 0x0c, 0xcb, 0x48, 0x8b, 0x49, 0x30, 0x48, 0x63, 0x49, 0x4c, 0x49, 0x8b, 0x94, 0x24, 0x08, 0x01, 0x00, 0x00, 0x48, 0x29, 0xc2, 0x48, 0xc1, 0xfa, 0x03, 0x48, 0x39, 0xca, 0x7e, 0x08, 0x41, 0x83, 0x7c, 0x24, 0x24, 0x02, 0x7d, 0x65, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x38, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_CHECK_STACK_SPACE_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CHECK_STACK_SPACE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CHECK_STACK_SPACE_data_holes[1];

// _CHECK_EG_MATCHplus_CHECK_VALIDITY
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CHECK_VALIDITY.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a2 00 00 00                jmp     0x175 <_JIT_ENTRY+0x175>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 22 01 00 00             je      0x231 <_JIT_ENTRY+0x231>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 31 01 00 00             jle     0x24c <_JIT_ENTRY+0x24c>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 4e 01 00 00             jns     0x271 <_JIT_ENTRY+0x271>
// 123: e9 69 01 00 00                jmp     0x291 <_JIT_ENTRY+0x291>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 11                         js      0x175 <_JIT_ENTRY+0x175>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 74 76                         je      0x1eb <_JIT_ENTRY+0x1eb>
// 175: 85 ed                         testl   %ebp, %ebp
// 177: 0f 88 14 01 00 00             js      0x291 <_JIT_ENTRY+0x291>
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 85 ff                      testq   %rdi, %rdi
// 185: 0f 84 06 01 00 00             je      0x291 <_JIT_ENTRY+0x291>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NoneStruct
// 195: 48 39 c7                      cmpq    %rax, %rdi
// 198: 74 11                         je      0x1ab <_JIT_ENTRY+0x1ab>
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  PyErr_SetHandledException
// 1a4: ff d0                         callq   *%rax
// 1a6: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1ab: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b0: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b4: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ba:  R_X86_64_64  _JIT_EXECUTOR
// 1c2: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 1c6: 74 3f                         je      0x207 <_JIT_ENTRY+0x207>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _JIT_CONTINUE
// 1d2: 4c 89 f7                      movq    %r14, %rdi
// 1d5: 48 89 de                      movq    %rbx, %rsi
// 1d8: 4c 89 e2                      movq    %r12, %rdx
// 1db: 48 83 c4 18                   addq    $0x18, %rsp
// 1df: 5b                            popq    %rbx
// 1e0: 41 5c                         popq    %r12
// 1e2: 41 5d                         popq    %r13
// 1e4: 41 5e                         popq    %r14
// 1e6: 41 5f                         popq    %r15
// 1e8: 5d                            popq    %rbp
// 1e9: ff e0                         jmpq    *%rax
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: 4c 89 ff                      movq    %r15, %rdi
// 1f8: ff d0                         callq   *%rax
// 1fa: 85 ed                         testl   %ebp, %ebp
// 1fc: 0f 89 7b ff ff ff             jns     0x17d <_JIT_ENTRY+0x17d>
// 202: e9 8a 00 00 00                jmp     0x291 <_JIT_ENTRY+0x291>
// 207: 4c 29 f3                      subq    %r14, %rbx
// 20a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 20e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 212: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 216: 49 8b 06                      movq    (%r14), %rax
// 219: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021b:  R_X86_64_64  _JIT_TARGET
// 223: 89 c9                         movl    %ecx, %ecx
// 225: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 229: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 22f: eb 75                         jmp     0x2a6 <_JIT_ENTRY+0x2a6>
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _Py_Dealloc
// 23b: 4c 89 ef                      movq    %r13, %rdi
// 23e: ff d0                         callq   *%rax
// 240: 49 8b 07                      movq    (%r15), %rax
// 243: 48 85 c0                      testq   %rax, %rax
// 246: 0f 8f cf fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 24c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024e:  R_X86_64_64  .rodata.str1.1
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _Py_NegativeRefcount
// 260: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 265: 4c 89 fa                      movq    %r15, %rdx
// 268: ff d0                         callq   *%rax
// 26a: 49 8b 07                      movq    (%r15), %rax
// 26d: 85 c0                         testl   %eax, %eax
// 26f: 78 20                         js      0x291 <_JIT_ENTRY+0x291>
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27b: ff d0                         callq   *%rax
// 27d: 49 ff 0f                      decq    (%r15)
// 280: 75 0f                         jne     0x291 <_JIT_ENTRY+0x291>
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_Dealloc
// 28c: 4c 89 ff                      movq    %r15, %rdi
// 28f: ff d0                         callq   *%rax
// 291: 48 83 c3 f0                   addq    $-0x10, %rbx
// 295: 4c 29 f3                      subq    %r14, %rbx
// 298: 48 83 c3 b8                   addq    $-0x48, %rbx
// 29c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2a0: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2a4: 31 c0                         xorl    %eax, %eax
// 2a6: 48 83 c4 18                   addq    $0x18, %rsp
// 2aa: 5b                            popq    %rbx
// 2ab: 41 5c                         popq    %r12
// 2ad: 41 5d                         popq    %r13
// 2af: 41 5e                         popq    %r14
// 2b1: 41 5f                         popq    %r15
// 2b3: 5d                            popq    %rbp
// 2b4: c3                            retq
// 2b5: 
static const unsigned char _CHECK_EG_MATCHplus_CHECK_VALIDITY_code_body[694] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x22, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x31, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x4e, 0x01, 0x00, 0x00, 0xe9, 0x69, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x76, 0x85, 0xed, 0x0f, 0x88, 0x14, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x06, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x3f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x7b, 0xff, 0xff, 0xff, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x75, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xcf, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_CHECK_VALIDITY_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CHECK_VALIDITY_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CHECK_VALIDITY_data_holes[1];

// _CHECK_EG_MATCHplus_COMPARE_OP
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_COMPARE_OP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 4c 8d 76 f0                   leaq    -0x10(%rsi), %r14
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 e6                      movq    %r12, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 1c                         jle     0x90 <_JIT_ENTRY+0x90>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3e                         jns     0xb6 <_JIT_ENTRY+0xb6>
// 78: eb 52                         jmp     0xcc <_JIT_ENTRY+0xcc>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 63                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 83: 85 c0                         testl   %eax, %eax
// 85: 0f 89 81 00 00 00             jns     0x10c <_JIT_ENTRY+0x10c>
// 8b: e9 9d 00 00 00                jmp     0x12d <_JIT_ENTRY+0x12d>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_NegativeRefcount
// a4: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a9: 4c 89 ea                      movq    %r13, %rdx
// ac: ff d0                         callq   *%rax
// ae: 49 8b 45 00                   movq    (%r13), %rax
// b2: 85 c0                         testl   %eax, %eax
// b4: 78 16                         js      0xcc <_JIT_ENTRY+0xcc>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c0: ff d0                         callq   *%rax
// c2: 49 ff 4d 00                   decq    (%r13)
// c6: 0f 84 c7 00 00 00             je      0x193 <_JIT_ENTRY+0x193>
// cc: 49 8b 04 24                   movq    (%r12), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 0f 8e d6 00 00 00             jle     0x1af <_JIT_ENTRY+0x1af>
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 89 f4 00 00 00             jns     0x1d5 <_JIT_ENTRY+0x1d5>
// e1: e9 05 01 00 00                jmp     0x1eb <_JIT_ENTRY+0x1eb>
// e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_NegativeRefcount
// fa: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ff: 4c 89 ea                      movq    %r13, %rdx
// 102: ff d0                         callq   *%rax
// 104: 49 8b 45 00                   movq    (%r13), %rax
// 108: 85 c0                         testl   %eax, %eax
// 10a: 78 21                         js      0x12d <_JIT_ENTRY+0x12d>
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 116: ff d0                         callq   *%rax
// 118: 49 ff 4d 00                   decq    (%r13)
// 11c: 75 0f                         jne     0x12d <_JIT_ENTRY+0x12d>
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _Py_Dealloc
// 128: 4c 89 ef                      movq    %r13, %rdi
// 12b: ff d0                         callq   *%rax
// 12d: 49 8b 04 24                   movq    (%r12), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 09                         jle     0x13f <_JIT_ENTRY+0x13f>
// 136: 85 c0                         testl   %eax, %eax
// 138: 79 2f                         jns     0x169 <_JIT_ENTRY+0x169>
// 13a: e9 a2 02 00 00                jmp     0x3e1 <_JIT_ENTRY+0x3e1>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 78 02 00 00             js      0x3e1 <_JIT_ENTRY+0x3e1>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 0c 24                   decq    (%r12)
// 179: 0f 85 62 02 00 00             jne     0x3e1 <_JIT_ENTRY+0x3e1>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_Dealloc
// 189: 4c 89 e7                      movq    %r12, %rdi
// 18c: ff d0                         callq   *%rax
// 18e: e9 4e 02 00 00                jmp     0x3e1 <_JIT_ENTRY+0x3e1>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_Dealloc
// 19d: 4c 89 ef                      movq    %r13, %rdi
// 1a0: ff d0                         callq   *%rax
// 1a2: 49 8b 04 24                   movq    (%r12), %rax
// 1a6: 48 85 c0                      testq   %rax, %rax
// 1a9: 0f 8f 2a ff ff ff             jg      0xd9 <_JIT_ENTRY+0xd9>
// 1af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b1:  R_X86_64_64  .rodata.str1.1
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_NegativeRefcount
// 1c3: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c8: 4c 89 e2                      movq    %r12, %rdx
// 1cb: ff d0                         callq   *%rax
// 1cd: 49 8b 04 24                   movq    (%r12), %rax
// 1d1: 85 c0                         testl   %eax, %eax
// 1d3: 78 16                         js      0x1eb <_JIT_ENTRY+0x1eb>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1df: ff d0                         callq   *%rax
// 1e1: 49 ff 0c 24                   decq    (%r12)
// 1e5: 0f 84 c5 01 00 00             je      0x3b0 <_JIT_ENTRY+0x3b0>
// 1eb: 85 ed                         testl   %ebp, %ebp
// 1ed: 0f 88 ee 01 00 00             js      0x3e1 <_JIT_ENTRY+0x3e1>
// 1f3: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f7: 48 85 ff                      testq   %rdi, %rdi
// 1fa: 0f 84 e1 01 00 00             je      0x3e1 <_JIT_ENTRY+0x3e1>
// 200: 49 83 c7 f8                   addq    $-0x8, %r15
// 204: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000206:  R_X86_64_64  _Py_NoneStruct
// 20e: 4c 39 ef                      cmpq    %r13, %rdi
// 211: 74 10                         je      0x223 <_JIT_ENTRY+0x223>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  PyErr_SetHandledException
// 21d: ff d0                         callq   *%rax
// 21f: 4c 8b 2c 24                   movq    (%rsp), %r13
// 223: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 228: 49 89 2e                      movq    %rbp, (%r14)
// 22b: 4d 89 2f                      movq    %r13, (%r15)
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _JIT_OPARG
// 238: 0f b7 d0                      movzwl  %ax, %edx
// 23b: c1 ea 05                      shrl    $0x5, %edx
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  PyObject_RichCompare
// 248: 48 89 ef                      movq    %rbp, %rdi
// 24b: 4c 89 ee                      movq    %r13, %rsi
// 24e: ff d0                         callq   *%rax
// 250: 49 89 c4                      movq    %rax, %r12
// 253: 48 8b 45 00                   movq    (%rbp), %rax
// 257: 48 85 c0                      testq   %rax, %rax
// 25a: 7f 22                         jg      0x27e <_JIT_ENTRY+0x27e>
// 25c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025e:  R_X86_64_64  .rodata.str1.1
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _Py_NegativeRefcount
// 270: be 38 07 00 00                movl    $0x738, %esi            # imm = 0x738
// 275: 48 89 ea                      movq    %rbp, %rdx
// 278: ff d0                         callq   *%rax
// 27a: 48 8b 45 00                   movq    (%rbp), %rax
// 27e: 85 c0                         testl   %eax, %eax
// 280: 78 21                         js      0x2a3 <_JIT_ENTRY+0x2a3>
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28c: ff d0                         callq   *%rax
// 28e: 48 ff 4d 00                   decq    (%rbp)
// 292: 75 0f                         jne     0x2a3 <_JIT_ENTRY+0x2a3>
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _Py_Dealloc
// 29e: 48 89 ef                      movq    %rbp, %rdi
// 2a1: ff d0                         callq   *%rax
// 2a3: 49 8b 45 00                   movq    (%r13), %rax
// 2a7: 48 85 c0                      testq   %rax, %rax
// 2aa: 7f 22                         jg      0x2ce <_JIT_ENTRY+0x2ce>
// 2ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ae:  R_X86_64_64  .rodata.str1.1
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_NegativeRefcount
// 2c0: be 39 07 00 00                movl    $0x739, %esi            # imm = 0x739
// 2c5: 4c 89 ea                      movq    %r13, %rdx
// 2c8: ff d0                         callq   *%rax
// 2ca: 49 8b 45 00                   movq    (%r13), %rax
// 2ce: 85 c0                         testl   %eax, %eax
// 2d0: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 2d5: 78 16                         js      0x2ed <_JIT_ENTRY+0x2ed>
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e1: ff d0                         callq   *%rax
// 2e3: 49 ff 4d 00                   decq    (%r13)
// 2e7: 0f 84 dc 00 00 00             je      0x3c9 <_JIT_ENTRY+0x3c9>
// 2ed: 4d 85 e4                      testq   %r12, %r12
// 2f0: 0f 84 eb 00 00 00             je      0x3e1 <_JIT_ENTRY+0x3e1>
// 2f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f8:  R_X86_64_64  _JIT_OPARG
// 300: a8 10                         testb   $0x10, %al
// 302: 0f 84 82 00 00 00             je      0x38a <_JIT_ENTRY+0x38a>
// 308: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030a:  R_X86_64_64  PyObject_IsTrue
// 312: 4c 89 e7                      movq    %r12, %rdi
// 315: ff d0                         callq   *%rax
// 317: 89 c5                         movl    %eax, %ebp
// 319: 49 8b 04 24                   movq    (%r12), %rax
// 31d: 48 85 c0                      testq   %rax, %rax
// 320: 7f 22                         jg      0x344 <_JIT_ENTRY+0x344>
// 322: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000324:  R_X86_64_64  .rodata.str1.1
// 32c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032e:  R_X86_64_64  _Py_NegativeRefcount
// 336: be 3d 07 00 00                movl    $0x73d, %esi            # imm = 0x73D
// 33b: 4c 89 e2                      movq    %r12, %rdx
// 33e: ff d0                         callq   *%rax
// 340: 49 8b 04 24                   movq    (%r12), %rax
// 344: 85 c0                         testl   %eax, %eax
// 346: 78 21                         js      0x369 <_JIT_ENTRY+0x369>
// 348: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 352: ff d0                         callq   *%rax
// 354: 49 ff 0c 24                   decq    (%r12)
// 358: 75 0f                         jne     0x369 <_JIT_ENTRY+0x369>
// 35a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035c:  R_X86_64_64  _Py_Dealloc
// 364: 4c 89 e7                      movq    %r12, %rdi
// 367: ff d0                         callq   *%rax
// 369: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036b:  R_X86_64_64  _Py_FalseStruct
// 373: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000375:  R_X86_64_64  _Py_TrueStruct
// 37d: 85 ed                         testl   %ebp, %ebp
// 37f: 4c 0f 44 e0                   cmoveq  %rax, %r12
// 383: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 388: 78 57                         js      0x3e1 <_JIT_ENTRY+0x3e1>
// 38a: 4d 89 26                      movq    %r12, (%r14)
// 38d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038f:  R_X86_64_64  _JIT_CONTINUE
// 397: 48 89 df                      movq    %rbx, %rdi
// 39a: 4c 89 fe                      movq    %r15, %rsi
// 39d: 48 89 ea                      movq    %rbp, %rdx
// 3a0: 48 83 c4 18                   addq    $0x18, %rsp
// 3a4: 5b                            popq    %rbx
// 3a5: 41 5c                         popq    %r12
// 3a7: 41 5d                         popq    %r13
// 3a9: 41 5e                         popq    %r14
// 3ab: 41 5f                         popq    %r15
// 3ad: 5d                            popq    %rbp
// 3ae: ff e0                         jmpq    *%rax
// 3b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b2:  R_X86_64_64  _Py_Dealloc
// 3ba: 4c 89 e7                      movq    %r12, %rdi
// 3bd: ff d0                         callq   *%rax
// 3bf: 85 ed                         testl   %ebp, %ebp
// 3c1: 0f 89 2c fe ff ff             jns     0x1f3 <_JIT_ENTRY+0x1f3>
// 3c7: eb 18                         jmp     0x3e1 <_JIT_ENTRY+0x3e1>
// 3c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003cb:  R_X86_64_64  _Py_Dealloc
// 3d3: 4c 89 ef                      movq    %r13, %rdi
// 3d6: ff d0                         callq   *%rax
// 3d8: 4d 85 e4                      testq   %r12, %r12
// 3db: 0f 85 15 ff ff ff             jne     0x2f6 <_JIT_ENTRY+0x2f6>
// 3e1: 49 29 de                      subq    %rbx, %r14
// 3e4: 49 83 c6 b8                   addq    $-0x48, %r14
// 3e8: 49 c1 ee 03                   shrq    $0x3, %r14
// 3ec: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 3f0: 31 c0                         xorl    %eax, %eax
// 3f2: 48 83 c4 18                   addq    $0x18, %rsp
// 3f6: 5b                            popq    %rbx
// 3f7: 41 5c                         popq    %r12
// 3f9: 41 5d                         popq    %r13
// 3fb: 41 5e                         popq    %r14
// 3fd: 41 5f                         popq    %r15
// 3ff: 5d                            popq    %rbp
// 400: c3                            retq
// 401: 
static const unsigned char _CHECK_EG_MATCHplus_COMPARE_OP_code_body[1026] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8d, 0x76, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0xa2, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x78, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x62, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x4e, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xc5, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xee, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xe1, 0x01, 0x00, 0x00, 0x49, 0x83, 0xc7, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xef, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x2c, 0x24, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x49, 0x89, 0x2e, 0x4d, 0x89, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0xc1, 0xea, 0x05, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xdc, 0x00, 0x00, 0x00, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xeb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x10, 0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3d, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x57, 0x4d, 0x89, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x2c, 0xfe, 0xff, 0xff, 0xeb, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x85, 0x15, 0xff, 0xff, 0xff, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_COMPARE_OP_code_holes[40] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_RichCompare, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x324, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x32e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x34a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x35c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x36b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x375, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x38f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x3b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_COMPARE_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_COMPARE_OP_data_holes[1];

// _CHECK_EG_MATCHplus_COMPARE_OP_FLOAT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_COMPARE_OP_FLOAT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 4c 8d 76 f0                   leaq    -0x10(%rsi), %r14
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 fe                      movq    %r15, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 20                movq    %rbp, 0x20(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 fe                      movq    %r15, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 56                         jle     0xd9 <_JIT_ENTRY+0xd9>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 78                         jns     0xff <_JIT_ENTRY+0xff>
// 87: e9 89 00 00 00                jmp     0x115 <_JIT_ENTRY+0x115>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 4c 89 ea                      movq    %r13, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 45 00                   movq    (%r13), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 4d 00                   decq    (%r13)
// c2: 74 6a                         je      0x12e <_JIT_ENTRY+0x12e>
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7e 79                         jle     0x145 <_JIT_ENTRY+0x145>
// cc: 85 c0                         testl   %eax, %eax
// ce: 0f 89 96 00 00 00             jns     0x16a <_JIT_ENTRY+0x16a>
// d4: e9 a6 00 00 00                jmp     0x17f <_JIT_ENTRY+0x17f>
// d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000db:  R_X86_64_64  .rodata.str1.1
// e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e5:  R_X86_64_64  _Py_NegativeRefcount
// ed: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f2: 4c 89 ea                      movq    %r13, %rdx
// f5: ff d0                         callq   *%rax
// f7: 49 8b 45 00                   movq    (%r13), %rax
// fb: 85 c0                         testl   %eax, %eax
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 4d 00                   decq    (%r13)
// 10f: 0f 84 0e 01 00 00             je      0x223 <_JIT_ENTRY+0x223>
// 115: 49 8b 07                      movq    (%r15), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 0f 8e 1d 01 00 00             jle     0x23e <_JIT_ENTRY+0x23e>
// 121: 85 c0                         testl   %eax, %eax
// 123: 0f 89 3a 01 00 00             jns     0x263 <_JIT_ENTRY+0x263>
// 129: e9 55 01 00 00                jmp     0x283 <_JIT_ENTRY+0x283>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_Dealloc
// 138: 4c 89 ef                      movq    %r13, %rdi
// 13b: ff d0                         callq   *%rax
// 13d: 49 8b 07                      movq    (%r15), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 87                         jg      0xcc <_JIT_ENTRY+0xcc>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15e: 4c 89 fa                      movq    %r15, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 07                      movq    (%r15), %rax
// 166: 85 c0                         testl   %eax, %eax
// 168: 78 15                         js      0x17f <_JIT_ENTRY+0x17f>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 0f                      decq    (%r15)
// 179: 0f 84 8b 00 00 00             je      0x20a <_JIT_ENTRY+0x20a>
// 17f: 85 ed                         testl   %ebp, %ebp
// 181: 0f 88 fc 00 00 00             js      0x283 <_JIT_ENTRY+0x283>
// 187: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 ef 00 00 00             je      0x283 <_JIT_ENTRY+0x283>
// 194: 4d 8d 7c 24 f8                leaq    -0x8(%r12), %r15
// 199: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000019b:  R_X86_64_64  _Py_NoneStruct
// 1a3: 4c 39 ef                      cmpq    %r13, %rdi
// 1a6: 74 10                         je      0x1b8 <_JIT_ENTRY+0x1b8>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  PyErr_SetHandledException
// 1b2: ff d0                         callq   *%rax
// 1b4: 4c 8b 2c 24                   movq    (%rsp), %r13
// 1b8: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 1bd: 49 89 2e                      movq    %rbp, (%r14)
// 1c0: 4d 89 2f                      movq    %r13, (%r15)
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  PyFloat_Type
// 1cd: 48 39 45 08                   cmpq    %rax, 0x8(%rbp)
// 1d1: 75 0a                         jne     0x1dd <_JIT_ENTRY+0x1dd>
// 1d3: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1d7: 0f 84 c6 00 00 00             je      0x2a3 <_JIT_ENTRY+0x2a3>
// 1dd: 49 29 dc                      subq    %rbx, %r12
// 1e0: 49 83 c4 b8                   addq    $-0x48, %r12
// 1e4: 49 c1 ec 03                   shrq    $0x3, %r12
// 1e8: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 1ec: 48 8b 03                      movq    (%rbx), %rax
// 1ef: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f1:  R_X86_64_64  _JIT_TARGET
// 1f9: 89 c9                         movl    %ecx, %ecx
// 1fb: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1ff: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 205: e9 8a 00 00 00                jmp     0x294 <_JIT_ENTRY+0x294>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _Py_Dealloc
// 214: 4c 89 ff                      movq    %r15, %rdi
// 217: ff d0                         callq   *%rax
// 219: 85 ed                         testl   %ebp, %ebp
// 21b: 0f 89 66 ff ff ff             jns     0x187 <_JIT_ENTRY+0x187>
// 221: eb 60                         jmp     0x283 <_JIT_ENTRY+0x283>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_Dealloc
// 22d: 4c 89 ef                      movq    %r13, %rdi
// 230: ff d0                         callq   *%rax
// 232: 49 8b 07                      movq    (%r15), %rax
// 235: 48 85 c0                      testq   %rax, %rax
// 238: 0f 8f e3 fe ff ff             jg      0x121 <_JIT_ENTRY+0x121>
// 23e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000240:  R_X86_64_64  .rodata.str1.1
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _Py_NegativeRefcount
// 252: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 257: 4c 89 fa                      movq    %r15, %rdx
// 25a: ff d0                         callq   *%rax
// 25c: 49 8b 07                      movq    (%r15), %rax
// 25f: 85 c0                         testl   %eax, %eax
// 261: 78 20                         js      0x283 <_JIT_ENTRY+0x283>
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26d: ff d0                         callq   *%rax
// 26f: 49 ff 0f                      decq    (%r15)
// 272: 75 0f                         jne     0x283 <_JIT_ENTRY+0x283>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _Py_Dealloc
// 27e: 4c 89 ff                      movq    %r15, %rdi
// 281: ff d0                         callq   *%rax
// 283: 49 29 de                      subq    %rbx, %r14
// 286: 49 83 c6 b8                   addq    $-0x48, %r14
// 28a: 49 c1 ee 03                   shrq    $0x3, %r14
// 28e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 292: 31 c0                         xorl    %eax, %eax
// 294: 48 83 c4 28                   addq    $0x28, %rsp
// 298: 5b                            popq    %rbx
// 299: 41 5c                         popq    %r12
// 29b: 41 5d                         popq    %r13
// 29d: 41 5e                         popq    %r14
// 29f: 41 5f                         popq    %r15
// 2a1: 5d                            popq    %rbp
// 2a2: c3                            retq
// 2a3: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// 2a8: f2 0f 11 44 24 18             movsd   %xmm0, 0x18(%rsp)
// 2ae: f2 41 0f 10 45 10             movsd   0x10(%r13), %xmm0       # xmm0 = mem[0],zero
// 2b4: f2 0f 11 44 24 10             movsd   %xmm0, 0x10(%rsp)
// 2ba: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 2be: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000002c0:  R_X86_64_64  PyInterpreterState_Get
// 2c8: 75 1f                         jne     0x2e9 <_JIT_ENTRY+0x2e9>
// 2ca: 41 ff d4                      callq   *%r12
// 2cd: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2d4: 48 ff 4d 00                   decq    (%rbp)
// 2d8: 75 0f                         jne     0x2e9 <_JIT_ENTRY+0x2e9>
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  _PyFloat_ExactDealloc
// 2e4: 48 89 ef                      movq    %rbp, %rdi
// 2e7: ff d0                         callq   *%rax
// 2e9: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 2ee: 75 1f                         jne     0x30f <_JIT_ENTRY+0x30f>
// 2f0: 41 ff d4                      callq   *%r12
// 2f3: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2fa: 49 ff 4d 00                   decq    (%r13)
// 2fe: 75 0f                         jne     0x30f <_JIT_ENTRY+0x30f>
// 300: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000302:  R_X86_64_64  _PyFloat_ExactDealloc
// 30a: 4c 89 ef                      movq    %r13, %rdi
// 30d: ff d0                         callq   *%rax
// 30f: 31 c0                         xorl    %eax, %eax
// 311: f2 0f 10 44 24 18             movsd   0x18(%rsp), %xmm0       # xmm0 = mem[0],zero
// 317: f2 0f 10 4c 24 10             movsd   0x10(%rsp), %xmm1       # xmm1 = mem[0],zero
// 31d: 66 0f 2e c1                   ucomisd %xmm1, %xmm0
// 321: 0f 93 c0                      setae   %al
// 324: 01 c0                         addl    %eax, %eax
// 326: 31 c9                         xorl    %ecx, %ecx
// 328: 66 0f 2e c8                   ucomisd %xmm0, %xmm1
// 32c: 0f 93 c1                      setae   %cl
// 32f: 09 c1                         orl     %eax, %ecx
// 331: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000333:  R_X86_64_64  _JIT_OPARG
// 33b: 0f a3 c8                      btl     %ecx, %eax
// 33e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000340:  R_X86_64_64  _Py_FalseStruct
// 348: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000034a:  R_X86_64_64  _Py_TrueStruct
// 352: 48 0f 43 c8                   cmovaeq %rax, %rcx
// 356: 49 89 0e                      movq    %rcx, (%r14)
// 359: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035b:  R_X86_64_64  _JIT_CONTINUE
// 363: 48 89 df                      movq    %rbx, %rdi
// 366: 4c 89 fe                      movq    %r15, %rsi
// 369: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 36e: 48 83 c4 28                   addq    $0x28, %rsp
// 372: 5b                            popq    %rbx
// 373: 41 5c                         popq    %r12
// 375: 41 5d                         popq    %r13
// 377: 41 5e                         popq    %r14
// 379: 41 5f                         popq    %r15
// 37b: 5d                            popq    %rbp
// 37c: ff e0                         jmpq    *%rax
// 37e: 
static const unsigned char _CHECK_EG_MATCHplus_COMPARE_OP_FLOAT_code_body[895] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x4c, 0x8d, 0x76, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x20, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x0e, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x1d, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x3a, 0x01, 0x00, 0x00, 0xe9, 0x55, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xfc, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xef, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x7c, 0x24, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xef, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x2c, 0x24, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x49, 0x89, 0x2e, 0x4d, 0x89, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x45, 0x08, 0x75, 0x0a, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x84, 0xc6, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x66, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xe3, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x18, 0xf2, 0x41, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1f, 0x41, 0xff, 0xd4, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1f, 0x41, 0xff, 0xd4, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x31, 0xc0, 0xf2, 0x0f, 0x10, 0x44, 0x24, 0x18, 0xf2, 0x0f, 0x10, 0x4c, 0x24, 0x10, 0x66, 0x0f, 0x2e, 0xc1, 0x0f, 0x93, 0xc0, 0x01, 0xc0, 0x31, 0xc9, 0x66, 0x0f, 0x2e, 0xc8, 0x0f, 0x93, 0xc1, 0x09, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xa3, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xc8, 0x49, 0x89, 0x0e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_COMPARE_OP_FLOAT_code_holes[30] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x333, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x340, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x34a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x35b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_COMPARE_OP_FLOAT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_COMPARE_OP_FLOAT_data_holes[1];

// _CHECK_EG_MATCHplus_COMPARE_OP_INT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_COMPARE_OP_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 4c 8d 76 f0                   leaq    -0x10(%rsi), %r14
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 fe                      movq    %r15, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 53                         js      0x8c <_JIT_ENTRY+0x8c>
// 39: 48 89 6c 24 30                movq    %rbp, 0x30(%rsp)
// 3e: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 43: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4c: 48 c7 44 24 18 00 00 00 00    movq    $0x0, 0x18(%rsp)
// 55: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000057:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 5f: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 64: 48 8d 4c 24 18                leaq    0x18(%rsp), %rcx
// 69: 4c 89 ef                      movq    %r13, %rdi
// 6c: 4c 89 fe                      movq    %r15, %rsi
// 6f: ff d0                         callq   *%rax
// 71: 89 c5                         movl    %eax, %ebp
// 73: 49 8b 45 00                   movq    (%r13), %rax
// 77: 48 85 c0                      testq   %rax, %rax
// 7a: 7e 22                         jle     0x9e <_JIT_ENTRY+0x9e>
// 7c: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000007e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 86: 85 c0                         testl   %eax, %eax
// 88: 79 44                         jns     0xce <_JIT_ENTRY+0xce>
// 8a: eb 4a                         jmp     0xd6 <_JIT_ENTRY+0xd6>
// 8c: 49 8b 45 00                   movq    (%r13), %rax
// 90: 48 85 c0                      testq   %rax, %rax
// 93: 7e 56                         jle     0xeb <_JIT_ENTRY+0xeb>
// 95: 85 c0                         testl   %eax, %eax
// 97: 79 78                         jns     0x111 <_JIT_ENTRY+0x111>
// 99: e9 89 00 00 00                jmp     0x127 <_JIT_ENTRY+0x127>
// 9e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a0:  R_X86_64_64  .rodata.str1.1
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_NegativeRefcount
// b2: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// b7: 4c 89 ea                      movq    %r13, %rdx
// ba: ff d0                         callq   *%rax
// bc: 49 8b 45 00                   movq    (%r13), %rax
// c0: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000c2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ca: 85 c0                         testl   %eax, %eax
// cc: 78 08                         js      0xd6 <_JIT_ENTRY+0xd6>
// ce: ff d3                         callq   *%rbx
// d0: 49 ff 4d 00                   decq    (%r13)
// d4: 74 6a                         je      0x140 <_JIT_ENTRY+0x140>
// d6: 49 8b 07                      movq    (%r15), %rax
// d9: 48 85 c0                      testq   %rax, %rax
// dc: 7e 79                         jle     0x157 <_JIT_ENTRY+0x157>
// de: 85 c0                         testl   %eax, %eax
// e0: 0f 89 96 00 00 00             jns     0x17c <_JIT_ENTRY+0x17c>
// e6: e9 9c 00 00 00                jmp     0x187 <_JIT_ENTRY+0x187>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 104: 4c 89 ea                      movq    %r13, %rdx
// 107: ff d0                         callq   *%rax
// 109: 49 8b 45 00                   movq    (%r13), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 16                         js      0x127 <_JIT_ENTRY+0x127>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 49 ff 4d 00                   decq    (%r13)
// 121: 0f 84 24 01 00 00             je      0x24b <_JIT_ENTRY+0x24b>
// 127: 49 8b 07                      movq    (%r15), %rax
// 12a: 48 85 c0                      testq   %rax, %rax
// 12d: 0f 8e 33 01 00 00             jle     0x266 <_JIT_ENTRY+0x266>
// 133: 85 c0                         testl   %eax, %eax
// 135: 0f 89 50 01 00 00             jns     0x28b <_JIT_ENTRY+0x28b>
// 13b: e9 6b 01 00 00                jmp     0x2ab <_JIT_ENTRY+0x2ab>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 4c 89 ef                      movq    %r13, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 07                      movq    (%r15), %rax
// 152: 48 85 c0                      testq   %rax, %rax
// 155: 7f 87                         jg      0xde <_JIT_ENTRY+0xde>
// 157: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000159:  R_X86_64_64  .rodata.str1.1
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_NegativeRefcount
// 16b: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 170: 4c 89 fa                      movq    %r15, %rdx
// 173: ff d0                         callq   *%rax
// 175: 49 8b 07                      movq    (%r15), %rax
// 178: 85 c0                         testl   %eax, %eax
// 17a: 78 0b                         js      0x187 <_JIT_ENTRY+0x187>
// 17c: ff d3                         callq   *%rbx
// 17e: 49 ff 0f                      decq    (%r15)
// 181: 0f 84 a6 00 00 00             je      0x22d <_JIT_ENTRY+0x22d>
// 187: 85 ed                         testl   %ebp, %ebp
// 189: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 18e: 0f 88 17 01 00 00             js      0x2ab <_JIT_ENTRY+0x2ab>
// 194: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 199: 48 85 ff                      testq   %rdi, %rdi
// 19c: 0f 84 09 01 00 00             je      0x2ab <_JIT_ENTRY+0x2ab>
// 1a2: 4d 8d 7c 24 f8                leaq    -0x8(%r12), %r15
// 1a7: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001a9:  R_X86_64_64  _Py_NoneStruct
// 1b1: 4c 39 ef                      cmpq    %r13, %rdi
// 1b4: 74 11                         je      0x1c7 <_JIT_ENTRY+0x1c7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  PyErr_SetHandledException
// 1c0: ff d0                         callq   *%rax
// 1c2: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 1c7: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
// 1cc: 49 89 2e                      movq    %rbp, (%r14)
// 1cf: 4d 89 2f                      movq    %r13, (%r15)
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  PyLong_Type
// 1dc: 48 39 45 08                   cmpq    %rax, 0x8(%rbp)
// 1e0: 75 1e                         jne     0x200 <_JIT_ENTRY+0x200>
// 1e2: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1e6: 75 18                         jne     0x200 <_JIT_ENTRY+0x200>
// 1e8: 48 8b 55 10                   movq    0x10(%rbp), %rdx
// 1ec: 48 83 fa 0f                   cmpq    $0xf, %rdx
// 1f0: 77 0e                         ja      0x200 <_JIT_ENTRY+0x200>
// 1f2: 49 8b 45 10                   movq    0x10(%r13), %rax
// 1f6: 48 83 f8 0f                   cmpq    $0xf, %rax
// 1fa: 0f 86 cb 00 00 00             jbe     0x2cb <_JIT_ENTRY+0x2cb>
// 200: 49 29 dc                      subq    %rbx, %r12
// 203: 49 83 c4 b8                   addq    $-0x48, %r12
// 207: 49 c1 ec 03                   shrq    $0x3, %r12
// 20b: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 20f: 48 8b 03                      movq    (%rbx), %rax
// 212: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000214:  R_X86_64_64  _JIT_TARGET
// 21c: 89 c9                         movl    %ecx, %ecx
// 21e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 222: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 228: e9 8f 00 00 00                jmp     0x2bc <_JIT_ENTRY+0x2bc>
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_Dealloc
// 237: 4c 89 ff                      movq    %r15, %rdi
// 23a: ff d0                         callq   *%rax
// 23c: 85 ed                         testl   %ebp, %ebp
// 23e: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 243: 0f 89 4b ff ff ff             jns     0x194 <_JIT_ENTRY+0x194>
// 249: eb 60                         jmp     0x2ab <_JIT_ENTRY+0x2ab>
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_Dealloc
// 255: 4c 89 ef                      movq    %r13, %rdi
// 258: ff d0                         callq   *%rax
// 25a: 49 8b 07                      movq    (%r15), %rax
// 25d: 48 85 c0                      testq   %rax, %rax
// 260: 0f 8f cd fe ff ff             jg      0x133 <_JIT_ENTRY+0x133>
// 266: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000268:  R_X86_64_64  .rodata.str1.1
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_NegativeRefcount
// 27a: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 27f: 4c 89 fa                      movq    %r15, %rdx
// 282: ff d0                         callq   *%rax
// 284: 49 8b 07                      movq    (%r15), %rax
// 287: 85 c0                         testl   %eax, %eax
// 289: 78 20                         js      0x2ab <_JIT_ENTRY+0x2ab>
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 295: ff d0                         callq   *%rax
// 297: 49 ff 0f                      decq    (%r15)
// 29a: 75 0f                         jne     0x2ab <_JIT_ENTRY+0x2ab>
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _Py_Dealloc
// 2a6: 4c 89 ff                      movq    %r15, %rdi
// 2a9: ff d0                         callq   *%rax
// 2ab: 49 29 de                      subq    %rbx, %r14
// 2ae: 49 83 c6 b8                   addq    $-0x48, %r14
// 2b2: 49 c1 ee 03                   shrq    $0x3, %r14
// 2b6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2ba: 31 c0                         xorl    %eax, %eax
// 2bc: 48 83 c4 38                   addq    $0x38, %rsp
// 2c0: 5b                            popq    %rbx
// 2c1: 41 5c                         popq    %r12
// 2c3: 41 5d                         popq    %r13
// 2c5: 41 5e                         popq    %r14
// 2c7: 41 5f                         popq    %r15
// 2c9: 5d                            popq    %rbp
// 2ca: c3                            retq
// 2cb: 48 89 44 24 28                movq    %rax, 0x28(%rsp)
// 2d0: 44 8b 65 18                   movl    0x18(%rbp), %r12d
// 2d4: 41 8b 45 18                   movl    0x18(%r13), %eax
// 2d8: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
// 2dd: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 2e1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002e3:  R_X86_64_64  PyInterpreterState_Get
// 2eb: 75 45                         jne     0x332 <_JIT_ENTRY+0x332>
// 2ed: 48 89 d3                      movq    %rdx, %rbx
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  PyInterpreterState_Get
// 2fa: ff d0                         callq   *%rax
// 2fc: 48 89 da                      movq    %rbx, %rdx
// 2ff: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 306: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000308:  R_X86_64_64  PyInterpreterState_Get
// 310: 48 ff 4d 00                   decq    (%rbp)
// 314: 75 1c                         jne     0x332 <_JIT_ENTRY+0x332>
// 316: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000318:  R_X86_64_64  PyObject_Free
// 320: 48 89 ef                      movq    %rbp, %rdi
// 323: ff d0                         callq   *%rax
// 325: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000327:  R_X86_64_64  PyInterpreterState_Get
// 32f: 48 89 da                      movq    %rbx, %rdx
// 332: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 337: 75 27                         jne     0x360 <_JIT_ENTRY+0x360>
// 339: 48 89 d3                      movq    %rdx, %rbx
// 33c: ff d1                         callq   *%rcx
// 33e: 48 89 da                      movq    %rbx, %rdx
// 341: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 348: 49 ff 4d 00                   decq    (%r13)
// 34c: 75 12                         jne     0x360 <_JIT_ENTRY+0x360>
// 34e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000350:  R_X86_64_64  PyObject_Free
// 358: 4c 89 ef                      movq    %r13, %rdi
// 35b: ff d0                         callq   *%rax
// 35d: 48 89 da                      movq    %rbx, %rdx
// 360: 83 e2 03                      andl    $0x3, %edx
// 363: b8 01 00 00 00                movl    $0x1, %eax
// 368: b9 01 00 00 00                movl    $0x1, %ecx
// 36d: 48 29 d1                      subq    %rdx, %rcx
// 370: 49 0f af cc                   imulq   %r12, %rcx
// 374: 48 8b 5c 24 28                movq    0x28(%rsp), %rbx
// 379: 83 e3 03                      andl    $0x3, %ebx
// 37c: 48 29 d8                      subq    %rbx, %rax
// 37f: 48 0f af 44 24 20             imulq   0x20(%rsp), %rax
// 385: 31 d2                         xorl    %edx, %edx
// 387: 31 f6                         xorl    %esi, %esi
// 389: 48 39 c1                      cmpq    %rax, %rcx
// 38c: 0f 9d c2                      setge   %dl
// 38f: 40 0f 9e c6                   setle   %sil
// 393: 01 d2                         addl    %edx, %edx
// 395: 09 d6                         orl     %edx, %esi
// 397: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000399:  R_X86_64_64  _JIT_OPARG
// 3a1: 0f a3 f0                      btl     %esi, %eax
// 3a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a6:  R_X86_64_64  _Py_FalseStruct
// 3ae: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000003b0:  R_X86_64_64  _Py_TrueStruct
// 3b8: 48 0f 43 c8                   cmovaeq %rax, %rcx
// 3bc: 49 89 0e                      movq    %rcx, (%r14)
// 3bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c1:  R_X86_64_64  _JIT_CONTINUE
// 3c9: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 3ce: 4c 89 fe                      movq    %r15, %rsi
// 3d1: 48 8b 54 24 30                movq    0x30(%rsp), %rdx
// 3d6: 48 83 c4 38                   addq    $0x38, %rsp
// 3da: 5b                            popq    %rbx
// 3db: 41 5c                         popq    %r12
// 3dd: 41 5d                         popq    %r13
// 3df: 41 5e                         popq    %r14
// 3e1: 41 5f                         popq    %r15
// 3e3: 5d                            popq    %rbp
// 3e4: ff e0                         jmpq    *%rax
// 3e6: 
static const unsigned char _CHECK_EG_MATCHplus_COMPARE_OP_INT_code_body[999] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x4c, 0x8d, 0x76, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x53, 0x48, 0x89, 0x6c, 0x24, 0x30, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x18, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd3, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x24, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x33, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x50, 0x01, 0x00, 0x00, 0xe9, 0x6b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x0b, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0xa6, 0x00, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x88, 0x17, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x09, 0x01, 0x00, 0x00, 0x4d, 0x8d, 0x7c, 0x24, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xef, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x49, 0x89, 0x2e, 0x4d, 0x89, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x45, 0x08, 0x75, 0x1e, 0x49, 0x39, 0x45, 0x08, 0x75, 0x18, 0x48, 0x8b, 0x55, 0x10, 0x48, 0x83, 0xfa, 0x0f, 0x77, 0x0e, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x83, 0xf8, 0x0f, 0x0f, 0x86, 0xcb, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x8f, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x89, 0x4b, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xcd, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x44, 0x24, 0x28, 0x44, 0x8b, 0x65, 0x18, 0x41, 0x8b, 0x45, 0x18, 0x48, 0x89, 0x44, 0x24, 0x20, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x45, 0x48, 0x89, 0xd3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0xda, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x1c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x27, 0x48, 0x89, 0xd3, 0xff, 0xd1, 0x48, 0x89, 0xda, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0xda, 0x83, 0xe2, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x48, 0x29, 0xd1, 0x49, 0x0f, 0xaf, 0xcc, 0x48, 0x8b, 0x5c, 0x24, 0x28, 0x83, 0xe3, 0x03, 0x48, 0x29, 0xd8, 0x48, 0x0f, 0xaf, 0x44, 0x24, 0x20, 0x31, 0xd2, 0x31, 0xf6, 0x48, 0x39, 0xc1, 0x0f, 0x9d, 0xc2, 0x40, 0x0f, 0x9e, 0xc6, 0x01, 0xd2, 0x09, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xa3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xc8, 0x49, 0x89, 0x0e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_COMPARE_OP_INT_code_holes[33] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x57, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x318, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x327, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x350, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x399, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x3b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x3c1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_COMPARE_OP_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_COMPARE_OP_INT_data_holes[1];

// _CHECK_EG_MATCHplus_COMPARE_OP_STR
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_COMPARE_OP_STR.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 4c 8d 76 f0                   leaq    -0x10(%rsi), %r14
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 fe                      movq    %r15, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 fe                      movq    %r15, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 56                         jle     0xd9 <_JIT_ENTRY+0xd9>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 78                         jns     0xff <_JIT_ENTRY+0xff>
// 87: e9 89 00 00 00                jmp     0x115 <_JIT_ENTRY+0x115>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 4c 89 ea                      movq    %r13, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 45 00                   movq    (%r13), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 4d 00                   decq    (%r13)
// c2: 74 6a                         je      0x12e <_JIT_ENTRY+0x12e>
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7e 79                         jle     0x145 <_JIT_ENTRY+0x145>
// cc: 85 c0                         testl   %eax, %eax
// ce: 0f 89 96 00 00 00             jns     0x16a <_JIT_ENTRY+0x16a>
// d4: e9 a6 00 00 00                jmp     0x17f <_JIT_ENTRY+0x17f>
// d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000db:  R_X86_64_64  .rodata.str1.1
// e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e5:  R_X86_64_64  _Py_NegativeRefcount
// ed: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f2: 4c 89 ea                      movq    %r13, %rdx
// f5: ff d0                         callq   *%rax
// f7: 49 8b 45 00                   movq    (%r13), %rax
// fb: 85 c0                         testl   %eax, %eax
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 4d 00                   decq    (%r13)
// 10f: 0f 84 0e 01 00 00             je      0x223 <_JIT_ENTRY+0x223>
// 115: 49 8b 07                      movq    (%r15), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 0f 8e 1d 01 00 00             jle     0x23e <_JIT_ENTRY+0x23e>
// 121: 85 c0                         testl   %eax, %eax
// 123: 0f 89 3a 01 00 00             jns     0x263 <_JIT_ENTRY+0x263>
// 129: e9 55 01 00 00                jmp     0x283 <_JIT_ENTRY+0x283>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_Dealloc
// 138: 4c 89 ef                      movq    %r13, %rdi
// 13b: ff d0                         callq   *%rax
// 13d: 49 8b 07                      movq    (%r15), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 87                         jg      0xcc <_JIT_ENTRY+0xcc>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15e: 4c 89 fa                      movq    %r15, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 07                      movq    (%r15), %rax
// 166: 85 c0                         testl   %eax, %eax
// 168: 78 15                         js      0x17f <_JIT_ENTRY+0x17f>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 0f                      decq    (%r15)
// 179: 0f 84 8b 00 00 00             je      0x20a <_JIT_ENTRY+0x20a>
// 17f: 85 ed                         testl   %ebp, %ebp
// 181: 0f 88 fc 00 00 00             js      0x283 <_JIT_ENTRY+0x283>
// 187: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 ef 00 00 00             je      0x283 <_JIT_ENTRY+0x283>
// 194: 4d 8d 7c 24 f8                leaq    -0x8(%r12), %r15
// 199: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000019b:  R_X86_64_64  _Py_NoneStruct
// 1a3: 4c 39 ef                      cmpq    %r13, %rdi
// 1a6: 74 10                         je      0x1b8 <_JIT_ENTRY+0x1b8>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  PyErr_SetHandledException
// 1b2: ff d0                         callq   *%rax
// 1b4: 4c 8b 2c 24                   movq    (%rsp), %r13
// 1b8: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 1bd: 49 89 2e                      movq    %rbp, (%r14)
// 1c0: 4d 89 2f                      movq    %r13, (%r15)
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  PyUnicode_Type
// 1cd: 48 39 45 08                   cmpq    %rax, 0x8(%rbp)
// 1d1: 75 0a                         jne     0x1dd <_JIT_ENTRY+0x1dd>
// 1d3: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1d7: 0f 84 c6 00 00 00             je      0x2a3 <_JIT_ENTRY+0x2a3>
// 1dd: 49 29 dc                      subq    %rbx, %r12
// 1e0: 49 83 c4 b8                   addq    $-0x48, %r12
// 1e4: 49 c1 ec 03                   shrq    $0x3, %r12
// 1e8: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 1ec: 48 8b 03                      movq    (%rbx), %rax
// 1ef: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f1:  R_X86_64_64  _JIT_TARGET
// 1f9: 89 c9                         movl    %ecx, %ecx
// 1fb: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1ff: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 205: e9 8a 00 00 00                jmp     0x294 <_JIT_ENTRY+0x294>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _Py_Dealloc
// 214: 4c 89 ff                      movq    %r15, %rdi
// 217: ff d0                         callq   *%rax
// 219: 85 ed                         testl   %ebp, %ebp
// 21b: 0f 89 66 ff ff ff             jns     0x187 <_JIT_ENTRY+0x187>
// 221: eb 60                         jmp     0x283 <_JIT_ENTRY+0x283>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_Dealloc
// 22d: 4c 89 ef                      movq    %r13, %rdi
// 230: ff d0                         callq   *%rax
// 232: 49 8b 07                      movq    (%r15), %rax
// 235: 48 85 c0                      testq   %rax, %rax
// 238: 0f 8f e3 fe ff ff             jg      0x121 <_JIT_ENTRY+0x121>
// 23e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000240:  R_X86_64_64  .rodata.str1.1
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _Py_NegativeRefcount
// 252: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 257: 4c 89 fa                      movq    %r15, %rdx
// 25a: ff d0                         callq   *%rax
// 25c: 49 8b 07                      movq    (%r15), %rax
// 25f: 85 c0                         testl   %eax, %eax
// 261: 78 20                         js      0x283 <_JIT_ENTRY+0x283>
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26d: ff d0                         callq   *%rax
// 26f: 49 ff 0f                      decq    (%r15)
// 272: 75 0f                         jne     0x283 <_JIT_ENTRY+0x283>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _Py_Dealloc
// 27e: 4c 89 ff                      movq    %r15, %rdi
// 281: ff d0                         callq   *%rax
// 283: 49 29 de                      subq    %rbx, %r14
// 286: 49 83 c6 b8                   addq    $-0x48, %r14
// 28a: 49 c1 ee 03                   shrq    $0x3, %r14
// 28e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 292: 31 c0                         xorl    %eax, %eax
// 294: 48 83 c4 18                   addq    $0x18, %rsp
// 298: 5b                            popq    %rbx
// 299: 41 5c                         popq    %r12
// 29b: 41 5d                         popq    %r13
// 29d: 41 5e                         popq    %r14
// 29f: 41 5f                         popq    %r15
// 2a1: 5d                            popq    %rbp
// 2a2: c3                            retq
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _PyUnicode_Equal
// 2ad: 48 89 ef                      movq    %rbp, %rdi
// 2b0: 4c 89 ee                      movq    %r13, %rsi
// 2b3: ff d0                         callq   *%rax
// 2b5: 41 89 c4                      movl    %eax, %r12d
// 2b8: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 2bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002be:  R_X86_64_64  PyInterpreterState_Get
// 2c6: 75 3c                         jne     0x304 <_JIT_ENTRY+0x304>
// 2c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ca:  R_X86_64_64  PyInterpreterState_Get
// 2d2: ff d0                         callq   *%rax
// 2d4: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2db: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002dd:  R_X86_64_64  PyInterpreterState_Get
// 2e5: 48 ff 4d 00                   decq    (%rbp)
// 2e9: 75 19                         jne     0x304 <_JIT_ENTRY+0x304>
// 2eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ed:  R_X86_64_64  _PyUnicode_ExactDealloc
// 2f5: 48 89 ef                      movq    %rbp, %rdi
// 2f8: ff d0                         callq   *%rax
// 2fa: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002fc:  R_X86_64_64  PyInterpreterState_Get
// 304: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 309: 75 1e                         jne     0x329 <_JIT_ENTRY+0x329>
// 30b: ff d1                         callq   *%rcx
// 30d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 314: 49 ff 4d 00                   decq    (%r13)
// 318: 75 0f                         jne     0x329 <_JIT_ENTRY+0x329>
// 31a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031c:  R_X86_64_64  _PyUnicode_ExactDealloc
// 324: 4c 89 ef                      movq    %r13, %rdi
// 327: ff d0                         callq   *%rax
// 329: 41 83 c4 07                   addl    $0x7, %r12d
// 32d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032f:  R_X86_64_64  _JIT_OPARG
// 337: 66 44 85 e0                   testw   %r12w, %ax
// 33b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033d:  R_X86_64_64  _Py_FalseStruct
// 345: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000347:  R_X86_64_64  _Py_TrueStruct
// 34f: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 353: 49 89 0e                      movq    %rcx, (%r14)
// 356: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000358:  R_X86_64_64  _JIT_CONTINUE
// 360: 48 89 df                      movq    %rbx, %rdi
// 363: 4c 89 fe                      movq    %r15, %rsi
// 366: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 36b: 48 83 c4 18                   addq    $0x18, %rsp
// 36f: 5b                            popq    %rbx
// 370: 41 5c                         popq    %r12
// 372: 41 5d                         popq    %r13
// 374: 41 5e                         popq    %r14
// 376: 41 5f                         popq    %r15
// 378: 5d                            popq    %rbp
// 379: ff e0                         jmpq    *%rax
// 37b: 
static const unsigned char _CHECK_EG_MATCHplus_COMPARE_OP_STR_code_body[892] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x4c, 0x8d, 0x76, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x0e, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x1d, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x3a, 0x01, 0x00, 0x00, 0xe9, 0x55, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xfc, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xef, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x7c, 0x24, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xef, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x2c, 0x24, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x49, 0x89, 0x2e, 0x4d, 0x89, 0x2f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x45, 0x08, 0x75, 0x0a, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x84, 0xc6, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x66, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xe3, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x41, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x41, 0x83, 0xc4, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x44, 0x85, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x0e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_COMPARE_OP_STR_code_holes[34] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_Equal, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x31c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x32f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x33d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x347, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x358, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_COMPARE_OP_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_COMPARE_OP_STR_data_holes[1];

// _CHECK_EG_MATCHplus_CONTAINS_OP
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CONTAINS_OP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 4c 8d 76 f0                   leaq    -0x10(%rsi), %r14
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 e6                      movq    %r12, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 1c                         jle     0x90 <_JIT_ENTRY+0x90>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3e                         jns     0xb6 <_JIT_ENTRY+0xb6>
// 78: eb 52                         jmp     0xcc <_JIT_ENTRY+0xcc>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 63                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 83: 85 c0                         testl   %eax, %eax
// 85: 0f 89 81 00 00 00             jns     0x10c <_JIT_ENTRY+0x10c>
// 8b: e9 9d 00 00 00                jmp     0x12d <_JIT_ENTRY+0x12d>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_NegativeRefcount
// a4: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a9: 4c 89 ea                      movq    %r13, %rdx
// ac: ff d0                         callq   *%rax
// ae: 49 8b 45 00                   movq    (%r13), %rax
// b2: 85 c0                         testl   %eax, %eax
// b4: 78 16                         js      0xcc <_JIT_ENTRY+0xcc>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c0: ff d0                         callq   *%rax
// c2: 49 ff 4d 00                   decq    (%r13)
// c6: 0f 84 c7 00 00 00             je      0x193 <_JIT_ENTRY+0x193>
// cc: 49 8b 04 24                   movq    (%r12), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 0f 8e d6 00 00 00             jle     0x1af <_JIT_ENTRY+0x1af>
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 89 f4 00 00 00             jns     0x1d5 <_JIT_ENTRY+0x1d5>
// e1: e9 05 01 00 00                jmp     0x1eb <_JIT_ENTRY+0x1eb>
// e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_NegativeRefcount
// fa: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ff: 4c 89 ea                      movq    %r13, %rdx
// 102: ff d0                         callq   *%rax
// 104: 49 8b 45 00                   movq    (%r13), %rax
// 108: 85 c0                         testl   %eax, %eax
// 10a: 78 21                         js      0x12d <_JIT_ENTRY+0x12d>
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 116: ff d0                         callq   *%rax
// 118: 49 ff 4d 00                   decq    (%r13)
// 11c: 75 0f                         jne     0x12d <_JIT_ENTRY+0x12d>
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _Py_Dealloc
// 128: 4c 89 ef                      movq    %r13, %rdi
// 12b: ff d0                         callq   *%rax
// 12d: 49 8b 04 24                   movq    (%r12), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 09                         jle     0x13f <_JIT_ENTRY+0x13f>
// 136: 85 c0                         testl   %eax, %eax
// 138: 79 2f                         jns     0x169 <_JIT_ENTRY+0x169>
// 13a: e9 13 02 00 00                jmp     0x352 <_JIT_ENTRY+0x352>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 e9 01 00 00             js      0x352 <_JIT_ENTRY+0x352>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 0c 24                   decq    (%r12)
// 179: 0f 85 d3 01 00 00             jne     0x352 <_JIT_ENTRY+0x352>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_Dealloc
// 189: 4c 89 e7                      movq    %r12, %rdi
// 18c: ff d0                         callq   *%rax
// 18e: e9 bf 01 00 00                jmp     0x352 <_JIT_ENTRY+0x352>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_Dealloc
// 19d: 4c 89 ef                      movq    %r13, %rdi
// 1a0: ff d0                         callq   *%rax
// 1a2: 49 8b 04 24                   movq    (%r12), %rax
// 1a6: 48 85 c0                      testq   %rax, %rax
// 1a9: 0f 8f 2a ff ff ff             jg      0xd9 <_JIT_ENTRY+0xd9>
// 1af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b1:  R_X86_64_64  .rodata.str1.1
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_NegativeRefcount
// 1c3: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c8: 4c 89 e2                      movq    %r12, %rdx
// 1cb: ff d0                         callq   *%rax
// 1cd: 49 8b 04 24                   movq    (%r12), %rax
// 1d1: 85 c0                         testl   %eax, %eax
// 1d3: 78 16                         js      0x1eb <_JIT_ENTRY+0x1eb>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1df: ff d0                         callq   *%rax
// 1e1: 49 ff 0c 24                   decq    (%r12)
// 1e5: 0f 84 3b 01 00 00             je      0x326 <_JIT_ENTRY+0x326>
// 1eb: 85 ed                         testl   %ebp, %ebp
// 1ed: 0f 88 5f 01 00 00             js      0x352 <_JIT_ENTRY+0x352>
// 1f3: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f7: 48 85 ff                      testq   %rdi, %rdi
// 1fa: 0f 84 52 01 00 00             je      0x352 <_JIT_ENTRY+0x352>
// 200: 49 83 c7 f8                   addq    $-0x8, %r15
// 204: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000206:  R_X86_64_64  _Py_NoneStruct
// 20e: 4c 39 e7                      cmpq    %r12, %rdi
// 211: 74 10                         je      0x223 <_JIT_ENTRY+0x223>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  PyErr_SetHandledException
// 21d: ff d0                         callq   *%rax
// 21f: 4c 8b 24 24                   movq    (%rsp), %r12
// 223: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 228: 4d 89 2e                      movq    %r13, (%r14)
// 22b: 4d 89 27                      movq    %r12, (%r15)
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  PySequence_Contains
// 238: 4c 89 e7                      movq    %r12, %rdi
// 23b: 4c 89 ee                      movq    %r13, %rsi
// 23e: ff d0                         callq   *%rax
// 240: 89 c5                         movl    %eax, %ebp
// 242: 49 8b 45 00                   movq    (%r13), %rax
// 246: 48 85 c0                      testq   %rax, %rax
// 249: 7f 22                         jg      0x26d <_JIT_ENTRY+0x26d>
// 24b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024d:  R_X86_64_64  .rodata.str1.1
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _Py_NegativeRefcount
// 25f: be a8 07 00 00                movl    $0x7a8, %esi            # imm = 0x7A8
// 264: 4c 89 ea                      movq    %r13, %rdx
// 267: ff d0                         callq   *%rax
// 269: 49 8b 45 00                   movq    (%r13), %rax
// 26d: 85 c0                         testl   %eax, %eax
// 26f: 78 21                         js      0x292 <_JIT_ENTRY+0x292>
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27b: ff d0                         callq   *%rax
// 27d: 49 ff 4d 00                   decq    (%r13)
// 281: 75 0f                         jne     0x292 <_JIT_ENTRY+0x292>
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _Py_Dealloc
// 28d: 4c 89 ef                      movq    %r13, %rdi
// 290: ff d0                         callq   *%rax
// 292: 49 8b 04 24                   movq    (%r12), %rax
// 296: 48 85 c0                      testq   %rax, %rax
// 299: 7f 22                         jg      0x2bd <_JIT_ENTRY+0x2bd>
// 29b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029d:  R_X86_64_64  .rodata.str1.1
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _Py_NegativeRefcount
// 2af: be a9 07 00 00                movl    $0x7a9, %esi            # imm = 0x7A9
// 2b4: 4c 89 e2                      movq    %r12, %rdx
// 2b7: ff d0                         callq   *%rax
// 2b9: 49 8b 04 24                   movq    (%r12), %rax
// 2bd: 85 c0                         testl   %eax, %eax
// 2bf: 78 12                         js      0x2d3 <_JIT_ENTRY+0x2d3>
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2cb: ff d0                         callq   *%rax
// 2cd: 49 ff 0c 24                   decq    (%r12)
// 2d1: 74 6c                         je      0x33f <_JIT_ENTRY+0x33f>
// 2d3: 85 ed                         testl   %ebp, %ebp
// 2d5: 78 7b                         js      0x352 <_JIT_ENTRY+0x352>
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  _JIT_OPARG
// 2e1: 0f b7 c0                      movzwl  %ax, %eax
// 2e4: 39 c5                         cmpl    %eax, %ebp
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _Py_FalseStruct
// 2f0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002f2:  R_X86_64_64  _Py_TrueStruct
// 2fa: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 2fe: 49 89 0e                      movq    %rcx, (%r14)
// 301: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000303:  R_X86_64_64  _JIT_CONTINUE
// 30b: 48 89 df                      movq    %rbx, %rdi
// 30e: 4c 89 fe                      movq    %r15, %rsi
// 311: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 316: 48 83 c4 18                   addq    $0x18, %rsp
// 31a: 5b                            popq    %rbx
// 31b: 41 5c                         popq    %r12
// 31d: 41 5d                         popq    %r13
// 31f: 41 5e                         popq    %r14
// 321: 41 5f                         popq    %r15
// 323: 5d                            popq    %rbp
// 324: ff e0                         jmpq    *%rax
// 326: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000328:  R_X86_64_64  _Py_Dealloc
// 330: 4c 89 e7                      movq    %r12, %rdi
// 333: ff d0                         callq   *%rax
// 335: 85 ed                         testl   %ebp, %ebp
// 337: 0f 89 b6 fe ff ff             jns     0x1f3 <_JIT_ENTRY+0x1f3>
// 33d: eb 13                         jmp     0x352 <_JIT_ENTRY+0x352>
// 33f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000341:  R_X86_64_64  _Py_Dealloc
// 349: 4c 89 e7                      movq    %r12, %rdi
// 34c: ff d0                         callq   *%rax
// 34e: 85 ed                         testl   %ebp, %ebp
// 350: 79 85                         jns     0x2d7 <_JIT_ENTRY+0x2d7>
// 352: 49 29 de                      subq    %rbx, %r14
// 355: 49 83 c6 b8                   addq    $-0x48, %r14
// 359: 49 c1 ee 03                   shrq    $0x3, %r14
// 35d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 361: 31 c0                         xorl    %eax, %eax
// 363: 48 83 c4 18                   addq    $0x18, %rsp
// 367: 5b                            popq    %rbx
// 368: 41 5c                         popq    %r12
// 36a: 41 5d                         popq    %r13
// 36c: 41 5e                         popq    %r14
// 36e: 41 5f                         popq    %r15
// 370: 5d                            popq    %rbp
// 371: c3                            retq
// 372: 
static const unsigned char _CHECK_EG_MATCHplus_CONTAINS_OP_code_body[883] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8d, 0x76, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0x13, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xe9, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xd3, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xbf, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x3b, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x5f, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x52, 0x01, 0x00, 0x00, 0x49, 0x83, 0xc7, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x4d, 0x89, 0x2e, 0x4d, 0x89, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa8, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x6c, 0x85, 0xed, 0x78, 0x7b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x39, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x0e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0xb6, 0xfe, 0xff, 0xff, 0xeb, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x79, 0x85, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_CONTAINS_OP_code_holes[34] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Contains, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x303, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x341, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CONTAINS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CONTAINS_OP_data_holes[1];

// _CHECK_EG_MATCHplus_CONVERT_VALUE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_CONVERT_VALUE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 63                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 81 00 00 00             jns     0x106 <_JIT_ENTRY+0x106>
// 85: e9 9d 00 00 00                jmp     0x127 <_JIT_ENTRY+0x127>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c7 00 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// c6: 49 8b 04 24                   movq    (%r12), %rax
// ca: 48 85 c0                      testq   %rax, %rax
// cd: 0f 8e d6 00 00 00             jle     0x1a9 <_JIT_ENTRY+0x1a9>
// d3: 85 c0                         testl   %eax, %eax
// d5: 0f 89 f4 00 00 00             jns     0x1cf <_JIT_ENTRY+0x1cf>
// db: e9 05 01 00 00                jmp     0x1e5 <_JIT_ENTRY+0x1e5>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f9: 4c 89 ea                      movq    %r13, %rdx
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 21                         js      0x127 <_JIT_ENTRY+0x127>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 4d 00                   decq    (%r13)
// 116: 75 0f                         jne     0x127 <_JIT_ENTRY+0x127>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_Dealloc
// 122: 4c 89 ef                      movq    %r13, %rdi
// 125: ff d0                         callq   *%rax
// 127: 49 8b 04 24                   movq    (%r12), %rax
// 12b: 48 85 c0                      testq   %rax, %rax
// 12e: 7e 09                         jle     0x139 <_JIT_ENTRY+0x139>
// 130: 85 c0                         testl   %eax, %eax
// 132: 79 2f                         jns     0x163 <_JIT_ENTRY+0x163>
// 134: e9 93 01 00 00                jmp     0x2cc <_JIT_ENTRY+0x2cc>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_NegativeRefcount
// 14d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 152: 4c 89 e2                      movq    %r12, %rdx
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 69 01 00 00             js      0x2cc <_JIT_ENTRY+0x2cc>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 53 01 00 00             jne     0x2cc <_JIT_ENTRY+0x2cc>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: 4c 89 e7                      movq    %r12, %rdi
// 186: ff d0                         callq   *%rax
// 188: e9 3f 01 00 00                jmp     0x2cc <_JIT_ENTRY+0x2cc>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: 4c 89 ef                      movq    %r13, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 49 8b 04 24                   movq    (%r12), %rax
// 1a0: 48 85 c0                      testq   %rax, %rax
// 1a3: 0f 8f 2a ff ff ff             jg      0xd3 <_JIT_ENTRY+0xd3>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 49 8b 04 24                   movq    (%r12), %rax
// 1cb: 85 c0                         testl   %eax, %eax
// 1cd: 78 16                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 49 ff 0c 24                   decq    (%r12)
// 1df: 0f 84 d0 00 00 00             je      0x2b5 <_JIT_ENTRY+0x2b5>
// 1e5: 85 ed                         testl   %ebp, %ebp
// 1e7: 0f 88 df 00 00 00             js      0x2cc <_JIT_ENTRY+0x2cc>
// 1ed: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1f2: 48 85 ff                      testq   %rdi, %rdi
// 1f5: 0f 84 d1 00 00 00             je      0x2cc <_JIT_ENTRY+0x2cc>
// 1fb: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001fd:  R_X86_64_64  _Py_NoneStruct
// 205: 4c 39 e7                      cmpq    %r12, %rdi
// 208: 74 11                         je      0x21b <_JIT_ENTRY+0x21b>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyErr_SetHandledException
// 214: ff d0                         callq   *%rax
// 216: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 21b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 220: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 224: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _JIT_OPARG
// 232: 0f b7 c0                      movzwl  %ax, %eax
// 235: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000237:  R_X86_64_64  .rodata
// 23f: 4c 89 e7                      movq    %r12, %rdi
// 242: ff 14 c1                      callq   *(%rcx,%rax,8)
// 245: 49 89 c5                      movq    %rax, %r13
// 248: 49 8b 04 24                   movq    (%r12), %rax
// 24c: 48 85 c0                      testq   %rax, %rax
// 24f: 7f 22                         jg      0x273 <_JIT_ENTRY+0x273>
// 251: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000253:  R_X86_64_64  .rodata.str1.1
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_NegativeRefcount
// 265: be 98 0c 00 00                movl    $0xc98, %esi            # imm = 0xC98
// 26a: 4c 89 e2                      movq    %r12, %rdx
// 26d: ff d0                         callq   *%rax
// 26f: 49 8b 04 24                   movq    (%r12), %rax
// 273: 85 c0                         testl   %eax, %eax
// 275: 78 12                         js      0x289 <_JIT_ENTRY+0x289>
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 281: ff d0                         callq   *%rax
// 283: 49 ff 0c 24                   decq    (%r12)
// 287: 74 67                         je      0x2f0 <_JIT_ENTRY+0x2f0>
// 289: 4d 85 ed                      testq   %r13, %r13
// 28c: 74 42                         je      0x2d0 <_JIT_ENTRY+0x2d0>
// 28e: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _JIT_CONTINUE
// 29c: 4c 89 f7                      movq    %r14, %rdi
// 29f: 48 89 de                      movq    %rbx, %rsi
// 2a2: 4c 89 fa                      movq    %r15, %rdx
// 2a5: 48 83 c4 18                   addq    $0x18, %rsp
// 2a9: 5b                            popq    %rbx
// 2aa: 41 5c                         popq    %r12
// 2ac: 41 5d                         popq    %r13
// 2ae: 41 5e                         popq    %r14
// 2b0: 41 5f                         popq    %r15
// 2b2: 5d                            popq    %rbp
// 2b3: ff e0                         jmpq    *%rax
// 2b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b7:  R_X86_64_64  _Py_Dealloc
// 2bf: 4c 89 e7                      movq    %r12, %rdi
// 2c2: ff d0                         callq   *%rax
// 2c4: 85 ed                         testl   %ebp, %ebp
// 2c6: 0f 89 21 ff ff ff             jns     0x1ed <_JIT_ENTRY+0x1ed>
// 2cc: 48 83 c3 f8                   addq    $-0x8, %rbx
// 2d0: 4c 29 f3                      subq    %r14, %rbx
// 2d3: 48 83 c3 b0                   addq    $-0x50, %rbx
// 2d7: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2db: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2df: 31 c0                         xorl    %eax, %eax
// 2e1: 48 83 c4 18                   addq    $0x18, %rsp
// 2e5: 5b                            popq    %rbx
// 2e6: 41 5c                         popq    %r12
// 2e8: 41 5d                         popq    %r13
// 2ea: 41 5e                         popq    %r14
// 2ec: 41 5f                         popq    %r15
// 2ee: 5d                            popq    %rbp
// 2ef: c3                            retq
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  _Py_Dealloc
// 2fa: 4c 89 e7                      movq    %r12, %rdi
// 2fd: ff d0                         callq   *%rax
// 2ff: 4d 85 ed                      testq   %r13, %r13
// 302: 75 8a                         jne     0x28e <_JIT_ENTRY+0x28e>
// 304: eb ca                         jmp     0x2d0 <_JIT_ENTRY+0x2d0>
// 306: 
static const unsigned char _CHECK_EG_MATCHplus_CONVERT_VALUE_code_body[775] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0x93, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x69, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x53, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x3f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xd0, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xdf, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xd1, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0x14, 0xc1, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x67, 0x4d, 0x85, 0xed, 0x74, 0x42, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x21, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0x8a, 0xeb, 0xca};
static const Hole _CHECK_EG_MATCHplus_CONVERT_VALUE_code_holes[28] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x253, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_CONVERT_VALUE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_CONVERT_VALUE_data_holes[4] = {
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Repr, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_ASCII, 0x0},
};

// _CHECK_EG_MATCHplus_COPY
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_COPY.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 1e 01 00 00             je      0x22d <_JIT_ENTRY+0x22d>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 2d 01 00 00             jle     0x248 <_JIT_ENTRY+0x248>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 4a 01 00 00             jns     0x26d <_JIT_ENTRY+0x26d>
// 123: e9 65 01 00 00                jmp     0x28d <_JIT_ENTRY+0x28d>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 9b 00 00 00             je      0x214 <_JIT_ENTRY+0x214>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 0c 01 00 00             js      0x28d <_JIT_ENTRY+0x28d>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 fe 00 00 00             je      0x28d <_JIT_ENTRY+0x28d>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _JIT_OPARG
// 1c6: 0f b7 c0                      movzwl  %ax, %eax
// 1c9: 48 c1 e0 03                   shlq    $0x3, %rax
// 1cd: 48 f7 d8                      negq    %rax
// 1d0: 4c 8b 3c 03                   movq    (%rbx,%rax), %r15
// 1d4: 41 8b 07                      movl    (%r15), %eax
// 1d7: ff c0                         incl    %eax
// 1d9: 74 0f                         je      0x1ea <_JIT_ENTRY+0x1ea>
// 1db: 41 89 07                      movl    %eax, (%r15)
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1e8: ff d0                         callq   *%rax
// 1ea: 4c 89 3b                      movq    %r15, (%rbx)
// 1ed: 48 83 c3 08                   addq    $0x8, %rbx
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _JIT_CONTINUE
// 1fb: 4c 89 f7                      movq    %r14, %rdi
// 1fe: 48 89 de                      movq    %rbx, %rsi
// 201: 4c 89 e2                      movq    %r12, %rdx
// 204: 48 83 c4 18                   addq    $0x18, %rsp
// 208: 5b                            popq    %rbx
// 209: 41 5c                         popq    %r12
// 20b: 41 5d                         popq    %r13
// 20d: 41 5e                         popq    %r14
// 20f: 41 5f                         popq    %r15
// 211: 5d                            popq    %rbp
// 212: ff e0                         jmpq    *%rax
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_Dealloc
// 21e: 4c 89 ff                      movq    %r15, %rdi
// 221: ff d0                         callq   *%rax
// 223: 85 ed                         testl   %ebp, %ebp
// 225: 0f 89 56 ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 22b: eb 60                         jmp     0x28d <_JIT_ENTRY+0x28d>
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_Dealloc
// 237: 4c 89 ef                      movq    %r13, %rdi
// 23a: ff d0                         callq   *%rax
// 23c: 49 8b 07                      movq    (%r15), %rax
// 23f: 48 85 c0                      testq   %rax, %rax
// 242: 0f 8f d3 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 248: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024a:  R_X86_64_64  .rodata.str1.1
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_NegativeRefcount
// 25c: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 261: 4c 89 fa                      movq    %r15, %rdx
// 264: ff d0                         callq   *%rax
// 266: 49 8b 07                      movq    (%r15), %rax
// 269: 85 c0                         testl   %eax, %eax
// 26b: 78 20                         js      0x28d <_JIT_ENTRY+0x28d>
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 277: ff d0                         callq   *%rax
// 279: 49 ff 0f                      decq    (%r15)
// 27c: 75 0f                         jne     0x28d <_JIT_ENTRY+0x28d>
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _Py_Dealloc
// 288: 4c 89 ff                      movq    %r15, %rdi
// 28b: ff d0                         callq   *%rax
// 28d: 48 83 c3 f0                   addq    $-0x10, %rbx
// 291: 4c 29 f3                      subq    %r14, %rbx
// 294: 48 83 c3 b8                   addq    $-0x48, %rbx
// 298: 48 c1 eb 03                   shrq    $0x3, %rbx
// 29c: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2a0: 31 c0                         xorl    %eax, %eax
// 2a2: 48 83 c4 18                   addq    $0x18, %rsp
// 2a6: 5b                            popq    %rbx
// 2a7: 41 5c                         popq    %r12
// 2a9: 41 5d                         popq    %r13
// 2ab: 41 5e                         popq    %r14
// 2ad: 41 5f                         popq    %r15
// 2af: 5d                            popq    %rbp
// 2b0: c3                            retq
// 2b1: 
static const unsigned char _CHECK_EG_MATCHplus_COPY_code_body[690] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x1e, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x2d, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x4a, 0x01, 0x00, 0x00, 0xe9, 0x65, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x0c, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x8b, 0x3c, 0x03, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x56, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xd3, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_COPY_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_COPY_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_COPY_data_holes[1];

// _CHECK_EG_MATCHplus_COPY_FREE_VARS
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_COPY_FREE_VARS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 18 00 00 00 00    movq    $0x0, 0x18(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 18                leaq    0x18(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 7a 01 00 00             je      0x28a <_JIT_ENTRY+0x28a>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 89 01 00 00             jle     0x2a6 <_JIT_ENTRY+0x2a6>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 a7 01 00 00             jns     0x2cc <_JIT_ENTRY+0x2cc>
// 125: e9 c3 01 00 00                jmp     0x2ed <_JIT_ENTRY+0x2ed>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 f3 00 00 00             je      0x271 <_JIT_ENTRY+0x271>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 67 01 00 00             js      0x2ed <_JIT_ENTRY+0x2ed>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 59 01 00 00             je      0x2ed <_JIT_ENTRY+0x2ed>
// 194: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// 199: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _Py_NoneStruct
// 1a8: 48 39 c7                      cmpq    %rax, %rdi
// 1ab: 74 11                         je      0x1be <_JIT_ENTRY+0x1be>
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  PyErr_SetHandledException
// 1b7: ff d0                         callq   *%rax
// 1b9: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1be: 48 8b 4c 24 18                movq    0x18(%rsp), %rcx
// 1c3: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1c7: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _JIT_OPARG
// 1d5: 66 85 c0                      testw   %ax, %ax
// 1d8: 74 70                         je      0x24a <_JIT_ENTRY+0x24a>
// 1da: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1df: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1e3: 4c 8b 60 48                   movq    0x48(%rax), %r12
// 1e7: 48 8b 02                      movq    (%rdx), %rax
// 1ea: 8b 40 48                      movl    0x48(%rax), %eax
// 1ed: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ef:  R_X86_64_64  _JIT_OPARG
// 1f7: 0f b7 c9                      movzwl  %cx, %ecx
// 1fa: 29 c8                         subl    %ecx, %eax
// 1fc: 83 f9 02                      cmpl    $0x2, %ecx
// 1ff: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 205: 44 0f 43 e9                   cmovael %ecx, %r13d
// 209: 48 98                         cltq
// 20b: 48 8d 2c c2                   leaq    (%rdx,%rax,8), %rbp
// 20f: 48 83 c5 48                   addq    $0x48, %rbp
// 213: 45 31 f6                      xorl    %r14d, %r14d
// 216: eb 15                         jmp     0x22d <_JIT_ENTRY+0x22d>
// 218: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 220: 4e 89 7c f5 00                movq    %r15, (%rbp,%r14,8)
// 225: 49 ff c6                      incq    %r14
// 228: 4d 39 f5                      cmpq    %r14, %r13
// 22b: 74 1d                         je      0x24a <_JIT_ENTRY+0x24a>
// 22d: 4f 8b 7c f4 18                movq    0x18(%r12,%r14,8), %r15
// 232: 41 8b 07                      movl    (%r15), %eax
// 235: ff c0                         incl    %eax
// 237: 74 e7                         je      0x220 <_JIT_ENTRY+0x220>
// 239: 41 89 07                      movl    %eax, (%r15)
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 246: ff d0                         callq   *%rax
// 248: eb d6                         jmp     0x220 <_JIT_ENTRY+0x220>
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _JIT_CONTINUE
// 254: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 259: 48 89 de                      movq    %rbx, %rsi
// 25c: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
// 261: 48 83 c4 28                   addq    $0x28, %rsp
// 265: 5b                            popq    %rbx
// 266: 41 5c                         popq    %r12
// 268: 41 5d                         popq    %r13
// 26a: 41 5e                         popq    %r14
// 26c: 41 5f                         popq    %r15
// 26e: 5d                            popq    %rbp
// 26f: ff e0                         jmpq    *%rax
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_Dealloc
// 27b: 4c 89 e7                      movq    %r12, %rdi
// 27e: ff d0                         callq   *%rax
// 280: 85 ed                         testl   %ebp, %ebp
// 282: 0f 89 fe fe ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 288: eb 63                         jmp     0x2ed <_JIT_ENTRY+0x2ed>
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _Py_Dealloc
// 294: 4c 89 ef                      movq    %r13, %rdi
// 297: ff d0                         callq   *%rax
// 299: 49 8b 04 24                   movq    (%r12), %rax
// 29d: 48 85 c0                      testq   %rax, %rax
// 2a0: 0f 8f 77 fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 2a6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a8:  R_X86_64_64  .rodata.str1.1
// 2b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b2:  R_X86_64_64  _Py_NegativeRefcount
// 2ba: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2bf: 4c 89 e2                      movq    %r12, %rdx
// 2c2: ff d0                         callq   *%rax
// 2c4: 49 8b 04 24                   movq    (%r12), %rax
// 2c8: 85 c0                         testl   %eax, %eax
// 2ca: 78 21                         js      0x2ed <_JIT_ENTRY+0x2ed>
// 2cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ce:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d6: ff d0                         callq   *%rax
// 2d8: 49 ff 0c 24                   decq    (%r12)
// 2dc: 75 0f                         jne     0x2ed <_JIT_ENTRY+0x2ed>
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_Dealloc
// 2e8: 4c 89 e7                      movq    %r12, %rdi
// 2eb: ff d0                         callq   *%rax
// 2ed: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2f1: 4c 29 f3                      subq    %r14, %rbx
// 2f4: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2f8: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2fc: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 300: 31 c0                         xorl    %eax, %eax
// 302: 48 83 c4 28                   addq    $0x28, %rsp
// 306: 5b                            popq    %rbx
// 307: 41 5c                         popq    %r12
// 309: 41 5d                         popq    %r13
// 30b: 41 5e                         popq    %r14
// 30d: 41 5f                         popq    %r15
// 30f: 5d                            popq    %rbp
// 310: c3                            retq
// 311: 
static const unsigned char _CHECK_EG_MATCHplus_COPY_FREE_VARS_code_body[786] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x18, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x7a, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x89, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xa7, 0x01, 0x00, 0x00, 0xe9, 0xc3, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xf3, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x67, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x59, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74, 0x70, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x8b, 0x42, 0x10, 0x4c, 0x8b, 0x60, 0x48, 0x48, 0x8b, 0x02, 0x8b, 0x40, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x83, 0xf9, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe9, 0x48, 0x98, 0x48, 0x8d, 0x2c, 0xc2, 0x48, 0x83, 0xc5, 0x48, 0x45, 0x31, 0xf6, 0xeb, 0x15, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x89, 0x7c, 0xf5, 0x00, 0x49, 0xff, 0xc6, 0x4d, 0x39, 0xf5, 0x74, 0x1d, 0x4f, 0x8b, 0x7c, 0xf4, 0x18, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0xe7, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0xfe, 0xfe, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x77, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_COPY_FREE_VARS_code_holes[25] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_COPY_FREE_VARS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_COPY_FREE_VARS_data_holes[1];

// _CHECK_EG_MATCHplus_DELETE_ATTR
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_DELETE_ATTR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8d 76 f8                   leaq    -0x8(%rsi), %r14
// 1b: 48 8b 6e f0                   movq    -0x10(%rsi), %rbp
// 1f: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 ee                      movq    %r13, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 42                         js      0x7b <_JIT_ENTRY+0x7b>
// 39: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 61: 48 89 ef                      movq    %rbp, %rdi
// 64: 4c 89 ee                      movq    %r13, %rsi
// 67: ff d0                         callq   *%rax
// 69: 41 89 c6                      movl    %eax, %r14d
// 6c: 48 8b 45 00                   movq    (%rbp), %rax
// 70: 48 85 c0                      testq   %rax, %rax
// 73: 7e 1c                         jle     0x91 <_JIT_ENTRY+0x91>
// 75: 85 c0                         testl   %eax, %eax
// 77: 79 3e                         jns     0xb7 <_JIT_ENTRY+0xb7>
// 79: eb 52                         jmp     0xcd <_JIT_ENTRY+0xcd>
// 7b: 48 8b 45 00                   movq    (%rbp), %rax
// 7f: 48 85 c0                      testq   %rax, %rax
// 82: 7e 63                         jle     0xe7 <_JIT_ENTRY+0xe7>
// 84: 85 c0                         testl   %eax, %eax
// 86: 0f 89 81 00 00 00             jns     0x10d <_JIT_ENTRY+0x10d>
// 8c: e9 9d 00 00 00                jmp     0x12e <_JIT_ENTRY+0x12e>
// 91: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000093:  R_X86_64_64  .rodata.str1.1
// 9b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009d:  R_X86_64_64  _Py_NegativeRefcount
// a5: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// aa: 48 89 ea                      movq    %rbp, %rdx
// ad: ff d0                         callq   *%rax
// af: 48 8b 45 00                   movq    (%rbp), %rax
// b3: 85 c0                         testl   %eax, %eax
// b5: 78 16                         js      0xcd <_JIT_ENTRY+0xcd>
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c1: ff d0                         callq   *%rax
// c3: 48 ff 4d 00                   decq    (%rbp)
// c7: 0f 84 c7 00 00 00             je      0x194 <_JIT_ENTRY+0x194>
// cd: 49 8b 45 00                   movq    (%r13), %rax
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 0f 8e d6 00 00 00             jle     0x1b0 <_JIT_ENTRY+0x1b0>
// da: 85 c0                         testl   %eax, %eax
// dc: 0f 89 f4 00 00 00             jns     0x1d6 <_JIT_ENTRY+0x1d6>
// e2: e9 05 01 00 00                jmp     0x1ec <_JIT_ENTRY+0x1ec>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 49 8b 45 00                   movq    (%r13), %rax
// 132: 48 85 c0                      testq   %rax, %rax
// 135: 7e 09                         jle     0x140 <_JIT_ENTRY+0x140>
// 137: 85 c0                         testl   %eax, %eax
// 139: 79 2f                         jns     0x16a <_JIT_ENTRY+0x16a>
// 13b: e9 a1 01 00 00                jmp     0x2e1 <_JIT_ENTRY+0x2e1>
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 159: 4c 89 ea                      movq    %r13, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 0f 88 77 01 00 00             js      0x2e1 <_JIT_ENTRY+0x2e1>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 4d 00                   decq    (%r13)
// 17a: 0f 85 61 01 00 00             jne     0x2e1 <_JIT_ENTRY+0x2e1>
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: 4c 89 ef                      movq    %r13, %rdi
// 18d: ff d0                         callq   *%rax
// 18f: e9 4d 01 00 00                jmp     0x2e1 <_JIT_ENTRY+0x2e1>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_Dealloc
// 19e: 48 89 ef                      movq    %rbp, %rdi
// 1a1: ff d0                         callq   *%rax
// 1a3: 49 8b 45 00                   movq    (%r13), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 0f 8f 2a ff ff ff             jg      0xda <_JIT_ENTRY+0xda>
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_NegativeRefcount
// 1c4: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c9: 4c 89 ea                      movq    %r13, %rdx
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8b 45 00                   movq    (%r13), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 16                         js      0x1ec <_JIT_ENTRY+0x1ec>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 ff 4d 00                   decq    (%r13)
// 1e6: 0f 84 d8 00 00 00             je      0x2c4 <_JIT_ENTRY+0x2c4>
// 1ec: 45 85 f6                      testl   %r14d, %r14d
// 1ef: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1f4: 0f 88 e7 00 00 00             js      0x2e1 <_JIT_ENTRY+0x2e1>
// 1fa: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1fe: 48 85 ff                      testq   %rdi, %rdi
// 201: 0f 84 da 00 00 00             je      0x2e1 <_JIT_ENTRY+0x2e1>
// 207: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000209:  R_X86_64_64  _Py_NoneStruct
// 211: 4c 39 f7                      cmpq    %r14, %rdi
// 214: 74 10                         je      0x226 <_JIT_ENTRY+0x226>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  PyErr_SetHandledException
// 220: ff d0                         callq   *%rax
// 222: 4c 8b 34 24                   movq    (%rsp), %r14
// 226: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 22b: 49 89 47 f0                   movq    %rax, -0x10(%r15)
// 22f: 4d 89 77 f8                   movq    %r14, -0x8(%r15)
// 233: 48 8b 03                      movq    (%rbx), %rax
// 236: 48 8b 40 20                   movq    0x20(%rax), %rax
// 23a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023c:  R_X86_64_64  _JIT_OPARG
// 244: 0f b7 c9                      movzwl  %cx, %ecx
// 247: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  PyObject_DelAttr
// 256: 4c 89 f7                      movq    %r14, %rdi
// 259: ff d0                         callq   *%rax
// 25b: 89 c5                         movl    %eax, %ebp
// 25d: 49 8b 06                      movq    (%r14), %rax
// 260: 48 85 c0                      testq   %rax, %rax
// 263: 7f 21                         jg      0x286 <_JIT_ENTRY+0x286>
// 265: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000267:  R_X86_64_64  .rodata.str1.1
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _Py_NegativeRefcount
// 279: be d2 03 00 00                movl    $0x3d2, %esi            # imm = 0x3D2
// 27e: 4c 89 f2                      movq    %r14, %rdx
// 281: ff d0                         callq   *%rax
// 283: 49 8b 06                      movq    (%r14), %rax
// 286: 85 c0                         testl   %eax, %eax
// 288: 78 11                         js      0x29b <_JIT_ENTRY+0x29b>
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 294: ff d0                         callq   *%rax
// 296: 49 ff 0e                      decq    (%r14)
// 299: 74 69                         je      0x304 <_JIT_ENTRY+0x304>
// 29b: 85 ed                         testl   %ebp, %ebp
// 29d: 75 45                         jne     0x2e4 <_JIT_ENTRY+0x2e4>
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _JIT_CONTINUE
// 2a9: 48 89 df                      movq    %rbx, %rdi
// 2ac: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 2b1: 4c 89 e2                      movq    %r12, %rdx
// 2b4: 48 83 c4 18                   addq    $0x18, %rsp
// 2b8: 5b                            popq    %rbx
// 2b9: 41 5c                         popq    %r12
// 2bb: 41 5d                         popq    %r13
// 2bd: 41 5e                         popq    %r14
// 2bf: 41 5f                         popq    %r15
// 2c1: 5d                            popq    %rbp
// 2c2: ff e0                         jmpq    *%rax
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  _Py_Dealloc
// 2ce: 4c 89 ef                      movq    %r13, %rdi
// 2d1: ff d0                         callq   *%rax
// 2d3: 45 85 f6                      testl   %r14d, %r14d
// 2d6: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 2db: 0f 89 19 ff ff ff             jns     0x1fa <_JIT_ENTRY+0x1fa>
// 2e1: 4d 89 f7                      movq    %r14, %r15
// 2e4: 49 29 df                      subq    %rbx, %r15
// 2e7: 49 83 c7 b0                   addq    $-0x50, %r15
// 2eb: 49 c1 ef 03                   shrq    $0x3, %r15
// 2ef: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2f3: 31 c0                         xorl    %eax, %eax
// 2f5: 48 83 c4 18                   addq    $0x18, %rsp
// 2f9: 5b                            popq    %rbx
// 2fa: 41 5c                         popq    %r12
// 2fc: 41 5d                         popq    %r13
// 2fe: 41 5e                         popq    %r14
// 300: 41 5f                         popq    %r15
// 302: 5d                            popq    %rbp
// 303: c3                            retq
// 304: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000306:  R_X86_64_64  _Py_Dealloc
// 30e: 4c 89 f7                      movq    %r14, %rdi
// 311: ff d0                         callq   *%rax
// 313: 85 ed                         testl   %ebp, %ebp
// 315: 75 cd                         jne     0x2e4 <_JIT_ENTRY+0x2e4>
// 317: eb 86                         jmp     0x29f <_JIT_ENTRY+0x29f>
// 319: 
static const unsigned char _CHECK_EG_MATCHplus_DELETE_ATTR_code_body[794] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8d, 0x76, 0xf8, 0x48, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x42, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0xa1, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x77, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x61, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0x4d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xd8, 0x00, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x0f, 0x88, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xda, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xf7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x34, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x89, 0x47, 0xf0, 0x4d, 0x89, 0x77, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd2, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x69, 0x85, 0xed, 0x75, 0x45, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x45, 0x85, 0xf6, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x0f, 0x89, 0x19, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb0, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xed, 0x75, 0xcd, 0xeb, 0x86};
static const Hole _CHECK_EG_MATCHplus_DELETE_ATTR_code_holes[28] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelAttr, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x306, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_DELETE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_DELETE_ATTR_data_holes[1];

// _CHECK_EG_MATCHplus_DELETE_DEREF
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_DELETE_DEREF.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 88 01 00 00             je      0x298 <_JIT_ENTRY+0x298>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 97 01 00 00             jle     0x2b4 <_JIT_ENTRY+0x2b4>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 b5 01 00 00             jns     0x2da <_JIT_ENTRY+0x2da>
// 125: e9 d1 01 00 00                jmp     0x2fb <_JIT_ENTRY+0x2fb>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 dd 00 00 00             je      0x25b <_JIT_ENTRY+0x25b>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 75 01 00 00             js      0x2fb <_JIT_ENTRY+0x2fb>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 67 01 00 00             je      0x2fb <_JIT_ENTRY+0x2fb>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 48 39 c7                      cmpq    %rax, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1b4: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b9: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1bd: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _JIT_OPARG
// 1cb: 0f b7 c0                      movzwl  %ax, %eax
// 1ce: 49 8b 44 c6 48                movq    0x48(%r14,%rax,8), %rax
// 1d3: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 1d7: 4d 85 e4                      testq   %r12, %r12
// 1da: 0f 84 97 00 00 00             je      0x277 <_JIT_ENTRY+0x277>
// 1e0: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 1e8: 49 8b 04 24                   movq    (%r12), %rax
// 1ec: 48 85 c0                      testq   %rax, %rax
// 1ef: 7f 22                         jg      0x213 <_JIT_ENTRY+0x213>
// 1f1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f3:  R_X86_64_64  .rodata.str1.1
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_NegativeRefcount
// 205: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 20a: 4c 89 e2                      movq    %r12, %rdx
// 20d: ff d0                         callq   *%rax
// 20f: 49 8b 04 24                   movq    (%r12), %rax
// 213: 85 c0                         testl   %eax, %eax
// 215: 78 21                         js      0x238 <_JIT_ENTRY+0x238>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 221: ff d0                         callq   *%rax
// 223: 49 ff 0c 24                   decq    (%r12)
// 227: 75 0f                         jne     0x238 <_JIT_ENTRY+0x238>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_Dealloc
// 233: 4c 89 e7                      movq    %r12, %rdi
// 236: ff d0                         callq   *%rax
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _JIT_CONTINUE
// 242: 4c 89 f7                      movq    %r14, %rdi
// 245: 48 89 de                      movq    %rbx, %rsi
// 248: 4c 89 fa                      movq    %r15, %rdx
// 24b: 48 83 c4 18                   addq    $0x18, %rsp
// 24f: 5b                            popq    %rbx
// 250: 41 5c                         popq    %r12
// 252: 41 5d                         popq    %r13
// 254: 41 5e                         popq    %r14
// 256: 41 5f                         popq    %r15
// 258: 5d                            popq    %rbp
// 259: ff e0                         jmpq    *%rax
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_Dealloc
// 265: 4c 89 e7                      movq    %r12, %rdi
// 268: ff d0                         callq   *%rax
// 26a: 85 ed                         testl   %ebp, %ebp
// 26c: 0f 89 14 ff ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 272: e9 84 00 00 00                jmp     0x2fb <_JIT_ENTRY+0x2fb>
// 277: 49 8b 36                      movq    (%r14), %rsi
// 27a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027c:  R_X86_64_64  _JIT_OPARG
// 284: 0f b7 d0                      movzwl  %ax, %edx
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _PyEval_FormatExcUnbound
// 291: 4c 89 ff                      movq    %r15, %rdi
// 294: ff d0                         callq   *%rax
// 296: eb 67                         jmp     0x2ff <_JIT_ENTRY+0x2ff>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_Dealloc
// 2a2: 4c 89 ef                      movq    %r13, %rdi
// 2a5: ff d0                         callq   *%rax
// 2a7: 49 8b 04 24                   movq    (%r12), %rax
// 2ab: 48 85 c0                      testq   %rax, %rax
// 2ae: 0f 8f 69 fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 2b4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b6:  R_X86_64_64  .rodata.str1.1
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_NegativeRefcount
// 2c8: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2cd: 4c 89 e2                      movq    %r12, %rdx
// 2d0: ff d0                         callq   *%rax
// 2d2: 49 8b 04 24                   movq    (%r12), %rax
// 2d6: 85 c0                         testl   %eax, %eax
// 2d8: 78 21                         js      0x2fb <_JIT_ENTRY+0x2fb>
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e4: ff d0                         callq   *%rax
// 2e6: 49 ff 0c 24                   decq    (%r12)
// 2ea: 75 0f                         jne     0x2fb <_JIT_ENTRY+0x2fb>
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _Py_Dealloc
// 2f6: 4c 89 e7                      movq    %r12, %rdi
// 2f9: ff d0                         callq   *%rax
// 2fb: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2ff: 4c 29 f3                      subq    %r14, %rbx
// 302: 48 83 c3 b8                   addq    $-0x48, %rbx
// 306: 48 c1 eb 03                   shrq    $0x3, %rbx
// 30a: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 30e: 31 c0                         xorl    %eax, %eax
// 310: 48 83 c4 18                   addq    $0x18, %rsp
// 314: 5b                            popq    %rbx
// 315: 41 5c                         popq    %r12
// 317: 41 5d                         popq    %r13
// 319: 41 5e                         popq    %r14
// 31b: 41 5f                         popq    %r15
// 31d: 5d                            popq    %rbp
// 31e: c3                            retq
// 31f: 
static const unsigned char _CHECK_EG_MATCHplus_DELETE_DEREF_code_body[800] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x88, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x97, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xb5, 0x01, 0x00, 0x00, 0xe9, 0xd1, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xdd, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x75, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x67, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x44, 0xc6, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x97, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x14, 0xff, 0xff, 0xff, 0xe9, 0x84, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x67, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x69, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_DELETE_DEREF_code_holes[29] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_DELETE_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_DELETE_DEREF_data_holes[1];

// _CHECK_EG_MATCHplus_DELETE_FAST
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_DELETE_FAST.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 c0 01 00 00             je      0x2d0 <_JIT_ENTRY+0x2d0>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e cf 01 00 00             jle     0x2ec <_JIT_ENTRY+0x2ec>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 ed 01 00 00             jns     0x312 <_JIT_ENTRY+0x312>
// 125: e9 09 02 00 00                jmp     0x333 <_JIT_ENTRY+0x333>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 e7 00 00 00             je      0x265 <_JIT_ENTRY+0x265>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 ad 01 00 00             js      0x333 <_JIT_ENTRY+0x333>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 9f 01 00 00             je      0x333 <_JIT_ENTRY+0x333>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 48 39 c7                      cmpq    %rax, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1b4: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b9: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1bd: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _JIT_OPARG
// 1cb: 0f b7 c0                      movzwl  %ax, %eax
// 1ce: 4d 8b 64 c6 48                movq    0x48(%r14,%rax,8), %r12
// 1d3: 4d 85 e4                      testq   %r12, %r12
// 1d6: 0f 84 a5 00 00 00             je      0x281 <_JIT_ENTRY+0x281>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_OPARG
// 1e6: 0f b7 c0                      movzwl  %ax, %eax
// 1e9: 49 c7 44 c6 48 00 00 00 00    movq    $0x0, 0x48(%r14,%rax,8)
// 1f2: 49 8b 04 24                   movq    (%r12), %rax
// 1f6: 48 85 c0                      testq   %rax, %rax
// 1f9: 7f 22                         jg      0x21d <_JIT_ENTRY+0x21d>
// 1fb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fd:  R_X86_64_64  .rodata.str1.1+0x83
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_NegativeRefcount
// 20f: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 214: 4c 89 e2                      movq    %r12, %rdx
// 217: ff d0                         callq   *%rax
// 219: 49 8b 04 24                   movq    (%r12), %rax
// 21d: 85 c0                         testl   %eax, %eax
// 21f: 78 21                         js      0x242 <_JIT_ENTRY+0x242>
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22b: ff d0                         callq   *%rax
// 22d: 49 ff 0c 24                   decq    (%r12)
// 231: 75 0f                         jne     0x242 <_JIT_ENTRY+0x242>
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_Dealloc
// 23d: 4c 89 e7                      movq    %r12, %rdi
// 240: ff d0                         callq   *%rax
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _JIT_CONTINUE
// 24c: 4c 89 f7                      movq    %r14, %rdi
// 24f: 48 89 de                      movq    %rbx, %rsi
// 252: 4c 89 fa                      movq    %r15, %rdx
// 255: 48 83 c4 18                   addq    $0x18, %rsp
// 259: 5b                            popq    %rbx
// 25a: 41 5c                         popq    %r12
// 25c: 41 5d                         popq    %r13
// 25e: 41 5e                         popq    %r14
// 260: 41 5f                         popq    %r15
// 262: 5d                            popq    %rbp
// 263: ff e0                         jmpq    *%rax
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_Dealloc
// 26f: 4c 89 e7                      movq    %r12, %rdi
// 272: ff d0                         callq   *%rax
// 274: 85 ed                         testl   %ebp, %ebp
// 276: 0f 89 0a ff ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 27c: e9 b2 00 00 00                jmp     0x333 <_JIT_ENTRY+0x333>
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  PyExc_UnboundLocalError
// 28b: 4c 8b 20                      movq    (%rax), %r12
// 28e: 49 8b 06                      movq    (%r14), %rax
// 291: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 295: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000297:  R_X86_64_64  _JIT_OPARG
// 29f: 0f b7 f0                      movzwl  %ax, %esi
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  PyTuple_GetItem
// 2ac: ff d0                         callq   *%rax
// 2ae: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002b0:  R_X86_64_64  .rodata.str1.1+0x39
// 2b8: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002ba:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 2c2: 4c 89 ff                      movq    %r15, %rdi
// 2c5: 4c 89 e6                      movq    %r12, %rsi
// 2c8: 48 89 c1                      movq    %rax, %rcx
// 2cb: 41 ff d0                      callq   *%r8
// 2ce: eb 67                         jmp     0x337 <_JIT_ENTRY+0x337>
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _Py_Dealloc
// 2da: 4c 89 ef                      movq    %r13, %rdi
// 2dd: ff d0                         callq   *%rax
// 2df: 49 8b 04 24                   movq    (%r12), %rax
// 2e3: 48 85 c0                      testq   %rax, %rax
// 2e6: 0f 8f 31 fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 2ec: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ee:  R_X86_64_64  .rodata.str1.1
// 2f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f8:  R_X86_64_64  _Py_NegativeRefcount
// 300: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 305: 4c 89 e2                      movq    %r12, %rdx
// 308: ff d0                         callq   *%rax
// 30a: 49 8b 04 24                   movq    (%r12), %rax
// 30e: 85 c0                         testl   %eax, %eax
// 310: 78 21                         js      0x333 <_JIT_ENTRY+0x333>
// 312: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000314:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 31c: ff d0                         callq   *%rax
// 31e: 49 ff 0c 24                   decq    (%r12)
// 322: 75 0f                         jne     0x333 <_JIT_ENTRY+0x333>
// 324: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000326:  R_X86_64_64  _Py_Dealloc
// 32e: 4c 89 e7                      movq    %r12, %rdi
// 331: ff d0                         callq   *%rax
// 333: 48 83 c3 f0                   addq    $-0x10, %rbx
// 337: 4c 29 f3                      subq    %r14, %rbx
// 33a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 33e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 342: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 346: 31 c0                         xorl    %eax, %eax
// 348: 48 83 c4 18                   addq    $0x18, %rsp
// 34c: 5b                            popq    %rbx
// 34d: 41 5c                         popq    %r12
// 34f: 41 5d                         popq    %r13
// 351: 41 5e                         popq    %r14
// 353: 41 5f                         popq    %r15
// 355: 5d                            popq    %rbp
// 356: c3                            retq
// 357: 
static const unsigned char _CHECK_EG_MATCHplus_DELETE_FAST_code_body[856] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc0, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xcf, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xed, 0x01, 0x00, 0x00, 0xe9, 0x09, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xad, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x9f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x64, 0xc6, 0x48, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0xc7, 0x44, 0xc6, 0x48, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x0a, 0xff, 0xff, 0xff, 0xe9, 0xb2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x20, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0xeb, 0x67, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x31, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_DELETE_FAST_code_holes[33] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x83},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x314, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x326, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot access local variable '%s' where it is not associated with a value\x00/home/jglass/Documents/cpython/Include/object.h\x00"
// b3: 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_DELETE_FAST_data_body[185] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_DELETE_FAST_data_holes[1];

// _CHECK_EG_MATCHplus_DELETE_GLOBAL
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_DELETE_GLOBAL.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 72 01 00 00             je      0x282 <_JIT_ENTRY+0x282>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 81 01 00 00             jle     0x29e <_JIT_ENTRY+0x29e>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 9f 01 00 00             jns     0x2c4 <_JIT_ENTRY+0x2c4>
// 125: e9 bb 01 00 00                jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 c5 00 00 00             je      0x243 <_JIT_ENTRY+0x243>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 5f 01 00 00             js      0x2e5 <_JIT_ENTRY+0x2e5>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 51 01 00 00             je      0x2e5 <_JIT_ENTRY+0x2e5>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 48 39 c7                      cmpq    %rax, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1b4: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b9: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1bd: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1c1: 49 8b 06                      movq    (%r14), %rax
// 1c4: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 1c8: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1cc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ce:  R_X86_64_64  _JIT_OPARG
// 1d6: 0f b7 c9                      movzwl  %cx, %ecx
// 1d9: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  PyDict_DelItem
// 1e8: 4c 89 e6                      movq    %r12, %rsi
// 1eb: ff d0                         callq   *%rax
// 1ed: 85 c0                         testl   %eax, %eax
// 1ef: 74 6e                         je      0x25f <_JIT_ENTRY+0x25f>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  PyExc_KeyError
// 1fb: 48 8b 30                      movq    (%rax), %rsi
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _PyErr_ExceptionMatches
// 208: 4c 89 ff                      movq    %r15, %rdi
// 20b: ff d0                         callq   *%rax
// 20d: 85 c0                         testl   %eax, %eax
// 20f: 0f 84 d4 00 00 00             je      0x2e9 <_JIT_ENTRY+0x2e9>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  PyExc_NameError
// 21f: 48 8b 30                      movq    (%rax), %rsi
// 222: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000224:  R_X86_64_64  .rodata.str1.1+0x39
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 236: 4c 89 ff                      movq    %r15, %rdi
// 239: 4c 89 e1                      movq    %r12, %rcx
// 23c: ff d0                         callq   *%rax
// 23e: e9 a6 00 00 00                jmp     0x2e9 <_JIT_ENTRY+0x2e9>
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _Py_Dealloc
// 24d: 4c 89 e7                      movq    %r12, %rdi
// 250: ff d0                         callq   *%rax
// 252: 85 ed                         testl   %ebp, %ebp
// 254: 0f 89 2c ff ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 25a: e9 86 00 00 00                jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _JIT_CONTINUE
// 269: 4c 89 f7                      movq    %r14, %rdi
// 26c: 48 89 de                      movq    %rbx, %rsi
// 26f: 4c 89 fa                      movq    %r15, %rdx
// 272: 48 83 c4 18                   addq    $0x18, %rsp
// 276: 5b                            popq    %rbx
// 277: 41 5c                         popq    %r12
// 279: 41 5d                         popq    %r13
// 27b: 41 5e                         popq    %r14
// 27d: 41 5f                         popq    %r15
// 27f: 5d                            popq    %rbp
// 280: ff e0                         jmpq    *%rax
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_Dealloc
// 28c: 4c 89 ef                      movq    %r13, %rdi
// 28f: ff d0                         callq   *%rax
// 291: 49 8b 04 24                   movq    (%r12), %rax
// 295: 48 85 c0                      testq   %rax, %rax
// 298: 0f 8f 7f fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 29e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a0:  R_X86_64_64  .rodata.str1.1
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _Py_NegativeRefcount
// 2b2: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2b7: 4c 89 e2                      movq    %r12, %rdx
// 2ba: ff d0                         callq   *%rax
// 2bc: 49 8b 04 24                   movq    (%r12), %rax
// 2c0: 85 c0                         testl   %eax, %eax
// 2c2: 78 21                         js      0x2e5 <_JIT_ENTRY+0x2e5>
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ce: ff d0                         callq   *%rax
// 2d0: 49 ff 0c 24                   decq    (%r12)
// 2d4: 75 0f                         jne     0x2e5 <_JIT_ENTRY+0x2e5>
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  _Py_Dealloc
// 2e0: 4c 89 e7                      movq    %r12, %rdi
// 2e3: ff d0                         callq   *%rax
// 2e5: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2e9: 4c 29 f3                      subq    %r14, %rbx
// 2ec: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2f0: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2f4: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2f8: 31 c0                         xorl    %eax, %eax
// 2fa: 48 83 c4 18                   addq    $0x18, %rsp
// 2fe: 5b                            popq    %rbx
// 2ff: 41 5c                         popq    %r12
// 301: 41 5d                         popq    %r13
// 303: 41 5e                         popq    %r14
// 305: 41 5f                         popq    %r15
// 307: 5d                            popq    %rbp
// 308: c3                            retq
// 309: 
static const unsigned char _CHECK_EG_MATCHplus_DELETE_GLOBAL_code_body[778] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x72, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x81, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x9f, 0x01, 0x00, 0x00, 0xe9, 0xbb, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xc5, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x5f, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x51, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x49, 0x8b, 0x06, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x6e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x2c, 0xff, 0xff, 0xff, 0xe9, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x7f, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_DELETE_GLOBAL_code_holes[29] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_DelItem, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_KeyError, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _CHECK_EG_MATCHplus_DELETE_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_DELETE_GLOBAL_data_holes[1];

// _CHECK_EG_MATCHplus_DELETE_NAME
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_DELETE_NAME.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 62 01 00 00             je      0x272 <_JIT_ENTRY+0x272>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 71 01 00 00             jle     0x28e <_JIT_ENTRY+0x28e>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 8f 01 00 00             jns     0x2b4 <_JIT_ENTRY+0x2b4>
// 125: e9 ab 01 00 00                jmp     0x2d5 <_JIT_ENTRY+0x2d5>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 aa 00 00 00             je      0x228 <_JIT_ENTRY+0x228>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 4f 01 00 00             js      0x2d5 <_JIT_ENTRY+0x2d5>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 41 01 00 00             je      0x2d5 <_JIT_ENTRY+0x2d5>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 48 39 c7                      cmpq    %rax, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1b4: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b9: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1bd: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1c1: 49 8b 06                      movq    (%r14), %rax
// 1c4: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// 1c8: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1cc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ce:  R_X86_64_64  _JIT_OPARG
// 1d6: 0f b7 c9                      movzwl  %cx, %ecx
// 1d9: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 1de: 48 85 ff                      testq   %rdi, %rdi
// 1e1: 74 61                         je      0x244 <_JIT_ENTRY+0x244>
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  PyObject_DelItem
// 1ed: 4c 89 e6                      movq    %r12, %rsi
// 1f0: ff d0                         callq   *%rax
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 0f 84 ff 00 00 00             je      0x2f9 <_JIT_ENTRY+0x2f9>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  PyExc_NameError
// 204: 48 8b 30                      movq    (%rax), %rsi
// 207: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000209:  R_X86_64_64  .rodata.str1.1+0x54
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 21b: 4c 89 ff                      movq    %r15, %rdi
// 21e: 4c 89 e1                      movq    %r12, %rcx
// 221: ff d0                         callq   *%rax
// 223: e9 b1 00 00 00                jmp     0x2d9 <_JIT_ENTRY+0x2d9>
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _Py_Dealloc
// 232: 4c 89 e7                      movq    %r12, %rdi
// 235: ff d0                         callq   *%rax
// 237: 85 ed                         testl   %ebp, %ebp
// 239: 0f 89 47 ff ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 23f: e9 91 00 00 00                jmp     0x2d5 <_JIT_ENTRY+0x2d5>
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  PyExc_SystemError
// 24e: 48 8b 30                      movq    (%rax), %rsi
// 251: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000253:  R_X86_64_64  .rodata.str1.1+0x39
// 25b: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000025d:  R_X86_64_64  _PyErr_Format
// 265: 4c 89 ff                      movq    %r15, %rdi
// 268: 4c 89 e1                      movq    %r12, %rcx
// 26b: 31 c0                         xorl    %eax, %eax
// 26d: 41 ff d0                      callq   *%r8
// 270: eb 67                         jmp     0x2d9 <_JIT_ENTRY+0x2d9>
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_Dealloc
// 27c: 4c 89 ef                      movq    %r13, %rdi
// 27f: ff d0                         callq   *%rax
// 281: 49 8b 04 24                   movq    (%r12), %rax
// 285: 48 85 c0                      testq   %rax, %rax
// 288: 0f 8f 8f fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 28e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000290:  R_X86_64_64  .rodata.str1.1
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_NegativeRefcount
// 2a2: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2a7: 4c 89 e2                      movq    %r12, %rdx
// 2aa: ff d0                         callq   *%rax
// 2ac: 49 8b 04 24                   movq    (%r12), %rax
// 2b0: 85 c0                         testl   %eax, %eax
// 2b2: 78 21                         js      0x2d5 <_JIT_ENTRY+0x2d5>
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2be: ff d0                         callq   *%rax
// 2c0: 49 ff 0c 24                   decq    (%r12)
// 2c4: 75 0f                         jne     0x2d5 <_JIT_ENTRY+0x2d5>
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _Py_Dealloc
// 2d0: 4c 89 e7                      movq    %r12, %rdi
// 2d3: ff d0                         callq   *%rax
// 2d5: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2d9: 4c 29 f3                      subq    %r14, %rbx
// 2dc: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2e0: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2e4: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2e8: 31 c0                         xorl    %eax, %eax
// 2ea: 48 83 c4 18                   addq    $0x18, %rsp
// 2ee: 5b                            popq    %rbx
// 2ef: 41 5c                         popq    %r12
// 2f1: 41 5d                         popq    %r13
// 2f3: 41 5e                         popq    %r14
// 2f5: 41 5f                         popq    %r15
// 2f7: 5d                            popq    %rbp
// 2f8: c3                            retq
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _JIT_CONTINUE
// 303: 4c 89 f7                      movq    %r14, %rdi
// 306: 48 89 de                      movq    %rbx, %rsi
// 309: 4c 89 fa                      movq    %r15, %rdx
// 30c: 48 83 c4 18                   addq    $0x18, %rsp
// 310: 5b                            popq    %rbx
// 311: 41 5c                         popq    %r12
// 313: 41 5d                         popq    %r13
// 315: 41 5e                         popq    %r14
// 317: 41 5f                         popq    %r15
// 319: 5d                            popq    %rbp
// 31a: ff e0                         jmpq    *%rax
// 31c: 
static const unsigned char _CHECK_EG_MATCHplus_DELETE_NAME_code_body[797] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x62, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x71, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x8f, 0x01, 0x00, 0x00, 0xe9, 0xab, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xaa, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x4f, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x41, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x49, 0x8b, 0x06, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0x85, 0xff, 0x74, 0x61, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xff, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0xb1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x47, 0xff, 0xff, 0xff, 0xe9, 0x91, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xeb, 0x67, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x8f, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_DELETE_NAME_code_holes[30] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x54},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals when deleting %R\x00name '%.200s' is not defined\x00"
// 71: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_DELETE_NAME_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_DELETE_NAME_data_holes[1];

// _CHECK_EG_MATCHplus_DELETE_SUBSCR
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_DELETE_SUBSCR.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 8b 6e f0                   movq    -0x10(%rsi), %rbp
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 4c 8d 76 f0                   leaq    -0x10(%rsi), %r14
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 42                         js      0x7b <_JIT_ENTRY+0x7b>
// 39: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 48 89 ef                      movq    %rbp, %rdi
// 64: 4c 89 e6                      movq    %r12, %rsi
// 67: ff d0                         callq   *%rax
// 69: 41 89 c7                      movl    %eax, %r15d
// 6c: 48 8b 45 00                   movq    (%rbp), %rax
// 70: 48 85 c0                      testq   %rax, %rax
// 73: 7e 1c                         jle     0x91 <_JIT_ENTRY+0x91>
// 75: 85 c0                         testl   %eax, %eax
// 77: 79 3e                         jns     0xb7 <_JIT_ENTRY+0xb7>
// 79: eb 52                         jmp     0xcd <_JIT_ENTRY+0xcd>
// 7b: 48 8b 45 00                   movq    (%rbp), %rax
// 7f: 48 85 c0                      testq   %rax, %rax
// 82: 7e 63                         jle     0xe7 <_JIT_ENTRY+0xe7>
// 84: 85 c0                         testl   %eax, %eax
// 86: 0f 89 81 00 00 00             jns     0x10d <_JIT_ENTRY+0x10d>
// 8c: e9 9d 00 00 00                jmp     0x12e <_JIT_ENTRY+0x12e>
// 91: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000093:  R_X86_64_64  .rodata.str1.1
// 9b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009d:  R_X86_64_64  _Py_NegativeRefcount
// a5: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// aa: 48 89 ea                      movq    %rbp, %rdx
// ad: ff d0                         callq   *%rax
// af: 48 8b 45 00                   movq    (%rbp), %rax
// b3: 85 c0                         testl   %eax, %eax
// b5: 78 16                         js      0xcd <_JIT_ENTRY+0xcd>
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c1: ff d0                         callq   *%rax
// c3: 48 ff 4d 00                   decq    (%rbp)
// c7: 0f 84 c7 00 00 00             je      0x194 <_JIT_ENTRY+0x194>
// cd: 49 8b 04 24                   movq    (%r12), %rax
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 0f 8e d6 00 00 00             jle     0x1b0 <_JIT_ENTRY+0x1b0>
// da: 85 c0                         testl   %eax, %eax
// dc: 0f 89 f4 00 00 00             jns     0x1d6 <_JIT_ENTRY+0x1d6>
// e2: e9 05 01 00 00                jmp     0x1ec <_JIT_ENTRY+0x1ec>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 49 8b 04 24                   movq    (%r12), %rax
// 132: 48 85 c0                      testq   %rax, %rax
// 135: 7e 09                         jle     0x140 <_JIT_ENTRY+0x140>
// 137: 85 c0                         testl   %eax, %eax
// 139: 79 2f                         jns     0x16a <_JIT_ENTRY+0x16a>
// 13b: e9 e1 01 00 00                jmp     0x321 <_JIT_ENTRY+0x321>
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 159: 4c 89 e2                      movq    %r12, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 04 24                   movq    (%r12), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 0f 88 b7 01 00 00             js      0x321 <_JIT_ENTRY+0x321>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 0c 24                   decq    (%r12)
// 17a: 0f 85 a1 01 00 00             jne     0x321 <_JIT_ENTRY+0x321>
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: 4c 89 e7                      movq    %r12, %rdi
// 18d: ff d0                         callq   *%rax
// 18f: e9 8d 01 00 00                jmp     0x321 <_JIT_ENTRY+0x321>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_Dealloc
// 19e: 48 89 ef                      movq    %rbp, %rdi
// 1a1: ff d0                         callq   *%rax
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 0f 8f 2a ff ff ff             jg      0xda <_JIT_ENTRY+0xda>
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_NegativeRefcount
// 1c4: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c9: 4c 89 e2                      movq    %r12, %rdx
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 16                         js      0x1ec <_JIT_ENTRY+0x1ec>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 ff 0c 24                   decq    (%r12)
// 1e6: 0f 84 08 01 00 00             je      0x2f4 <_JIT_ENTRY+0x2f4>
// 1ec: 45 85 ff                      testl   %r15d, %r15d
// 1ef: 0f 88 2c 01 00 00             js      0x321 <_JIT_ENTRY+0x321>
// 1f5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f9: 48 85 ff                      testq   %rdi, %rdi
// 1fc: 0f 84 1f 01 00 00             je      0x321 <_JIT_ENTRY+0x321>
// 202: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000204:  R_X86_64_64  _Py_NoneStruct
// 20c: 4c 39 e7                      cmpq    %r12, %rdi
// 20f: 74 10                         je      0x221 <_JIT_ENTRY+0x221>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  PyErr_SetHandledException
// 21b: ff d0                         callq   *%rax
// 21d: 4c 8b 24 24                   movq    (%rsp), %r12
// 221: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 226: 4d 89 7d f0                   movq    %r15, -0x10(%r13)
// 22a: 4d 89 65 f8                   movq    %r12, -0x8(%r13)
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  PyObject_DelItem
// 238: 4c 89 ff                      movq    %r15, %rdi
// 23b: 4c 89 e6                      movq    %r12, %rsi
// 23e: ff d0                         callq   *%rax
// 240: 89 c5                         movl    %eax, %ebp
// 242: 49 8b 07                      movq    (%r15), %rax
// 245: 48 85 c0                      testq   %rax, %rax
// 248: 7f 21                         jg      0x26b <_JIT_ENTRY+0x26b>
// 24a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024c:  R_X86_64_64  .rodata.str1.1
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _Py_NegativeRefcount
// 25e: be 70 02 00 00                movl    $0x270, %esi            # imm = 0x270
// 263: 4c 89 fa                      movq    %r15, %rdx
// 266: ff d0                         callq   *%rax
// 268: 49 8b 07                      movq    (%r15), %rax
// 26b: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000026d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 275: 85 c0                         testl   %eax, %eax
// 277: 78 17                         js      0x290 <_JIT_ENTRY+0x290>
// 279: 41 ff d5                      callq   *%r13
// 27c: 49 ff 0f                      decq    (%r15)
// 27f: 75 0f                         jne     0x290 <_JIT_ENTRY+0x290>
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  _Py_Dealloc
// 28b: 4c 89 ff                      movq    %r15, %rdi
// 28e: ff d0                         callq   *%rax
// 290: 49 8b 04 24                   movq    (%r12), %rax
// 294: 48 85 c0                      testq   %rax, %rax
// 297: 7f 22                         jg      0x2bb <_JIT_ENTRY+0x2bb>
// 299: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029b:  R_X86_64_64  .rodata.str1.1
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _Py_NegativeRefcount
// 2ad: be 71 02 00 00                movl    $0x271, %esi            # imm = 0x271
// 2b2: 4c 89 e2                      movq    %r12, %rdx
// 2b5: ff d0                         callq   *%rax
// 2b7: 49 8b 04 24                   movq    (%r12), %rax
// 2bb: 85 c0                         testl   %eax, %eax
// 2bd: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 2c2: 78 09                         js      0x2cd <_JIT_ENTRY+0x2cd>
// 2c4: 41 ff d5                      callq   *%r13
// 2c7: 49 ff 0c 24                   decq    (%r12)
// 2cb: 74 41                         je      0x30e <_JIT_ENTRY+0x30e>
// 2cd: 85 ed                         testl   %ebp, %ebp
// 2cf: 75 50                         jne     0x321 <_JIT_ENTRY+0x321>
// 2d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d3:  R_X86_64_64  _JIT_CONTINUE
// 2db: 48 89 df                      movq    %rbx, %rdi
// 2de: 4c 89 f6                      movq    %r14, %rsi
// 2e1: 4c 89 fa                      movq    %r15, %rdx
// 2e4: 48 83 c4 18                   addq    $0x18, %rsp
// 2e8: 5b                            popq    %rbx
// 2e9: 41 5c                         popq    %r12
// 2eb: 41 5d                         popq    %r13
// 2ed: 41 5e                         popq    %r14
// 2ef: 41 5f                         popq    %r15
// 2f1: 5d                            popq    %rbp
// 2f2: ff e0                         jmpq    *%rax
// 2f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f6:  R_X86_64_64  _Py_Dealloc
// 2fe: 4c 89 e7                      movq    %r12, %rdi
// 301: ff d0                         callq   *%rax
// 303: 45 85 ff                      testl   %r15d, %r15d
// 306: 0f 89 e9 fe ff ff             jns     0x1f5 <_JIT_ENTRY+0x1f5>
// 30c: eb 13                         jmp     0x321 <_JIT_ENTRY+0x321>
// 30e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000310:  R_X86_64_64  _Py_Dealloc
// 318: 4c 89 e7                      movq    %r12, %rdi
// 31b: ff d0                         callq   *%rax
// 31d: 85 ed                         testl   %ebp, %ebp
// 31f: 74 b0                         je      0x2d1 <_JIT_ENTRY+0x2d1>
// 321: 49 29 de                      subq    %rbx, %r14
// 324: 49 83 c6 b8                   addq    $-0x48, %r14
// 328: 49 c1 ee 03                   shrq    $0x3, %r14
// 32c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 330: 31 c0                         xorl    %eax, %eax
// 332: 48 83 c4 18                   addq    $0x18, %rsp
// 336: 5b                            popq    %rbx
// 337: 41 5c                         popq    %r12
// 339: 41 5d                         popq    %r13
// 33b: 41 5e                         popq    %r14
// 33d: 41 5f                         popq    %r15
// 33f: 5d                            popq    %rbp
// 340: c3                            retq
// 341: 
static const unsigned char _CHECK_EG_MATCHplus_DELETE_SUBSCR_code_body[834] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8d, 0x76, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x42, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x41, 0x89, 0xc7, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0xe1, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xb7, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xa1, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x8d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x08, 0x01, 0x00, 0x00, 0x45, 0x85, 0xff, 0x0f, 0x88, 0x2c, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x1f, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4d, 0x89, 0x7d, 0xf0, 0x4d, 0x89, 0x65, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x70, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x09, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x41, 0x85, 0xed, 0x75, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x45, 0x85, 0xff, 0x0f, 0x89, 0xe9, 0xfe, 0xff, 0xff, 0xeb, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x74, 0xb0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_DELETE_SUBSCR_code_holes[30] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_DELETE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_DELETE_SUBSCR_data_holes[1];

// _CHECK_EG_MATCHplus_DICT_MERGE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_DICT_MERGE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8d 76 f8                   leaq    -0x8(%rsi), %r14
// 1b: 48 8b 6e f0                   movq    -0x10(%rsi), %rbp
// 1f: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 ee                      movq    %r13, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 43                         js      0x7c <_JIT_ENTRY+0x7c>
// 39: 48 89 1c 24                   movq    %rbx, (%rsp)
// 3d: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 46: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 5e: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 63: 48 89 ef                      movq    %rbp, %rdi
// 66: 4c 89 ee                      movq    %r13, %rsi
// 69: ff d0                         callq   *%rax
// 6b: 89 c3                         movl    %eax, %ebx
// 6d: 48 8b 45 00                   movq    (%rbp), %rax
// 71: 48 85 c0                      testq   %rax, %rax
// 74: 7e 18                         jle     0x8e <_JIT_ENTRY+0x8e>
// 76: 85 c0                         testl   %eax, %eax
// 78: 79 3a                         jns     0xb4 <_JIT_ENTRY+0xb4>
// 7a: eb 4a                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 7c: 48 8b 45 00                   movq    (%rbp), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 57                         jle     0xdc <_JIT_ENTRY+0xdc>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 79                         jns     0x102 <_JIT_ENTRY+0x102>
// 89: e9 8a 00 00 00                jmp     0x118 <_JIT_ENTRY+0x118>
// 8e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000090:  R_X86_64_64  .rodata.str1.1
// 98: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009a:  R_X86_64_64  _Py_NegativeRefcount
// a2: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a7: 48 89 ea                      movq    %rbp, %rdx
// aa: ff d0                         callq   *%rax
// ac: 48 8b 45 00                   movq    (%rbp), %rax
// b0: 85 c0                         testl   %eax, %eax
// b2: 78 12                         js      0xc6 <_JIT_ENTRY+0xc6>
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// be: ff d0                         callq   *%rax
// c0: 48 ff 4d 00                   decq    (%rbp)
// c4: 74 6c                         je      0x132 <_JIT_ENTRY+0x132>
// c6: 49 8b 45 00                   movq    (%r13), %rax
// ca: 48 85 c0                      testq   %rax, %rax
// cd: 7e 7b                         jle     0x14a <_JIT_ENTRY+0x14a>
// cf: 85 c0                         testl   %eax, %eax
// d1: 0f 89 99 00 00 00             jns     0x170 <_JIT_ENTRY+0x170>
// d7: e9 aa 00 00 00                jmp     0x186 <_JIT_ENTRY+0x186>
// dc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000de:  R_X86_64_64  .rodata.str1.1
// e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e8:  R_X86_64_64  _Py_NegativeRefcount
// f0: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f5: 48 89 ea                      movq    %rbp, %rdx
// f8: ff d0                         callq   *%rax
// fa: 48 8b 45 00                   movq    (%rbp), %rax
// fe: 85 c0                         testl   %eax, %eax
// 100: 78 16                         js      0x118 <_JIT_ENTRY+0x118>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10c: ff d0                         callq   *%rax
// 10e: 48 ff 4d 00                   decq    (%rbp)
// 112: 0f 84 fb 01 00 00             je      0x313 <_JIT_ENTRY+0x313>
// 118: 49 8b 45 00                   movq    (%r13), %rax
// 11c: 48 85 c0                      testq   %rax, %rax
// 11f: 0f 8e 0a 02 00 00             jle     0x32f <_JIT_ENTRY+0x32f>
// 125: 85 c0                         testl   %eax, %eax
// 127: 0f 89 28 02 00 00             jns     0x355 <_JIT_ENTRY+0x355>
// 12d: e9 44 02 00 00                jmp     0x376 <_JIT_ENTRY+0x376>
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _Py_Dealloc
// 13c: 48 89 ef                      movq    %rbp, %rdi
// 13f: ff d0                         callq   *%rax
// 141: 49 8b 45 00                   movq    (%r13), %rax
// 145: 48 85 c0                      testq   %rax, %rax
// 148: 7f 85                         jg      0xcf <_JIT_ENTRY+0xcf>
// 14a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014c:  R_X86_64_64  .rodata.str1.1
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _Py_NegativeRefcount
// 15e: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 163: 4c 89 ea                      movq    %r13, %rdx
// 166: ff d0                         callq   *%rax
// 168: 49 8b 45 00                   movq    (%r13), %rax
// 16c: 85 c0                         testl   %eax, %eax
// 16e: 78 16                         js      0x186 <_JIT_ENTRY+0x186>
// 170: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000172:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17a: ff d0                         callq   *%rax
// 17c: 49 ff 4d 00                   decq    (%r13)
// 180: 0f 84 ff 00 00 00             je      0x285 <_JIT_ENTRY+0x285>
// 186: 85 db                         testl   %ebx, %ebx
// 188: 48 8b 1c 24                   movq    (%rsp), %rbx
// 18c: 0f 88 e4 01 00 00             js      0x376 <_JIT_ENTRY+0x376>
// 192: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 197: 48 85 ff                      testq   %rdi, %rdi
// 19a: 0f 84 d6 01 00 00             je      0x376 <_JIT_ENTRY+0x376>
// 1a0: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001a2:  R_X86_64_64  _Py_NoneStruct
// 1aa: 4c 39 ef                      cmpq    %r13, %rdi
// 1ad: 74 11                         je      0x1c0 <_JIT_ENTRY+0x1c0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  PyErr_SetHandledException
// 1b9: ff d0                         callq   *%rax
// 1bb: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 1c0: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1c5: 49 89 44 24 f0                movq    %rax, -0x10(%r12)
// 1ca: 4d 89 6c 24 f8                movq    %r13, -0x8(%r12)
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _JIT_OPARG
// 1d9: 0f b7 c0                      movzwl  %ax, %eax
// 1dc: b9 fc ff ff ff                movl    $0xfffffffc, %ecx       # imm = 0xFFFFFFFC
// 1e1: 29 c1                         subl    %eax, %ecx
// 1e3: f7 d0                         notl    %eax
// 1e5: 48 98                         cltq
// 1e7: 49 8b 3c c4                   movq    (%r12,%rax,8), %rdi
// 1eb: 48 63 c1                      movslq  %ecx, %rax
// 1ee: 49 8b 1c c4                   movq    (%r12,%rax,8), %rbx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _PyDict_MergeEx
// 1fc: 4c 89 ee                      movq    %r13, %rsi
// 1ff: ba 02 00 00 00                movl    $0x2, %edx
// 204: ff d0                         callq   *%rax
// 206: 85 c0                         testl   %eax, %eax
// 208: 0f 88 97 00 00 00             js      0x2a5 <_JIT_ENTRY+0x2a5>
// 20e: 49 8b 45 00                   movq    (%r13), %rax
// 212: 48 85 c0                      testq   %rax, %rax
// 215: 7f 22                         jg      0x239 <_JIT_ENTRY+0x239>
// 217: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000219:  R_X86_64_64  .rodata.str1.1
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _Py_NegativeRefcount
// 22b: be d6 05 00 00                movl    $0x5d6, %esi            # imm = 0x5D6
// 230: 4c 89 ea                      movq    %r13, %rdx
// 233: ff d0                         callq   *%rax
// 235: 49 8b 45 00                   movq    (%r13), %rax
// 239: 85 c0                         testl   %eax, %eax
// 23b: 48 8b 1c 24                   movq    (%rsp), %rbx
// 23f: 78 21                         js      0x262 <_JIT_ENTRY+0x262>
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24b: ff d0                         callq   *%rax
// 24d: 49 ff 4d 00                   decq    (%r13)
// 251: 75 0f                         jne     0x262 <_JIT_ENTRY+0x262>
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  _Py_Dealloc
// 25d: 4c 89 ef                      movq    %r13, %rdi
// 260: ff d0                         callq   *%rax
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _JIT_CONTINUE
// 26c: 48 89 df                      movq    %rbx, %rdi
// 26f: 4c 89 f6                      movq    %r14, %rsi
// 272: 4c 89 fa                      movq    %r15, %rdx
// 275: 48 83 c4 18                   addq    $0x18, %rsp
// 279: 5b                            popq    %rbx
// 27a: 41 5c                         popq    %r12
// 27c: 41 5d                         popq    %r13
// 27e: 41 5e                         popq    %r14
// 280: 41 5f                         popq    %r15
// 282: 5d                            popq    %rbp
// 283: ff e0                         jmpq    *%rax
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _Py_Dealloc
// 28f: 4c 89 ef                      movq    %r13, %rdi
// 292: ff d0                         callq   *%rax
// 294: 85 db                         testl   %ebx, %ebx
// 296: 48 8b 1c 24                   movq    (%rsp), %rbx
// 29a: 0f 89 f2 fe ff ff             jns     0x192 <_JIT_ENTRY+0x192>
// 2a0: e9 d1 00 00 00                jmp     0x376 <_JIT_ENTRY+0x376>
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _PyEval_FormatKwargsError
// 2af: 4c 89 ff                      movq    %r15, %rdi
// 2b2: 48 89 de                      movq    %rbx, %rsi
// 2b5: 4c 89 ea                      movq    %r13, %rdx
// 2b8: ff d0                         callq   *%rax
// 2ba: 49 8b 45 00                   movq    (%r13), %rax
// 2be: 48 85 c0                      testq   %rax, %rax
// 2c1: 7f 22                         jg      0x2e5 <_JIT_ENTRY+0x2e5>
// 2c3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c5:  R_X86_64_64  .rodata.str1.1
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _Py_NegativeRefcount
// 2d7: be d3 05 00 00                movl    $0x5d3, %esi            # imm = 0x5D3
// 2dc: 4c 89 ea                      movq    %r13, %rdx
// 2df: ff d0                         callq   *%rax
// 2e1: 49 8b 45 00                   movq    (%r13), %rax
// 2e5: 85 c0                         testl   %eax, %eax
// 2e7: 48 8b 1c 24                   movq    (%rsp), %rbx
// 2eb: 78 21                         js      0x30e <_JIT_ENTRY+0x30e>
// 2ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ef:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f7: ff d0                         callq   *%rax
// 2f9: 49 ff 4d 00                   decq    (%r13)
// 2fd: 75 0f                         jne     0x30e <_JIT_ENTRY+0x30e>
// 2ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000301:  R_X86_64_64  _Py_Dealloc
// 309: 4c 89 ef                      movq    %r13, %rdi
// 30c: ff d0                         callq   *%rax
// 30e: 4d 89 e6                      movq    %r12, %r14
// 311: eb 63                         jmp     0x376 <_JIT_ENTRY+0x376>
// 313: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000315:  R_X86_64_64  _Py_Dealloc
// 31d: 48 89 ef                      movq    %rbp, %rdi
// 320: ff d0                         callq   *%rax
// 322: 49 8b 45 00                   movq    (%r13), %rax
// 326: 48 85 c0                      testq   %rax, %rax
// 329: 0f 8f f6 fd ff ff             jg      0x125 <_JIT_ENTRY+0x125>
// 32f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000331:  R_X86_64_64  .rodata.str1.1
// 339: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033b:  R_X86_64_64  _Py_NegativeRefcount
// 343: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 348: 4c 89 ea                      movq    %r13, %rdx
// 34b: ff d0                         callq   *%rax
// 34d: 49 8b 45 00                   movq    (%r13), %rax
// 351: 85 c0                         testl   %eax, %eax
// 353: 78 21                         js      0x376 <_JIT_ENTRY+0x376>
// 355: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000357:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 35f: ff d0                         callq   *%rax
// 361: 49 ff 4d 00                   decq    (%r13)
// 365: 75 0f                         jne     0x376 <_JIT_ENTRY+0x376>
// 367: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000369:  R_X86_64_64  _Py_Dealloc
// 371: 4c 89 ef                      movq    %r13, %rdi
// 374: ff d0                         callq   *%rax
// 376: 49 29 de                      subq    %rbx, %r14
// 379: 49 83 c6 b0                   addq    $-0x50, %r14
// 37d: 49 c1 ee 03                   shrq    $0x3, %r14
// 381: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 385: 31 c0                         xorl    %eax, %eax
// 387: 48 83 c4 18                   addq    $0x18, %rsp
// 38b: 5b                            popq    %rbx
// 38c: 41 5c                         popq    %r12
// 38e: 41 5d                         popq    %r13
// 390: 41 5e                         popq    %r14
// 392: 41 5f                         popq    %r15
// 394: 5d                            popq    %rbp
// 395: c3                            retq
// 396: 
static const unsigned char _CHECK_EG_MATCHplus_DICT_MERGE_code_body[919] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8d, 0x76, 0xf8, 0x48, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x43, 0x48, 0x89, 0x1c, 0x24, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc3, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xfb, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x0a, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x28, 0x02, 0x00, 0x00, 0xe9, 0x44, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xff, 0x00, 0x00, 0x00, 0x85, 0xdb, 0x48, 0x8b, 0x1c, 0x24, 0x0f, 0x88, 0xe4, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xd6, 0x01, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xef, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x89, 0x44, 0x24, 0xf0, 0x4d, 0x89, 0x6c, 0x24, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfc, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x3c, 0xc4, 0x48, 0x63, 0xc1, 0x49, 0x8b, 0x1c, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xba, 0x02, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x97, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xdb, 0x48, 0x8b, 0x1c, 0x24, 0x0f, 0x89, 0xf2, 0xfe, 0xff, 0xff, 0xe9, 0xd1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd3, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0xe6, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xf6, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_DICT_MERGE_code_holes[33] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_MergeEx, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatKwargsError, 0x0},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x315, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x331, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x357, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x369, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_DICT_MERGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_DICT_MERGE_data_holes[1];

// _CHECK_EG_MATCHplus_DICT_UPDATE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_DICT_UPDATE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8d 76 f8                   leaq    -0x8(%rsi), %r14
// 1b: 48 8b 6e f0                   movq    -0x10(%rsi), %rbp
// 1f: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 ee                      movq    %r13, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 44                         js      0x7d <_JIT_ENTRY+0x7d>
// 39: 4c 89 64 24 10                movq    %r12, 0x10(%rsp)
// 3e: 49 89 dc                      movq    %rbx, %r12
// 41: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 49: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 52: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000054:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 5c: 48 89 e2                      movq    %rsp, %rdx
// 5f: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 64: 48 89 ef                      movq    %rbp, %rdi
// 67: 4c 89 ee                      movq    %r13, %rsi
// 6a: ff d0                         callq   *%rax
// 6c: 89 c3                         movl    %eax, %ebx
// 6e: 48 8b 45 00                   movq    (%rbp), %rax
// 72: 48 85 c0                      testq   %rax, %rax
// 75: 7e 18                         jle     0x8f <_JIT_ENTRY+0x8f>
// 77: 85 c0                         testl   %eax, %eax
// 79: 79 3a                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 7b: eb 4a                         jmp     0xc7 <_JIT_ENTRY+0xc7>
// 7d: 48 8b 45 00                   movq    (%rbp), %rax
// 81: 48 85 c0                      testq   %rax, %rax
// 84: 7e 57                         jle     0xdd <_JIT_ENTRY+0xdd>
// 86: 85 c0                         testl   %eax, %eax
// 88: 79 79                         jns     0x103 <_JIT_ENTRY+0x103>
// 8a: e9 8a 00 00 00                jmp     0x119 <_JIT_ENTRY+0x119>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a8: 48 89 ea                      movq    %rbp, %rdx
// ab: ff d0                         callq   *%rax
// ad: 48 8b 45 00                   movq    (%rbp), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 12                         js      0xc7 <_JIT_ENTRY+0xc7>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 48 ff 4d 00                   decq    (%rbp)
// c5: 74 6c                         je      0x133 <_JIT_ENTRY+0x133>
// c7: 49 8b 45 00                   movq    (%r13), %rax
// cb: 48 85 c0                      testq   %rax, %rax
// ce: 7e 7b                         jle     0x14b <_JIT_ENTRY+0x14b>
// d0: 85 c0                         testl   %eax, %eax
// d2: 0f 89 99 00 00 00             jns     0x171 <_JIT_ENTRY+0x171>
// d8: e9 aa 00 00 00                jmp     0x187 <_JIT_ENTRY+0x187>
// dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000df:  R_X86_64_64  .rodata.str1.1
// e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e9:  R_X86_64_64  _Py_NegativeRefcount
// f1: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f6: 48 89 ea                      movq    %rbp, %rdx
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 85 c0                         testl   %eax, %eax
// 101: 78 16                         js      0x119 <_JIT_ENTRY+0x119>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 4d 00                   decq    (%rbp)
// 113: 0f 84 1d 02 00 00             je      0x336 <_JIT_ENTRY+0x336>
// 119: 49 8b 45 00                   movq    (%r13), %rax
// 11d: 48 85 c0                      testq   %rax, %rax
// 120: 0f 8e 2c 02 00 00             jle     0x352 <_JIT_ENTRY+0x352>
// 126: 85 c0                         testl   %eax, %eax
// 128: 0f 89 4a 02 00 00             jns     0x378 <_JIT_ENTRY+0x378>
// 12e: e9 66 02 00 00                jmp     0x399 <_JIT_ENTRY+0x399>
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_Dealloc
// 13d: 48 89 ef                      movq    %rbp, %rdi
// 140: ff d0                         callq   *%rax
// 142: 49 8b 45 00                   movq    (%r13), %rax
// 146: 48 85 c0                      testq   %rax, %rax
// 149: 7f 85                         jg      0xd0 <_JIT_ENTRY+0xd0>
// 14b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014d:  R_X86_64_64  .rodata.str1.1
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  _Py_NegativeRefcount
// 15f: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 164: 4c 89 ea                      movq    %r13, %rdx
// 167: ff d0                         callq   *%rax
// 169: 49 8b 45 00                   movq    (%r13), %rax
// 16d: 85 c0                         testl   %eax, %eax
// 16f: 78 16                         js      0x187 <_JIT_ENTRY+0x187>
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17b: ff d0                         callq   *%rax
// 17d: 49 ff 4d 00                   decq    (%r13)
// 181: 0f 84 ea 00 00 00             je      0x271 <_JIT_ENTRY+0x271>
// 187: 85 db                         testl   %ebx, %ebx
// 189: 4c 89 e3                      movq    %r12, %rbx
// 18c: 0f 88 07 02 00 00             js      0x399 <_JIT_ENTRY+0x399>
// 192: 48 8b 3c 24                   movq    (%rsp), %rdi
// 196: 48 85 ff                      testq   %rdi, %rdi
// 199: 0f 84 fa 01 00 00             je      0x399 <_JIT_ENTRY+0x399>
// 19f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001a1:  R_X86_64_64  _Py_NoneStruct
// 1a9: 4c 39 ef                      cmpq    %r13, %rdi
// 1ac: 74 10                         je      0x1be <_JIT_ENTRY+0x1be>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  PyErr_SetHandledException
// 1b8: ff d0                         callq   *%rax
// 1ba: 4c 8b 2c 24                   movq    (%rsp), %r13
// 1be: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1c3: 49 89 47 f0                   movq    %rax, -0x10(%r15)
// 1c7: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _JIT_OPARG
// 1d5: f7 d0                         notl    %eax
// 1d7: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1dc: 48 98                         cltq
// 1de: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  PyDict_Update
// 1ec: 4c 89 ee                      movq    %r13, %rsi
// 1ef: ff d0                         callq   *%rax
// 1f1: 85 c0                         testl   %eax, %eax
// 1f3: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 1f8: 0f 88 92 00 00 00             js      0x290 <_JIT_ENTRY+0x290>
// 1fe: 49 8b 45 00                   movq    (%r13), %rax
// 202: 48 85 c0                      testq   %rax, %rax
// 205: 7f 22                         jg      0x229 <_JIT_ENTRY+0x229>
// 207: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000209:  R_X86_64_64  .rodata.str1.1
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_NegativeRefcount
// 21b: be c4 05 00 00                movl    $0x5c4, %esi            # imm = 0x5C4
// 220: 4c 89 ea                      movq    %r13, %rdx
// 223: ff d0                         callq   *%rax
// 225: 49 8b 45 00                   movq    (%r13), %rax
// 229: 85 c0                         testl   %eax, %eax
// 22b: 78 21                         js      0x24e <_JIT_ENTRY+0x24e>
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 237: ff d0                         callq   *%rax
// 239: 49 ff 4d 00                   decq    (%r13)
// 23d: 75 0f                         jne     0x24e <_JIT_ENTRY+0x24e>
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _Py_Dealloc
// 249: 4c 89 ef                      movq    %r13, %rdi
// 24c: ff d0                         callq   *%rax
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _JIT_CONTINUE
// 258: 48 89 df                      movq    %rbx, %rdi
// 25b: 4c 89 f6                      movq    %r14, %rsi
// 25e: 4c 89 e2                      movq    %r12, %rdx
// 261: 48 83 c4 18                   addq    $0x18, %rsp
// 265: 5b                            popq    %rbx
// 266: 41 5c                         popq    %r12
// 268: 41 5d                         popq    %r13
// 26a: 41 5e                         popq    %r14
// 26c: 41 5f                         popq    %r15
// 26e: 5d                            popq    %rbp
// 26f: ff e0                         jmpq    *%rax
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_Dealloc
// 27b: 4c 89 ef                      movq    %r13, %rdi
// 27e: ff d0                         callq   *%rax
// 280: 85 db                         testl   %ebx, %ebx
// 282: 4c 89 e3                      movq    %r12, %rbx
// 285: 0f 89 07 ff ff ff             jns     0x192 <_JIT_ENTRY+0x192>
// 28b: e9 09 01 00 00                jmp     0x399 <_JIT_ENTRY+0x399>
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  PyExc_AttributeError
// 29a: 48 8b 30                      movq    (%rax), %rsi
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _PyErr_ExceptionMatches
// 2a7: 4c 89 e7                      movq    %r12, %rdi
// 2aa: ff d0                         callq   *%rax
// 2ac: 85 c0                         testl   %eax, %eax
// 2ae: 74 31                         je      0x2e1 <_JIT_ENTRY+0x2e1>
// 2b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b2:  R_X86_64_64  PyExc_TypeError
// 2ba: 48 8b 30                      movq    (%rax), %rsi
// 2bd: 49 8b 45 08                   movq    0x8(%r13), %rax
// 2c1: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2c5: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002c7:  R_X86_64_64  .rodata.str1.1+0x39
// 2cf: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002d1:  R_X86_64_64  _PyErr_Format
// 2d9: 4c 89 e7                      movq    %r12, %rdi
// 2dc: 31 c0                         xorl    %eax, %eax
// 2de: 41 ff d0                      callq   *%r8
// 2e1: 49 8b 45 00                   movq    (%r13), %rax
// 2e5: 48 85 c0                      testq   %rax, %rax
// 2e8: 7f 22                         jg      0x30c <_JIT_ENTRY+0x30c>
// 2ea: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ec:  R_X86_64_64  .rodata.str1.1
// 2f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f6:  R_X86_64_64  _Py_NegativeRefcount
// 2fe: be c1 05 00 00                movl    $0x5c1, %esi            # imm = 0x5C1
// 303: 4c 89 ea                      movq    %r13, %rdx
// 306: ff d0                         callq   *%rax
// 308: 49 8b 45 00                   movq    (%r13), %rax
// 30c: 85 c0                         testl   %eax, %eax
// 30e: 78 21                         js      0x331 <_JIT_ENTRY+0x331>
// 310: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000312:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 31a: ff d0                         callq   *%rax
// 31c: 49 ff 4d 00                   decq    (%r13)
// 320: 75 0f                         jne     0x331 <_JIT_ENTRY+0x331>
// 322: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000324:  R_X86_64_64  _Py_Dealloc
// 32c: 4c 89 ef                      movq    %r13, %rdi
// 32f: ff d0                         callq   *%rax
// 331: 4d 89 fe                      movq    %r15, %r14
// 334: eb 63                         jmp     0x399 <_JIT_ENTRY+0x399>
// 336: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000338:  R_X86_64_64  _Py_Dealloc
// 340: 48 89 ef                      movq    %rbp, %rdi
// 343: ff d0                         callq   *%rax
// 345: 49 8b 45 00                   movq    (%r13), %rax
// 349: 48 85 c0                      testq   %rax, %rax
// 34c: 0f 8f d4 fd ff ff             jg      0x126 <_JIT_ENTRY+0x126>
// 352: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000354:  R_X86_64_64  .rodata.str1.1
// 35c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035e:  R_X86_64_64  _Py_NegativeRefcount
// 366: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 36b: 4c 89 ea                      movq    %r13, %rdx
// 36e: ff d0                         callq   *%rax
// 370: 49 8b 45 00                   movq    (%r13), %rax
// 374: 85 c0                         testl   %eax, %eax
// 376: 78 21                         js      0x399 <_JIT_ENTRY+0x399>
// 378: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 382: ff d0                         callq   *%rax
// 384: 49 ff 4d 00                   decq    (%r13)
// 388: 75 0f                         jne     0x399 <_JIT_ENTRY+0x399>
// 38a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038c:  R_X86_64_64  _Py_Dealloc
// 394: 4c 89 ef                      movq    %r13, %rdi
// 397: ff d0                         callq   *%rax
// 399: 49 29 de                      subq    %rbx, %r14
// 39c: 49 83 c6 b0                   addq    $-0x50, %r14
// 3a0: 49 c1 ee 03                   shrq    $0x3, %r14
// 3a4: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 3a8: 31 c0                         xorl    %eax, %eax
// 3aa: 48 83 c4 18                   addq    $0x18, %rsp
// 3ae: 5b                            popq    %rbx
// 3af: 41 5c                         popq    %r12
// 3b1: 41 5d                         popq    %r13
// 3b3: 41 5e                         popq    %r14
// 3b5: 41 5f                         popq    %r15
// 3b7: 5d                            popq    %rbp
// 3b8: c3                            retq
// 3b9: 
static const unsigned char _CHECK_EG_MATCHplus_DICT_UPDATE_code_body[954] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8d, 0x76, 0xf8, 0x48, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x44, 0x4c, 0x89, 0x64, 0x24, 0x10, 0x49, 0x89, 0xdc, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc3, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x1d, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x2c, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x4a, 0x02, 0x00, 0x00, 0xe9, 0x66, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xea, 0x00, 0x00, 0x00, 0x85, 0xdb, 0x4c, 0x89, 0xe3, 0x0f, 0x88, 0x07, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xfa, 0x01, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xef, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x2c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x89, 0x47, 0xf0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x0f, 0x88, 0x92, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xdb, 0x4c, 0x89, 0xe3, 0x0f, 0x89, 0x07, 0xff, 0xff, 0xff, 0xe9, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0xfe, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xd4, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_DICT_UPDATE_code_holes[37] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x54, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Update, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AttributeError, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2ec, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x312, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x324, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x338, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x354, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x35e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x37a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x38c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object is not a mapping\x00"
// 5a: 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_DICT_UPDATE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_DICT_UPDATE_data_holes[1];

// _CHECK_EG_MATCHplus_END_SEND
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_END_SEND.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 8d 5e f0                   leaq    -0x10(%rsi), %rbx
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 e6                      movq    %r12, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 1c                         jle     0x90 <_JIT_ENTRY+0x90>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3e                         jns     0xb6 <_JIT_ENTRY+0xb6>
// 78: eb 52                         jmp     0xcc <_JIT_ENTRY+0xcc>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 63                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 83: 85 c0                         testl   %eax, %eax
// 85: 0f 89 81 00 00 00             jns     0x10c <_JIT_ENTRY+0x10c>
// 8b: e9 9d 00 00 00                jmp     0x12d <_JIT_ENTRY+0x12d>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_NegativeRefcount
// a4: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a9: 4c 89 ea                      movq    %r13, %rdx
// ac: ff d0                         callq   *%rax
// ae: 49 8b 45 00                   movq    (%r13), %rax
// b2: 85 c0                         testl   %eax, %eax
// b4: 78 16                         js      0xcc <_JIT_ENTRY+0xcc>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c0: ff d0                         callq   *%rax
// c2: 49 ff 4d 00                   decq    (%r13)
// c6: 0f 84 c7 00 00 00             je      0x193 <_JIT_ENTRY+0x193>
// cc: 49 8b 04 24                   movq    (%r12), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 0f 8e d6 00 00 00             jle     0x1af <_JIT_ENTRY+0x1af>
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 89 f4 00 00 00             jns     0x1d5 <_JIT_ENTRY+0x1d5>
// e1: e9 05 01 00 00                jmp     0x1eb <_JIT_ENTRY+0x1eb>
// e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_NegativeRefcount
// fa: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ff: 4c 89 ea                      movq    %r13, %rdx
// 102: ff d0                         callq   *%rax
// 104: 49 8b 45 00                   movq    (%r13), %rax
// 108: 85 c0                         testl   %eax, %eax
// 10a: 78 21                         js      0x12d <_JIT_ENTRY+0x12d>
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 116: ff d0                         callq   *%rax
// 118: 49 ff 4d 00                   decq    (%r13)
// 11c: 75 0f                         jne     0x12d <_JIT_ENTRY+0x12d>
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _Py_Dealloc
// 128: 4c 89 ef                      movq    %r13, %rdi
// 12b: ff d0                         callq   *%rax
// 12d: 49 8b 04 24                   movq    (%r12), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 09                         jle     0x13f <_JIT_ENTRY+0x13f>
// 136: 85 c0                         testl   %eax, %eax
// 138: 79 2f                         jns     0x169 <_JIT_ENTRY+0x169>
// 13a: e9 86 01 00 00                jmp     0x2c5 <_JIT_ENTRY+0x2c5>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 5c 01 00 00             js      0x2c5 <_JIT_ENTRY+0x2c5>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 0c 24                   decq    (%r12)
// 179: 0f 85 46 01 00 00             jne     0x2c5 <_JIT_ENTRY+0x2c5>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_Dealloc
// 189: 4c 89 e7                      movq    %r12, %rdi
// 18c: ff d0                         callq   *%rax
// 18e: e9 32 01 00 00                jmp     0x2c5 <_JIT_ENTRY+0x2c5>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_Dealloc
// 19d: 4c 89 ef                      movq    %r13, %rdi
// 1a0: ff d0                         callq   *%rax
// 1a2: 49 8b 04 24                   movq    (%r12), %rax
// 1a6: 48 85 c0                      testq   %rax, %rax
// 1a9: 0f 8f 2a ff ff ff             jg      0xd9 <_JIT_ENTRY+0xd9>
// 1af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b1:  R_X86_64_64  .rodata.str1.1
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_NegativeRefcount
// 1c3: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c8: 4c 89 e2                      movq    %r12, %rdx
// 1cb: ff d0                         callq   *%rax
// 1cd: 49 8b 04 24                   movq    (%r12), %rax
// 1d1: 85 c0                         testl   %eax, %eax
// 1d3: 78 16                         js      0x1eb <_JIT_ENTRY+0x1eb>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1df: ff d0                         callq   *%rax
// 1e1: 49 ff 0c 24                   decq    (%r12)
// 1e5: 0f 84 be 00 00 00             je      0x2a9 <_JIT_ENTRY+0x2a9>
// 1eb: 85 ed                         testl   %ebp, %ebp
// 1ed: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 1f2: 0f 88 cd 00 00 00             js      0x2c5 <_JIT_ENTRY+0x2c5>
// 1f8: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1fc: 48 85 ff                      testq   %rdi, %rdi
// 1ff: 0f 84 c0 00 00 00             je      0x2c5 <_JIT_ENTRY+0x2c5>
// 205: 49 83 c7 f8                   addq    $-0x8, %r15
// 209: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000020b:  R_X86_64_64  _Py_NoneStruct
// 213: 4c 39 ef                      cmpq    %r13, %rdi
// 216: 74 10                         je      0x228 <_JIT_ENTRY+0x228>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  PyErr_SetHandledException
// 222: ff d0                         callq   *%rax
// 224: 4c 8b 2c 24                   movq    (%rsp), %r13
// 228: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 22d: 4c 89 23                      movq    %r12, (%rbx)
// 230: 4d 89 2f                      movq    %r13, (%r15)
// 233: 49 8b 04 24                   movq    (%r12), %rax
// 237: 48 85 c0                      testq   %rax, %rax
// 23a: 7f 22                         jg      0x25e <_JIT_ENTRY+0x25e>
// 23c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023e:  R_X86_64_64  .rodata.str1.1
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_NegativeRefcount
// 250: be 66 00 00 00                movl    $0x66, %esi
// 255: 4c 89 e2                      movq    %r12, %rdx
// 258: ff d0                         callq   *%rax
// 25a: 49 8b 04 24                   movq    (%r12), %rax
// 25e: 85 c0                         testl   %eax, %eax
// 260: 78 21                         js      0x283 <_JIT_ENTRY+0x283>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26c: ff d0                         callq   *%rax
// 26e: 49 ff 0c 24                   decq    (%r12)
// 272: 75 0f                         jne     0x283 <_JIT_ENTRY+0x283>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _Py_Dealloc
// 27e: 4c 89 e7                      movq    %r12, %rdi
// 281: ff d0                         callq   *%rax
// 283: 4c 89 2b                      movq    %r13, (%rbx)
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _JIT_CONTINUE
// 290: 48 89 ef                      movq    %rbp, %rdi
// 293: 4c 89 fe                      movq    %r15, %rsi
// 296: 4c 89 f2                      movq    %r14, %rdx
// 299: 48 83 c4 18                   addq    $0x18, %rsp
// 29d: 5b                            popq    %rbx
// 29e: 41 5c                         popq    %r12
// 2a0: 41 5d                         popq    %r13
// 2a2: 41 5e                         popq    %r14
// 2a4: 41 5f                         popq    %r15
// 2a6: 5d                            popq    %rbp
// 2a7: ff e0                         jmpq    *%rax
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _Py_Dealloc
// 2b3: 4c 89 e7                      movq    %r12, %rdi
// 2b6: ff d0                         callq   *%rax
// 2b8: 85 ed                         testl   %ebp, %ebp
// 2ba: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 2bf: 0f 89 33 ff ff ff             jns     0x1f8 <_JIT_ENTRY+0x1f8>
// 2c5: 48 29 eb                      subq    %rbp, %rbx
// 2c8: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2cc: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2d0: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 2d3: 31 c0                         xorl    %eax, %eax
// 2d5: 48 83 c4 18                   addq    $0x18, %rsp
// 2d9: 5b                            popq    %rbx
// 2da: 41 5c                         popq    %r12
// 2dc: 41 5d                         popq    %r13
// 2de: 41 5e                         popq    %r14
// 2e0: 41 5f                         popq    %r15
// 2e2: 5d                            popq    %rbp
// 2e3: c3                            retq
// 2e4: 
static const unsigned char _CHECK_EG_MATCHplus_END_SEND_code_body[741] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0x8d, 0x5e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0x86, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x5c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x46, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x32, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xbe, 0x00, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x88, 0xcd, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc7, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xef, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x2c, 0x24, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x4c, 0x89, 0x23, 0x4d, 0x89, 0x2f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x89, 0x33, 0xff, 0xff, 0xff, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_END_SEND_code_holes[26] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_END_SEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_END_SEND_data_holes[1];

// _CHECK_EG_MATCHplus_EXIT_INIT_CHECK
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_EXIT_INIT_CHECK.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 76 f8                   movq    -0x8(%rsi), %r14
// 1f: 4c 8d 7e f0                   leaq    -0x10(%rsi), %r15
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 f6                      movq    %r14, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 f6                      movq    %r14, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 56                         jle     0xd9 <_JIT_ENTRY+0xd9>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 78                         jns     0xff <_JIT_ENTRY+0xff>
// 87: e9 89 00 00 00                jmp     0x115 <_JIT_ENTRY+0x115>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 4c 89 ea                      movq    %r13, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 45 00                   movq    (%r13), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 4d 00                   decq    (%r13)
// c2: 74 6a                         je      0x12e <_JIT_ENTRY+0x12e>
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7e 79                         jle     0x145 <_JIT_ENTRY+0x145>
// cc: 85 c0                         testl   %eax, %eax
// ce: 0f 89 96 00 00 00             jns     0x16a <_JIT_ENTRY+0x16a>
// d4: e9 a6 00 00 00                jmp     0x17f <_JIT_ENTRY+0x17f>
// d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000db:  R_X86_64_64  .rodata.str1.1
// e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e5:  R_X86_64_64  _Py_NegativeRefcount
// ed: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f2: 4c 89 ea                      movq    %r13, %rdx
// f5: ff d0                         callq   *%rax
// f7: 49 8b 45 00                   movq    (%r13), %rax
// fb: 85 c0                         testl   %eax, %eax
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 4d 00                   decq    (%r13)
// 10f: 0f 84 3b 01 00 00             je      0x250 <_JIT_ENTRY+0x250>
// 115: 49 8b 06                      movq    (%r14), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 0f 8e 4a 01 00 00             jle     0x26b <_JIT_ENTRY+0x26b>
// 121: 85 c0                         testl   %eax, %eax
// 123: 0f 89 67 01 00 00             jns     0x290 <_JIT_ENTRY+0x290>
// 129: e9 82 01 00 00                jmp     0x2b0 <_JIT_ENTRY+0x2b0>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_Dealloc
// 138: 4c 89 ef                      movq    %r13, %rdi
// 13b: ff d0                         callq   *%rax
// 13d: 49 8b 06                      movq    (%r14), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 87                         jg      0xcc <_JIT_ENTRY+0xcc>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15e: 4c 89 f2                      movq    %r14, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 06                      movq    (%r14), %rax
// 166: 85 c0                         testl   %eax, %eax
// 168: 78 15                         js      0x17f <_JIT_ENTRY+0x17f>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 0e                      decq    (%r14)
// 179: 0f 84 82 00 00 00             je      0x201 <_JIT_ENTRY+0x201>
// 17f: 85 ed                         testl   %ebp, %ebp
// 181: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 186: 0f 88 24 01 00 00             js      0x2b0 <_JIT_ENTRY+0x2b0>
// 18c: 48 8b 3c 24                   movq    (%rsp), %rdi
// 190: 48 85 ff                      testq   %rdi, %rdi
// 193: 0f 84 17 01 00 00             je      0x2b0 <_JIT_ENTRY+0x2b0>
// 199: 4c 8d 73 f8                   leaq    -0x8(%rbx), %r14
// 19d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000019f:  R_X86_64_64  _Py_NoneStruct
// 1a7: 4c 39 ef                      cmpq    %r13, %rdi
// 1aa: 74 76                         je      0x222 <_JIT_ENTRY+0x222>
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  PyErr_SetHandledException
// 1b6: ff d0                         callq   *%rax
// 1b8: 48 8b 04 24                   movq    (%rsp), %rax
// 1bc: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1c1: 49 89 0f                      movq    %rcx, (%r15)
// 1c4: 49 89 06                      movq    %rax, (%r14)
// 1c7: 4c 39 e8                      cmpq    %r13, %rax
// 1ca: 74 61                         je      0x22d <_JIT_ENTRY+0x22d>
// 1cc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ce:  R_X86_64_64  PyExc_TypeError
// 1d6: 48 8b 39                      movq    (%rcx), %rdi
// 1d9: 48 8b 40 08                   movq    0x8(%rax), %rax
// 1dd: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 1e1: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001e3:  R_X86_64_64  .rodata.str1.1+0x39
// 1eb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ed:  R_X86_64_64  PyErr_Format
// 1f5: 31 c0                         xorl    %eax, %eax
// 1f7: ff d1                         callq   *%rcx
// 1f9: 49 89 df                      movq    %rbx, %r15
// 1fc: e9 af 00 00 00                jmp     0x2b0 <_JIT_ENTRY+0x2b0>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_Dealloc
// 20b: 4c 89 f7                      movq    %r14, %rdi
// 20e: ff d0                         callq   *%rax
// 210: 85 ed                         testl   %ebp, %ebp
// 212: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 217: 0f 89 6f ff ff ff             jns     0x18c <_JIT_ENTRY+0x18c>
// 21d: e9 8e 00 00 00                jmp     0x2b0 <_JIT_ENTRY+0x2b0>
// 222: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 227: 49 89 07                      movq    %rax, (%r15)
// 22a: 4d 89 2e                      movq    %r13, (%r14)
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _JIT_CONTINUE
// 237: 48 89 ef                      movq    %rbp, %rdi
// 23a: 4c 89 f6                      movq    %r14, %rsi
// 23d: 4c 89 e2                      movq    %r12, %rdx
// 240: 48 83 c4 18                   addq    $0x18, %rsp
// 244: 5b                            popq    %rbx
// 245: 41 5c                         popq    %r12
// 247: 41 5d                         popq    %r13
// 249: 41 5e                         popq    %r14
// 24b: 41 5f                         popq    %r15
// 24d: 5d                            popq    %rbp
// 24e: ff e0                         jmpq    *%rax
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _Py_Dealloc
// 25a: 4c 89 ef                      movq    %r13, %rdi
// 25d: ff d0                         callq   *%rax
// 25f: 49 8b 06                      movq    (%r14), %rax
// 262: 48 85 c0                      testq   %rax, %rax
// 265: 0f 8f b6 fe ff ff             jg      0x121 <_JIT_ENTRY+0x121>
// 26b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026d:  R_X86_64_64  .rodata.str1.1
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _Py_NegativeRefcount
// 27f: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 284: 4c 89 f2                      movq    %r14, %rdx
// 287: ff d0                         callq   *%rax
// 289: 49 8b 06                      movq    (%r14), %rax
// 28c: 85 c0                         testl   %eax, %eax
// 28e: 78 20                         js      0x2b0 <_JIT_ENTRY+0x2b0>
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 29a: ff d0                         callq   *%rax
// 29c: 49 ff 0e                      decq    (%r14)
// 29f: 75 0f                         jne     0x2b0 <_JIT_ENTRY+0x2b0>
// 2a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a3:  R_X86_64_64  _Py_Dealloc
// 2ab: 4c 89 f7                      movq    %r14, %rdi
// 2ae: ff d0                         callq   *%rax
// 2b0: 49 29 ef                      subq    %rbp, %r15
// 2b3: 49 83 c7 b8                   addq    $-0x48, %r15
// 2b7: 49 c1 ef 03                   shrq    $0x3, %r15
// 2bb: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 2bf: 31 c0                         xorl    %eax, %eax
// 2c1: 48 83 c4 18                   addq    $0x18, %rsp
// 2c5: 5b                            popq    %rbx
// 2c6: 41 5c                         popq    %r12
// 2c8: 41 5d                         popq    %r13
// 2ca: 41 5e                         popq    %r14
// 2cc: 41 5f                         popq    %r15
// 2ce: 5d                            popq    %rbp
// 2cf: c3                            retq
// 2d0: 
static const unsigned char _CHECK_EG_MATCHplus_EXIT_INIT_CHECK_code_body[721] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x48, 0x89, 0xfd, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x76, 0xf8, 0x4c, 0x8d, 0x7e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x3b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x4a, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x67, 0x01, 0x00, 0x00, 0xe9, 0x82, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x88, 0x24, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x17, 0x01, 0x00, 0x00, 0x4c, 0x8d, 0x73, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xef, 0x74, 0x76, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x89, 0x0f, 0x49, 0x89, 0x06, 0x4c, 0x39, 0xe8, 0x74, 0x61, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x39, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0x49, 0x89, 0xdf, 0xe9, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x89, 0x6f, 0xff, 0xff, 0xff, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x89, 0x07, 0x4d, 0x89, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xb6, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_EXIT_INIT_CHECK_code_holes[25] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_Format, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__init__() should return None, not '%.200s'\x00"
// 65: 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_EXIT_INIT_CHECK_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x5f, 0x28, 0x29, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x4e, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_EXIT_INIT_CHECK_data_holes[1];

// _CHECK_EG_MATCHplus_EXIT_TRACE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_EXIT_TRACE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 54                         pushq   %r12
// 7: 53                            pushq   %rbx
// 8: 48 83 ec 10                   subq    $0x10, %rsp
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 4c 8b 66 f0                   movq    -0x10(%rsi), %r12
// 16: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001c:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 24: 48 89 d7                      movq    %rdx, %rdi
// 27: 4c 89 fe                      movq    %r15, %rsi
// 2a: ff d0                         callq   *%rax
// 2c: 85 c0                         testl   %eax, %eax
// 2e: 78 3c                         js      0x6c <_JIT_ENTRY+0x6c>
// 30: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 38: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 41: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000043:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 4b: 48 89 e2                      movq    %rsp, %rdx
// 4e: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 53: 4c 89 e7                      movq    %r12, %rdi
// 56: 4c 89 fe                      movq    %r15, %rsi
// 59: ff d0                         callq   *%rax
// 5b: 89 c5                         movl    %eax, %ebp
// 5d: 49 8b 04 24                   movq    (%r12), %rax
// 61: 48 85 c0                      testq   %rax, %rax
// 64: 7e 18                         jle     0x7e <_JIT_ENTRY+0x7e>
// 66: 85 c0                         testl   %eax, %eax
// 68: 79 3a                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 6a: eb 4a                         jmp     0xb6 <_JIT_ENTRY+0xb6>
// 6c: 49 8b 04 24                   movq    (%r12), %rax
// 70: 48 85 c0                      testq   %rax, %rax
// 73: 7e 56                         jle     0xcb <_JIT_ENTRY+0xcb>
// 75: 85 c0                         testl   %eax, %eax
// 77: 79 78                         jns     0xf1 <_JIT_ENTRY+0xf1>
// 79: e9 89 00 00 00                jmp     0x107 <_JIT_ENTRY+0x107>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 12                         js      0xb6 <_JIT_ENTRY+0xb6>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 74 6a                         je      0x120 <_JIT_ENTRY+0x120>
// b6: 49 8b 07                      movq    (%r15), %rax
// b9: 48 85 c0                      testq   %rax, %rax
// bc: 7e 79                         jle     0x137 <_JIT_ENTRY+0x137>
// be: 85 c0                         testl   %eax, %eax
// c0: 0f 89 96 00 00 00             jns     0x15c <_JIT_ENTRY+0x15c>
// c6: e9 a2 00 00 00                jmp     0x16d <_JIT_ENTRY+0x16d>
// cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000cd:  R_X86_64_64  .rodata.str1.1
// d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d7:  R_X86_64_64  _Py_NegativeRefcount
// df: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// e4: 4c 89 e2                      movq    %r12, %rdx
// e7: ff d0                         callq   *%rax
// e9: 49 8b 04 24                   movq    (%r12), %rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 16                         js      0x107 <_JIT_ENTRY+0x107>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// fb: ff d0                         callq   *%rax
// fd: 49 ff 0c 24                   decq    (%r12)
// 101: 0f 84 e9 00 00 00             je      0x1f0 <_JIT_ENTRY+0x1f0>
// 107: 49 8b 07                      movq    (%r15), %rax
// 10a: 48 85 c0                      testq   %rax, %rax
// 10d: 0f 8e f8 00 00 00             jle     0x20b <_JIT_ENTRY+0x20b>
// 113: 85 c0                         testl   %eax, %eax
// 115: 0f 89 15 01 00 00             jns     0x230 <_JIT_ENTRY+0x230>
// 11b: e9 30 01 00 00                jmp     0x250 <_JIT_ENTRY+0x250>
// 120: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000122:  R_X86_64_64  _Py_Dealloc
// 12a: 4c 89 e7                      movq    %r12, %rdi
// 12d: ff d0                         callq   *%rax
// 12f: 49 8b 07                      movq    (%r15), %rax
// 132: 48 85 c0                      testq   %rax, %rax
// 135: 7f 87                         jg      0xbe <_JIT_ENTRY+0xbe>
// 137: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000139:  R_X86_64_64  .rodata.str1.1
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_NegativeRefcount
// 14b: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 150: 4c 89 fa                      movq    %r15, %rdx
// 153: ff d0                         callq   *%rax
// 155: 49 8b 07                      movq    (%r15), %rax
// 158: 85 c0                         testl   %eax, %eax
// 15a: 78 11                         js      0x16d <_JIT_ENTRY+0x16d>
// 15c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 166: ff d0                         callq   *%rax
// 168: 49 ff 0f                      decq    (%r15)
// 16b: 74 6e                         je      0x1db <_JIT_ENTRY+0x1db>
// 16d: 85 ed                         testl   %ebp, %ebp
// 16f: 0f 88 db 00 00 00             js      0x250 <_JIT_ENTRY+0x250>
// 175: 48 8b 3c 24                   movq    (%rsp), %rdi
// 179: 48 85 ff                      testq   %rdi, %rdi
// 17c: 0f 84 ce 00 00 00             je      0x250 <_JIT_ENTRY+0x250>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_NoneStruct
// 18c: 48 39 c7                      cmpq    %rax, %rdi
// 18f: 74 10                         je      0x1a1 <_JIT_ENTRY+0x1a1>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  PyErr_SetHandledException
// 19b: ff d0                         callq   *%rax
// 19d: 48 8b 04 24                   movq    (%rsp), %rax
// 1a1: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1a6: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1aa: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1ae: 4c 29 f3                      subq    %r14, %rbx
// 1b1: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1b5: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1b9: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1bd: 49 8b 06                      movq    (%r14), %rax
// 1c0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c2:  R_X86_64_64  _JIT_TARGET
// 1ca: 89 c9                         movl    %ecx, %ecx
// 1cc: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1d0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1d6: e9 8a 00 00 00                jmp     0x265 <_JIT_ENTRY+0x265>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: 4c 89 ff                      movq    %r15, %rdi
// 1e8: ff d0                         callq   *%rax
// 1ea: 85 ed                         testl   %ebp, %ebp
// 1ec: 79 87                         jns     0x175 <_JIT_ENTRY+0x175>
// 1ee: eb 60                         jmp     0x250 <_JIT_ENTRY+0x250>
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _Py_Dealloc
// 1fa: 4c 89 e7                      movq    %r12, %rdi
// 1fd: ff d0                         callq   *%rax
// 1ff: 49 8b 07                      movq    (%r15), %rax
// 202: 48 85 c0                      testq   %rax, %rax
// 205: 0f 8f 08 ff ff ff             jg      0x113 <_JIT_ENTRY+0x113>
// 20b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020d:  R_X86_64_64  .rodata.str1.1
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _Py_NegativeRefcount
// 21f: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 224: 4c 89 fa                      movq    %r15, %rdx
// 227: ff d0                         callq   *%rax
// 229: 49 8b 07                      movq    (%r15), %rax
// 22c: 85 c0                         testl   %eax, %eax
// 22e: 78 20                         js      0x250 <_JIT_ENTRY+0x250>
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23a: ff d0                         callq   *%rax
// 23c: 49 ff 0f                      decq    (%r15)
// 23f: 75 0f                         jne     0x250 <_JIT_ENTRY+0x250>
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _Py_Dealloc
// 24b: 4c 89 ff                      movq    %r15, %rdi
// 24e: ff d0                         callq   *%rax
// 250: 48 83 c3 f0                   addq    $-0x10, %rbx
// 254: 4c 29 f3                      subq    %r14, %rbx
// 257: 48 83 c3 b8                   addq    $-0x48, %rbx
// 25b: 48 c1 eb 03                   shrq    $0x3, %rbx
// 25f: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 263: 31 c0                         xorl    %eax, %eax
// 265: 48 83 c4 10                   addq    $0x10, %rsp
// 269: 5b                            popq    %rbx
// 26a: 41 5c                         popq    %r12
// 26c: 41 5e                         popq    %r14
// 26e: 41 5f                         popq    %r15
// 270: 5d                            popq    %rbp
// 271: c3                            retq
// 272: 
static const unsigned char _CHECK_EG_MATCHplus_EXIT_TRACE_code_body[627] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x10, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xe9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xf8, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x15, 0x01, 0x00, 0x00, 0xe9, 0x30, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x6e, 0x85, 0xed, 0x0f, 0x88, 0xdb, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xce, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x79, 0x87, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x08, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_EXIT_TRACE_code_holes[22] = {
    {0x1c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x43, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_EXIT_TRACE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_EXIT_TRACE_data_holes[1];

// _CHECK_EG_MATCHplus_FORMAT_SIMPLE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_FORMAT_SIMPLE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 72 01 00 00             je      0x282 <_JIT_ENTRY+0x282>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 81 01 00 00             jle     0x29e <_JIT_ENTRY+0x29e>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 9f 01 00 00             jns     0x2c4 <_JIT_ENTRY+0x2c4>
// 125: e9 bb 01 00 00                jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 eb 00 00 00             je      0x269 <_JIT_ENTRY+0x269>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 5f 01 00 00             js      0x2e5 <_JIT_ENTRY+0x2e5>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 51 01 00 00             je      0x2e5 <_JIT_ENTRY+0x2e5>
// 194: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 4c 39 e7                      cmpq    %r12, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 1b4: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b9: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 1bd: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  PyUnicode_Type
// 1cb: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1d0: 74 70                         je      0x242 <_JIT_ENTRY+0x242>
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  PyObject_Format
// 1dc: 4c 89 e7                      movq    %r12, %rdi
// 1df: 31 f6                         xorl    %esi, %esi
// 1e1: ff d0                         callq   *%rax
// 1e3: 49 89 c5                      movq    %rax, %r13
// 1e6: 49 8b 04 24                   movq    (%r12), %rax
// 1ea: 48 85 c0                      testq   %rax, %rax
// 1ed: 7f 22                         jg      0x211 <_JIT_ENTRY+0x211>
// 1ef: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f1:  R_X86_64_64  .rodata.str1.1
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_NegativeRefcount
// 203: be a6 0c 00 00                movl    $0xca6, %esi            # imm = 0xCA6
// 208: 4c 89 e2                      movq    %r12, %rdx
// 20b: ff d0                         callq   *%rax
// 20d: 49 8b 04 24                   movq    (%r12), %rax
// 211: 85 c0                         testl   %eax, %eax
// 213: 78 21                         js      0x236 <_JIT_ENTRY+0x236>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21f: ff d0                         callq   *%rax
// 221: 49 ff 0c 24                   decq    (%r12)
// 225: 75 0f                         jne     0x236 <_JIT_ENTRY+0x236>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _Py_Dealloc
// 231: 4c 89 e7                      movq    %r12, %rdi
// 234: ff d0                         callq   *%rax
// 236: 4d 89 ec                      movq    %r13, %r12
// 239: 4d 85 ed                      testq   %r13, %r13
// 23c: 0f 84 a7 00 00 00             je      0x2e9 <_JIT_ENTRY+0x2e9>
// 242: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _JIT_CONTINUE
// 250: 4c 89 f7                      movq    %r14, %rdi
// 253: 48 89 de                      movq    %rbx, %rsi
// 256: 4c 89 fa                      movq    %r15, %rdx
// 259: 48 83 c4 18                   addq    $0x18, %rsp
// 25d: 5b                            popq    %rbx
// 25e: 41 5c                         popq    %r12
// 260: 41 5d                         popq    %r13
// 262: 41 5e                         popq    %r14
// 264: 41 5f                         popq    %r15
// 266: 5d                            popq    %rbp
// 267: ff e0                         jmpq    *%rax
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_Dealloc
// 273: 4c 89 e7                      movq    %r12, %rdi
// 276: ff d0                         callq   *%rax
// 278: 85 ed                         testl   %ebp, %ebp
// 27a: 0f 89 06 ff ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 280: eb 63                         jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_Dealloc
// 28c: 4c 89 ef                      movq    %r13, %rdi
// 28f: ff d0                         callq   *%rax
// 291: 49 8b 04 24                   movq    (%r12), %rax
// 295: 48 85 c0                      testq   %rax, %rax
// 298: 0f 8f 7f fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 29e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a0:  R_X86_64_64  .rodata.str1.1
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _Py_NegativeRefcount
// 2b2: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2b7: 4c 89 e2                      movq    %r12, %rdx
// 2ba: ff d0                         callq   *%rax
// 2bc: 49 8b 04 24                   movq    (%r12), %rax
// 2c0: 85 c0                         testl   %eax, %eax
// 2c2: 78 21                         js      0x2e5 <_JIT_ENTRY+0x2e5>
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ce: ff d0                         callq   *%rax
// 2d0: 49 ff 0c 24                   decq    (%r12)
// 2d4: 75 0f                         jne     0x2e5 <_JIT_ENTRY+0x2e5>
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  _Py_Dealloc
// 2e0: 4c 89 e7                      movq    %r12, %rdi
// 2e3: ff d0                         callq   *%rax
// 2e5: 48 83 c3 f8                   addq    $-0x8, %rbx
// 2e9: 4c 29 f3                      subq    %r14, %rbx
// 2ec: 48 83 c3 b0                   addq    $-0x50, %rbx
// 2f0: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2f4: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2f8: 31 c0                         xorl    %eax, %eax
// 2fa: 48 83 c4 18                   addq    $0x18, %rsp
// 2fe: 5b                            popq    %rbx
// 2ff: 41 5c                         popq    %r12
// 301: 41 5d                         popq    %r13
// 303: 41 5e                         popq    %r14
// 305: 41 5f                         popq    %r15
// 307: 5d                            popq    %rbp
// 308: c3                            retq
// 309: 
static const unsigned char _CHECK_EG_MATCHplus_FORMAT_SIMPLE_code_body[778] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x72, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x81, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x9f, 0x01, 0x00, 0x00, 0xe9, 0xbb, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xeb, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x5f, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x51, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x70, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa6, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x06, 0xff, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x7f, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_FORMAT_SIMPLE_code_holes[28] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_FORMAT_SIMPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_FORMAT_SIMPLE_data_holes[1];

// _CHECK_EG_MATCHplus_FORMAT_WITH_SPEC
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_FORMAT_WITH_SPEC.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 8d 5e f0                   leaq    -0x10(%rsi), %rbx
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 e6                      movq    %r12, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 1c                         jle     0x90 <_JIT_ENTRY+0x90>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3e                         jns     0xb6 <_JIT_ENTRY+0xb6>
// 78: eb 52                         jmp     0xcc <_JIT_ENTRY+0xcc>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 63                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 83: 85 c0                         testl   %eax, %eax
// 85: 0f 89 81 00 00 00             jns     0x10c <_JIT_ENTRY+0x10c>
// 8b: e9 9d 00 00 00                jmp     0x12d <_JIT_ENTRY+0x12d>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_NegativeRefcount
// a4: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a9: 4c 89 ea                      movq    %r13, %rdx
// ac: ff d0                         callq   *%rax
// ae: 49 8b 45 00                   movq    (%r13), %rax
// b2: 85 c0                         testl   %eax, %eax
// b4: 78 16                         js      0xcc <_JIT_ENTRY+0xcc>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c0: ff d0                         callq   *%rax
// c2: 49 ff 4d 00                   decq    (%r13)
// c6: 0f 84 c7 00 00 00             je      0x193 <_JIT_ENTRY+0x193>
// cc: 49 8b 04 24                   movq    (%r12), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 0f 8e d6 00 00 00             jle     0x1af <_JIT_ENTRY+0x1af>
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 89 f4 00 00 00             jns     0x1d5 <_JIT_ENTRY+0x1d5>
// e1: e9 05 01 00 00                jmp     0x1eb <_JIT_ENTRY+0x1eb>
// e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_NegativeRefcount
// fa: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ff: 4c 89 ea                      movq    %r13, %rdx
// 102: ff d0                         callq   *%rax
// 104: 49 8b 45 00                   movq    (%r13), %rax
// 108: 85 c0                         testl   %eax, %eax
// 10a: 78 21                         js      0x12d <_JIT_ENTRY+0x12d>
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 116: ff d0                         callq   *%rax
// 118: 49 ff 4d 00                   decq    (%r13)
// 11c: 75 0f                         jne     0x12d <_JIT_ENTRY+0x12d>
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _Py_Dealloc
// 128: 4c 89 ef                      movq    %r13, %rdi
// 12b: ff d0                         callq   *%rax
// 12d: 49 8b 04 24                   movq    (%r12), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 09                         jle     0x13f <_JIT_ENTRY+0x13f>
// 136: 85 c0                         testl   %eax, %eax
// 138: 79 2f                         jns     0x169 <_JIT_ENTRY+0x169>
// 13a: e9 fc 01 00 00                jmp     0x33b <_JIT_ENTRY+0x33b>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 d2 01 00 00             js      0x33b <_JIT_ENTRY+0x33b>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 0c 24                   decq    (%r12)
// 179: 0f 85 bc 01 00 00             jne     0x33b <_JIT_ENTRY+0x33b>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_Dealloc
// 189: 4c 89 e7                      movq    %r12, %rdi
// 18c: ff d0                         callq   *%rax
// 18e: e9 a8 01 00 00                jmp     0x33b <_JIT_ENTRY+0x33b>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_Dealloc
// 19d: 4c 89 ef                      movq    %r13, %rdi
// 1a0: ff d0                         callq   *%rax
// 1a2: 49 8b 04 24                   movq    (%r12), %rax
// 1a6: 48 85 c0                      testq   %rax, %rax
// 1a9: 0f 8f 2a ff ff ff             jg      0xd9 <_JIT_ENTRY+0xd9>
// 1af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b1:  R_X86_64_64  .rodata.str1.1
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_NegativeRefcount
// 1c3: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c8: 4c 89 e2                      movq    %r12, %rdx
// 1cb: ff d0                         callq   *%rax
// 1cd: 49 8b 04 24                   movq    (%r12), %rax
// 1d1: 85 c0                         testl   %eax, %eax
// 1d3: 78 16                         js      0x1eb <_JIT_ENTRY+0x1eb>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1df: ff d0                         callq   *%rax
// 1e1: 49 ff 0c 24                   decq    (%r12)
// 1e5: 0f 84 1e 01 00 00             je      0x309 <_JIT_ENTRY+0x309>
// 1eb: 85 ed                         testl   %ebp, %ebp
// 1ed: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 1f2: 0f 88 43 01 00 00             js      0x33b <_JIT_ENTRY+0x33b>
// 1f8: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1fc: 48 85 ff                      testq   %rdi, %rdi
// 1ff: 0f 84 36 01 00 00             je      0x33b <_JIT_ENTRY+0x33b>
// 205: 49 83 c7 f8                   addq    $-0x8, %r15
// 209: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000020b:  R_X86_64_64  _Py_NoneStruct
// 213: 4c 39 e7                      cmpq    %r12, %rdi
// 216: 74 10                         je      0x228 <_JIT_ENTRY+0x228>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  PyErr_SetHandledException
// 222: ff d0                         callq   *%rax
// 224: 4c 8b 24 24                   movq    (%rsp), %r12
// 228: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 22d: 48 89 2b                      movq    %rbp, (%rbx)
// 230: 4d 89 27                      movq    %r12, (%r15)
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  PyObject_Format
// 23d: 48 89 ef                      movq    %rbp, %rdi
// 240: 4c 89 e6                      movq    %r12, %rsi
// 243: ff d0                         callq   *%rax
// 245: 49 89 c5                      movq    %rax, %r13
// 248: 48 8b 45 00                   movq    (%rbp), %rax
// 24c: 48 85 c0                      testq   %rax, %rax
// 24f: 7f 22                         jg      0x273 <_JIT_ENTRY+0x273>
// 251: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000253:  R_X86_64_64  .rodata.str1.1
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_NegativeRefcount
// 265: be b7 0c 00 00                movl    $0xcb7, %esi            # imm = 0xCB7
// 26a: 48 89 ea                      movq    %rbp, %rdx
// 26d: ff d0                         callq   *%rax
// 26f: 48 8b 45 00                   movq    (%rbp), %rax
// 273: 85 c0                         testl   %eax, %eax
// 275: 78 21                         js      0x298 <_JIT_ENTRY+0x298>
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 281: ff d0                         callq   *%rax
// 283: 48 ff 4d 00                   decq    (%rbp)
// 287: 75 0f                         jne     0x298 <_JIT_ENTRY+0x298>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_Dealloc
// 293: 48 89 ef                      movq    %rbp, %rdi
// 296: ff d0                         callq   *%rax
// 298: 49 8b 04 24                   movq    (%r12), %rax
// 29c: 48 85 c0                      testq   %rax, %rax
// 29f: 7f 22                         jg      0x2c3 <_JIT_ENTRY+0x2c3>
// 2a1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a3:  R_X86_64_64  .rodata.str1.1
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_NegativeRefcount
// 2b5: be b8 0c 00 00                movl    $0xcb8, %esi            # imm = 0xCB8
// 2ba: 4c 89 e2                      movq    %r12, %rdx
// 2bd: ff d0                         callq   *%rax
// 2bf: 49 8b 04 24                   movq    (%r12), %rax
// 2c3: 85 c0                         testl   %eax, %eax
// 2c5: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 2ca: 78 12                         js      0x2de <_JIT_ENTRY+0x2de>
// 2cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ce:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d6: ff d0                         callq   *%rax
// 2d8: 49 ff 0c 24                   decq    (%r12)
// 2dc: 74 49                         je      0x327 <_JIT_ENTRY+0x327>
// 2de: 4d 85 ed                      testq   %r13, %r13
// 2e1: 74 58                         je      0x33b <_JIT_ENTRY+0x33b>
// 2e3: 4c 89 2b                      movq    %r13, (%rbx)
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _JIT_CONTINUE
// 2f0: 48 89 ef                      movq    %rbp, %rdi
// 2f3: 4c 89 fe                      movq    %r15, %rsi
// 2f6: 4c 89 f2                      movq    %r14, %rdx
// 2f9: 48 83 c4 18                   addq    $0x18, %rsp
// 2fd: 5b                            popq    %rbx
// 2fe: 41 5c                         popq    %r12
// 300: 41 5d                         popq    %r13
// 302: 41 5e                         popq    %r14
// 304: 41 5f                         popq    %r15
// 306: 5d                            popq    %rbp
// 307: ff e0                         jmpq    *%rax
// 309: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030b:  R_X86_64_64  _Py_Dealloc
// 313: 4c 89 e7                      movq    %r12, %rdi
// 316: ff d0                         callq   *%rax
// 318: 85 ed                         testl   %ebp, %ebp
// 31a: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 31f: 0f 89 d3 fe ff ff             jns     0x1f8 <_JIT_ENTRY+0x1f8>
// 325: eb 14                         jmp     0x33b <_JIT_ENTRY+0x33b>
// 327: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000329:  R_X86_64_64  _Py_Dealloc
// 331: 4c 89 e7                      movq    %r12, %rdi
// 334: ff d0                         callq   *%rax
// 336: 4d 85 ed                      testq   %r13, %r13
// 339: 75 a8                         jne     0x2e3 <_JIT_ENTRY+0x2e3>
// 33b: 48 29 eb                      subq    %rbp, %rbx
// 33e: 48 83 c3 b8                   addq    $-0x48, %rbx
// 342: 48 c1 eb 03                   shrq    $0x3, %rbx
// 346: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 349: 31 c0                         xorl    %eax, %eax
// 34b: 48 83 c4 18                   addq    $0x18, %rsp
// 34f: 5b                            popq    %rbx
// 350: 41 5c                         popq    %r12
// 352: 41 5d                         popq    %r13
// 354: 41 5e                         popq    %r14
// 356: 41 5f                         popq    %r15
// 358: 5d                            popq    %rbp
// 359: c3                            retq
// 35a: 
static const unsigned char _CHECK_EG_MATCHplus_FORMAT_WITH_SPEC_code_body[859] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0x8d, 0x5e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0xfc, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xd2, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xbc, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xa8, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x1e, 0x01, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x0f, 0x88, 0x43, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x36, 0x01, 0x00, 0x00, 0x49, 0x83, 0xc7, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x2b, 0x4d, 0x89, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb8, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x49, 0x4d, 0x85, 0xed, 0x74, 0x58, 0x4c, 0x89, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x0f, 0x89, 0xd3, 0xfe, 0xff, 0xff, 0xeb, 0x14, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0xa8, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_FORMAT_WITH_SPEC_code_holes[31] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x30b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x329, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_FORMAT_WITH_SPEC_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_FORMAT_WITH_SPEC_data_holes[1];

// _CHECK_EG_MATCHplus_FOR_ITER_TIER_TWO
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_FOR_ITER_TIER_TWO.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 4c 8d 66 f0                   leaq    -0x10(%rsi), %r12
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 fe                      movq    %r15, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 fe                      movq    %r15, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 56                         jle     0xd9 <_JIT_ENTRY+0xd9>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 78                         jns     0xff <_JIT_ENTRY+0xff>
// 87: e9 89 00 00 00                jmp     0x115 <_JIT_ENTRY+0x115>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 4c 89 ea                      movq    %r13, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 45 00                   movq    (%r13), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 4d 00                   decq    (%r13)
// c2: 74 6a                         je      0x12e <_JIT_ENTRY+0x12e>
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7e 79                         jle     0x145 <_JIT_ENTRY+0x145>
// cc: 85 c0                         testl   %eax, %eax
// ce: 0f 89 96 00 00 00             jns     0x16a <_JIT_ENTRY+0x16a>
// d4: e9 a6 00 00 00                jmp     0x17f <_JIT_ENTRY+0x17f>
// d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000db:  R_X86_64_64  .rodata.str1.1
// e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e5:  R_X86_64_64  _Py_NegativeRefcount
// ed: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f2: 4c 89 ea                      movq    %r13, %rdx
// f5: ff d0                         callq   *%rax
// f7: 49 8b 45 00                   movq    (%r13), %rax
// fb: 85 c0                         testl   %eax, %eax
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 4d 00                   decq    (%r13)
// 10f: 0f 84 cf 01 00 00             je      0x2e4 <_JIT_ENTRY+0x2e4>
// 115: 49 8b 07                      movq    (%r15), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 0f 8e de 01 00 00             jle     0x2ff <_JIT_ENTRY+0x2ff>
// 121: 85 c0                         testl   %eax, %eax
// 123: 0f 89 fb 01 00 00             jns     0x324 <_JIT_ENTRY+0x324>
// 129: e9 16 02 00 00                jmp     0x344 <_JIT_ENTRY+0x344>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_Dealloc
// 138: 4c 89 ef                      movq    %r13, %rdi
// 13b: ff d0                         callq   *%rax
// 13d: 49 8b 07                      movq    (%r15), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 87                         jg      0xcc <_JIT_ENTRY+0xcc>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15e: 4c 89 fa                      movq    %r15, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 07                      movq    (%r15), %rax
// 166: 85 c0                         testl   %eax, %eax
// 168: 78 15                         js      0x17f <_JIT_ENTRY+0x17f>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 0f                      decq    (%r15)
// 179: 0f 84 86 00 00 00             je      0x205 <_JIT_ENTRY+0x205>
// 17f: 85 ed                         testl   %ebp, %ebp
// 181: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 186: 0f 88 b8 01 00 00             js      0x344 <_JIT_ENTRY+0x344>
// 18c: 48 8b 3c 24                   movq    (%rsp), %rdi
// 190: 48 85 ff                      testq   %rdi, %rdi
// 193: 0f 84 ab 01 00 00             je      0x344 <_JIT_ENTRY+0x344>
// 199: 4c 8d 6b f8                   leaq    -0x8(%rbx), %r13
// 19d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000019f:  R_X86_64_64  _Py_NoneStruct
// 1a7: 4c 39 ff                      cmpq    %r15, %rdi
// 1aa: 74 10                         je      0x1bc <_JIT_ENTRY+0x1bc>
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  PyErr_SetHandledException
// 1b6: ff d0                         callq   *%rax
// 1b8: 4c 8b 3c 24                   movq    (%rsp), %r15
// 1bc: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1c1: 49 89 04 24                   movq    %rax, (%r12)
// 1c5: 4d 89 7d 00                   movq    %r15, (%r13)
// 1c9: 49 8b 47 08                   movq    0x8(%r15), %rax
// 1cd: 4c 89 ff                      movq    %r15, %rdi
// 1d0: ff 90 e0 00 00 00             callq   *0xe0(%rax)
// 1d6: 48 85 c0                      testq   %rax, %rax
// 1d9: 74 4b                         je      0x226 <_JIT_ENTRY+0x226>
// 1db: 48 89 03                      movq    %rax, (%rbx)
// 1de: 48 83 c3 08                   addq    $0x8, %rbx
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _JIT_CONTINUE
// 1ec: 48 89 ef                      movq    %rbp, %rdi
// 1ef: 48 89 de                      movq    %rbx, %rsi
// 1f2: 4c 89 f2                      movq    %r14, %rdx
// 1f5: 48 83 c4 18                   addq    $0x18, %rsp
// 1f9: 5b                            popq    %rbx
// 1fa: 41 5c                         popq    %r12
// 1fc: 41 5d                         popq    %r13
// 1fe: 41 5e                         popq    %r14
// 200: 41 5f                         popq    %r15
// 202: 5d                            popq    %rbp
// 203: ff e0                         jmpq    *%rax
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_Dealloc
// 20f: 4c 89 ff                      movq    %r15, %rdi
// 212: ff d0                         callq   *%rax
// 214: 85 ed                         testl   %ebp, %ebp
// 216: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 21b: 0f 89 6b ff ff ff             jns     0x18c <_JIT_ENTRY+0x18c>
// 221: e9 1e 01 00 00                jmp     0x344 <_JIT_ENTRY+0x344>
// 226: 49 8b 46 68                   movq    0x68(%r14), %rax
// 22a: 48 85 c0                      testq   %rax, %rax
// 22d: 74 3d                         je      0x26c <_JIT_ENTRY+0x26c>
// 22f: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 234: 74 36                         je      0x26c <_JIT_ENTRY+0x26c>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  PyExc_StopIteration
// 240: 48 8b 30                      movq    (%rax), %rsi
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _PyErr_ExceptionMatches
// 24d: 4c 89 f7                      movq    %r14, %rdi
// 250: ff d0                         callq   *%rax
// 252: 49 89 dc                      movq    %rbx, %r12
// 255: 85 c0                         testl   %eax, %eax
// 257: 0f 84 e7 00 00 00             je      0x344 <_JIT_ENTRY+0x344>
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _PyErr_Clear
// 267: 4c 89 f7                      movq    %r14, %rdi
// 26a: ff d0                         callq   *%rax
// 26c: 49 8b 07                      movq    (%r15), %rax
// 26f: 48 85 c0                      testq   %rax, %rax
// 272: 7f 21                         jg      0x295 <_JIT_ENTRY+0x295>
// 274: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000276:  R_X86_64_64  .rodata.str1.1
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _Py_NegativeRefcount
// 288: be 80 08 00 00                movl    $0x880, %esi            # imm = 0x880
// 28d: 4c 89 fa                      movq    %r15, %rdx
// 290: ff d0                         callq   *%rax
// 292: 49 8b 07                      movq    (%r15), %rax
// 295: 85 c0                         testl   %eax, %eax
// 297: 78 20                         js      0x2b9 <_JIT_ENTRY+0x2b9>
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a3: ff d0                         callq   *%rax
// 2a5: 49 ff 0f                      decq    (%r15)
// 2a8: 75 0f                         jne     0x2b9 <_JIT_ENTRY+0x2b9>
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  _Py_Dealloc
// 2b4: 4c 89 ff                      movq    %r15, %rdi
// 2b7: ff d0                         callq   *%rax
// 2b9: 49 29 ed                      subq    %rbp, %r13
// 2bc: 49 83 c5 b8                   addq    $-0x48, %r13
// 2c0: 49 c1 ed 03                   shrq    $0x3, %r13
// 2c4: 44 89 6d 40                   movl    %r13d, 0x40(%rbp)
// 2c8: 48 8b 45 00                   movq    (%rbp), %rax
// 2cc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002ce:  R_X86_64_64  _JIT_TARGET
// 2d6: 89 c9                         movl    %ecx, %ecx
// 2d8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2dc: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2e2: eb 71                         jmp     0x355 <_JIT_ENTRY+0x355>
// 2e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e6:  R_X86_64_64  _Py_Dealloc
// 2ee: 4c 89 ef                      movq    %r13, %rdi
// 2f1: ff d0                         callq   *%rax
// 2f3: 49 8b 07                      movq    (%r15), %rax
// 2f6: 48 85 c0                      testq   %rax, %rax
// 2f9: 0f 8f 22 fe ff ff             jg      0x121 <_JIT_ENTRY+0x121>
// 2ff: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000301:  R_X86_64_64  .rodata.str1.1
// 309: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030b:  R_X86_64_64  _Py_NegativeRefcount
// 313: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 318: 4c 89 fa                      movq    %r15, %rdx
// 31b: ff d0                         callq   *%rax
// 31d: 49 8b 07                      movq    (%r15), %rax
// 320: 85 c0                         testl   %eax, %eax
// 322: 78 20                         js      0x344 <_JIT_ENTRY+0x344>
// 324: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000326:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 32e: ff d0                         callq   *%rax
// 330: 49 ff 0f                      decq    (%r15)
// 333: 75 0f                         jne     0x344 <_JIT_ENTRY+0x344>
// 335: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000337:  R_X86_64_64  _Py_Dealloc
// 33f: 4c 89 ff                      movq    %r15, %rdi
// 342: ff d0                         callq   *%rax
// 344: 49 29 ec                      subq    %rbp, %r12
// 347: 49 83 c4 b8                   addq    $-0x48, %r12
// 34b: 49 c1 ec 03                   shrq    $0x3, %r12
// 34f: 44 89 65 40                   movl    %r12d, 0x40(%rbp)
// 353: 31 c0                         xorl    %eax, %eax
// 355: 48 83 c4 18                   addq    $0x18, %rsp
// 359: 5b                            popq    %rbx
// 35a: 41 5c                         popq    %r12
// 35c: 41 5d                         popq    %r13
// 35e: 41 5e                         popq    %r14
// 360: 41 5f                         popq    %r15
// 362: 5d                            popq    %rbp
// 363: c3                            retq
// 364: 
static const unsigned char _CHECK_EG_MATCHplus_FOR_ITER_TIER_TWO_code_body[869] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x48, 0x89, 0xf3, 0x48, 0x89, 0xfd, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x4c, 0x8d, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xcf, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xde, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xfb, 0x01, 0x00, 0x00, 0xe9, 0x16, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x88, 0xb8, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xab, 0x01, 0x00, 0x00, 0x4c, 0x8d, 0x6b, 0xf8, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xff, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x89, 0x04, 0x24, 0x4d, 0x89, 0x7d, 0x00, 0x49, 0x8b, 0x47, 0x08, 0x4c, 0x89, 0xff, 0xff, 0x90, 0xe0, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x4b, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x89, 0x6b, 0xff, 0xff, 0xff, 0xe9, 0x1e, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x46, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x3d, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x89, 0xdc, 0x85, 0xc0, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xed, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x71, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x22, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xec, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x65, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_FOR_ITER_TIER_TWO_code_holes[30] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_StopIteration, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x30b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x326, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x337, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_FOR_ITER_TIER_TWO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_FOR_ITER_TIER_TWO_data_holes[1];

// _CHECK_EG_MATCHplus_GET_AITER
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_GET_AITER.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 15 02 00 00             je      0x325 <_JIT_ENTRY+0x325>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 24 02 00 00             jle     0x341 <_JIT_ENTRY+0x341>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 42 02 00 00             jns     0x367 <_JIT_ENTRY+0x367>
// 125: e9 5e 02 00 00                jmp     0x388 <_JIT_ENTRY+0x388>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 8e 01 00 00             je      0x30c <_JIT_ENTRY+0x30c>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 02 02 00 00             js      0x388 <_JIT_ENTRY+0x388>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 f4 01 00 00             je      0x388 <_JIT_ENTRY+0x388>
// 194: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 4c 39 e7                      cmpq    %r12, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 1b4: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b9: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 1bd: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 1c1: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 1c6: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 1ca: 48 85 c9                      testq   %rcx, %rcx
// 1cd: 0f 84 b1 00 00 00             je      0x284 <_JIT_ENTRY+0x284>
// 1d3: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 1d7: 48 85 c9                      testq   %rcx, %rcx
// 1da: 0f 84 a4 00 00 00             je      0x284 <_JIT_ENTRY+0x284>
// 1e0: 4c 89 e7                      movq    %r12, %rdi
// 1e3: ff d1                         callq   *%rcx
// 1e5: 49 89 c5                      movq    %rax, %r13
// 1e8: 49 8b 04 24                   movq    (%r12), %rax
// 1ec: 48 85 c0                      testq   %rax, %rax
// 1ef: 7f 22                         jg      0x213 <_JIT_ENTRY+0x213>
// 1f1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f3:  R_X86_64_64  .rodata.str1.1
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_NegativeRefcount
// 205: be c5 02 00 00                movl    $0x2c5, %esi            # imm = 0x2C5
// 20a: 4c 89 e2                      movq    %r12, %rdx
// 20d: ff d0                         callq   *%rax
// 20f: 49 8b 04 24                   movq    (%r12), %rax
// 213: 85 c0                         testl   %eax, %eax
// 215: 78 21                         js      0x238 <_JIT_ENTRY+0x238>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 221: ff d0                         callq   *%rax
// 223: 49 ff 0c 24                   decq    (%r12)
// 227: 75 0f                         jne     0x238 <_JIT_ENTRY+0x238>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_Dealloc
// 233: 4c 89 e7                      movq    %r12, %rdi
// 236: ff d0                         callq   *%rax
// 238: 4d 85 ed                      testq   %r13, %r13
// 23b: 0f 84 4b 01 00 00             je      0x38c <_JIT_ENTRY+0x38c>
// 241: 49 8b 45 08                   movq    0x8(%r13), %rax
// 245: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 249: 48 85 c9                      testq   %rcx, %rcx
// 24c: 0f 84 5a 01 00 00             je      0x3ac <_JIT_ENTRY+0x3ac>
// 252: 48 83 79 10 00                cmpq    $0x0, 0x10(%rcx)
// 257: 0f 84 4f 01 00 00             je      0x3ac <_JIT_ENTRY+0x3ac>
// 25d: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _JIT_CONTINUE
// 26b: 4c 89 f7                      movq    %r14, %rdi
// 26e: 48 89 de                      movq    %rbx, %rsi
// 271: 4c 89 fa                      movq    %r15, %rdx
// 274: 48 83 c4 18                   addq    $0x18, %rsp
// 278: 5b                            popq    %rbx
// 279: 41 5c                         popq    %r12
// 27b: 41 5d                         popq    %r13
// 27d: 41 5e                         popq    %r14
// 27f: 41 5f                         popq    %r15
// 281: 5d                            popq    %rbp
// 282: ff e0                         jmpq    *%rax
// 284: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000286:  R_X86_64_64  PyExc_TypeError
// 28e: 48 8b 31                      movq    (%rcx), %rsi
// 291: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 295: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000297:  R_X86_64_64  .rodata.str1.1+0x39
// 29f: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002a1:  R_X86_64_64  _PyErr_Format
// 2a9: 4c 89 ff                      movq    %r15, %rdi
// 2ac: 31 c0                         xorl    %eax, %eax
// 2ae: 41 ff d0                      callq   *%r8
// 2b1: 49 8b 04 24                   movq    (%r12), %rax
// 2b5: 48 85 c0                      testq   %rax, %rax
// 2b8: 7f 22                         jg      0x2dc <_JIT_ENTRY+0x2dc>
// 2ba: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002bc:  R_X86_64_64  .rodata.str1.1
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  _Py_NegativeRefcount
// 2ce: be c1 02 00 00                movl    $0x2c1, %esi            # imm = 0x2C1
// 2d3: 4c 89 e2                      movq    %r12, %rdx
// 2d6: ff d0                         callq   *%rax
// 2d8: 49 8b 04 24                   movq    (%r12), %rax
// 2dc: 85 c0                         testl   %eax, %eax
// 2de: 0f 88 a8 00 00 00             js      0x38c <_JIT_ENTRY+0x38c>
// 2e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ee: ff d0                         callq   *%rax
// 2f0: 49 ff 0c 24                   decq    (%r12)
// 2f4: 0f 85 92 00 00 00             jne     0x38c <_JIT_ENTRY+0x38c>
// 2fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fc:  R_X86_64_64  _Py_Dealloc
// 304: 4c 89 e7                      movq    %r12, %rdi
// 307: e9 1f 01 00 00                jmp     0x42b <_JIT_ENTRY+0x42b>
// 30c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030e:  R_X86_64_64  _Py_Dealloc
// 316: 4c 89 e7                      movq    %r12, %rdi
// 319: ff d0                         callq   *%rax
// 31b: 85 ed                         testl   %ebp, %ebp
// 31d: 0f 89 63 fe ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 323: eb 63                         jmp     0x388 <_JIT_ENTRY+0x388>
// 325: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000327:  R_X86_64_64  _Py_Dealloc
// 32f: 4c 89 ef                      movq    %r13, %rdi
// 332: ff d0                         callq   *%rax
// 334: 49 8b 04 24                   movq    (%r12), %rax
// 338: 48 85 c0                      testq   %rax, %rax
// 33b: 0f 8f dc fd ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 341: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000343:  R_X86_64_64  .rodata.str1.1
// 34b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034d:  R_X86_64_64  _Py_NegativeRefcount
// 355: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 35a: 4c 89 e2                      movq    %r12, %rdx
// 35d: ff d0                         callq   *%rax
// 35f: 49 8b 04 24                   movq    (%r12), %rax
// 363: 85 c0                         testl   %eax, %eax
// 365: 78 21                         js      0x388 <_JIT_ENTRY+0x388>
// 367: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000369:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 371: ff d0                         callq   *%rax
// 373: 49 ff 0c 24                   decq    (%r12)
// 377: 75 0f                         jne     0x388 <_JIT_ENTRY+0x388>
// 379: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037b:  R_X86_64_64  _Py_Dealloc
// 383: 4c 89 e7                      movq    %r12, %rdi
// 386: ff d0                         callq   *%rax
// 388: 48 83 c3 f8                   addq    $-0x8, %rbx
// 38c: 4c 29 f3                      subq    %r14, %rbx
// 38f: 48 83 c3 b0                   addq    $-0x50, %rbx
// 393: 48 c1 eb 03                   shrq    $0x3, %rbx
// 397: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 39b: 31 c0                         xorl    %eax, %eax
// 39d: 48 83 c4 18                   addq    $0x18, %rsp
// 3a1: 5b                            popq    %rbx
// 3a2: 41 5c                         popq    %r12
// 3a4: 41 5d                         popq    %r13
// 3a6: 41 5e                         popq    %r14
// 3a8: 41 5f                         popq    %r15
// 3aa: 5d                            popq    %rbp
// 3ab: c3                            retq
// 3ac: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000003ae:  R_X86_64_64  PyExc_TypeError
// 3b6: 48 8b 31                      movq    (%rcx), %rsi
// 3b9: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 3bd: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000003bf:  R_X86_64_64  .rodata.str1.1+0x7a
// 3c7: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000003c9:  R_X86_64_64  _PyErr_Format
// 3d1: 4c 89 ff                      movq    %r15, %rdi
// 3d4: 31 c0                         xorl    %eax, %eax
// 3d6: 41 ff d0                      callq   *%r8
// 3d9: 49 8b 45 00                   movq    (%r13), %rax
// 3dd: 48 85 c0                      testq   %rax, %rax
// 3e0: 7f 22                         jg      0x404 <_JIT_ENTRY+0x404>
// 3e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003e4:  R_X86_64_64  .rodata.str1.1
// 3ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ee:  R_X86_64_64  _Py_NegativeRefcount
// 3f6: be cd 02 00 00                movl    $0x2cd, %esi            # imm = 0x2CD
// 3fb: 4c 89 ea                      movq    %r13, %rdx
// 3fe: ff d0                         callq   *%rax
// 400: 49 8b 45 00                   movq    (%r13), %rax
// 404: 85 c0                         testl   %eax, %eax
// 406: 78 84                         js      0x38c <_JIT_ENTRY+0x38c>
// 408: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000040a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 412: ff d0                         callq   *%rax
// 414: 49 ff 4d 00                   decq    (%r13)
// 418: 0f 85 6e ff ff ff             jne     0x38c <_JIT_ENTRY+0x38c>
// 41e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000420:  R_X86_64_64  _Py_Dealloc
// 428: 4c 89 ef                      movq    %r13, %rdi
// 42b: ff d0                         callq   *%rax
// 42d: e9 5a ff ff ff                jmp     0x38c <_JIT_ENTRY+0x38c>
// 432: 
static const unsigned char _CHECK_EG_MATCHplus_GET_AITER_code_body[1075] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x15, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x24, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x42, 0x02, 0x00, 0x00, 0xe9, 0x5e, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x8e, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x02, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xf4, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd1, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x4b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x48, 0x83, 0x79, 0x10, 0x00, 0x0f, 0x84, 0x4f, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xa8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x92, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xe9, 0x1f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x63, 0xfe, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xdc, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcd, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x84, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x6e, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0x5a, 0xff, 0xff, 0xff};
static const Hole _CHECK_EG_MATCHplus_GET_AITER_code_holes[40] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x297, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x327, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x343, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x34d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x369, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x37b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x3bf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7a},
    {0x3c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x3e4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x40a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x420, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an object with __aiter__ method, got %.100s\x00'async for' received an object from __aiter__ that does not implement __anext__: %.100s\x00"
// d2: 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_GET_AITER_data_body[217] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_GET_AITER_data_holes[1];

// _CHECK_EG_MATCHplus_GET_ANEXT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_GET_ANEXT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 ef 01 00 00             je      0x2ff <_JIT_ENTRY+0x2ff>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e fe 01 00 00             jle     0x31b <_JIT_ENTRY+0x31b>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 1c 02 00 00             jns     0x341 <_JIT_ENTRY+0x341>
// 125: e9 38 02 00 00                jmp     0x362 <_JIT_ENTRY+0x362>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 f6 00 00 00             je      0x274 <_JIT_ENTRY+0x274>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 dc 01 00 00             js      0x362 <_JIT_ENTRY+0x362>
// 186: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 18b: 48 85 c0                      testq   %rax, %rax
// 18e: 0f 84 ce 01 00 00             je      0x362 <_JIT_ENTRY+0x362>
// 194: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 48 39 f8                      cmpq    %rdi, %rax
// 1a1: 74 14                         je      0x1b7 <_JIT_ENTRY+0x1b7>
// 1a3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: 48 89 c7                      movq    %rax, %rdi
// 1b0: ff d1                         callq   *%rcx
// 1b2: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1b7: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1bc: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 1c0: 48 89 7b f8                   movq    %rdi, -0x8(%rbx)
// 1c4: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 1c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ca:  R_X86_64_64  PyAsyncGen_Type
// 1d2: 48 39 c8                      cmpq    %rcx, %rax
// 1d5: 0f 84 e7 00 00 00             je      0x2c2 <_JIT_ENTRY+0x2c2>
// 1db: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 1df: 48 85 c9                      testq   %rcx, %rcx
// 1e2: 0f 84 a8 00 00 00             je      0x290 <_JIT_ENTRY+0x290>
// 1e8: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 1ec: 48 85 c9                      testq   %rcx, %rcx
// 1ef: 0f 84 9b 00 00 00             je      0x290 <_JIT_ENTRY+0x290>
// 1f5: ff d1                         callq   *%rcx
// 1f7: 48 85 c0                      testq   %rax, %rax
// 1fa: 0f 84 66 01 00 00             je      0x366 <_JIT_ENTRY+0x366>
// 200: 49 89 c4                      movq    %rax, %r12
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 20d: 4c 89 e7                      movq    %r12, %rdi
// 210: ff d0                         callq   *%rax
// 212: 48 85 c0                      testq   %rax, %rax
// 215: 0f 84 6b 01 00 00             je      0x386 <_JIT_ENTRY+0x386>
// 21b: 49 89 c5                      movq    %rax, %r13
// 21e: 49 8b 04 24                   movq    (%r12), %rax
// 222: 48 85 c0                      testq   %rax, %rax
// 225: 7f 22                         jg      0x249 <_JIT_ENTRY+0x249>
// 227: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000229:  R_X86_64_64  .rodata.str1.1
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _Py_NegativeRefcount
// 23b: be fb 02 00 00                movl    $0x2fb, %esi            # imm = 0x2FB
// 240: 4c 89 e2                      movq    %r12, %rdx
// 243: ff d0                         callq   *%rax
// 245: 49 8b 04 24                   movq    (%r12), %rax
// 249: 85 c0                         testl   %eax, %eax
// 24b: 0f 88 84 00 00 00             js      0x2d5 <_JIT_ENTRY+0x2d5>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25b: ff d0                         callq   *%rax
// 25d: 49 ff 0c 24                   decq    (%r12)
// 261: 75 72                         jne     0x2d5 <_JIT_ENTRY+0x2d5>
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _Py_Dealloc
// 26d: 4c 89 e7                      movq    %r12, %rdi
// 270: ff d0                         callq   *%rax
// 272: eb 61                         jmp     0x2d5 <_JIT_ENTRY+0x2d5>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _Py_Dealloc
// 27e: 4c 89 e7                      movq    %r12, %rdi
// 281: ff d0                         callq   *%rax
// 283: 85 ed                         testl   %ebp, %ebp
// 285: 0f 89 fb fe ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 28b: e9 d2 00 00 00                jmp     0x362 <_JIT_ENTRY+0x362>
// 290: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000292:  R_X86_64_64  PyExc_TypeError
// 29a: 48 8b 31                      movq    (%rcx), %rsi
// 29d: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2a1: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002a3:  R_X86_64_64  .rodata.str1.1+0x39
// 2ab: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002ad:  R_X86_64_64  _PyErr_Format
// 2b5: 4c 89 ff                      movq    %r15, %rdi
// 2b8: 31 c0                         xorl    %eax, %eax
// 2ba: 41 ff d0                      callq   *%r8
// 2bd: e9 a4 00 00 00                jmp     0x366 <_JIT_ENTRY+0x366>
// 2c2: 48 8b 41 50                   movq    0x50(%rcx), %rax
// 2c6: ff 50 10                      callq   *0x10(%rax)
// 2c9: 49 89 c5                      movq    %rax, %r13
// 2cc: 48 85 c0                      testq   %rax, %rax
// 2cf: 0f 84 91 00 00 00             je      0x366 <_JIT_ENTRY+0x366>
// 2d5: 4c 89 2b                      movq    %r13, (%rbx)
// 2d8: 48 83 c3 08                   addq    $0x8, %rbx
// 2dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002de:  R_X86_64_64  _JIT_CONTINUE
// 2e6: 4c 89 f7                      movq    %r14, %rdi
// 2e9: 48 89 de                      movq    %rbx, %rsi
// 2ec: 4c 89 fa                      movq    %r15, %rdx
// 2ef: 48 83 c4 18                   addq    $0x18, %rsp
// 2f3: 5b                            popq    %rbx
// 2f4: 41 5c                         popq    %r12
// 2f6: 41 5d                         popq    %r13
// 2f8: 41 5e                         popq    %r14
// 2fa: 41 5f                         popq    %r15
// 2fc: 5d                            popq    %rbp
// 2fd: ff e0                         jmpq    *%rax
// 2ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000301:  R_X86_64_64  _Py_Dealloc
// 309: 4c 89 ef                      movq    %r13, %rdi
// 30c: ff d0                         callq   *%rax
// 30e: 49 8b 04 24                   movq    (%r12), %rax
// 312: 48 85 c0                      testq   %rax, %rax
// 315: 0f 8f 02 fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 31b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000031d:  R_X86_64_64  .rodata.str1.1
// 325: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000327:  R_X86_64_64  _Py_NegativeRefcount
// 32f: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 334: 4c 89 e2                      movq    %r12, %rdx
// 337: ff d0                         callq   *%rax
// 339: 49 8b 04 24                   movq    (%r12), %rax
// 33d: 85 c0                         testl   %eax, %eax
// 33f: 78 21                         js      0x362 <_JIT_ENTRY+0x362>
// 341: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000343:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 34b: ff d0                         callq   *%rax
// 34d: 49 ff 0c 24                   decq    (%r12)
// 351: 75 0f                         jne     0x362 <_JIT_ENTRY+0x362>
// 353: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000355:  R_X86_64_64  _Py_Dealloc
// 35d: 4c 89 e7                      movq    %r12, %rdi
// 360: ff d0                         callq   *%rax
// 362: 48 83 c3 f0                   addq    $-0x10, %rbx
// 366: 4c 29 f3                      subq    %r14, %rbx
// 369: 48 83 c3 b8                   addq    $-0x48, %rbx
// 36d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 371: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 375: 31 c0                         xorl    %eax, %eax
// 377: 48 83 c4 18                   addq    $0x18, %rsp
// 37b: 5b                            popq    %rbx
// 37c: 41 5c                         popq    %r12
// 37e: 41 5d                         popq    %r13
// 380: 41 5e                         popq    %r14
// 382: 41 5f                         popq    %r15
// 384: 5d                            popq    %rbp
// 385: c3                            retq
// 386: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000388:  R_X86_64_64  PyExc_TypeError
// 390: 48 8b 38                      movq    (%rax), %rdi
// 393: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 398: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 39c: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000039e:  R_X86_64_64  .rodata.str1.1+0x7c
// 3a6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000003a8:  R_X86_64_64  _PyErr_FormatFromCause
// 3b0: 31 c0                         xorl    %eax, %eax
// 3b2: ff d1                         callq   *%rcx
// 3b4: 49 8b 04 24                   movq    (%r12), %rax
// 3b8: 48 85 c0                      testq   %rax, %rax
// 3bb: 7f 22                         jg      0x3df <_JIT_ENTRY+0x3df>
// 3bd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003bf:  R_X86_64_64  .rodata.str1.1
// 3c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c9:  R_X86_64_64  _Py_NegativeRefcount
// 3d1: be f8 02 00 00                movl    $0x2f8, %esi            # imm = 0x2F8
// 3d6: 4c 89 e2                      movq    %r12, %rdx
// 3d9: ff d0                         callq   *%rax
// 3db: 49 8b 04 24                   movq    (%r12), %rax
// 3df: 85 c0                         testl   %eax, %eax
// 3e1: 78 83                         js      0x366 <_JIT_ENTRY+0x366>
// 3e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3ed: ff d0                         callq   *%rax
// 3ef: 49 ff 0c 24                   decq    (%r12)
// 3f3: 0f 85 6d ff ff ff             jne     0x366 <_JIT_ENTRY+0x366>
// 3f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003fb:  R_X86_64_64  _Py_Dealloc
// 403: 4c 89 e7                      movq    %r12, %rdi
// 406: ff d0                         callq   *%rax
// 408: e9 59 ff ff ff                jmp     0x366 <_JIT_ENTRY+0x366>
// 40d: 
static const unsigned char _CHECK_EG_MATCHplus_GET_ANEXT_code_body[1038] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xef, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xfe, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x1c, 0x02, 0x00, 0x00, 0xe9, 0x38, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xf6, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xdc, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xce, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf8, 0x74, 0x14, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x48, 0x89, 0x7b, 0xf8, 0x48, 0x8b, 0x47, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa8, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x66, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x6b, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfb, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x72, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x61, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0xfb, 0xfe, 0xff, 0xff, 0xe9, 0xd2, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0xa4, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x41, 0x50, 0xff, 0x50, 0x10, 0x49, 0x89, 0xc5, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x91, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x2b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x02, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x38, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf8, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x83, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x6d, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x59, 0xff, 0xff, 0xff};
static const Hole _CHECK_EG_MATCHplus_GET_ANEXT_code_holes[38] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyAsyncGen_Type, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x301, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x327, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x343, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x355, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x388, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x39e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7c},
    {0x3a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_FormatFromCause, 0x0},
    {0x3bf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an iterator with __anext__ method, got %.100s\x00'async for' received an invalid object from __anext__: %.100s\x00"
// ba: 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_GET_ANEXT_data_body[193] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_GET_ANEXT_data_holes[1];

// _CHECK_EG_MATCHplus_GET_AWAITABLE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_GET_AWAITABLE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 a6 00 00 00                jmp     0x17a <_JIT_ENTRY+0x17a>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 95 01 00 00             je      0x2a5 <_JIT_ENTRY+0x2a5>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e a4 01 00 00             jle     0x2c1 <_JIT_ENTRY+0x2c1>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 c2 01 00 00             jns     0x2e7 <_JIT_ENTRY+0x2e7>
// 125: e9 de 01 00 00                jmp     0x308 <_JIT_ENTRY+0x308>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 12                         js      0x17a <_JIT_ENTRY+0x17a>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 74 69                         je      0x1e3 <_JIT_ENTRY+0x1e3>
// 17a: 85 ed                         testl   %ebp, %ebp
// 17c: 0f 88 86 01 00 00             js      0x308 <_JIT_ENTRY+0x308>
// 182: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 187: 48 85 ff                      testq   %rdi, %rdi
// 18a: 0f 84 78 01 00 00             je      0x308 <_JIT_ENTRY+0x308>
// 190: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000192:  R_X86_64_64  _Py_NoneStruct
// 19a: 4c 39 ef                      cmpq    %r13, %rdi
// 19d: 74 11                         je      0x1b0 <_JIT_ENTRY+0x1b0>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  PyErr_SetHandledException
// 1a9: ff d0                         callq   *%rax
// 1ab: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 1b0: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b5: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 1b9: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 1c7: 4c 89 ef                      movq    %r13, %rdi
// 1ca: ff d0                         callq   *%rax
// 1cc: 49 89 c4                      movq    %rax, %r12
// 1cf: 48 85 c0                      testq   %rax, %rax
// 1d2: 74 27                         je      0x1fb <_JIT_ENTRY+0x1fb>
// 1d4: 49 8b 45 00                   movq    (%r13), %rax
// 1d8: 48 85 c0                      testq   %rax, %rax
// 1db: 7e 47                         jle     0x224 <_JIT_ENTRY+0x224>
// 1dd: 85 c0                         testl   %eax, %eax
// 1df: 79 69                         jns     0x24a <_JIT_ENTRY+0x24a>
// 1e1: eb 7d                         jmp     0x260 <_JIT_ENTRY+0x260>
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_Dealloc
// 1ed: 4c 89 e7                      movq    %r12, %rdi
// 1f0: ff d0                         callq   *%rax
// 1f2: 85 ed                         testl   %ebp, %ebp
// 1f4: 79 8c                         jns     0x182 <_JIT_ENTRY+0x182>
// 1f6: e9 0d 01 00 00                jmp     0x308 <_JIT_ENTRY+0x308>
// 1fb: 49 8b 75 08                   movq    0x8(%r13), %rsi
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _JIT_OPARG
// 209: 0f b7 d0                      movzwl  %ax, %edx
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _PyEval_FormatAwaitableError
// 216: 4c 89 ff                      movq    %r15, %rdi
// 219: ff d0                         callq   *%rax
// 21b: 49 8b 45 00                   movq    (%r13), %rax
// 21f: 48 85 c0                      testq   %rax, %rax
// 222: 7f b9                         jg      0x1dd <_JIT_ENTRY+0x1dd>
// 224: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000226:  R_X86_64_64  .rodata.str1.1
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _Py_NegativeRefcount
// 238: be 0c 03 00 00                movl    $0x30c, %esi            # imm = 0x30C
// 23d: 4c 89 ea                      movq    %r13, %rdx
// 240: ff d0                         callq   *%rax
// 242: 49 8b 45 00                   movq    (%r13), %rax
// 246: 85 c0                         testl   %eax, %eax
// 248: 78 16                         js      0x260 <_JIT_ENTRY+0x260>
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 254: ff d0                         callq   *%rax
// 256: 49 ff 4d 00                   decq    (%r13)
// 25a: 0f 84 a7 01 00 00             je      0x407 <_JIT_ENTRY+0x407>
// 260: 4d 85 e4                      testq   %r12, %r12
// 263: 0f 84 a3 00 00 00             je      0x30c <_JIT_ENTRY+0x30c>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  PyCoro_Type
// 273: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 278: 0f 84 ae 00 00 00             je      0x32c <_JIT_ENTRY+0x32c>
// 27e: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _JIT_CONTINUE
// 28c: 4c 89 f7                      movq    %r14, %rdi
// 28f: 48 89 de                      movq    %rbx, %rsi
// 292: 4c 89 fa                      movq    %r15, %rdx
// 295: 48 83 c4 18                   addq    $0x18, %rsp
// 299: 5b                            popq    %rbx
// 29a: 41 5c                         popq    %r12
// 29c: 41 5d                         popq    %r13
// 29e: 41 5e                         popq    %r14
// 2a0: 41 5f                         popq    %r15
// 2a2: 5d                            popq    %rbp
// 2a3: ff e0                         jmpq    *%rax
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _Py_Dealloc
// 2af: 4c 89 ef                      movq    %r13, %rdi
// 2b2: ff d0                         callq   *%rax
// 2b4: 49 8b 04 24                   movq    (%r12), %rax
// 2b8: 48 85 c0                      testq   %rax, %rax
// 2bb: 0f 8f 5c fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 2c1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c3:  R_X86_64_64  .rodata.str1.1
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _Py_NegativeRefcount
// 2d5: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2da: 4c 89 e2                      movq    %r12, %rdx
// 2dd: ff d0                         callq   *%rax
// 2df: 49 8b 04 24                   movq    (%r12), %rax
// 2e3: 85 c0                         testl   %eax, %eax
// 2e5: 78 21                         js      0x308 <_JIT_ENTRY+0x308>
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f1: ff d0                         callq   *%rax
// 2f3: 49 ff 0c 24                   decq    (%r12)
// 2f7: 75 0f                         jne     0x308 <_JIT_ENTRY+0x308>
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _Py_Dealloc
// 303: 4c 89 e7                      movq    %r12, %rdi
// 306: ff d0                         callq   *%rax
// 308: 48 83 c3 f8                   addq    $-0x8, %rbx
// 30c: 4c 29 f3                      subq    %r14, %rbx
// 30f: 48 83 c3 b0                   addq    $-0x50, %rbx
// 313: 48 c1 eb 03                   shrq    $0x3, %rbx
// 317: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 31b: 31 c0                         xorl    %eax, %eax
// 31d: 48 83 c4 18                   addq    $0x18, %rsp
// 321: 5b                            popq    %rbx
// 322: 41 5c                         popq    %r12
// 324: 41 5d                         popq    %r13
// 326: 41 5e                         popq    %r14
// 328: 41 5f                         popq    %r15
// 32a: 5d                            popq    %rbp
// 32b: c3                            retq
// 32c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032e:  R_X86_64_64  _PyGen_yf
// 336: 4c 89 e7                      movq    %r12, %rdi
// 339: ff d0                         callq   *%rax
// 33b: 48 85 c0                      testq   %rax, %rax
// 33e: 0f 84 3a ff ff ff             je      0x27e <_JIT_ENTRY+0x27e>
// 344: 49 89 c5                      movq    %rax, %r13
// 347: 48 8b 00                      movq    (%rax), %rax
// 34a: 48 85 c0                      testq   %rax, %rax
// 34d: 7f 22                         jg      0x371 <_JIT_ENTRY+0x371>
// 34f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000351:  R_X86_64_64  .rodata.str1.1
// 359: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035b:  R_X86_64_64  _Py_NegativeRefcount
// 363: be 13 03 00 00                movl    $0x313, %esi            # imm = 0x313
// 368: 4c 89 ea                      movq    %r13, %rdx
// 36b: ff d0                         callq   *%rax
// 36d: 49 8b 45 00                   movq    (%r13), %rax
// 371: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000373:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 37b: 85 c0                         testl   %eax, %eax
// 37d: 78 17                         js      0x396 <_JIT_ENTRY+0x396>
// 37f: ff d5                         callq   *%rbp
// 381: 49 ff 4d 00                   decq    (%r13)
// 385: 75 0f                         jne     0x396 <_JIT_ENTRY+0x396>
// 387: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000389:  R_X86_64_64  _Py_Dealloc
// 391: 4c 89 ef                      movq    %r13, %rdi
// 394: ff d0                         callq   *%rax
// 396: 49 8b 04 24                   movq    (%r12), %rax
// 39a: 48 85 c0                      testq   %rax, %rax
// 39d: 7f 22                         jg      0x3c1 <_JIT_ENTRY+0x3c1>
// 39f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003a1:  R_X86_64_64  .rodata.str1.1
// 3a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ab:  R_X86_64_64  _Py_NegativeRefcount
// 3b3: be 14 03 00 00                movl    $0x314, %esi            # imm = 0x314
// 3b8: 4c 89 e2                      movq    %r12, %rdx
// 3bb: ff d0                         callq   *%rax
// 3bd: 49 8b 04 24                   movq    (%r12), %rax
// 3c1: 85 c0                         testl   %eax, %eax
// 3c3: 78 17                         js      0x3dc <_JIT_ENTRY+0x3dc>
// 3c5: ff d5                         callq   *%rbp
// 3c7: 49 ff 0c 24                   decq    (%r12)
// 3cb: 75 0f                         jne     0x3dc <_JIT_ENTRY+0x3dc>
// 3cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003cf:  R_X86_64_64  _Py_Dealloc
// 3d7: 4c 89 e7                      movq    %r12, %rdi
// 3da: ff d0                         callq   *%rax
// 3dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003de:  R_X86_64_64  PyExc_RuntimeError
// 3e6: 48 8b 30                      movq    (%rax), %rsi
// 3e9: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000003eb:  R_X86_64_64  .rodata.str1.1+0x39
// 3f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f5:  R_X86_64_64  _PyErr_SetString
// 3fd: 4c 89 ff                      movq    %r15, %rdi
// 400: ff d0                         callq   *%rax
// 402: e9 05 ff ff ff                jmp     0x30c <_JIT_ENTRY+0x30c>
// 407: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000409:  R_X86_64_64  _Py_Dealloc
// 411: 4c 89 ef                      movq    %r13, %rdi
// 414: ff d0                         callq   *%rax
// 416: 4d 85 e4                      testq   %r12, %r12
// 419: 0f 85 4a fe ff ff             jne     0x269 <_JIT_ENTRY+0x269>
// 41f: e9 e8 fe ff ff                jmp     0x30c <_JIT_ENTRY+0x30c>
// 424: 
static const unsigned char _CHECK_EG_MATCHplus_GET_AWAITABLE_code_body[1061] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x95, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xa4, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xc2, 0x01, 0x00, 0x00, 0xe9, 0xde, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x69, 0x85, 0xed, 0x0f, 0x88, 0x86, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x78, 0x01, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xef, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x85, 0xc0, 0x74, 0x27, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x47, 0x85, 0xc0, 0x79, 0x69, 0xeb, 0x7d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x79, 0x8c, 0xe9, 0x0d, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x75, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xb9, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xa7, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x5c, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x3a, 0xff, 0xff, 0xff, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x05, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x85, 0x4a, 0xfe, 0xff, 0xff, 0xe9, 0xe8, 0xfe, 0xff, 0xff};
static const Hole _CHECK_EG_MATCHplus_GET_AWAITABLE_code_holes[41] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatAwaitableError, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x32e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyGen_yf, 0x0},
    {0x351, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x35b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x373, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x389, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3a1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3de, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_RuntimeError, 0x0},
    {0x3eb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x3f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x409, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00coroutine is being awaited already\x00'
// 5c: 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_GET_AWAITABLE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x77, 0x61, 0x69, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_GET_AWAITABLE_data_holes[1];

// _CHECK_EG_MATCHplus_GET_ITER
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_GET_ITER.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 63                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 81 00 00 00             jns     0x106 <_JIT_ENTRY+0x106>
// 85: e9 9d 00 00 00                jmp     0x127 <_JIT_ENTRY+0x127>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c7 00 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// c6: 49 8b 04 24                   movq    (%r12), %rax
// ca: 48 85 c0                      testq   %rax, %rax
// cd: 0f 8e d6 00 00 00             jle     0x1a9 <_JIT_ENTRY+0x1a9>
// d3: 85 c0                         testl   %eax, %eax
// d5: 0f 89 f4 00 00 00             jns     0x1cf <_JIT_ENTRY+0x1cf>
// db: e9 05 01 00 00                jmp     0x1e5 <_JIT_ENTRY+0x1e5>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f9: 4c 89 ea                      movq    %r13, %rdx
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 21                         js      0x127 <_JIT_ENTRY+0x127>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 4d 00                   decq    (%r13)
// 116: 75 0f                         jne     0x127 <_JIT_ENTRY+0x127>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_Dealloc
// 122: 4c 89 ef                      movq    %r13, %rdi
// 125: ff d0                         callq   *%rax
// 127: 49 8b 04 24                   movq    (%r12), %rax
// 12b: 48 85 c0                      testq   %rax, %rax
// 12e: 7e 09                         jle     0x139 <_JIT_ENTRY+0x139>
// 130: 85 c0                         testl   %eax, %eax
// 132: 79 2f                         jns     0x163 <_JIT_ENTRY+0x163>
// 134: e9 85 01 00 00                jmp     0x2be <_JIT_ENTRY+0x2be>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_NegativeRefcount
// 14d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 152: 4c 89 e2                      movq    %r12, %rdx
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 5b 01 00 00             js      0x2be <_JIT_ENTRY+0x2be>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 45 01 00 00             jne     0x2be <_JIT_ENTRY+0x2be>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: 4c 89 e7                      movq    %r12, %rdi
// 186: ff d0                         callq   *%rax
// 188: e9 31 01 00 00                jmp     0x2be <_JIT_ENTRY+0x2be>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: 4c 89 ef                      movq    %r13, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 49 8b 04 24                   movq    (%r12), %rax
// 1a0: 48 85 c0                      testq   %rax, %rax
// 1a3: 0f 8f 2a ff ff ff             jg      0xd3 <_JIT_ENTRY+0xd3>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 49 8b 04 24                   movq    (%r12), %rax
// 1cb: 85 c0                         testl   %eax, %eax
// 1cd: 78 16                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 49 ff 0c 24                   decq    (%r12)
// 1df: 0f 84 c2 00 00 00             je      0x2a7 <_JIT_ENTRY+0x2a7>
// 1e5: 85 ed                         testl   %ebp, %ebp
// 1e7: 0f 88 d1 00 00 00             js      0x2be <_JIT_ENTRY+0x2be>
// 1ed: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1f2: 48 85 ff                      testq   %rdi, %rdi
// 1f5: 0f 84 c3 00 00 00             je      0x2be <_JIT_ENTRY+0x2be>
// 1fb: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001fd:  R_X86_64_64  _Py_NoneStruct
// 205: 4c 39 e7                      cmpq    %r12, %rdi
// 208: 74 11                         je      0x21b <_JIT_ENTRY+0x21b>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyErr_SetHandledException
// 214: ff d0                         callq   *%rax
// 216: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 21b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 220: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 224: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  PyObject_GetIter
// 232: 4c 89 e7                      movq    %r12, %rdi
// 235: ff d0                         callq   *%rax
// 237: 49 89 c5                      movq    %rax, %r13
// 23a: 49 8b 04 24                   movq    (%r12), %rax
// 23e: 48 85 c0                      testq   %rax, %rax
// 241: 7f 22                         jg      0x265 <_JIT_ENTRY+0x265>
// 243: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000245:  R_X86_64_64  .rodata.str1.1
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_NegativeRefcount
// 257: be 4a 08 00 00                movl    $0x84a, %esi            # imm = 0x84A
// 25c: 4c 89 e2                      movq    %r12, %rdx
// 25f: ff d0                         callq   *%rax
// 261: 49 8b 04 24                   movq    (%r12), %rax
// 265: 85 c0                         testl   %eax, %eax
// 267: 78 12                         js      0x27b <_JIT_ENTRY+0x27b>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 273: ff d0                         callq   *%rax
// 275: 49 ff 0c 24                   decq    (%r12)
// 279: 74 67                         je      0x2e2 <_JIT_ENTRY+0x2e2>
// 27b: 4d 85 ed                      testq   %r13, %r13
// 27e: 74 42                         je      0x2c2 <_JIT_ENTRY+0x2c2>
// 280: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _JIT_CONTINUE
// 28e: 4c 89 f7                      movq    %r14, %rdi
// 291: 48 89 de                      movq    %rbx, %rsi
// 294: 4c 89 fa                      movq    %r15, %rdx
// 297: 48 83 c4 18                   addq    $0x18, %rsp
// 29b: 5b                            popq    %rbx
// 29c: 41 5c                         popq    %r12
// 29e: 41 5d                         popq    %r13
// 2a0: 41 5e                         popq    %r14
// 2a2: 41 5f                         popq    %r15
// 2a4: 5d                            popq    %rbp
// 2a5: ff e0                         jmpq    *%rax
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _Py_Dealloc
// 2b1: 4c 89 e7                      movq    %r12, %rdi
// 2b4: ff d0                         callq   *%rax
// 2b6: 85 ed                         testl   %ebp, %ebp
// 2b8: 0f 89 2f ff ff ff             jns     0x1ed <_JIT_ENTRY+0x1ed>
// 2be: 48 83 c3 f8                   addq    $-0x8, %rbx
// 2c2: 4c 29 f3                      subq    %r14, %rbx
// 2c5: 48 83 c3 b0                   addq    $-0x50, %rbx
// 2c9: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2cd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2d1: 31 c0                         xorl    %eax, %eax
// 2d3: 48 83 c4 18                   addq    $0x18, %rsp
// 2d7: 5b                            popq    %rbx
// 2d8: 41 5c                         popq    %r12
// 2da: 41 5d                         popq    %r13
// 2dc: 41 5e                         popq    %r14
// 2de: 41 5f                         popq    %r15
// 2e0: 5d                            popq    %rbp
// 2e1: c3                            retq
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  _Py_Dealloc
// 2ec: 4c 89 e7                      movq    %r12, %rdi
// 2ef: ff d0                         callq   *%rax
// 2f1: 4d 85 ed                      testq   %r13, %r13
// 2f4: 75 8a                         jne     0x280 <_JIT_ENTRY+0x280>
// 2f6: eb ca                         jmp     0x2c2 <_JIT_ENTRY+0x2c2>
// 2f8: 
static const unsigned char _CHECK_EG_MATCHplus_GET_ITER_code_body[761] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0x85, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x5b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x45, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x31, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xc2, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xd1, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x67, 0x4d, 0x85, 0xed, 0x74, 0x42, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x2f, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0x8a, 0xeb, 0xca};
static const Hole _CHECK_EG_MATCHplus_GET_ITER_code_holes[27] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_GET_ITER_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_GET_ITER_data_holes[1];

// _CHECK_EG_MATCHplus_GET_LEN
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_GET_LEN.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 20 01 00 00             je      0x22f <_JIT_ENTRY+0x22f>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 2f 01 00 00             jle     0x24a <_JIT_ENTRY+0x24a>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 4c 01 00 00             jns     0x26f <_JIT_ENTRY+0x26f>
// 123: e9 67 01 00 00                jmp     0x28f <_JIT_ENTRY+0x28f>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 9d 00 00 00             je      0x216 <_JIT_ENTRY+0x216>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 0e 01 00 00             js      0x28f <_JIT_ENTRY+0x28f>
// 181: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 186: 48 85 c0                      testq   %rax, %rax
// 189: 0f 84 00 01 00 00             je      0x28f <_JIT_ENTRY+0x28f>
// 18f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 f8                      cmpq    %rdi, %rax
// 19c: 74 14                         je      0x1b2 <_JIT_ENTRY+0x1b2>
// 19e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: 48 89 c7                      movq    %rax, %rdi
// 1ab: ff d1                         callq   *%rcx
// 1ad: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1b2: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b7: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 1bb: 48 89 7b f8                   movq    %rdi, -0x8(%rbx)
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  PyObject_Size
// 1c9: ff d0                         callq   *%rax
// 1cb: 48 85 c0                      testq   %rax, %rax
// 1ce: 0f 88 bf 00 00 00             js      0x293 <_JIT_ENTRY+0x293>
// 1d4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d6:  R_X86_64_64  PyLong_FromSsize_t
// 1de: 48 89 c7                      movq    %rax, %rdi
// 1e1: ff d1                         callq   *%rcx
// 1e3: 48 85 c0                      testq   %rax, %rax
// 1e6: 0f 84 a7 00 00 00             je      0x293 <_JIT_ENTRY+0x293>
// 1ec: 48 89 03                      movq    %rax, (%rbx)
// 1ef: 48 83 c3 08                   addq    $0x8, %rbx
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _JIT_CONTINUE
// 1fd: 4c 89 f7                      movq    %r14, %rdi
// 200: 48 89 de                      movq    %rbx, %rsi
// 203: 4c 89 e2                      movq    %r12, %rdx
// 206: 48 83 c4 18                   addq    $0x18, %rsp
// 20a: 5b                            popq    %rbx
// 20b: 41 5c                         popq    %r12
// 20d: 41 5d                         popq    %r13
// 20f: 41 5e                         popq    %r14
// 211: 41 5f                         popq    %r15
// 213: 5d                            popq    %rbp
// 214: ff e0                         jmpq    *%rax
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_Dealloc
// 220: 4c 89 ff                      movq    %r15, %rdi
// 223: ff d0                         callq   *%rax
// 225: 85 ed                         testl   %ebp, %ebp
// 227: 0f 89 54 ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 22d: eb 60                         jmp     0x28f <_JIT_ENTRY+0x28f>
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _Py_Dealloc
// 239: 4c 89 ef                      movq    %r13, %rdi
// 23c: ff d0                         callq   *%rax
// 23e: 49 8b 07                      movq    (%r15), %rax
// 241: 48 85 c0                      testq   %rax, %rax
// 244: 0f 8f d1 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 24a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024c:  R_X86_64_64  .rodata.str1.1
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _Py_NegativeRefcount
// 25e: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 263: 4c 89 fa                      movq    %r15, %rdx
// 266: ff d0                         callq   *%rax
// 268: 49 8b 07                      movq    (%r15), %rax
// 26b: 85 c0                         testl   %eax, %eax
// 26d: 78 20                         js      0x28f <_JIT_ENTRY+0x28f>
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 279: ff d0                         callq   *%rax
// 27b: 49 ff 0f                      decq    (%r15)
// 27e: 75 0f                         jne     0x28f <_JIT_ENTRY+0x28f>
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_Dealloc
// 28a: 4c 89 ff                      movq    %r15, %rdi
// 28d: ff d0                         callq   *%rax
// 28f: 48 83 c3 f0                   addq    $-0x10, %rbx
// 293: 4c 29 f3                      subq    %r14, %rbx
// 296: 48 83 c3 b8                   addq    $-0x48, %rbx
// 29a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 29e: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2a2: 31 c0                         xorl    %eax, %eax
// 2a4: 48 83 c4 18                   addq    $0x18, %rsp
// 2a8: 5b                            popq    %rbx
// 2a9: 41 5c                         popq    %r12
// 2ab: 41 5d                         popq    %r13
// 2ad: 41 5e                         popq    %r14
// 2af: 41 5f                         popq    %r15
// 2b1: 5d                            popq    %rbp
// 2b2: c3                            retq
// 2b3: 
static const unsigned char _CHECK_EG_MATCHplus_GET_LEN_code_body[692] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x20, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x2f, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x4c, 0x01, 0x00, 0x00, 0xe9, 0x67, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x9d, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x0e, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x00, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf8, 0x74, 0x14, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x48, 0x89, 0x7b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xbf, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x54, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xd1, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_GET_LEN_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_GET_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_GET_LEN_data_holes[1];

// _CHECK_EG_MATCHplus_GET_YIELD_FROM_ITER
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_GET_YIELD_FROM_ITER.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 63                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 81 00 00 00             jns     0x106 <_JIT_ENTRY+0x106>
// 85: e9 9d 00 00 00                jmp     0x127 <_JIT_ENTRY+0x127>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c7 00 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// c6: 49 8b 04 24                   movq    (%r12), %rax
// ca: 48 85 c0                      testq   %rax, %rax
// cd: 0f 8e d6 00 00 00             jle     0x1a9 <_JIT_ENTRY+0x1a9>
// d3: 85 c0                         testl   %eax, %eax
// d5: 0f 89 f4 00 00 00             jns     0x1cf <_JIT_ENTRY+0x1cf>
// db: e9 05 01 00 00                jmp     0x1e5 <_JIT_ENTRY+0x1e5>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f9: 4c 89 ea                      movq    %r13, %rdx
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 21                         js      0x127 <_JIT_ENTRY+0x127>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 4d 00                   decq    (%r13)
// 116: 75 0f                         jne     0x127 <_JIT_ENTRY+0x127>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_Dealloc
// 122: 4c 89 ef                      movq    %r13, %rdi
// 125: ff d0                         callq   *%rax
// 127: 49 8b 04 24                   movq    (%r12), %rax
// 12b: 48 85 c0                      testq   %rax, %rax
// 12e: 7e 09                         jle     0x139 <_JIT_ENTRY+0x139>
// 130: 85 c0                         testl   %eax, %eax
// 132: 79 2f                         jns     0x163 <_JIT_ENTRY+0x163>
// 134: e9 9d 01 00 00                jmp     0x2d6 <_JIT_ENTRY+0x2d6>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_NegativeRefcount
// 14d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 152: 4c 89 e2                      movq    %r12, %rdx
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 73 01 00 00             js      0x2d6 <_JIT_ENTRY+0x2d6>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 5d 01 00 00             jne     0x2d6 <_JIT_ENTRY+0x2d6>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: 4c 89 e7                      movq    %r12, %rdi
// 186: ff d0                         callq   *%rax
// 188: e9 49 01 00 00                jmp     0x2d6 <_JIT_ENTRY+0x2d6>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: 4c 89 ef                      movq    %r13, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 49 8b 04 24                   movq    (%r12), %rax
// 1a0: 48 85 c0                      testq   %rax, %rax
// 1a3: 0f 8f 2a ff ff ff             jg      0xd3 <_JIT_ENTRY+0xd3>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 49 8b 04 24                   movq    (%r12), %rax
// 1cb: 85 c0                         testl   %eax, %eax
// 1cd: 78 16                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 49 ff 0c 24                   decq    (%r12)
// 1df: 0f 84 da 00 00 00             je      0x2bf <_JIT_ENTRY+0x2bf>
// 1e5: 85 ed                         testl   %ebp, %ebp
// 1e7: 0f 88 e9 00 00 00             js      0x2d6 <_JIT_ENTRY+0x2d6>
// 1ed: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1f2: 48 85 ff                      testq   %rdi, %rdi
// 1f5: 0f 84 db 00 00 00             je      0x2d6 <_JIT_ENTRY+0x2d6>
// 1fb: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001fd:  R_X86_64_64  _Py_NoneStruct
// 205: 4c 39 e7                      cmpq    %r12, %rdi
// 208: 74 11                         je      0x21b <_JIT_ENTRY+0x21b>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyErr_SetHandledException
// 214: ff d0                         callq   *%rax
// 216: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 21b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 220: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 224: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 228: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 22d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000022f:  R_X86_64_64  PyCoro_Type
// 237: 48 39 c8                      cmpq    %rcx, %rax
// 23a: 0f 84 ba 00 00 00             je      0x2fa <_JIT_ENTRY+0x2fa>
// 240: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000242:  R_X86_64_64  PyGen_Type
// 24a: 48 39 c8                      cmpq    %rcx, %rax
// 24d: 0f 84 b5 00 00 00             je      0x308 <_JIT_ENTRY+0x308>
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  PyObject_GetIter
// 25d: 4c 89 e7                      movq    %r12, %rdi
// 260: ff d0                         callq   *%rax
// 262: 48 85 c0                      testq   %rax, %rax
// 265: 74 73                         je      0x2da <_JIT_ENTRY+0x2da>
// 267: 49 89 c5                      movq    %rax, %r13
// 26a: 49 8b 04 24                   movq    (%r12), %rax
// 26e: 48 85 c0                      testq   %rax, %rax
// 271: 7f 22                         jg      0x295 <_JIT_ENTRY+0x295>
// 273: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000275:  R_X86_64_64  .rodata.str1.1
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _Py_NegativeRefcount
// 287: be 6a 08 00 00                movl    $0x86a, %esi            # imm = 0x86A
// 28c: 4c 89 e2                      movq    %r12, %rdx
// 28f: ff d0                         callq   *%rax
// 291: 49 8b 04 24                   movq    (%r12), %rax
// 295: 85 c0                         testl   %eax, %eax
// 297: 78 21                         js      0x2ba <_JIT_ENTRY+0x2ba>
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a3: ff d0                         callq   *%rax
// 2a5: 49 ff 0c 24                   decq    (%r12)
// 2a9: 75 0f                         jne     0x2ba <_JIT_ENTRY+0x2ba>
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_Dealloc
// 2b5: 4c 89 e7                      movq    %r12, %rdi
// 2b8: ff d0                         callq   *%rax
// 2ba: 4d 89 ec                      movq    %r13, %r12
// 2bd: eb 49                         jmp     0x308 <_JIT_ENTRY+0x308>
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_Dealloc
// 2c9: 4c 89 e7                      movq    %r12, %rdi
// 2cc: ff d0                         callq   *%rax
// 2ce: 85 ed                         testl   %ebp, %ebp
// 2d0: 0f 89 17 ff ff ff             jns     0x1ed <_JIT_ENTRY+0x1ed>
// 2d6: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2da: 4c 29 f3                      subq    %r14, %rbx
// 2dd: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2e1: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2e5: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2e9: 31 c0                         xorl    %eax, %eax
// 2eb: 48 83 c4 18                   addq    $0x18, %rsp
// 2ef: 5b                            popq    %rbx
// 2f0: 41 5c                         popq    %r12
// 2f2: 41 5d                         popq    %r13
// 2f4: 41 5e                         popq    %r14
// 2f6: 41 5f                         popq    %r15
// 2f8: 5d                            popq    %rbp
// 2f9: c3                            retq
// 2fa: 49 8b 06                      movq    (%r14), %rax
// 2fd: 0f b7 40 30                   movzwl  0x30(%rax), %eax
// 301: a9 80 01 00 00                testl   $0x180, %eax            # imm = 0x180
// 306: 74 27                         je      0x32f <_JIT_ENTRY+0x32f>
// 308: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 30c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030e:  R_X86_64_64  _JIT_CONTINUE
// 316: 4c 89 f7                      movq    %r14, %rdi
// 319: 48 89 de                      movq    %rbx, %rsi
// 31c: 4c 89 fa                      movq    %r15, %rdx
// 31f: 48 83 c4 18                   addq    $0x18, %rsp
// 323: 5b                            popq    %rbx
// 324: 41 5c                         popq    %r12
// 326: 41 5d                         popq    %r13
// 328: 41 5e                         popq    %r14
// 32a: 41 5f                         popq    %r15
// 32c: 5d                            popq    %rbp
// 32d: ff e0                         jmpq    *%rax
// 32f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000331:  R_X86_64_64  PyExc_TypeError
// 339: 48 8b 30                      movq    (%rax), %rsi
// 33c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000033e:  R_X86_64_64  .rodata.str1.1+0x39
// 346: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000348:  R_X86_64_64  _PyErr_SetString
// 350: 4c 89 ff                      movq    %r15, %rdi
// 353: ff d0                         callq   *%rax
// 355: eb 83                         jmp     0x2da <_JIT_ENTRY+0x2da>
// 357: 
static const unsigned char _CHECK_EG_MATCHplus_GET_YIELD_FROM_ITER_code_body[856] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0x9d, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x73, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x5d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x49, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xda, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xe9, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xdb, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0xba, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0xb5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x73, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x6a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0xeb, 0x49, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x17, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x06, 0x0f, 0xb7, 0x40, 0x30, 0xa9, 0x80, 0x01, 0x00, 0x00, 0x74, 0x27, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x83};
static const Hole _CHECK_EG_MATCHplus_GET_YIELD_FROM_ITER_code_holes[32] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyGen_Type, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x331, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x348, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot 'yield from' a coroutine object in a non-coroutine generator\x00"
// 7d: 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_GET_YIELD_FROM_ITER_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x27, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_GET_YIELD_FROM_ITER_data_holes[1];

// _CHECK_EG_MATCHplus_GUARD_BOTH_FLOAT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_GUARD_BOTH_FLOAT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 62                         jle     0xdf <_JIT_ENTRY+0xdf>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 80 00 00 00             jns     0x105 <_JIT_ENTRY+0x105>
// 85: e9 9c 00 00 00                jmp     0x126 <_JIT_ENTRY+0x126>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c3 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// c6: 49 8b 07                      movq    (%r15), %rax
// c9: 48 85 c0                      testq   %rax, %rax
// cc: 0f 8e d2 00 00 00             jle     0x1a4 <_JIT_ENTRY+0x1a4>
// d2: 85 c0                         testl   %eax, %eax
// d4: 0f 89 ef 00 00 00             jns     0x1c9 <_JIT_ENTRY+0x1c9>
// da: e9 ff 00 00 00                jmp     0x1de <_JIT_ENTRY+0x1de>
// df: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e1:  R_X86_64_64  .rodata.str1.1
// e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000eb:  R_X86_64_64  _Py_NegativeRefcount
// f3: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f8: 4c 89 ea                      movq    %r13, %rdx
// fb: ff d0                         callq   *%rax
// fd: 49 8b 45 00                   movq    (%r13), %rax
// 101: 85 c0                         testl   %eax, %eax
// 103: 78 21                         js      0x126 <_JIT_ENTRY+0x126>
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10f: ff d0                         callq   *%rax
// 111: 49 ff 4d 00                   decq    (%r13)
// 115: 75 0f                         jne     0x126 <_JIT_ENTRY+0x126>
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_Dealloc
// 121: 4c 89 ef                      movq    %r13, %rdi
// 124: ff d0                         callq   *%rax
// 126: 49 8b 07                      movq    (%r15), %rax
// 129: 48 85 c0                      testq   %rax, %rax
// 12c: 7e 09                         jle     0x137 <_JIT_ENTRY+0x137>
// 12e: 85 c0                         testl   %eax, %eax
// 130: 79 2e                         jns     0x160 <_JIT_ENTRY+0x160>
// 132: e9 41 01 00 00                jmp     0x278 <_JIT_ENTRY+0x278>
// 137: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000139:  R_X86_64_64  .rodata.str1.1
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_NegativeRefcount
// 14b: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 150: 4c 89 fa                      movq    %r15, %rdx
// 153: ff d0                         callq   *%rax
// 155: 49 8b 07                      movq    (%r15), %rax
// 158: 85 c0                         testl   %eax, %eax
// 15a: 0f 88 18 01 00 00             js      0x278 <_JIT_ENTRY+0x278>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0f                      decq    (%r15)
// 16f: 0f 85 03 01 00 00             jne     0x278 <_JIT_ENTRY+0x278>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ff                      movq    %r15, %rdi
// 182: ff d0                         callq   *%rax
// 184: e9 ef 00 00 00                jmp     0x278 <_JIT_ENTRY+0x278>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 49 8b 07                      movq    (%r15), %rax
// 19b: 48 85 c0                      testq   %rax, %rax
// 19e: 0f 8f 2e ff ff ff             jg      0xd2 <_JIT_ENTRY+0xd2>
// 1a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a6:  R_X86_64_64  .rodata.str1.1
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_NegativeRefcount
// 1b8: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1bd: 4c 89 fa                      movq    %r15, %rdx
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 8b 07                      movq    (%r15), %rax
// 1c5: 85 c0                         testl   %eax, %eax
// 1c7: 78 15                         js      0x1de <_JIT_ENTRY+0x1de>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d3: ff d0                         callq   *%rax
// 1d5: 49 ff 0f                      decq    (%r15)
// 1d8: 0f 84 83 00 00 00             je      0x261 <_JIT_ENTRY+0x261>
// 1de: 85 ed                         testl   %ebp, %ebp
// 1e0: 0f 88 92 00 00 00             js      0x278 <_JIT_ENTRY+0x278>
// 1e6: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1eb: 48 85 ff                      testq   %rdi, %rdi
// 1ee: 0f 84 84 00 00 00             je      0x278 <_JIT_ENTRY+0x278>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_NoneStruct
// 1fe: 48 39 c7                      cmpq    %rax, %rdi
// 201: 74 11                         je      0x214 <_JIT_ENTRY+0x214>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  PyErr_SetHandledException
// 20d: ff d0                         callq   *%rax
// 20f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 214: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 219: 48 89 53 f0                   movq    %rdx, -0x10(%rbx)
// 21d: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 221: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000223:  R_X86_64_64  PyFloat_Type
// 22b: 48 39 4a 08                   cmpq    %rcx, 0x8(%rdx)
// 22f: 75 06                         jne     0x237 <_JIT_ENTRY+0x237>
// 231: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 235: 74 65                         je      0x29c <_JIT_ENTRY+0x29c>
// 237: 4c 29 f3                      subq    %r14, %rbx
// 23a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 23e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 242: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 246: 49 8b 06                      movq    (%r14), %rax
// 249: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024b:  R_X86_64_64  _JIT_TARGET
// 253: 89 c9                         movl    %ecx, %ecx
// 255: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 259: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 25f: eb 2c                         jmp     0x28d <_JIT_ENTRY+0x28d>
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_Dealloc
// 26b: 4c 89 ff                      movq    %r15, %rdi
// 26e: ff d0                         callq   *%rax
// 270: 85 ed                         testl   %ebp, %ebp
// 272: 0f 89 6e ff ff ff             jns     0x1e6 <_JIT_ENTRY+0x1e6>
// 278: 48 83 c3 f0                   addq    $-0x10, %rbx
// 27c: 4c 29 f3                      subq    %r14, %rbx
// 27f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 283: 48 c1 eb 03                   shrq    $0x3, %rbx
// 287: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 28b: 31 c0                         xorl    %eax, %eax
// 28d: 48 83 c4 18                   addq    $0x18, %rsp
// 291: 5b                            popq    %rbx
// 292: 41 5c                         popq    %r12
// 294: 41 5d                         popq    %r13
// 296: 41 5e                         popq    %r14
// 298: 41 5f                         popq    %r15
// 29a: 5d                            popq    %rbp
// 29b: c3                            retq
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _JIT_CONTINUE
// 2a6: 4c 89 f7                      movq    %r14, %rdi
// 2a9: 48 89 de                      movq    %rbx, %rsi
// 2ac: 4c 89 e2                      movq    %r12, %rdx
// 2af: 48 83 c4 18                   addq    $0x18, %rsp
// 2b3: 5b                            popq    %rbx
// 2b4: 41 5c                         popq    %r12
// 2b6: 41 5d                         popq    %r13
// 2b8: 41 5e                         popq    %r14
// 2ba: 41 5f                         popq    %r15
// 2bc: 5d                            popq    %rbp
// 2bd: ff e0                         jmpq    *%rax
// 2bf: 
static const unsigned char _CHECK_EG_MATCHplus_GUARD_BOTH_FLOAT_code_body[704] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x62, 0x85, 0xc0, 0x0f, 0x89, 0x80, 0x00, 0x00, 0x00, 0xe9, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd2, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xef, 0x00, 0x00, 0x00, 0xe9, 0xff, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2e, 0xe9, 0x41, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x18, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x03, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xef, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2e, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x92, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x89, 0x53, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4a, 0x08, 0x75, 0x06, 0x48, 0x39, 0x48, 0x08, 0x74, 0x65, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x6e, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_GUARD_BOTH_FLOAT_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_GUARD_BOTH_FLOAT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_GUARD_BOTH_FLOAT_data_holes[1];

// _CHECK_EG_MATCHplus_GUARD_BOTH_INT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_GUARD_BOTH_INT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 62                         jle     0xdf <_JIT_ENTRY+0xdf>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 80 00 00 00             jns     0x105 <_JIT_ENTRY+0x105>
// 85: e9 9c 00 00 00                jmp     0x126 <_JIT_ENTRY+0x126>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c3 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// c6: 49 8b 07                      movq    (%r15), %rax
// c9: 48 85 c0                      testq   %rax, %rax
// cc: 0f 8e d2 00 00 00             jle     0x1a4 <_JIT_ENTRY+0x1a4>
// d2: 85 c0                         testl   %eax, %eax
// d4: 0f 89 ef 00 00 00             jns     0x1c9 <_JIT_ENTRY+0x1c9>
// da: e9 ff 00 00 00                jmp     0x1de <_JIT_ENTRY+0x1de>
// df: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e1:  R_X86_64_64  .rodata.str1.1
// e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000eb:  R_X86_64_64  _Py_NegativeRefcount
// f3: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f8: 4c 89 ea                      movq    %r13, %rdx
// fb: ff d0                         callq   *%rax
// fd: 49 8b 45 00                   movq    (%r13), %rax
// 101: 85 c0                         testl   %eax, %eax
// 103: 78 21                         js      0x126 <_JIT_ENTRY+0x126>
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10f: ff d0                         callq   *%rax
// 111: 49 ff 4d 00                   decq    (%r13)
// 115: 75 0f                         jne     0x126 <_JIT_ENTRY+0x126>
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_Dealloc
// 121: 4c 89 ef                      movq    %r13, %rdi
// 124: ff d0                         callq   *%rax
// 126: 49 8b 07                      movq    (%r15), %rax
// 129: 48 85 c0                      testq   %rax, %rax
// 12c: 7e 09                         jle     0x137 <_JIT_ENTRY+0x137>
// 12e: 85 c0                         testl   %eax, %eax
// 130: 79 2e                         jns     0x160 <_JIT_ENTRY+0x160>
// 132: e9 41 01 00 00                jmp     0x278 <_JIT_ENTRY+0x278>
// 137: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000139:  R_X86_64_64  .rodata.str1.1
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_NegativeRefcount
// 14b: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 150: 4c 89 fa                      movq    %r15, %rdx
// 153: ff d0                         callq   *%rax
// 155: 49 8b 07                      movq    (%r15), %rax
// 158: 85 c0                         testl   %eax, %eax
// 15a: 0f 88 18 01 00 00             js      0x278 <_JIT_ENTRY+0x278>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0f                      decq    (%r15)
// 16f: 0f 85 03 01 00 00             jne     0x278 <_JIT_ENTRY+0x278>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ff                      movq    %r15, %rdi
// 182: ff d0                         callq   *%rax
// 184: e9 ef 00 00 00                jmp     0x278 <_JIT_ENTRY+0x278>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 49 8b 07                      movq    (%r15), %rax
// 19b: 48 85 c0                      testq   %rax, %rax
// 19e: 0f 8f 2e ff ff ff             jg      0xd2 <_JIT_ENTRY+0xd2>
// 1a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a6:  R_X86_64_64  .rodata.str1.1
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_NegativeRefcount
// 1b8: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1bd: 4c 89 fa                      movq    %r15, %rdx
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 8b 07                      movq    (%r15), %rax
// 1c5: 85 c0                         testl   %eax, %eax
// 1c7: 78 15                         js      0x1de <_JIT_ENTRY+0x1de>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d3: ff d0                         callq   *%rax
// 1d5: 49 ff 0f                      decq    (%r15)
// 1d8: 0f 84 83 00 00 00             je      0x261 <_JIT_ENTRY+0x261>
// 1de: 85 ed                         testl   %ebp, %ebp
// 1e0: 0f 88 92 00 00 00             js      0x278 <_JIT_ENTRY+0x278>
// 1e6: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1eb: 48 85 ff                      testq   %rdi, %rdi
// 1ee: 0f 84 84 00 00 00             je      0x278 <_JIT_ENTRY+0x278>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_NoneStruct
// 1fe: 48 39 c7                      cmpq    %rax, %rdi
// 201: 74 11                         je      0x214 <_JIT_ENTRY+0x214>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  PyErr_SetHandledException
// 20d: ff d0                         callq   *%rax
// 20f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 214: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 219: 48 89 53 f0                   movq    %rdx, -0x10(%rbx)
// 21d: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 221: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000223:  R_X86_64_64  PyLong_Type
// 22b: 48 39 4a 08                   cmpq    %rcx, 0x8(%rdx)
// 22f: 75 06                         jne     0x237 <_JIT_ENTRY+0x237>
// 231: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 235: 74 65                         je      0x29c <_JIT_ENTRY+0x29c>
// 237: 4c 29 f3                      subq    %r14, %rbx
// 23a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 23e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 242: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 246: 49 8b 06                      movq    (%r14), %rax
// 249: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024b:  R_X86_64_64  _JIT_TARGET
// 253: 89 c9                         movl    %ecx, %ecx
// 255: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 259: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 25f: eb 2c                         jmp     0x28d <_JIT_ENTRY+0x28d>
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_Dealloc
// 26b: 4c 89 ff                      movq    %r15, %rdi
// 26e: ff d0                         callq   *%rax
// 270: 85 ed                         testl   %ebp, %ebp
// 272: 0f 89 6e ff ff ff             jns     0x1e6 <_JIT_ENTRY+0x1e6>
// 278: 48 83 c3 f0                   addq    $-0x10, %rbx
// 27c: 4c 29 f3                      subq    %r14, %rbx
// 27f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 283: 48 c1 eb 03                   shrq    $0x3, %rbx
// 287: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 28b: 31 c0                         xorl    %eax, %eax
// 28d: 48 83 c4 18                   addq    $0x18, %rsp
// 291: 5b                            popq    %rbx
// 292: 41 5c                         popq    %r12
// 294: 41 5d                         popq    %r13
// 296: 41 5e                         popq    %r14
// 298: 41 5f                         popq    %r15
// 29a: 5d                            popq    %rbp
// 29b: c3                            retq
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _JIT_CONTINUE
// 2a6: 4c 89 f7                      movq    %r14, %rdi
// 2a9: 48 89 de                      movq    %rbx, %rsi
// 2ac: 4c 89 e2                      movq    %r12, %rdx
// 2af: 48 83 c4 18                   addq    $0x18, %rsp
// 2b3: 5b                            popq    %rbx
// 2b4: 41 5c                         popq    %r12
// 2b6: 41 5d                         popq    %r13
// 2b8: 41 5e                         popq    %r14
// 2ba: 41 5f                         popq    %r15
// 2bc: 5d                            popq    %rbp
// 2bd: ff e0                         jmpq    *%rax
// 2bf: 
static const unsigned char _CHECK_EG_MATCHplus_GUARD_BOTH_INT_code_body[704] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x62, 0x85, 0xc0, 0x0f, 0x89, 0x80, 0x00, 0x00, 0x00, 0xe9, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd2, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xef, 0x00, 0x00, 0x00, 0xe9, 0xff, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2e, 0xe9, 0x41, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x18, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x03, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xef, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2e, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x92, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x89, 0x53, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4a, 0x08, 0x75, 0x06, 0x48, 0x39, 0x48, 0x08, 0x74, 0x65, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x6e, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_GUARD_BOTH_INT_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_GUARD_BOTH_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_GUARD_BOTH_INT_data_holes[1];

// _CHECK_EG_MATCHplus_GUARD_BOTH_UNICODE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_GUARD_BOTH_UNICODE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 62                         jle     0xdf <_JIT_ENTRY+0xdf>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 80 00 00 00             jns     0x105 <_JIT_ENTRY+0x105>
// 85: e9 9c 00 00 00                jmp     0x126 <_JIT_ENTRY+0x126>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c3 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// c6: 49 8b 07                      movq    (%r15), %rax
// c9: 48 85 c0                      testq   %rax, %rax
// cc: 0f 8e d2 00 00 00             jle     0x1a4 <_JIT_ENTRY+0x1a4>
// d2: 85 c0                         testl   %eax, %eax
// d4: 0f 89 ef 00 00 00             jns     0x1c9 <_JIT_ENTRY+0x1c9>
// da: e9 ff 00 00 00                jmp     0x1de <_JIT_ENTRY+0x1de>
// df: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e1:  R_X86_64_64  .rodata.str1.1
// e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000eb:  R_X86_64_64  _Py_NegativeRefcount
// f3: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f8: 4c 89 ea                      movq    %r13, %rdx
// fb: ff d0                         callq   *%rax
// fd: 49 8b 45 00                   movq    (%r13), %rax
// 101: 85 c0                         testl   %eax, %eax
// 103: 78 21                         js      0x126 <_JIT_ENTRY+0x126>
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10f: ff d0                         callq   *%rax
// 111: 49 ff 4d 00                   decq    (%r13)
// 115: 75 0f                         jne     0x126 <_JIT_ENTRY+0x126>
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_Dealloc
// 121: 4c 89 ef                      movq    %r13, %rdi
// 124: ff d0                         callq   *%rax
// 126: 49 8b 07                      movq    (%r15), %rax
// 129: 48 85 c0                      testq   %rax, %rax
// 12c: 7e 09                         jle     0x137 <_JIT_ENTRY+0x137>
// 12e: 85 c0                         testl   %eax, %eax
// 130: 79 2e                         jns     0x160 <_JIT_ENTRY+0x160>
// 132: e9 41 01 00 00                jmp     0x278 <_JIT_ENTRY+0x278>
// 137: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000139:  R_X86_64_64  .rodata.str1.1
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_NegativeRefcount
// 14b: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 150: 4c 89 fa                      movq    %r15, %rdx
// 153: ff d0                         callq   *%rax
// 155: 49 8b 07                      movq    (%r15), %rax
// 158: 85 c0                         testl   %eax, %eax
// 15a: 0f 88 18 01 00 00             js      0x278 <_JIT_ENTRY+0x278>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0f                      decq    (%r15)
// 16f: 0f 85 03 01 00 00             jne     0x278 <_JIT_ENTRY+0x278>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ff                      movq    %r15, %rdi
// 182: ff d0                         callq   *%rax
// 184: e9 ef 00 00 00                jmp     0x278 <_JIT_ENTRY+0x278>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 49 8b 07                      movq    (%r15), %rax
// 19b: 48 85 c0                      testq   %rax, %rax
// 19e: 0f 8f 2e ff ff ff             jg      0xd2 <_JIT_ENTRY+0xd2>
// 1a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a6:  R_X86_64_64  .rodata.str1.1
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_NegativeRefcount
// 1b8: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1bd: 4c 89 fa                      movq    %r15, %rdx
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 8b 07                      movq    (%r15), %rax
// 1c5: 85 c0                         testl   %eax, %eax
// 1c7: 78 15                         js      0x1de <_JIT_ENTRY+0x1de>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d3: ff d0                         callq   *%rax
// 1d5: 49 ff 0f                      decq    (%r15)
// 1d8: 0f 84 83 00 00 00             je      0x261 <_JIT_ENTRY+0x261>
// 1de: 85 ed                         testl   %ebp, %ebp
// 1e0: 0f 88 92 00 00 00             js      0x278 <_JIT_ENTRY+0x278>
// 1e6: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1eb: 48 85 ff                      testq   %rdi, %rdi
// 1ee: 0f 84 84 00 00 00             je      0x278 <_JIT_ENTRY+0x278>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_NoneStruct
// 1fe: 48 39 c7                      cmpq    %rax, %rdi
// 201: 74 11                         je      0x214 <_JIT_ENTRY+0x214>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  PyErr_SetHandledException
// 20d: ff d0                         callq   *%rax
// 20f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 214: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 219: 48 89 53 f0                   movq    %rdx, -0x10(%rbx)
// 21d: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 221: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000223:  R_X86_64_64  PyUnicode_Type
// 22b: 48 39 4a 08                   cmpq    %rcx, 0x8(%rdx)
// 22f: 75 06                         jne     0x237 <_JIT_ENTRY+0x237>
// 231: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 235: 74 65                         je      0x29c <_JIT_ENTRY+0x29c>
// 237: 4c 29 f3                      subq    %r14, %rbx
// 23a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 23e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 242: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 246: 49 8b 06                      movq    (%r14), %rax
// 249: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024b:  R_X86_64_64  _JIT_TARGET
// 253: 89 c9                         movl    %ecx, %ecx
// 255: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 259: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 25f: eb 2c                         jmp     0x28d <_JIT_ENTRY+0x28d>
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_Dealloc
// 26b: 4c 89 ff                      movq    %r15, %rdi
// 26e: ff d0                         callq   *%rax
// 270: 85 ed                         testl   %ebp, %ebp
// 272: 0f 89 6e ff ff ff             jns     0x1e6 <_JIT_ENTRY+0x1e6>
// 278: 48 83 c3 f0                   addq    $-0x10, %rbx
// 27c: 4c 29 f3                      subq    %r14, %rbx
// 27f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 283: 48 c1 eb 03                   shrq    $0x3, %rbx
// 287: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 28b: 31 c0                         xorl    %eax, %eax
// 28d: 48 83 c4 18                   addq    $0x18, %rsp
// 291: 5b                            popq    %rbx
// 292: 41 5c                         popq    %r12
// 294: 41 5d                         popq    %r13
// 296: 41 5e                         popq    %r14
// 298: 41 5f                         popq    %r15
// 29a: 5d                            popq    %rbp
// 29b: c3                            retq
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _JIT_CONTINUE
// 2a6: 4c 89 f7                      movq    %r14, %rdi
// 2a9: 48 89 de                      movq    %rbx, %rsi
// 2ac: 4c 89 e2                      movq    %r12, %rdx
// 2af: 48 83 c4 18                   addq    $0x18, %rsp
// 2b3: 5b                            popq    %rbx
// 2b4: 41 5c                         popq    %r12
// 2b6: 41 5d                         popq    %r13
// 2b8: 41 5e                         popq    %r14
// 2ba: 41 5f                         popq    %r15
// 2bc: 5d                            popq    %rbp
// 2bd: ff e0                         jmpq    *%rax
// 2bf: 
static const unsigned char _CHECK_EG_MATCHplus_GUARD_BOTH_UNICODE_code_body[704] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x62, 0x85, 0xc0, 0x0f, 0x89, 0x80, 0x00, 0x00, 0x00, 0xe9, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd2, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xef, 0x00, 0x00, 0x00, 0xe9, 0xff, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2e, 0xe9, 0x41, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x18, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x03, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xef, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2e, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x92, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x89, 0x53, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4a, 0x08, 0x75, 0x06, 0x48, 0x39, 0x48, 0x08, 0x74, 0x65, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x6e, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_GUARD_BOTH_UNICODE_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_GUARD_BOTH_UNICODE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_GUARD_BOTH_UNICODE_data_holes[1];

// _CHECK_EG_MATCHplus_GUARD_BUILTINS_VERSION
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_GUARD_BUILTINS_VERSION.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 62                         jle     0xdf <_JIT_ENTRY+0xdf>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 80 00 00 00             jns     0x105 <_JIT_ENTRY+0x105>
// 85: e9 9c 00 00 00                jmp     0x126 <_JIT_ENTRY+0x126>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c3 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// c6: 49 8b 07                      movq    (%r15), %rax
// c9: 48 85 c0                      testq   %rax, %rax
// cc: 0f 8e d2 00 00 00             jle     0x1a4 <_JIT_ENTRY+0x1a4>
// d2: 85 c0                         testl   %eax, %eax
// d4: 0f 89 ef 00 00 00             jns     0x1c9 <_JIT_ENTRY+0x1c9>
// da: e9 ff 00 00 00                jmp     0x1de <_JIT_ENTRY+0x1de>
// df: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e1:  R_X86_64_64  .rodata.str1.1
// e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000eb:  R_X86_64_64  _Py_NegativeRefcount
// f3: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f8: 4c 89 ea                      movq    %r13, %rdx
// fb: ff d0                         callq   *%rax
// fd: 49 8b 45 00                   movq    (%r13), %rax
// 101: 85 c0                         testl   %eax, %eax
// 103: 78 21                         js      0x126 <_JIT_ENTRY+0x126>
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10f: ff d0                         callq   *%rax
// 111: 49 ff 4d 00                   decq    (%r13)
// 115: 75 0f                         jne     0x126 <_JIT_ENTRY+0x126>
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_Dealloc
// 121: 4c 89 ef                      movq    %r13, %rdi
// 124: ff d0                         callq   *%rax
// 126: 49 8b 07                      movq    (%r15), %rax
// 129: 48 85 c0                      testq   %rax, %rax
// 12c: 7e 09                         jle     0x137 <_JIT_ENTRY+0x137>
// 12e: 85 c0                         testl   %eax, %eax
// 130: 79 2e                         jns     0x160 <_JIT_ENTRY+0x160>
// 132: e9 78 01 00 00                jmp     0x2af <_JIT_ENTRY+0x2af>
// 137: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000139:  R_X86_64_64  .rodata.str1.1
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_NegativeRefcount
// 14b: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 150: 4c 89 fa                      movq    %r15, %rdx
// 153: ff d0                         callq   *%rax
// 155: 49 8b 07                      movq    (%r15), %rax
// 158: 85 c0                         testl   %eax, %eax
// 15a: 0f 88 4f 01 00 00             js      0x2af <_JIT_ENTRY+0x2af>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0f                      decq    (%r15)
// 16f: 0f 85 3a 01 00 00             jne     0x2af <_JIT_ENTRY+0x2af>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ff                      movq    %r15, %rdi
// 182: ff d0                         callq   *%rax
// 184: e9 26 01 00 00                jmp     0x2af <_JIT_ENTRY+0x2af>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 49 8b 07                      movq    (%r15), %rax
// 19b: 48 85 c0                      testq   %rax, %rax
// 19e: 0f 8f 2e ff ff ff             jg      0xd2 <_JIT_ENTRY+0xd2>
// 1a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a6:  R_X86_64_64  .rodata.str1.1
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_NegativeRefcount
// 1b8: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1bd: 4c 89 fa                      movq    %r15, %rdx
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 8b 07                      movq    (%r15), %rax
// 1c5: 85 c0                         testl   %eax, %eax
// 1c7: 78 15                         js      0x1de <_JIT_ENTRY+0x1de>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d3: ff d0                         callq   *%rax
// 1d5: 49 ff 0f                      decq    (%r15)
// 1d8: 0f 84 ba 00 00 00             je      0x298 <_JIT_ENTRY+0x298>
// 1de: 85 ed                         testl   %ebp, %ebp
// 1e0: 0f 88 c9 00 00 00             js      0x2af <_JIT_ENTRY+0x2af>
// 1e6: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1eb: 48 85 ff                      testq   %rdi, %rdi
// 1ee: 0f 84 bb 00 00 00             je      0x2af <_JIT_ENTRY+0x2af>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_NoneStruct
// 1fe: 48 39 c7                      cmpq    %rax, %rdi
// 201: 74 11                         je      0x214 <_JIT_ENTRY+0x214>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  PyErr_SetHandledException
// 20d: ff d0                         callq   *%rax
// 20f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 214: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 219: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 21d: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 221: 49 8b 46 20                   movq    0x20(%r14), %rax
// 225: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000227:  R_X86_64_64  PyDict_Type
// 22f: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 233: 75 39                         jne     0x26e <_JIT_ENTRY+0x26e>
// 235: 48 8b 40 20                   movq    0x20(%rax), %rax
// 239: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023b:  R_X86_64_64  _JIT_OPERAND
// 243: 0f b7 c9                      movzwl  %cx, %ecx
// 246: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 249: 75 23                         jne     0x26e <_JIT_ENTRY+0x26e>
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _JIT_CONTINUE
// 255: 4c 89 f7                      movq    %r14, %rdi
// 258: 48 89 de                      movq    %rbx, %rsi
// 25b: 4c 89 e2                      movq    %r12, %rdx
// 25e: 48 83 c4 18                   addq    $0x18, %rsp
// 262: 5b                            popq    %rbx
// 263: 41 5c                         popq    %r12
// 265: 41 5d                         popq    %r13
// 267: 41 5e                         popq    %r14
// 269: 41 5f                         popq    %r15
// 26b: 5d                            popq    %rbp
// 26c: ff e0                         jmpq    *%rax
// 26e: 4c 29 f3                      subq    %r14, %rbx
// 271: 48 83 c3 b8                   addq    $-0x48, %rbx
// 275: 48 c1 eb 03                   shrq    $0x3, %rbx
// 279: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 27d: 49 8b 06                      movq    (%r14), %rax
// 280: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000282:  R_X86_64_64  _JIT_TARGET
// 28a: 89 c9                         movl    %ecx, %ecx
// 28c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 290: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 296: eb 2c                         jmp     0x2c4 <_JIT_ENTRY+0x2c4>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_Dealloc
// 2a2: 4c 89 ff                      movq    %r15, %rdi
// 2a5: ff d0                         callq   *%rax
// 2a7: 85 ed                         testl   %ebp, %ebp
// 2a9: 0f 89 37 ff ff ff             jns     0x1e6 <_JIT_ENTRY+0x1e6>
// 2af: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2b3: 4c 29 f3                      subq    %r14, %rbx
// 2b6: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2ba: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2be: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2c2: 31 c0                         xorl    %eax, %eax
// 2c4: 48 83 c4 18                   addq    $0x18, %rsp
// 2c8: 5b                            popq    %rbx
// 2c9: 41 5c                         popq    %r12
// 2cb: 41 5d                         popq    %r13
// 2cd: 41 5e                         popq    %r14
// 2cf: 41 5f                         popq    %r15
// 2d1: 5d                            popq    %rbp
// 2d2: c3                            retq
// 2d3: 
static const unsigned char _CHECK_EG_MATCHplus_GUARD_BUILTINS_VERSION_code_body[724] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x62, 0x85, 0xc0, 0x0f, 0x89, 0x80, 0x00, 0x00, 0x00, 0xe9, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd2, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xef, 0x00, 0x00, 0x00, 0xe9, 0xff, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2e, 0xe9, 0x78, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x4f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x3a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x26, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2e, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0xba, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xc9, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xbb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x49, 0x8b, 0x46, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x39, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x37, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_GUARD_BUILTINS_VERSION_code_holes[25] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_GUARD_BUILTINS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_GUARD_BUILTINS_VERSION_data_holes[1];

// _CHECK_EG_MATCHplus_GUARD_DORV_VALUES
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_GUARD_DORV_VALUES.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a2 00 00 00                jmp     0x175 <_JIT_ENTRY+0x175>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 1b 01 00 00             je      0x22a <_JIT_ENTRY+0x22a>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 2a 01 00 00             jle     0x245 <_JIT_ENTRY+0x245>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 47 01 00 00             jns     0x26a <_JIT_ENTRY+0x26a>
// 123: e9 62 01 00 00                jmp     0x28a <_JIT_ENTRY+0x28a>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 11                         js      0x175 <_JIT_ENTRY+0x175>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 74 76                         je      0x1eb <_JIT_ENTRY+0x1eb>
// 175: 85 ed                         testl   %ebp, %ebp
// 177: 0f 88 0d 01 00 00             js      0x28a <_JIT_ENTRY+0x28a>
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 85 ff                      testq   %rdi, %rdi
// 185: 0f 84 ff 00 00 00             je      0x28a <_JIT_ENTRY+0x28a>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NoneStruct
// 195: 48 39 c7                      cmpq    %rax, %rdi
// 198: 74 11                         je      0x1ab <_JIT_ENTRY+0x1ab>
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  PyErr_SetHandledException
// 1a4: ff d0                         callq   *%rax
// 1a6: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1ab: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b0: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b4: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1b8: f6 40 e8 01                   testb   $0x1, -0x18(%rax)
// 1bc: 75 49                         jne     0x207 <_JIT_ENTRY+0x207>
// 1be: 4c 29 f3                      subq    %r14, %rbx
// 1c1: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1c5: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1c9: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1cd: 49 8b 06                      movq    (%r14), %rax
// 1d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d2:  R_X86_64_64  _JIT_TARGET
// 1da: 89 c9                         movl    %ecx, %ecx
// 1dc: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1e0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1e6: e9 b4 00 00 00                jmp     0x29f <_JIT_ENTRY+0x29f>
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: 4c 89 ff                      movq    %r15, %rdi
// 1f8: ff d0                         callq   *%rax
// 1fa: 85 ed                         testl   %ebp, %ebp
// 1fc: 0f 89 7b ff ff ff             jns     0x17d <_JIT_ENTRY+0x17d>
// 202: e9 83 00 00 00                jmp     0x28a <_JIT_ENTRY+0x28a>
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  _JIT_CONTINUE
// 211: 4c 89 f7                      movq    %r14, %rdi
// 214: 48 89 de                      movq    %rbx, %rsi
// 217: 4c 89 e2                      movq    %r12, %rdx
// 21a: 48 83 c4 18                   addq    $0x18, %rsp
// 21e: 5b                            popq    %rbx
// 21f: 41 5c                         popq    %r12
// 221: 41 5d                         popq    %r13
// 223: 41 5e                         popq    %r14
// 225: 41 5f                         popq    %r15
// 227: 5d                            popq    %rbp
// 228: ff e0                         jmpq    *%rax
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_Dealloc
// 234: 4c 89 ef                      movq    %r13, %rdi
// 237: ff d0                         callq   *%rax
// 239: 49 8b 07                      movq    (%r15), %rax
// 23c: 48 85 c0                      testq   %rax, %rax
// 23f: 0f 8f d6 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 245: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000247:  R_X86_64_64  .rodata.str1.1
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _Py_NegativeRefcount
// 259: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 25e: 4c 89 fa                      movq    %r15, %rdx
// 261: ff d0                         callq   *%rax
// 263: 49 8b 07                      movq    (%r15), %rax
// 266: 85 c0                         testl   %eax, %eax
// 268: 78 20                         js      0x28a <_JIT_ENTRY+0x28a>
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 274: ff d0                         callq   *%rax
// 276: 49 ff 0f                      decq    (%r15)
// 279: 75 0f                         jne     0x28a <_JIT_ENTRY+0x28a>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_Dealloc
// 285: 4c 89 ff                      movq    %r15, %rdi
// 288: ff d0                         callq   *%rax
// 28a: 48 83 c3 f0                   addq    $-0x10, %rbx
// 28e: 4c 29 f3                      subq    %r14, %rbx
// 291: 48 83 c3 b8                   addq    $-0x48, %rbx
// 295: 48 c1 eb 03                   shrq    $0x3, %rbx
// 299: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 29d: 31 c0                         xorl    %eax, %eax
// 29f: 48 83 c4 18                   addq    $0x18, %rsp
// 2a3: 5b                            popq    %rbx
// 2a4: 41 5c                         popq    %r12
// 2a6: 41 5d                         popq    %r13
// 2a8: 41 5e                         popq    %r14
// 2aa: 41 5f                         popq    %r15
// 2ac: 5d                            popq    %rbp
// 2ad: c3                            retq
// 2ae: 
static const unsigned char _CHECK_EG_MATCHplus_GUARD_DORV_VALUES_code_body[687] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x1b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x2a, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x47, 0x01, 0x00, 0x00, 0xe9, 0x62, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x76, 0x85, 0xed, 0x0f, 0x88, 0x0d, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xff, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0xf6, 0x40, 0xe8, 0x01, 0x75, 0x49, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xb4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x7b, 0xff, 0xff, 0xff, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xd6, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_GUARD_DORV_VALUES_code_holes[23] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_GUARD_DORV_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_GUARD_DORV_VALUES_data_holes[1];

// _CHECK_EG_MATCHplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 62                         jle     0xdf <_JIT_ENTRY+0xdf>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 80 00 00 00             jns     0x105 <_JIT_ENTRY+0x105>
// 85: e9 9c 00 00 00                jmp     0x126 <_JIT_ENTRY+0x126>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c3 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// c6: 49 8b 07                      movq    (%r15), %rax
// c9: 48 85 c0                      testq   %rax, %rax
// cc: 0f 8e d2 00 00 00             jle     0x1a4 <_JIT_ENTRY+0x1a4>
// d2: 85 c0                         testl   %eax, %eax
// d4: 0f 89 ef 00 00 00             jns     0x1c9 <_JIT_ENTRY+0x1c9>
// da: e9 ff 00 00 00                jmp     0x1de <_JIT_ENTRY+0x1de>
// df: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e1:  R_X86_64_64  .rodata.str1.1
// e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000eb:  R_X86_64_64  _Py_NegativeRefcount
// f3: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f8: 4c 89 ea                      movq    %r13, %rdx
// fb: ff d0                         callq   *%rax
// fd: 49 8b 45 00                   movq    (%r13), %rax
// 101: 85 c0                         testl   %eax, %eax
// 103: 78 21                         js      0x126 <_JIT_ENTRY+0x126>
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10f: ff d0                         callq   *%rax
// 111: 49 ff 4d 00                   decq    (%r13)
// 115: 75 0f                         jne     0x126 <_JIT_ENTRY+0x126>
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_Dealloc
// 121: 4c 89 ef                      movq    %r13, %rdi
// 124: ff d0                         callq   *%rax
// 126: 49 8b 07                      movq    (%r15), %rax
// 129: 48 85 c0                      testq   %rax, %rax
// 12c: 7e 09                         jle     0x137 <_JIT_ENTRY+0x137>
// 12e: 85 c0                         testl   %eax, %eax
// 130: 79 2e                         jns     0x160 <_JIT_ENTRY+0x160>
// 132: e9 41 01 00 00                jmp     0x278 <_JIT_ENTRY+0x278>
// 137: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000139:  R_X86_64_64  .rodata.str1.1
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_NegativeRefcount
// 14b: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 150: 4c 89 fa                      movq    %r15, %rdx
// 153: ff d0                         callq   *%rax
// 155: 49 8b 07                      movq    (%r15), %rax
// 158: 85 c0                         testl   %eax, %eax
// 15a: 0f 88 18 01 00 00             js      0x278 <_JIT_ENTRY+0x278>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0f                      decq    (%r15)
// 16f: 0f 85 03 01 00 00             jne     0x278 <_JIT_ENTRY+0x278>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ff                      movq    %r15, %rdi
// 182: ff d0                         callq   *%rax
// 184: e9 ef 00 00 00                jmp     0x278 <_JIT_ENTRY+0x278>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 49 8b 07                      movq    (%r15), %rax
// 19b: 48 85 c0                      testq   %rax, %rax
// 19e: 0f 8f 2e ff ff ff             jg      0xd2 <_JIT_ENTRY+0xd2>
// 1a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a6:  R_X86_64_64  .rodata.str1.1
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_NegativeRefcount
// 1b8: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1bd: 4c 89 fa                      movq    %r15, %rdx
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 8b 07                      movq    (%r15), %rax
// 1c5: 85 c0                         testl   %eax, %eax
// 1c7: 78 15                         js      0x1de <_JIT_ENTRY+0x1de>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d3: ff d0                         callq   *%rax
// 1d5: 49 ff 0f                      decq    (%r15)
// 1d8: 0f 84 83 00 00 00             je      0x261 <_JIT_ENTRY+0x261>
// 1de: 85 ed                         testl   %ebp, %ebp
// 1e0: 0f 88 92 00 00 00             js      0x278 <_JIT_ENTRY+0x278>
// 1e6: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1eb: 48 85 c0                      testq   %rax, %rax
// 1ee: 0f 84 84 00 00 00             je      0x278 <_JIT_ENTRY+0x278>
// 1f4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f6:  R_X86_64_64  _Py_NoneStruct
// 1fe: 48 39 f8                      cmpq    %rdi, %rax
// 201: 74 14                         je      0x217 <_JIT_ENTRY+0x217>
// 203: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000205:  R_X86_64_64  PyErr_SetHandledException
// 20d: 48 89 c7                      movq    %rax, %rdi
// 210: ff d1                         callq   *%rcx
// 212: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 217: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 21c: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 220: 48 89 7b f8                   movq    %rdi, -0x8(%rbx)
// 224: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 228: 75 14                         jne     0x23e <_JIT_ENTRY+0x23e>
// 22a: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 238: ff d0                         callq   *%rax
// 23a: 84 c0                         testb   %al, %al
// 23c: 74 5e                         je      0x29c <_JIT_ENTRY+0x29c>
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _JIT_CONTINUE
// 248: 4c 89 f7                      movq    %r14, %rdi
// 24b: 48 89 de                      movq    %rbx, %rsi
// 24e: 4c 89 e2                      movq    %r12, %rdx
// 251: 48 83 c4 18                   addq    $0x18, %rsp
// 255: 5b                            popq    %rbx
// 256: 41 5c                         popq    %r12
// 258: 41 5d                         popq    %r13
// 25a: 41 5e                         popq    %r14
// 25c: 41 5f                         popq    %r15
// 25e: 5d                            popq    %rbp
// 25f: ff e0                         jmpq    *%rax
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_Dealloc
// 26b: 4c 89 ff                      movq    %r15, %rdi
// 26e: ff d0                         callq   *%rax
// 270: 85 ed                         testl   %ebp, %ebp
// 272: 0f 89 6e ff ff ff             jns     0x1e6 <_JIT_ENTRY+0x1e6>
// 278: 48 83 c3 f0                   addq    $-0x10, %rbx
// 27c: 4c 29 f3                      subq    %r14, %rbx
// 27f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 283: 48 c1 eb 03                   shrq    $0x3, %rbx
// 287: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 28b: 31 c0                         xorl    %eax, %eax
// 28d: 48 83 c4 18                   addq    $0x18, %rsp
// 291: 5b                            popq    %rbx
// 292: 41 5c                         popq    %r12
// 294: 41 5d                         popq    %r13
// 296: 41 5e                         popq    %r14
// 298: 41 5f                         popq    %r15
// 29a: 5d                            popq    %rbp
// 29b: c3                            retq
// 29c: 4c 29 f3                      subq    %r14, %rbx
// 29f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2a3: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2a7: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2ab: 49 8b 06                      movq    (%r14), %rax
// 2ae: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002b0:  R_X86_64_64  _JIT_TARGET
// 2b8: 89 c9                         movl    %ecx, %ecx
// 2ba: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2be: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2c4: eb c7                         jmp     0x28d <_JIT_ENTRY+0x28d>
// 2c6: 
static const unsigned char _CHECK_EG_MATCHplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_body[711] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x62, 0x85, 0xc0, 0x0f, 0x89, 0x80, 0x00, 0x00, 0x00, 0xe9, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd2, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xef, 0x00, 0x00, 0x00, 0xe9, 0xff, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2e, 0xe9, 0x41, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x18, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x03, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xef, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2e, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x83, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x92, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf8, 0x74, 0x14, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x48, 0x89, 0x7b, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x14, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x74, 0x5e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x6e, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0xc7};
static const Hole _CHECK_EG_MATCHplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_holes[1];

// _CHECK_EG_MATCHplus_GUARD_GLOBALS_VERSION
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_GUARD_GLOBALS_VERSION.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 62                         jle     0xdf <_JIT_ENTRY+0xdf>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 80 00 00 00             jns     0x105 <_JIT_ENTRY+0x105>
// 85: e9 9c 00 00 00                jmp     0x126 <_JIT_ENTRY+0x126>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c3 00 00 00             je      0x189 <_JIT_ENTRY+0x189>
// c6: 49 8b 07                      movq    (%r15), %rax
// c9: 48 85 c0                      testq   %rax, %rax
// cc: 0f 8e d2 00 00 00             jle     0x1a4 <_JIT_ENTRY+0x1a4>
// d2: 85 c0                         testl   %eax, %eax
// d4: 0f 89 ef 00 00 00             jns     0x1c9 <_JIT_ENTRY+0x1c9>
// da: e9 ff 00 00 00                jmp     0x1de <_JIT_ENTRY+0x1de>
// df: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e1:  R_X86_64_64  .rodata.str1.1
// e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000eb:  R_X86_64_64  _Py_NegativeRefcount
// f3: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f8: 4c 89 ea                      movq    %r13, %rdx
// fb: ff d0                         callq   *%rax
// fd: 49 8b 45 00                   movq    (%r13), %rax
// 101: 85 c0                         testl   %eax, %eax
// 103: 78 21                         js      0x126 <_JIT_ENTRY+0x126>
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10f: ff d0                         callq   *%rax
// 111: 49 ff 4d 00                   decq    (%r13)
// 115: 75 0f                         jne     0x126 <_JIT_ENTRY+0x126>
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _Py_Dealloc
// 121: 4c 89 ef                      movq    %r13, %rdi
// 124: ff d0                         callq   *%rax
// 126: 49 8b 07                      movq    (%r15), %rax
// 129: 48 85 c0                      testq   %rax, %rax
// 12c: 7e 09                         jle     0x137 <_JIT_ENTRY+0x137>
// 12e: 85 c0                         testl   %eax, %eax
// 130: 79 2e                         jns     0x160 <_JIT_ENTRY+0x160>
// 132: e9 78 01 00 00                jmp     0x2af <_JIT_ENTRY+0x2af>
// 137: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000139:  R_X86_64_64  .rodata.str1.1
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_NegativeRefcount
// 14b: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 150: 4c 89 fa                      movq    %r15, %rdx
// 153: ff d0                         callq   *%rax
// 155: 49 8b 07                      movq    (%r15), %rax
// 158: 85 c0                         testl   %eax, %eax
// 15a: 0f 88 4f 01 00 00             js      0x2af <_JIT_ENTRY+0x2af>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0f                      decq    (%r15)
// 16f: 0f 85 3a 01 00 00             jne     0x2af <_JIT_ENTRY+0x2af>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 ff                      movq    %r15, %rdi
// 182: ff d0                         callq   *%rax
// 184: e9 26 01 00 00                jmp     0x2af <_JIT_ENTRY+0x2af>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_Dealloc
// 193: 4c 89 ef                      movq    %r13, %rdi
// 196: ff d0                         callq   *%rax
// 198: 49 8b 07                      movq    (%r15), %rax
// 19b: 48 85 c0                      testq   %rax, %rax
// 19e: 0f 8f 2e ff ff ff             jg      0xd2 <_JIT_ENTRY+0xd2>
// 1a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a6:  R_X86_64_64  .rodata.str1.1
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_NegativeRefcount
// 1b8: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1bd: 4c 89 fa                      movq    %r15, %rdx
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 8b 07                      movq    (%r15), %rax
// 1c5: 85 c0                         testl   %eax, %eax
// 1c7: 78 15                         js      0x1de <_JIT_ENTRY+0x1de>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d3: ff d0                         callq   *%rax
// 1d5: 49 ff 0f                      decq    (%r15)
// 1d8: 0f 84 ba 00 00 00             je      0x298 <_JIT_ENTRY+0x298>
// 1de: 85 ed                         testl   %ebp, %ebp
// 1e0: 0f 88 c9 00 00 00             js      0x2af <_JIT_ENTRY+0x2af>
// 1e6: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1eb: 48 85 ff                      testq   %rdi, %rdi
// 1ee: 0f 84 bb 00 00 00             je      0x2af <_JIT_ENTRY+0x2af>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_NoneStruct
// 1fe: 48 39 c7                      cmpq    %rax, %rdi
// 201: 74 11                         je      0x214 <_JIT_ENTRY+0x214>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  PyErr_SetHandledException
// 20d: ff d0                         callq   *%rax
// 20f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 214: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 219: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 21d: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 221: 49 8b 46 18                   movq    0x18(%r14), %rax
// 225: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000227:  R_X86_64_64  PyDict_Type
// 22f: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 233: 75 39                         jne     0x26e <_JIT_ENTRY+0x26e>
// 235: 48 8b 40 20                   movq    0x20(%rax), %rax
// 239: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023b:  R_X86_64_64  _JIT_OPERAND
// 243: 0f b7 c9                      movzwl  %cx, %ecx
// 246: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 249: 75 23                         jne     0x26e <_JIT_ENTRY+0x26e>
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _JIT_CONTINUE
// 255: 4c 89 f7                      movq    %r14, %rdi
// 258: 48 89 de                      movq    %rbx, %rsi
// 25b: 4c 89 e2                      movq    %r12, %rdx
// 25e: 48 83 c4 18                   addq    $0x18, %rsp
// 262: 5b                            popq    %rbx
// 263: 41 5c                         popq    %r12
// 265: 41 5d                         popq    %r13
// 267: 41 5e                         popq    %r14
// 269: 41 5f                         popq    %r15
// 26b: 5d                            popq    %rbp
// 26c: ff e0                         jmpq    *%rax
// 26e: 4c 29 f3                      subq    %r14, %rbx
// 271: 48 83 c3 b8                   addq    $-0x48, %rbx
// 275: 48 c1 eb 03                   shrq    $0x3, %rbx
// 279: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 27d: 49 8b 06                      movq    (%r14), %rax
// 280: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000282:  R_X86_64_64  _JIT_TARGET
// 28a: 89 c9                         movl    %ecx, %ecx
// 28c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 290: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 296: eb 2c                         jmp     0x2c4 <_JIT_ENTRY+0x2c4>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_Dealloc
// 2a2: 4c 89 ff                      movq    %r15, %rdi
// 2a5: ff d0                         callq   *%rax
// 2a7: 85 ed                         testl   %ebp, %ebp
// 2a9: 0f 89 37 ff ff ff             jns     0x1e6 <_JIT_ENTRY+0x1e6>
// 2af: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2b3: 4c 29 f3                      subq    %r14, %rbx
// 2b6: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2ba: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2be: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2c2: 31 c0                         xorl    %eax, %eax
// 2c4: 48 83 c4 18                   addq    $0x18, %rsp
// 2c8: 5b                            popq    %rbx
// 2c9: 41 5c                         popq    %r12
// 2cb: 41 5d                         popq    %r13
// 2cd: 41 5e                         popq    %r14
// 2cf: 41 5f                         popq    %r15
// 2d1: 5d                            popq    %rbp
// 2d2: c3                            retq
// 2d3: 
static const unsigned char _CHECK_EG_MATCHplus_GUARD_GLOBALS_VERSION_code_body[724] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x62, 0x85, 0xc0, 0x0f, 0x89, 0x80, 0x00, 0x00, 0x00, 0xe9, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd2, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xef, 0x00, 0x00, 0x00, 0xe9, 0xff, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2e, 0xe9, 0x78, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x4f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x3a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x26, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2e, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0xba, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xc9, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xbb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x49, 0x8b, 0x46, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x39, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x37, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_GUARD_GLOBALS_VERSION_code_holes[25] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_GUARD_GLOBALS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_GUARD_GLOBALS_VERSION_data_holes[1];

// _CHECK_EG_MATCHplus_GUARD_IS_FALSE_POP
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_GUARD_IS_FALSE_POP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 76 f8                   movq    -0x8(%rsi), %r14
// 1f: 48 8d 5e f0                   leaq    -0x10(%rsi), %rbx
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 f6                      movq    %r14, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 f6                      movq    %r14, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 56                         jle     0xd9 <_JIT_ENTRY+0xd9>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 78                         jns     0xff <_JIT_ENTRY+0xff>
// 87: e9 89 00 00 00                jmp     0x115 <_JIT_ENTRY+0x115>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 4c 89 ea                      movq    %r13, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 45 00                   movq    (%r13), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 4d 00                   decq    (%r13)
// c2: 74 6a                         je      0x12e <_JIT_ENTRY+0x12e>
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7e 79                         jle     0x145 <_JIT_ENTRY+0x145>
// cc: 85 c0                         testl   %eax, %eax
// ce: 0f 89 96 00 00 00             jns     0x16a <_JIT_ENTRY+0x16a>
// d4: e9 a6 00 00 00                jmp     0x17f <_JIT_ENTRY+0x17f>
// d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000db:  R_X86_64_64  .rodata.str1.1
// e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e5:  R_X86_64_64  _Py_NegativeRefcount
// ed: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f2: 4c 89 ea                      movq    %r13, %rdx
// f5: ff d0                         callq   *%rax
// f7: 49 8b 45 00                   movq    (%r13), %rax
// fb: 85 c0                         testl   %eax, %eax
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 4d 00                   decq    (%r13)
// 10f: 0f 84 3f 01 00 00             je      0x254 <_JIT_ENTRY+0x254>
// 115: 49 8b 06                      movq    (%r14), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 0f 8e 4e 01 00 00             jle     0x26f <_JIT_ENTRY+0x26f>
// 121: 85 c0                         testl   %eax, %eax
// 123: 0f 89 6b 01 00 00             jns     0x294 <_JIT_ENTRY+0x294>
// 129: e9 86 01 00 00                jmp     0x2b4 <_JIT_ENTRY+0x2b4>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_Dealloc
// 138: 4c 89 ef                      movq    %r13, %rdi
// 13b: ff d0                         callq   *%rax
// 13d: 49 8b 06                      movq    (%r14), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 87                         jg      0xcc <_JIT_ENTRY+0xcc>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15e: 4c 89 f2                      movq    %r14, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 06                      movq    (%r14), %rax
// 166: 85 c0                         testl   %eax, %eax
// 168: 78 15                         js      0x17f <_JIT_ENTRY+0x17f>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 0e                      decq    (%r14)
// 179: 0f 84 86 00 00 00             je      0x205 <_JIT_ENTRY+0x205>
// 17f: 85 ed                         testl   %ebp, %ebp
// 181: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 186: 0f 88 28 01 00 00             js      0x2b4 <_JIT_ENTRY+0x2b4>
// 18c: 48 8b 3c 24                   movq    (%rsp), %rdi
// 190: 48 85 ff                      testq   %rdi, %rdi
// 193: 0f 84 1b 01 00 00             je      0x2b4 <_JIT_ENTRY+0x2b4>
// 199: 4d 8d 74 24 f8                leaq    -0x8(%r12), %r14
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _Py_NoneStruct
// 1a8: 48 39 c7                      cmpq    %rax, %rdi
// 1ab: 74 79                         je      0x226 <_JIT_ENTRY+0x226>
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  PyErr_SetHandledException
// 1b7: ff d0                         callq   *%rax
// 1b9: 48 8b 04 24                   movq    (%rsp), %rax
// 1bd: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1c2: 48 89 0b                      movq    %rcx, (%rbx)
// 1c5: 49 89 06                      movq    %rax, (%r14)
// 1c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ca:  R_X86_64_64  _Py_TrueStruct
// 1d2: 48 39 c8                      cmpq    %rcx, %rax
// 1d5: 75 5a                         jne     0x231 <_JIT_ENTRY+0x231>
// 1d7: 49 29 ec                      subq    %rbp, %r12
// 1da: 49 83 c4 b8                   addq    $-0x48, %r12
// 1de: 49 c1 ec 03                   shrq    $0x3, %r12
// 1e2: 44 89 65 40                   movl    %r12d, 0x40(%rbp)
// 1e6: 48 8b 45 00                   movq    (%rbp), %rax
// 1ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ec:  R_X86_64_64  _JIT_TARGET
// 1f4: 89 c9                         movl    %ecx, %ecx
// 1f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 200: e9 bf 00 00 00                jmp     0x2c4 <_JIT_ENTRY+0x2c4>
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_Dealloc
// 20f: 4c 89 f7                      movq    %r14, %rdi
// 212: ff d0                         callq   *%rax
// 214: 85 ed                         testl   %ebp, %ebp
// 216: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 21b: 0f 89 6b ff ff ff             jns     0x18c <_JIT_ENTRY+0x18c>
// 221: e9 8e 00 00 00                jmp     0x2b4 <_JIT_ENTRY+0x2b4>
// 226: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 22b: 48 89 0b                      movq    %rcx, (%rbx)
// 22e: 49 89 06                      movq    %rax, (%r14)
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _JIT_CONTINUE
// 23b: 48 89 ef                      movq    %rbp, %rdi
// 23e: 4c 89 f6                      movq    %r14, %rsi
// 241: 4c 89 fa                      movq    %r15, %rdx
// 244: 48 83 c4 18                   addq    $0x18, %rsp
// 248: 5b                            popq    %rbx
// 249: 41 5c                         popq    %r12
// 24b: 41 5d                         popq    %r13
// 24d: 41 5e                         popq    %r14
// 24f: 41 5f                         popq    %r15
// 251: 5d                            popq    %rbp
// 252: ff e0                         jmpq    *%rax
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _Py_Dealloc
// 25e: 4c 89 ef                      movq    %r13, %rdi
// 261: ff d0                         callq   *%rax
// 263: 49 8b 06                      movq    (%r14), %rax
// 266: 48 85 c0                      testq   %rax, %rax
// 269: 0f 8f b2 fe ff ff             jg      0x121 <_JIT_ENTRY+0x121>
// 26f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000271:  R_X86_64_64  .rodata.str1.1
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_NegativeRefcount
// 283: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 288: 4c 89 f2                      movq    %r14, %rdx
// 28b: ff d0                         callq   *%rax
// 28d: 49 8b 06                      movq    (%r14), %rax
// 290: 85 c0                         testl   %eax, %eax
// 292: 78 20                         js      0x2b4 <_JIT_ENTRY+0x2b4>
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 29e: ff d0                         callq   *%rax
// 2a0: 49 ff 0e                      decq    (%r14)
// 2a3: 75 0f                         jne     0x2b4 <_JIT_ENTRY+0x2b4>
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _Py_Dealloc
// 2af: 4c 89 f7                      movq    %r14, %rdi
// 2b2: ff d0                         callq   *%rax
// 2b4: 48 29 eb                      subq    %rbp, %rbx
// 2b7: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2bb: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2bf: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 2c2: 31 c0                         xorl    %eax, %eax
// 2c4: 48 83 c4 18                   addq    $0x18, %rsp
// 2c8: 5b                            popq    %rbx
// 2c9: 41 5c                         popq    %r12
// 2cb: 41 5d                         popq    %r13
// 2cd: 41 5e                         popq    %r14
// 2cf: 41 5f                         popq    %r15
// 2d1: 5d                            popq    %rbp
// 2d2: c3                            retq
// 2d3: 
static const unsigned char _CHECK_EG_MATCHplus_GUARD_IS_FALSE_POP_code_body[724] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfd, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x76, 0xf8, 0x48, 0x8d, 0x5e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x3f, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x4e, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x6b, 0x01, 0x00, 0x00, 0xe9, 0x86, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x88, 0x28, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x1b, 0x01, 0x00, 0x00, 0x4d, 0x8d, 0x74, 0x24, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x79, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x0b, 0x49, 0x89, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x75, 0x5a, 0x49, 0x29, 0xec, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x65, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xbf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x89, 0x6b, 0xff, 0xff, 0xff, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x0b, 0x49, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xb2, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_GUARD_IS_FALSE_POP_code_holes[24] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_GUARD_IS_FALSE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_GUARD_IS_FALSE_POP_data_holes[1];

// _CHECK_EG_MATCHplus_GUARD_IS_NONE_POP
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_GUARD_IS_NONE_POP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 76 f8                   movq    -0x8(%rsi), %r14
// 1f: 48 8d 5e f0                   leaq    -0x10(%rsi), %rbx
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 f6                      movq    %r14, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 f6                      movq    %r14, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 56                         jle     0xd9 <_JIT_ENTRY+0xd9>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 78                         jns     0xff <_JIT_ENTRY+0xff>
// 87: e9 89 00 00 00                jmp     0x115 <_JIT_ENTRY+0x115>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 4c 89 ea                      movq    %r13, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 45 00                   movq    (%r13), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 4d 00                   decq    (%r13)
// c2: 74 6a                         je      0x12e <_JIT_ENTRY+0x12e>
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7e 79                         jle     0x145 <_JIT_ENTRY+0x145>
// cc: 85 c0                         testl   %eax, %eax
// ce: 0f 89 96 00 00 00             jns     0x16a <_JIT_ENTRY+0x16a>
// d4: e9 a2 00 00 00                jmp     0x17b <_JIT_ENTRY+0x17b>
// d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000db:  R_X86_64_64  .rodata.str1.1
// e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e5:  R_X86_64_64  _Py_NegativeRefcount
// ed: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f2: 4c 89 ea                      movq    %r13, %rdx
// f5: ff d0                         callq   *%rax
// f7: 49 8b 45 00                   movq    (%r13), %rax
// fb: 85 c0                         testl   %eax, %eax
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 4d 00                   decq    (%r13)
// 10f: 0f 84 31 01 00 00             je      0x246 <_JIT_ENTRY+0x246>
// 115: 49 8b 06                      movq    (%r14), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 0f 8e 40 01 00 00             jle     0x261 <_JIT_ENTRY+0x261>
// 121: 85 c0                         testl   %eax, %eax
// 123: 0f 89 5d 01 00 00             jns     0x286 <_JIT_ENTRY+0x286>
// 129: e9 78 01 00 00                jmp     0x2a6 <_JIT_ENTRY+0x2a6>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_Dealloc
// 138: 4c 89 ef                      movq    %r13, %rdi
// 13b: ff d0                         callq   *%rax
// 13d: 49 8b 06                      movq    (%r14), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 87                         jg      0xcc <_JIT_ENTRY+0xcc>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15e: 4c 89 f2                      movq    %r14, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 06                      movq    (%r14), %rax
// 166: 85 c0                         testl   %eax, %eax
// 168: 78 11                         js      0x17b <_JIT_ENTRY+0x17b>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 0e                      decq    (%r14)
// 179: 74 7c                         je      0x1f7 <_JIT_ENTRY+0x1f7>
// 17b: 85 ed                         testl   %ebp, %ebp
// 17d: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 182: 0f 88 1e 01 00 00             js      0x2a6 <_JIT_ENTRY+0x2a6>
// 188: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18c: 48 85 ff                      testq   %rdi, %rdi
// 18f: 0f 84 11 01 00 00             je      0x2a6 <_JIT_ENTRY+0x2a6>
// 195: 4d 8d 74 24 f8                leaq    -0x8(%r12), %r14
// 19a: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000019c:  R_X86_64_64  _Py_NoneStruct
// 1a4: 4c 39 ef                      cmpq    %r13, %rdi
// 1a7: 74 6f                         je      0x218 <_JIT_ENTRY+0x218>
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  PyErr_SetHandledException
// 1b3: ff d0                         callq   *%rax
// 1b5: 48 8b 04 24                   movq    (%rsp), %rax
// 1b9: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1be: 48 89 0b                      movq    %rcx, (%rbx)
// 1c1: 49 89 06                      movq    %rax, (%r14)
// 1c4: 4c 39 e8                      cmpq    %r13, %rax
// 1c7: 74 5a                         je      0x223 <_JIT_ENTRY+0x223>
// 1c9: 49 29 ec                      subq    %rbp, %r12
// 1cc: 49 83 c4 b8                   addq    $-0x48, %r12
// 1d0: 49 c1 ec 03                   shrq    $0x3, %r12
// 1d4: 44 89 65 40                   movl    %r12d, 0x40(%rbp)
// 1d8: 48 8b 45 00                   movq    (%rbp), %rax
// 1dc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001de:  R_X86_64_64  _JIT_TARGET
// 1e6: 89 c9                         movl    %ecx, %ecx
// 1e8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1ec: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f2: e9 bf 00 00 00                jmp     0x2b6 <_JIT_ENTRY+0x2b6>
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  _Py_Dealloc
// 201: 4c 89 f7                      movq    %r14, %rdi
// 204: ff d0                         callq   *%rax
// 206: 85 ed                         testl   %ebp, %ebp
// 208: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 20d: 0f 89 75 ff ff ff             jns     0x188 <_JIT_ENTRY+0x188>
// 213: e9 8e 00 00 00                jmp     0x2a6 <_JIT_ENTRY+0x2a6>
// 218: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 21d: 48 89 03                      movq    %rax, (%rbx)
// 220: 4d 89 2e                      movq    %r13, (%r14)
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _JIT_CONTINUE
// 22d: 48 89 ef                      movq    %rbp, %rdi
// 230: 4c 89 f6                      movq    %r14, %rsi
// 233: 4c 89 fa                      movq    %r15, %rdx
// 236: 48 83 c4 18                   addq    $0x18, %rsp
// 23a: 5b                            popq    %rbx
// 23b: 41 5c                         popq    %r12
// 23d: 41 5d                         popq    %r13
// 23f: 41 5e                         popq    %r14
// 241: 41 5f                         popq    %r15
// 243: 5d                            popq    %rbp
// 244: ff e0                         jmpq    *%rax
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_Dealloc
// 250: 4c 89 ef                      movq    %r13, %rdi
// 253: ff d0                         callq   *%rax
// 255: 49 8b 06                      movq    (%r14), %rax
// 258: 48 85 c0                      testq   %rax, %rax
// 25b: 0f 8f c0 fe ff ff             jg      0x121 <_JIT_ENTRY+0x121>
// 261: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000263:  R_X86_64_64  .rodata.str1.1
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_NegativeRefcount
// 275: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 27a: 4c 89 f2                      movq    %r14, %rdx
// 27d: ff d0                         callq   *%rax
// 27f: 49 8b 06                      movq    (%r14), %rax
// 282: 85 c0                         testl   %eax, %eax
// 284: 78 20                         js      0x2a6 <_JIT_ENTRY+0x2a6>
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 290: ff d0                         callq   *%rax
// 292: 49 ff 0e                      decq    (%r14)
// 295: 75 0f                         jne     0x2a6 <_JIT_ENTRY+0x2a6>
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _Py_Dealloc
// 2a1: 4c 89 f7                      movq    %r14, %rdi
// 2a4: ff d0                         callq   *%rax
// 2a6: 48 29 eb                      subq    %rbp, %rbx
// 2a9: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2ad: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2b1: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 2b4: 31 c0                         xorl    %eax, %eax
// 2b6: 48 83 c4 18                   addq    $0x18, %rsp
// 2ba: 5b                            popq    %rbx
// 2bb: 41 5c                         popq    %r12
// 2bd: 41 5d                         popq    %r13
// 2bf: 41 5e                         popq    %r14
// 2c1: 41 5f                         popq    %r15
// 2c3: 5d                            popq    %rbp
// 2c4: c3                            retq
// 2c5: 
static const unsigned char _CHECK_EG_MATCHplus_GUARD_IS_NONE_POP_code_body[710] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfd, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x76, 0xf8, 0x48, 0x8d, 0x5e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x31, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x40, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x5d, 0x01, 0x00, 0x00, 0xe9, 0x78, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x7c, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x88, 0x1e, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x11, 0x01, 0x00, 0x00, 0x4d, 0x8d, 0x74, 0x24, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xef, 0x74, 0x6f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x0b, 0x49, 0x89, 0x06, 0x4c, 0x39, 0xe8, 0x74, 0x5a, 0x49, 0x29, 0xec, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x65, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xbf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x89, 0x75, 0xff, 0xff, 0xff, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x89, 0x03, 0x4d, 0x89, 0x2e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xc0, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_GUARD_IS_NONE_POP_code_holes[23] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_GUARD_IS_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_GUARD_IS_NONE_POP_data_holes[1];

// _CHECK_EG_MATCHplus_GUARD_IS_NOT_NONE_POP
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_GUARD_IS_NOT_NONE_POP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 8d 5e f0                   leaq    -0x10(%rsi), %rbx
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 fe                      movq    %r15, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 43                         js      0x7c <_JIT_ENTRY+0x7c>
// 39: 48 89 2c 24                   movq    %rbp, (%rsp)
// 3d: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 46: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 5e: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 63: 4c 89 ef                      movq    %r13, %rdi
// 66: 4c 89 fe                      movq    %r15, %rsi
// 69: ff d0                         callq   *%rax
// 6b: 89 c5                         movl    %eax, %ebp
// 6d: 49 8b 45 00                   movq    (%r13), %rax
// 71: 48 85 c0                      testq   %rax, %rax
// 74: 7e 1c                         jle     0x92 <_JIT_ENTRY+0x92>
// 76: 85 c0                         testl   %eax, %eax
// 78: 79 3e                         jns     0xb8 <_JIT_ENTRY+0xb8>
// 7a: eb 52                         jmp     0xce <_JIT_ENTRY+0xce>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 62                         jle     0xe7 <_JIT_ENTRY+0xe7>
// 85: 85 c0                         testl   %eax, %eax
// 87: 0f 89 80 00 00 00             jns     0x10d <_JIT_ENTRY+0x10d>
// 8d: e9 9c 00 00 00                jmp     0x12e <_JIT_ENTRY+0x12e>
// 92: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000094:  R_X86_64_64  .rodata.str1.1
// 9c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009e:  R_X86_64_64  _Py_NegativeRefcount
// a6: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// ab: 4c 89 ea                      movq    %r13, %rdx
// ae: ff d0                         callq   *%rax
// b0: 49 8b 45 00                   movq    (%r13), %rax
// b4: 85 c0                         testl   %eax, %eax
// b6: 78 16                         js      0xce <_JIT_ENTRY+0xce>
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c2: ff d0                         callq   *%rax
// c4: 49 ff 4d 00                   decq    (%r13)
// c8: 0f 84 c3 00 00 00             je      0x191 <_JIT_ENTRY+0x191>
// ce: 49 8b 07                      movq    (%r15), %rax
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 0f 8e d2 00 00 00             jle     0x1ac <_JIT_ENTRY+0x1ac>
// da: 85 c0                         testl   %eax, %eax
// dc: 0f 89 ef 00 00 00             jns     0x1d1 <_JIT_ENTRY+0x1d1>
// e2: e9 ff 00 00 00                jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 100: 4c 89 ea                      movq    %r13, %rdx
// 103: ff d0                         callq   *%rax
// 105: 49 8b 45 00                   movq    (%r13), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 49 ff 4d 00                   decq    (%r13)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 4c 89 ef                      movq    %r13, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 49 8b 07                      movq    (%r15), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 09                         jle     0x13f <_JIT_ENTRY+0x13f>
// 136: 85 c0                         testl   %eax, %eax
// 138: 79 2e                         jns     0x168 <_JIT_ENTRY+0x168>
// 13a: e9 90 01 00 00                jmp     0x2cf <_JIT_ENTRY+0x2cf>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 0f 88 67 01 00 00             js      0x2cf <_JIT_ENTRY+0x2cf>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0f                      decq    (%r15)
// 177: 0f 85 52 01 00 00             jne     0x2cf <_JIT_ENTRY+0x2cf>
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_Dealloc
// 187: 4c 89 ff                      movq    %r15, %rdi
// 18a: ff d0                         callq   *%rax
// 18c: e9 3e 01 00 00                jmp     0x2cf <_JIT_ENTRY+0x2cf>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _Py_Dealloc
// 19b: 4c 89 ef                      movq    %r13, %rdi
// 19e: ff d0                         callq   *%rax
// 1a0: 49 8b 07                      movq    (%r15), %rax
// 1a3: 48 85 c0                      testq   %rax, %rax
// 1a6: 0f 8f 2e ff ff ff             jg      0xda <_JIT_ENTRY+0xda>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c5: 4c 89 fa                      movq    %r15, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 49 8b 07                      movq    (%r15), %rax
// 1cd: 85 c0                         testl   %eax, %eax
// 1cf: 78 15                         js      0x1e6 <_JIT_ENTRY+0x1e6>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1db: ff d0                         callq   *%rax
// 1dd: 49 ff 0f                      decq    (%r15)
// 1e0: 0f 84 ce 00 00 00             je      0x2b4 <_JIT_ENTRY+0x2b4>
// 1e6: 85 ed                         testl   %ebp, %ebp
// 1e8: 48 8b 2c 24                   movq    (%rsp), %rbp
// 1ec: 0f 88 dd 00 00 00             js      0x2cf <_JIT_ENTRY+0x2cf>
// 1f2: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1f7: 48 85 ff                      testq   %rdi, %rdi
// 1fa: 0f 84 cf 00 00 00             je      0x2cf <_JIT_ENTRY+0x2cf>
// 200: 4d 8d 7c 24 f8                leaq    -0x8(%r12), %r15
// 205: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000207:  R_X86_64_64  _Py_NoneStruct
// 20f: 48 39 ef                      cmpq    %rbp, %rdi
// 212: 0f 84 d6 00 00 00             je      0x2ee <_JIT_ENTRY+0x2ee>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  PyErr_SetHandledException
// 222: ff d0                         callq   *%rax
// 224: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 229: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 22e: 48 89 03                      movq    %rax, (%rbx)
// 231: 4d 89 2f                      movq    %r13, (%r15)
// 234: 49 39 ed                      cmpq    %rbp, %r13
// 237: 0f 84 bc 00 00 00             je      0x2f9 <_JIT_ENTRY+0x2f9>
// 23d: 49 8b 45 00                   movq    (%r13), %rax
// 241: 48 85 c0                      testq   %rax, %rax
// 244: 48 8b 1c 24                   movq    (%rsp), %rbx
// 248: 7f 22                         jg      0x26c <_JIT_ENTRY+0x26c>
// 24a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024c:  R_X86_64_64  .rodata.str1.1
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _Py_NegativeRefcount
// 25e: be 14 0d 00 00                movl    $0xd14, %esi            # imm = 0xD14
// 263: 4c 89 ea                      movq    %r13, %rdx
// 266: ff d0                         callq   *%rax
// 268: 49 8b 45 00                   movq    (%r13), %rax
// 26c: 85 c0                         testl   %eax, %eax
// 26e: 78 21                         js      0x291 <_JIT_ENTRY+0x291>
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27a: ff d0                         callq   *%rax
// 27c: 49 ff 4d 00                   decq    (%r13)
// 280: 75 0f                         jne     0x291 <_JIT_ENTRY+0x291>
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_Dealloc
// 28c: 4c 89 ef                      movq    %r13, %rdi
// 28f: ff d0                         callq   *%rax
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _JIT_CONTINUE
// 29b: 48 89 df                      movq    %rbx, %rdi
// 29e: 4c 89 fe                      movq    %r15, %rsi
// 2a1: 4c 89 f2                      movq    %r14, %rdx
// 2a4: 48 83 c4 18                   addq    $0x18, %rsp
// 2a8: 5b                            popq    %rbx
// 2a9: 41 5c                         popq    %r12
// 2ab: 41 5d                         popq    %r13
// 2ad: 41 5e                         popq    %r14
// 2af: 41 5f                         popq    %r15
// 2b1: 5d                            popq    %rbp
// 2b2: ff e0                         jmpq    *%rax
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _Py_Dealloc
// 2be: 4c 89 ff                      movq    %r15, %rdi
// 2c1: ff d0                         callq   *%rax
// 2c3: 85 ed                         testl   %ebp, %ebp
// 2c5: 48 8b 2c 24                   movq    (%rsp), %rbp
// 2c9: 0f 89 23 ff ff ff             jns     0x1f2 <_JIT_ENTRY+0x1f2>
// 2cf: 48 29 eb                      subq    %rbp, %rbx
// 2d2: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2d6: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2da: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 2dd: 31 c0                         xorl    %eax, %eax
// 2df: 48 83 c4 18                   addq    $0x18, %rsp
// 2e3: 5b                            popq    %rbx
// 2e4: 41 5c                         popq    %r12
// 2e6: 41 5d                         popq    %r13
// 2e8: 41 5e                         popq    %r14
// 2ea: 41 5f                         popq    %r15
// 2ec: 5d                            popq    %rbp
// 2ed: c3                            retq
// 2ee: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2f3: 48 89 03                      movq    %rax, (%rbx)
// 2f6: 49 89 2f                      movq    %rbp, (%r15)
// 2f9: 48 8b 04 24                   movq    (%rsp), %rax
// 2fd: 49 29 c4                      subq    %rax, %r12
// 300: 49 83 c4 b8                   addq    $-0x48, %r12
// 304: 49 c1 ec 03                   shrq    $0x3, %r12
// 308: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 30c: 48 8b 00                      movq    (%rax), %rax
// 30f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000311:  R_X86_64_64  _JIT_TARGET
// 319: 89 c9                         movl    %ecx, %ecx
// 31b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 31f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 325: eb b8                         jmp     0x2df <_JIT_ENTRY+0x2df>
// 327: 
static const unsigned char _CHECK_EG_MATCHplus_GUARD_IS_NOT_NONE_POP_code_body[808] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfd, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0x8d, 0x5e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x43, 0x48, 0x89, 0x2c, 0x24, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x62, 0x85, 0xc0, 0x0f, 0x89, 0x80, 0x00, 0x00, 0x00, 0xe9, 0x9c, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd2, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xef, 0x00, 0x00, 0x00, 0xe9, 0xff, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2e, 0xe9, 0x90, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x0f, 0x88, 0x67, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x85, 0x52, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x3e, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2e, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0xce, 0x00, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x2c, 0x24, 0x0f, 0x88, 0xdd, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xcf, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x7c, 0x24, 0xf8, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xef, 0x0f, 0x84, 0xd6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x03, 0x4d, 0x89, 0x2f, 0x49, 0x39, 0xed, 0x0f, 0x84, 0xbc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x1c, 0x24, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x0d, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x48, 0x8b, 0x2c, 0x24, 0x0f, 0x89, 0x23, 0xff, 0xff, 0xff, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x03, 0x49, 0x89, 0x2f, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0xb8};
static const Hole _CHECK_EG_MATCHplus_GUARD_IS_NOT_NONE_POP_code_holes[27] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_GUARD_IS_NOT_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_GUARD_IS_NOT_NONE_POP_data_holes[1];

// _CHECK_EG_MATCHplus_GUARD_IS_TRUE_POP
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_GUARD_IS_TRUE_POP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 76 f8                   movq    -0x8(%rsi), %r14
// 1f: 48 8d 5e f0                   leaq    -0x10(%rsi), %rbx
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 f6                      movq    %r14, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 f6                      movq    %r14, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 56                         jle     0xd9 <_JIT_ENTRY+0xd9>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 78                         jns     0xff <_JIT_ENTRY+0xff>
// 87: e9 89 00 00 00                jmp     0x115 <_JIT_ENTRY+0x115>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 4c 89 ea                      movq    %r13, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 45 00                   movq    (%r13), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 4d 00                   decq    (%r13)
// c2: 74 6a                         je      0x12e <_JIT_ENTRY+0x12e>
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7e 79                         jle     0x145 <_JIT_ENTRY+0x145>
// cc: 85 c0                         testl   %eax, %eax
// ce: 0f 89 96 00 00 00             jns     0x16a <_JIT_ENTRY+0x16a>
// d4: e9 a6 00 00 00                jmp     0x17f <_JIT_ENTRY+0x17f>
// d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000db:  R_X86_64_64  .rodata.str1.1
// e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e5:  R_X86_64_64  _Py_NegativeRefcount
// ed: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f2: 4c 89 ea                      movq    %r13, %rdx
// f5: ff d0                         callq   *%rax
// f7: 49 8b 45 00                   movq    (%r13), %rax
// fb: 85 c0                         testl   %eax, %eax
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 4d 00                   decq    (%r13)
// 10f: 0f 84 3f 01 00 00             je      0x254 <_JIT_ENTRY+0x254>
// 115: 49 8b 06                      movq    (%r14), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 0f 8e 4e 01 00 00             jle     0x26f <_JIT_ENTRY+0x26f>
// 121: 85 c0                         testl   %eax, %eax
// 123: 0f 89 6b 01 00 00             jns     0x294 <_JIT_ENTRY+0x294>
// 129: e9 86 01 00 00                jmp     0x2b4 <_JIT_ENTRY+0x2b4>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_Dealloc
// 138: 4c 89 ef                      movq    %r13, %rdi
// 13b: ff d0                         callq   *%rax
// 13d: 49 8b 06                      movq    (%r14), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 87                         jg      0xcc <_JIT_ENTRY+0xcc>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15e: 4c 89 f2                      movq    %r14, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 06                      movq    (%r14), %rax
// 166: 85 c0                         testl   %eax, %eax
// 168: 78 15                         js      0x17f <_JIT_ENTRY+0x17f>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 0e                      decq    (%r14)
// 179: 0f 84 86 00 00 00             je      0x205 <_JIT_ENTRY+0x205>
// 17f: 85 ed                         testl   %ebp, %ebp
// 181: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 186: 0f 88 28 01 00 00             js      0x2b4 <_JIT_ENTRY+0x2b4>
// 18c: 48 8b 3c 24                   movq    (%rsp), %rdi
// 190: 48 85 ff                      testq   %rdi, %rdi
// 193: 0f 84 1b 01 00 00             je      0x2b4 <_JIT_ENTRY+0x2b4>
// 199: 4d 8d 74 24 f8                leaq    -0x8(%r12), %r14
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _Py_NoneStruct
// 1a8: 48 39 c7                      cmpq    %rax, %rdi
// 1ab: 74 79                         je      0x226 <_JIT_ENTRY+0x226>
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  PyErr_SetHandledException
// 1b7: ff d0                         callq   *%rax
// 1b9: 48 8b 04 24                   movq    (%rsp), %rax
// 1bd: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1c2: 48 89 0b                      movq    %rcx, (%rbx)
// 1c5: 49 89 06                      movq    %rax, (%r14)
// 1c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ca:  R_X86_64_64  _Py_FalseStruct
// 1d2: 48 39 c8                      cmpq    %rcx, %rax
// 1d5: 75 5a                         jne     0x231 <_JIT_ENTRY+0x231>
// 1d7: 49 29 ec                      subq    %rbp, %r12
// 1da: 49 83 c4 b8                   addq    $-0x48, %r12
// 1de: 49 c1 ec 03                   shrq    $0x3, %r12
// 1e2: 44 89 65 40                   movl    %r12d, 0x40(%rbp)
// 1e6: 48 8b 45 00                   movq    (%rbp), %rax
// 1ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ec:  R_X86_64_64  _JIT_TARGET
// 1f4: 89 c9                         movl    %ecx, %ecx
// 1f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 200: e9 bf 00 00 00                jmp     0x2c4 <_JIT_ENTRY+0x2c4>
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_Dealloc
// 20f: 4c 89 f7                      movq    %r14, %rdi
// 212: ff d0                         callq   *%rax
// 214: 85 ed                         testl   %ebp, %ebp
// 216: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 21b: 0f 89 6b ff ff ff             jns     0x18c <_JIT_ENTRY+0x18c>
// 221: e9 8e 00 00 00                jmp     0x2b4 <_JIT_ENTRY+0x2b4>
// 226: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 22b: 48 89 0b                      movq    %rcx, (%rbx)
// 22e: 49 89 06                      movq    %rax, (%r14)
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _JIT_CONTINUE
// 23b: 48 89 ef                      movq    %rbp, %rdi
// 23e: 4c 89 f6                      movq    %r14, %rsi
// 241: 4c 89 fa                      movq    %r15, %rdx
// 244: 48 83 c4 18                   addq    $0x18, %rsp
// 248: 5b                            popq    %rbx
// 249: 41 5c                         popq    %r12
// 24b: 41 5d                         popq    %r13
// 24d: 41 5e                         popq    %r14
// 24f: 41 5f                         popq    %r15
// 251: 5d                            popq    %rbp
// 252: ff e0                         jmpq    *%rax
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _Py_Dealloc
// 25e: 4c 89 ef                      movq    %r13, %rdi
// 261: ff d0                         callq   *%rax
// 263: 49 8b 06                      movq    (%r14), %rax
// 266: 48 85 c0                      testq   %rax, %rax
// 269: 0f 8f b2 fe ff ff             jg      0x121 <_JIT_ENTRY+0x121>
// 26f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000271:  R_X86_64_64  .rodata.str1.1
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_NegativeRefcount
// 283: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 288: 4c 89 f2                      movq    %r14, %rdx
// 28b: ff d0                         callq   *%rax
// 28d: 49 8b 06                      movq    (%r14), %rax
// 290: 85 c0                         testl   %eax, %eax
// 292: 78 20                         js      0x2b4 <_JIT_ENTRY+0x2b4>
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 29e: ff d0                         callq   *%rax
// 2a0: 49 ff 0e                      decq    (%r14)
// 2a3: 75 0f                         jne     0x2b4 <_JIT_ENTRY+0x2b4>
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _Py_Dealloc
// 2af: 4c 89 f7                      movq    %r14, %rdi
// 2b2: ff d0                         callq   *%rax
// 2b4: 48 29 eb                      subq    %rbp, %rbx
// 2b7: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2bb: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2bf: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 2c2: 31 c0                         xorl    %eax, %eax
// 2c4: 48 83 c4 18                   addq    $0x18, %rsp
// 2c8: 5b                            popq    %rbx
// 2c9: 41 5c                         popq    %r12
// 2cb: 41 5d                         popq    %r13
// 2cd: 41 5e                         popq    %r14
// 2cf: 41 5f                         popq    %r15
// 2d1: 5d                            popq    %rbp
// 2d2: c3                            retq
// 2d3: 
static const unsigned char _CHECK_EG_MATCHplus_GUARD_IS_TRUE_POP_code_body[724] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfd, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x76, 0xf8, 0x48, 0x8d, 0x5e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x3f, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x4e, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x6b, 0x01, 0x00, 0x00, 0xe9, 0x86, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x88, 0x28, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x1b, 0x01, 0x00, 0x00, 0x4d, 0x8d, 0x74, 0x24, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x79, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x0b, 0x49, 0x89, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x75, 0x5a, 0x49, 0x29, 0xec, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x65, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xbf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x89, 0x6b, 0xff, 0xff, 0xff, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x0b, 0x49, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xb2, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_GUARD_IS_TRUE_POP_code_holes[24] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_GUARD_IS_TRUE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_GUARD_IS_TRUE_POP_data_holes[1];

// _CHECK_EG_MATCHplus_GUARD_KEYS_VERSION
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_GUARD_KEYS_VERSION.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 30 01 00 00             je      0x23f <_JIT_ENTRY+0x23f>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 3f 01 00 00             jle     0x25a <_JIT_ENTRY+0x25a>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 5c 01 00 00             jns     0x27f <_JIT_ENTRY+0x27f>
// 123: e9 77 01 00 00                jmp     0x29f <_JIT_ENTRY+0x29f>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 80 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 1e 01 00 00             js      0x29f <_JIT_ENTRY+0x29f>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 10 01 00 00             je      0x29f <_JIT_ENTRY+0x29f>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 48 8b 40 08                   movq    0x8(%rax), %rax
// 1c0: 48 8b 80 70 03 00 00          movq    0x370(%rax), %rax
// 1c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c9:  R_X86_64_64  _JIT_OPERAND
// 1d1: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 1d4: 75 3f                         jne     0x215 <_JIT_ENTRY+0x215>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _JIT_CONTINUE
// 1e0: 4c 89 f7                      movq    %r14, %rdi
// 1e3: 48 89 de                      movq    %rbx, %rsi
// 1e6: 4c 89 e2                      movq    %r12, %rdx
// 1e9: 48 83 c4 18                   addq    $0x18, %rsp
// 1ed: 5b                            popq    %rbx
// 1ee: 41 5c                         popq    %r12
// 1f0: 41 5d                         popq    %r13
// 1f2: 41 5e                         popq    %r14
// 1f4: 41 5f                         popq    %r15
// 1f6: 5d                            popq    %rbp
// 1f7: ff e0                         jmpq    *%rax
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_Dealloc
// 203: 4c 89 ff                      movq    %r15, %rdi
// 206: ff d0                         callq   *%rax
// 208: 85 ed                         testl   %ebp, %ebp
// 20a: 0f 89 71 ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 210: e9 8a 00 00 00                jmp     0x29f <_JIT_ENTRY+0x29f>
// 215: 4c 29 f3                      subq    %r14, %rbx
// 218: 48 83 c3 b8                   addq    $-0x48, %rbx
// 21c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 220: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 224: 49 8b 06                      movq    (%r14), %rax
// 227: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000229:  R_X86_64_64  _JIT_TARGET
// 231: 89 c9                         movl    %ecx, %ecx
// 233: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 237: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 23d: eb 75                         jmp     0x2b4 <_JIT_ENTRY+0x2b4>
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _Py_Dealloc
// 249: 4c 89 ef                      movq    %r13, %rdi
// 24c: ff d0                         callq   *%rax
// 24e: 49 8b 07                      movq    (%r15), %rax
// 251: 48 85 c0                      testq   %rax, %rax
// 254: 0f 8f c1 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 25a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025c:  R_X86_64_64  .rodata.str1.1
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_NegativeRefcount
// 26e: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 273: 4c 89 fa                      movq    %r15, %rdx
// 276: ff d0                         callq   *%rax
// 278: 49 8b 07                      movq    (%r15), %rax
// 27b: 85 c0                         testl   %eax, %eax
// 27d: 78 20                         js      0x29f <_JIT_ENTRY+0x29f>
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 289: ff d0                         callq   *%rax
// 28b: 49 ff 0f                      decq    (%r15)
// 28e: 75 0f                         jne     0x29f <_JIT_ENTRY+0x29f>
// 290: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000292:  R_X86_64_64  _Py_Dealloc
// 29a: 4c 89 ff                      movq    %r15, %rdi
// 29d: ff d0                         callq   *%rax
// 29f: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2a3: 4c 29 f3                      subq    %r14, %rbx
// 2a6: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2aa: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2ae: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2b2: 31 c0                         xorl    %eax, %eax
// 2b4: 48 83 c4 18                   addq    $0x18, %rsp
// 2b8: 5b                            popq    %rbx
// 2b9: 41 5c                         popq    %r12
// 2bb: 41 5d                         popq    %r13
// 2bd: 41 5e                         popq    %r14
// 2bf: 41 5f                         popq    %r15
// 2c1: 5d                            popq    %rbp
// 2c2: c3                            retq
// 2c3: 
static const unsigned char _CHECK_EG_MATCHplus_GUARD_KEYS_VERSION_code_body[708] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x30, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x3f, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x5c, 0x01, 0x00, 0x00, 0xe9, 0x77, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x1e, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x10, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x80, 0x70, 0x03, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x3f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x71, 0xff, 0xff, 0xff, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x75, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xc1, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_GUARD_KEYS_VERSION_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_GUARD_KEYS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_GUARD_KEYS_VERSION_data_holes[1];

// _CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_LIST
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_LIST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 29 01 00 00             je      0x238 <_JIT_ENTRY+0x238>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 38 01 00 00             jle     0x253 <_JIT_ENTRY+0x253>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 55 01 00 00             jns     0x278 <_JIT_ENTRY+0x278>
// 123: e9 70 01 00 00                jmp     0x298 <_JIT_ENTRY+0x298>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 a6 00 00 00             je      0x21f <_JIT_ENTRY+0x21f>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 17 01 00 00             js      0x298 <_JIT_ENTRY+0x298>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 09 01 00 00             je      0x298 <_JIT_ENTRY+0x298>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 1c0: 48 85 c9                      testq   %rcx, %rcx
// 1c3: 74 2d                         je      0x1f2 <_JIT_ENTRY+0x1f2>
// 1c5: 48 8b 40 10                   movq    0x10(%rax), %rax
// 1c9: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// 1cd: 7d 23                         jge     0x1f2 <_JIT_ENTRY+0x1f2>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _JIT_CONTINUE
// 1d9: 4c 89 f7                      movq    %r14, %rdi
// 1dc: 48 89 de                      movq    %rbx, %rsi
// 1df: 4c 89 e2                      movq    %r12, %rdx
// 1e2: 48 83 c4 18                   addq    $0x18, %rsp
// 1e6: 5b                            popq    %rbx
// 1e7: 41 5c                         popq    %r12
// 1e9: 41 5d                         popq    %r13
// 1eb: 41 5e                         popq    %r14
// 1ed: 41 5f                         popq    %r15
// 1ef: 5d                            popq    %rbp
// 1f0: ff e0                         jmpq    *%rax
// 1f2: 4c 29 f3                      subq    %r14, %rbx
// 1f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 201: 49 8b 06                      movq    (%r14), %rax
// 204: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000206:  R_X86_64_64  _JIT_TARGET
// 20e: 89 c9                         movl    %ecx, %ecx
// 210: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 214: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 21a: e9 8e 00 00 00                jmp     0x2ad <_JIT_ENTRY+0x2ad>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_Dealloc
// 229: 4c 89 ff                      movq    %r15, %rdi
// 22c: ff d0                         callq   *%rax
// 22e: 85 ed                         testl   %ebp, %ebp
// 230: 0f 89 4b ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 236: eb 60                         jmp     0x298 <_JIT_ENTRY+0x298>
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _Py_Dealloc
// 242: 4c 89 ef                      movq    %r13, %rdi
// 245: ff d0                         callq   *%rax
// 247: 49 8b 07                      movq    (%r15), %rax
// 24a: 48 85 c0                      testq   %rax, %rax
// 24d: 0f 8f c8 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 253: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000255:  R_X86_64_64  .rodata.str1.1
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _Py_NegativeRefcount
// 267: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 26c: 4c 89 fa                      movq    %r15, %rdx
// 26f: ff d0                         callq   *%rax
// 271: 49 8b 07                      movq    (%r15), %rax
// 274: 85 c0                         testl   %eax, %eax
// 276: 78 20                         js      0x298 <_JIT_ENTRY+0x298>
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 282: ff d0                         callq   *%rax
// 284: 49 ff 0f                      decq    (%r15)
// 287: 75 0f                         jne     0x298 <_JIT_ENTRY+0x298>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_Dealloc
// 293: 4c 89 ff                      movq    %r15, %rdi
// 296: ff d0                         callq   *%rax
// 298: 48 83 c3 f0                   addq    $-0x10, %rbx
// 29c: 4c 29 f3                      subq    %r14, %rbx
// 29f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2a3: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2a7: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2ab: 31 c0                         xorl    %eax, %eax
// 2ad: 48 83 c4 18                   addq    $0x18, %rsp
// 2b1: 5b                            popq    %rbx
// 2b2: 41 5c                         popq    %r12
// 2b4: 41 5d                         popq    %r13
// 2b6: 41 5e                         popq    %r14
// 2b8: 41 5f                         popq    %r15
// 2ba: 5d                            popq    %rbp
// 2bb: c3                            retq
// 2bc: 
static const unsigned char _CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_LIST_code_body[701] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x29, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x38, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x55, 0x01, 0x00, 0x00, 0xe9, 0x70, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0xa6, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x17, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x2d, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x4b, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xc8, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_LIST_code_holes[23] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_LIST_data_holes[1];

// _CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_RANGE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_RANGE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a2 00 00 00                jmp     0x175 <_JIT_ENTRY+0x175>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 15 01 00 00             je      0x224 <_JIT_ENTRY+0x224>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 24 01 00 00             jle     0x23f <_JIT_ENTRY+0x23f>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 41 01 00 00             jns     0x264 <_JIT_ENTRY+0x264>
// 123: e9 5c 01 00 00                jmp     0x284 <_JIT_ENTRY+0x284>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 11                         js      0x175 <_JIT_ENTRY+0x175>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 74 6d                         je      0x1e2 <_JIT_ENTRY+0x1e2>
// 175: 85 ed                         testl   %ebp, %ebp
// 177: 0f 88 07 01 00 00             js      0x284 <_JIT_ENTRY+0x284>
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 85 ff                      testq   %rdi, %rdi
// 185: 0f 84 f9 00 00 00             je      0x284 <_JIT_ENTRY+0x284>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NoneStruct
// 195: 48 39 c7                      cmpq    %rax, %rdi
// 198: 74 11                         je      0x1ab <_JIT_ENTRY+0x1ab>
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  PyErr_SetHandledException
// 1a4: ff d0                         callq   *%rax
// 1a6: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1ab: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b0: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b4: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1b8: 48 83 78 20 00                cmpq    $0x0, 0x20(%rax)
// 1bd: 7e 3b                         jle     0x1fa <_JIT_ENTRY+0x1fa>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _JIT_CONTINUE
// 1c9: 4c 89 f7                      movq    %r14, %rdi
// 1cc: 48 89 de                      movq    %rbx, %rsi
// 1cf: 4c 89 e2                      movq    %r12, %rdx
// 1d2: 48 83 c4 18                   addq    $0x18, %rsp
// 1d6: 5b                            popq    %rbx
// 1d7: 41 5c                         popq    %r12
// 1d9: 41 5d                         popq    %r13
// 1db: 41 5e                         popq    %r14
// 1dd: 41 5f                         popq    %r15
// 1df: 5d                            popq    %rbp
// 1e0: ff e0                         jmpq    *%rax
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_Dealloc
// 1ec: 4c 89 ff                      movq    %r15, %rdi
// 1ef: ff d0                         callq   *%rax
// 1f1: 85 ed                         testl   %ebp, %ebp
// 1f3: 79 88                         jns     0x17d <_JIT_ENTRY+0x17d>
// 1f5: e9 8a 00 00 00                jmp     0x284 <_JIT_ENTRY+0x284>
// 1fa: 4c 29 f3                      subq    %r14, %rbx
// 1fd: 48 83 c3 b8                   addq    $-0x48, %rbx
// 201: 48 c1 eb 03                   shrq    $0x3, %rbx
// 205: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 209: 49 8b 06                      movq    (%r14), %rax
// 20c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020e:  R_X86_64_64  _JIT_TARGET
// 216: 89 c9                         movl    %ecx, %ecx
// 218: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 21c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 222: eb 75                         jmp     0x299 <_JIT_ENTRY+0x299>
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _Py_Dealloc
// 22e: 4c 89 ef                      movq    %r13, %rdi
// 231: ff d0                         callq   *%rax
// 233: 49 8b 07                      movq    (%r15), %rax
// 236: 48 85 c0                      testq   %rax, %rax
// 239: 0f 8f dc fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 23f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000241:  R_X86_64_64  .rodata.str1.1
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_NegativeRefcount
// 253: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 258: 4c 89 fa                      movq    %r15, %rdx
// 25b: ff d0                         callq   *%rax
// 25d: 49 8b 07                      movq    (%r15), %rax
// 260: 85 c0                         testl   %eax, %eax
// 262: 78 20                         js      0x284 <_JIT_ENTRY+0x284>
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26e: ff d0                         callq   *%rax
// 270: 49 ff 0f                      decq    (%r15)
// 273: 75 0f                         jne     0x284 <_JIT_ENTRY+0x284>
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _Py_Dealloc
// 27f: 4c 89 ff                      movq    %r15, %rdi
// 282: ff d0                         callq   *%rax
// 284: 48 83 c3 f0                   addq    $-0x10, %rbx
// 288: 4c 29 f3                      subq    %r14, %rbx
// 28b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 28f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 293: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 297: 31 c0                         xorl    %eax, %eax
// 299: 48 83 c4 18                   addq    $0x18, %rsp
// 29d: 5b                            popq    %rbx
// 29e: 41 5c                         popq    %r12
// 2a0: 41 5d                         popq    %r13
// 2a2: 41 5e                         popq    %r14
// 2a4: 41 5f                         popq    %r15
// 2a6: 5d                            popq    %rbp
// 2a7: c3                            retq
// 2a8: 
static const unsigned char _CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_RANGE_code_body[681] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x15, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x24, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x41, 0x01, 0x00, 0x00, 0xe9, 0x5c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x6d, 0x85, 0xed, 0x0f, 0x88, 0x07, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xf9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0x83, 0x78, 0x20, 0x00, 0x7e, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x79, 0x88, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x75, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xdc, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_RANGE_code_holes[23] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_RANGE_data_holes[1];

// _CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_TUPLE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_TUPLE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 29 01 00 00             je      0x238 <_JIT_ENTRY+0x238>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 38 01 00 00             jle     0x253 <_JIT_ENTRY+0x253>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 55 01 00 00             jns     0x278 <_JIT_ENTRY+0x278>
// 123: e9 70 01 00 00                jmp     0x298 <_JIT_ENTRY+0x298>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 a6 00 00 00             je      0x21f <_JIT_ENTRY+0x21f>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 17 01 00 00             js      0x298 <_JIT_ENTRY+0x298>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 09 01 00 00             je      0x298 <_JIT_ENTRY+0x298>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 1c0: 48 85 c9                      testq   %rcx, %rcx
// 1c3: 74 2d                         je      0x1f2 <_JIT_ENTRY+0x1f2>
// 1c5: 48 8b 40 10                   movq    0x10(%rax), %rax
// 1c9: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// 1cd: 7d 23                         jge     0x1f2 <_JIT_ENTRY+0x1f2>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _JIT_CONTINUE
// 1d9: 4c 89 f7                      movq    %r14, %rdi
// 1dc: 48 89 de                      movq    %rbx, %rsi
// 1df: 4c 89 e2                      movq    %r12, %rdx
// 1e2: 48 83 c4 18                   addq    $0x18, %rsp
// 1e6: 5b                            popq    %rbx
// 1e7: 41 5c                         popq    %r12
// 1e9: 41 5d                         popq    %r13
// 1eb: 41 5e                         popq    %r14
// 1ed: 41 5f                         popq    %r15
// 1ef: 5d                            popq    %rbp
// 1f0: ff e0                         jmpq    *%rax
// 1f2: 4c 29 f3                      subq    %r14, %rbx
// 1f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 201: 49 8b 06                      movq    (%r14), %rax
// 204: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000206:  R_X86_64_64  _JIT_TARGET
// 20e: 89 c9                         movl    %ecx, %ecx
// 210: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 214: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 21a: e9 8e 00 00 00                jmp     0x2ad <_JIT_ENTRY+0x2ad>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_Dealloc
// 229: 4c 89 ff                      movq    %r15, %rdi
// 22c: ff d0                         callq   *%rax
// 22e: 85 ed                         testl   %ebp, %ebp
// 230: 0f 89 4b ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 236: eb 60                         jmp     0x298 <_JIT_ENTRY+0x298>
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _Py_Dealloc
// 242: 4c 89 ef                      movq    %r13, %rdi
// 245: ff d0                         callq   *%rax
// 247: 49 8b 07                      movq    (%r15), %rax
// 24a: 48 85 c0                      testq   %rax, %rax
// 24d: 0f 8f c8 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 253: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000255:  R_X86_64_64  .rodata.str1.1
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _Py_NegativeRefcount
// 267: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 26c: 4c 89 fa                      movq    %r15, %rdx
// 26f: ff d0                         callq   *%rax
// 271: 49 8b 07                      movq    (%r15), %rax
// 274: 85 c0                         testl   %eax, %eax
// 276: 78 20                         js      0x298 <_JIT_ENTRY+0x298>
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 282: ff d0                         callq   *%rax
// 284: 49 ff 0f                      decq    (%r15)
// 287: 75 0f                         jne     0x298 <_JIT_ENTRY+0x298>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_Dealloc
// 293: 4c 89 ff                      movq    %r15, %rdi
// 296: ff d0                         callq   *%rax
// 298: 48 83 c3 f0                   addq    $-0x10, %rbx
// 29c: 4c 29 f3                      subq    %r14, %rbx
// 29f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2a3: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2a7: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2ab: 31 c0                         xorl    %eax, %eax
// 2ad: 48 83 c4 18                   addq    $0x18, %rsp
// 2b1: 5b                            popq    %rbx
// 2b2: 41 5c                         popq    %r12
// 2b4: 41 5d                         popq    %r13
// 2b6: 41 5e                         popq    %r14
// 2b8: 41 5f                         popq    %r15
// 2ba: 5d                            popq    %rbp
// 2bb: c3                            retq
// 2bc: 
static const unsigned char _CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_TUPLE_code_body[701] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x29, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x38, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x55, 0x01, 0x00, 0x00, 0xe9, 0x70, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0xa6, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x17, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x2d, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x4b, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xc8, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_TUPLE_code_holes[23] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_TUPLE_data_holes[1];

// _CHECK_EG_MATCHplus_GUARD_TYPE_VERSION
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_GUARD_TYPE_VERSION.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a2 00 00 00                jmp     0x175 <_JIT_ENTRY+0x175>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 28 01 00 00             je      0x237 <_JIT_ENTRY+0x237>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 37 01 00 00             jle     0x252 <_JIT_ENTRY+0x252>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 54 01 00 00             jns     0x277 <_JIT_ENTRY+0x277>
// 123: e9 6f 01 00 00                jmp     0x297 <_JIT_ENTRY+0x297>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 11                         js      0x175 <_JIT_ENTRY+0x175>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 74 7c                         je      0x1f1 <_JIT_ENTRY+0x1f1>
// 175: 85 ed                         testl   %ebp, %ebp
// 177: 0f 88 1a 01 00 00             js      0x297 <_JIT_ENTRY+0x297>
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 85 ff                      testq   %rdi, %rdi
// 185: 0f 84 0c 01 00 00             je      0x297 <_JIT_ENTRY+0x297>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NoneStruct
// 195: 48 39 c7                      cmpq    %rax, %rdi
// 198: 74 11                         je      0x1ab <_JIT_ENTRY+0x1ab>
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  PyErr_SetHandledException
// 1a4: ff d0                         callq   *%rax
// 1a6: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1ab: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b0: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b4: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1b8: 48 8b 40 08                   movq    0x8(%rax), %rax
// 1bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001be:  R_X86_64_64  _JIT_OPERAND
// 1c6: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 1cc: 75 3f                         jne     0x20d <_JIT_ENTRY+0x20d>
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _JIT_CONTINUE
// 1d8: 4c 89 f7                      movq    %r14, %rdi
// 1db: 48 89 de                      movq    %rbx, %rsi
// 1de: 4c 89 e2                      movq    %r12, %rdx
// 1e1: 48 83 c4 18                   addq    $0x18, %rsp
// 1e5: 5b                            popq    %rbx
// 1e6: 41 5c                         popq    %r12
// 1e8: 41 5d                         popq    %r13
// 1ea: 41 5e                         popq    %r14
// 1ec: 41 5f                         popq    %r15
// 1ee: 5d                            popq    %rbp
// 1ef: ff e0                         jmpq    *%rax
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_Dealloc
// 1fb: 4c 89 ff                      movq    %r15, %rdi
// 1fe: ff d0                         callq   *%rax
// 200: 85 ed                         testl   %ebp, %ebp
// 202: 0f 89 75 ff ff ff             jns     0x17d <_JIT_ENTRY+0x17d>
// 208: e9 8a 00 00 00                jmp     0x297 <_JIT_ENTRY+0x297>
// 20d: 4c 29 f3                      subq    %r14, %rbx
// 210: 48 83 c3 b8                   addq    $-0x48, %rbx
// 214: 48 c1 eb 03                   shrq    $0x3, %rbx
// 218: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 21c: 49 8b 06                      movq    (%r14), %rax
// 21f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000221:  R_X86_64_64  _JIT_TARGET
// 229: 89 c9                         movl    %ecx, %ecx
// 22b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 22f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 235: eb 75                         jmp     0x2ac <_JIT_ENTRY+0x2ac>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _Py_Dealloc
// 241: 4c 89 ef                      movq    %r13, %rdi
// 244: ff d0                         callq   *%rax
// 246: 49 8b 07                      movq    (%r15), %rax
// 249: 48 85 c0                      testq   %rax, %rax
// 24c: 0f 8f c9 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 252: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000254:  R_X86_64_64  .rodata.str1.1
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  _Py_NegativeRefcount
// 266: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 26b: 4c 89 fa                      movq    %r15, %rdx
// 26e: ff d0                         callq   *%rax
// 270: 49 8b 07                      movq    (%r15), %rax
// 273: 85 c0                         testl   %eax, %eax
// 275: 78 20                         js      0x297 <_JIT_ENTRY+0x297>
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 281: ff d0                         callq   *%rax
// 283: 49 ff 0f                      decq    (%r15)
// 286: 75 0f                         jne     0x297 <_JIT_ENTRY+0x297>
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _Py_Dealloc
// 292: 4c 89 ff                      movq    %r15, %rdi
// 295: ff d0                         callq   *%rax
// 297: 48 83 c3 f0                   addq    $-0x10, %rbx
// 29b: 4c 29 f3                      subq    %r14, %rbx
// 29e: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2a2: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2a6: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2aa: 31 c0                         xorl    %eax, %eax
// 2ac: 48 83 c4 18                   addq    $0x18, %rsp
// 2b0: 5b                            popq    %rbx
// 2b1: 41 5c                         popq    %r12
// 2b3: 41 5d                         popq    %r13
// 2b5: 41 5e                         popq    %r14
// 2b7: 41 5f                         popq    %r15
// 2b9: 5d                            popq    %rbp
// 2ba: c3                            retq
// 2bb: 
static const unsigned char _CHECK_EG_MATCHplus_GUARD_TYPE_VERSION_code_body[700] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x28, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x37, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x54, 0x01, 0x00, 0x00, 0xe9, 0x6f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x7c, 0x85, 0xed, 0x0f, 0x88, 0x1a, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x0c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x3f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x75, 0xff, 0xff, 0xff, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x75, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xc9, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_GUARD_TYPE_VERSION_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_GUARD_TYPE_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_GUARD_TYPE_VERSION_data_holes[1];

// _CHECK_EG_MATCHplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 63                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 81 00 00 00             jns     0x106 <_JIT_ENTRY+0x106>
// 85: e9 9d 00 00 00                jmp     0x127 <_JIT_ENTRY+0x127>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c7 00 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// c6: 49 8b 04 24                   movq    (%r12), %rax
// ca: 48 85 c0                      testq   %rax, %rax
// cd: 0f 8e d6 00 00 00             jle     0x1a9 <_JIT_ENTRY+0x1a9>
// d3: 85 c0                         testl   %eax, %eax
// d5: 0f 89 f4 00 00 00             jns     0x1cf <_JIT_ENTRY+0x1cf>
// db: e9 05 01 00 00                jmp     0x1e5 <_JIT_ENTRY+0x1e5>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f9: 4c 89 ea                      movq    %r13, %rdx
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 21                         js      0x127 <_JIT_ENTRY+0x127>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 4d 00                   decq    (%r13)
// 116: 75 0f                         jne     0x127 <_JIT_ENTRY+0x127>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_Dealloc
// 122: 4c 89 ef                      movq    %r13, %rdi
// 125: ff d0                         callq   *%rax
// 127: 49 8b 04 24                   movq    (%r12), %rax
// 12b: 48 85 c0                      testq   %rax, %rax
// 12e: 7e 09                         jle     0x139 <_JIT_ENTRY+0x139>
// 130: 85 c0                         testl   %eax, %eax
// 132: 79 2f                         jns     0x163 <_JIT_ENTRY+0x163>
// 134: e9 1d 02 00 00                jmp     0x356 <_JIT_ENTRY+0x356>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_NegativeRefcount
// 14d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 152: 4c 89 e2                      movq    %r12, %rdx
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 f3 01 00 00             js      0x356 <_JIT_ENTRY+0x356>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 dd 01 00 00             jne     0x356 <_JIT_ENTRY+0x356>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: 4c 89 e7                      movq    %r12, %rdi
// 186: ff d0                         callq   *%rax
// 188: e9 c9 01 00 00                jmp     0x356 <_JIT_ENTRY+0x356>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: 4c 89 ef                      movq    %r13, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 49 8b 04 24                   movq    (%r12), %rax
// 1a0: 48 85 c0                      testq   %rax, %rax
// 1a3: 0f 8f 2a ff ff ff             jg      0xd3 <_JIT_ENTRY+0xd3>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 49 8b 04 24                   movq    (%r12), %rax
// 1cb: 85 c0                         testl   %eax, %eax
// 1cd: 78 16                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 49 ff 0c 24                   decq    (%r12)
// 1df: 0f 84 5a 01 00 00             je      0x33f <_JIT_ENTRY+0x33f>
// 1e5: 85 ed                         testl   %ebp, %ebp
// 1e7: 0f 88 69 01 00 00             js      0x356 <_JIT_ENTRY+0x356>
// 1ed: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1f2: 48 85 ff                      testq   %rdi, %rdi
// 1f5: 0f 84 5b 01 00 00             je      0x356 <_JIT_ENTRY+0x356>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_NoneStruct
// 205: 48 39 c7                      cmpq    %rax, %rdi
// 208: 74 11                         je      0x21b <_JIT_ENTRY+0x21b>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyErr_SetHandledException
// 214: ff d0                         callq   *%rax
// 216: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 21b: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 220: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 224: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _JIT_OPARG
// 232: 0f b7 c0                      movzwl  %ax, %eax
// 235: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 23a: 29 c1                         subl    %eax, %ecx
// 23c: 48 63 c1                      movslq  %ecx, %rax
// 23f: 4c 8b 24 c3                   movq    (%rbx,%rax,8), %r12
// 243: 4d 8b 6c 24 18                movq    0x18(%r12), %r13
// 248: 41 8b 45 00                   movl    (%r13), %eax
// 24c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 256: ff c0                         incl    %eax
// 258: 74 0c                         je      0x266 <_JIT_ENTRY+0x266>
// 25a: 41 89 45 00                   movl    %eax, (%r13)
// 25e: 48 89 cd                      movq    %rcx, %rbp
// 261: ff d1                         callq   *%rcx
// 263: 48 89 e9                      movq    %rbp, %rcx
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _JIT_OPARG
// 270: f7 d0                         notl    %eax
// 272: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 277: 48 98                         cltq
// 279: 4c 89 2c c3                   movq    %r13, (%rbx,%rax,8)
// 27d: 49 8b 6c 24 10                movq    0x10(%r12), %rbp
// 282: 8b 45 00                      movl    (%rbp), %eax
// 285: ff c0                         incl    %eax
// 287: 74 05                         je      0x28e <_JIT_ENTRY+0x28e>
// 289: 89 45 00                      movl    %eax, (%rbp)
// 28c: ff d1                         callq   *%rcx
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _JIT_OPARG
// 298: 0f b7 c0                      movzwl  %ax, %eax
// 29b: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 2a0: 29 c1                         subl    %eax, %ecx
// 2a2: 48 63 c1                      movslq  %ecx, %rax
// 2a5: 48 89 2c c3                   movq    %rbp, (%rbx,%rax,8)
// 2a9: 49 8b 04 24                   movq    (%r12), %rax
// 2ad: 48 85 c0                      testq   %rax, %rax
// 2b0: 7f 22                         jg      0x2d4 <_JIT_ENTRY+0x2d4>
// 2b2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b4:  R_X86_64_64  .rodata.str1.1
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  _Py_NegativeRefcount
// 2c6: be 18 0a 00 00                movl    $0xa18, %esi            # imm = 0xA18
// 2cb: 4c 89 e2                      movq    %r12, %rdx
// 2ce: ff d0                         callq   *%rax
// 2d0: 49 8b 04 24                   movq    (%r12), %rax
// 2d4: 85 c0                         testl   %eax, %eax
// 2d6: 78 21                         js      0x2f9 <_JIT_ENTRY+0x2f9>
// 2d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002da:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e2: ff d0                         callq   *%rax
// 2e4: 49 ff 0c 24                   decq    (%r12)
// 2e8: 75 0f                         jne     0x2f9 <_JIT_ENTRY+0x2f9>
// 2ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ec:  R_X86_64_64  _Py_Dealloc
// 2f4: 4c 89 e7                      movq    %r12, %rdi
// 2f7: ff d0                         callq   *%rax
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _JIT_OPARG
// 303: 0f b7 c0                      movzwl  %ax, %eax
// 306: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 30b: 29 c1                         subl    %eax, %ecx
// 30d: 48 63 c9                      movslq  %ecx, %rcx
// 310: 48 89 2c cb                   movq    %rbp, (%rbx,%rcx,8)
// 314: f7 d0                         notl    %eax
// 316: 48 98                         cltq
// 318: 4c 89 2c c3                   movq    %r13, (%rbx,%rax,8)
// 31c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031e:  R_X86_64_64  _JIT_CONTINUE
// 326: 4c 89 f7                      movq    %r14, %rdi
// 329: 48 89 de                      movq    %rbx, %rsi
// 32c: 4c 89 fa                      movq    %r15, %rdx
// 32f: 48 83 c4 18                   addq    $0x18, %rsp
// 333: 5b                            popq    %rbx
// 334: 41 5c                         popq    %r12
// 336: 41 5d                         popq    %r13
// 338: 41 5e                         popq    %r14
// 33a: 41 5f                         popq    %r15
// 33c: 5d                            popq    %rbp
// 33d: ff e0                         jmpq    *%rax
// 33f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000341:  R_X86_64_64  _Py_Dealloc
// 349: 4c 89 e7                      movq    %r12, %rdi
// 34c: ff d0                         callq   *%rax
// 34e: 85 ed                         testl   %ebp, %ebp
// 350: 0f 89 97 fe ff ff             jns     0x1ed <_JIT_ENTRY+0x1ed>
// 356: 48 83 c3 f0                   addq    $-0x10, %rbx
// 35a: 4c 29 f3                      subq    %r14, %rbx
// 35d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 361: 48 c1 eb 03                   shrq    $0x3, %rbx
// 365: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 369: 31 c0                         xorl    %eax, %eax
// 36b: 48 83 c4 18                   addq    $0x18, %rsp
// 36f: 5b                            popq    %rbx
// 370: 41 5c                         popq    %r12
// 372: 41 5d                         popq    %r13
// 374: 41 5e                         popq    %r14
// 376: 41 5f                         popq    %r15
// 378: 5d                            popq    %rbp
// 379: c3                            retq
// 37a: 
static const unsigned char _CHECK_EG_MATCHplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_body[891] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0x1d, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xf3, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xdd, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xc9, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x69, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x5b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x8b, 0x24, 0xc3, 0x4d, 0x8b, 0x6c, 0x24, 0x18, 0x41, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x0c, 0x41, 0x89, 0x45, 0x00, 0x48, 0x89, 0xcd, 0xff, 0xd1, 0x48, 0x89, 0xe9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4c, 0x89, 0x2c, 0xc3, 0x49, 0x8b, 0x6c, 0x24, 0x10, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x05, 0x89, 0x45, 0x00, 0xff, 0xd1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x89, 0x2c, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x48, 0x89, 0x2c, 0xcb, 0xf7, 0xd0, 0x48, 0x98, 0x4c, 0x89, 0x2c, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x97, 0xfe, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[31] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x31e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x341, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _CHECK_EG_MATCHplus_INIT_CALL_PY_EXACT_ARGS
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_INIT_CALL_PY_EXACT_ARGS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3c                         js      0x71 <_JIT_ENTRY+0x71>
// 35: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 3d: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 50: 48 89 e2                      movq    %rsp, %rdx
// 53: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 58: 4c 89 ef                      movq    %r13, %rdi
// 5b: 4c 89 e6                      movq    %r12, %rsi
// 5e: ff d0                         callq   *%rax
// 60: 89 c5                         movl    %eax, %ebp
// 62: 49 8b 45 00                   movq    (%r13), %rax
// 66: 48 85 c0                      testq   %rax, %rax
// 69: 7e 18                         jle     0x83 <_JIT_ENTRY+0x83>
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 79 3a                         jns     0xa9 <_JIT_ENTRY+0xa9>
// 6f: eb 4a                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 71: 49 8b 45 00                   movq    (%r13), %rax
// 75: 48 85 c0                      testq   %rax, %rax
// 78: 7e 57                         jle     0xd1 <_JIT_ENTRY+0xd1>
// 7a: 85 c0                         testl   %eax, %eax
// 7c: 79 79                         jns     0xf7 <_JIT_ENTRY+0xf7>
// 7e: e9 8a 00 00 00                jmp     0x10d <_JIT_ENTRY+0x10d>
// 83: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000085:  R_X86_64_64  .rodata.str1.1
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_NegativeRefcount
// 97: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9c: 4c 89 ea                      movq    %r13, %rdx
// 9f: ff d0                         callq   *%rax
// a1: 49 8b 45 00                   movq    (%r13), %rax
// a5: 85 c0                         testl   %eax, %eax
// a7: 78 12                         js      0xbb <_JIT_ENTRY+0xbb>
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b3: ff d0                         callq   *%rax
// b5: 49 ff 4d 00                   decq    (%r13)
// b9: 74 6c                         je      0x127 <_JIT_ENTRY+0x127>
// bb: 49 8b 04 24                   movq    (%r12), %rax
// bf: 48 85 c0                      testq   %rax, %rax
// c2: 7e 7b                         jle     0x13f <_JIT_ENTRY+0x13f>
// c4: 85 c0                         testl   %eax, %eax
// c6: 0f 89 99 00 00 00             jns     0x165 <_JIT_ENTRY+0x165>
// cc: e9 aa 00 00 00                jmp     0x17b <_JIT_ENTRY+0x17b>
// d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d3:  R_X86_64_64  .rodata.str1.1
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_NegativeRefcount
// e5: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ea: 4c 89 ea                      movq    %r13, %rdx
// ed: ff d0                         callq   *%rax
// ef: 49 8b 45 00                   movq    (%r13), %rax
// f3: 85 c0                         testl   %eax, %eax
// f5: 78 16                         js      0x10d <_JIT_ENTRY+0x10d>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 101: ff d0                         callq   *%rax
// 103: 49 ff 4d 00                   decq    (%r13)
// 107: 0f 84 ad 02 00 00             je      0x3ba <_JIT_ENTRY+0x3ba>
// 10d: 49 8b 04 24                   movq    (%r12), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 0f 8e bc 02 00 00             jle     0x3d6 <_JIT_ENTRY+0x3d6>
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 0f 89 da 02 00 00             jns     0x3fc <_JIT_ENTRY+0x3fc>
// 122: e9 f6 02 00 00                jmp     0x41d <_JIT_ENTRY+0x41d>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_Dealloc
// 131: 4c 89 ef                      movq    %r13, %rdi
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 85                         jg      0xc4 <_JIT_ENTRY+0xc4>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 16                         js      0x17b <_JIT_ENTRY+0x17b>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0c 24                   decq    (%r12)
// 175: 0f 84 5e 01 00 00             je      0x2d9 <_JIT_ENTRY+0x2d9>
// 17b: 85 ed                         testl   %ebp, %ebp
// 17d: 0f 88 9a 02 00 00             js      0x41d <_JIT_ENTRY+0x41d>
// 183: 48 8b 3c 24                   movq    (%rsp), %rdi
// 187: 48 85 ff                      testq   %rdi, %rdi
// 18a: 0f 84 8d 02 00 00             je      0x41d <_JIT_ENTRY+0x41d>
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_NoneStruct
// 19a: 48 39 c7                      cmpq    %rax, %rdi
// 19d: 74 10                         je      0x1af <_JIT_ENTRY+0x1af>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  PyErr_SetHandledException
// 1a9: ff d0                         callq   *%rax
// 1ab: 48 8b 04 24                   movq    (%rsp), %rax
// 1af: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1b4: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1b8: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _JIT_OPARG
// 1c6: 0f b7 c0                      movzwl  %ax, %eax
// 1c9: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1ce: 29 c1                         subl    %eax, %ecx
// 1d0: f7 d0                         notl    %eax
// 1d2: 48 63 d0                      movslq  %eax, %rdx
// 1d5: 48 63 c1                      movslq  %ecx, %rax
// 1d8: 4d 8b 24 c6                   movq    (%r14,%rax,8), %r12
// 1dc: 49 8b 0c d6                   movq    (%r14,%rdx,8), %rcx
// 1e0: 49 8b 6c 24 30                movq    0x30(%r12), %rbp
// 1e5: 4d 8b af 00 01 00 00          movq    0x100(%r15), %r13
// 1ec: 48 63 45 4c                   movslq  0x4c(%rbp), %rax
// 1f0: 49 8d 44 c5 00                leaq    (%r13,%rax,8), %rax
// 1f5: 49 89 87 00 01 00 00          movq    %rax, 0x100(%r15)
// 1fc: 4d 89 65 10                   movq    %r12, 0x10(%r13)
// 200: 8b 45 00                      movl    (%rbp), %eax
// 203: ff c0                         incl    %eax
// 205: 49 8d 14 d6                   leaq    (%r14,%rdx,8), %rdx
// 209: 48 85 c9                      testq   %rcx, %rcx
// 20c: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 211: 0f 84 de 00 00 00             je      0x2f5 <_JIT_ENTRY+0x2f5>
// 217: 85 c0                         testl   %eax, %eax
// 219: 74 0f                         je      0x22a <_JIT_ENTRY+0x22a>
// 21b: 89 45 00                      movl    %eax, (%rbp)
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 228: ff d0                         callq   *%rax
// 22a: 49 89 6d 00                   movq    %rbp, (%r13)
// 22e: 41 0f 10 44 24 10             movups  0x10(%r12), %xmm0
// 234: 41 0f 11 45 18                movups  %xmm0, 0x18(%r13)
// 239: 49 c7 45 28 00 00 00 00       movq    $0x0, 0x28(%r13)
// 241: 8b 4d 48                      movl    0x48(%rbp), %ecx
// 244: 41 89 4d 40                   movl    %ecx, 0x40(%r13)
// 248: 49 c7 45 30 00 00 00 00       movq    $0x0, 0x30(%r13)
// 250: 48 81 c5 c8 00 00 00          addq    $0xc8, %rbp
// 257: 49 89 6d 38                   movq    %rbp, 0x38(%r13)
// 25b: 66 41 c7 45 44 00 00          movw    $0x0, 0x44(%r13)
// 262: 41 c6 45 46 00                movb    $0x0, 0x46(%r13)
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _JIT_OPARG
// 271: 0f b7 e8                      movzwl  %ax, %ebp
// 274: ff c5                         incl    %ebp
// 276: 85 ed                         testl   %ebp, %ebp
// 278: 0f 9f c2                      setg    %dl
// 27b: 39 e9                         cmpl    %ebp, %ecx
// 27d: 0f 8e 21 01 00 00             jle     0x3a4 <_JIT_ENTRY+0x3a4>
// 283: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000285:  R_X86_64_64  _JIT_OPARG
// 28d: 41 0f b7 ec                   movzwl  %r12w, %ebp
// 291: ff c5                         incl    %ebp
// 293: 48 8d 3c ed 48 00 00 00       leaq    0x48(,%rbp,8), %rdi
// 29b: 4c 01 ef                      addq    %r13, %rdi
// 29e: 89 e8                         movl    %ebp, %eax
// 2a0: f7 d0                         notl    %eax
// 2a2: 01 c1                         addl    %eax, %ecx
// 2a4: 48 8d 14 cd 08 00 00 00       leaq    0x8(,%rcx,8), %rdx
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  memset
// 2b6: 31 f6                         xorl    %esi, %esi
// 2b8: ff d0                         callq   *%rax
// 2ba: 85 ed                         testl   %ebp, %ebp
// 2bc: 0f 8e 55 02 00 00             jle     0x517 <_JIT_ENTRY+0x517>
// 2c2: 41 0f b7 cc                   movzwl  %r12w, %ecx
// 2c6: 48 c1 e1 03                   shlq    $0x3, %rcx
// 2ca: 4c 89 f0                      movq    %r14, %rax
// 2cd: 48 29 c8                      subq    %rcx, %rax
// 2d0: 48 83 c0 f8                   addq    $-0x8, %rax
// 2d4: e9 7b 01 00 00                jmp     0x454 <_JIT_ENTRY+0x454>
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _Py_Dealloc
// 2e3: 4c 89 e7                      movq    %r12, %rdi
// 2e6: ff d0                         callq   *%rax
// 2e8: 85 ed                         testl   %ebp, %ebp
// 2ea: 0f 89 93 fe ff ff             jns     0x183 <_JIT_ENTRY+0x183>
// 2f0: e9 28 01 00 00                jmp     0x41d <_JIT_ENTRY+0x41d>
// 2f5: 85 c0                         testl   %eax, %eax
// 2f7: 74 0f                         je      0x308 <_JIT_ENTRY+0x308>
// 2f9: 89 45 00                      movl    %eax, (%rbp)
// 2fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fe:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 306: ff d0                         callq   *%rax
// 308: 49 89 6d 00                   movq    %rbp, (%r13)
// 30c: 41 0f 10 44 24 10             movups  0x10(%r12), %xmm0
// 312: 41 0f 11 45 18                movups  %xmm0, 0x18(%r13)
// 317: 49 c7 45 28 00 00 00 00       movq    $0x0, 0x28(%r13)
// 31f: 8b 45 48                      movl    0x48(%rbp), %eax
// 322: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 326: 49 c7 45 30 00 00 00 00       movq    $0x0, 0x30(%r13)
// 32e: 48 81 c5 c8 00 00 00          addq    $0xc8, %rbp
// 335: 49 89 6d 38                   movq    %rbp, 0x38(%r13)
// 339: 66 41 c7 45 44 00 00          movw    $0x0, 0x44(%r13)
// 340: 41 c6 45 46 00                movb    $0x0, 0x46(%r13)
// 345: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000347:  R_X86_64_64  _JIT_OPARG
// 34f: 0f b7 e9                      movzwl  %cx, %ebp
// 352: 85 ed                         testl   %ebp, %ebp
// 354: 0f 9f c2                      setg    %dl
// 357: 39 e8                         cmpl    %ebp, %eax
// 359: 0f 8e e2 00 00 00             jle     0x441 <_JIT_ENTRY+0x441>
// 35f: 44 0f b7 e1                   movzwl  %cx, %r12d
// 363: 4a 8d 3c e5 48 00 00 00       leaq    0x48(,%r12,8), %rdi
// 36b: 4c 01 ef                      addq    %r13, %rdi
// 36e: 0f b7 e9                      movzwl  %cx, %ebp
// 371: 89 e9                         movl    %ebp, %ecx
// 373: f7 d1                         notl    %ecx
// 375: 01 c8                         addl    %ecx, %eax
// 377: 48 8d 14 c5 08 00 00 00       leaq    0x8(,%rax,8), %rdx
// 37f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000381:  R_X86_64_64  memset
// 389: 31 f6                         xorl    %esi, %esi
// 38b: ff d0                         callq   *%rax
// 38d: 85 ed                         testl   %ebp, %ebp
// 38f: 0f 8e 82 01 00 00             jle     0x517 <_JIT_ENTRY+0x517>
// 395: 49 c1 e4 03                   shlq    $0x3, %r12
// 399: 4c 89 f0                      movq    %r14, %rax
// 39c: 4c 29 e0                      subq    %r12, %rax
// 39f: e9 b0 00 00 00                jmp     0x454 <_JIT_ENTRY+0x454>
// 3a4: f7 d0                         notl    %eax
// 3a6: 48 0d 00 00 ff ff             orq     $-0x10000, %rax         # imm = 0xFFFF0000
// 3ac: f6 c2 01                      testb   $0x1, %dl
// 3af: 0f 85 9b 00 00 00             jne     0x450 <_JIT_ENTRY+0x450>
// 3b5: e9 5d 01 00 00                jmp     0x517 <_JIT_ENTRY+0x517>
// 3ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bc:  R_X86_64_64  _Py_Dealloc
// 3c4: 4c 89 ef                      movq    %r13, %rdi
// 3c7: ff d0                         callq   *%rax
// 3c9: 49 8b 04 24                   movq    (%r12), %rax
// 3cd: 48 85 c0                      testq   %rax, %rax
// 3d0: 0f 8f 44 fd ff ff             jg      0x11a <_JIT_ENTRY+0x11a>
// 3d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003d8:  R_X86_64_64  .rodata.str1.1
// 3e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e2:  R_X86_64_64  _Py_NegativeRefcount
// 3ea: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 3ef: 4c 89 e2                      movq    %r12, %rdx
// 3f2: ff d0                         callq   *%rax
// 3f4: 49 8b 04 24                   movq    (%r12), %rax
// 3f8: 85 c0                         testl   %eax, %eax
// 3fa: 78 21                         js      0x41d <_JIT_ENTRY+0x41d>
// 3fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 406: ff d0                         callq   *%rax
// 408: 49 ff 0c 24                   decq    (%r12)
// 40c: 75 0f                         jne     0x41d <_JIT_ENTRY+0x41d>
// 40e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000410:  R_X86_64_64  _Py_Dealloc
// 418: 4c 89 e7                      movq    %r12, %rdi
// 41b: ff d0                         callq   *%rax
// 41d: 49 83 c6 f0                   addq    $-0x10, %r14
// 421: 49 29 de                      subq    %rbx, %r14
// 424: 49 83 c6 b8                   addq    $-0x48, %r14
// 428: 49 c1 ee 03                   shrq    $0x3, %r14
// 42c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 430: 31 c0                         xorl    %eax, %eax
// 432: 48 83 c4 18                   addq    $0x18, %rsp
// 436: 5b                            popq    %rbx
// 437: 41 5c                         popq    %r12
// 439: 41 5d                         popq    %r13
// 43b: 41 5e                         popq    %r14
// 43d: 41 5f                         popq    %r15
// 43f: 5d                            popq    %rbp
// 440: c3                            retq
// 441: 0f b7 c1                      movzwl  %cx, %eax
// 444: 48 f7 d8                      negq    %rax
// 447: f6 c2 01                      testb   $0x1, %dl
// 44a: 0f 84 c7 00 00 00             je      0x517 <_JIT_ENTRY+0x517>
// 450: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 454: 83 fd 02                      cmpl    $0x2, %ebp
// 457: b9 01 00 00 00                movl    $0x1, %ecx
// 45c: 0f 4d cd                      cmovgel %ebp, %ecx
// 45f: 83 f9 08                      cmpl    $0x8, %ecx
// 462: 72 10                         jb      0x474 <_JIT_ENTRY+0x474>
// 464: 4c 89 ea                      movq    %r13, %rdx
// 467: 48 29 c2                      subq    %rax, %rdx
// 46a: 48 83 c2 48                   addq    $0x48, %rdx
// 46e: 48 83 fa 20                   cmpq    $0x20, %rdx
// 472: 73 6e                         jae     0x4e2 <_JIT_ENTRY+0x4e2>
// 474: 31 d2                         xorl    %edx, %edx
// 476: 48 89 d6                      movq    %rdx, %rsi
// 479: 48 f7 d6                      notq    %rsi
// 47c: 48 01 ce                      addq    %rcx, %rsi
// 47f: 48 89 cf                      movq    %rcx, %rdi
// 482: 48 83 e7 03                   andq    $0x3, %rdi
// 486: 74 19                         je      0x4a1 <_JIT_ENTRY+0x4a1>
// 488: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 490: 4c 8b 04 d0                   movq    (%rax,%rdx,8), %r8
// 494: 4d 89 44 d5 48                movq    %r8, 0x48(%r13,%rdx,8)
// 499: 48 ff c2                      incq    %rdx
// 49c: 48 ff cf                      decq    %rdi
// 49f: 75 ef                         jne     0x490 <_JIT_ENTRY+0x490>
// 4a1: 48 83 fe 03                   cmpq    $0x3, %rsi
// 4a5: 72 70                         jb      0x517 <_JIT_ENTRY+0x517>
// 4a7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 4b0: 48 8b 34 d0                   movq    (%rax,%rdx,8), %rsi
// 4b4: 49 89 74 d5 48                movq    %rsi, 0x48(%r13,%rdx,8)
// 4b9: 48 8b 74 d0 08                movq    0x8(%rax,%rdx,8), %rsi
// 4be: 49 89 74 d5 50                movq    %rsi, 0x50(%r13,%rdx,8)
// 4c3: 48 8b 74 d0 10                movq    0x10(%rax,%rdx,8), %rsi
// 4c8: 49 89 74 d5 58                movq    %rsi, 0x58(%r13,%rdx,8)
// 4cd: 48 8b 74 d0 18                movq    0x18(%rax,%rdx,8), %rsi
// 4d2: 49 89 74 d5 60                movq    %rsi, 0x60(%r13,%rdx,8)
// 4d7: 48 83 c2 04                   addq    $0x4, %rdx
// 4db: 48 39 d1                      cmpq    %rdx, %rcx
// 4de: 75 d0                         jne     0x4b0 <_JIT_ENTRY+0x4b0>
// 4e0: eb 35                         jmp     0x517 <_JIT_ENTRY+0x517>
// 4e2: 89 ca                         movl    %ecx, %edx
// 4e4: 81 e2 fc ff ff 7f             andl    $0x7ffffffc, %edx       # imm = 0x7FFFFFFC
// 4ea: 31 f6                         xorl    %esi, %esi
// 4ec: 0f 1f 40 00                   nopl    (%rax)
// 4f0: 0f 10 04 f0                   movups  (%rax,%rsi,8), %xmm0
// 4f4: 0f 10 4c f0 10                movups  0x10(%rax,%rsi,8), %xmm1
// 4f9: 41 0f 11 44 f5 48             movups  %xmm0, 0x48(%r13,%rsi,8)
// 4ff: 41 0f 11 4c f5 58             movups  %xmm1, 0x58(%r13,%rsi,8)
// 505: 48 83 c6 04                   addq    $0x4, %rsi
// 509: 48 39 f2                      cmpq    %rsi, %rdx
// 50c: 75 e2                         jne     0x4f0 <_JIT_ENTRY+0x4f0>
// 50e: 48 39 ca                      cmpq    %rcx, %rdx
// 511: 0f 85 5f ff ff ff             jne     0x476 <_JIT_ENTRY+0x476>
// 517: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000519:  R_X86_64_64  _JIT_OPARG
// 521: 0f b7 c0                      movzwl  %ax, %eax
// 524: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 529: 29 c1                         subl    %eax, %ecx
// 52b: 48 63 c1                      movslq  %ecx, %rax
// 52e: 4d 89 2c c6                   movq    %r13, (%r14,%rax,8)
// 532: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000534:  R_X86_64_64  _JIT_CONTINUE
// 53c: 48 89 df                      movq    %rbx, %rdi
// 53f: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 544: 4c 89 fa                      movq    %r15, %rdx
// 547: 48 83 c4 18                   addq    $0x18, %rsp
// 54b: 5b                            popq    %rbx
// 54c: 41 5c                         popq    %r12
// 54e: 41 5d                         popq    %r13
// 550: 41 5e                         popq    %r14
// 552: 41 5f                         popq    %r15
// 554: 5d                            popq    %rbp
// 555: ff e0                         jmpq    *%rax
// 557: 
static const unsigned char _CHECK_EG_MATCHplus_INIT_CALL_PY_EXACT_ARGS_code_body[1368] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xad, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xbc, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xda, 0x02, 0x00, 0x00, 0xe9, 0xf6, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x5e, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x9a, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x8d, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x89, 0x4e, 0xf0, 0x49, 0x89, 0x46, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x63, 0xd0, 0x48, 0x63, 0xc1, 0x4d, 0x8b, 0x24, 0xc6, 0x49, 0x8b, 0x0c, 0xd6, 0x49, 0x8b, 0x6c, 0x24, 0x30, 0x4d, 0x8b, 0xaf, 0x00, 0x01, 0x00, 0x00, 0x48, 0x63, 0x45, 0x4c, 0x49, 0x8d, 0x44, 0xc5, 0x00, 0x49, 0x89, 0x87, 0x00, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x65, 0x10, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x49, 0x8d, 0x14, 0xd6, 0x48, 0x85, 0xc9, 0x48, 0x89, 0x54, 0x24, 0x10, 0x0f, 0x84, 0xde, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x0f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0x6d, 0x00, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0x41, 0x0f, 0x11, 0x45, 0x18, 0x49, 0xc7, 0x45, 0x28, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x4d, 0x48, 0x41, 0x89, 0x4d, 0x40, 0x49, 0xc7, 0x45, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc5, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6d, 0x38, 0x66, 0x41, 0xc7, 0x45, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x45, 0x46, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0xff, 0xc5, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x39, 0xe9, 0x0f, 0x8e, 0x21, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xec, 0xff, 0xc5, 0x48, 0x8d, 0x3c, 0xed, 0x48, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xef, 0x89, 0xe8, 0xf7, 0xd0, 0x01, 0xc1, 0x48, 0x8d, 0x14, 0xcd, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x8e, 0x55, 0x02, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xcc, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xf8, 0xe9, 0x7b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x93, 0xfe, 0xff, 0xff, 0xe9, 0x28, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x0f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0x6d, 0x00, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0x41, 0x0f, 0x11, 0x45, 0x18, 0x49, 0xc7, 0x45, 0x28, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x45, 0x48, 0x41, 0x89, 0x45, 0x40, 0x49, 0xc7, 0x45, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc5, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6d, 0x38, 0x66, 0x41, 0xc7, 0x45, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x45, 0x46, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe9, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x39, 0xe8, 0x0f, 0x8e, 0xe2, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe1, 0x4a, 0x8d, 0x3c, 0xe5, 0x48, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xef, 0x0f, 0xb7, 0xe9, 0x89, 0xe9, 0xf7, 0xd1, 0x01, 0xc8, 0x48, 0x8d, 0x14, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x8e, 0x82, 0x01, 0x00, 0x00, 0x49, 0xc1, 0xe4, 0x03, 0x4c, 0x89, 0xf0, 0x4c, 0x29, 0xe0, 0xe9, 0xb0, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x48, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xc2, 0x01, 0x0f, 0x85, 0x9b, 0x00, 0x00, 0x00, 0xe9, 0x5d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x44, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x0f, 0xb7, 0xc1, 0x48, 0xf7, 0xd8, 0xf6, 0xc2, 0x01, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xc6, 0x83, 0xfd, 0x02, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x4d, 0xcd, 0x83, 0xf9, 0x08, 0x72, 0x10, 0x4c, 0x89, 0xea, 0x48, 0x29, 0xc2, 0x48, 0x83, 0xc2, 0x48, 0x48, 0x83, 0xfa, 0x20, 0x73, 0x6e, 0x31, 0xd2, 0x48, 0x89, 0xd6, 0x48, 0xf7, 0xd6, 0x48, 0x01, 0xce, 0x48, 0x89, 0xcf, 0x48, 0x83, 0xe7, 0x03, 0x74, 0x19, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x04, 0xd0, 0x4d, 0x89, 0x44, 0xd5, 0x48, 0x48, 0xff, 0xc2, 0x48, 0xff, 0xcf, 0x75, 0xef, 0x48, 0x83, 0xfe, 0x03, 0x72, 0x70, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x34, 0xd0, 0x49, 0x89, 0x74, 0xd5, 0x48, 0x48, 0x8b, 0x74, 0xd0, 0x08, 0x49, 0x89, 0x74, 0xd5, 0x50, 0x48, 0x8b, 0x74, 0xd0, 0x10, 0x49, 0x89, 0x74, 0xd5, 0x58, 0x48, 0x8b, 0x74, 0xd0, 0x18, 0x49, 0x89, 0x74, 0xd5, 0x60, 0x48, 0x83, 0xc2, 0x04, 0x48, 0x39, 0xd1, 0x75, 0xd0, 0xeb, 0x35, 0x89, 0xca, 0x81, 0xe2, 0xfc, 0xff, 0xff, 0x7f, 0x31, 0xf6, 0x0f, 0x1f, 0x40, 0x00, 0x0f, 0x10, 0x04, 0xf0, 0x0f, 0x10, 0x4c, 0xf0, 0x10, 0x41, 0x0f, 0x11, 0x44, 0xf5, 0x48, 0x41, 0x0f, 0x11, 0x4c, 0xf5, 0x58, 0x48, 0x83, 0xc6, 0x04, 0x48, 0x39, 0xf2, 0x75, 0xe2, 0x48, 0x39, 0xca, 0x0f, 0x85, 0x5f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_INIT_CALL_PY_EXACT_ARGS_code_holes[31] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x347, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x381, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x3bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3d8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x410, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x519, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x534, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_INIT_CALL_PY_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_INIT_CALL_PY_EXACT_ARGS_data_holes[1];

// _CHECK_EG_MATCHplus_INSERT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_INSERT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 1e 01 00 00             je      0x22d <_JIT_ENTRY+0x22d>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 2d 01 00 00             jle     0x248 <_JIT_ENTRY+0x248>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 4a 01 00 00             jns     0x26d <_JIT_ENTRY+0x26d>
// 123: e9 65 01 00 00                jmp     0x28d <_JIT_ENTRY+0x28d>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 9b 00 00 00             je      0x214 <_JIT_ENTRY+0x214>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 0c 01 00 00             js      0x28d <_JIT_ENTRY+0x28d>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 fe 00 00 00             je      0x28d <_JIT_ENTRY+0x28d>
// 18f: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 4c 39 ff                      cmpq    %r15, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1af: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b4: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 1b8: 4c 89 7b f8                   movq    %r15, -0x8(%rbx)
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _JIT_OPARG
// 1c6: 0f b7 d0                      movzwl  %ax, %edx
// 1c9: f7 d0                         notl    %eax
// 1cb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1d0: 4c 63 e8                      movslq  %eax, %r13
// 1d3: 4a 8d 3c eb                   leaq    (%rbx,%r13,8), %rdi
// 1d7: 48 c1 e2 03                   shlq    $0x3, %rdx
// 1db: 48 89 de                      movq    %rbx, %rsi
// 1de: 48 29 d6                      subq    %rdx, %rsi
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  memmove
// 1eb: ff d0                         callq   *%rax
// 1ed: 4e 89 3c eb                   movq    %r15, (%rbx,%r13,8)
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _JIT_CONTINUE
// 1fb: 4c 89 f7                      movq    %r14, %rdi
// 1fe: 48 89 de                      movq    %rbx, %rsi
// 201: 4c 89 e2                      movq    %r12, %rdx
// 204: 48 83 c4 18                   addq    $0x18, %rsp
// 208: 5b                            popq    %rbx
// 209: 41 5c                         popq    %r12
// 20b: 41 5d                         popq    %r13
// 20d: 41 5e                         popq    %r14
// 20f: 41 5f                         popq    %r15
// 211: 5d                            popq    %rbp
// 212: ff e0                         jmpq    *%rax
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_Dealloc
// 21e: 4c 89 ff                      movq    %r15, %rdi
// 221: ff d0                         callq   *%rax
// 223: 85 ed                         testl   %ebp, %ebp
// 225: 0f 89 56 ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 22b: eb 60                         jmp     0x28d <_JIT_ENTRY+0x28d>
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_Dealloc
// 237: 4c 89 ef                      movq    %r13, %rdi
// 23a: ff d0                         callq   *%rax
// 23c: 49 8b 07                      movq    (%r15), %rax
// 23f: 48 85 c0                      testq   %rax, %rax
// 242: 0f 8f d3 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 248: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024a:  R_X86_64_64  .rodata.str1.1
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_NegativeRefcount
// 25c: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 261: 4c 89 fa                      movq    %r15, %rdx
// 264: ff d0                         callq   *%rax
// 266: 49 8b 07                      movq    (%r15), %rax
// 269: 85 c0                         testl   %eax, %eax
// 26b: 78 20                         js      0x28d <_JIT_ENTRY+0x28d>
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 277: ff d0                         callq   *%rax
// 279: 49 ff 0f                      decq    (%r15)
// 27c: 75 0f                         jne     0x28d <_JIT_ENTRY+0x28d>
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _Py_Dealloc
// 288: 4c 89 ff                      movq    %r15, %rdi
// 28b: ff d0                         callq   *%rax
// 28d: 48 83 c3 f0                   addq    $-0x10, %rbx
// 291: 4c 29 f3                      subq    %r14, %rbx
// 294: 48 83 c3 b8                   addq    $-0x48, %rbx
// 298: 48 c1 eb 03                   shrq    $0x3, %rbx
// 29c: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2a0: 31 c0                         xorl    %eax, %eax
// 2a2: 48 83 c4 18                   addq    $0x18, %rsp
// 2a6: 5b                            popq    %rbx
// 2a7: 41 5c                         popq    %r12
// 2a9: 41 5d                         popq    %r13
// 2ab: 41 5e                         popq    %r14
// 2ad: 41 5f                         popq    %r15
// 2af: 5d                            popq    %rbp
// 2b0: c3                            retq
// 2b1: 
static const unsigned char _CHECK_EG_MATCHplus_INSERT_code_body[690] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x1e, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x2d, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x4a, 0x01, 0x00, 0x00, 0xe9, 0x65, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x0c, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xfe, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xff, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x7b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe8, 0x4a, 0x8d, 0x3c, 0xeb, 0x48, 0xc1, 0xe2, 0x03, 0x48, 0x89, 0xde, 0x48, 0x29, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4e, 0x89, 0x3c, 0xeb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x56, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xd3, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_INSERT_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &memmove, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_INSERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_INSERT_data_holes[1];

// _CHECK_EG_MATCHplus_IS_NONE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_IS_NONE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 8d 5e f0                   leaq    -0x10(%rsi), %rbx
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 46                         js      0x7f <_JIT_ENTRY+0x7f>
// 39: 4c 89 34 24                   movq    %r14, (%rsp)
// 3d: 49 89 ee                      movq    %rbp, %r14
// 40: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 49: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 52: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000054:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 5c: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 61: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 66: 4c 89 ef                      movq    %r13, %rdi
// 69: 4c 89 e6                      movq    %r12, %rsi
// 6c: ff d0                         callq   *%rax
// 6e: 89 c5                         movl    %eax, %ebp
// 70: 49 8b 45 00                   movq    (%r13), %rax
// 74: 48 85 c0                      testq   %rax, %rax
// 77: 7e 1c                         jle     0x95 <_JIT_ENTRY+0x95>
// 79: 85 c0                         testl   %eax, %eax
// 7b: 79 3e                         jns     0xbb <_JIT_ENTRY+0xbb>
// 7d: eb 52                         jmp     0xd1 <_JIT_ENTRY+0xd1>
// 7f: 49 8b 45 00                   movq    (%r13), %rax
// 83: 48 85 c0                      testq   %rax, %rax
// 86: 7e 63                         jle     0xeb <_JIT_ENTRY+0xeb>
// 88: 85 c0                         testl   %eax, %eax
// 8a: 0f 89 81 00 00 00             jns     0x111 <_JIT_ENTRY+0x111>
// 90: e9 9d 00 00 00                jmp     0x132 <_JIT_ENTRY+0x132>
// 95: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000097:  R_X86_64_64  .rodata.str1.1
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _Py_NegativeRefcount
// a9: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// ae: 4c 89 ea                      movq    %r13, %rdx
// b1: ff d0                         callq   *%rax
// b3: 49 8b 45 00                   movq    (%r13), %rax
// b7: 85 c0                         testl   %eax, %eax
// b9: 78 16                         js      0xd1 <_JIT_ENTRY+0xd1>
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c5: ff d0                         callq   *%rax
// c7: 49 ff 4d 00                   decq    (%r13)
// cb: 0f 84 c7 00 00 00             je      0x198 <_JIT_ENTRY+0x198>
// d1: 49 8b 04 24                   movq    (%r12), %rax
// d5: 48 85 c0                      testq   %rax, %rax
// d8: 0f 8e d6 00 00 00             jle     0x1b4 <_JIT_ENTRY+0x1b4>
// de: 85 c0                         testl   %eax, %eax
// e0: 0f 89 f4 00 00 00             jns     0x1da <_JIT_ENTRY+0x1da>
// e6: e9 05 01 00 00                jmp     0x1f0 <_JIT_ENTRY+0x1f0>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 104: 4c 89 ea                      movq    %r13, %rdx
// 107: ff d0                         callq   *%rax
// 109: 49 8b 45 00                   movq    (%r13), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 21                         js      0x132 <_JIT_ENTRY+0x132>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 49 ff 4d 00                   decq    (%r13)
// 121: 75 0f                         jne     0x132 <_JIT_ENTRY+0x132>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 4c 89 ef                      movq    %r13, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7e 09                         jle     0x144 <_JIT_ENTRY+0x144>
// 13b: 85 c0                         testl   %eax, %eax
// 13d: 79 2f                         jns     0x16e <_JIT_ENTRY+0x16e>
// 13f: e9 79 01 00 00                jmp     0x2bd <_JIT_ENTRY+0x2bd>
// 144: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000146:  R_X86_64_64  .rodata.str1.1
// 14e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000150:  R_X86_64_64  _Py_NegativeRefcount
// 158: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 15d: 4c 89 e2                      movq    %r12, %rdx
// 160: ff d0                         callq   *%rax
// 162: 49 8b 04 24                   movq    (%r12), %rax
// 166: 85 c0                         testl   %eax, %eax
// 168: 0f 88 4f 01 00 00             js      0x2bd <_JIT_ENTRY+0x2bd>
// 16e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000170:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 178: ff d0                         callq   *%rax
// 17a: 49 ff 0c 24                   decq    (%r12)
// 17e: 0f 85 39 01 00 00             jne     0x2bd <_JIT_ENTRY+0x2bd>
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_Dealloc
// 18e: 4c 89 e7                      movq    %r12, %rdi
// 191: ff d0                         callq   *%rax
// 193: e9 25 01 00 00                jmp     0x2bd <_JIT_ENTRY+0x2bd>
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  _Py_Dealloc
// 1a2: 4c 89 ef                      movq    %r13, %rdi
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 04 24                   movq    (%r12), %rax
// 1ab: 48 85 c0                      testq   %rax, %rax
// 1ae: 0f 8f 2a ff ff ff             jg      0xde <_JIT_ENTRY+0xde>
// 1b4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b6:  R_X86_64_64  .rodata.str1.1
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _Py_NegativeRefcount
// 1c8: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1cd: 4c 89 e2                      movq    %r12, %rdx
// 1d0: ff d0                         callq   *%rax
// 1d2: 49 8b 04 24                   movq    (%r12), %rax
// 1d6: 85 c0                         testl   %eax, %eax
// 1d8: 78 16                         js      0x1f0 <_JIT_ENTRY+0x1f0>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e4: ff d0                         callq   *%rax
// 1e6: 49 ff 0c 24                   decq    (%r12)
// 1ea: 0f 84 b3 00 00 00             je      0x2a3 <_JIT_ENTRY+0x2a3>
// 1f0: 85 ed                         testl   %ebp, %ebp
// 1f2: 4c 89 f5                      movq    %r14, %rbp
// 1f5: 0f 88 c2 00 00 00             js      0x2bd <_JIT_ENTRY+0x2bd>
// 1fb: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 200: 48 85 ff                      testq   %rdi, %rdi
// 203: 0f 84 b4 00 00 00             je      0x2bd <_JIT_ENTRY+0x2bd>
// 209: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000020b:  R_X86_64_64  _Py_NoneStruct
// 213: 4c 39 ef                      cmpq    %r13, %rdi
// 216: 0f 84 c0 00 00 00             je      0x2dc <_JIT_ENTRY+0x2dc>
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  PyErr_SetHandledException
// 226: ff d0                         callq   *%rax
// 228: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 22d: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 232: 49 89 47 f0                   movq    %rax, -0x10(%r15)
// 236: 4d 89 67 f8                   movq    %r12, -0x8(%r15)
// 23a: 4d 39 ec                      cmpq    %r13, %r12
// 23d: 0f 84 a1 00 00 00             je      0x2e4 <_JIT_ENTRY+0x2e4>
// 243: 49 8b 04 24                   movq    (%r12), %rax
// 247: 48 85 c0                      testq   %rax, %rax
// 24a: 7f 22                         jg      0x26e <_JIT_ENTRY+0x26e>
// 24c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024e:  R_X86_64_64  .rodata.str1.1
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _Py_NegativeRefcount
// 260: be ef 07 00 00                movl    $0x7ef, %esi            # imm = 0x7EF
// 265: 4c 89 e2                      movq    %r12, %rdx
// 268: ff d0                         callq   *%rax
// 26a: 49 8b 04 24                   movq    (%r12), %rax
// 26e: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000270:  R_X86_64_64  _Py_FalseStruct
// 278: 85 c0                         testl   %eax, %eax
// 27a: 4c 8b 34 24                   movq    (%rsp), %r14
// 27e: 78 72                         js      0x2f2 <_JIT_ENTRY+0x2f2>
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28a: ff d0                         callq   *%rax
// 28c: 49 ff 0c 24                   decq    (%r12)
// 290: 75 60                         jne     0x2f2 <_JIT_ENTRY+0x2f2>
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _Py_Dealloc
// 29c: 4c 89 e7                      movq    %r12, %rdi
// 29f: ff d0                         callq   *%rax
// 2a1: eb 4f                         jmp     0x2f2 <_JIT_ENTRY+0x2f2>
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _Py_Dealloc
// 2ad: 4c 89 e7                      movq    %r12, %rdi
// 2b0: ff d0                         callq   *%rax
// 2b2: 85 ed                         testl   %ebp, %ebp
// 2b4: 4c 89 f5                      movq    %r14, %rbp
// 2b7: 0f 89 3e ff ff ff             jns     0x1fb <_JIT_ENTRY+0x1fb>
// 2bd: 48 29 eb                      subq    %rbp, %rbx
// 2c0: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2c4: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2c8: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 2cb: 31 c0                         xorl    %eax, %eax
// 2cd: 48 83 c4 18                   addq    $0x18, %rsp
// 2d1: 5b                            popq    %rbx
// 2d2: 41 5c                         popq    %r12
// 2d4: 41 5d                         popq    %r13
// 2d6: 41 5e                         popq    %r14
// 2d8: 41 5f                         popq    %r15
// 2da: 5d                            popq    %rbp
// 2db: c3                            retq
// 2dc: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2e1: 48 89 03                      movq    %rax, (%rbx)
// 2e4: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000002e6:  R_X86_64_64  _Py_TrueStruct
// 2ee: 4c 8b 34 24                   movq    (%rsp), %r14
// 2f2: 49 89 5f f8                   movq    %rbx, -0x8(%r15)
// 2f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f8:  R_X86_64_64  _JIT_CONTINUE
// 300: 48 89 ef                      movq    %rbp, %rdi
// 303: 4c 89 fe                      movq    %r15, %rsi
// 306: 4c 89 f2                      movq    %r14, %rdx
// 309: 48 83 c4 18                   addq    $0x18, %rsp
// 30d: 5b                            popq    %rbx
// 30e: 41 5c                         popq    %r12
// 310: 41 5d                         popq    %r13
// 312: 41 5e                         popq    %r14
// 314: 41 5f                         popq    %r15
// 316: 5d                            popq    %rbp
// 317: ff e0                         jmpq    *%rax
// 319: 
static const unsigned char _CHECK_EG_MATCHplus_IS_NONE_code_body[794] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0x8d, 0x5e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x46, 0x4c, 0x89, 0x34, 0x24, 0x49, 0x89, 0xee, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0x79, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x4f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x39, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x25, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x89, 0xf5, 0x0f, 0x88, 0xc2, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xb4, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xef, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x89, 0x47, 0xf0, 0x4d, 0x89, 0x67, 0xf8, 0x4d, 0x39, 0xec, 0x0f, 0x84, 0xa1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xef, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x34, 0x24, 0x78, 0x72, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x4f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x89, 0xf5, 0x0f, 0x89, 0x3e, 0xff, 0xff, 0xff, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x03, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x34, 0x24, 0x49, 0x89, 0x5f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_IS_NONE_code_holes[28] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x54, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x97, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x150, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_IS_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_IS_NONE_data_holes[1];

// _CHECK_EG_MATCHplus_IS_OP
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_IS_OP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 8d 5e f0                   leaq    -0x10(%rsi), %rbx
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 08                movq    %rbp, 0x8(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 e6                      movq    %r12, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 1c                         jle     0x90 <_JIT_ENTRY+0x90>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3e                         jns     0xb6 <_JIT_ENTRY+0xb6>
// 78: eb 52                         jmp     0xcc <_JIT_ENTRY+0xcc>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 63                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 83: 85 c0                         testl   %eax, %eax
// 85: 0f 89 81 00 00 00             jns     0x10c <_JIT_ENTRY+0x10c>
// 8b: e9 9d 00 00 00                jmp     0x12d <_JIT_ENTRY+0x12d>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_NegativeRefcount
// a4: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a9: 4c 89 ea                      movq    %r13, %rdx
// ac: ff d0                         callq   *%rax
// ae: 49 8b 45 00                   movq    (%r13), %rax
// b2: 85 c0                         testl   %eax, %eax
// b4: 78 16                         js      0xcc <_JIT_ENTRY+0xcc>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c0: ff d0                         callq   *%rax
// c2: 49 ff 4d 00                   decq    (%r13)
// c6: 0f 84 c7 00 00 00             je      0x193 <_JIT_ENTRY+0x193>
// cc: 49 8b 04 24                   movq    (%r12), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 0f 8e d6 00 00 00             jle     0x1af <_JIT_ENTRY+0x1af>
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 89 f4 00 00 00             jns     0x1d5 <_JIT_ENTRY+0x1d5>
// e1: e9 05 01 00 00                jmp     0x1eb <_JIT_ENTRY+0x1eb>
// e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_NegativeRefcount
// fa: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ff: 4c 89 ea                      movq    %r13, %rdx
// 102: ff d0                         callq   *%rax
// 104: 49 8b 45 00                   movq    (%r13), %rax
// 108: 85 c0                         testl   %eax, %eax
// 10a: 78 21                         js      0x12d <_JIT_ENTRY+0x12d>
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 116: ff d0                         callq   *%rax
// 118: 49 ff 4d 00                   decq    (%r13)
// 11c: 75 0f                         jne     0x12d <_JIT_ENTRY+0x12d>
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _Py_Dealloc
// 128: 4c 89 ef                      movq    %r13, %rdi
// 12b: ff d0                         callq   *%rax
// 12d: 49 8b 04 24                   movq    (%r12), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 09                         jle     0x13f <_JIT_ENTRY+0x13f>
// 136: 85 c0                         testl   %eax, %eax
// 138: 79 2f                         jns     0x169 <_JIT_ENTRY+0x169>
// 13a: e9 fb 01 00 00                jmp     0x33a <_JIT_ENTRY+0x33a>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 d1 01 00 00             js      0x33a <_JIT_ENTRY+0x33a>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 0c 24                   decq    (%r12)
// 179: 0f 85 bb 01 00 00             jne     0x33a <_JIT_ENTRY+0x33a>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_Dealloc
// 189: 4c 89 e7                      movq    %r12, %rdi
// 18c: ff d0                         callq   *%rax
// 18e: e9 a7 01 00 00                jmp     0x33a <_JIT_ENTRY+0x33a>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_Dealloc
// 19d: 4c 89 ef                      movq    %r13, %rdi
// 1a0: ff d0                         callq   *%rax
// 1a2: 49 8b 04 24                   movq    (%r12), %rax
// 1a6: 48 85 c0                      testq   %rax, %rax
// 1a9: 0f 8f 2a ff ff ff             jg      0xd9 <_JIT_ENTRY+0xd9>
// 1af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b1:  R_X86_64_64  .rodata.str1.1
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_NegativeRefcount
// 1c3: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c8: 4c 89 e2                      movq    %r12, %rdx
// 1cb: ff d0                         callq   *%rax
// 1cd: 49 8b 04 24                   movq    (%r12), %rax
// 1d1: 85 c0                         testl   %eax, %eax
// 1d3: 78 16                         js      0x1eb <_JIT_ENTRY+0x1eb>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1df: ff d0                         callq   *%rax
// 1e1: 49 ff 0c 24                   decq    (%r12)
// 1e5: 0f 84 33 01 00 00             je      0x31e <_JIT_ENTRY+0x31e>
// 1eb: 85 ed                         testl   %ebp, %ebp
// 1ed: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 1f2: 0f 88 42 01 00 00             js      0x33a <_JIT_ENTRY+0x33a>
// 1f8: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1fc: 48 85 ff                      testq   %rdi, %rdi
// 1ff: 0f 84 35 01 00 00             je      0x33a <_JIT_ENTRY+0x33a>
// 205: 49 83 c7 f8                   addq    $-0x8, %r15
// 209: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000020b:  R_X86_64_64  _Py_NoneStruct
// 213: 4c 39 e7                      cmpq    %r12, %rdi
// 216: 74 10                         je      0x228 <_JIT_ENTRY+0x228>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  PyErr_SetHandledException
// 222: ff d0                         callq   *%rax
// 224: 4c 8b 24 24                   movq    (%rsp), %r12
// 228: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 22d: 4c 89 2b                      movq    %r13, (%rbx)
// 230: 4d 89 27                      movq    %r12, (%r15)
// 233: 49 8b 45 00                   movq    (%r13), %rax
// 237: 48 85 c0                      testq   %rax, %rax
// 23a: 7f 22                         jg      0x25e <_JIT_ENTRY+0x25e>
// 23c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023e:  R_X86_64_64  .rodata.str1.1
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_NegativeRefcount
// 250: be 98 07 00 00                movl    $0x798, %esi            # imm = 0x798
// 255: 4c 89 ea                      movq    %r13, %rdx
// 258: ff d0                         callq   *%rax
// 25a: 49 8b 45 00                   movq    (%r13), %rax
// 25e: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000260:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 268: 85 c0                         testl   %eax, %eax
// 26a: 78 17                         js      0x283 <_JIT_ENTRY+0x283>
// 26c: ff d5                         callq   *%rbp
// 26e: 49 ff 4d 00                   decq    (%r13)
// 272: 75 0f                         jne     0x283 <_JIT_ENTRY+0x283>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _Py_Dealloc
// 27e: 4c 89 ef                      movq    %r13, %rdi
// 281: ff d0                         callq   *%rax
// 283: 49 8b 04 24                   movq    (%r12), %rax
// 287: 48 85 c0                      testq   %rax, %rax
// 28a: 7f 22                         jg      0x2ae <_JIT_ENTRY+0x2ae>
// 28c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028e:  R_X86_64_64  .rodata.str1.1
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _Py_NegativeRefcount
// 2a0: be 99 07 00 00                movl    $0x799, %esi            # imm = 0x799
// 2a5: 4c 89 e2                      movq    %r12, %rdx
// 2a8: ff d0                         callq   *%rax
// 2aa: 49 8b 04 24                   movq    (%r12), %rax
// 2ae: 85 c0                         testl   %eax, %eax
// 2b0: 78 17                         js      0x2c9 <_JIT_ENTRY+0x2c9>
// 2b2: ff d5                         callq   *%rbp
// 2b4: 49 ff 0c 24                   decq    (%r12)
// 2b8: 75 0f                         jne     0x2c9 <_JIT_ENTRY+0x2c9>
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _Py_Dealloc
// 2c4: 4c 89 e7                      movq    %r12, %rdi
// 2c7: ff d0                         callq   *%rax
// 2c9: 31 c0                         xorl    %eax, %eax
// 2cb: 4d 39 e5                      cmpq    %r12, %r13
// 2ce: 0f 94 c0                      sete    %al
// 2d1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002d3:  R_X86_64_64  _JIT_OPARG
// 2db: 66 39 c8                      cmpw    %cx, %ax
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_FalseStruct
// 2e8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002ea:  R_X86_64_64  _Py_TrueStruct
// 2f2: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 2f6: 48 89 0b                      movq    %rcx, (%rbx)
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _JIT_CONTINUE
// 303: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 308: 4c 89 fe                      movq    %r15, %rsi
// 30b: 4c 89 f2                      movq    %r14, %rdx
// 30e: 48 83 c4 18                   addq    $0x18, %rsp
// 312: 5b                            popq    %rbx
// 313: 41 5c                         popq    %r12
// 315: 41 5d                         popq    %r13
// 317: 41 5e                         popq    %r14
// 319: 41 5f                         popq    %r15
// 31b: 5d                            popq    %rbp
// 31c: ff e0                         jmpq    *%rax
// 31e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000320:  R_X86_64_64  _Py_Dealloc
// 328: 4c 89 e7                      movq    %r12, %rdi
// 32b: ff d0                         callq   *%rax
// 32d: 85 ed                         testl   %ebp, %ebp
// 32f: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 334: 0f 89 be fe ff ff             jns     0x1f8 <_JIT_ENTRY+0x1f8>
// 33a: 48 29 eb                      subq    %rbp, %rbx
// 33d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 341: 48 c1 eb 03                   shrq    $0x3, %rbx
// 345: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 348: 31 c0                         xorl    %eax, %eax
// 34a: 48 83 c4 18                   addq    $0x18, %rsp
// 34e: 5b                            popq    %rbx
// 34f: 41 5c                         popq    %r12
// 351: 41 5d                         popq    %r13
// 353: 41 5e                         popq    %r14
// 355: 41 5f                         popq    %r15
// 357: 5d                            popq    %rbp
// 358: c3                            retq
// 359: 
static const unsigned char _CHECK_EG_MATCHplus_IS_OP_code_body[858] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0x8d, 0x5e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x08, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0xfb, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xd1, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xbb, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xa7, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x33, 0x01, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x0f, 0x88, 0x42, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x35, 0x01, 0x00, 0x00, 0x49, 0x83, 0xc7, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x4c, 0x89, 0x2b, 0x4d, 0x89, 0x27, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x31, 0xc0, 0x4d, 0x39, 0xe5, 0x0f, 0x94, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x39, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x0b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x0f, 0x89, 0xbe, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_IS_OP_code_holes[32] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x320, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_IS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_IS_OP_data_holes[1];

// _CHECK_EG_MATCHplus_ITER_CHECK_LIST
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_ITER_CHECK_LIST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 29 01 00 00             je      0x238 <_JIT_ENTRY+0x238>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 38 01 00 00             jle     0x253 <_JIT_ENTRY+0x253>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 55 01 00 00             jns     0x278 <_JIT_ENTRY+0x278>
// 123: e9 70 01 00 00                jmp     0x298 <_JIT_ENTRY+0x298>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 80 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 17 01 00 00             js      0x298 <_JIT_ENTRY+0x298>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 09 01 00 00             je      0x298 <_JIT_ENTRY+0x298>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001be:  R_X86_64_64  PyListIter_Type
// 1c6: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1ca: 74 49                         je      0x215 <_JIT_ENTRY+0x215>
// 1cc: 4c 29 f3                      subq    %r14, %rbx
// 1cf: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1d3: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1d7: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1db: 49 8b 06                      movq    (%r14), %rax
// 1de: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e0:  R_X86_64_64  _JIT_TARGET
// 1e8: 89 c9                         movl    %ecx, %ecx
// 1ea: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1ee: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f4: e9 b4 00 00 00                jmp     0x2ad <_JIT_ENTRY+0x2ad>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_Dealloc
// 203: 4c 89 ff                      movq    %r15, %rdi
// 206: ff d0                         callq   *%rax
// 208: 85 ed                         testl   %ebp, %ebp
// 20a: 0f 89 71 ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 210: e9 83 00 00 00                jmp     0x298 <_JIT_ENTRY+0x298>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _JIT_CONTINUE
// 21f: 4c 89 f7                      movq    %r14, %rdi
// 222: 48 89 de                      movq    %rbx, %rsi
// 225: 4c 89 e2                      movq    %r12, %rdx
// 228: 48 83 c4 18                   addq    $0x18, %rsp
// 22c: 5b                            popq    %rbx
// 22d: 41 5c                         popq    %r12
// 22f: 41 5d                         popq    %r13
// 231: 41 5e                         popq    %r14
// 233: 41 5f                         popq    %r15
// 235: 5d                            popq    %rbp
// 236: ff e0                         jmpq    *%rax
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _Py_Dealloc
// 242: 4c 89 ef                      movq    %r13, %rdi
// 245: ff d0                         callq   *%rax
// 247: 49 8b 07                      movq    (%r15), %rax
// 24a: 48 85 c0                      testq   %rax, %rax
// 24d: 0f 8f c8 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 253: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000255:  R_X86_64_64  .rodata.str1.1
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _Py_NegativeRefcount
// 267: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 26c: 4c 89 fa                      movq    %r15, %rdx
// 26f: ff d0                         callq   *%rax
// 271: 49 8b 07                      movq    (%r15), %rax
// 274: 85 c0                         testl   %eax, %eax
// 276: 78 20                         js      0x298 <_JIT_ENTRY+0x298>
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 282: ff d0                         callq   *%rax
// 284: 49 ff 0f                      decq    (%r15)
// 287: 75 0f                         jne     0x298 <_JIT_ENTRY+0x298>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_Dealloc
// 293: 4c 89 ff                      movq    %r15, %rdi
// 296: ff d0                         callq   *%rax
// 298: 48 83 c3 f0                   addq    $-0x10, %rbx
// 29c: 4c 29 f3                      subq    %r14, %rbx
// 29f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2a3: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2a7: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2ab: 31 c0                         xorl    %eax, %eax
// 2ad: 48 83 c4 18                   addq    $0x18, %rsp
// 2b1: 5b                            popq    %rbx
// 2b2: 41 5c                         popq    %r12
// 2b4: 41 5d                         popq    %r13
// 2b6: 41 5e                         popq    %r14
// 2b8: 41 5f                         popq    %r15
// 2ba: 5d                            popq    %rbp
// 2bb: c3                            retq
// 2bc: 
static const unsigned char _CHECK_EG_MATCHplus_ITER_CHECK_LIST_code_body[701] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x29, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x38, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x55, 0x01, 0x00, 0x00, 0xe9, 0x70, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x17, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x49, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xb4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x71, 0xff, 0xff, 0xff, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xc8, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_ITER_CHECK_LIST_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyListIter_Type, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_ITER_CHECK_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_ITER_CHECK_LIST_data_holes[1];

// _CHECK_EG_MATCHplus_ITER_CHECK_RANGE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_ITER_CHECK_RANGE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 29 01 00 00             je      0x238 <_JIT_ENTRY+0x238>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 38 01 00 00             jle     0x253 <_JIT_ENTRY+0x253>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 55 01 00 00             jns     0x278 <_JIT_ENTRY+0x278>
// 123: e9 70 01 00 00                jmp     0x298 <_JIT_ENTRY+0x298>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 80 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 17 01 00 00             js      0x298 <_JIT_ENTRY+0x298>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 09 01 00 00             je      0x298 <_JIT_ENTRY+0x298>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001be:  R_X86_64_64  PyRangeIter_Type
// 1c6: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1ca: 74 49                         je      0x215 <_JIT_ENTRY+0x215>
// 1cc: 4c 29 f3                      subq    %r14, %rbx
// 1cf: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1d3: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1d7: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1db: 49 8b 06                      movq    (%r14), %rax
// 1de: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e0:  R_X86_64_64  _JIT_TARGET
// 1e8: 89 c9                         movl    %ecx, %ecx
// 1ea: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1ee: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f4: e9 b4 00 00 00                jmp     0x2ad <_JIT_ENTRY+0x2ad>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_Dealloc
// 203: 4c 89 ff                      movq    %r15, %rdi
// 206: ff d0                         callq   *%rax
// 208: 85 ed                         testl   %ebp, %ebp
// 20a: 0f 89 71 ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 210: e9 83 00 00 00                jmp     0x298 <_JIT_ENTRY+0x298>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _JIT_CONTINUE
// 21f: 4c 89 f7                      movq    %r14, %rdi
// 222: 48 89 de                      movq    %rbx, %rsi
// 225: 4c 89 e2                      movq    %r12, %rdx
// 228: 48 83 c4 18                   addq    $0x18, %rsp
// 22c: 5b                            popq    %rbx
// 22d: 41 5c                         popq    %r12
// 22f: 41 5d                         popq    %r13
// 231: 41 5e                         popq    %r14
// 233: 41 5f                         popq    %r15
// 235: 5d                            popq    %rbp
// 236: ff e0                         jmpq    *%rax
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _Py_Dealloc
// 242: 4c 89 ef                      movq    %r13, %rdi
// 245: ff d0                         callq   *%rax
// 247: 49 8b 07                      movq    (%r15), %rax
// 24a: 48 85 c0                      testq   %rax, %rax
// 24d: 0f 8f c8 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 253: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000255:  R_X86_64_64  .rodata.str1.1
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _Py_NegativeRefcount
// 267: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 26c: 4c 89 fa                      movq    %r15, %rdx
// 26f: ff d0                         callq   *%rax
// 271: 49 8b 07                      movq    (%r15), %rax
// 274: 85 c0                         testl   %eax, %eax
// 276: 78 20                         js      0x298 <_JIT_ENTRY+0x298>
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 282: ff d0                         callq   *%rax
// 284: 49 ff 0f                      decq    (%r15)
// 287: 75 0f                         jne     0x298 <_JIT_ENTRY+0x298>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_Dealloc
// 293: 4c 89 ff                      movq    %r15, %rdi
// 296: ff d0                         callq   *%rax
// 298: 48 83 c3 f0                   addq    $-0x10, %rbx
// 29c: 4c 29 f3                      subq    %r14, %rbx
// 29f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2a3: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2a7: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2ab: 31 c0                         xorl    %eax, %eax
// 2ad: 48 83 c4 18                   addq    $0x18, %rsp
// 2b1: 5b                            popq    %rbx
// 2b2: 41 5c                         popq    %r12
// 2b4: 41 5d                         popq    %r13
// 2b6: 41 5e                         popq    %r14
// 2b8: 41 5f                         popq    %r15
// 2ba: 5d                            popq    %rbp
// 2bb: c3                            retq
// 2bc: 
static const unsigned char _CHECK_EG_MATCHplus_ITER_CHECK_RANGE_code_body[701] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x29, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x38, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x55, 0x01, 0x00, 0x00, 0xe9, 0x70, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x17, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x49, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xb4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x71, 0xff, 0xff, 0xff, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xc8, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_ITER_CHECK_RANGE_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyRangeIter_Type, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_ITER_CHECK_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_ITER_CHECK_RANGE_data_holes[1];

// _CHECK_EG_MATCHplus_ITER_CHECK_TUPLE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_ITER_CHECK_TUPLE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 29 01 00 00             je      0x238 <_JIT_ENTRY+0x238>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 38 01 00 00             jle     0x253 <_JIT_ENTRY+0x253>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 55 01 00 00             jns     0x278 <_JIT_ENTRY+0x278>
// 123: e9 70 01 00 00                jmp     0x298 <_JIT_ENTRY+0x298>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 80 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 17 01 00 00             js      0x298 <_JIT_ENTRY+0x298>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 09 01 00 00             je      0x298 <_JIT_ENTRY+0x298>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001be:  R_X86_64_64  PyTupleIter_Type
// 1c6: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1ca: 74 49                         je      0x215 <_JIT_ENTRY+0x215>
// 1cc: 4c 29 f3                      subq    %r14, %rbx
// 1cf: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1d3: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1d7: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1db: 49 8b 06                      movq    (%r14), %rax
// 1de: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e0:  R_X86_64_64  _JIT_TARGET
// 1e8: 89 c9                         movl    %ecx, %ecx
// 1ea: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1ee: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f4: e9 b4 00 00 00                jmp     0x2ad <_JIT_ENTRY+0x2ad>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_Dealloc
// 203: 4c 89 ff                      movq    %r15, %rdi
// 206: ff d0                         callq   *%rax
// 208: 85 ed                         testl   %ebp, %ebp
// 20a: 0f 89 71 ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 210: e9 83 00 00 00                jmp     0x298 <_JIT_ENTRY+0x298>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _JIT_CONTINUE
// 21f: 4c 89 f7                      movq    %r14, %rdi
// 222: 48 89 de                      movq    %rbx, %rsi
// 225: 4c 89 e2                      movq    %r12, %rdx
// 228: 48 83 c4 18                   addq    $0x18, %rsp
// 22c: 5b                            popq    %rbx
// 22d: 41 5c                         popq    %r12
// 22f: 41 5d                         popq    %r13
// 231: 41 5e                         popq    %r14
// 233: 41 5f                         popq    %r15
// 235: 5d                            popq    %rbp
// 236: ff e0                         jmpq    *%rax
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _Py_Dealloc
// 242: 4c 89 ef                      movq    %r13, %rdi
// 245: ff d0                         callq   *%rax
// 247: 49 8b 07                      movq    (%r15), %rax
// 24a: 48 85 c0                      testq   %rax, %rax
// 24d: 0f 8f c8 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 253: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000255:  R_X86_64_64  .rodata.str1.1
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _Py_NegativeRefcount
// 267: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 26c: 4c 89 fa                      movq    %r15, %rdx
// 26f: ff d0                         callq   *%rax
// 271: 49 8b 07                      movq    (%r15), %rax
// 274: 85 c0                         testl   %eax, %eax
// 276: 78 20                         js      0x298 <_JIT_ENTRY+0x298>
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 282: ff d0                         callq   *%rax
// 284: 49 ff 0f                      decq    (%r15)
// 287: 75 0f                         jne     0x298 <_JIT_ENTRY+0x298>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_Dealloc
// 293: 4c 89 ff                      movq    %r15, %rdi
// 296: ff d0                         callq   *%rax
// 298: 48 83 c3 f0                   addq    $-0x10, %rbx
// 29c: 4c 29 f3                      subq    %r14, %rbx
// 29f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2a3: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2a7: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2ab: 31 c0                         xorl    %eax, %eax
// 2ad: 48 83 c4 18                   addq    $0x18, %rsp
// 2b1: 5b                            popq    %rbx
// 2b2: 41 5c                         popq    %r12
// 2b4: 41 5d                         popq    %r13
// 2b6: 41 5e                         popq    %r14
// 2b8: 41 5f                         popq    %r15
// 2ba: 5d                            popq    %rbp
// 2bb: c3                            retq
// 2bc: 
static const unsigned char _CHECK_EG_MATCHplus_ITER_CHECK_TUPLE_code_body[701] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x29, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x38, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x55, 0x01, 0x00, 0x00, 0xe9, 0x70, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x17, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x49, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xb4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x71, 0xff, 0xff, 0xff, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xc8, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_ITER_CHECK_TUPLE_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTupleIter_Type, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_ITER_CHECK_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_ITER_CHECK_TUPLE_data_holes[1];

// _CHECK_EG_MATCHplus_ITER_NEXT_LIST
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_ITER_NEXT_LIST.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 1e 01 00 00             je      0x22d <_JIT_ENTRY+0x22d>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 2d 01 00 00             jle     0x248 <_JIT_ENTRY+0x248>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 4a 01 00 00             jns     0x26d <_JIT_ENTRY+0x26d>
// 123: e9 65 01 00 00                jmp     0x28d <_JIT_ENTRY+0x28d>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 9b 00 00 00             je      0x214 <_JIT_ENTRY+0x214>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 0c 01 00 00             js      0x28d <_JIT_ENTRY+0x28d>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 fe 00 00 00             je      0x28d <_JIT_ENTRY+0x28d>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 48 8b 48 10                   movq    0x10(%rax), %rcx
// 1c0: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 1c4: 48 8b 52 18                   movq    0x18(%rdx), %rdx
// 1c8: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// 1cc: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 1d0: 4c 8b 3c ca                   movq    (%rdx,%rcx,8), %r15
// 1d4: 41 8b 07                      movl    (%r15), %eax
// 1d7: ff c0                         incl    %eax
// 1d9: 74 0f                         je      0x1ea <_JIT_ENTRY+0x1ea>
// 1db: 41 89 07                      movl    %eax, (%r15)
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1e8: ff d0                         callq   *%rax
// 1ea: 4c 89 3b                      movq    %r15, (%rbx)
// 1ed: 48 83 c3 08                   addq    $0x8, %rbx
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _JIT_CONTINUE
// 1fb: 4c 89 f7                      movq    %r14, %rdi
// 1fe: 48 89 de                      movq    %rbx, %rsi
// 201: 4c 89 e2                      movq    %r12, %rdx
// 204: 48 83 c4 18                   addq    $0x18, %rsp
// 208: 5b                            popq    %rbx
// 209: 41 5c                         popq    %r12
// 20b: 41 5d                         popq    %r13
// 20d: 41 5e                         popq    %r14
// 20f: 41 5f                         popq    %r15
// 211: 5d                            popq    %rbp
// 212: ff e0                         jmpq    *%rax
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_Dealloc
// 21e: 4c 89 ff                      movq    %r15, %rdi
// 221: ff d0                         callq   *%rax
// 223: 85 ed                         testl   %ebp, %ebp
// 225: 0f 89 56 ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 22b: eb 60                         jmp     0x28d <_JIT_ENTRY+0x28d>
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_Dealloc
// 237: 4c 89 ef                      movq    %r13, %rdi
// 23a: ff d0                         callq   *%rax
// 23c: 49 8b 07                      movq    (%r15), %rax
// 23f: 48 85 c0                      testq   %rax, %rax
// 242: 0f 8f d3 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 248: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024a:  R_X86_64_64  .rodata.str1.1
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_NegativeRefcount
// 25c: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 261: 4c 89 fa                      movq    %r15, %rdx
// 264: ff d0                         callq   *%rax
// 266: 49 8b 07                      movq    (%r15), %rax
// 269: 85 c0                         testl   %eax, %eax
// 26b: 78 20                         js      0x28d <_JIT_ENTRY+0x28d>
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 277: ff d0                         callq   *%rax
// 279: 49 ff 0f                      decq    (%r15)
// 27c: 75 0f                         jne     0x28d <_JIT_ENTRY+0x28d>
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _Py_Dealloc
// 288: 4c 89 ff                      movq    %r15, %rdi
// 28b: ff d0                         callq   *%rax
// 28d: 48 83 c3 f0                   addq    $-0x10, %rbx
// 291: 4c 29 f3                      subq    %r14, %rbx
// 294: 48 83 c3 b8                   addq    $-0x48, %rbx
// 298: 48 c1 eb 03                   shrq    $0x3, %rbx
// 29c: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2a0: 31 c0                         xorl    %eax, %eax
// 2a2: 48 83 c4 18                   addq    $0x18, %rsp
// 2a6: 5b                            popq    %rbx
// 2a7: 41 5c                         popq    %r12
// 2a9: 41 5d                         popq    %r13
// 2ab: 41 5e                         popq    %r14
// 2ad: 41 5f                         popq    %r15
// 2af: 5d                            popq    %rbp
// 2b0: c3                            retq
// 2b1: 
static const unsigned char _CHECK_EG_MATCHplus_ITER_NEXT_LIST_code_body[690] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x1e, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x2d, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x4a, 0x01, 0x00, 0x00, 0xe9, 0x65, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x0c, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x8b, 0x3c, 0xca, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x56, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xd3, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_ITER_NEXT_LIST_code_holes[23] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_ITER_NEXT_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_ITER_NEXT_LIST_data_holes[1];

// _CHECK_EG_MATCHplus_ITER_NEXT_RANGE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_ITER_NEXT_RANGE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 18 01 00 00             je      0x227 <_JIT_ENTRY+0x227>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 27 01 00 00             jle     0x242 <_JIT_ENTRY+0x242>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 44 01 00 00             jns     0x267 <_JIT_ENTRY+0x267>
// 123: e9 5f 01 00 00                jmp     0x287 <_JIT_ENTRY+0x287>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 95 00 00 00             je      0x20e <_JIT_ENTRY+0x20e>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 06 01 00 00             js      0x287 <_JIT_ENTRY+0x287>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 f8 00 00 00             je      0x287 <_JIT_ENTRY+0x287>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 48 8b 78 10                   movq    0x10(%rax), %rdi
// 1c0: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 1c4: 48 01 f9                      addq    %rdi, %rcx
// 1c7: 48 89 48 10                   movq    %rcx, 0x10(%rax)
// 1cb: 48 ff 48 20                   decq    0x20(%rax)
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  PyLong_FromLong
// 1d9: ff d0                         callq   *%rax
// 1db: 48 85 c0                      testq   %rax, %rax
// 1de: 0f 84 a7 00 00 00             je      0x28b <_JIT_ENTRY+0x28b>
// 1e4: 48 89 03                      movq    %rax, (%rbx)
// 1e7: 48 83 c3 08                   addq    $0x8, %rbx
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _JIT_CONTINUE
// 1f5: 4c 89 f7                      movq    %r14, %rdi
// 1f8: 48 89 de                      movq    %rbx, %rsi
// 1fb: 4c 89 e2                      movq    %r12, %rdx
// 1fe: 48 83 c4 18                   addq    $0x18, %rsp
// 202: 5b                            popq    %rbx
// 203: 41 5c                         popq    %r12
// 205: 41 5d                         popq    %r13
// 207: 41 5e                         popq    %r14
// 209: 41 5f                         popq    %r15
// 20b: 5d                            popq    %rbp
// 20c: ff e0                         jmpq    *%rax
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_Dealloc
// 218: 4c 89 ff                      movq    %r15, %rdi
// 21b: ff d0                         callq   *%rax
// 21d: 85 ed                         testl   %ebp, %ebp
// 21f: 0f 89 5c ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 225: eb 60                         jmp     0x287 <_JIT_ENTRY+0x287>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _Py_Dealloc
// 231: 4c 89 ef                      movq    %r13, %rdi
// 234: ff d0                         callq   *%rax
// 236: 49 8b 07                      movq    (%r15), %rax
// 239: 48 85 c0                      testq   %rax, %rax
// 23c: 0f 8f d9 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 242: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000244:  R_X86_64_64  .rodata.str1.1
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _Py_NegativeRefcount
// 256: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 25b: 4c 89 fa                      movq    %r15, %rdx
// 25e: ff d0                         callq   *%rax
// 260: 49 8b 07                      movq    (%r15), %rax
// 263: 85 c0                         testl   %eax, %eax
// 265: 78 20                         js      0x287 <_JIT_ENTRY+0x287>
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 271: ff d0                         callq   *%rax
// 273: 49 ff 0f                      decq    (%r15)
// 276: 75 0f                         jne     0x287 <_JIT_ENTRY+0x287>
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _Py_Dealloc
// 282: 4c 89 ff                      movq    %r15, %rdi
// 285: ff d0                         callq   *%rax
// 287: 48 83 c3 f0                   addq    $-0x10, %rbx
// 28b: 4c 29 f3                      subq    %r14, %rbx
// 28e: 48 83 c3 b8                   addq    $-0x48, %rbx
// 292: 48 c1 eb 03                   shrq    $0x3, %rbx
// 296: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 29a: 31 c0                         xorl    %eax, %eax
// 29c: 48 83 c4 18                   addq    $0x18, %rsp
// 2a0: 5b                            popq    %rbx
// 2a1: 41 5c                         popq    %r12
// 2a3: 41 5d                         popq    %r13
// 2a5: 41 5e                         popq    %r14
// 2a7: 41 5f                         popq    %r15
// 2a9: 5d                            popq    %rbp
// 2aa: c3                            retq
// 2ab: 
static const unsigned char _CHECK_EG_MATCHplus_ITER_NEXT_RANGE_code_body[684] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x18, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x27, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x44, 0x01, 0x00, 0x00, 0xe9, 0x5f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x06, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0x8b, 0x78, 0x10, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x01, 0xf9, 0x48, 0x89, 0x48, 0x10, 0x48, 0xff, 0x48, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x5c, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xd9, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_ITER_NEXT_RANGE_code_holes[23] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromLong, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_ITER_NEXT_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_ITER_NEXT_RANGE_data_holes[1];

// _CHECK_EG_MATCHplus_ITER_NEXT_TUPLE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_ITER_NEXT_TUPLE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 1b 01 00 00             je      0x22a <_JIT_ENTRY+0x22a>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 2a 01 00 00             jle     0x245 <_JIT_ENTRY+0x245>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 47 01 00 00             jns     0x26a <_JIT_ENTRY+0x26a>
// 123: e9 62 01 00 00                jmp     0x28a <_JIT_ENTRY+0x28a>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 98 00 00 00             je      0x211 <_JIT_ENTRY+0x211>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 09 01 00 00             js      0x28a <_JIT_ENTRY+0x28a>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 fb 00 00 00             je      0x28a <_JIT_ENTRY+0x28a>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 48 8b 48 10                   movq    0x10(%rax), %rcx
// 1c0: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 1c4: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// 1c8: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 1cc: 4c 8b 7c ca 18                movq    0x18(%rdx,%rcx,8), %r15
// 1d1: 41 8b 07                      movl    (%r15), %eax
// 1d4: ff c0                         incl    %eax
// 1d6: 74 0f                         je      0x1e7 <_JIT_ENTRY+0x1e7>
// 1d8: 41 89 07                      movl    %eax, (%r15)
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1e5: ff d0                         callq   *%rax
// 1e7: 4c 89 3b                      movq    %r15, (%rbx)
// 1ea: 48 83 c3 08                   addq    $0x8, %rbx
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _JIT_CONTINUE
// 1f8: 4c 89 f7                      movq    %r14, %rdi
// 1fb: 48 89 de                      movq    %rbx, %rsi
// 1fe: 4c 89 e2                      movq    %r12, %rdx
// 201: 48 83 c4 18                   addq    $0x18, %rsp
// 205: 5b                            popq    %rbx
// 206: 41 5c                         popq    %r12
// 208: 41 5d                         popq    %r13
// 20a: 41 5e                         popq    %r14
// 20c: 41 5f                         popq    %r15
// 20e: 5d                            popq    %rbp
// 20f: ff e0                         jmpq    *%rax
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_Dealloc
// 21b: 4c 89 ff                      movq    %r15, %rdi
// 21e: ff d0                         callq   *%rax
// 220: 85 ed                         testl   %ebp, %ebp
// 222: 0f 89 59 ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 228: eb 60                         jmp     0x28a <_JIT_ENTRY+0x28a>
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_Dealloc
// 234: 4c 89 ef                      movq    %r13, %rdi
// 237: ff d0                         callq   *%rax
// 239: 49 8b 07                      movq    (%r15), %rax
// 23c: 48 85 c0                      testq   %rax, %rax
// 23f: 0f 8f d6 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 245: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000247:  R_X86_64_64  .rodata.str1.1
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _Py_NegativeRefcount
// 259: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 25e: 4c 89 fa                      movq    %r15, %rdx
// 261: ff d0                         callq   *%rax
// 263: 49 8b 07                      movq    (%r15), %rax
// 266: 85 c0                         testl   %eax, %eax
// 268: 78 20                         js      0x28a <_JIT_ENTRY+0x28a>
// 26a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 274: ff d0                         callq   *%rax
// 276: 49 ff 0f                      decq    (%r15)
// 279: 75 0f                         jne     0x28a <_JIT_ENTRY+0x28a>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_Dealloc
// 285: 4c 89 ff                      movq    %r15, %rdi
// 288: ff d0                         callq   *%rax
// 28a: 48 83 c3 f0                   addq    $-0x10, %rbx
// 28e: 4c 29 f3                      subq    %r14, %rbx
// 291: 48 83 c3 b8                   addq    $-0x48, %rbx
// 295: 48 c1 eb 03                   shrq    $0x3, %rbx
// 299: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 29d: 31 c0                         xorl    %eax, %eax
// 29f: 48 83 c4 18                   addq    $0x18, %rsp
// 2a3: 5b                            popq    %rbx
// 2a4: 41 5c                         popq    %r12
// 2a6: 41 5d                         popq    %r13
// 2a8: 41 5e                         popq    %r14
// 2aa: 41 5f                         popq    %r15
// 2ac: 5d                            popq    %rbp
// 2ad: c3                            retq
// 2ae: 
static const unsigned char _CHECK_EG_MATCHplus_ITER_NEXT_TUPLE_code_body[687] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x1b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x2a, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x47, 0x01, 0x00, 0x00, 0xe9, 0x62, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x98, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x09, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xfb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x8b, 0x7c, 0xca, 0x18, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x59, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xd6, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_ITER_NEXT_TUPLE_code_holes[23] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_ITER_NEXT_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_ITER_NEXT_TUPLE_data_holes[1];

// _CHECK_EG_MATCHplus_JUMP_TO_TOP
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_JUMP_TO_TOP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 0c 01 00 00             je      0x21b <_JIT_ENTRY+0x21b>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 1b 01 00 00             jle     0x236 <_JIT_ENTRY+0x236>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 38 01 00 00             jns     0x25b <_JIT_ENTRY+0x25b>
// 123: e9 53 01 00 00                jmp     0x27b <_JIT_ENTRY+0x27b>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 89 00 00 00             je      0x202 <_JIT_ENTRY+0x202>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 fa 00 00 00             js      0x27b <_JIT_ENTRY+0x27b>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 ec 00 00 00             je      0x27b <_JIT_ENTRY+0x27b>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 1c1: 48 8b 00                      movq    (%rax), %rax
// 1c4: 84 c0                         testb   %al, %al
// 1c6: 74 17                         je      0x1df <_JIT_ENTRY+0x1df>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_HandlePending
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 85 c0                         testl   %eax, %eax
// 1d9: 0f 85 a0 00 00 00             jne     0x27f <_JIT_ENTRY+0x27f>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _JIT_CONTINUE
// 1e9: 4c 89 f7                      movq    %r14, %rdi
// 1ec: 48 89 de                      movq    %rbx, %rsi
// 1ef: 4c 89 e2                      movq    %r12, %rdx
// 1f2: 48 83 c4 18                   addq    $0x18, %rsp
// 1f6: 5b                            popq    %rbx
// 1f7: 41 5c                         popq    %r12
// 1f9: 41 5d                         popq    %r13
// 1fb: 41 5e                         popq    %r14
// 1fd: 41 5f                         popq    %r15
// 1ff: 5d                            popq    %rbp
// 200: ff e0                         jmpq    *%rax
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_Dealloc
// 20c: 4c 89 ff                      movq    %r15, %rdi
// 20f: ff d0                         callq   *%rax
// 211: 85 ed                         testl   %ebp, %ebp
// 213: 0f 89 68 ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 219: eb 60                         jmp     0x27b <_JIT_ENTRY+0x27b>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_Dealloc
// 225: 4c 89 ef                      movq    %r13, %rdi
// 228: ff d0                         callq   *%rax
// 22a: 49 8b 07                      movq    (%r15), %rax
// 22d: 48 85 c0                      testq   %rax, %rax
// 230: 0f 8f e5 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 236: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000238:  R_X86_64_64  .rodata.str1.1
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _Py_NegativeRefcount
// 24a: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 24f: 4c 89 fa                      movq    %r15, %rdx
// 252: ff d0                         callq   *%rax
// 254: 49 8b 07                      movq    (%r15), %rax
// 257: 85 c0                         testl   %eax, %eax
// 259: 78 20                         js      0x27b <_JIT_ENTRY+0x27b>
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 265: ff d0                         callq   *%rax
// 267: 49 ff 0f                      decq    (%r15)
// 26a: 75 0f                         jne     0x27b <_JIT_ENTRY+0x27b>
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _Py_Dealloc
// 276: 4c 89 ff                      movq    %r15, %rdi
// 279: ff d0                         callq   *%rax
// 27b: 48 83 c3 f0                   addq    $-0x10, %rbx
// 27f: 4c 29 f3                      subq    %r14, %rbx
// 282: 48 83 c3 b8                   addq    $-0x48, %rbx
// 286: 48 c1 eb 03                   shrq    $0x3, %rbx
// 28a: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 28e: 31 c0                         xorl    %eax, %eax
// 290: 48 83 c4 18                   addq    $0x18, %rsp
// 294: 5b                            popq    %rbx
// 295: 41 5c                         popq    %r12
// 297: 41 5d                         popq    %r13
// 299: 41 5e                         popq    %r14
// 29b: 41 5f                         popq    %r15
// 29d: 5d                            popq    %rbp
// 29e: c3                            retq
// 29f: 
static const unsigned char _CHECK_EG_MATCHplus_JUMP_TO_TOP_code_body[672] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x0c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x1b, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x38, 0x01, 0x00, 0x00, 0xe9, 0x53, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x89, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xfa, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xa0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x68, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xe5, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_JUMP_TO_TOP_code_holes[23] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_JUMP_TO_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_JUMP_TO_TOP_data_holes[1];

// _CHECK_EG_MATCHplus_LIST_APPEND
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LIST_APPEND.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8d 76 f8                   leaq    -0x8(%rsi), %r14
// 1b: 48 8b 6e f0                   movq    -0x10(%rsi), %rbp
// 1f: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 fe                      movq    %r15, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 45                         js      0x7e <_JIT_ENTRY+0x7e>
// 39: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 3e: 4c 89 f3                      movq    %r14, %rbx
// 41: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 49: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 52: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000054:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 5c: 48 89 e2                      movq    %rsp, %rdx
// 5f: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 64: 48 89 ef                      movq    %rbp, %rdi
// 67: 4c 89 fe                      movq    %r15, %rsi
// 6a: ff d0                         callq   *%rax
// 6c: 41 89 c6                      movl    %eax, %r14d
// 6f: 48 8b 45 00                   movq    (%rbp), %rax
// 73: 48 85 c0                      testq   %rax, %rax
// 76: 7e 18                         jle     0x90 <_JIT_ENTRY+0x90>
// 78: 85 c0                         testl   %eax, %eax
// 7a: 79 3a                         jns     0xb6 <_JIT_ENTRY+0xb6>
// 7c: eb 4a                         jmp     0xc8 <_JIT_ENTRY+0xc8>
// 7e: 48 8b 45 00                   movq    (%rbp), %rax
// 82: 48 85 c0                      testq   %rax, %rax
// 85: 7e 56                         jle     0xdd <_JIT_ENTRY+0xdd>
// 87: 85 c0                         testl   %eax, %eax
// 89: 79 78                         jns     0x103 <_JIT_ENTRY+0x103>
// 8b: e9 89 00 00 00                jmp     0x119 <_JIT_ENTRY+0x119>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_NegativeRefcount
// a4: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a9: 48 89 ea                      movq    %rbp, %rdx
// ac: ff d0                         callq   *%rax
// ae: 48 8b 45 00                   movq    (%rbp), %rax
// b2: 85 c0                         testl   %eax, %eax
// b4: 78 12                         js      0xc8 <_JIT_ENTRY+0xc8>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c0: ff d0                         callq   *%rax
// c2: 48 ff 4d 00                   decq    (%rbp)
// c6: 74 6a                         je      0x132 <_JIT_ENTRY+0x132>
// c8: 49 8b 07                      movq    (%r15), %rax
// cb: 48 85 c0                      testq   %rax, %rax
// ce: 7e 79                         jle     0x149 <_JIT_ENTRY+0x149>
// d0: 85 c0                         testl   %eax, %eax
// d2: 0f 89 96 00 00 00             jns     0x16e <_JIT_ENTRY+0x16e>
// d8: e9 a2 00 00 00                jmp     0x17f <_JIT_ENTRY+0x17f>
// dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000df:  R_X86_64_64  .rodata.str1.1
// e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e9:  R_X86_64_64  _Py_NegativeRefcount
// f1: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f6: 48 89 ea                      movq    %rbp, %rdx
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 85 c0                         testl   %eax, %eax
// 101: 78 16                         js      0x119 <_JIT_ENTRY+0x119>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 4d 00                   decq    (%rbp)
// 113: 0f 84 3f 01 00 00             je      0x258 <_JIT_ENTRY+0x258>
// 119: 49 8b 07                      movq    (%r15), %rax
// 11c: 48 85 c0                      testq   %rax, %rax
// 11f: 0f 8e 4e 01 00 00             jle     0x273 <_JIT_ENTRY+0x273>
// 125: 85 c0                         testl   %eax, %eax
// 127: 0f 89 6b 01 00 00             jns     0x298 <_JIT_ENTRY+0x298>
// 12d: e9 86 01 00 00                jmp     0x2b8 <_JIT_ENTRY+0x2b8>
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _Py_Dealloc
// 13c: 48 89 ef                      movq    %rbp, %rdi
// 13f: ff d0                         callq   *%rax
// 141: 49 8b 07                      movq    (%r15), %rax
// 144: 48 85 c0                      testq   %rax, %rax
// 147: 7f 87                         jg      0xd0 <_JIT_ENTRY+0xd0>
// 149: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014b:  R_X86_64_64  .rodata.str1.1
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_NegativeRefcount
// 15d: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 162: 4c 89 fa                      movq    %r15, %rdx
// 165: ff d0                         callq   *%rax
// 167: 49 8b 07                      movq    (%r15), %rax
// 16a: 85 c0                         testl   %eax, %eax
// 16c: 78 11                         js      0x17f <_JIT_ENTRY+0x17f>
// 16e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000170:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 178: ff d0                         callq   *%rax
// 17a: 49 ff 0f                      decq    (%r15)
// 17d: 74 7d                         je      0x1fc <_JIT_ENTRY+0x1fc>
// 17f: 45 85 f6                      testl   %r14d, %r14d
// 182: 49 89 de                      movq    %rbx, %r14
// 185: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 18a: 0f 88 28 01 00 00             js      0x2b8 <_JIT_ENTRY+0x2b8>
// 190: 48 8b 3c 24                   movq    (%rsp), %rdi
// 194: 48 85 ff                      testq   %rdi, %rdi
// 197: 0f 84 1b 01 00 00             je      0x2b8 <_JIT_ENTRY+0x2b8>
// 19d: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000019f:  R_X86_64_64  _Py_NoneStruct
// 1a7: 48 39 f7                      cmpq    %rsi, %rdi
// 1aa: 74 10                         je      0x1bc <_JIT_ENTRY+0x1bc>
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  PyErr_SetHandledException
// 1b6: ff d0                         callq   *%rax
// 1b8: 48 8b 34 24                   movq    (%rsp), %rsi
// 1bc: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1c1: 49 89 45 f0                   movq    %rax, -0x10(%r13)
// 1c5: 49 89 75 f8                   movq    %rsi, -0x8(%r13)
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _JIT_OPARG
// 1d3: f7 d0                         notl    %eax
// 1d5: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1da: 48 98                         cltq
// 1dc: 49 8b 7c c5 00                movq    (%r13,%rax,8), %rdi
// 1e1: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 1e5: 48 39 47 20                   cmpq    %rax, 0x20(%rdi)
// 1e9: 7e 36                         jle     0x221 <_JIT_ENTRY+0x221>
// 1eb: 48 8b 4f 18                   movq    0x18(%rdi), %rcx
// 1ef: 48 89 34 c1                   movq    %rsi, (%rcx,%rax,8)
// 1f3: 48 ff c0                      incq    %rax
// 1f6: 48 89 47 10                   movq    %rax, 0x10(%rdi)
// 1fa: eb 39                         jmp     0x235 <_JIT_ENTRY+0x235>
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_Dealloc
// 206: 4c 89 ff                      movq    %r15, %rdi
// 209: ff d0                         callq   *%rax
// 20b: 45 85 f6                      testl   %r14d, %r14d
// 20e: 49 89 de                      movq    %rbx, %r14
// 211: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 216: 0f 89 74 ff ff ff             jns     0x190 <_JIT_ENTRY+0x190>
// 21c: e9 97 00 00 00                jmp     0x2b8 <_JIT_ENTRY+0x2b8>
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _PyList_AppendTakeRefListResize
// 22b: ff d0                         callq   *%rax
// 22d: 85 c0                         testl   %eax, %eax
// 22f: 0f 88 86 00 00 00             js      0x2bb <_JIT_ENTRY+0x2bb>
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _JIT_CONTINUE
// 23f: 48 89 df                      movq    %rbx, %rdi
// 242: 4c 89 f6                      movq    %r14, %rsi
// 245: 4c 89 e2                      movq    %r12, %rdx
// 248: 48 83 c4 18                   addq    $0x18, %rsp
// 24c: 5b                            popq    %rbx
// 24d: 41 5c                         popq    %r12
// 24f: 41 5d                         popq    %r13
// 251: 41 5e                         popq    %r14
// 253: 41 5f                         popq    %r15
// 255: 5d                            popq    %rbp
// 256: ff e0                         jmpq    *%rax
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _Py_Dealloc
// 262: 48 89 ef                      movq    %rbp, %rdi
// 265: ff d0                         callq   *%rax
// 267: 49 8b 07                      movq    (%r15), %rax
// 26a: 48 85 c0                      testq   %rax, %rax
// 26d: 0f 8f b2 fe ff ff             jg      0x125 <_JIT_ENTRY+0x125>
// 273: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000275:  R_X86_64_64  .rodata.str1.1
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _Py_NegativeRefcount
// 287: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 28c: 4c 89 fa                      movq    %r15, %rdx
// 28f: ff d0                         callq   *%rax
// 291: 49 8b 07                      movq    (%r15), %rax
// 294: 85 c0                         testl   %eax, %eax
// 296: 78 20                         js      0x2b8 <_JIT_ENTRY+0x2b8>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a2: ff d0                         callq   *%rax
// 2a4: 49 ff 0f                      decq    (%r15)
// 2a7: 75 0f                         jne     0x2b8 <_JIT_ENTRY+0x2b8>
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _Py_Dealloc
// 2b3: 4c 89 ff                      movq    %r15, %rdi
// 2b6: ff d0                         callq   *%rax
// 2b8: 4d 89 f5                      movq    %r14, %r13
// 2bb: 49 29 dd                      subq    %rbx, %r13
// 2be: 49 83 c5 b0                   addq    $-0x50, %r13
// 2c2: 49 c1 ed 03                   shrq    $0x3, %r13
// 2c6: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 2ca: 31 c0                         xorl    %eax, %eax
// 2cc: 48 83 c4 18                   addq    $0x18, %rsp
// 2d0: 5b                            popq    %rbx
// 2d1: 41 5c                         popq    %r12
// 2d3: 41 5d                         popq    %r13
// 2d5: 41 5e                         popq    %r14
// 2d7: 41 5f                         popq    %r15
// 2d9: 5d                            popq    %rbp
// 2da: c3                            retq
// 2db: 
static const unsigned char _CHECK_EG_MATCHplus_LIST_APPEND_code_body[732] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x4c, 0x8d, 0x76, 0xf8, 0x48, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x45, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x4c, 0x89, 0xf3, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x3f, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x4e, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x6b, 0x01, 0x00, 0x00, 0xe9, 0x86, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x7d, 0x45, 0x85, 0xf6, 0x49, 0x89, 0xde, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x88, 0x28, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x1b, 0x01, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x89, 0x45, 0xf0, 0x49, 0x89, 0x75, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc5, 0x00, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x39, 0x47, 0x20, 0x7e, 0x36, 0x48, 0x8b, 0x4f, 0x18, 0x48, 0x89, 0x34, 0xc1, 0x48, 0xff, 0xc0, 0x48, 0x89, 0x47, 0x10, 0xeb, 0x39, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x45, 0x85, 0xf6, 0x49, 0x89, 0xde, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x89, 0x74, 0xff, 0xff, 0xff, 0xe9, 0x97, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xb2, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb0, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_LIST_APPEND_code_holes[24] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x54, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_AppendTakeRefListResize, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LIST_APPEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LIST_APPEND_data_holes[1];

// _CHECK_EG_MATCHplus_LIST_EXTEND
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LIST_EXTEND.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8d 76 f8                   leaq    -0x8(%rsi), %r14
// 1b: 48 8b 6e f0                   movq    -0x10(%rsi), %rbp
// 1f: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 ee                      movq    %r13, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 61: 48 89 ef                      movq    %rbp, %rdi
// 64: 4c 89 ee                      movq    %r13, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c3                         movl    %eax, %ebx
// 6b: 48 8b 45 00                   movq    (%rbp), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 48 8b 45 00                   movq    (%rbp), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 57                         jle     0xda <_JIT_ENTRY+0xda>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 79                         jns     0x100 <_JIT_ENTRY+0x100>
// 87: e9 8a 00 00 00                jmp     0x116 <_JIT_ENTRY+0x116>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 48 89 ea                      movq    %rbp, %rdx
// a8: ff d0                         callq   *%rax
// aa: 48 8b 45 00                   movq    (%rbp), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 48 ff 4d 00                   decq    (%rbp)
// c2: 74 6c                         je      0x130 <_JIT_ENTRY+0x130>
// c4: 49 8b 45 00                   movq    (%r13), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7e 7b                         jle     0x148 <_JIT_ENTRY+0x148>
// cd: 85 c0                         testl   %eax, %eax
// cf: 0f 89 99 00 00 00             jns     0x16e <_JIT_ENTRY+0x16e>
// d5: e9 aa 00 00 00                jmp     0x184 <_JIT_ENTRY+0x184>
// da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000dc:  R_X86_64_64  .rodata.str1.1
// e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e6:  R_X86_64_64  _Py_NegativeRefcount
// ee: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f3: 48 89 ea                      movq    %rbp, %rdx
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 85 c0                         testl   %eax, %eax
// fe: 78 16                         js      0x116 <_JIT_ENTRY+0x116>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10a: ff d0                         callq   *%rax
// 10c: 48 ff 4d 00                   decq    (%rbp)
// 110: 0f 84 48 02 00 00             je      0x35e <_JIT_ENTRY+0x35e>
// 116: 49 8b 45 00                   movq    (%r13), %rax
// 11a: 48 85 c0                      testq   %rax, %rax
// 11d: 0f 8e 57 02 00 00             jle     0x37a <_JIT_ENTRY+0x37a>
// 123: 85 c0                         testl   %eax, %eax
// 125: 0f 89 75 02 00 00             jns     0x3a0 <_JIT_ENTRY+0x3a0>
// 12b: e9 91 02 00 00                jmp     0x3c1 <_JIT_ENTRY+0x3c1>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_Dealloc
// 13a: 48 89 ef                      movq    %rbp, %rdi
// 13d: ff d0                         callq   *%rax
// 13f: 49 8b 45 00                   movq    (%r13), %rax
// 143: 48 85 c0                      testq   %rax, %rax
// 146: 7f 85                         jg      0xcd <_JIT_ENTRY+0xcd>
// 148: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014a:  R_X86_64_64  .rodata.str1.1
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 161: 4c 89 ea                      movq    %r13, %rdx
// 164: ff d0                         callq   *%rax
// 166: 49 8b 45 00                   movq    (%r13), %rax
// 16a: 85 c0                         testl   %eax, %eax
// 16c: 78 16                         js      0x184 <_JIT_ENTRY+0x184>
// 16e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000170:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 178: ff d0                         callq   *%rax
// 17a: 49 ff 4d 00                   decq    (%r13)
// 17e: 0f 84 e8 00 00 00             je      0x26c <_JIT_ENTRY+0x26c>
// 184: 85 db                         testl   %ebx, %ebx
// 186: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 18b: 0f 88 30 02 00 00             js      0x3c1 <_JIT_ENTRY+0x3c1>
// 191: 48 8b 3c 24                   movq    (%rsp), %rdi
// 195: 48 85 ff                      testq   %rdi, %rdi
// 198: 0f 84 23 02 00 00             je      0x3c1 <_JIT_ENTRY+0x3c1>
// 19e: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001a0:  R_X86_64_64  _Py_NoneStruct
// 1a8: 4c 39 ef                      cmpq    %r13, %rdi
// 1ab: 74 10                         je      0x1bd <_JIT_ENTRY+0x1bd>
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  PyErr_SetHandledException
// 1b7: ff d0                         callq   *%rax
// 1b9: 4c 8b 2c 24                   movq    (%rsp), %r13
// 1bd: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1c2: 49 89 47 f0                   movq    %rax, -0x10(%r15)
// 1c6: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_OPARG
// 1d4: f7 d0                         notl    %eax
// 1d6: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1db: 48 98                         cltq
// 1dd: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _PyList_Extend
// 1eb: 4c 89 ee                      movq    %r13, %rsi
// 1ee: ff d0                         callq   *%rax
// 1f0: 48 85 c0                      testq   %rax, %rax
// 1f3: 0f 84 94 00 00 00             je      0x28d <_JIT_ENTRY+0x28d>
// 1f9: 49 8b 45 00                   movq    (%r13), %rax
// 1fd: 48 85 c0                      testq   %rax, %rax
// 200: 7f 22                         jg      0x224 <_JIT_ENTRY+0x224>
// 202: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000204:  R_X86_64_64  .rodata.str1.1
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_NegativeRefcount
// 216: be 47 05 00 00                movl    $0x547, %esi            # imm = 0x547
// 21b: 4c 89 ea                      movq    %r13, %rdx
// 21e: ff d0                         callq   *%rax
// 220: 49 8b 45 00                   movq    (%r13), %rax
// 224: 85 c0                         testl   %eax, %eax
// 226: 78 21                         js      0x249 <_JIT_ENTRY+0x249>
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 232: ff d0                         callq   *%rax
// 234: 49 ff 4d 00                   decq    (%r13)
// 238: 75 0f                         jne     0x249 <_JIT_ENTRY+0x249>
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_Dealloc
// 244: 4c 89 ef                      movq    %r13, %rdi
// 247: ff d0                         callq   *%rax
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _JIT_CONTINUE
// 253: 48 89 df                      movq    %rbx, %rdi
// 256: 4c 89 f6                      movq    %r14, %rsi
// 259: 4c 89 e2                      movq    %r12, %rdx
// 25c: 48 83 c4 18                   addq    $0x18, %rsp
// 260: 5b                            popq    %rbx
// 261: 41 5c                         popq    %r12
// 263: 41 5d                         popq    %r13
// 265: 41 5e                         popq    %r14
// 267: 41 5f                         popq    %r15
// 269: 5d                            popq    %rbp
// 26a: ff e0                         jmpq    *%rax
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _Py_Dealloc
// 276: 4c 89 ef                      movq    %r13, %rdi
// 279: ff d0                         callq   *%rax
// 27b: 85 db                         testl   %ebx, %ebx
// 27d: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 282: 0f 89 09 ff ff ff             jns     0x191 <_JIT_ENTRY+0x191>
// 288: e9 34 01 00 00                jmp     0x3c1 <_JIT_ENTRY+0x3c1>
// 28d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000028f:  R_X86_64_64  PyExc_TypeError
// 297: 48 8b 33                      movq    (%rbx), %rsi
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _PyErr_ExceptionMatches
// 2a4: 4c 89 e7                      movq    %r12, %rdi
// 2a7: ff d0                         callq   *%rax
// 2a9: 85 c0                         testl   %eax, %eax
// 2ab: 74 57                         je      0x304 <_JIT_ENTRY+0x304>
// 2ad: 49 8b 45 08                   movq    0x8(%r13), %rax
// 2b1: 48 83 b8 d8 00 00 00 00       cmpq    $0x0, 0xd8(%rax)
// 2b9: 75 49                         jne     0x304 <_JIT_ENTRY+0x304>
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  PySequence_Check
// 2c5: 4c 89 ef                      movq    %r13, %rdi
// 2c8: ff d0                         callq   *%rax
// 2ca: 85 c0                         testl   %eax, %eax
// 2cc: 75 36                         jne     0x304 <_JIT_ENTRY+0x304>
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _PyErr_Clear
// 2d8: 4c 89 e7                      movq    %r12, %rdi
// 2db: ff d0                         callq   *%rax
// 2dd: 48 8b 33                      movq    (%rbx), %rsi
// 2e0: 49 8b 45 08                   movq    0x8(%r13), %rax
// 2e4: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2e8: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002ea:  R_X86_64_64  .rodata.str1.1+0x39
// 2f2: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002f4:  R_X86_64_64  _PyErr_Format
// 2fc: 4c 89 e7                      movq    %r12, %rdi
// 2ff: 31 c0                         xorl    %eax, %eax
// 301: 41 ff d0                      callq   *%r8
// 304: 49 8b 45 00                   movq    (%r13), %rax
// 308: 48 85 c0                      testq   %rax, %rax
// 30b: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 310: 7f 22                         jg      0x334 <_JIT_ENTRY+0x334>
// 312: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000314:  R_X86_64_64  .rodata.str1.1
// 31c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031e:  R_X86_64_64  _Py_NegativeRefcount
// 326: be 43 05 00 00                movl    $0x543, %esi            # imm = 0x543
// 32b: 4c 89 ea                      movq    %r13, %rdx
// 32e: ff d0                         callq   *%rax
// 330: 49 8b 45 00                   movq    (%r13), %rax
// 334: 85 c0                         testl   %eax, %eax
// 336: 78 21                         js      0x359 <_JIT_ENTRY+0x359>
// 338: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 342: ff d0                         callq   *%rax
// 344: 49 ff 4d 00                   decq    (%r13)
// 348: 75 0f                         jne     0x359 <_JIT_ENTRY+0x359>
// 34a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034c:  R_X86_64_64  _Py_Dealloc
// 354: 4c 89 ef                      movq    %r13, %rdi
// 357: ff d0                         callq   *%rax
// 359: 4d 89 fe                      movq    %r15, %r14
// 35c: eb 63                         jmp     0x3c1 <_JIT_ENTRY+0x3c1>
// 35e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000360:  R_X86_64_64  _Py_Dealloc
// 368: 48 89 ef                      movq    %rbp, %rdi
// 36b: ff d0                         callq   *%rax
// 36d: 49 8b 45 00                   movq    (%r13), %rax
// 371: 48 85 c0                      testq   %rax, %rax
// 374: 0f 8f a9 fd ff ff             jg      0x123 <_JIT_ENTRY+0x123>
// 37a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000037c:  R_X86_64_64  .rodata.str1.1
// 384: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000386:  R_X86_64_64  _Py_NegativeRefcount
// 38e: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 393: 4c 89 ea                      movq    %r13, %rdx
// 396: ff d0                         callq   *%rax
// 398: 49 8b 45 00                   movq    (%r13), %rax
// 39c: 85 c0                         testl   %eax, %eax
// 39e: 78 21                         js      0x3c1 <_JIT_ENTRY+0x3c1>
// 3a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3aa: ff d0                         callq   *%rax
// 3ac: 49 ff 4d 00                   decq    (%r13)
// 3b0: 75 0f                         jne     0x3c1 <_JIT_ENTRY+0x3c1>
// 3b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b4:  R_X86_64_64  _Py_Dealloc
// 3bc: 4c 89 ef                      movq    %r13, %rdi
// 3bf: ff d0                         callq   *%rax
// 3c1: 49 29 de                      subq    %rbx, %r14
// 3c4: 49 83 c6 b0                   addq    $-0x50, %r14
// 3c8: 49 c1 ee 03                   shrq    $0x3, %r14
// 3cc: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 3d0: 31 c0                         xorl    %eax, %eax
// 3d2: 48 83 c4 18                   addq    $0x18, %rsp
// 3d6: 5b                            popq    %rbx
// 3d7: 41 5c                         popq    %r12
// 3d9: 41 5d                         popq    %r13
// 3db: 41 5e                         popq    %r14
// 3dd: 41 5f                         popq    %r15
// 3df: 5d                            popq    %rbp
// 3e0: c3                            retq
// 3e1: 
static const unsigned char _CHECK_EG_MATCHplus_LIST_EXTEND_code_body[994] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8d, 0x76, 0xf8, 0x48, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc3, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x48, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x57, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x75, 0x02, 0x00, 0x00, 0xe9, 0x91, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xe8, 0x00, 0x00, 0x00, 0x85, 0xdb, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x0f, 0x88, 0x30, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x23, 0x02, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xef, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x2c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x89, 0x47, 0xf0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x94, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x47, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xdb, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x0f, 0x89, 0x09, 0xff, 0xff, 0xff, 0xe9, 0x34, 0x01, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x57, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x83, 0xb8, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x75, 0x49, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x33, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0xfe, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xa9, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_LIST_EXTEND_code_holes[38] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_Extend, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Check, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x2ea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x314, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x31e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x33a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x34c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x360, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x37c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x386, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00Value after * must be an iterable, not %.200s\x00'
// 67: 00
static const unsigned char _CHECK_EG_MATCHplus_LIST_EXTEND_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x2a, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LIST_EXTEND_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_ASSERTION_ERROR
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_ASSERTION_ERROR.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 13 01 00 00             je      0x222 <_JIT_ENTRY+0x222>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 22 01 00 00             jle     0x23d <_JIT_ENTRY+0x23d>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 3f 01 00 00             jns     0x262 <_JIT_ENTRY+0x262>
// 123: e9 5a 01 00 00                jmp     0x282 <_JIT_ENTRY+0x282>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 90 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 01 01 00 00             js      0x282 <_JIT_ENTRY+0x282>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 f3 00 00 00             je      0x282 <_JIT_ENTRY+0x282>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  PyExc_AssertionError
// 1c6: 4c 8b 38                      movq    (%rax), %r15
// 1c9: 41 8b 07                      movl    (%r15), %eax
// 1cc: ff c0                         incl    %eax
// 1ce: 74 0f                         je      0x1df <_JIT_ENTRY+0x1df>
// 1d0: 41 89 07                      movl    %eax, (%r15)
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1dd: ff d0                         callq   *%rax
// 1df: 4c 89 3b                      movq    %r15, (%rbx)
// 1e2: 48 83 c3 08                   addq    $0x8, %rbx
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _JIT_CONTINUE
// 1f0: 4c 89 f7                      movq    %r14, %rdi
// 1f3: 48 89 de                      movq    %rbx, %rsi
// 1f6: 4c 89 e2                      movq    %r12, %rdx
// 1f9: 48 83 c4 18                   addq    $0x18, %rsp
// 1fd: 5b                            popq    %rbx
// 1fe: 41 5c                         popq    %r12
// 200: 41 5d                         popq    %r13
// 202: 41 5e                         popq    %r14
// 204: 41 5f                         popq    %r15
// 206: 5d                            popq    %rbp
// 207: ff e0                         jmpq    *%rax
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _Py_Dealloc
// 213: 4c 89 ff                      movq    %r15, %rdi
// 216: ff d0                         callq   *%rax
// 218: 85 ed                         testl   %ebp, %ebp
// 21a: 0f 89 61 ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 220: eb 60                         jmp     0x282 <_JIT_ENTRY+0x282>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_Dealloc
// 22c: 4c 89 ef                      movq    %r13, %rdi
// 22f: ff d0                         callq   *%rax
// 231: 49 8b 07                      movq    (%r15), %rax
// 234: 48 85 c0                      testq   %rax, %rax
// 237: 0f 8f de fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 23d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023f:  R_X86_64_64  .rodata.str1.1
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _Py_NegativeRefcount
// 251: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 256: 4c 89 fa                      movq    %r15, %rdx
// 259: ff d0                         callq   *%rax
// 25b: 49 8b 07                      movq    (%r15), %rax
// 25e: 85 c0                         testl   %eax, %eax
// 260: 78 20                         js      0x282 <_JIT_ENTRY+0x282>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26c: ff d0                         callq   *%rax
// 26e: 49 ff 0f                      decq    (%r15)
// 271: 75 0f                         jne     0x282 <_JIT_ENTRY+0x282>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_Dealloc
// 27d: 4c 89 ff                      movq    %r15, %rdi
// 280: ff d0                         callq   *%rax
// 282: 48 83 c3 f0                   addq    $-0x10, %rbx
// 286: 4c 29 f3                      subq    %r14, %rbx
// 289: 48 83 c3 b8                   addq    $-0x48, %rbx
// 28d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 291: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 295: 31 c0                         xorl    %eax, %eax
// 297: 48 83 c4 18                   addq    $0x18, %rsp
// 29b: 5b                            popq    %rbx
// 29c: 41 5c                         popq    %r12
// 29e: 41 5d                         popq    %r13
// 2a0: 41 5e                         popq    %r14
// 2a2: 41 5f                         popq    %r15
// 2a4: 5d                            popq    %rbp
// 2a5: c3                            retq
// 2a6: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ASSERTION_ERROR_code_body[679] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x13, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x22, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x3f, 0x01, 0x00, 0x00, 0xe9, 0x5a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x01, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xf3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x38, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x61, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xde, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_LOAD_ASSERTION_ERROR_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AssertionError, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ASSERTION_ERROR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_ASSERTION_ERROR_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_ATTR
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_ATTR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8d 7e f8                   leaq    -0x8(%rsi), %r15
// 1b: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1f: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3e: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 47: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 5e: 48 89 e1                      movq    %rsp, %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 e6                      movq    %r12, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 57                         jle     0xda <_JIT_ENTRY+0xda>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 79                         jns     0x100 <_JIT_ENTRY+0x100>
// 87: e9 8a 00 00 00                jmp     0x116 <_JIT_ENTRY+0x116>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 4c 89 ea                      movq    %r13, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 45 00                   movq    (%r13), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 4d 00                   decq    (%r13)
// c2: 74 6c                         je      0x130 <_JIT_ENTRY+0x130>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7e 7b                         jle     0x148 <_JIT_ENTRY+0x148>
// cd: 85 c0                         testl   %eax, %eax
// cf: 0f 89 99 00 00 00             jns     0x16e <_JIT_ENTRY+0x16e>
// d5: e9 aa 00 00 00                jmp     0x184 <_JIT_ENTRY+0x184>
// da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000dc:  R_X86_64_64  .rodata.str1.1
// e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e6:  R_X86_64_64  _Py_NegativeRefcount
// ee: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f3: 4c 89 ea                      movq    %r13, %rdx
// f6: ff d0                         callq   *%rax
// f8: 49 8b 45 00                   movq    (%r13), %rax
// fc: 85 c0                         testl   %eax, %eax
// fe: 78 16                         js      0x116 <_JIT_ENTRY+0x116>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10a: ff d0                         callq   *%rax
// 10c: 49 ff 4d 00                   decq    (%r13)
// 110: 0f 84 72 01 00 00             je      0x288 <_JIT_ENTRY+0x288>
// 116: 49 8b 04 24                   movq    (%r12), %rax
// 11a: 48 85 c0                      testq   %rax, %rax
// 11d: 0f 8e 81 01 00 00             jle     0x2a4 <_JIT_ENTRY+0x2a4>
// 123: 85 c0                         testl   %eax, %eax
// 125: 0f 89 a3 01 00 00             jns     0x2ce <_JIT_ENTRY+0x2ce>
// 12b: e9 62 02 00 00                jmp     0x392 <_JIT_ENTRY+0x392>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_Dealloc
// 13a: 4c 89 ef                      movq    %r13, %rdi
// 13d: ff d0                         callq   *%rax
// 13f: 49 8b 04 24                   movq    (%r12), %rax
// 143: 48 85 c0                      testq   %rax, %rax
// 146: 7f 85                         jg      0xcd <_JIT_ENTRY+0xcd>
// 148: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014a:  R_X86_64_64  .rodata.str1.1
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 161: 4c 89 e2                      movq    %r12, %rdx
// 164: ff d0                         callq   *%rax
// 166: 49 8b 04 24                   movq    (%r12), %rax
// 16a: 85 c0                         testl   %eax, %eax
// 16c: 78 16                         js      0x184 <_JIT_ENTRY+0x184>
// 16e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000170:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 178: ff d0                         callq   *%rax
// 17a: 49 ff 0c 24                   decq    (%r12)
// 17e: 0f 84 e8 00 00 00             je      0x26c <_JIT_ENTRY+0x26c>
// 184: 85 ed                         testl   %ebp, %ebp
// 186: 0f 88 06 02 00 00             js      0x392 <_JIT_ENTRY+0x392>
// 18c: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 191: 48 85 ff                      testq   %rdi, %rdi
// 194: 0f 84 f8 01 00 00             je      0x392 <_JIT_ENTRY+0x392>
// 19a: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000019c:  R_X86_64_64  _Py_NoneStruct
// 1a4: 4c 39 e7                      cmpq    %r12, %rdi
// 1a7: 74 11                         je      0x1ba <_JIT_ENTRY+0x1ba>
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  PyErr_SetHandledException
// 1b3: ff d0                         callq   *%rax
// 1b5: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 1ba: 48 8b 04 24                   movq    (%rsp), %rax
// 1be: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 1c2: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 1c6: 48 8b 03                      movq    (%rbx), %rax
// 1c9: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1cd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cf:  R_X86_64_64  _JIT_OPARG
// 1d7: 89 ca                         movl    %ecx, %edx
// 1d9: 81 e2 fe ff 00 00             andl    $0xfffe, %edx           # imm = 0xFFFE
// 1df: 48 8b 74 90 18                movq    0x18(%rax,%rdx,4), %rsi
// 1e4: f6 c1 01                      testb   $0x1, %cl
// 1e7: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 1ec: 74 40                         je      0x22e <_JIT_ENTRY+0x22e>
// 1ee: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _PyObject_GetMethod
// 200: 48 89 e2                      movq    %rsp, %rdx
// 203: 4c 89 e7                      movq    %r12, %rdi
// 206: ff d0                         callq   *%rax
// 208: 85 c0                         testl   %eax, %eax
// 20a: 0f 84 e8 00 00 00             je      0x2f8 <_JIT_ENTRY+0x2f8>
// 210: 48 8b 04 24                   movq    (%rsp), %rax
// 214: 49 89 07                      movq    %rax, (%r15)
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _JIT_OPARG
// 221: a8 01                         testb   $0x1, %al
// 223: 0f 85 3c 01 00 00             jne     0x365 <_JIT_ENTRY+0x365>
// 229: e9 3a 01 00 00                jmp     0x368 <_JIT_ENTRY+0x368>
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  PyObject_GetAttr
// 238: 4c 89 e7                      movq    %r12, %rdi
// 23b: ff d0                         callq   *%rax
// 23d: 48 89 04 24                   movq    %rax, (%rsp)
// 241: 49 8b 04 24                   movq    (%r12), %rax
// 245: 48 85 c0                      testq   %rax, %rax
// 248: 0f 8f d5 00 00 00             jg      0x323 <_JIT_ENTRY+0x323>
// 24e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000250:  R_X86_64_64  .rodata.str1.1
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _Py_NegativeRefcount
// 262: be 4b 06 00 00                movl    $0x64b, %esi            # imm = 0x64B
// 267: e9 ae 00 00 00                jmp     0x31a <_JIT_ENTRY+0x31a>
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _Py_Dealloc
// 276: 4c 89 e7                      movq    %r12, %rdi
// 279: ff d0                         callq   *%rax
// 27b: 85 ed                         testl   %ebp, %ebp
// 27d: 0f 89 09 ff ff ff             jns     0x18c <_JIT_ENTRY+0x18c>
// 283: e9 0a 01 00 00                jmp     0x392 <_JIT_ENTRY+0x392>
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _Py_Dealloc
// 292: 4c 89 ef                      movq    %r13, %rdi
// 295: ff d0                         callq   *%rax
// 297: 49 8b 04 24                   movq    (%r12), %rax
// 29b: 48 85 c0                      testq   %rax, %rax
// 29e: 0f 8f 7f fe ff ff             jg      0x123 <_JIT_ENTRY+0x123>
// 2a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a6:  R_X86_64_64  .rodata.str1.1
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _Py_NegativeRefcount
// 2b8: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2bd: 4c 89 e2                      movq    %r12, %rdx
// 2c0: ff d0                         callq   *%rax
// 2c2: 49 8b 04 24                   movq    (%r12), %rax
// 2c6: 85 c0                         testl   %eax, %eax
// 2c8: 0f 88 c4 00 00 00             js      0x392 <_JIT_ENTRY+0x392>
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d8: ff d0                         callq   *%rax
// 2da: 49 ff 0c 24                   decq    (%r12)
// 2de: 0f 85 ae 00 00 00             jne     0x392 <_JIT_ENTRY+0x392>
// 2e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e6:  R_X86_64_64  _Py_Dealloc
// 2ee: 4c 89 e7                      movq    %r12, %rdi
// 2f1: ff d0                         callq   *%rax
// 2f3: e9 9a 00 00 00                jmp     0x392 <_JIT_ENTRY+0x392>
// 2f8: 49 8b 04 24                   movq    (%r12), %rax
// 2fc: 48 85 c0                      testq   %rax, %rax
// 2ff: 7f 22                         jg      0x323 <_JIT_ENTRY+0x323>
// 301: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000303:  R_X86_64_64  .rodata.str1.1
// 30b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030d:  R_X86_64_64  _Py_NegativeRefcount
// 315: be 43 06 00 00                movl    $0x643, %esi            # imm = 0x643
// 31a: 4c 89 e2                      movq    %r12, %rdx
// 31d: ff d0                         callq   *%rax
// 31f: 49 8b 04 24                   movq    (%r12), %rax
// 323: 85 c0                         testl   %eax, %eax
// 325: 78 21                         js      0x348 <_JIT_ENTRY+0x348>
// 327: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000329:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 331: ff d0                         callq   *%rax
// 333: 49 ff 0c 24                   decq    (%r12)
// 337: 75 0f                         jne     0x348 <_JIT_ENTRY+0x348>
// 339: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033b:  R_X86_64_64  _Py_Dealloc
// 343: 4c 89 e7                      movq    %r12, %rdi
// 346: ff d0                         callq   *%rax
// 348: 48 8b 04 24                   movq    (%rsp), %rax
// 34c: 48 85 c0                      testq   %rax, %rax
// 34f: 74 3e                         je      0x38f <_JIT_ENTRY+0x38f>
// 351: 45 31 e4                      xorl    %r12d, %r12d
// 354: 49 89 07                      movq    %rax, (%r15)
// 357: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000359:  R_X86_64_64  _JIT_OPARG
// 361: a8 01                         testb   $0x1, %al
// 363: 74 03                         je      0x368 <_JIT_ENTRY+0x368>
// 365: 4d 89 26                      movq    %r12, (%r14)
// 368: 83 e0 01                      andl    $0x1, %eax
// 36b: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 36f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000371:  R_X86_64_64  _JIT_CONTINUE
// 379: 48 89 df                      movq    %rbx, %rdi
// 37c: 4c 89 ea                      movq    %r13, %rdx
// 37f: 48 83 c4 18                   addq    $0x18, %rsp
// 383: 5b                            popq    %rbx
// 384: 41 5c                         popq    %r12
// 386: 41 5d                         popq    %r13
// 388: 41 5e                         popq    %r14
// 38a: 41 5f                         popq    %r15
// 38c: 5d                            popq    %rbp
// 38d: ff e0                         jmpq    *%rax
// 38f: 4d 89 f7                      movq    %r14, %r15
// 392: 49 29 df                      subq    %rbx, %r15
// 395: 49 83 c7 b0                   addq    $-0x50, %r15
// 399: 49 c1 ef 03                   shrq    $0x3, %r15
// 39d: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 3a1: 31 c0                         xorl    %eax, %eax
// 3a3: 48 83 c4 18                   addq    $0x18, %rsp
// 3a7: 5b                            popq    %rbx
// 3a8: 41 5c                         popq    %r12
// 3aa: 41 5d                         popq    %r13
// 3ac: 41 5e                         popq    %r14
// 3ae: 41 5f                         popq    %r15
// 3b0: 5d                            popq    %rbp
// 3b1: c3                            retq
// 3b2: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ATTR_code_body[947] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8d, 0x7e, 0xf8, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x89, 0xe1, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x72, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x81, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xa3, 0x01, 0x00, 0x00, 0xe9, 0x62, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xe8, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x06, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xf8, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x89, 0x46, 0xf0, 0x4d, 0x89, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xca, 0x81, 0xe2, 0xfe, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x90, 0x18, 0xf6, 0xc1, 0x01, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x74, 0x40, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xe8, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x3c, 0x01, 0x00, 0x00, 0xe9, 0x3a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xd5, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4b, 0x06, 0x00, 0x00, 0xe9, 0xae, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x09, 0xff, 0xff, 0xff, 0xe9, 0x0a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x7f, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xc4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xae, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x9a, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x3e, 0x45, 0x31, 0xe4, 0x49, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x03, 0x4d, 0x89, 0x26, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb0, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_LOAD_ATTR_code_holes[33] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_GetMethod, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetAttr, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x303, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x329, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x33b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x359, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x371, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_ATTR_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_ATTR_CLASS
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_ATTR_CLASS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 63                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 81 00 00 00             jns     0x106 <_JIT_ENTRY+0x106>
// 85: e9 9d 00 00 00                jmp     0x127 <_JIT_ENTRY+0x127>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c7 00 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// c6: 49 8b 04 24                   movq    (%r12), %rax
// ca: 48 85 c0                      testq   %rax, %rax
// cd: 0f 8e d6 00 00 00             jle     0x1a9 <_JIT_ENTRY+0x1a9>
// d3: 85 c0                         testl   %eax, %eax
// d5: 0f 89 f4 00 00 00             jns     0x1cf <_JIT_ENTRY+0x1cf>
// db: e9 05 01 00 00                jmp     0x1e5 <_JIT_ENTRY+0x1e5>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f9: 4c 89 ea                      movq    %r13, %rdx
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 21                         js      0x127 <_JIT_ENTRY+0x127>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 4d 00                   decq    (%r13)
// 116: 75 0f                         jne     0x127 <_JIT_ENTRY+0x127>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_Dealloc
// 122: 4c 89 ef                      movq    %r13, %rdi
// 125: ff d0                         callq   *%rax
// 127: 49 8b 04 24                   movq    (%r12), %rax
// 12b: 48 85 c0                      testq   %rax, %rax
// 12e: 7e 09                         jle     0x139 <_JIT_ENTRY+0x139>
// 130: 85 c0                         testl   %eax, %eax
// 132: 79 2f                         jns     0x163 <_JIT_ENTRY+0x163>
// 134: e9 c7 01 00 00                jmp     0x300 <_JIT_ENTRY+0x300>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_NegativeRefcount
// 14d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 152: 4c 89 e2                      movq    %r12, %rdx
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 9d 01 00 00             js      0x300 <_JIT_ENTRY+0x300>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 87 01 00 00             jne     0x300 <_JIT_ENTRY+0x300>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: 4c 89 e7                      movq    %r12, %rdi
// 186: ff d0                         callq   *%rax
// 188: e9 73 01 00 00                jmp     0x300 <_JIT_ENTRY+0x300>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: 4c 89 ef                      movq    %r13, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 49 8b 04 24                   movq    (%r12), %rax
// 1a0: 48 85 c0                      testq   %rax, %rax
// 1a3: 0f 8f 2a ff ff ff             jg      0xd3 <_JIT_ENTRY+0xd3>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 49 8b 04 24                   movq    (%r12), %rax
// 1cb: 85 c0                         testl   %eax, %eax
// 1cd: 78 16                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 49 ff 0c 24                   decq    (%r12)
// 1df: 0f 84 04 01 00 00             je      0x2e9 <_JIT_ENTRY+0x2e9>
// 1e5: 85 ed                         testl   %ebp, %ebp
// 1e7: 0f 88 13 01 00 00             js      0x300 <_JIT_ENTRY+0x300>
// 1ed: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1f2: 48 85 ff                      testq   %rdi, %rdi
// 1f5: 0f 84 05 01 00 00             je      0x300 <_JIT_ENTRY+0x300>
// 1fb: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001fd:  R_X86_64_64  _Py_NoneStruct
// 205: 4c 39 e7                      cmpq    %r12, %rdi
// 208: 74 11                         je      0x21b <_JIT_ENTRY+0x21b>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyErr_SetHandledException
// 214: ff d0                         callq   *%rax
// 216: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 21b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 220: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 224: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 228: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000022a:  R_X86_64_64  _JIT_OPERAND
// 232: 41 8b 45 00                   movl    (%r13), %eax
// 236: ff c0                         incl    %eax
// 238: 75 0f                         jne     0x249 <_JIT_ENTRY+0x249>
// 23a: 49 8b 04 24                   movq    (%r12), %rax
// 23e: 48 85 c0                      testq   %rax, %rax
// 241: 7e 1f                         jle     0x262 <_JIT_ENTRY+0x262>
// 243: 85 c0                         testl   %eax, %eax
// 245: 79 41                         jns     0x288 <_JIT_ENTRY+0x288>
// 247: eb 60                         jmp     0x2a9 <_JIT_ENTRY+0x2a9>
// 249: 41 89 45 00                   movl    %eax, (%r13)
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 257: ff d0                         callq   *%rax
// 259: 49 8b 04 24                   movq    (%r12), %rax
// 25d: 48 85 c0                      testq   %rax, %rax
// 260: 7f e1                         jg      0x243 <_JIT_ENTRY+0x243>
// 262: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000264:  R_X86_64_64  .rodata.str1.1
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _Py_NegativeRefcount
// 276: be f3 06 00 00                movl    $0x6f3, %esi            # imm = 0x6F3
// 27b: 4c 89 e2                      movq    %r12, %rdx
// 27e: ff d0                         callq   *%rax
// 280: 49 8b 04 24                   movq    (%r12), %rax
// 284: 85 c0                         testl   %eax, %eax
// 286: 78 21                         js      0x2a9 <_JIT_ENTRY+0x2a9>
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 292: ff d0                         callq   *%rax
// 294: 49 ff 0c 24                   decq    (%r12)
// 298: 75 0f                         jne     0x2a9 <_JIT_ENTRY+0x2a9>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_Dealloc
// 2a4: 4c 89 e7                      movq    %r12, %rdi
// 2a7: ff d0                         callq   *%rax
// 2a9: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 2ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002af:  R_X86_64_64  _JIT_OPARG
// 2b7: a8 01                         testb   $0x1, %al
// 2b9: 74 07                         je      0x2c2 <_JIT_ENTRY+0x2c2>
// 2bb: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 2c2: 83 e0 01                      andl    $0x1, %eax
// 2c5: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cb:  R_X86_64_64  _JIT_CONTINUE
// 2d3: 48 89 df                      movq    %rbx, %rdi
// 2d6: 4c 89 fa                      movq    %r15, %rdx
// 2d9: 48 83 c4 18                   addq    $0x18, %rsp
// 2dd: 5b                            popq    %rbx
// 2de: 41 5c                         popq    %r12
// 2e0: 41 5d                         popq    %r13
// 2e2: 41 5e                         popq    %r14
// 2e4: 41 5f                         popq    %r15
// 2e6: 5d                            popq    %rbp
// 2e7: ff e0                         jmpq    *%rax
// 2e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002eb:  R_X86_64_64  _Py_Dealloc
// 2f3: 4c 89 e7                      movq    %r12, %rdi
// 2f6: ff d0                         callq   *%rax
// 2f8: 85 ed                         testl   %ebp, %ebp
// 2fa: 0f 89 ed fe ff ff             jns     0x1ed <_JIT_ENTRY+0x1ed>
// 300: 49 83 c6 f0                   addq    $-0x10, %r14
// 304: 49 29 de                      subq    %rbx, %r14
// 307: 49 83 c6 b8                   addq    $-0x48, %r14
// 30b: 49 c1 ee 03                   shrq    $0x3, %r14
// 30f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 313: 31 c0                         xorl    %eax, %eax
// 315: 48 83 c4 18                   addq    $0x18, %rsp
// 319: 5b                            popq    %rbx
// 31a: 41 5c                         popq    %r12
// 31c: 41 5d                         popq    %r13
// 31e: 41 5e                         popq    %r14
// 320: 41 5f                         popq    %r15
// 322: 5d                            popq    %rbp
// 323: c3                            retq
// 324: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ATTR_CLASS_code_body[805] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0xc7, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x9d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x87, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x73, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x04, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x13, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x05, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x89, 0x46, 0xf0, 0x4d, 0x89, 0x66, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x60, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0xed, 0xfe, 0xff, 0xff, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_LOAD_ATTR_CLASS_code_holes[29] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2af, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_ATTR_CLASS_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_ATTR_INSTANCE_VALUE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_ATTR_INSTANCE_VALUE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 a6 00 00 00                jmp     0x17a <_JIT_ENTRY+0x17a>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 d0 01 00 00             je      0x2e0 <_JIT_ENTRY+0x2e0>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e df 01 00 00             jle     0x2fc <_JIT_ENTRY+0x2fc>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 fd 01 00 00             jns     0x322 <_JIT_ENTRY+0x322>
// 125: e9 19 02 00 00                jmp     0x343 <_JIT_ENTRY+0x343>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 12                         js      0x17a <_JIT_ENTRY+0x17a>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 74 7d                         je      0x1f7 <_JIT_ENTRY+0x1f7>
// 17a: 85 ed                         testl   %ebp, %ebp
// 17c: 0f 88 c1 01 00 00             js      0x343 <_JIT_ENTRY+0x343>
// 182: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 187: 48 85 ff                      testq   %rdi, %rdi
// 18a: 0f 84 b3 01 00 00             je      0x343 <_JIT_ENTRY+0x343>
// 190: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000192:  R_X86_64_64  _Py_NoneStruct
// 19a: 4c 39 e7                      cmpq    %r12, %rdi
// 19d: 74 11                         je      0x1b0 <_JIT_ENTRY+0x1b0>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  PyErr_SetHandledException
// 1a9: ff d0                         callq   *%rax
// 1ab: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 1b0: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b5: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 1b9: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 1bd: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 1c2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c4:  R_X86_64_64  _JIT_OPERAND
// 1cc: 0f b7 c9                      movzwl  %cx, %ecx
// 1cf: 4c 8b 6c c8 01                movq    0x1(%rax,%rcx,8), %r13
// 1d4: 4d 85 ed                      testq   %r13, %r13
// 1d7: 74 3a                         je      0x213 <_JIT_ENTRY+0x213>
// 1d9: 41 8b 45 00                   movl    (%r13), %eax
// 1dd: ff c0                         incl    %eax
// 1df: 75 5f                         jne     0x240 <_JIT_ENTRY+0x240>
// 1e1: 49 8b 04 24                   movq    (%r12), %rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 7e 6f                         jle     0x259 <_JIT_ENTRY+0x259>
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 0f 89 8d 00 00 00             jns     0x27f <_JIT_ENTRY+0x27f>
// 1f2: e9 a9 00 00 00                jmp     0x2a0 <_JIT_ENTRY+0x2a0>
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  _Py_Dealloc
// 201: 4c 89 e7                      movq    %r12, %rdi
// 204: ff d0                         callq   *%rax
// 206: 85 ed                         testl   %ebp, %ebp
// 208: 0f 89 74 ff ff ff             jns     0x182 <_JIT_ENTRY+0x182>
// 20e: e9 30 01 00 00                jmp     0x343 <_JIT_ENTRY+0x343>
// 213: 49 29 de                      subq    %rbx, %r14
// 216: 49 83 c6 b8                   addq    $-0x48, %r14
// 21a: 49 c1 ee 03                   shrq    $0x3, %r14
// 21e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 222: 48 8b 03                      movq    (%rbx), %rax
// 225: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000227:  R_X86_64_64  _JIT_TARGET
// 22f: 89 c9                         movl    %ecx, %ecx
// 231: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 235: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 23b: e9 18 01 00 00                jmp     0x358 <_JIT_ENTRY+0x358>
// 240: 41 89 45 00                   movl    %eax, (%r13)
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 24e: ff d0                         callq   *%rax
// 250: 49 8b 04 24                   movq    (%r12), %rax
// 254: 48 85 c0                      testq   %rax, %rax
// 257: 7f 91                         jg      0x1ea <_JIT_ENTRY+0x1ea>
// 259: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025b:  R_X86_64_64  .rodata.str1.1
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _Py_NegativeRefcount
// 26d: be 75 06 00 00                movl    $0x675, %esi            # imm = 0x675
// 272: 4c 89 e2                      movq    %r12, %rdx
// 275: ff d0                         callq   *%rax
// 277: 49 8b 04 24                   movq    (%r12), %rax
// 27b: 85 c0                         testl   %eax, %eax
// 27d: 78 21                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 289: ff d0                         callq   *%rax
// 28b: 49 ff 0c 24                   decq    (%r12)
// 28f: 75 0f                         jne     0x2a0 <_JIT_ENTRY+0x2a0>
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _Py_Dealloc
// 29b: 4c 89 e7                      movq    %r12, %rdi
// 29e: ff d0                         callq   *%rax
// 2a0: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _JIT_OPARG
// 2ae: a8 01                         testb   $0x1, %al
// 2b0: 74 07                         je      0x2b9 <_JIT_ENTRY+0x2b9>
// 2b2: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 2b9: 83 e0 01                      andl    $0x1, %eax
// 2bc: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  _JIT_CONTINUE
// 2ca: 48 89 df                      movq    %rbx, %rdi
// 2cd: 4c 89 fa                      movq    %r15, %rdx
// 2d0: 48 83 c4 18                   addq    $0x18, %rsp
// 2d4: 5b                            popq    %rbx
// 2d5: 41 5c                         popq    %r12
// 2d7: 41 5d                         popq    %r13
// 2d9: 41 5e                         popq    %r14
// 2db: 41 5f                         popq    %r15
// 2dd: 5d                            popq    %rbp
// 2de: ff e0                         jmpq    *%rax
// 2e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e2:  R_X86_64_64  _Py_Dealloc
// 2ea: 4c 89 ef                      movq    %r13, %rdi
// 2ed: ff d0                         callq   *%rax
// 2ef: 49 8b 04 24                   movq    (%r12), %rax
// 2f3: 48 85 c0                      testq   %rax, %rax
// 2f6: 0f 8f 21 fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 2fc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002fe:  R_X86_64_64  .rodata.str1.1
// 306: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000308:  R_X86_64_64  _Py_NegativeRefcount
// 310: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 315: 4c 89 e2                      movq    %r12, %rdx
// 318: ff d0                         callq   *%rax
// 31a: 49 8b 04 24                   movq    (%r12), %rax
// 31e: 85 c0                         testl   %eax, %eax
// 320: 78 21                         js      0x343 <_JIT_ENTRY+0x343>
// 322: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000324:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 32c: ff d0                         callq   *%rax
// 32e: 49 ff 0c 24                   decq    (%r12)
// 332: 75 0f                         jne     0x343 <_JIT_ENTRY+0x343>
// 334: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000336:  R_X86_64_64  _Py_Dealloc
// 33e: 4c 89 e7                      movq    %r12, %rdi
// 341: ff d0                         callq   *%rax
// 343: 49 83 c6 f0                   addq    $-0x10, %r14
// 347: 49 29 de                      subq    %rbx, %r14
// 34a: 49 83 c6 b8                   addq    $-0x48, %r14
// 34e: 49 c1 ee 03                   shrq    $0x3, %r14
// 352: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 356: 31 c0                         xorl    %eax, %eax
// 358: 48 83 c4 18                   addq    $0x18, %rsp
// 35c: 5b                            popq    %rbx
// 35d: 41 5c                         popq    %r12
// 35f: 41 5d                         popq    %r13
// 361: 41 5e                         popq    %r14
// 363: 41 5f                         popq    %r15
// 365: 5d                            popq    %rbp
// 366: c3                            retq
// 367: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ATTR_INSTANCE_VALUE_code_body[872] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xd0, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xdf, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xfd, 0x01, 0x00, 0x00, 0xe9, 0x19, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x7d, 0x85, 0xed, 0x0f, 0x88, 0xc1, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xb3, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x89, 0x46, 0xf0, 0x4d, 0x89, 0x66, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x6c, 0xc8, 0x01, 0x4d, 0x85, 0xed, 0x74, 0x3a, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x5f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x6f, 0x85, 0xc0, 0x0f, 0x89, 0x8d, 0x00, 0x00, 0x00, 0xe9, 0xa9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x74, 0xff, 0xff, 0xff, 0xe9, 0x30, 0x01, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x18, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x91, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x21, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_LOAD_ATTR_INSTANCE_VALUE_code_holes[30] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2fe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x324, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x336, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_ATTR_INSTANCE_VALUE_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_LAZY_DICT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 16 01 00 00             je      0x225 <_JIT_ENTRY+0x225>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 25 01 00 00             jle     0x240 <_JIT_ENTRY+0x240>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 42 01 00 00             jns     0x265 <_JIT_ENTRY+0x265>
// 123: e9 5d 01 00 00                jmp     0x285 <_JIT_ENTRY+0x285>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 93 00 00 00             je      0x20c <_JIT_ENTRY+0x20c>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 04 01 00 00             js      0x285 <_JIT_ENTRY+0x285>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 f6 00 00 00             je      0x285 <_JIT_ENTRY+0x285>
// 18f: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 4c 39 ff                      cmpq    %r15, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1af: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b4: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 1b8: 4c 89 7b f8                   movq    %r15, -0x8(%rbx)
// 1bc: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001be:  R_X86_64_64  _JIT_OPERAND
// 1c6: 41 8b 45 00                   movl    (%r13), %eax
// 1ca: ff c0                         incl    %eax
// 1cc: 74 10                         je      0x1de <_JIT_ENTRY+0x1de>
// 1ce: 41 89 45 00                   movl    %eax, (%r13)
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1dc: ff d0                         callq   *%rax
// 1de: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 1e2: 4c 89 3b                      movq    %r15, (%rbx)
// 1e5: 48 83 c3 08                   addq    $0x8, %rbx
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_CONTINUE
// 1f3: 4c 89 f7                      movq    %r14, %rdi
// 1f6: 48 89 de                      movq    %rbx, %rsi
// 1f9: 4c 89 e2                      movq    %r12, %rdx
// 1fc: 48 83 c4 18                   addq    $0x18, %rsp
// 200: 5b                            popq    %rbx
// 201: 41 5c                         popq    %r12
// 203: 41 5d                         popq    %r13
// 205: 41 5e                         popq    %r14
// 207: 41 5f                         popq    %r15
// 209: 5d                            popq    %rbp
// 20a: ff e0                         jmpq    *%rax
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_Dealloc
// 216: 4c 89 ff                      movq    %r15, %rdi
// 219: ff d0                         callq   *%rax
// 21b: 85 ed                         testl   %ebp, %ebp
// 21d: 0f 89 5e ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 223: eb 60                         jmp     0x285 <_JIT_ENTRY+0x285>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _Py_Dealloc
// 22f: 4c 89 ef                      movq    %r13, %rdi
// 232: ff d0                         callq   *%rax
// 234: 49 8b 07                      movq    (%r15), %rax
// 237: 48 85 c0                      testq   %rax, %rax
// 23a: 0f 8f db fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 240: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000242:  R_X86_64_64  .rodata.str1.1
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_NegativeRefcount
// 254: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 259: 4c 89 fa                      movq    %r15, %rdx
// 25c: ff d0                         callq   *%rax
// 25e: 49 8b 07                      movq    (%r15), %rax
// 261: 85 c0                         testl   %eax, %eax
// 263: 78 20                         js      0x285 <_JIT_ENTRY+0x285>
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26f: ff d0                         callq   *%rax
// 271: 49 ff 0f                      decq    (%r15)
// 274: 75 0f                         jne     0x285 <_JIT_ENTRY+0x285>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_Dealloc
// 280: 4c 89 ff                      movq    %r15, %rdi
// 283: ff d0                         callq   *%rax
// 285: 48 83 c3 f0                   addq    $-0x10, %rbx
// 289: 4c 29 f3                      subq    %r14, %rbx
// 28c: 48 83 c3 b8                   addq    $-0x48, %rbx
// 290: 48 c1 eb 03                   shrq    $0x3, %rbx
// 294: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 298: 31 c0                         xorl    %eax, %eax
// 29a: 48 83 c4 18                   addq    $0x18, %rsp
// 29e: 5b                            popq    %rbx
// 29f: 41 5c                         popq    %r12
// 2a1: 41 5d                         popq    %r13
// 2a3: 41 5e                         popq    %r14
// 2a5: 41 5f                         popq    %r15
// 2a7: 5d                            popq    %rbp
// 2a8: c3                            retq
// 2a9: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_LAZY_DICT_code_body[682] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x16, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x25, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x42, 0x01, 0x00, 0x00, 0xe9, 0x5d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x04, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xf6, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xff, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x7b, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x5e, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xdb, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_LAZY_DICT_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_LAZY_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_NO_DICT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_NO_DICT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 16 01 00 00             je      0x225 <_JIT_ENTRY+0x225>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 25 01 00 00             jle     0x240 <_JIT_ENTRY+0x240>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 42 01 00 00             jns     0x265 <_JIT_ENTRY+0x265>
// 123: e9 5d 01 00 00                jmp     0x285 <_JIT_ENTRY+0x285>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 93 00 00 00             je      0x20c <_JIT_ENTRY+0x20c>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 04 01 00 00             js      0x285 <_JIT_ENTRY+0x285>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 f6 00 00 00             je      0x285 <_JIT_ENTRY+0x285>
// 18f: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 4c 39 ff                      cmpq    %r15, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1af: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b4: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 1b8: 4c 89 7b f8                   movq    %r15, -0x8(%rbx)
// 1bc: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001be:  R_X86_64_64  _JIT_OPERAND
// 1c6: 41 8b 45 00                   movl    (%r13), %eax
// 1ca: ff c0                         incl    %eax
// 1cc: 74 10                         je      0x1de <_JIT_ENTRY+0x1de>
// 1ce: 41 89 45 00                   movl    %eax, (%r13)
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1dc: ff d0                         callq   *%rax
// 1de: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 1e2: 4c 89 3b                      movq    %r15, (%rbx)
// 1e5: 48 83 c3 08                   addq    $0x8, %rbx
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_CONTINUE
// 1f3: 4c 89 f7                      movq    %r14, %rdi
// 1f6: 48 89 de                      movq    %rbx, %rsi
// 1f9: 4c 89 e2                      movq    %r12, %rdx
// 1fc: 48 83 c4 18                   addq    $0x18, %rsp
// 200: 5b                            popq    %rbx
// 201: 41 5c                         popq    %r12
// 203: 41 5d                         popq    %r13
// 205: 41 5e                         popq    %r14
// 207: 41 5f                         popq    %r15
// 209: 5d                            popq    %rbp
// 20a: ff e0                         jmpq    *%rax
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_Dealloc
// 216: 4c 89 ff                      movq    %r15, %rdi
// 219: ff d0                         callq   *%rax
// 21b: 85 ed                         testl   %ebp, %ebp
// 21d: 0f 89 5e ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 223: eb 60                         jmp     0x285 <_JIT_ENTRY+0x285>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _Py_Dealloc
// 22f: 4c 89 ef                      movq    %r13, %rdi
// 232: ff d0                         callq   *%rax
// 234: 49 8b 07                      movq    (%r15), %rax
// 237: 48 85 c0                      testq   %rax, %rax
// 23a: 0f 8f db fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 240: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000242:  R_X86_64_64  .rodata.str1.1
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_NegativeRefcount
// 254: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 259: 4c 89 fa                      movq    %r15, %rdx
// 25c: ff d0                         callq   *%rax
// 25e: 49 8b 07                      movq    (%r15), %rax
// 261: 85 c0                         testl   %eax, %eax
// 263: 78 20                         js      0x285 <_JIT_ENTRY+0x285>
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26f: ff d0                         callq   *%rax
// 271: 49 ff 0f                      decq    (%r15)
// 274: 75 0f                         jne     0x285 <_JIT_ENTRY+0x285>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_Dealloc
// 280: 4c 89 ff                      movq    %r15, %rdi
// 283: ff d0                         callq   *%rax
// 285: 48 83 c3 f0                   addq    $-0x10, %rbx
// 289: 4c 29 f3                      subq    %r14, %rbx
// 28c: 48 83 c3 b8                   addq    $-0x48, %rbx
// 290: 48 c1 eb 03                   shrq    $0x3, %rbx
// 294: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 298: 31 c0                         xorl    %eax, %eax
// 29a: 48 83 c4 18                   addq    $0x18, %rsp
// 29e: 5b                            popq    %rbx
// 29f: 41 5c                         popq    %r12
// 2a1: 41 5d                         popq    %r13
// 2a3: 41 5e                         popq    %r14
// 2a5: 41 5f                         popq    %r15
// 2a7: 5d                            popq    %rbp
// 2a8: c3                            retq
// 2a9: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_NO_DICT_code_body[682] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x16, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x25, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x42, 0x01, 0x00, 0x00, 0xe9, 0x5d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x04, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xf6, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xff, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x7b, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x5e, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xdb, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_NO_DICT_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_NO_DICT_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_WITH_VALUES
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_WITH_VALUES.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 16 01 00 00             je      0x225 <_JIT_ENTRY+0x225>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 25 01 00 00             jle     0x240 <_JIT_ENTRY+0x240>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 42 01 00 00             jns     0x265 <_JIT_ENTRY+0x265>
// 123: e9 5d 01 00 00                jmp     0x285 <_JIT_ENTRY+0x285>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 93 00 00 00             je      0x20c <_JIT_ENTRY+0x20c>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 04 01 00 00             js      0x285 <_JIT_ENTRY+0x285>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 f6 00 00 00             je      0x285 <_JIT_ENTRY+0x285>
// 18f: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 4c 39 ff                      cmpq    %r15, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1af: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b4: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 1b8: 4c 89 7b f8                   movq    %r15, -0x8(%rbx)
// 1bc: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001be:  R_X86_64_64  _JIT_OPERAND
// 1c6: 41 8b 45 00                   movl    (%r13), %eax
// 1ca: ff c0                         incl    %eax
// 1cc: 74 10                         je      0x1de <_JIT_ENTRY+0x1de>
// 1ce: 41 89 45 00                   movl    %eax, (%r13)
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1dc: ff d0                         callq   *%rax
// 1de: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 1e2: 4c 89 3b                      movq    %r15, (%rbx)
// 1e5: 48 83 c3 08                   addq    $0x8, %rbx
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_CONTINUE
// 1f3: 4c 89 f7                      movq    %r14, %rdi
// 1f6: 48 89 de                      movq    %rbx, %rsi
// 1f9: 4c 89 e2                      movq    %r12, %rdx
// 1fc: 48 83 c4 18                   addq    $0x18, %rsp
// 200: 5b                            popq    %rbx
// 201: 41 5c                         popq    %r12
// 203: 41 5d                         popq    %r13
// 205: 41 5e                         popq    %r14
// 207: 41 5f                         popq    %r15
// 209: 5d                            popq    %rbp
// 20a: ff e0                         jmpq    *%rax
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_Dealloc
// 216: 4c 89 ff                      movq    %r15, %rdi
// 219: ff d0                         callq   *%rax
// 21b: 85 ed                         testl   %ebp, %ebp
// 21d: 0f 89 5e ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 223: eb 60                         jmp     0x285 <_JIT_ENTRY+0x285>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _Py_Dealloc
// 22f: 4c 89 ef                      movq    %r13, %rdi
// 232: ff d0                         callq   *%rax
// 234: 49 8b 07                      movq    (%r15), %rax
// 237: 48 85 c0                      testq   %rax, %rax
// 23a: 0f 8f db fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 240: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000242:  R_X86_64_64  .rodata.str1.1
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_NegativeRefcount
// 254: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 259: 4c 89 fa                      movq    %r15, %rdx
// 25c: ff d0                         callq   *%rax
// 25e: 49 8b 07                      movq    (%r15), %rax
// 261: 85 c0                         testl   %eax, %eax
// 263: 78 20                         js      0x285 <_JIT_ENTRY+0x285>
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26f: ff d0                         callq   *%rax
// 271: 49 ff 0f                      decq    (%r15)
// 274: 75 0f                         jne     0x285 <_JIT_ENTRY+0x285>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_Dealloc
// 280: 4c 89 ff                      movq    %r15, %rdi
// 283: ff d0                         callq   *%rax
// 285: 48 83 c3 f0                   addq    $-0x10, %rbx
// 289: 4c 29 f3                      subq    %r14, %rbx
// 28c: 48 83 c3 b8                   addq    $-0x48, %rbx
// 290: 48 c1 eb 03                   shrq    $0x3, %rbx
// 294: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 298: 31 c0                         xorl    %eax, %eax
// 29a: 48 83 c4 18                   addq    $0x18, %rsp
// 29e: 5b                            popq    %rbx
// 29f: 41 5c                         popq    %r12
// 2a1: 41 5d                         popq    %r13
// 2a3: 41 5e                         popq    %r14
// 2a5: 41 5f                         popq    %r15
// 2a7: 5d                            popq    %rbp
// 2a8: c3                            retq
// 2a9: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_WITH_VALUES_code_body[682] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x16, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x25, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x42, 0x01, 0x00, 0x00, 0xe9, 0x5d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x04, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xf6, 0x00, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xff, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x7b, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x5e, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xdb, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_WITH_VALUES_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_WITH_VALUES_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_ATTR_MODULE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_ATTR_MODULE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 eb 01 00 00             je      0x2fb <_JIT_ENTRY+0x2fb>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e fa 01 00 00             jle     0x317 <_JIT_ENTRY+0x317>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 18 02 00 00             jns     0x33d <_JIT_ENTRY+0x33d>
// 125: e9 34 02 00 00                jmp     0x35e <_JIT_ENTRY+0x35e>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 94 00 00 00             je      0x212 <_JIT_ENTRY+0x212>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 d8 01 00 00             js      0x35e <_JIT_ENTRY+0x35e>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 ca 01 00 00             je      0x35e <_JIT_ENTRY+0x35e>
// 194: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 4c 39 e7                      cmpq    %r12, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 1b4: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b9: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 1bd: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 1c1: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 1c6: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1ca: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 1ce: ba 01 00 00 00                movl    $0x1, %edx
// 1d3: 48 d3 e2                      shlq    %cl, %rdx
// 1d6: 48 01 c2                      addq    %rax, %rdx
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _JIT_OPERAND
// 1e3: 0f b7 c0                      movzwl  %ax, %eax
// 1e6: 48 c1 e0 04                   shlq    $0x4, %rax
// 1ea: 4c 8b 6c 10 28                movq    0x28(%rax,%rdx), %r13
// 1ef: 4d 85 ed                      testq   %r13, %r13
// 1f2: 74 3a                         je      0x22e <_JIT_ENTRY+0x22e>
// 1f4: 41 8b 45 00                   movl    (%r13), %eax
// 1f8: ff c0                         incl    %eax
// 1fa: 75 5f                         jne     0x25b <_JIT_ENTRY+0x25b>
// 1fc: 49 8b 04 24                   movq    (%r12), %rax
// 200: 48 85 c0                      testq   %rax, %rax
// 203: 7e 6f                         jle     0x274 <_JIT_ENTRY+0x274>
// 205: 85 c0                         testl   %eax, %eax
// 207: 0f 89 8d 00 00 00             jns     0x29a <_JIT_ENTRY+0x29a>
// 20d: e9 a9 00 00 00                jmp     0x2bb <_JIT_ENTRY+0x2bb>
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_Dealloc
// 21c: 4c 89 e7                      movq    %r12, %rdi
// 21f: ff d0                         callq   *%rax
// 221: 85 ed                         testl   %ebp, %ebp
// 223: 0f 89 5d ff ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 229: e9 30 01 00 00                jmp     0x35e <_JIT_ENTRY+0x35e>
// 22e: 49 29 de                      subq    %rbx, %r14
// 231: 49 83 c6 b8                   addq    $-0x48, %r14
// 235: 49 c1 ee 03                   shrq    $0x3, %r14
// 239: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 23d: 48 8b 03                      movq    (%rbx), %rax
// 240: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000242:  R_X86_64_64  _JIT_TARGET
// 24a: 89 c9                         movl    %ecx, %ecx
// 24c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 250: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 256: e9 18 01 00 00                jmp     0x373 <_JIT_ENTRY+0x373>
// 25b: 41 89 45 00                   movl    %eax, (%r13)
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 269: ff d0                         callq   *%rax
// 26b: 49 8b 04 24                   movq    (%r12), %rax
// 26f: 48 85 c0                      testq   %rax, %rax
// 272: 7f 91                         jg      0x205 <_JIT_ENTRY+0x205>
// 274: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000276:  R_X86_64_64  .rodata.str1.1
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _Py_NegativeRefcount
// 288: be 97 06 00 00                movl    $0x697, %esi            # imm = 0x697
// 28d: 4c 89 e2                      movq    %r12, %rdx
// 290: ff d0                         callq   *%rax
// 292: 49 8b 04 24                   movq    (%r12), %rax
// 296: 85 c0                         testl   %eax, %eax
// 298: 78 21                         js      0x2bb <_JIT_ENTRY+0x2bb>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a4: ff d0                         callq   *%rax
// 2a6: 49 ff 0c 24                   decq    (%r12)
// 2aa: 75 0f                         jne     0x2bb <_JIT_ENTRY+0x2bb>
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  _Py_Dealloc
// 2b6: 4c 89 e7                      movq    %r12, %rdi
// 2b9: ff d0                         callq   *%rax
// 2bb: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _JIT_OPARG
// 2c9: a8 01                         testb   $0x1, %al
// 2cb: 74 07                         je      0x2d4 <_JIT_ENTRY+0x2d4>
// 2cd: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 2d4: 83 e0 01                      andl    $0x1, %eax
// 2d7: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _JIT_CONTINUE
// 2e5: 48 89 df                      movq    %rbx, %rdi
// 2e8: 4c 89 fa                      movq    %r15, %rdx
// 2eb: 48 83 c4 18                   addq    $0x18, %rsp
// 2ef: 5b                            popq    %rbx
// 2f0: 41 5c                         popq    %r12
// 2f2: 41 5d                         popq    %r13
// 2f4: 41 5e                         popq    %r14
// 2f6: 41 5f                         popq    %r15
// 2f8: 5d                            popq    %rbp
// 2f9: ff e0                         jmpq    *%rax
// 2fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fd:  R_X86_64_64  _Py_Dealloc
// 305: 4c 89 ef                      movq    %r13, %rdi
// 308: ff d0                         callq   *%rax
// 30a: 49 8b 04 24                   movq    (%r12), %rax
// 30e: 48 85 c0                      testq   %rax, %rax
// 311: 0f 8f 06 fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 317: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000319:  R_X86_64_64  .rodata.str1.1
// 321: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000323:  R_X86_64_64  _Py_NegativeRefcount
// 32b: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 330: 4c 89 e2                      movq    %r12, %rdx
// 333: ff d0                         callq   *%rax
// 335: 49 8b 04 24                   movq    (%r12), %rax
// 339: 85 c0                         testl   %eax, %eax
// 33b: 78 21                         js      0x35e <_JIT_ENTRY+0x35e>
// 33d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 347: ff d0                         callq   *%rax
// 349: 49 ff 0c 24                   decq    (%r12)
// 34d: 75 0f                         jne     0x35e <_JIT_ENTRY+0x35e>
// 34f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000351:  R_X86_64_64  _Py_Dealloc
// 359: 4c 89 e7                      movq    %r12, %rdi
// 35c: ff d0                         callq   *%rax
// 35e: 49 83 c6 f0                   addq    $-0x10, %r14
// 362: 49 29 de                      subq    %rbx, %r14
// 365: 49 83 c6 b8                   addq    $-0x48, %r14
// 369: 49 c1 ee 03                   shrq    $0x3, %r14
// 36d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 371: 31 c0                         xorl    %eax, %eax
// 373: 48 83 c4 18                   addq    $0x18, %rsp
// 377: 5b                            popq    %rbx
// 378: 41 5c                         popq    %r12
// 37a: 41 5d                         popq    %r13
// 37c: 41 5e                         popq    %r14
// 37e: 41 5f                         popq    %r15
// 380: 5d                            popq    %rbp
// 381: c3                            retq
// 382: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ATTR_MODULE_code_body[899] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xeb, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xfa, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x18, 0x02, 0x00, 0x00, 0xe9, 0x34, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x94, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xd8, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xca, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x89, 0x46, 0xf0, 0x4d, 0x89, 0x66, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x6c, 0x10, 0x28, 0x4d, 0x85, 0xed, 0x74, 0x3a, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x5f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x6f, 0x85, 0xc0, 0x0f, 0x89, 0x8d, 0x00, 0x00, 0x00, 0xe9, 0xa9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x5d, 0xff, 0xff, 0xff, 0xe9, 0x30, 0x01, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x18, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x91, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x06, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_LOAD_ATTR_MODULE_code_holes[30] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x319, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x323, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x33f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x351, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_ATTR_MODULE_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 63                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 81 00 00 00             jns     0x106 <_JIT_ENTRY+0x106>
// 85: e9 9d 00 00 00                jmp     0x127 <_JIT_ENTRY+0x127>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c7 00 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// c6: 49 8b 04 24                   movq    (%r12), %rax
// ca: 48 85 c0                      testq   %rax, %rax
// cd: 0f 8e d6 00 00 00             jle     0x1a9 <_JIT_ENTRY+0x1a9>
// d3: 85 c0                         testl   %eax, %eax
// d5: 0f 89 f4 00 00 00             jns     0x1cf <_JIT_ENTRY+0x1cf>
// db: e9 05 01 00 00                jmp     0x1e5 <_JIT_ENTRY+0x1e5>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f9: 4c 89 ea                      movq    %r13, %rdx
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 21                         js      0x127 <_JIT_ENTRY+0x127>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 4d 00                   decq    (%r13)
// 116: 75 0f                         jne     0x127 <_JIT_ENTRY+0x127>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_Dealloc
// 122: 4c 89 ef                      movq    %r13, %rdi
// 125: ff d0                         callq   *%rax
// 127: 49 8b 04 24                   movq    (%r12), %rax
// 12b: 48 85 c0                      testq   %rax, %rax
// 12e: 7e 09                         jle     0x139 <_JIT_ENTRY+0x139>
// 130: 85 c0                         testl   %eax, %eax
// 132: 79 2f                         jns     0x163 <_JIT_ENTRY+0x163>
// 134: e9 9f 01 00 00                jmp     0x2d8 <_JIT_ENTRY+0x2d8>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_NegativeRefcount
// 14d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 152: 4c 89 e2                      movq    %r12, %rdx
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 75 01 00 00             js      0x2d8 <_JIT_ENTRY+0x2d8>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 5f 01 00 00             jne     0x2d8 <_JIT_ENTRY+0x2d8>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: 4c 89 e7                      movq    %r12, %rdi
// 186: ff d0                         callq   *%rax
// 188: e9 4b 01 00 00                jmp     0x2d8 <_JIT_ENTRY+0x2d8>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: 4c 89 ef                      movq    %r13, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 49 8b 04 24                   movq    (%r12), %rax
// 1a0: 48 85 c0                      testq   %rax, %rax
// 1a3: 0f 8f 2a ff ff ff             jg      0xd3 <_JIT_ENTRY+0xd3>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 49 8b 04 24                   movq    (%r12), %rax
// 1cb: 85 c0                         testl   %eax, %eax
// 1cd: 78 16                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 49 ff 0c 24                   decq    (%r12)
// 1df: 0f 84 dc 00 00 00             je      0x2c1 <_JIT_ENTRY+0x2c1>
// 1e5: 85 ed                         testl   %ebp, %ebp
// 1e7: 0f 88 eb 00 00 00             js      0x2d8 <_JIT_ENTRY+0x2d8>
// 1ed: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1f2: 48 85 ff                      testq   %rdi, %rdi
// 1f5: 0f 84 dd 00 00 00             je      0x2d8 <_JIT_ENTRY+0x2d8>
// 1fb: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001fd:  R_X86_64_64  _Py_NoneStruct
// 205: 4c 39 e7                      cmpq    %r12, %rdi
// 208: 74 11                         je      0x21b <_JIT_ENTRY+0x21b>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyErr_SetHandledException
// 214: ff d0                         callq   *%rax
// 216: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 21b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 220: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 224: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 228: 49 8b 04 24                   movq    (%r12), %rax
// 22c: 48 85 c0                      testq   %rax, %rax
// 22f: 7f 22                         jg      0x253 <_JIT_ENTRY+0x253>
// 231: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000233:  R_X86_64_64  .rodata.str1.1
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_NegativeRefcount
// 245: be d9 09 00 00                movl    $0x9d9, %esi            # imm = 0x9D9
// 24a: 4c 89 e2                      movq    %r12, %rdx
// 24d: ff d0                         callq   *%rax
// 24f: 49 8b 04 24                   movq    (%r12), %rax
// 253: 85 c0                         testl   %eax, %eax
// 255: 78 21                         js      0x278 <_JIT_ENTRY+0x278>
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 261: ff d0                         callq   *%rax
// 263: 49 ff 0c 24                   decq    (%r12)
// 267: 75 0f                         jne     0x278 <_JIT_ENTRY+0x278>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_Dealloc
// 273: 4c 89 e7                      movq    %r12, %rdi
// 276: ff d0                         callq   *%rax
// 278: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000027a:  R_X86_64_64  _JIT_OPERAND
// 282: 41 8b 04 24                   movl    (%r12), %eax
// 286: ff c0                         incl    %eax
// 288: 74 10                         je      0x29a <_JIT_ENTRY+0x29a>
// 28a: 41 89 04 24                   movl    %eax, (%r12)
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 298: ff d0                         callq   *%rax
// 29a: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _JIT_CONTINUE
// 2a8: 4c 89 f7                      movq    %r14, %rdi
// 2ab: 48 89 de                      movq    %rbx, %rsi
// 2ae: 4c 89 fa                      movq    %r15, %rdx
// 2b1: 48 83 c4 18                   addq    $0x18, %rsp
// 2b5: 5b                            popq    %rbx
// 2b6: 41 5c                         popq    %r12
// 2b8: 41 5d                         popq    %r13
// 2ba: 41 5e                         popq    %r14
// 2bc: 41 5f                         popq    %r15
// 2be: 5d                            popq    %rbp
// 2bf: ff e0                         jmpq    *%rax
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  _Py_Dealloc
// 2cb: 4c 89 e7                      movq    %r12, %rdi
// 2ce: ff d0                         callq   *%rax
// 2d0: 85 ed                         testl   %ebp, %ebp
// 2d2: 0f 89 15 ff ff ff             jns     0x1ed <_JIT_ENTRY+0x1ed>
// 2d8: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2dc: 4c 29 f3                      subq    %r14, %rbx
// 2df: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2e3: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2e7: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2eb: 31 c0                         xorl    %eax, %eax
// 2ed: 48 83 c4 18                   addq    $0x18, %rsp
// 2f1: 5b                            popq    %rbx
// 2f2: 41 5c                         popq    %r12
// 2f4: 41 5d                         popq    %r13
// 2f6: 41 5e                         popq    %r14
// 2f8: 41 5f                         popq    %r15
// 2fa: 5d                            popq    %rbp
// 2fb: c3                            retq
// 2fc: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_body[765] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0x9f, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x75, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x5f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x4b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xdc, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xeb, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xdd, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd9, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x15, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_holes[28] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 63                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 81 00 00 00             jns     0x106 <_JIT_ENTRY+0x106>
// 85: e9 9d 00 00 00                jmp     0x127 <_JIT_ENTRY+0x127>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c7 00 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// c6: 49 8b 04 24                   movq    (%r12), %rax
// ca: 48 85 c0                      testq   %rax, %rax
// cd: 0f 8e d6 00 00 00             jle     0x1a9 <_JIT_ENTRY+0x1a9>
// d3: 85 c0                         testl   %eax, %eax
// d5: 0f 89 f4 00 00 00             jns     0x1cf <_JIT_ENTRY+0x1cf>
// db: e9 05 01 00 00                jmp     0x1e5 <_JIT_ENTRY+0x1e5>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f9: 4c 89 ea                      movq    %r13, %rdx
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 21                         js      0x127 <_JIT_ENTRY+0x127>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 4d 00                   decq    (%r13)
// 116: 75 0f                         jne     0x127 <_JIT_ENTRY+0x127>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_Dealloc
// 122: 4c 89 ef                      movq    %r13, %rdi
// 125: ff d0                         callq   *%rax
// 127: 49 8b 04 24                   movq    (%r12), %rax
// 12b: 48 85 c0                      testq   %rax, %rax
// 12e: 7e 09                         jle     0x139 <_JIT_ENTRY+0x139>
// 130: 85 c0                         testl   %eax, %eax
// 132: 79 2f                         jns     0x163 <_JIT_ENTRY+0x163>
// 134: e9 9f 01 00 00                jmp     0x2d8 <_JIT_ENTRY+0x2d8>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_NegativeRefcount
// 14d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 152: 4c 89 e2                      movq    %r12, %rdx
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 75 01 00 00             js      0x2d8 <_JIT_ENTRY+0x2d8>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 5f 01 00 00             jne     0x2d8 <_JIT_ENTRY+0x2d8>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: 4c 89 e7                      movq    %r12, %rdi
// 186: ff d0                         callq   *%rax
// 188: e9 4b 01 00 00                jmp     0x2d8 <_JIT_ENTRY+0x2d8>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: 4c 89 ef                      movq    %r13, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 49 8b 04 24                   movq    (%r12), %rax
// 1a0: 48 85 c0                      testq   %rax, %rax
// 1a3: 0f 8f 2a ff ff ff             jg      0xd3 <_JIT_ENTRY+0xd3>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 49 8b 04 24                   movq    (%r12), %rax
// 1cb: 85 c0                         testl   %eax, %eax
// 1cd: 78 16                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 49 ff 0c 24                   decq    (%r12)
// 1df: 0f 84 dc 00 00 00             je      0x2c1 <_JIT_ENTRY+0x2c1>
// 1e5: 85 ed                         testl   %ebp, %ebp
// 1e7: 0f 88 eb 00 00 00             js      0x2d8 <_JIT_ENTRY+0x2d8>
// 1ed: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1f2: 48 85 ff                      testq   %rdi, %rdi
// 1f5: 0f 84 dd 00 00 00             je      0x2d8 <_JIT_ENTRY+0x2d8>
// 1fb: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001fd:  R_X86_64_64  _Py_NoneStruct
// 205: 4c 39 e7                      cmpq    %r12, %rdi
// 208: 74 11                         je      0x21b <_JIT_ENTRY+0x21b>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyErr_SetHandledException
// 214: ff d0                         callq   *%rax
// 216: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 21b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 220: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 224: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 228: 49 8b 04 24                   movq    (%r12), %rax
// 22c: 48 85 c0                      testq   %rax, %rax
// 22f: 7f 22                         jg      0x253 <_JIT_ENTRY+0x253>
// 231: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000233:  R_X86_64_64  .rodata.str1.1
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_NegativeRefcount
// 245: be c8 09 00 00                movl    $0x9c8, %esi            # imm = 0x9C8
// 24a: 4c 89 e2                      movq    %r12, %rdx
// 24d: ff d0                         callq   *%rax
// 24f: 49 8b 04 24                   movq    (%r12), %rax
// 253: 85 c0                         testl   %eax, %eax
// 255: 78 21                         js      0x278 <_JIT_ENTRY+0x278>
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 261: ff d0                         callq   *%rax
// 263: 49 ff 0c 24                   decq    (%r12)
// 267: 75 0f                         jne     0x278 <_JIT_ENTRY+0x278>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_Dealloc
// 273: 4c 89 e7                      movq    %r12, %rdi
// 276: ff d0                         callq   *%rax
// 278: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000027a:  R_X86_64_64  _JIT_OPERAND
// 282: 41 8b 04 24                   movl    (%r12), %eax
// 286: ff c0                         incl    %eax
// 288: 74 10                         je      0x29a <_JIT_ENTRY+0x29a>
// 28a: 41 89 04 24                   movl    %eax, (%r12)
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 298: ff d0                         callq   *%rax
// 29a: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _JIT_CONTINUE
// 2a8: 4c 89 f7                      movq    %r14, %rdi
// 2ab: 48 89 de                      movq    %rbx, %rsi
// 2ae: 4c 89 fa                      movq    %r15, %rdx
// 2b1: 48 83 c4 18                   addq    $0x18, %rsp
// 2b5: 5b                            popq    %rbx
// 2b6: 41 5c                         popq    %r12
// 2b8: 41 5d                         popq    %r13
// 2ba: 41 5e                         popq    %r14
// 2bc: 41 5f                         popq    %r15
// 2be: 5d                            popq    %rbp
// 2bf: ff e0                         jmpq    *%rax
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  _Py_Dealloc
// 2cb: 4c 89 e7                      movq    %r12, %rdi
// 2ce: ff d0                         callq   *%rax
// 2d0: 85 ed                         testl   %ebp, %ebp
// 2d2: 0f 89 15 ff ff ff             jns     0x1ed <_JIT_ENTRY+0x1ed>
// 2d8: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2dc: 4c 29 f3                      subq    %r14, %rbx
// 2df: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2e3: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2e7: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2eb: 31 c0                         xorl    %eax, %eax
// 2ed: 48 83 c4 18                   addq    $0x18, %rsp
// 2f1: 5b                            popq    %rbx
// 2f2: 41 5c                         popq    %r12
// 2f4: 41 5d                         popq    %r13
// 2f6: 41 5e                         popq    %r14
// 2f8: 41 5f                         popq    %r15
// 2fa: 5d                            popq    %rbp
// 2fb: c3                            retq
// 2fc: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_body[765] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0x9f, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x75, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x5f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x4b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xdc, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xeb, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xdd, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc8, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x15, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_holes[28] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_ATTR_SLOT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_ATTR_SLOT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 a6 00 00 00                jmp     0x17a <_JIT_ENTRY+0x17a>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 ca 01 00 00             je      0x2da <_JIT_ENTRY+0x2da>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e d9 01 00 00             jle     0x2f6 <_JIT_ENTRY+0x2f6>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 f7 01 00 00             jns     0x31c <_JIT_ENTRY+0x31c>
// 125: e9 13 02 00 00                jmp     0x33d <_JIT_ENTRY+0x33d>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 12                         js      0x17a <_JIT_ENTRY+0x17a>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 74 77                         je      0x1f1 <_JIT_ENTRY+0x1f1>
// 17a: 85 ed                         testl   %ebp, %ebp
// 17c: 0f 88 bb 01 00 00             js      0x33d <_JIT_ENTRY+0x33d>
// 182: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 187: 48 85 ff                      testq   %rdi, %rdi
// 18a: 0f 84 ad 01 00 00             je      0x33d <_JIT_ENTRY+0x33d>
// 190: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000192:  R_X86_64_64  _Py_NoneStruct
// 19a: 4c 39 e7                      cmpq    %r12, %rdi
// 19d: 74 11                         je      0x1b0 <_JIT_ENTRY+0x1b0>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  PyErr_SetHandledException
// 1a9: ff d0                         callq   *%rax
// 1ab: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 1b0: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b5: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 1b9: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _JIT_OPERAND
// 1c7: 0f b7 c0                      movzwl  %ax, %eax
// 1ca: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// 1ce: 4d 85 ed                      testq   %r13, %r13
// 1d1: 74 3a                         je      0x20d <_JIT_ENTRY+0x20d>
// 1d3: 41 8b 45 00                   movl    (%r13), %eax
// 1d7: ff c0                         incl    %eax
// 1d9: 75 5f                         jne     0x23a <_JIT_ENTRY+0x23a>
// 1db: 49 8b 04 24                   movq    (%r12), %rax
// 1df: 48 85 c0                      testq   %rax, %rax
// 1e2: 7e 6f                         jle     0x253 <_JIT_ENTRY+0x253>
// 1e4: 85 c0                         testl   %eax, %eax
// 1e6: 0f 89 8d 00 00 00             jns     0x279 <_JIT_ENTRY+0x279>
// 1ec: e9 a9 00 00 00                jmp     0x29a <_JIT_ENTRY+0x29a>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_Dealloc
// 1fb: 4c 89 e7                      movq    %r12, %rdi
// 1fe: ff d0                         callq   *%rax
// 200: 85 ed                         testl   %ebp, %ebp
// 202: 0f 89 7a ff ff ff             jns     0x182 <_JIT_ENTRY+0x182>
// 208: e9 30 01 00 00                jmp     0x33d <_JIT_ENTRY+0x33d>
// 20d: 49 29 de                      subq    %rbx, %r14
// 210: 49 83 c6 b8                   addq    $-0x48, %r14
// 214: 49 c1 ee 03                   shrq    $0x3, %r14
// 218: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 21c: 48 8b 03                      movq    (%rbx), %rax
// 21f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000221:  R_X86_64_64  _JIT_TARGET
// 229: 89 c9                         movl    %ecx, %ecx
// 22b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 22f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 235: e9 18 01 00 00                jmp     0x352 <_JIT_ENTRY+0x352>
// 23a: 41 89 45 00                   movl    %eax, (%r13)
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 248: ff d0                         callq   *%rax
// 24a: 49 8b 04 24                   movq    (%r12), %rax
// 24e: 48 85 c0                      testq   %rax, %rax
// 251: 7f 91                         jg      0x1e4 <_JIT_ENTRY+0x1e4>
// 253: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000255:  R_X86_64_64  .rodata.str1.1
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _Py_NegativeRefcount
// 267: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 26c: 4c 89 e2                      movq    %r12, %rdx
// 26f: ff d0                         callq   *%rax
// 271: 49 8b 04 24                   movq    (%r12), %rax
// 275: 85 c0                         testl   %eax, %eax
// 277: 78 21                         js      0x29a <_JIT_ENTRY+0x29a>
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 283: ff d0                         callq   *%rax
// 285: 49 ff 0c 24                   decq    (%r12)
// 289: 75 0f                         jne     0x29a <_JIT_ENTRY+0x29a>
// 28b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028d:  R_X86_64_64  _Py_Dealloc
// 295: 4c 89 e7                      movq    %r12, %rdi
// 298: ff d0                         callq   *%rax
// 29a: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _JIT_OPARG
// 2a8: a8 01                         testb   $0x1, %al
// 2aa: 74 07                         je      0x2b3 <_JIT_ENTRY+0x2b3>
// 2ac: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 2b3: 83 e0 01                      andl    $0x1, %eax
// 2b6: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _JIT_CONTINUE
// 2c4: 48 89 df                      movq    %rbx, %rdi
// 2c7: 4c 89 fa                      movq    %r15, %rdx
// 2ca: 48 83 c4 18                   addq    $0x18, %rsp
// 2ce: 5b                            popq    %rbx
// 2cf: 41 5c                         popq    %r12
// 2d1: 41 5d                         popq    %r13
// 2d3: 41 5e                         popq    %r14
// 2d5: 41 5f                         popq    %r15
// 2d7: 5d                            popq    %rbp
// 2d8: ff e0                         jmpq    *%rax
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  _Py_Dealloc
// 2e4: 4c 89 ef                      movq    %r13, %rdi
// 2e7: ff d0                         callq   *%rax
// 2e9: 49 8b 04 24                   movq    (%r12), %rax
// 2ed: 48 85 c0                      testq   %rax, %rax
// 2f0: 0f 8f 27 fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 2f6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f8:  R_X86_64_64  .rodata.str1.1
// 300: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000302:  R_X86_64_64  _Py_NegativeRefcount
// 30a: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 30f: 4c 89 e2                      movq    %r12, %rdx
// 312: ff d0                         callq   *%rax
// 314: 49 8b 04 24                   movq    (%r12), %rax
// 318: 85 c0                         testl   %eax, %eax
// 31a: 78 21                         js      0x33d <_JIT_ENTRY+0x33d>
// 31c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 326: ff d0                         callq   *%rax
// 328: 49 ff 0c 24                   decq    (%r12)
// 32c: 75 0f                         jne     0x33d <_JIT_ENTRY+0x33d>
// 32e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000330:  R_X86_64_64  _Py_Dealloc
// 338: 4c 89 e7                      movq    %r12, %rdi
// 33b: ff d0                         callq   *%rax
// 33d: 49 83 c6 f0                   addq    $-0x10, %r14
// 341: 49 29 de                      subq    %rbx, %r14
// 344: 49 83 c6 b8                   addq    $-0x48, %r14
// 348: 49 c1 ee 03                   shrq    $0x3, %r14
// 34c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 350: 31 c0                         xorl    %eax, %eax
// 352: 48 83 c4 18                   addq    $0x18, %rsp
// 356: 5b                            popq    %rbx
// 357: 41 5c                         popq    %r12
// 359: 41 5d                         popq    %r13
// 35b: 41 5e                         popq    %r14
// 35d: 41 5f                         popq    %r15
// 35f: 5d                            popq    %rbp
// 360: c3                            retq
// 361: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ATTR_SLOT_code_body[866] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xca, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd9, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf7, 0x01, 0x00, 0x00, 0xe9, 0x13, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x77, 0x85, 0xed, 0x0f, 0x88, 0xbb, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xad, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x89, 0x46, 0xf0, 0x4d, 0x89, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x3a, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x5f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x6f, 0x85, 0xc0, 0x0f, 0x89, 0x8d, 0x00, 0x00, 0x00, 0xe9, 0xa9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x7a, 0xff, 0xff, 0xff, 0xe9, 0x30, 0x01, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x18, 0x01, 0x00, 0x00, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x91, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x27, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_LOAD_ATTR_SLOT_code_holes[30] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x31e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x330, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ATTR_SLOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_ATTR_SLOT_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_ATTR_WITH_HINT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_ATTR_WITH_HINT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 66 01 00 00             je      0x276 <_JIT_ENTRY+0x276>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 75 01 00 00             jle     0x292 <_JIT_ENTRY+0x292>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 93 01 00 00             jns     0x2b8 <_JIT_ENTRY+0x2b8>
// 125: e9 af 01 00 00                jmp     0x2d9 <_JIT_ENTRY+0x2d9>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 df 00 00 00             je      0x25d <_JIT_ENTRY+0x25d>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 53 01 00 00             js      0x2d9 <_JIT_ENTRY+0x2d9>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 45 01 00 00             je      0x2d9 <_JIT_ENTRY+0x2d9>
// 194: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 4c 39 e7                      cmpq    %r12, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 1b4: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b9: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 1bd: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 1c1: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 1c6: 48 8b 50 20                   movq    0x20(%rax), %rdx
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _JIT_OPERAND
// 1d4: 0f b7 c8                      movzwl  %ax, %ecx
// 1d7: 48 8b 03                      movq    (%rbx), %rax
// 1da: 48 39 4a 18                   cmpq    %rcx, 0x18(%rdx)
// 1de: 0f 86 17 01 00 00             jbe     0x2fb <_JIT_ENTRY+0x2fb>
// 1e4: 48 8b 70 20                   movq    0x20(%rax), %rsi
// 1e8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ea:  R_X86_64_64  _JIT_OPARG
// 1f2: 81 e7 fe ff 00 00             andl    $0xfffe, %edi           # imm = 0xFFFE
// 1f8: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
// 1fc: 41 b8 01 00 00 00             movl    $0x1, %r8d
// 202: 49 d3 e0                      shlq    %cl, %r8
// 205: 48 8b 74 be 18                movq    0x18(%rsi,%rdi,4), %rsi
// 20a: 80 7a 0a 00                   cmpb    $0x0, 0xa(%rdx)
// 20e: 4a 8d 4c 02 20                leaq    0x20(%rdx,%r8), %rcx
// 213: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000215:  R_X86_64_64  _JIT_OPERAND
// 21d: 0f b7 d2                      movzwl  %dx, %edx
// 220: 0f 84 ca 00 00 00             je      0x2f0 <_JIT_ENTRY+0x2f0>
// 226: 48 c1 e2 04                   shlq    $0x4, %rdx
// 22a: 48 39 34 11                   cmpq    %rsi, (%rcx,%rdx)
// 22e: 0f 85 c7 00 00 00             jne     0x2fb <_JIT_ENTRY+0x2fb>
// 234: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000236:  R_X86_64_64  _JIT_OPERAND
// 23e: 0f b7 d2                      movzwl  %dx, %edx
// 241: 48 c1 e2 04                   shlq    $0x4, %rdx
// 245: 48 01 d1                      addq    %rdx, %rcx
// 248: 48 83 c1 08                   addq    $0x8, %rcx
// 24c: 4c 8b 29                      movq    (%rcx), %r13
// 24f: 4d 85 ed                      testq   %r13, %r13
// 252: 0f 85 f8 00 00 00             jne     0x350 <_JIT_ENTRY+0x350>
// 258: e9 9e 00 00 00                jmp     0x2fb <_JIT_ENTRY+0x2fb>
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _Py_Dealloc
// 267: 4c 89 e7                      movq    %r12, %rdi
// 26a: ff d0                         callq   *%rax
// 26c: 85 ed                         testl   %ebp, %ebp
// 26e: 0f 89 12 ff ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 274: eb 63                         jmp     0x2d9 <_JIT_ENTRY+0x2d9>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_Dealloc
// 280: 4c 89 ef                      movq    %r13, %rdi
// 283: ff d0                         callq   *%rax
// 285: 49 8b 04 24                   movq    (%r12), %rax
// 289: 48 85 c0                      testq   %rax, %rax
// 28c: 0f 8f 8b fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 292: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000294:  R_X86_64_64  .rodata.str1.1
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _Py_NegativeRefcount
// 2a6: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2ab: 4c 89 e2                      movq    %r12, %rdx
// 2ae: ff d0                         callq   *%rax
// 2b0: 49 8b 04 24                   movq    (%r12), %rax
// 2b4: 85 c0                         testl   %eax, %eax
// 2b6: 78 21                         js      0x2d9 <_JIT_ENTRY+0x2d9>
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c2: ff d0                         callq   *%rax
// 2c4: 49 ff 0c 24                   decq    (%r12)
// 2c8: 75 0f                         jne     0x2d9 <_JIT_ENTRY+0x2d9>
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  _Py_Dealloc
// 2d4: 4c 89 e7                      movq    %r12, %rdi
// 2d7: ff d0                         callq   *%rax
// 2d9: 49 83 c6 f0                   addq    $-0x10, %r14
// 2dd: 49 29 de                      subq    %rbx, %r14
// 2e0: 49 83 c6 b8                   addq    $-0x48, %r14
// 2e4: 49 c1 ee 03                   shrq    $0x3, %r14
// 2e8: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2ec: 31 c0                         xorl    %eax, %eax
// 2ee: eb 30                         jmp     0x320 <_JIT_ENTRY+0x320>
// 2f0: 48 8d 14 52                   leaq    (%rdx,%rdx,2), %rdx
// 2f4: 48 39 74 d1 08                cmpq    %rsi, 0x8(%rcx,%rdx,8)
// 2f9: 74 34                         je      0x32f <_JIT_ENTRY+0x32f>
// 2fb: 49 29 de                      subq    %rbx, %r14
// 2fe: 49 83 c6 b8                   addq    $-0x48, %r14
// 302: 49 c1 ee 03                   shrq    $0x3, %r14
// 306: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 30a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000030c:  R_X86_64_64  _JIT_TARGET
// 314: 89 c9                         movl    %ecx, %ecx
// 316: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 31a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 320: 48 83 c4 18                   addq    $0x18, %rsp
// 324: 5b                            popq    %rbx
// 325: 41 5c                         popq    %r12
// 327: 41 5d                         popq    %r13
// 329: 41 5e                         popq    %r14
// 32b: 41 5f                         popq    %r15
// 32d: 5d                            popq    %rbp
// 32e: c3                            retq
// 32f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000331:  R_X86_64_64  _JIT_OPERAND
// 339: 0f b7 d2                      movzwl  %dx, %edx
// 33c: 48 8d 14 52                   leaq    (%rdx,%rdx,2), %rdx
// 340: 48 8d 0c d1                   leaq    (%rcx,%rdx,8), %rcx
// 344: 48 83 c1 10                   addq    $0x10, %rcx
// 348: 4c 8b 29                      movq    (%rcx), %r13
// 34b: 4d 85 ed                      testq   %r13, %r13
// 34e: 74 ab                         je      0x2fb <_JIT_ENTRY+0x2fb>
// 350: 41 8b 45 00                   movl    (%r13), %eax
// 354: ff c0                         incl    %eax
// 356: 75 0f                         jne     0x367 <_JIT_ENTRY+0x367>
// 358: 49 8b 04 24                   movq    (%r12), %rax
// 35c: 48 85 c0                      testq   %rax, %rax
// 35f: 7e 1f                         jle     0x380 <_JIT_ENTRY+0x380>
// 361: 85 c0                         testl   %eax, %eax
// 363: 79 41                         jns     0x3a6 <_JIT_ENTRY+0x3a6>
// 365: eb 60                         jmp     0x3c7 <_JIT_ENTRY+0x3c7>
// 367: 41 89 45 00                   movl    %eax, (%r13)
// 36b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 375: ff d0                         callq   *%rax
// 377: 49 8b 04 24                   movq    (%r12), %rax
// 37b: 48 85 c0                      testq   %rax, %rax
// 37e: 7f e1                         jg      0x361 <_JIT_ENTRY+0x361>
// 380: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000382:  R_X86_64_64  .rodata.str1.1
// 38a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038c:  R_X86_64_64  _Py_NegativeRefcount
// 394: be c3 06 00 00                movl    $0x6c3, %esi            # imm = 0x6C3
// 399: 4c 89 e2                      movq    %r12, %rdx
// 39c: ff d0                         callq   *%rax
// 39e: 49 8b 04 24                   movq    (%r12), %rax
// 3a2: 85 c0                         testl   %eax, %eax
// 3a4: 78 21                         js      0x3c7 <_JIT_ENTRY+0x3c7>
// 3a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3b0: ff d0                         callq   *%rax
// 3b2: 49 ff 0c 24                   decq    (%r12)
// 3b6: 75 0f                         jne     0x3c7 <_JIT_ENTRY+0x3c7>
// 3b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ba:  R_X86_64_64  _Py_Dealloc
// 3c2: 4c 89 e7                      movq    %r12, %rdi
// 3c5: ff d0                         callq   *%rax
// 3c7: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 3cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003cd:  R_X86_64_64  _JIT_OPARG
// 3d5: a8 01                         testb   $0x1, %al
// 3d7: 74 07                         je      0x3e0 <_JIT_ENTRY+0x3e0>
// 3d9: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 3e0: 83 e0 01                      andl    $0x1, %eax
// 3e3: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 3e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e9:  R_X86_64_64  _JIT_CONTINUE
// 3f1: 48 89 df                      movq    %rbx, %rdi
// 3f4: 4c 89 fa                      movq    %r15, %rdx
// 3f7: 48 83 c4 18                   addq    $0x18, %rsp
// 3fb: 5b                            popq    %rbx
// 3fc: 41 5c                         popq    %r12
// 3fe: 41 5d                         popq    %r13
// 400: 41 5e                         popq    %r14
// 402: 41 5f                         popq    %r15
// 404: 5d                            popq    %rbp
// 405: ff e0                         jmpq    *%rax
// 407: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ATTR_WITH_HINT_code_body[1032] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x66, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x75, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x93, 0x01, 0x00, 0x00, 0xe9, 0xaf, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xdf, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x53, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x45, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x89, 0x46, 0xf0, 0x4d, 0x89, 0x66, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0x8b, 0x50, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0x8b, 0x03, 0x48, 0x39, 0x4a, 0x18, 0x0f, 0x86, 0x17, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x70, 0x20, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe7, 0xfe, 0xff, 0x00, 0x00, 0x0f, 0xb6, 0x4a, 0x09, 0x41, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x49, 0xd3, 0xe0, 0x48, 0x8b, 0x74, 0xbe, 0x18, 0x80, 0x7a, 0x0a, 0x00, 0x4a, 0x8d, 0x4c, 0x02, 0x20, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x0f, 0x84, 0xca, 0x00, 0x00, 0x00, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0x39, 0x34, 0x11, 0x0f, 0x85, 0xc7, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0x01, 0xd1, 0x48, 0x83, 0xc1, 0x08, 0x4c, 0x8b, 0x29, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0xf8, 0x00, 0x00, 0x00, 0xe9, 0x9e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x12, 0xff, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x8b, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x30, 0x48, 0x8d, 0x14, 0x52, 0x48, 0x39, 0x74, 0xd1, 0x08, 0x74, 0x34, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x48, 0x8d, 0x14, 0x52, 0x48, 0x8d, 0x0c, 0xd1, 0x48, 0x83, 0xc1, 0x10, 0x4c, 0x8b, 0x29, 0x4d, 0x85, 0xed, 0x74, 0xab, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x60, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_LOAD_ATTR_WITH_HINT_code_holes[34] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x331, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x36d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x382, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x38c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3cd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x3e9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_ATTR_WITH_HINT_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_BUILD_CLASS
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_BUILD_CLASS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 3e: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 10                leaq    0x10(%rsp), %rdx
// 56: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 2c 01 00 00             je      0x23b <_JIT_ENTRY+0x23b>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 3b 01 00 00             jle     0x256 <_JIT_ENTRY+0x256>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 58 01 00 00             jns     0x27b <_JIT_ENTRY+0x27b>
// 123: e9 73 01 00 00                jmp     0x29b <_JIT_ENTRY+0x29b>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 a9 00 00 00             je      0x222 <_JIT_ENTRY+0x222>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 1a 01 00 00             js      0x29b <_JIT_ENTRY+0x29b>
// 181: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 0c 01 00 00             je      0x29b <_JIT_ENTRY+0x29b>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1af: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  PyMapping_GetOptionalItem
// 1ca: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001cc:  R_X86_64_64  _PyRuntime
// 1d4: 48 81 c6 40 a9 00 00          addq    $0xa940, %rsi           # imm = 0xA940
// 1db: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1e0: ff d0                         callq   *%rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 0f 88 b5 00 00 00             js      0x29f <_JIT_ENTRY+0x29f>
// 1ea: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1ef: 48 85 c0                      testq   %rax, %rax
// 1f2: 0f 84 c7 00 00 00             je      0x2bf <_JIT_ENTRY+0x2bf>
// 1f8: 48 89 03                      movq    %rax, (%rbx)
// 1fb: 48 83 c3 08                   addq    $0x8, %rbx
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _JIT_CONTINUE
// 209: 4c 89 f7                      movq    %r14, %rdi
// 20c: 48 89 de                      movq    %rbx, %rsi
// 20f: 4c 89 e2                      movq    %r12, %rdx
// 212: 48 83 c4 18                   addq    $0x18, %rsp
// 216: 5b                            popq    %rbx
// 217: 41 5c                         popq    %r12
// 219: 41 5d                         popq    %r13
// 21b: 41 5e                         popq    %r14
// 21d: 41 5f                         popq    %r15
// 21f: 5d                            popq    %rbp
// 220: ff e0                         jmpq    *%rax
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_Dealloc
// 22c: 4c 89 ff                      movq    %r15, %rdi
// 22f: ff d0                         callq   *%rax
// 231: 85 ed                         testl   %ebp, %ebp
// 233: 0f 89 48 ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 239: eb 60                         jmp     0x29b <_JIT_ENTRY+0x29b>
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: 4c 89 ef                      movq    %r13, %rdi
// 248: ff d0                         callq   *%rax
// 24a: 49 8b 07                      movq    (%r15), %rax
// 24d: 48 85 c0                      testq   %rax, %rax
// 250: 0f 8f c5 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 256: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000258:  R_X86_64_64  .rodata.str1.1
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _Py_NegativeRefcount
// 26a: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 26f: 4c 89 fa                      movq    %r15, %rdx
// 272: ff d0                         callq   *%rax
// 274: 49 8b 07                      movq    (%r15), %rax
// 277: 85 c0                         testl   %eax, %eax
// 279: 78 20                         js      0x29b <_JIT_ENTRY+0x29b>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 285: ff d0                         callq   *%rax
// 287: 49 ff 0f                      decq    (%r15)
// 28a: 75 0f                         jne     0x29b <_JIT_ENTRY+0x29b>
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _Py_Dealloc
// 296: 4c 89 ff                      movq    %r15, %rdi
// 299: ff d0                         callq   *%rax
// 29b: 48 83 c3 f0                   addq    $-0x10, %rbx
// 29f: 4c 29 f3                      subq    %r14, %rbx
// 2a2: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2a6: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2aa: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2ae: 31 c0                         xorl    %eax, %eax
// 2b0: 48 83 c4 18                   addq    $0x18, %rsp
// 2b4: 5b                            popq    %rbx
// 2b5: 41 5c                         popq    %r12
// 2b7: 41 5d                         popq    %r13
// 2b9: 41 5e                         popq    %r14
// 2bb: 41 5f                         popq    %r15
// 2bd: 5d                            popq    %rbp
// 2be: c3                            retq
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  PyExc_NameError
// 2c9: 48 8b 30                      movq    (%rax), %rsi
// 2cc: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002ce:  R_X86_64_64  .rodata.str1.1+0x39
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  _PyErr_SetString
// 2e0: 4c 89 e7                      movq    %r12, %rdi
// 2e3: ff d0                         callq   *%rax
// 2e5: eb b8                         jmp     0x29f <_JIT_ENTRY+0x29f>
// 2e7: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_BUILD_CLASS_code_body[744] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x10, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x2c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x3b, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x58, 0x01, 0x00, 0x00, 0xe9, 0x73, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x1a, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x0c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc6, 0x40, 0xa9, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xb5, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x48, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xc5, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0xb8};
static const Hole _CHECK_EG_MATCHplus_LOAD_BUILD_CLASS_code_holes[27] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__build_class__ not found\x00'
// 53: 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_BUILD_CLASS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x5f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_BUILD_CLASS_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_CONST
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_CONST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 1f 01 00 00             je      0x22e <_JIT_ENTRY+0x22e>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 2e 01 00 00             jle     0x249 <_JIT_ENTRY+0x249>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 4b 01 00 00             jns     0x26e <_JIT_ENTRY+0x26e>
// 123: e9 66 01 00 00                jmp     0x28e <_JIT_ENTRY+0x28e>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 9c 00 00 00             je      0x215 <_JIT_ENTRY+0x215>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 0d 01 00 00             js      0x28e <_JIT_ENTRY+0x28e>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 ff 00 00 00             je      0x28e <_JIT_ENTRY+0x28e>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 49 8b 06                      movq    (%r14), %rax
// 1bf: 48 8b 40 18                   movq    0x18(%rax), %rax
// 1c3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c5:  R_X86_64_64  _JIT_OPARG
// 1cd: 0f b7 c9                      movzwl  %cx, %ecx
// 1d0: 4c 8b 7c c8 18                movq    0x18(%rax,%rcx,8), %r15
// 1d5: 41 8b 07                      movl    (%r15), %eax
// 1d8: ff c0                         incl    %eax
// 1da: 74 0f                         je      0x1eb <_JIT_ENTRY+0x1eb>
// 1dc: 41 89 07                      movl    %eax, (%r15)
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1e9: ff d0                         callq   *%rax
// 1eb: 4c 89 3b                      movq    %r15, (%rbx)
// 1ee: 48 83 c3 08                   addq    $0x8, %rbx
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _JIT_CONTINUE
// 1fc: 4c 89 f7                      movq    %r14, %rdi
// 1ff: 48 89 de                      movq    %rbx, %rsi
// 202: 4c 89 e2                      movq    %r12, %rdx
// 205: 48 83 c4 18                   addq    $0x18, %rsp
// 209: 5b                            popq    %rbx
// 20a: 41 5c                         popq    %r12
// 20c: 41 5d                         popq    %r13
// 20e: 41 5e                         popq    %r14
// 210: 41 5f                         popq    %r15
// 212: 5d                            popq    %rbp
// 213: ff e0                         jmpq    *%rax
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _Py_Dealloc
// 21f: 4c 89 ff                      movq    %r15, %rdi
// 222: ff d0                         callq   *%rax
// 224: 85 ed                         testl   %ebp, %ebp
// 226: 0f 89 55 ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 22c: eb 60                         jmp     0x28e <_JIT_ENTRY+0x28e>
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _Py_Dealloc
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: ff d0                         callq   *%rax
// 23d: 49 8b 07                      movq    (%r15), %rax
// 240: 48 85 c0                      testq   %rax, %rax
// 243: 0f 8f d2 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 249: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024b:  R_X86_64_64  .rodata.str1.1
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  _Py_NegativeRefcount
// 25d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 262: 4c 89 fa                      movq    %r15, %rdx
// 265: ff d0                         callq   *%rax
// 267: 49 8b 07                      movq    (%r15), %rax
// 26a: 85 c0                         testl   %eax, %eax
// 26c: 78 20                         js      0x28e <_JIT_ENTRY+0x28e>
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 278: ff d0                         callq   *%rax
// 27a: 49 ff 0f                      decq    (%r15)
// 27d: 75 0f                         jne     0x28e <_JIT_ENTRY+0x28e>
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_Dealloc
// 289: 4c 89 ff                      movq    %r15, %rdi
// 28c: ff d0                         callq   *%rax
// 28e: 48 83 c3 f0                   addq    $-0x10, %rbx
// 292: 4c 29 f3                      subq    %r14, %rbx
// 295: 48 83 c3 b8                   addq    $-0x48, %rbx
// 299: 48 c1 eb 03                   shrq    $0x3, %rbx
// 29d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2a1: 31 c0                         xorl    %eax, %eax
// 2a3: 48 83 c4 18                   addq    $0x18, %rsp
// 2a7: 5b                            popq    %rbx
// 2a8: 41 5c                         popq    %r12
// 2aa: 41 5d                         popq    %r13
// 2ac: 41 5e                         popq    %r14
// 2ae: 41 5f                         popq    %r15
// 2b0: 5d                            popq    %rbp
// 2b1: c3                            retq
// 2b2: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_CONST_code_body[691] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x1f, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x2e, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x4b, 0x01, 0x00, 0x00, 0xe9, 0x66, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x9c, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x0d, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xff, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x7c, 0xc8, 0x18, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x55, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xd2, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_LOAD_CONST_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_CONST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_CONST_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_DEREF
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_DEREF.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 45 01 00 00             je      0x254 <_JIT_ENTRY+0x254>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 54 01 00 00             jle     0x26f <_JIT_ENTRY+0x26f>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 71 01 00 00             jns     0x294 <_JIT_ENTRY+0x294>
// 123: e9 8c 01 00 00                jmp     0x2b4 <_JIT_ENTRY+0x2b4>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 9e 00 00 00             je      0x217 <_JIT_ENTRY+0x217>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 33 01 00 00             js      0x2b4 <_JIT_ENTRY+0x2b4>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 25 01 00 00             je      0x2b4 <_JIT_ENTRY+0x2b4>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _JIT_OPARG
// 1c6: 0f b7 c0                      movzwl  %ax, %eax
// 1c9: 49 8b 44 c6 48                movq    0x48(%r14,%rax,8), %rax
// 1ce: 4c 8b 78 10                   movq    0x10(%rax), %r15
// 1d2: 4d 85 ff                      testq   %r15, %r15
// 1d5: 74 5c                         je      0x233 <_JIT_ENTRY+0x233>
// 1d7: 41 8b 07                      movl    (%r15), %eax
// 1da: ff c0                         incl    %eax
// 1dc: 74 0f                         je      0x1ed <_JIT_ENTRY+0x1ed>
// 1de: 41 89 07                      movl    %eax, (%r15)
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1eb: ff d0                         callq   *%rax
// 1ed: 4c 89 3b                      movq    %r15, (%rbx)
// 1f0: 48 83 c3 08                   addq    $0x8, %rbx
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _JIT_CONTINUE
// 1fe: 4c 89 f7                      movq    %r14, %rdi
// 201: 48 89 de                      movq    %rbx, %rsi
// 204: 4c 89 e2                      movq    %r12, %rdx
// 207: 48 83 c4 18                   addq    $0x18, %rsp
// 20b: 5b                            popq    %rbx
// 20c: 41 5c                         popq    %r12
// 20e: 41 5d                         popq    %r13
// 210: 41 5e                         popq    %r14
// 212: 41 5f                         popq    %r15
// 214: 5d                            popq    %rbp
// 215: ff e0                         jmpq    *%rax
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_Dealloc
// 221: 4c 89 ff                      movq    %r15, %rdi
// 224: ff d0                         callq   *%rax
// 226: 85 ed                         testl   %ebp, %ebp
// 228: 0f 89 53 ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 22e: e9 81 00 00 00                jmp     0x2b4 <_JIT_ENTRY+0x2b4>
// 233: 49 8b 36                      movq    (%r14), %rsi
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _JIT_OPARG
// 240: 0f b7 d0                      movzwl  %ax, %edx
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _PyEval_FormatExcUnbound
// 24d: 4c 89 e7                      movq    %r12, %rdi
// 250: ff d0                         callq   *%rax
// 252: eb 64                         jmp     0x2b8 <_JIT_ENTRY+0x2b8>
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _Py_Dealloc
// 25e: 4c 89 ef                      movq    %r13, %rdi
// 261: ff d0                         callq   *%rax
// 263: 49 8b 07                      movq    (%r15), %rax
// 266: 48 85 c0                      testq   %rax, %rax
// 269: 0f 8f ac fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 26f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000271:  R_X86_64_64  .rodata.str1.1
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_NegativeRefcount
// 283: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 288: 4c 89 fa                      movq    %r15, %rdx
// 28b: ff d0                         callq   *%rax
// 28d: 49 8b 07                      movq    (%r15), %rax
// 290: 85 c0                         testl   %eax, %eax
// 292: 78 20                         js      0x2b4 <_JIT_ENTRY+0x2b4>
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 29e: ff d0                         callq   *%rax
// 2a0: 49 ff 0f                      decq    (%r15)
// 2a3: 75 0f                         jne     0x2b4 <_JIT_ENTRY+0x2b4>
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _Py_Dealloc
// 2af: 4c 89 ff                      movq    %r15, %rdi
// 2b2: ff d0                         callq   *%rax
// 2b4: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2b8: 4c 29 f3                      subq    %r14, %rbx
// 2bb: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2bf: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2c3: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2c7: 31 c0                         xorl    %eax, %eax
// 2c9: 48 83 c4 18                   addq    $0x18, %rsp
// 2cd: 5b                            popq    %rbx
// 2ce: 41 5c                         popq    %r12
// 2d0: 41 5d                         popq    %r13
// 2d2: 41 5e                         popq    %r14
// 2d4: 41 5f                         popq    %r15
// 2d6: 5d                            popq    %rbp
// 2d7: c3                            retq
// 2d8: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_DEREF_code_body[729] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x45, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x54, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x71, 0x01, 0x00, 0x00, 0xe9, 0x8c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x9e, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x33, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x25, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x44, 0xc6, 0x48, 0x4c, 0x8b, 0x78, 0x10, 0x4d, 0x85, 0xff, 0x74, 0x5c, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x53, 0xff, 0xff, 0xff, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x64, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xac, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_LOAD_DEREF_code_holes[26] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_DEREF_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_FAST
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_FAST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 18 01 00 00             je      0x227 <_JIT_ENTRY+0x227>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 27 01 00 00             jle     0x242 <_JIT_ENTRY+0x242>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 44 01 00 00             jns     0x267 <_JIT_ENTRY+0x267>
// 123: e9 5f 01 00 00                jmp     0x287 <_JIT_ENTRY+0x287>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 95 00 00 00             je      0x20e <_JIT_ENTRY+0x20e>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 06 01 00 00             js      0x287 <_JIT_ENTRY+0x287>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 f8 00 00 00             je      0x287 <_JIT_ENTRY+0x287>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _JIT_OPARG
// 1c6: 0f b7 c0                      movzwl  %ax, %eax
// 1c9: 4d 8b 7c c6 48                movq    0x48(%r14,%rax,8), %r15
// 1ce: 41 8b 07                      movl    (%r15), %eax
// 1d1: ff c0                         incl    %eax
// 1d3: 74 0f                         je      0x1e4 <_JIT_ENTRY+0x1e4>
// 1d5: 41 89 07                      movl    %eax, (%r15)
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1e2: ff d0                         callq   *%rax
// 1e4: 4c 89 3b                      movq    %r15, (%rbx)
// 1e7: 48 83 c3 08                   addq    $0x8, %rbx
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _JIT_CONTINUE
// 1f5: 4c 89 f7                      movq    %r14, %rdi
// 1f8: 48 89 de                      movq    %rbx, %rsi
// 1fb: 4c 89 e2                      movq    %r12, %rdx
// 1fe: 48 83 c4 18                   addq    $0x18, %rsp
// 202: 5b                            popq    %rbx
// 203: 41 5c                         popq    %r12
// 205: 41 5d                         popq    %r13
// 207: 41 5e                         popq    %r14
// 209: 41 5f                         popq    %r15
// 20b: 5d                            popq    %rbp
// 20c: ff e0                         jmpq    *%rax
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_Dealloc
// 218: 4c 89 ff                      movq    %r15, %rdi
// 21b: ff d0                         callq   *%rax
// 21d: 85 ed                         testl   %ebp, %ebp
// 21f: 0f 89 5c ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 225: eb 60                         jmp     0x287 <_JIT_ENTRY+0x287>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _Py_Dealloc
// 231: 4c 89 ef                      movq    %r13, %rdi
// 234: ff d0                         callq   *%rax
// 236: 49 8b 07                      movq    (%r15), %rax
// 239: 48 85 c0                      testq   %rax, %rax
// 23c: 0f 8f d9 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 242: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000244:  R_X86_64_64  .rodata.str1.1
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _Py_NegativeRefcount
// 256: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 25b: 4c 89 fa                      movq    %r15, %rdx
// 25e: ff d0                         callq   *%rax
// 260: 49 8b 07                      movq    (%r15), %rax
// 263: 85 c0                         testl   %eax, %eax
// 265: 78 20                         js      0x287 <_JIT_ENTRY+0x287>
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 271: ff d0                         callq   *%rax
// 273: 49 ff 0f                      decq    (%r15)
// 276: 75 0f                         jne     0x287 <_JIT_ENTRY+0x287>
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _Py_Dealloc
// 282: 4c 89 ff                      movq    %r15, %rdi
// 285: ff d0                         callq   *%rax
// 287: 48 83 c3 f0                   addq    $-0x10, %rbx
// 28b: 4c 29 f3                      subq    %r14, %rbx
// 28e: 48 83 c3 b8                   addq    $-0x48, %rbx
// 292: 48 c1 eb 03                   shrq    $0x3, %rbx
// 296: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 29a: 31 c0                         xorl    %eax, %eax
// 29c: 48 83 c4 18                   addq    $0x18, %rsp
// 2a0: 5b                            popq    %rbx
// 2a1: 41 5c                         popq    %r12
// 2a3: 41 5d                         popq    %r13
// 2a5: 41 5e                         popq    %r14
// 2a7: 41 5f                         popq    %r15
// 2a9: 5d                            popq    %rbp
// 2aa: c3                            retq
// 2ab: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_FAST_code_body[684] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x18, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x27, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x44, 0x01, 0x00, 0x00, 0xe9, 0x5f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x06, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x7c, 0xc6, 0x48, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x5c, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xd9, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_LOAD_FAST_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_FAST_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_FAST_AND_CLEAR
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_FAST_AND_CLEAR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 0b 01 00 00             je      0x21a <_JIT_ENTRY+0x21a>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 1a 01 00 00             jle     0x235 <_JIT_ENTRY+0x235>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 37 01 00 00             jns     0x25a <_JIT_ENTRY+0x25a>
// 123: e9 52 01 00 00                jmp     0x27a <_JIT_ENTRY+0x27a>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 88 00 00 00             je      0x201 <_JIT_ENTRY+0x201>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 f9 00 00 00             js      0x27a <_JIT_ENTRY+0x27a>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 eb 00 00 00             je      0x27a <_JIT_ENTRY+0x27a>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _JIT_OPARG
// 1c6: 0f b7 c0                      movzwl  %ax, %eax
// 1c9: 49 8b 4c c6 48                movq    0x48(%r14,%rax,8), %rcx
// 1ce: 49 c7 44 c6 48 00 00 00 00    movq    $0x0, 0x48(%r14,%rax,8)
// 1d7: 48 89 0b                      movq    %rcx, (%rbx)
// 1da: 48 83 c3 08                   addq    $0x8, %rbx
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _JIT_CONTINUE
// 1e8: 4c 89 f7                      movq    %r14, %rdi
// 1eb: 48 89 de                      movq    %rbx, %rsi
// 1ee: 4c 89 e2                      movq    %r12, %rdx
// 1f1: 48 83 c4 18                   addq    $0x18, %rsp
// 1f5: 5b                            popq    %rbx
// 1f6: 41 5c                         popq    %r12
// 1f8: 41 5d                         popq    %r13
// 1fa: 41 5e                         popq    %r14
// 1fc: 41 5f                         popq    %r15
// 1fe: 5d                            popq    %rbp
// 1ff: ff e0                         jmpq    *%rax
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_Dealloc
// 20b: 4c 89 ff                      movq    %r15, %rdi
// 20e: ff d0                         callq   *%rax
// 210: 85 ed                         testl   %ebp, %ebp
// 212: 0f 89 69 ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 218: eb 60                         jmp     0x27a <_JIT_ENTRY+0x27a>
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_Dealloc
// 224: 4c 89 ef                      movq    %r13, %rdi
// 227: ff d0                         callq   *%rax
// 229: 49 8b 07                      movq    (%r15), %rax
// 22c: 48 85 c0                      testq   %rax, %rax
// 22f: 0f 8f e6 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 235: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000237:  R_X86_64_64  .rodata.str1.1
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _Py_NegativeRefcount
// 249: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 24e: 4c 89 fa                      movq    %r15, %rdx
// 251: ff d0                         callq   *%rax
// 253: 49 8b 07                      movq    (%r15), %rax
// 256: 85 c0                         testl   %eax, %eax
// 258: 78 20                         js      0x27a <_JIT_ENTRY+0x27a>
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 264: ff d0                         callq   *%rax
// 266: 49 ff 0f                      decq    (%r15)
// 269: 75 0f                         jne     0x27a <_JIT_ENTRY+0x27a>
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_Dealloc
// 275: 4c 89 ff                      movq    %r15, %rdi
// 278: ff d0                         callq   *%rax
// 27a: 48 83 c3 f0                   addq    $-0x10, %rbx
// 27e: 4c 29 f3                      subq    %r14, %rbx
// 281: 48 83 c3 b8                   addq    $-0x48, %rbx
// 285: 48 c1 eb 03                   shrq    $0x3, %rbx
// 289: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 28d: 31 c0                         xorl    %eax, %eax
// 28f: 48 83 c4 18                   addq    $0x18, %rsp
// 293: 5b                            popq    %rbx
// 294: 41 5c                         popq    %r12
// 296: 41 5d                         popq    %r13
// 298: 41 5e                         popq    %r14
// 29a: 41 5f                         popq    %r15
// 29c: 5d                            popq    %rbp
// 29d: c3                            retq
// 29e: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_FAST_AND_CLEAR_code_body[671] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x0b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x1a, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x37, 0x01, 0x00, 0x00, 0xe9, 0x52, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x88, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xf9, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xeb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x4c, 0xc6, 0x48, 0x49, 0xc7, 0x44, 0xc6, 0x48, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x69, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xe6, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_LOAD_FAST_AND_CLEAR_code_holes[23] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_FAST_AND_CLEAR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_FAST_AND_CLEAR_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_FAST_CHECK
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_FAST_CHECK.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 75 01 00 00             je      0x285 <_JIT_ENTRY+0x285>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 84 01 00 00             jle     0x2a1 <_JIT_ENTRY+0x2a1>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 a2 01 00 00             jns     0x2c7 <_JIT_ENTRY+0x2c7>
// 125: e9 be 01 00 00                jmp     0x2e8 <_JIT_ENTRY+0x2e8>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 9c 00 00 00             je      0x21a <_JIT_ENTRY+0x21a>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 62 01 00 00             js      0x2e8 <_JIT_ENTRY+0x2e8>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 54 01 00 00             je      0x2e8 <_JIT_ENTRY+0x2e8>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 48 39 c7                      cmpq    %rax, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1b4: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b9: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1bd: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _JIT_OPARG
// 1cb: 0f b7 c0                      movzwl  %ax, %eax
// 1ce: 4d 8b 64 c6 48                movq    0x48(%r14,%rax,8), %r12
// 1d3: 4d 85 e4                      testq   %r12, %r12
// 1d6: 74 5e                         je      0x236 <_JIT_ENTRY+0x236>
// 1d8: 41 8b 04 24                   movl    (%r12), %eax
// 1dc: ff c0                         incl    %eax
// 1de: 74 10                         je      0x1f0 <_JIT_ENTRY+0x1f0>
// 1e0: 41 89 04 24                   movl    %eax, (%r12)
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ee: ff d0                         callq   *%rax
// 1f0: 4c 89 23                      movq    %r12, (%rbx)
// 1f3: 48 83 c3 08                   addq    $0x8, %rbx
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  _JIT_CONTINUE
// 201: 4c 89 f7                      movq    %r14, %rdi
// 204: 48 89 de                      movq    %rbx, %rsi
// 207: 4c 89 fa                      movq    %r15, %rdx
// 20a: 48 83 c4 18                   addq    $0x18, %rsp
// 20e: 5b                            popq    %rbx
// 20f: 41 5c                         popq    %r12
// 211: 41 5d                         popq    %r13
// 213: 41 5e                         popq    %r14
// 215: 41 5f                         popq    %r15
// 217: 5d                            popq    %rbp
// 218: ff e0                         jmpq    *%rax
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_Dealloc
// 224: 4c 89 e7                      movq    %r12, %rdi
// 227: ff d0                         callq   *%rax
// 229: 85 ed                         testl   %ebp, %ebp
// 22b: 0f 89 55 ff ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 231: e9 b2 00 00 00                jmp     0x2e8 <_JIT_ENTRY+0x2e8>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  PyExc_UnboundLocalError
// 240: 4c 8b 20                      movq    (%rax), %r12
// 243: 49 8b 06                      movq    (%r14), %rax
// 246: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _JIT_OPARG
// 254: 0f b7 f0                      movzwl  %ax, %esi
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  PyTuple_GetItem
// 261: ff d0                         callq   *%rax
// 263: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000265:  R_X86_64_64  .rodata.str1.1+0x39
// 26d: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000026f:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 277: 4c 89 ff                      movq    %r15, %rdi
// 27a: 4c 89 e6                      movq    %r12, %rsi
// 27d: 48 89 c1                      movq    %rax, %rcx
// 280: 41 ff d0                      callq   *%r8
// 283: eb 67                         jmp     0x2ec <_JIT_ENTRY+0x2ec>
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _Py_Dealloc
// 28f: 4c 89 ef                      movq    %r13, %rdi
// 292: ff d0                         callq   *%rax
// 294: 49 8b 04 24                   movq    (%r12), %rax
// 298: 48 85 c0                      testq   %rax, %rax
// 29b: 0f 8f 7c fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 2a1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a3:  R_X86_64_64  .rodata.str1.1
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_NegativeRefcount
// 2b5: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2ba: 4c 89 e2                      movq    %r12, %rdx
// 2bd: ff d0                         callq   *%rax
// 2bf: 49 8b 04 24                   movq    (%r12), %rax
// 2c3: 85 c0                         testl   %eax, %eax
// 2c5: 78 21                         js      0x2e8 <_JIT_ENTRY+0x2e8>
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d1: ff d0                         callq   *%rax
// 2d3: 49 ff 0c 24                   decq    (%r12)
// 2d7: 75 0f                         jne     0x2e8 <_JIT_ENTRY+0x2e8>
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _Py_Dealloc
// 2e3: 4c 89 e7                      movq    %r12, %rdi
// 2e6: ff d0                         callq   *%rax
// 2e8: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2ec: 4c 29 f3                      subq    %r14, %rbx
// 2ef: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2f3: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2f7: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2fb: 31 c0                         xorl    %eax, %eax
// 2fd: 48 83 c4 18                   addq    $0x18, %rsp
// 301: 5b                            popq    %rbx
// 302: 41 5c                         popq    %r12
// 304: 41 5d                         popq    %r13
// 306: 41 5e                         popq    %r14
// 308: 41 5f                         popq    %r15
// 30a: 5d                            popq    %rbp
// 30b: c3                            retq
// 30c: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_FAST_CHECK_code_body[781] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x75, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x84, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xa2, 0x01, 0x00, 0x00, 0xe9, 0xbe, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x9c, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x62, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x54, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x64, 0xc6, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x5e, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x55, 0xff, 0xff, 0xff, 0xe9, 0xb2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x20, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0xeb, 0x67, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x7c, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_LOAD_FAST_CHECK_code_holes[29] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot access local variable '%s' where it is not associated with a value\x00"
// 83: 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_FAST_CHECK_data_body[137] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_FAST_CHECK_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_FROM_DICT_OR_DEREF
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_FROM_DICT_OR_DEREF.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 3e: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 10                leaq    0x10(%rsp), %rdx
// 56: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 63                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 81 00 00 00             jns     0x106 <_JIT_ENTRY+0x106>
// 85: e9 9d 00 00 00                jmp     0x127 <_JIT_ENTRY+0x127>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c7 00 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// c6: 49 8b 04 24                   movq    (%r12), %rax
// ca: 48 85 c0                      testq   %rax, %rax
// cd: 0f 8e d6 00 00 00             jle     0x1a9 <_JIT_ENTRY+0x1a9>
// d3: 85 c0                         testl   %eax, %eax
// d5: 0f 89 f4 00 00 00             jns     0x1cf <_JIT_ENTRY+0x1cf>
// db: e9 05 01 00 00                jmp     0x1e5 <_JIT_ENTRY+0x1e5>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f9: 4c 89 ea                      movq    %r13, %rdx
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 21                         js      0x127 <_JIT_ENTRY+0x127>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 4d 00                   decq    (%r13)
// 116: 75 0f                         jne     0x127 <_JIT_ENTRY+0x127>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_Dealloc
// 122: 4c 89 ef                      movq    %r13, %rdi
// 125: ff d0                         callq   *%rax
// 127: 49 8b 04 24                   movq    (%r12), %rax
// 12b: 48 85 c0                      testq   %rax, %rax
// 12e: 7e 09                         jle     0x139 <_JIT_ENTRY+0x139>
// 130: 85 c0                         testl   %eax, %eax
// 132: 79 2f                         jns     0x163 <_JIT_ENTRY+0x163>
// 134: e9 c3 01 00 00                jmp     0x2fc <_JIT_ENTRY+0x2fc>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_NegativeRefcount
// 14d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 152: 4c 89 e2                      movq    %r12, %rdx
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 99 01 00 00             js      0x2fc <_JIT_ENTRY+0x2fc>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 83 01 00 00             jne     0x2fc <_JIT_ENTRY+0x2fc>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: 4c 89 e7                      movq    %r12, %rdi
// 186: ff d0                         callq   *%rax
// 188: e9 6f 01 00 00                jmp     0x2fc <_JIT_ENTRY+0x2fc>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: 4c 89 ef                      movq    %r13, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 49 8b 04 24                   movq    (%r12), %rax
// 1a0: 48 85 c0                      testq   %rax, %rax
// 1a3: 0f 8f 2a ff ff ff             jg      0xd3 <_JIT_ENTRY+0xd3>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 49 8b 04 24                   movq    (%r12), %rax
// 1cb: 85 c0                         testl   %eax, %eax
// 1cd: 78 16                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 49 ff 0c 24                   decq    (%r12)
// 1df: 0f 84 00 01 00 00             je      0x2e5 <_JIT_ENTRY+0x2e5>
// 1e5: 85 ed                         testl   %ebp, %ebp
// 1e7: 0f 88 0f 01 00 00             js      0x2fc <_JIT_ENTRY+0x2fc>
// 1ed: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 1f2: 48 85 ff                      testq   %rdi, %rdi
// 1f5: 0f 84 01 01 00 00             je      0x2fc <_JIT_ENTRY+0x2fc>
// 1fb: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001fd:  R_X86_64_64  _Py_NoneStruct
// 205: 4c 39 e7                      cmpq    %r12, %rdi
// 208: 74 11                         je      0x21b <_JIT_ENTRY+0x21b>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyErr_SetHandledException
// 214: ff d0                         callq   *%rax
// 216: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 21b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 220: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 224: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 228: 49 8b 06                      movq    (%r14), %rax
// 22b: 48 8b 40 60                   movq    0x60(%rax), %rax
// 22f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000231:  R_X86_64_64  _JIT_OPARG
// 239: 0f b7 c9                      movzwl  %cx, %ecx
// 23c: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  PyMapping_GetOptionalItem
// 24b: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 250: 4c 89 e7                      movq    %r12, %rdi
// 253: ff d0                         callq   *%rax
// 255: 85 c0                         testl   %eax, %eax
// 257: 0f 88 a3 00 00 00             js      0x300 <_JIT_ENTRY+0x300>
// 25d: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 263: 0f 84 b7 00 00 00             je      0x320 <_JIT_ENTRY+0x320>
// 269: 49 8b 04 24                   movq    (%r12), %rax
// 26d: 48 85 c0                      testq   %rax, %rax
// 270: 7f 22                         jg      0x294 <_JIT_ENTRY+0x294>
// 272: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000274:  R_X86_64_64  .rodata.str1.1
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_NegativeRefcount
// 286: be dd 04 00 00                movl    $0x4dd, %esi            # imm = 0x4DD
// 28b: 4c 89 e2                      movq    %r12, %rdx
// 28e: ff d0                         callq   *%rax
// 290: 49 8b 04 24                   movq    (%r12), %rax
// 294: 85 c0                         testl   %eax, %eax
// 296: 78 21                         js      0x2b9 <_JIT_ENTRY+0x2b9>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a2: ff d0                         callq   *%rax
// 2a4: 49 ff 0c 24                   decq    (%r12)
// 2a8: 75 0f                         jne     0x2b9 <_JIT_ENTRY+0x2b9>
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  _Py_Dealloc
// 2b4: 4c 89 e7                      movq    %r12, %rdi
// 2b7: ff d0                         callq   *%rax
// 2b9: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2be: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _JIT_CONTINUE
// 2cc: 4c 89 f7                      movq    %r14, %rdi
// 2cf: 48 89 de                      movq    %rbx, %rsi
// 2d2: 4c 89 fa                      movq    %r15, %rdx
// 2d5: 48 83 c4 18                   addq    $0x18, %rsp
// 2d9: 5b                            popq    %rbx
// 2da: 41 5c                         popq    %r12
// 2dc: 41 5d                         popq    %r13
// 2de: 41 5e                         popq    %r14
// 2e0: 41 5f                         popq    %r15
// 2e2: 5d                            popq    %rbp
// 2e3: ff e0                         jmpq    *%rax
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _Py_Dealloc
// 2ef: 4c 89 e7                      movq    %r12, %rdi
// 2f2: ff d0                         callq   *%rax
// 2f4: 85 ed                         testl   %ebp, %ebp
// 2f6: 0f 89 f1 fe ff ff             jns     0x1ed <_JIT_ENTRY+0x1ed>
// 2fc: 48 83 c3 f0                   addq    $-0x10, %rbx
// 300: 4c 29 f3                      subq    %r14, %rbx
// 303: 48 83 c3 b8                   addq    $-0x48, %rbx
// 307: 48 c1 eb 03                   shrq    $0x3, %rbx
// 30b: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 30f: 31 c0                         xorl    %eax, %eax
// 311: 48 83 c4 18                   addq    $0x18, %rsp
// 315: 5b                            popq    %rbx
// 316: 41 5c                         popq    %r12
// 318: 41 5d                         popq    %r13
// 31a: 41 5e                         popq    %r14
// 31c: 41 5f                         popq    %r15
// 31e: 5d                            popq    %rbp
// 31f: c3                            retq
// 320: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000322:  R_X86_64_64  _JIT_OPARG
// 32a: 0f b7 c0                      movzwl  %ax, %eax
// 32d: 49 8b 44 c6 48                movq    0x48(%r14,%rax,8), %rax
// 332: 48 8b 40 10                   movq    0x10(%rax), %rax
// 336: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 33b: 48 85 c0                      testq   %rax, %rax
// 33e: 74 1d                         je      0x35d <_JIT_ENTRY+0x35d>
// 340: 8b 08                         movl    (%rax), %ecx
// 342: ff c1                         incl    %ecx
// 344: 0f 84 1f ff ff ff             je      0x269 <_JIT_ENTRY+0x269>
// 34a: 89 08                         movl    %ecx, (%rax)
// 34c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034e:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 356: ff d0                         callq   *%rax
// 358: e9 0c ff ff ff                jmp     0x269 <_JIT_ENTRY+0x269>
// 35d: 49 8b 36                      movq    (%r14), %rsi
// 360: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000362:  R_X86_64_64  _JIT_OPARG
// 36a: 0f b7 d0                      movzwl  %ax, %edx
// 36d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036f:  R_X86_64_64  _PyEval_FormatExcUnbound
// 377: 4c 89 ff                      movq    %r15, %rdi
// 37a: ff d0                         callq   *%rax
// 37c: eb 82                         jmp     0x300 <_JIT_ENTRY+0x300>
// 37e: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_FROM_DICT_OR_DEREF_code_body[895] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x10, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0xc3, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x99, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x83, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x6f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x00, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x0f, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x01, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x60, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xa3, 0x00, 0x00, 0x00, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0xf1, 0xfe, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x44, 0xc6, 0x48, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x1d, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0x1f, 0xff, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x0c, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x82};
static const Hole _CHECK_EG_MATCHplus_LOAD_FROM_DICT_OR_DEREF_code_holes[32] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x34e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x362, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x36f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_FROM_DICT_OR_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_FROM_DICT_OR_DEREF_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_FROM_DICT_OR_GLOBALS
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_FROM_DICT_OR_GLOBALS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 3e: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 10                leaq    0x10(%rsp), %rdx
// 56: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 8a 01 00 00             je      0x29a <_JIT_ENTRY+0x29a>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 99 01 00 00             jle     0x2b6 <_JIT_ENTRY+0x2b6>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 b7 01 00 00             jns     0x2dc <_JIT_ENTRY+0x2dc>
// 125: e9 d3 01 00 00                jmp     0x2fd <_JIT_ENTRY+0x2fd>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 03 01 00 00             je      0x281 <_JIT_ENTRY+0x281>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 77 01 00 00             js      0x2fd <_JIT_ENTRY+0x2fd>
// 186: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 69 01 00 00             je      0x2fd <_JIT_ENTRY+0x2fd>
// 194: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 4c 39 e7                      cmpq    %r12, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 1b4: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1b9: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 1bd: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 1c1: 49 8b 06                      movq    (%r14), %rax
// 1c4: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ca:  R_X86_64_64  _JIT_OPARG
// 1d2: 0f b7 c9                      movzwl  %cx, %ecx
// 1d5: 4c 8b 6c c8 18                movq    0x18(%rax,%rcx,8), %r13
// 1da: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001dc:  R_X86_64_64  PyMapping_GetOptionalItem
// 1e4: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1e9: 4c 89 e7                      movq    %r12, %rdi
// 1ec: 4c 89 ee                      movq    %r13, %rsi
// 1ef: ff d5                         callq   *%rbp
// 1f1: 85 c0                         testl   %eax, %eax
// 1f3: 0f 88 08 01 00 00             js      0x301 <_JIT_ENTRY+0x301>
// 1f9: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 1ff: 0f 84 1c 01 00 00             je      0x321 <_JIT_ENTRY+0x321>
// 205: 49 8b 04 24                   movq    (%r12), %rax
// 209: 48 85 c0                      testq   %rax, %rax
// 20c: 7f 22                         jg      0x230 <_JIT_ENTRY+0x230>
// 20e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000210:  R_X86_64_64  .rodata.str1.1
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  _Py_NegativeRefcount
// 222: be 1b 04 00 00                movl    $0x41b, %esi            # imm = 0x41B
// 227: 4c 89 e2                      movq    %r12, %rdx
// 22a: ff d0                         callq   *%rax
// 22c: 49 8b 04 24                   movq    (%r12), %rax
// 230: 85 c0                         testl   %eax, %eax
// 232: 78 21                         js      0x255 <_JIT_ENTRY+0x255>
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23e: ff d0                         callq   *%rax
// 240: 49 ff 0c 24                   decq    (%r12)
// 244: 75 0f                         jne     0x255 <_JIT_ENTRY+0x255>
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_Dealloc
// 250: 4c 89 e7                      movq    %r12, %rdi
// 253: ff d0                         callq   *%rax
// 255: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 25a: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _JIT_CONTINUE
// 268: 4c 89 f7                      movq    %r14, %rdi
// 26b: 48 89 de                      movq    %rbx, %rsi
// 26e: 4c 89 fa                      movq    %r15, %rdx
// 271: 48 83 c4 18                   addq    $0x18, %rsp
// 275: 5b                            popq    %rbx
// 276: 41 5c                         popq    %r12
// 278: 41 5d                         popq    %r13
// 27a: 41 5e                         popq    %r14
// 27c: 41 5f                         popq    %r15
// 27e: 5d                            popq    %rbp
// 27f: ff e0                         jmpq    *%rax
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  _Py_Dealloc
// 28b: 4c 89 e7                      movq    %r12, %rdi
// 28e: ff d0                         callq   *%rax
// 290: 85 ed                         testl   %ebp, %ebp
// 292: 0f 89 ee fe ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 298: eb 63                         jmp     0x2fd <_JIT_ENTRY+0x2fd>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_Dealloc
// 2a4: 4c 89 ef                      movq    %r13, %rdi
// 2a7: ff d0                         callq   *%rax
// 2a9: 49 8b 04 24                   movq    (%r12), %rax
// 2ad: 48 85 c0                      testq   %rax, %rax
// 2b0: 0f 8f 67 fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 2b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b8:  R_X86_64_64  .rodata.str1.1
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  _Py_NegativeRefcount
// 2ca: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2cf: 4c 89 e2                      movq    %r12, %rdx
// 2d2: ff d0                         callq   *%rax
// 2d4: 49 8b 04 24                   movq    (%r12), %rax
// 2d8: 85 c0                         testl   %eax, %eax
// 2da: 78 21                         js      0x2fd <_JIT_ENTRY+0x2fd>
// 2dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002de:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e6: ff d0                         callq   *%rax
// 2e8: 49 ff 0c 24                   decq    (%r12)
// 2ec: 75 0f                         jne     0x2fd <_JIT_ENTRY+0x2fd>
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_Dealloc
// 2f8: 4c 89 e7                      movq    %r12, %rdi
// 2fb: ff d0                         callq   *%rax
// 2fd: 48 83 c3 f0                   addq    $-0x10, %rbx
// 301: 4c 29 f3                      subq    %r14, %rbx
// 304: 48 83 c3 b8                   addq    $-0x48, %rbx
// 308: 48 c1 eb 03                   shrq    $0x3, %rbx
// 30c: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 310: 31 c0                         xorl    %eax, %eax
// 312: 48 83 c4 18                   addq    $0x18, %rsp
// 316: 5b                            popq    %rbx
// 317: 41 5c                         popq    %r12
// 319: 41 5d                         popq    %r13
// 31b: 41 5e                         popq    %r14
// 31d: 41 5f                         popq    %r15
// 31f: 5d                            popq    %rbp
// 320: c3                            retq
// 321: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 325: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000327:  R_X86_64_64  PyDict_GetItemRef
// 32f: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 334: 4c 89 ee                      movq    %r13, %rsi
// 337: ff d0                         callq   *%rax
// 339: 85 c0                         testl   %eax, %eax
// 33b: 78 c4                         js      0x301 <_JIT_ENTRY+0x301>
// 33d: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 343: 0f 85 bc fe ff ff             jne     0x205 <_JIT_ENTRY+0x205>
// 349: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// 34d: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 352: 4c 89 ee                      movq    %r13, %rsi
// 355: ff d5                         callq   *%rbp
// 357: 85 c0                         testl   %eax, %eax
// 359: 78 a6                         js      0x301 <_JIT_ENTRY+0x301>
// 35b: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 361: 0f 85 9e fe ff ff             jne     0x205 <_JIT_ENTRY+0x205>
// 367: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000369:  R_X86_64_64  PyExc_NameError
// 371: 48 8b 30                      movq    (%rax), %rsi
// 374: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000376:  R_X86_64_64  .rodata.str1.1+0x39
// 37e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000380:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 388: 4c 89 ff                      movq    %r15, %rdi
// 38b: 4c 89 e9                      movq    %r13, %rcx
// 38e: ff d0                         callq   *%rax
// 390: e9 6c ff ff ff                jmp     0x301 <_JIT_ENTRY+0x301>
// 395: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_FROM_DICT_OR_GLOBALS_code_body[918] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x10, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x8a, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x99, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xb7, 0x01, 0x00, 0x00, 0xe9, 0xd3, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x03, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x77, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x69, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x6c, 0xc8, 0x18, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x88, 0x08, 0x01, 0x00, 0x00, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x84, 0x1c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0xee, 0xfe, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x67, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xc4, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x85, 0xbc, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xee, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0xa6, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x85, 0x9e, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe9, 0xff, 0xd0, 0xe9, 0x6c, 0xff, 0xff, 0xff};
static const Hole _CHECK_EG_MATCHplus_LOAD_FROM_DICT_OR_GLOBALS_code_holes[32] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x327, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x369, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x376, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x380, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_FROM_DICT_OR_GLOBALS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_FROM_DICT_OR_GLOBALS_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_GLOBAL
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_GLOBAL.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 3e: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 10                leaq    0x10(%rsp), %rdx
// 56: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 75 01 00 00             je      0x285 <_JIT_ENTRY+0x285>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 84 01 00 00             jle     0x2a1 <_JIT_ENTRY+0x2a1>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 a2 01 00 00             jns     0x2c7 <_JIT_ENTRY+0x2c7>
// 125: e9 be 01 00 00                jmp     0x2e8 <_JIT_ENTRY+0x2e8>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 ee 00 00 00             je      0x26c <_JIT_ENTRY+0x26c>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 62 01 00 00             js      0x2e8 <_JIT_ENTRY+0x2e8>
// 186: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 54 01 00 00             je      0x2e8 <_JIT_ENTRY+0x2e8>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 48 39 c7                      cmpq    %rax, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b4: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1b9: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1bd: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 1c1: 48 8b 03                      movq    (%rbx), %rax
// 1c4: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 1c8: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1cc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ce:  R_X86_64_64  _JIT_OPARG
// 1d6: 81 e1 fe ff 00 00             andl    $0xfffe, %ecx           # imm = 0xFFFE
// 1dc: 4c 8b 64 88 18                movq    0x18(%rax,%rcx,4), %r12
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  PyDict_Type
// 1eb: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 1ef: 75 0e                         jne     0x1ff <_JIT_ENTRY+0x1ff>
// 1f1: 48 8b 73 20                   movq    0x20(%rbx), %rsi
// 1f5: 48 39 46 08                   cmpq    %rax, 0x8(%rsi)
// 1f9: 0f 84 30 01 00 00             je      0x32f <_JIT_ENTRY+0x32f>
// 1ff: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000201:  R_X86_64_64  PyMapping_GetOptionalItem
// 209: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 20e: 4c 89 e6                      movq    %r12, %rsi
// 211: 41 ff d5                      callq   *%r13
// 214: 85 c0                         testl   %eax, %eax
// 216: 0f 88 d0 00 00 00             js      0x2ec <_JIT_ENTRY+0x2ec>
// 21c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 221: 48 85 c0                      testq   %rax, %rax
// 224: 0f 84 e2 00 00 00             je      0x30c <_JIT_ENTRY+0x30c>
// 22a: 49 89 06                      movq    %rax, (%r14)
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _JIT_OPARG
// 237: a8 01                         testb   $0x1, %al
// 239: 74 08                         je      0x243 <_JIT_ENTRY+0x243>
// 23b: 49 c7 46 08 00 00 00 00       movq    $0x0, 0x8(%r14)
// 243: 83 e0 01                      andl    $0x1, %eax
// 246: ff c0                         incl    %eax
// 248: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _JIT_CONTINUE
// 256: 48 89 df                      movq    %rbx, %rdi
// 259: 4c 89 fa                      movq    %r15, %rdx
// 25c: 48 83 c4 18                   addq    $0x18, %rsp
// 260: 5b                            popq    %rbx
// 261: 41 5c                         popq    %r12
// 263: 41 5d                         popq    %r13
// 265: 41 5e                         popq    %r14
// 267: 41 5f                         popq    %r15
// 269: 5d                            popq    %rbp
// 26a: ff e0                         jmpq    *%rax
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _Py_Dealloc
// 276: 4c 89 e7                      movq    %r12, %rdi
// 279: ff d0                         callq   *%rax
// 27b: 85 ed                         testl   %ebp, %ebp
// 27d: 0f 89 03 ff ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 283: eb 63                         jmp     0x2e8 <_JIT_ENTRY+0x2e8>
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _Py_Dealloc
// 28f: 4c 89 ef                      movq    %r13, %rdi
// 292: ff d0                         callq   *%rax
// 294: 49 8b 04 24                   movq    (%r12), %rax
// 298: 48 85 c0                      testq   %rax, %rax
// 29b: 0f 8f 7c fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 2a1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a3:  R_X86_64_64  .rodata.str1.1
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_NegativeRefcount
// 2b5: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2ba: 4c 89 e2                      movq    %r12, %rdx
// 2bd: ff d0                         callq   *%rax
// 2bf: 49 8b 04 24                   movq    (%r12), %rax
// 2c3: 85 c0                         testl   %eax, %eax
// 2c5: 78 21                         js      0x2e8 <_JIT_ENTRY+0x2e8>
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d1: ff d0                         callq   *%rax
// 2d3: 49 ff 0c 24                   decq    (%r12)
// 2d7: 75 0f                         jne     0x2e8 <_JIT_ENTRY+0x2e8>
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _Py_Dealloc
// 2e3: 4c 89 e7                      movq    %r12, %rdi
// 2e6: ff d0                         callq   *%rax
// 2e8: 49 83 c6 f0                   addq    $-0x10, %r14
// 2ec: 49 29 de                      subq    %rbx, %r14
// 2ef: 49 83 c6 b8                   addq    $-0x48, %r14
// 2f3: 49 c1 ee 03                   shrq    $0x3, %r14
// 2f7: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2fb: 31 c0                         xorl    %eax, %eax
// 2fd: 48 83 c4 18                   addq    $0x18, %rsp
// 301: 5b                            popq    %rbx
// 302: 41 5c                         popq    %r12
// 304: 41 5d                         popq    %r13
// 306: 41 5e                         popq    %r14
// 308: 41 5f                         popq    %r15
// 30a: 5d                            popq    %rbp
// 30b: c3                            retq
// 30c: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 310: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 315: 4c 89 e6                      movq    %r12, %rsi
// 318: 41 ff d5                      callq   *%r13
// 31b: 85 c0                         testl   %eax, %eax
// 31d: 78 cd                         js      0x2ec <_JIT_ENTRY+0x2ec>
// 31f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 324: 48 85 c0                      testq   %rax, %rax
// 327: 0f 85 fd fe ff ff             jne     0x22a <_JIT_ENTRY+0x22a>
// 32d: eb 4f                         jmp     0x37e <_JIT_ENTRY+0x37e>
// 32f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000331:  R_X86_64_64  _PyDict_LoadGlobal
// 339: 4c 89 e2                      movq    %r12, %rdx
// 33c: ff d0                         callq   *%rax
// 33e: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 343: 48 85 c0                      testq   %rax, %rax
// 346: 74 22                         je      0x36a <_JIT_ENTRY+0x36a>
// 348: 8b 08                         movl    (%rax), %ecx
// 34a: ff c1                         incl    %ecx
// 34c: 0f 84 d8 fe ff ff             je      0x22a <_JIT_ENTRY+0x22a>
// 352: 89 08                         movl    %ecx, (%rax)
// 354: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000356:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 35e: ff d0                         callq   *%rax
// 360: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 365: e9 c0 fe ff ff                jmp     0x22a <_JIT_ENTRY+0x22a>
// 36a: 49 8b 47 68                   movq    0x68(%r15), %rax
// 36e: 48 85 c0                      testq   %rax, %rax
// 371: 74 0b                         je      0x37e <_JIT_ENTRY+0x37e>
// 373: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 378: 0f 85 6e ff ff ff             jne     0x2ec <_JIT_ENTRY+0x2ec>
// 37e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000380:  R_X86_64_64  PyExc_NameError
// 388: 48 8b 30                      movq    (%rax), %rsi
// 38b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000038d:  R_X86_64_64  .rodata.str1.1+0x39
// 395: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000397:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 39f: 4c 89 ff                      movq    %r15, %rdi
// 3a2: 4c 89 e1                      movq    %r12, %rcx
// 3a5: ff d0                         callq   *%rax
// 3a7: e9 40 ff ff ff                jmp     0x2ec <_JIT_ENTRY+0x2ec>
// 3ac: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_GLOBAL_code_body[941] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x10, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x75, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x84, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xa2, 0x01, 0x00, 0x00, 0xe9, 0xbe, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xee, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x62, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x54, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x89, 0x4e, 0xf0, 0x49, 0x89, 0x46, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfe, 0xff, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x88, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x75, 0x0e, 0x48, 0x8b, 0x73, 0x20, 0x48, 0x39, 0x46, 0x08, 0x0f, 0x84, 0x30, 0x01, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x88, 0xd0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xe2, 0x00, 0x00, 0x00, 0x49, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x46, 0x08, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x03, 0xff, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x7c, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0xcd, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0xfd, 0xfe, 0xff, 0xff, 0xeb, 0x4f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x22, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0xd8, 0xfe, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xe9, 0xc0, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0x6e, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x40, 0xff, 0xff, 0xff};
static const Hole _CHECK_EG_MATCHplus_LOAD_GLOBAL_code_holes[31] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x331, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_LoadGlobal, 0x0},
    {0x356, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x380, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x38d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x397, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_GLOBAL_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_GLOBAL_BUILTINS
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_GLOBAL_BUILTINS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 83 01 00 00             je      0x293 <_JIT_ENTRY+0x293>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 92 01 00 00             jle     0x2af <_JIT_ENTRY+0x2af>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 b0 01 00 00             jns     0x2d5 <_JIT_ENTRY+0x2d5>
// 125: e9 cc 01 00 00                jmp     0x2f6 <_JIT_ENTRY+0x2f6>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 cf 00 00 00             je      0x24d <_JIT_ENTRY+0x24d>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 70 01 00 00             js      0x2f6 <_JIT_ENTRY+0x2f6>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 62 01 00 00             je      0x2f6 <_JIT_ENTRY+0x2f6>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 48 39 c7                      cmpq    %rax, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1b4: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b9: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1bd: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 1c1: 48 8b 43 20                   movq    0x20(%rbx), %rax
// 1c5: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1c9: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 1cd: ba 01 00 00 00                movl    $0x1, %edx
// 1d2: 48 d3 e2                      shlq    %cl, %rdx
// 1d5: 48 01 c2                      addq    %rax, %rdx
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  _JIT_OPERAND
// 1e2: 0f b7 c0                      movzwl  %ax, %eax
// 1e5: 48 c1 e0 04                   shlq    $0x4, %rax
// 1e9: 4c 8b 64 10 28                movq    0x28(%rax,%rdx), %r12
// 1ee: 4d 85 e4                      testq   %r12, %r12
// 1f1: 74 76                         je      0x269 <_JIT_ENTRY+0x269>
// 1f3: 41 8b 04 24                   movl    (%r12), %eax
// 1f7: ff c0                         incl    %eax
// 1f9: 74 10                         je      0x20b <_JIT_ENTRY+0x20b>
// 1fb: 41 89 04 24                   movl    %eax, (%r12)
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 209: ff d0                         callq   *%rax
// 20b: 4d 89 26                      movq    %r12, (%r14)
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _JIT_OPARG
// 218: a8 01                         testb   $0x1, %al
// 21a: 74 08                         je      0x224 <_JIT_ENTRY+0x224>
// 21c: 49 c7 46 08 00 00 00 00       movq    $0x0, 0x8(%r14)
// 224: 83 e0 01                      andl    $0x1, %eax
// 227: ff c0                         incl    %eax
// 229: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _JIT_CONTINUE
// 237: 48 89 df                      movq    %rbx, %rdi
// 23a: 4c 89 fa                      movq    %r15, %rdx
// 23d: 48 83 c4 18                   addq    $0x18, %rsp
// 241: 5b                            popq    %rbx
// 242: 41 5c                         popq    %r12
// 244: 41 5d                         popq    %r13
// 246: 41 5e                         popq    %r14
// 248: 41 5f                         popq    %r15
// 24a: 5d                            popq    %rbp
// 24b: ff e0                         jmpq    *%rax
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_Dealloc
// 257: 4c 89 e7                      movq    %r12, %rdi
// 25a: ff d0                         callq   *%rax
// 25c: 85 ed                         testl   %ebp, %ebp
// 25e: 0f 89 22 ff ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 264: e9 8d 00 00 00                jmp     0x2f6 <_JIT_ENTRY+0x2f6>
// 269: 49 29 de                      subq    %rbx, %r14
// 26c: 49 83 c6 b8                   addq    $-0x48, %r14
// 270: 49 c1 ee 03                   shrq    $0x3, %r14
// 274: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 278: 48 8b 03                      movq    (%rbx), %rax
// 27b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027d:  R_X86_64_64  _JIT_TARGET
// 285: 89 c9                         movl    %ecx, %ecx
// 287: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 28b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 291: eb 78                         jmp     0x30b <_JIT_ENTRY+0x30b>
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  _Py_Dealloc
// 29d: 4c 89 ef                      movq    %r13, %rdi
// 2a0: ff d0                         callq   *%rax
// 2a2: 49 8b 04 24                   movq    (%r12), %rax
// 2a6: 48 85 c0                      testq   %rax, %rax
// 2a9: 0f 8f 6e fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 2af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b1:  R_X86_64_64  .rodata.str1.1
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_NegativeRefcount
// 2c3: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2c8: 4c 89 e2                      movq    %r12, %rdx
// 2cb: ff d0                         callq   *%rax
// 2cd: 49 8b 04 24                   movq    (%r12), %rax
// 2d1: 85 c0                         testl   %eax, %eax
// 2d3: 78 21                         js      0x2f6 <_JIT_ENTRY+0x2f6>
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2df: ff d0                         callq   *%rax
// 2e1: 49 ff 0c 24                   decq    (%r12)
// 2e5: 75 0f                         jne     0x2f6 <_JIT_ENTRY+0x2f6>
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  _Py_Dealloc
// 2f1: 4c 89 e7                      movq    %r12, %rdi
// 2f4: ff d0                         callq   *%rax
// 2f6: 49 83 c6 f0                   addq    $-0x10, %r14
// 2fa: 49 29 de                      subq    %rbx, %r14
// 2fd: 49 83 c6 b8                   addq    $-0x48, %r14
// 301: 49 c1 ee 03                   shrq    $0x3, %r14
// 305: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 309: 31 c0                         xorl    %eax, %eax
// 30b: 48 83 c4 18                   addq    $0x18, %rsp
// 30f: 5b                            popq    %rbx
// 310: 41 5c                         popq    %r12
// 312: 41 5d                         popq    %r13
// 314: 41 5e                         popq    %r14
// 316: 41 5f                         popq    %r15
// 318: 5d                            popq    %rbp
// 319: c3                            retq
// 31a: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_GLOBAL_BUILTINS_code_body[795] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x83, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x92, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xb0, 0x01, 0x00, 0x00, 0xe9, 0xcc, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xcf, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x70, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x62, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x89, 0x4e, 0xf0, 0x49, 0x89, 0x46, 0xf8, 0x48, 0x8b, 0x43, 0x20, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x64, 0x10, 0x28, 0x4d, 0x85, 0xe4, 0x74, 0x76, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x46, 0x08, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x22, 0xff, 0xff, 0xff, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x78, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x6e, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_LOAD_GLOBAL_BUILTINS_code_holes[26] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_GLOBAL_BUILTINS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_GLOBAL_BUILTINS_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_GLOBAL_MODULE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_GLOBAL_MODULE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 83 01 00 00             je      0x293 <_JIT_ENTRY+0x293>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 92 01 00 00             jle     0x2af <_JIT_ENTRY+0x2af>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 b0 01 00 00             jns     0x2d5 <_JIT_ENTRY+0x2d5>
// 125: e9 cc 01 00 00                jmp     0x2f6 <_JIT_ENTRY+0x2f6>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 cf 00 00 00             je      0x24d <_JIT_ENTRY+0x24d>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 70 01 00 00             js      0x2f6 <_JIT_ENTRY+0x2f6>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 62 01 00 00             je      0x2f6 <_JIT_ENTRY+0x2f6>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 48 39 c7                      cmpq    %rax, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1b4: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b9: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1bd: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 1c1: 48 8b 43 18                   movq    0x18(%rbx), %rax
// 1c5: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1c9: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 1cd: ba 01 00 00 00                movl    $0x1, %edx
// 1d2: 48 d3 e2                      shlq    %cl, %rdx
// 1d5: 48 01 c2                      addq    %rax, %rdx
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  _JIT_OPERAND
// 1e2: 0f b7 c0                      movzwl  %ax, %eax
// 1e5: 48 c1 e0 04                   shlq    $0x4, %rax
// 1e9: 4c 8b 64 10 28                movq    0x28(%rax,%rdx), %r12
// 1ee: 4d 85 e4                      testq   %r12, %r12
// 1f1: 74 76                         je      0x269 <_JIT_ENTRY+0x269>
// 1f3: 41 8b 04 24                   movl    (%r12), %eax
// 1f7: ff c0                         incl    %eax
// 1f9: 74 10                         je      0x20b <_JIT_ENTRY+0x20b>
// 1fb: 41 89 04 24                   movl    %eax, (%r12)
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 209: ff d0                         callq   *%rax
// 20b: 4d 89 26                      movq    %r12, (%r14)
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _JIT_OPARG
// 218: a8 01                         testb   $0x1, %al
// 21a: 74 08                         je      0x224 <_JIT_ENTRY+0x224>
// 21c: 49 c7 46 08 00 00 00 00       movq    $0x0, 0x8(%r14)
// 224: 83 e0 01                      andl    $0x1, %eax
// 227: ff c0                         incl    %eax
// 229: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _JIT_CONTINUE
// 237: 48 89 df                      movq    %rbx, %rdi
// 23a: 4c 89 fa                      movq    %r15, %rdx
// 23d: 48 83 c4 18                   addq    $0x18, %rsp
// 241: 5b                            popq    %rbx
// 242: 41 5c                         popq    %r12
// 244: 41 5d                         popq    %r13
// 246: 41 5e                         popq    %r14
// 248: 41 5f                         popq    %r15
// 24a: 5d                            popq    %rbp
// 24b: ff e0                         jmpq    *%rax
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_Dealloc
// 257: 4c 89 e7                      movq    %r12, %rdi
// 25a: ff d0                         callq   *%rax
// 25c: 85 ed                         testl   %ebp, %ebp
// 25e: 0f 89 22 ff ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 264: e9 8d 00 00 00                jmp     0x2f6 <_JIT_ENTRY+0x2f6>
// 269: 49 29 de                      subq    %rbx, %r14
// 26c: 49 83 c6 b8                   addq    $-0x48, %r14
// 270: 49 c1 ee 03                   shrq    $0x3, %r14
// 274: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 278: 48 8b 03                      movq    (%rbx), %rax
// 27b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027d:  R_X86_64_64  _JIT_TARGET
// 285: 89 c9                         movl    %ecx, %ecx
// 287: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 28b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 291: eb 78                         jmp     0x30b <_JIT_ENTRY+0x30b>
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  _Py_Dealloc
// 29d: 4c 89 ef                      movq    %r13, %rdi
// 2a0: ff d0                         callq   *%rax
// 2a2: 49 8b 04 24                   movq    (%r12), %rax
// 2a6: 48 85 c0                      testq   %rax, %rax
// 2a9: 0f 8f 6e fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 2af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b1:  R_X86_64_64  .rodata.str1.1
// 2b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bb:  R_X86_64_64  _Py_NegativeRefcount
// 2c3: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2c8: 4c 89 e2                      movq    %r12, %rdx
// 2cb: ff d0                         callq   *%rax
// 2cd: 49 8b 04 24                   movq    (%r12), %rax
// 2d1: 85 c0                         testl   %eax, %eax
// 2d3: 78 21                         js      0x2f6 <_JIT_ENTRY+0x2f6>
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2df: ff d0                         callq   *%rax
// 2e1: 49 ff 0c 24                   decq    (%r12)
// 2e5: 75 0f                         jne     0x2f6 <_JIT_ENTRY+0x2f6>
// 2e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e9:  R_X86_64_64  _Py_Dealloc
// 2f1: 4c 89 e7                      movq    %r12, %rdi
// 2f4: ff d0                         callq   *%rax
// 2f6: 49 83 c6 f0                   addq    $-0x10, %r14
// 2fa: 49 29 de                      subq    %rbx, %r14
// 2fd: 49 83 c6 b8                   addq    $-0x48, %r14
// 301: 49 c1 ee 03                   shrq    $0x3, %r14
// 305: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 309: 31 c0                         xorl    %eax, %eax
// 30b: 48 83 c4 18                   addq    $0x18, %rsp
// 30f: 5b                            popq    %rbx
// 310: 41 5c                         popq    %r12
// 312: 41 5d                         popq    %r13
// 314: 41 5e                         popq    %r14
// 316: 41 5f                         popq    %r15
// 318: 5d                            popq    %rbp
// 319: c3                            retq
// 31a: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_GLOBAL_MODULE_code_body[795] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x83, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x92, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xb0, 0x01, 0x00, 0x00, 0xe9, 0xcc, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xcf, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x70, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x62, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x89, 0x4e, 0xf0, 0x49, 0x89, 0x46, 0xf8, 0x48, 0x8b, 0x43, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x64, 0x10, 0x28, 0x4d, 0x85, 0xe4, 0x74, 0x76, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x46, 0x08, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x22, 0xff, 0xff, 0xff, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x78, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x6e, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_LOAD_GLOBAL_MODULE_code_holes[26] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_GLOBAL_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_GLOBAL_MODULE_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_LOCALS
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_LOCALS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 3a 01 00 00             je      0x249 <_JIT_ENTRY+0x249>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 49 01 00 00             jle     0x264 <_JIT_ENTRY+0x264>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 66 01 00 00             jns     0x289 <_JIT_ENTRY+0x289>
// 123: e9 81 01 00 00                jmp     0x2a9 <_JIT_ENTRY+0x2a9>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 8c 00 00 00             je      0x205 <_JIT_ENTRY+0x205>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 28 01 00 00             js      0x2a9 <_JIT_ENTRY+0x2a9>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 1a 01 00 00             je      0x2a9 <_JIT_ENTRY+0x2a9>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 4d 8b 7e 28                   movq    0x28(%r14), %r15
// 1c0: 4d 85 ff                      testq   %r15, %r15
// 1c3: 74 5c                         je      0x221 <_JIT_ENTRY+0x221>
// 1c5: 41 8b 07                      movl    (%r15), %eax
// 1c8: ff c0                         incl    %eax
// 1ca: 74 0f                         je      0x1db <_JIT_ENTRY+0x1db>
// 1cc: 41 89 07                      movl    %eax, (%r15)
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 4c 89 3b                      movq    %r15, (%rbx)
// 1de: 48 83 c3 08                   addq    $0x8, %rbx
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _JIT_CONTINUE
// 1ec: 4c 89 f7                      movq    %r14, %rdi
// 1ef: 48 89 de                      movq    %rbx, %rsi
// 1f2: 4c 89 e2                      movq    %r12, %rdx
// 1f5: 48 83 c4 18                   addq    $0x18, %rsp
// 1f9: 5b                            popq    %rbx
// 1fa: 41 5c                         popq    %r12
// 1fc: 41 5d                         popq    %r13
// 1fe: 41 5e                         popq    %r14
// 200: 41 5f                         popq    %r15
// 202: 5d                            popq    %rbp
// 203: ff e0                         jmpq    *%rax
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_Dealloc
// 20f: 4c 89 ff                      movq    %r15, %rdi
// 212: ff d0                         callq   *%rax
// 214: 85 ed                         testl   %ebp, %ebp
// 216: 0f 89 65 ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 21c: e9 88 00 00 00                jmp     0x2a9 <_JIT_ENTRY+0x2a9>
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  PyExc_SystemError
// 22b: 48 8b 30                      movq    (%rax), %rsi
// 22e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000230:  R_X86_64_64  .rodata.str1.1+0x39
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _PyErr_SetString
// 242: 4c 89 e7                      movq    %r12, %rdi
// 245: ff d0                         callq   *%rax
// 247: eb 64                         jmp     0x2ad <_JIT_ENTRY+0x2ad>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_Dealloc
// 253: 4c 89 ef                      movq    %r13, %rdi
// 256: ff d0                         callq   *%rax
// 258: 49 8b 07                      movq    (%r15), %rax
// 25b: 48 85 c0                      testq   %rax, %rax
// 25e: 0f 8f b7 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 264: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000266:  R_X86_64_64  .rodata.str1.1
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_NegativeRefcount
// 278: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 27d: 4c 89 fa                      movq    %r15, %rdx
// 280: ff d0                         callq   *%rax
// 282: 49 8b 07                      movq    (%r15), %rax
// 285: 85 c0                         testl   %eax, %eax
// 287: 78 20                         js      0x2a9 <_JIT_ENTRY+0x2a9>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 293: ff d0                         callq   *%rax
// 295: 49 ff 0f                      decq    (%r15)
// 298: 75 0f                         jne     0x2a9 <_JIT_ENTRY+0x2a9>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_Dealloc
// 2a4: 4c 89 ff                      movq    %r15, %rdi
// 2a7: ff d0                         callq   *%rax
// 2a9: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2ad: 4c 29 f3                      subq    %r14, %rbx
// 2b0: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2b4: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2b8: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2bc: 31 c0                         xorl    %eax, %eax
// 2be: 48 83 c4 18                   addq    $0x18, %rsp
// 2c2: 5b                            popq    %rbx
// 2c3: 41 5c                         popq    %r12
// 2c5: 41 5d                         popq    %r13
// 2c7: 41 5e                         popq    %r14
// 2c9: 41 5f                         popq    %r15
// 2cb: 5d                            popq    %rbp
// 2cc: c3                            retq
// 2cd: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_LOCALS_code_body[718] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x3a, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x49, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x66, 0x01, 0x00, 0x00, 0xe9, 0x81, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x28, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x1a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x4d, 0x8b, 0x7e, 0x28, 0x4d, 0x85, 0xff, 0x74, 0x5c, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x65, 0xff, 0xff, 0xff, 0xe9, 0x88, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x64, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xb7, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_LOAD_LOCALS_code_holes[26] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found\x00'
// 49: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_LOCALS_data_body[81] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_LOCALS_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_NAME
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_NAME.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 3e: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 10                leaq    0x10(%rsp), %rdx
// 56: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 70 01 00 00             je      0x280 <_JIT_ENTRY+0x280>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 7f 01 00 00             jle     0x29c <_JIT_ENTRY+0x29c>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 9d 01 00 00             jns     0x2c2 <_JIT_ENTRY+0x2c2>
// 125: e9 b9 01 00 00                jmp     0x2e3 <_JIT_ENTRY+0x2e3>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 be 00 00 00             je      0x23c <_JIT_ENTRY+0x23c>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 5d 01 00 00             js      0x2e3 <_JIT_ENTRY+0x2e3>
// 186: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 4f 01 00 00             je      0x2e3 <_JIT_ENTRY+0x2e3>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 48 39 c7                      cmpq    %rax, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b4: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1b9: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1bd: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1c1: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// 1c5: 48 85 ff                      testq   %rdi, %rdi
// 1c8: 0f 84 8a 00 00 00             je      0x258 <_JIT_ENTRY+0x258>
// 1ce: 49 8b 06                      movq    (%r14), %rax
// 1d1: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1d5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d7:  R_X86_64_64  _JIT_OPARG
// 1df: 0f b7 c9                      movzwl  %cx, %ecx
// 1e2: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 1e7: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001e9:  R_X86_64_64  PyMapping_GetOptionalItem
// 1f1: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1f6: 4c 89 e6                      movq    %r12, %rsi
// 1f9: 41 ff d5                      callq   *%r13
// 1fc: 85 c0                         testl   %eax, %eax
// 1fe: 0f 88 e3 00 00 00             js      0x2e7 <_JIT_ENTRY+0x2e7>
// 204: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 209: 48 85 c0                      testq   %rax, %rax
// 20c: 0f 84 f5 00 00 00             je      0x307 <_JIT_ENTRY+0x307>
// 212: 48 89 03                      movq    %rax, (%rbx)
// 215: 48 83 c3 08                   addq    $0x8, %rbx
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_CONTINUE
// 223: 4c 89 f7                      movq    %r14, %rdi
// 226: 48 89 de                      movq    %rbx, %rsi
// 229: 4c 89 fa                      movq    %r15, %rdx
// 22c: 48 83 c4 18                   addq    $0x18, %rsp
// 230: 5b                            popq    %rbx
// 231: 41 5c                         popq    %r12
// 233: 41 5d                         popq    %r13
// 235: 41 5e                         popq    %r14
// 237: 41 5f                         popq    %r15
// 239: 5d                            popq    %rbp
// 23a: ff e0                         jmpq    *%rax
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_Dealloc
// 246: 4c 89 e7                      movq    %r12, %rdi
// 249: ff d0                         callq   *%rax
// 24b: 85 ed                         testl   %ebp, %ebp
// 24d: 0f 89 33 ff ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 253: e9 8b 00 00 00                jmp     0x2e3 <_JIT_ENTRY+0x2e3>
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  PyExc_SystemError
// 262: 48 8b 30                      movq    (%rax), %rsi
// 265: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000267:  R_X86_64_64  .rodata.str1.1+0x56
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _PyErr_SetString
// 279: 4c 89 ff                      movq    %r15, %rdi
// 27c: ff d0                         callq   *%rax
// 27e: eb 67                         jmp     0x2e7 <_JIT_ENTRY+0x2e7>
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_Dealloc
// 28a: 4c 89 ef                      movq    %r13, %rdi
// 28d: ff d0                         callq   *%rax
// 28f: 49 8b 04 24                   movq    (%r12), %rax
// 293: 48 85 c0                      testq   %rax, %rax
// 296: 0f 8f 81 fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 29c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029e:  R_X86_64_64  .rodata.str1.1
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  _Py_NegativeRefcount
// 2b0: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2b5: 4c 89 e2                      movq    %r12, %rdx
// 2b8: ff d0                         callq   *%rax
// 2ba: 49 8b 04 24                   movq    (%r12), %rax
// 2be: 85 c0                         testl   %eax, %eax
// 2c0: 78 21                         js      0x2e3 <_JIT_ENTRY+0x2e3>
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2cc: ff d0                         callq   *%rax
// 2ce: 49 ff 0c 24                   decq    (%r12)
// 2d2: 75 0f                         jne     0x2e3 <_JIT_ENTRY+0x2e3>
// 2d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d6:  R_X86_64_64  _Py_Dealloc
// 2de: 4c 89 e7                      movq    %r12, %rdi
// 2e1: ff d0                         callq   *%rax
// 2e3: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2e7: 4c 29 f3                      subq    %r14, %rbx
// 2ea: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2ee: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2f2: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2f6: 31 c0                         xorl    %eax, %eax
// 2f8: 48 83 c4 18                   addq    $0x18, %rsp
// 2fc: 5b                            popq    %rbx
// 2fd: 41 5c                         popq    %r12
// 2ff: 41 5d                         popq    %r13
// 301: 41 5e                         popq    %r14
// 303: 41 5f                         popq    %r15
// 305: 5d                            popq    %rbp
// 306: c3                            retq
// 307: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 30b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030d:  R_X86_64_64  PyDict_GetItemRef
// 315: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 31a: 4c 89 e6                      movq    %r12, %rsi
// 31d: ff d0                         callq   *%rax
// 31f: 85 c0                         testl   %eax, %eax
// 321: 78 c4                         js      0x2e7 <_JIT_ENTRY+0x2e7>
// 323: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 328: 48 85 c0                      testq   %rax, %rax
// 32b: 0f 85 e1 fe ff ff             jne     0x212 <_JIT_ENTRY+0x212>
// 331: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// 335: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 33a: 4c 89 e6                      movq    %r12, %rsi
// 33d: 41 ff d5                      callq   *%r13
// 340: 85 c0                         testl   %eax, %eax
// 342: 78 a3                         js      0x2e7 <_JIT_ENTRY+0x2e7>
// 344: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 349: 48 85 c0                      testq   %rax, %rax
// 34c: 0f 85 c0 fe ff ff             jne     0x212 <_JIT_ENTRY+0x212>
// 352: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000354:  R_X86_64_64  PyExc_NameError
// 35c: 48 8b 30                      movq    (%rax), %rsi
// 35f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000361:  R_X86_64_64  .rodata.str1.1+0x39
// 369: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036b:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 373: 4c 89 ff                      movq    %r15, %rdi
// 376: 4c 89 e1                      movq    %r12, %rcx
// 379: ff d0                         callq   *%rax
// 37b: e9 67 ff ff ff                jmp     0x2e7 <_JIT_ENTRY+0x2e7>
// 380: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_NAME_code_body[897] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x10, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x70, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x7f, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x9d, 0x01, 0x00, 0x00, 0xe9, 0xb9, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xbe, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x5d, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x4f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x8a, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x88, 0xe3, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xf5, 0x00, 0x00, 0x00, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x33, 0xff, 0xff, 0xff, 0xe9, 0x8b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x67, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x81, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xc4, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0xe1, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0xa3, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0xc0, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x67, 0xff, 0xff, 0xff};
static const Hole _CHECK_EG_MATCHplus_LOAD_NAME_code_holes[31] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x56},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x354, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x361, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x36b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00no locals found\x00"
// 66: 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_NAME_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_NAME_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_SUPER_ATTR_ATTR
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_SUPER_ATTR_ATTR.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3c                         js      0x71 <_JIT_ENTRY+0x71>
// 35: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 3d: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 50: 48 89 e2                      movq    %rsp, %rdx
// 53: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 58: 4c 89 ef                      movq    %r13, %rdi
// 5b: 4c 89 e6                      movq    %r12, %rsi
// 5e: ff d0                         callq   *%rax
// 60: 89 c5                         movl    %eax, %ebp
// 62: 49 8b 45 00                   movq    (%r13), %rax
// 66: 48 85 c0                      testq   %rax, %rax
// 69: 7e 18                         jle     0x83 <_JIT_ENTRY+0x83>
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 79 3a                         jns     0xa9 <_JIT_ENTRY+0xa9>
// 6f: eb 4a                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 71: 49 8b 45 00                   movq    (%r13), %rax
// 75: 48 85 c0                      testq   %rax, %rax
// 78: 7e 57                         jle     0xd1 <_JIT_ENTRY+0xd1>
// 7a: 85 c0                         testl   %eax, %eax
// 7c: 79 79                         jns     0xf7 <_JIT_ENTRY+0xf7>
// 7e: e9 8a 00 00 00                jmp     0x10d <_JIT_ENTRY+0x10d>
// 83: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000085:  R_X86_64_64  .rodata.str1.1
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_NegativeRefcount
// 97: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9c: 4c 89 ea                      movq    %r13, %rdx
// 9f: ff d0                         callq   *%rax
// a1: 49 8b 45 00                   movq    (%r13), %rax
// a5: 85 c0                         testl   %eax, %eax
// a7: 78 12                         js      0xbb <_JIT_ENTRY+0xbb>
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b3: ff d0                         callq   *%rax
// b5: 49 ff 4d 00                   decq    (%r13)
// b9: 74 6c                         je      0x127 <_JIT_ENTRY+0x127>
// bb: 49 8b 04 24                   movq    (%r12), %rax
// bf: 48 85 c0                      testq   %rax, %rax
// c2: 7e 7b                         jle     0x13f <_JIT_ENTRY+0x13f>
// c4: 85 c0                         testl   %eax, %eax
// c6: 0f 89 99 00 00 00             jns     0x165 <_JIT_ENTRY+0x165>
// cc: e9 aa 00 00 00                jmp     0x17b <_JIT_ENTRY+0x17b>
// d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d3:  R_X86_64_64  .rodata.str1.1
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_NegativeRefcount
// e5: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ea: 4c 89 ea                      movq    %r13, %rdx
// ed: ff d0                         callq   *%rax
// ef: 49 8b 45 00                   movq    (%r13), %rax
// f3: 85 c0                         testl   %eax, %eax
// f5: 78 16                         js      0x10d <_JIT_ENTRY+0x10d>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 101: ff d0                         callq   *%rax
// 103: 49 ff 4d 00                   decq    (%r13)
// 107: 0f 84 16 01 00 00             je      0x223 <_JIT_ENTRY+0x223>
// 10d: 49 8b 04 24                   movq    (%r12), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 0f 8e 25 01 00 00             jle     0x23f <_JIT_ENTRY+0x23f>
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 0f 89 43 01 00 00             jns     0x265 <_JIT_ENTRY+0x265>
// 122: e9 5f 01 00 00                jmp     0x286 <_JIT_ENTRY+0x286>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_Dealloc
// 131: 4c 89 ef                      movq    %r13, %rdi
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 85                         jg      0xc4 <_JIT_ENTRY+0xc4>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 16                         js      0x17b <_JIT_ENTRY+0x17b>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0c 24                   decq    (%r12)
// 175: 0f 84 8f 00 00 00             je      0x20a <_JIT_ENTRY+0x20a>
// 17b: 85 ed                         testl   %ebp, %ebp
// 17d: 0f 88 03 01 00 00             js      0x286 <_JIT_ENTRY+0x286>
// 183: 48 8b 3c 24                   movq    (%rsp), %rdi
// 187: 48 85 ff                      testq   %rdi, %rdi
// 18a: 0f 84 f6 00 00 00             je      0x286 <_JIT_ENTRY+0x286>
// 190: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000192:  R_X86_64_64  _Py_NoneStruct
// 19a: 4c 39 e7                      cmpq    %r12, %rdi
// 19d: 74 10                         je      0x1af <_JIT_ENTRY+0x1af>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  PyErr_SetHandledException
// 1a9: ff d0                         callq   *%rax
// 1ab: 4c 8b 24 24                   movq    (%rsp), %r12
// 1af: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 1b4: 48 89 6b f0                   movq    %rbp, -0x10(%rbx)
// 1b8: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 1bc: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001be:  R_X86_64_64  PySuper_Type
// 1c6: 4c 39 6b e8                   cmpq    %r13, -0x18(%rbx)
// 1ca: 75 11                         jne     0x1dd <_JIT_ENTRY+0x1dd>
// 1cc: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 1d0: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 1d7: 0f 85 c9 00 00 00             jne     0x2a6 <_JIT_ENTRY+0x2a6>
// 1dd: 4c 29 f3                      subq    %r14, %rbx
// 1e0: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1e4: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1e8: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1ec: 49 8b 06                      movq    (%r14), %rax
// 1ef: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f1:  R_X86_64_64  _JIT_TARGET
// 1f9: 89 c9                         movl    %ecx, %ecx
// 1fb: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1ff: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 205: e9 8d 00 00 00                jmp     0x297 <_JIT_ENTRY+0x297>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _Py_Dealloc
// 214: 4c 89 e7                      movq    %r12, %rdi
// 217: ff d0                         callq   *%rax
// 219: 85 ed                         testl   %ebp, %ebp
// 21b: 0f 89 62 ff ff ff             jns     0x183 <_JIT_ENTRY+0x183>
// 221: eb 63                         jmp     0x286 <_JIT_ENTRY+0x286>
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_Dealloc
// 22d: 4c 89 ef                      movq    %r13, %rdi
// 230: ff d0                         callq   *%rax
// 232: 49 8b 04 24                   movq    (%r12), %rax
// 236: 48 85 c0                      testq   %rax, %rax
// 239: 0f 8f db fe ff ff             jg      0x11a <_JIT_ENTRY+0x11a>
// 23f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000241:  R_X86_64_64  .rodata.str1.1
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_NegativeRefcount
// 253: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 258: 4c 89 e2                      movq    %r12, %rdx
// 25b: ff d0                         callq   *%rax
// 25d: 49 8b 04 24                   movq    (%r12), %rax
// 261: 85 c0                         testl   %eax, %eax
// 263: 78 21                         js      0x286 <_JIT_ENTRY+0x286>
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26f: ff d0                         callq   *%rax
// 271: 49 ff 0c 24                   decq    (%r12)
// 275: 75 0f                         jne     0x286 <_JIT_ENTRY+0x286>
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _Py_Dealloc
// 281: 4c 89 e7                      movq    %r12, %rdi
// 284: ff d0                         callq   *%rax
// 286: 4c 29 f3                      subq    %r14, %rbx
// 289: 48 83 c3 a8                   addq    $-0x58, %rbx
// 28d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 291: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 295: 31 c0                         xorl    %eax, %eax
// 297: 48 83 c4 18                   addq    $0x18, %rsp
// 29b: 5b                            popq    %rbx
// 29c: 41 5c                         popq    %r12
// 29e: 41 5d                         popq    %r13
// 2a0: 41 5e                         popq    %r14
// 2a2: 41 5f                         popq    %r15
// 2a4: 5d                            popq    %rbp
// 2a5: c3                            retq
// 2a6: 49 8b 06                      movq    (%r14), %rax
// 2a9: 48 8b 40 20                   movq    0x20(%rax), %rax
// 2ad: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002af:  R_X86_64_64  _JIT_OPARG
// 2b7: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 2bd: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _PySuper_Lookup
// 2cc: 48 89 ef                      movq    %rbp, %rdi
// 2cf: 4c 89 e6                      movq    %r12, %rsi
// 2d2: 31 c9                         xorl    %ecx, %ecx
// 2d4: ff d0                         callq   *%rax
// 2d6: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 2db: 49 8b 45 00                   movq    (%r13), %rax
// 2df: 48 85 c0                      testq   %rax, %rax
// 2e2: 7f 22                         jg      0x306 <_JIT_ENTRY+0x306>
// 2e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e6:  R_X86_64_64  .rodata.str1.1
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_NegativeRefcount
// 2f8: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 2fd: 4c 89 ea                      movq    %r13, %rdx
// 300: ff d0                         callq   *%rax
// 302: 49 8b 45 00                   movq    (%r13), %rax
// 306: 85 c0                         testl   %eax, %eax
// 308: 78 28                         js      0x332 <_JIT_ENTRY+0x332>
// 30a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 314: ff d0                         callq   *%rax
// 316: 49 ff 4d 00                   decq    (%r13)
// 31a: 75 16                         jne     0x332 <_JIT_ENTRY+0x332>
// 31c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000031e:  R_X86_64_64  PySuper_Type
// 326: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000328:  R_X86_64_64  _Py_Dealloc
// 330: ff d0                         callq   *%rax
// 332: 48 8b 45 00                   movq    (%rbp), %rax
// 336: 48 85 c0                      testq   %rax, %rax
// 339: 7f 22                         jg      0x35d <_JIT_ENTRY+0x35d>
// 33b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000033d:  R_X86_64_64  .rodata.str1.1
// 345: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000347:  R_X86_64_64  _Py_NegativeRefcount
// 34f: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 354: 48 89 ea                      movq    %rbp, %rdx
// 357: ff d0                         callq   *%rax
// 359: 48 8b 45 00                   movq    (%rbp), %rax
// 35d: 85 c0                         testl   %eax, %eax
// 35f: 78 21                         js      0x382 <_JIT_ENTRY+0x382>
// 361: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000363:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 36b: ff d0                         callq   *%rax
// 36d: 48 ff 4d 00                   decq    (%rbp)
// 371: 75 0f                         jne     0x382 <_JIT_ENTRY+0x382>
// 373: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000375:  R_X86_64_64  _Py_Dealloc
// 37d: 48 89 ef                      movq    %rbp, %rdi
// 380: ff d0                         callq   *%rax
// 382: 49 8b 04 24                   movq    (%r12), %rax
// 386: 48 85 c0                      testq   %rax, %rax
// 389: 7f 22                         jg      0x3ad <_JIT_ENTRY+0x3ad>
// 38b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000038d:  R_X86_64_64  .rodata.str1.1
// 395: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000397:  R_X86_64_64  _Py_NegativeRefcount
// 39f: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 3a4: 4c 89 e2                      movq    %r12, %rdx
// 3a7: ff d0                         callq   *%rax
// 3a9: 49 8b 04 24                   movq    (%r12), %rax
// 3ad: 85 c0                         testl   %eax, %eax
// 3af: 78 21                         js      0x3d2 <_JIT_ENTRY+0x3d2>
// 3b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3bb: ff d0                         callq   *%rax
// 3bd: 49 ff 0c 24                   decq    (%r12)
// 3c1: 75 0f                         jne     0x3d2 <_JIT_ENTRY+0x3d2>
// 3c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c5:  R_X86_64_64  _Py_Dealloc
// 3cd: 4c 89 e7                      movq    %r12, %rdi
// 3d0: ff d0                         callq   *%rax
// 3d2: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 3d7: 48 85 c0                      testq   %rax, %rax
// 3da: 74 2b                         je      0x407 <_JIT_ENTRY+0x407>
// 3dc: 48 89 43 e8                   movq    %rax, -0x18(%rbx)
// 3e0: 48 83 c3 f0                   addq    $-0x10, %rbx
// 3e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003e6:  R_X86_64_64  _JIT_CONTINUE
// 3ee: 4c 89 f7                      movq    %r14, %rdi
// 3f1: 48 89 de                      movq    %rbx, %rsi
// 3f4: 4c 89 fa                      movq    %r15, %rdx
// 3f7: 48 83 c4 18                   addq    $0x18, %rsp
// 3fb: 5b                            popq    %rbx
// 3fc: 41 5c                         popq    %r12
// 3fe: 41 5d                         popq    %r13
// 400: 41 5e                         popq    %r14
// 402: 41 5f                         popq    %r15
// 404: 5d                            popq    %rbp
// 405: ff e0                         jmpq    *%rax
// 407: 48 83 c3 f8                   addq    $-0x8, %rbx
// 40b: e9 76 fe ff ff                jmp     0x286 <_JIT_ENTRY+0x286>
// 410: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_SUPER_ATTR_ATTR_code_body[1041] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x16, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x25, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x43, 0x01, 0x00, 0x00, 0xe9, 0x5f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x8f, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x03, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xf6, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0x6b, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x6b, 0xe8, 0x75, 0x11, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x85, 0xc9, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x62, 0xff, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xdb, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x74, 0x2b, 0x48, 0x89, 0x43, 0xe8, 0x48, 0x83, 0xc3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x83, 0xc3, 0xf8, 0xe9, 0x76, 0xfe, 0xff, 0xff};
static const Hole _CHECK_EG_MATCHplus_LOAD_SUPER_ATTR_ATTR_code_holes[39] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2af, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x31e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x328, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x347, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x363, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x375, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x38d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x397, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3e6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_SUPER_ATTR_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_SUPER_ATTR_ATTR_data_holes[1];

// _CHECK_EG_MATCHplus_LOAD_SUPER_ATTR_METHOD
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_LOAD_SUPER_ATTR_METHOD.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 8b 6e f0                   movq    -0x10(%rsi), %rbp
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3d                         js      0x72 <_JIT_ENTRY+0x72>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 50: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 55: 48 89 e1                      movq    %rsp, %rcx
// 58: 48 89 ef                      movq    %rbp, %rdi
// 5b: 4c 89 e6                      movq    %r12, %rsi
// 5e: ff d0                         callq   *%rax
// 60: 41 89 c5                      movl    %eax, %r13d
// 63: 48 8b 45 00                   movq    (%rbp), %rax
// 67: 48 85 c0                      testq   %rax, %rax
// 6a: 7e 18                         jle     0x84 <_JIT_ENTRY+0x84>
// 6c: 85 c0                         testl   %eax, %eax
// 6e: 79 3a                         jns     0xaa <_JIT_ENTRY+0xaa>
// 70: eb 4a                         jmp     0xbc <_JIT_ENTRY+0xbc>
// 72: 48 8b 45 00                   movq    (%rbp), %rax
// 76: 48 85 c0                      testq   %rax, %rax
// 79: 7e 57                         jle     0xd2 <_JIT_ENTRY+0xd2>
// 7b: 85 c0                         testl   %eax, %eax
// 7d: 79 79                         jns     0xf8 <_JIT_ENTRY+0xf8>
// 7f: e9 8a 00 00 00                jmp     0x10e <_JIT_ENTRY+0x10e>
// 84: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000086:  R_X86_64_64  .rodata.str1.1
// 8e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000090:  R_X86_64_64  _Py_NegativeRefcount
// 98: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9d: 48 89 ea                      movq    %rbp, %rdx
// a0: ff d0                         callq   *%rax
// a2: 48 8b 45 00                   movq    (%rbp), %rax
// a6: 85 c0                         testl   %eax, %eax
// a8: 78 12                         js      0xbc <_JIT_ENTRY+0xbc>
// aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ac:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b4: ff d0                         callq   *%rax
// b6: 48 ff 4d 00                   decq    (%rbp)
// ba: 74 6c                         je      0x128 <_JIT_ENTRY+0x128>
// bc: 49 8b 04 24                   movq    (%r12), %rax
// c0: 48 85 c0                      testq   %rax, %rax
// c3: 7e 7b                         jle     0x140 <_JIT_ENTRY+0x140>
// c5: 85 c0                         testl   %eax, %eax
// c7: 0f 89 99 00 00 00             jns     0x166 <_JIT_ENTRY+0x166>
// cd: e9 aa 00 00 00                jmp     0x17c <_JIT_ENTRY+0x17c>
// d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d4:  R_X86_64_64  .rodata.str1.1
// dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000de:  R_X86_64_64  _Py_NegativeRefcount
// e6: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// eb: 48 89 ea                      movq    %rbp, %rdx
// ee: ff d0                         callq   *%rax
// f0: 48 8b 45 00                   movq    (%rbp), %rax
// f4: 85 c0                         testl   %eax, %eax
// f6: 78 16                         js      0x10e <_JIT_ENTRY+0x10e>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 102: ff d0                         callq   *%rax
// 104: 48 ff 4d 00                   decq    (%rbp)
// 108: 0f 84 19 01 00 00             je      0x227 <_JIT_ENTRY+0x227>
// 10e: 49 8b 04 24                   movq    (%r12), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 28 01 00 00             jle     0x243 <_JIT_ENTRY+0x243>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 46 01 00 00             jns     0x269 <_JIT_ENTRY+0x269>
// 123: e9 62 01 00 00                jmp     0x28a <_JIT_ENTRY+0x28a>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 48 89 ef                      movq    %rbp, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 04 24                   movq    (%r12), %rax
// 13b: 48 85 c0                      testq   %rax, %rax
// 13e: 7f 85                         jg      0xc5 <_JIT_ENTRY+0xc5>
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 159: 4c 89 e2                      movq    %r12, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 04 24                   movq    (%r12), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 16                         js      0x17c <_JIT_ENTRY+0x17c>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 0c 24                   decq    (%r12)
// 176: 0f 84 91 00 00 00             je      0x20d <_JIT_ENTRY+0x20d>
// 17c: 45 85 ed                      testl   %r13d, %r13d
// 17f: 0f 88 05 01 00 00             js      0x28a <_JIT_ENTRY+0x28a>
// 185: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18a: 48 85 ff                      testq   %rdi, %rdi
// 18d: 0f 84 f7 00 00 00             je      0x28a <_JIT_ENTRY+0x28a>
// 193: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000195:  R_X86_64_64  _Py_NoneStruct
// 19d: 4c 39 e7                      cmpq    %r12, %rdi
// 1a0: 74 11                         je      0x1b3 <_JIT_ENTRY+0x1b3>
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  PyErr_SetHandledException
// 1ac: ff d0                         callq   *%rax
// 1ae: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 1b3: 48 8b 2c 24                   movq    (%rsp), %rbp
// 1b7: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 1bb: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 1bf: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001c1:  R_X86_64_64  PySuper_Type
// 1c9: 4d 39 6e e8                   cmpq    %r13, -0x18(%r14)
// 1cd: 75 11                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1cf: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 1d3: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 1da: 0f 85 ca 00 00 00             jne     0x2aa <_JIT_ENTRY+0x2aa>
// 1e0: 49 29 de                      subq    %rbx, %r14
// 1e3: 49 83 c6 b8                   addq    $-0x48, %r14
// 1e7: 49 c1 ee 03                   shrq    $0x3, %r14
// 1eb: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1ef: 48 8b 03                      movq    (%rbx), %rax
// 1f2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f4:  R_X86_64_64  _JIT_TARGET
// 1fc: 89 c9                         movl    %ecx, %ecx
// 1fe: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 202: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 208: e9 8e 00 00 00                jmp     0x29b <_JIT_ENTRY+0x29b>
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _Py_Dealloc
// 217: 4c 89 e7                      movq    %r12, %rdi
// 21a: ff d0                         callq   *%rax
// 21c: 45 85 ed                      testl   %r13d, %r13d
// 21f: 0f 89 60 ff ff ff             jns     0x185 <_JIT_ENTRY+0x185>
// 225: eb 63                         jmp     0x28a <_JIT_ENTRY+0x28a>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _Py_Dealloc
// 231: 48 89 ef                      movq    %rbp, %rdi
// 234: ff d0                         callq   *%rax
// 236: 49 8b 04 24                   movq    (%r12), %rax
// 23a: 48 85 c0                      testq   %rax, %rax
// 23d: 0f 8f d8 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 243: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000245:  R_X86_64_64  .rodata.str1.1
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_NegativeRefcount
// 257: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 25c: 4c 89 e2                      movq    %r12, %rdx
// 25f: ff d0                         callq   *%rax
// 261: 49 8b 04 24                   movq    (%r12), %rax
// 265: 85 c0                         testl   %eax, %eax
// 267: 78 21                         js      0x28a <_JIT_ENTRY+0x28a>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 273: ff d0                         callq   *%rax
// 275: 49 ff 0c 24                   decq    (%r12)
// 279: 75 0f                         jne     0x28a <_JIT_ENTRY+0x28a>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_Dealloc
// 285: 4c 89 e7                      movq    %r12, %rdi
// 288: ff d0                         callq   *%rax
// 28a: 49 29 de                      subq    %rbx, %r14
// 28d: 49 83 c6 a8                   addq    $-0x58, %r14
// 291: 49 c1 ee 03                   shrq    $0x3, %r14
// 295: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 299: 31 c0                         xorl    %eax, %eax
// 29b: 48 83 c4 18                   addq    $0x18, %rsp
// 29f: 5b                            popq    %rbx
// 2a0: 41 5c                         popq    %r12
// 2a2: 41 5d                         popq    %r13
// 2a4: 41 5e                         popq    %r14
// 2a6: 41 5f                         popq    %r15
// 2a8: 5d                            popq    %rbp
// 2a9: c3                            retq
// 2aa: 48 8b 03                      movq    (%rbx), %rax
// 2ad: 48 8b 40 20                   movq    0x20(%rax), %rax
// 2b1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002b3:  R_X86_64_64  _JIT_OPARG
// 2bb: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 2c1: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 2c6: c7 04 24 00 00 00 00          movl    $0x0, (%rsp)
// 2cd: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 2d2: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002d4:  R_X86_64_64  PyObject_GenericGetAttr
// 2dc: 31 c9                         xorl    %ecx, %ecx
// 2de: 48 39 b0 90 00 00 00          cmpq    %rsi, 0x90(%rax)
// 2e5: 48 89 e0                      movq    %rsp, %rax
// 2e8: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _PySuper_Lookup
// 2f6: 48 89 ef                      movq    %rbp, %rdi
// 2f9: 4c 89 e6                      movq    %r12, %rsi
// 2fc: ff d0                         callq   *%rax
// 2fe: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 303: 49 8b 45 00                   movq    (%r13), %rax
// 307: 48 85 c0                      testq   %rax, %rax
// 30a: 7f 22                         jg      0x32e <_JIT_ENTRY+0x32e>
// 30c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000030e:  R_X86_64_64  .rodata.str1.1
// 316: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000318:  R_X86_64_64  _Py_NegativeRefcount
// 320: be 18 06 00 00                movl    $0x618, %esi            # imm = 0x618
// 325: 4c 89 ea                      movq    %r13, %rdx
// 328: ff d0                         callq   *%rax
// 32a: 49 8b 45 00                   movq    (%r13), %rax
// 32e: 85 c0                         testl   %eax, %eax
// 330: 78 28                         js      0x35a <_JIT_ENTRY+0x35a>
// 332: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000334:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 33c: ff d0                         callq   *%rax
// 33e: 49 ff 4d 00                   decq    (%r13)
// 342: 75 16                         jne     0x35a <_JIT_ENTRY+0x35a>
// 344: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000346:  R_X86_64_64  PySuper_Type
// 34e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000350:  R_X86_64_64  _Py_Dealloc
// 358: ff d0                         callq   *%rax
// 35a: 48 8b 45 00                   movq    (%rbp), %rax
// 35e: 48 85 c0                      testq   %rax, %rax
// 361: 7f 22                         jg      0x385 <_JIT_ENTRY+0x385>
// 363: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000365:  R_X86_64_64  .rodata.str1.1
// 36d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036f:  R_X86_64_64  _Py_NegativeRefcount
// 377: be 19 06 00 00                movl    $0x619, %esi            # imm = 0x619
// 37c: 48 89 ea                      movq    %rbp, %rdx
// 37f: ff d0                         callq   *%rax
// 381: 48 8b 45 00                   movq    (%rbp), %rax
// 385: 85 c0                         testl   %eax, %eax
// 387: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 38c: 78 21                         js      0x3af <_JIT_ENTRY+0x3af>
// 38e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000390:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 398: ff d0                         callq   *%rax
// 39a: 48 ff 4d 00                   decq    (%rbp)
// 39e: 75 0f                         jne     0x3af <_JIT_ENTRY+0x3af>
// 3a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a2:  R_X86_64_64  _Py_Dealloc
// 3aa: 48 89 ef                      movq    %rbp, %rdi
// 3ad: ff d0                         callq   *%rax
// 3af: 49 8d 6e f8                   leaq    -0x8(%r14), %rbp
// 3b3: 4d 85 ed                      testq   %r13, %r13
// 3b6: 0f 84 84 00 00 00             je      0x440 <_JIT_ENTRY+0x440>
// 3bc: 83 3c 24 00                   cmpl    $0x0, (%rsp)
// 3c0: 75 53                         jne     0x415 <_JIT_ENTRY+0x415>
// 3c2: 49 8b 04 24                   movq    (%r12), %rax
// 3c6: 48 85 c0                      testq   %rax, %rax
// 3c9: 7f 22                         jg      0x3ed <_JIT_ENTRY+0x3ed>
// 3cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003cd:  R_X86_64_64  .rodata.str1.1
// 3d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003d7:  R_X86_64_64  _Py_NegativeRefcount
// 3df: be 21 06 00 00                movl    $0x621, %esi            # imm = 0x621
// 3e4: 4c 89 e2                      movq    %r12, %rdx
// 3e7: ff d0                         callq   *%rax
// 3e9: 49 8b 04 24                   movq    (%r12), %rax
// 3ed: 85 c0                         testl   %eax, %eax
// 3ef: 78 21                         js      0x412 <_JIT_ENTRY+0x412>
// 3f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003f3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3fb: ff d0                         callq   *%rax
// 3fd: 49 ff 0c 24                   decq    (%r12)
// 401: 75 0f                         jne     0x412 <_JIT_ENTRY+0x412>
// 403: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000405:  R_X86_64_64  _Py_Dealloc
// 40d: 4c 89 e7                      movq    %r12, %rdi
// 410: ff d0                         callq   *%rax
// 412: 45 31 e4                      xorl    %r12d, %r12d
// 415: 4d 89 6e e8                   movq    %r13, -0x18(%r14)
// 419: 4d 89 66 f0                   movq    %r12, -0x10(%r14)
// 41d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000041f:  R_X86_64_64  _JIT_CONTINUE
// 427: 48 89 df                      movq    %rbx, %rdi
// 42a: 48 89 ee                      movq    %rbp, %rsi
// 42d: 4c 89 fa                      movq    %r15, %rdx
// 430: 48 83 c4 18                   addq    $0x18, %rsp
// 434: 5b                            popq    %rbx
// 435: 41 5c                         popq    %r12
// 437: 41 5d                         popq    %r13
// 439: 41 5e                         popq    %r14
// 43b: 41 5f                         popq    %r15
// 43d: 5d                            popq    %rbp
// 43e: ff e0                         jmpq    *%rax
// 440: 49 8b 04 24                   movq    (%r12), %rax
// 444: 48 85 c0                      testq   %rax, %rax
// 447: 7f 22                         jg      0x46b <_JIT_ENTRY+0x46b>
// 449: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000044b:  R_X86_64_64  .rodata.str1.1
// 453: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000455:  R_X86_64_64  _Py_NegativeRefcount
// 45d: be 1b 06 00 00                movl    $0x61b, %esi            # imm = 0x61B
// 462: 4c 89 e2                      movq    %r12, %rdx
// 465: ff d0                         callq   *%rax
// 467: 49 8b 04 24                   movq    (%r12), %rax
// 46b: 85 c0                         testl   %eax, %eax
// 46d: 78 21                         js      0x490 <_JIT_ENTRY+0x490>
// 46f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000471:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 479: ff d0                         callq   *%rax
// 47b: 49 ff 0c 24                   decq    (%r12)
// 47f: 75 0f                         jne     0x490 <_JIT_ENTRY+0x490>
// 481: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000483:  R_X86_64_64  _Py_Dealloc
// 48b: 4c 89 e7                      movq    %r12, %rdi
// 48e: ff d0                         callq   *%rax
// 490: 49 89 ee                      movq    %rbp, %r14
// 493: e9 f2 fd ff ff                jmp     0x28a <_JIT_ENTRY+0x28a>
// 498: 
static const unsigned char _CHECK_EG_MATCHplus_LOAD_SUPER_ATTR_METHOD_code_body[1177] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3d, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x89, 0xe1, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x41, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x19, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x28, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x46, 0x01, 0x00, 0x00, 0xe9, 0x62, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x91, 0x00, 0x00, 0x00, 0x45, 0x85, 0xed, 0x0f, 0x88, 0x05, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xf7, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x2c, 0x24, 0x49, 0x89, 0x6e, 0xf0, 0x4d, 0x89, 0x66, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x85, 0xca, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x45, 0x85, 0xed, 0x0f, 0x89, 0x60, 0xff, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xd8, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc9, 0x48, 0x39, 0xb0, 0x90, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe0, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x19, 0x06, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x6e, 0xf8, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x83, 0x3c, 0x24, 0x00, 0x75, 0x53, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x21, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x45, 0x31, 0xe4, 0x4d, 0x89, 0x6e, 0xe8, 0x4d, 0x89, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xee, 0xe9, 0xf2, 0xfd, 0xff, 0xff};
static const Hole _CHECK_EG_MATCHplus_LOAD_SUPER_ATTR_METHOD_code_holes[44] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GenericGetAttr, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x318, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x334, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x346, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x350, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x365, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x36f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x390, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3cd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x405, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x41f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x44b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x455, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x471, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x483, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_LOAD_SUPER_ATTR_METHOD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_LOAD_SUPER_ATTR_METHOD_data_holes[1];

// _CHECK_EG_MATCHplus_MAKE_CELL
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_MAKE_CELL.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 63                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 81 00 00 00             jns     0x106 <_JIT_ENTRY+0x106>
// 85: e9 9d 00 00 00                jmp     0x127 <_JIT_ENTRY+0x127>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c7 00 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// c6: 49 8b 04 24                   movq    (%r12), %rax
// ca: 48 85 c0                      testq   %rax, %rax
// cd: 0f 8e d6 00 00 00             jle     0x1a9 <_JIT_ENTRY+0x1a9>
// d3: 85 c0                         testl   %eax, %eax
// d5: 0f 89 f4 00 00 00             jns     0x1cf <_JIT_ENTRY+0x1cf>
// db: e9 05 01 00 00                jmp     0x1e5 <_JIT_ENTRY+0x1e5>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f9: 4c 89 ea                      movq    %r13, %rdx
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 21                         js      0x127 <_JIT_ENTRY+0x127>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 4d 00                   decq    (%r13)
// 116: 75 0f                         jne     0x127 <_JIT_ENTRY+0x127>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_Dealloc
// 122: 4c 89 ef                      movq    %r13, %rdi
// 125: ff d0                         callq   *%rax
// 127: 49 8b 04 24                   movq    (%r12), %rax
// 12b: 48 85 c0                      testq   %rax, %rax
// 12e: 7e 09                         jle     0x139 <_JIT_ENTRY+0x139>
// 130: 85 c0                         testl   %eax, %eax
// 132: 79 2f                         jns     0x163 <_JIT_ENTRY+0x163>
// 134: e9 bc 01 00 00                jmp     0x2f5 <_JIT_ENTRY+0x2f5>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_NegativeRefcount
// 14d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 152: 4c 89 e2                      movq    %r12, %rdx
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 92 01 00 00             js      0x2f5 <_JIT_ENTRY+0x2f5>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 7c 01 00 00             jne     0x2f5 <_JIT_ENTRY+0x2f5>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: 4c 89 e7                      movq    %r12, %rdi
// 186: ff d0                         callq   *%rax
// 188: e9 68 01 00 00                jmp     0x2f5 <_JIT_ENTRY+0x2f5>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: 4c 89 ef                      movq    %r13, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 49 8b 04 24                   movq    (%r12), %rax
// 1a0: 48 85 c0                      testq   %rax, %rax
// 1a3: 0f 8f 2a ff ff ff             jg      0xd3 <_JIT_ENTRY+0xd3>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 49 8b 04 24                   movq    (%r12), %rax
// 1cb: 85 c0                         testl   %eax, %eax
// 1cd: 78 16                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 49 ff 0c 24                   decq    (%r12)
// 1df: 0f 84 f9 00 00 00             je      0x2de <_JIT_ENTRY+0x2de>
// 1e5: 85 ed                         testl   %ebp, %ebp
// 1e7: 0f 88 08 01 00 00             js      0x2f5 <_JIT_ENTRY+0x2f5>
// 1ed: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1f2: 48 85 ff                      testq   %rdi, %rdi
// 1f5: 0f 84 fa 00 00 00             je      0x2f5 <_JIT_ENTRY+0x2f5>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_NoneStruct
// 205: 48 39 c7                      cmpq    %rax, %rdi
// 208: 74 11                         je      0x21b <_JIT_ENTRY+0x21b>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyErr_SetHandledException
// 214: ff d0                         callq   *%rax
// 216: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 21b: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 220: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 224: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _JIT_OPARG
// 232: 0f b7 c0                      movzwl  %ax, %eax
// 235: 49 8b 7c c6 48                movq    0x48(%r14,%rax,8), %rdi
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  PyCell_New
// 244: ff d0                         callq   *%rax
// 246: 48 85 c0                      testq   %rax, %rax
// 249: 0f 84 aa 00 00 00             je      0x2f9 <_JIT_ENTRY+0x2f9>
// 24f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000251:  R_X86_64_64  _JIT_OPARG
// 259: 0f b7 c9                      movzwl  %cx, %ecx
// 25c: 4d 8b 64 ce 48                movq    0x48(%r14,%rcx,8), %r12
// 261: 49 89 44 ce 48                movq    %rax, 0x48(%r14,%rcx,8)
// 266: 4d 85 e4                      testq   %r12, %r12
// 269: 74 50                         je      0x2bb <_JIT_ENTRY+0x2bb>
// 26b: 49 8b 04 24                   movq    (%r12), %rax
// 26f: 48 85 c0                      testq   %rax, %rax
// 272: 7f 22                         jg      0x296 <_JIT_ENTRY+0x296>
// 274: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000276:  R_X86_64_64  .rodata.str1.1+0x39
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _Py_NegativeRefcount
// 288: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 28d: 4c 89 e2                      movq    %r12, %rdx
// 290: ff d0                         callq   *%rax
// 292: 49 8b 04 24                   movq    (%r12), %rax
// 296: 85 c0                         testl   %eax, %eax
// 298: 78 21                         js      0x2bb <_JIT_ENTRY+0x2bb>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a4: ff d0                         callq   *%rax
// 2a6: 49 ff 0c 24                   decq    (%r12)
// 2aa: 75 0f                         jne     0x2bb <_JIT_ENTRY+0x2bb>
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  _Py_Dealloc
// 2b6: 4c 89 e7                      movq    %r12, %rdi
// 2b9: ff d0                         callq   *%rax
// 2bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bd:  R_X86_64_64  _JIT_CONTINUE
// 2c5: 4c 89 f7                      movq    %r14, %rdi
// 2c8: 48 89 de                      movq    %rbx, %rsi
// 2cb: 4c 89 fa                      movq    %r15, %rdx
// 2ce: 48 83 c4 18                   addq    $0x18, %rsp
// 2d2: 5b                            popq    %rbx
// 2d3: 41 5c                         popq    %r12
// 2d5: 41 5d                         popq    %r13
// 2d7: 41 5e                         popq    %r14
// 2d9: 41 5f                         popq    %r15
// 2db: 5d                            popq    %rbp
// 2dc: ff e0                         jmpq    *%rax
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _Py_Dealloc
// 2e8: 4c 89 e7                      movq    %r12, %rdi
// 2eb: ff d0                         callq   *%rax
// 2ed: 85 ed                         testl   %ebp, %ebp
// 2ef: 0f 89 f8 fe ff ff             jns     0x1ed <_JIT_ENTRY+0x1ed>
// 2f5: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2f9: 4c 29 f3                      subq    %r14, %rbx
// 2fc: 48 83 c3 b8                   addq    $-0x48, %rbx
// 300: 48 c1 eb 03                   shrq    $0x3, %rbx
// 304: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 308: 31 c0                         xorl    %eax, %eax
// 30a: 48 83 c4 18                   addq    $0x18, %rsp
// 30e: 5b                            popq    %rbx
// 30f: 41 5c                         popq    %r12
// 311: 41 5d                         popq    %r13
// 313: 41 5e                         popq    %r14
// 315: 41 5f                         popq    %r15
// 317: 5d                            popq    %rbp
// 318: c3                            retq
// 319: 
static const unsigned char _CHECK_EG_MATCHplus_MAKE_CELL_code_body[794] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0xbc, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x92, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x7c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x68, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xf9, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x08, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xfa, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x7c, 0xc6, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4d, 0x8b, 0x64, 0xce, 0x48, 0x49, 0x89, 0x44, 0xce, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0xf8, 0xfe, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_MAKE_CELL_code_holes[29] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCell_New, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2bd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_MAKE_CELL_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_MAKE_CELL_data_holes[1];

// _CHECK_EG_MATCHplus_MAKE_FUNCTION
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_MAKE_FUNCTION.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 63                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 81 00 00 00             jns     0x106 <_JIT_ENTRY+0x106>
// 85: e9 9d 00 00 00                jmp     0x127 <_JIT_ENTRY+0x127>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c7 00 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// c6: 49 8b 04 24                   movq    (%r12), %rax
// ca: 48 85 c0                      testq   %rax, %rax
// cd: 0f 8e d6 00 00 00             jle     0x1a9 <_JIT_ENTRY+0x1a9>
// d3: 85 c0                         testl   %eax, %eax
// d5: 0f 89 f4 00 00 00             jns     0x1cf <_JIT_ENTRY+0x1cf>
// db: e9 05 01 00 00                jmp     0x1e5 <_JIT_ENTRY+0x1e5>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f9: 4c 89 ea                      movq    %r13, %rdx
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 21                         js      0x127 <_JIT_ENTRY+0x127>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 4d 00                   decq    (%r13)
// 116: 75 0f                         jne     0x127 <_JIT_ENTRY+0x127>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_Dealloc
// 122: 4c 89 ef                      movq    %r13, %rdi
// 125: ff d0                         callq   *%rax
// 127: 49 8b 04 24                   movq    (%r12), %rax
// 12b: 48 85 c0                      testq   %rax, %rax
// 12e: 7e 09                         jle     0x139 <_JIT_ENTRY+0x139>
// 130: 85 c0                         testl   %eax, %eax
// 132: 79 2f                         jns     0x163 <_JIT_ENTRY+0x163>
// 134: e9 9d 01 00 00                jmp     0x2d6 <_JIT_ENTRY+0x2d6>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_NegativeRefcount
// 14d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 152: 4c 89 e2                      movq    %r12, %rdx
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 73 01 00 00             js      0x2d6 <_JIT_ENTRY+0x2d6>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 5d 01 00 00             jne     0x2d6 <_JIT_ENTRY+0x2d6>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: 4c 89 e7                      movq    %r12, %rdi
// 186: ff d0                         callq   *%rax
// 188: e9 49 01 00 00                jmp     0x2d6 <_JIT_ENTRY+0x2d6>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: 4c 89 ef                      movq    %r13, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 49 8b 04 24                   movq    (%r12), %rax
// 1a0: 48 85 c0                      testq   %rax, %rax
// 1a3: 0f 8f 2a ff ff ff             jg      0xd3 <_JIT_ENTRY+0xd3>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 49 8b 04 24                   movq    (%r12), %rax
// 1cb: 85 c0                         testl   %eax, %eax
// 1cd: 78 16                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 49 ff 0c 24                   decq    (%r12)
// 1df: 0f 84 da 00 00 00             je      0x2bf <_JIT_ENTRY+0x2bf>
// 1e5: 85 ed                         testl   %ebp, %ebp
// 1e7: 0f 88 e9 00 00 00             js      0x2d6 <_JIT_ENTRY+0x2d6>
// 1ed: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1f2: 48 85 ff                      testq   %rdi, %rdi
// 1f5: 0f 84 db 00 00 00             je      0x2d6 <_JIT_ENTRY+0x2d6>
// 1fb: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001fd:  R_X86_64_64  _Py_NoneStruct
// 205: 4c 39 e7                      cmpq    %r12, %rdi
// 208: 74 11                         je      0x21b <_JIT_ENTRY+0x21b>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyErr_SetHandledException
// 214: ff d0                         callq   *%rax
// 216: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 21b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 220: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 224: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 228: 49 8b 76 18                   movq    0x18(%r14), %rsi
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  PyFunction_New
// 236: 4c 89 e7                      movq    %r12, %rdi
// 239: ff d0                         callq   *%rax
// 23b: 49 89 c5                      movq    %rax, %r13
// 23e: 49 8b 04 24                   movq    (%r12), %rax
// 242: 48 85 c0                      testq   %rax, %rax
// 245: 7f 22                         jg      0x269 <_JIT_ENTRY+0x269>
// 247: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000249:  R_X86_64_64  .rodata.str1.1
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _Py_NegativeRefcount
// 25b: be 4e 0c 00 00                movl    $0xc4e, %esi            # imm = 0xC4E
// 260: 4c 89 e2                      movq    %r12, %rdx
// 263: ff d0                         callq   *%rax
// 265: 49 8b 04 24                   movq    (%r12), %rax
// 269: 85 c0                         testl   %eax, %eax
// 26b: 78 12                         js      0x27f <_JIT_ENTRY+0x27f>
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 277: ff d0                         callq   *%rax
// 279: 49 ff 0c 24                   decq    (%r12)
// 27d: 74 7b                         je      0x2fa <_JIT_ENTRY+0x2fa>
// 27f: 4d 85 ed                      testq   %r13, %r13
// 282: 74 56                         je      0x2da <_JIT_ENTRY+0x2da>
// 284: 41 8b 74 24 5c                movl    0x5c(%r12), %esi
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _PyFunction_SetVersion
// 293: 4c 89 ef                      movq    %r13, %rdi
// 296: ff d0                         callq   *%rax
// 298: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _JIT_CONTINUE
// 2a6: 4c 89 f7                      movq    %r14, %rdi
// 2a9: 48 89 de                      movq    %rbx, %rsi
// 2ac: 4c 89 fa                      movq    %r15, %rdx
// 2af: 48 83 c4 18                   addq    $0x18, %rsp
// 2b3: 5b                            popq    %rbx
// 2b4: 41 5c                         popq    %r12
// 2b6: 41 5d                         popq    %r13
// 2b8: 41 5e                         popq    %r14
// 2ba: 41 5f                         popq    %r15
// 2bc: 5d                            popq    %rbp
// 2bd: ff e0                         jmpq    *%rax
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_Dealloc
// 2c9: 4c 89 e7                      movq    %r12, %rdi
// 2cc: ff d0                         callq   *%rax
// 2ce: 85 ed                         testl   %ebp, %ebp
// 2d0: 0f 89 17 ff ff ff             jns     0x1ed <_JIT_ENTRY+0x1ed>
// 2d6: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2da: 4c 29 f3                      subq    %r14, %rbx
// 2dd: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2e1: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2e5: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2e9: 31 c0                         xorl    %eax, %eax
// 2eb: 48 83 c4 18                   addq    $0x18, %rsp
// 2ef: 5b                            popq    %rbx
// 2f0: 41 5c                         popq    %r12
// 2f2: 41 5d                         popq    %r13
// 2f4: 41 5e                         popq    %r14
// 2f6: 41 5f                         popq    %r15
// 2f8: 5d                            popq    %rbp
// 2f9: c3                            retq
// 2fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fc:  R_X86_64_64  _Py_Dealloc
// 304: 4c 89 e7                      movq    %r12, %rdi
// 307: ff d0                         callq   *%rax
// 309: 4d 85 ed                      testq   %r13, %r13
// 30c: 0f 85 72 ff ff ff             jne     0x284 <_JIT_ENTRY+0x284>
// 312: eb c6                         jmp     0x2da <_JIT_ENTRY+0x2da>
// 314: 
static const unsigned char _CHECK_EG_MATCHplus_MAKE_FUNCTION_code_body[789] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0x9d, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x73, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x5d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x49, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xda, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xe9, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xdb, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x49, 0x8b, 0x76, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4e, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x7b, 0x4d, 0x85, 0xed, 0x74, 0x56, 0x41, 0x8b, 0x74, 0x24, 0x5c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x17, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0x72, 0xff, 0xff, 0xff, 0xeb, 0xc6};
static const Hole _CHECK_EG_MATCHplus_MAKE_FUNCTION_code_holes[28] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_New, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFunction_SetVersion, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_MAKE_FUNCTION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_MAKE_FUNCTION_data_holes[1];

// _CHECK_EG_MATCHplus_MAP_ADD
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_MAP_ADD.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 8b 6e f0                   movq    -0x10(%rsi), %rbp
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 4c 8d 76 f0                   leaq    -0x10(%rsi), %r14
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 fe                      movq    %r15, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 48 89 ef                      movq    %rbp, %rdi
// 64: 4c 89 fe                      movq    %r15, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c3                         movl    %eax, %ebx
// 6b: 48 8b 45 00                   movq    (%rbp), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 48 8b 45 00                   movq    (%rbp), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 56                         jle     0xd9 <_JIT_ENTRY+0xd9>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 78                         jns     0xff <_JIT_ENTRY+0xff>
// 87: e9 89 00 00 00                jmp     0x115 <_JIT_ENTRY+0x115>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 48 89 ea                      movq    %rbp, %rdx
// a8: ff d0                         callq   *%rax
// aa: 48 8b 45 00                   movq    (%rbp), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 48 ff 4d 00                   decq    (%rbp)
// c2: 74 6a                         je      0x12e <_JIT_ENTRY+0x12e>
// c4: 49 8b 07                      movq    (%r15), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7e 79                         jle     0x145 <_JIT_ENTRY+0x145>
// cc: 85 c0                         testl   %eax, %eax
// ce: 0f 89 96 00 00 00             jns     0x16a <_JIT_ENTRY+0x16a>
// d4: e9 a6 00 00 00                jmp     0x17f <_JIT_ENTRY+0x17f>
// d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000db:  R_X86_64_64  .rodata.str1.1
// e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e5:  R_X86_64_64  _Py_NegativeRefcount
// ed: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f2: 48 89 ea                      movq    %rbp, %rdx
// f5: ff d0                         callq   *%rax
// f7: 48 8b 45 00                   movq    (%rbp), %rax
// fb: 85 c0                         testl   %eax, %eax
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 48 ff 4d 00                   decq    (%rbp)
// 10f: 0f 84 21 01 00 00             je      0x236 <_JIT_ENTRY+0x236>
// 115: 49 8b 07                      movq    (%r15), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 0f 8e 30 01 00 00             jle     0x251 <_JIT_ENTRY+0x251>
// 121: 85 c0                         testl   %eax, %eax
// 123: 0f 89 4d 01 00 00             jns     0x276 <_JIT_ENTRY+0x276>
// 129: e9 68 01 00 00                jmp     0x296 <_JIT_ENTRY+0x296>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_Dealloc
// 138: 48 89 ef                      movq    %rbp, %rdi
// 13b: ff d0                         callq   *%rax
// 13d: 49 8b 07                      movq    (%r15), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 87                         jg      0xcc <_JIT_ENTRY+0xcc>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15e: 4c 89 fa                      movq    %r15, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 07                      movq    (%r15), %rax
// 166: 85 c0                         testl   %eax, %eax
// 168: 78 15                         js      0x17f <_JIT_ENTRY+0x17f>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 0f                      decq    (%r15)
// 179: 0f 84 99 00 00 00             je      0x218 <_JIT_ENTRY+0x218>
// 17f: 85 db                         testl   %ebx, %ebx
// 181: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 186: 0f 88 0a 01 00 00             js      0x296 <_JIT_ENTRY+0x296>
// 18c: 48 8b 3c 24                   movq    (%rsp), %rdi
// 190: 48 85 ff                      testq   %rdi, %rdi
// 193: 0f 84 fd 00 00 00             je      0x296 <_JIT_ENTRY+0x296>
// 199: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000019b:  R_X86_64_64  _Py_NoneStruct
// 1a3: 48 39 d7                      cmpq    %rdx, %rdi
// 1a6: 74 10                         je      0x1b8 <_JIT_ENTRY+0x1b8>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  PyErr_SetHandledException
// 1b2: ff d0                         callq   *%rax
// 1b4: 48 8b 14 24                   movq    (%rsp), %rdx
// 1b8: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 1bd: 49 89 75 f0                   movq    %rsi, -0x10(%r13)
// 1c1: 49 89 55 f8                   movq    %rdx, -0x8(%r13)
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _JIT_OPARG
// 1cf: 0f b7 c0                      movzwl  %ax, %eax
// 1d2: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1d7: 29 c1                         subl    %eax, %ecx
// 1d9: 48 63 c1                      movslq  %ecx, %rax
// 1dc: 49 8b 7c c5 00                movq    (%r13,%rax,8), %rdi
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _PyDict_SetItem_Take2
// 1eb: ff d0                         callq   *%rax
// 1ed: 85 c0                         testl   %eax, %eax
// 1ef: 0f 85 a1 00 00 00             jne     0x296 <_JIT_ENTRY+0x296>
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _JIT_CONTINUE
// 1ff: 48 89 df                      movq    %rbx, %rdi
// 202: 4c 89 f6                      movq    %r14, %rsi
// 205: 4c 89 e2                      movq    %r12, %rdx
// 208: 48 83 c4 18                   addq    $0x18, %rsp
// 20c: 5b                            popq    %rbx
// 20d: 41 5c                         popq    %r12
// 20f: 41 5d                         popq    %r13
// 211: 41 5e                         popq    %r14
// 213: 41 5f                         popq    %r15
// 215: 5d                            popq    %rbp
// 216: ff e0                         jmpq    *%rax
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  _Py_Dealloc
// 222: 4c 89 ff                      movq    %r15, %rdi
// 225: ff d0                         callq   *%rax
// 227: 85 db                         testl   %ebx, %ebx
// 229: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 22e: 0f 89 58 ff ff ff             jns     0x18c <_JIT_ENTRY+0x18c>
// 234: eb 60                         jmp     0x296 <_JIT_ENTRY+0x296>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_Dealloc
// 240: 48 89 ef                      movq    %rbp, %rdi
// 243: ff d0                         callq   *%rax
// 245: 49 8b 07                      movq    (%r15), %rax
// 248: 48 85 c0                      testq   %rax, %rax
// 24b: 0f 8f d0 fe ff ff             jg      0x121 <_JIT_ENTRY+0x121>
// 251: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000253:  R_X86_64_64  .rodata.str1.1
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_NegativeRefcount
// 265: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 26a: 4c 89 fa                      movq    %r15, %rdx
// 26d: ff d0                         callq   *%rax
// 26f: 49 8b 07                      movq    (%r15), %rax
// 272: 85 c0                         testl   %eax, %eax
// 274: 78 20                         js      0x296 <_JIT_ENTRY+0x296>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 280: ff d0                         callq   *%rax
// 282: 49 ff 0f                      decq    (%r15)
// 285: 75 0f                         jne     0x296 <_JIT_ENTRY+0x296>
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _Py_Dealloc
// 291: 4c 89 ff                      movq    %r15, %rdi
// 294: ff d0                         callq   *%rax
// 296: 49 29 de                      subq    %rbx, %r14
// 299: 49 83 c6 b8                   addq    $-0x48, %r14
// 29d: 49 c1 ee 03                   shrq    $0x3, %r14
// 2a1: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2a5: 31 c0                         xorl    %eax, %eax
// 2a7: 48 83 c4 18                   addq    $0x18, %rsp
// 2ab: 5b                            popq    %rbx
// 2ac: 41 5c                         popq    %r12
// 2ae: 41 5d                         popq    %r13
// 2b0: 41 5e                         popq    %r14
// 2b2: 41 5f                         popq    %r15
// 2b4: 5d                            popq    %rbp
// 2b5: c3                            retq
// 2b6: 
static const unsigned char _CHECK_EG_MATCHplus_MAP_ADD_code_body[695] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x4c, 0x8d, 0x76, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc3, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x21, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x30, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x4d, 0x01, 0x00, 0x00, 0xe9, 0x68, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x99, 0x00, 0x00, 0x00, 0x85, 0xdb, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x88, 0x0a, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xfd, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x49, 0x89, 0x75, 0xf0, 0x49, 0x89, 0x55, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8b, 0x7c, 0xc5, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xa1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xdb, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x89, 0x58, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xd0, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_MAP_ADD_code_holes[24] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_MAP_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_MAP_ADD_data_holes[1];

// _CHECK_EG_MATCHplus_MATCH_CLASS
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_MATCH_CLASS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 47                         js      0x7c <_JIT_ENTRY+0x7c>
// 35: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 3d: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 50: 48 89 e2                      movq    %rsp, %rdx
// 53: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 58: 4c 89 ef                      movq    %r13, %rdi
// 5b: 4c 89 e6                      movq    %r12, %rsi
// 5e: ff d0                         callq   *%rax
// 60: 89 c5                         movl    %eax, %ebp
// 62: 49 8b 45 00                   movq    (%r13), %rax
// 66: 48 85 c0                      testq   %rax, %rax
// 69: 0f 8e ba 00 00 00             jle     0x129 <_JIT_ENTRY+0x129>
// 6f: 85 c0                         testl   %eax, %eax
// 71: 0f 89 d8 00 00 00             jns     0x14f <_JIT_ENTRY+0x14f>
// 77: e9 e5 00 00 00                jmp     0x161 <_JIT_ENTRY+0x161>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7f 22                         jg      0xa7 <_JIT_ENTRY+0xa7>
// 85: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000087:  R_X86_64_64  .rodata.str1.1
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_NegativeRefcount
// 99: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 9e: 4c 89 ea                      movq    %r13, %rdx
// a1: ff d0                         callq   *%rax
// a3: 49 8b 45 00                   movq    (%r13), %rax
// a7: 85 c0                         testl   %eax, %eax
// a9: 78 21                         js      0xcc <_JIT_ENTRY+0xcc>
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b5: ff d0                         callq   *%rax
// b7: 49 ff 4d 00                   decq    (%r13)
// bb: 75 0f                         jne     0xcc <_JIT_ENTRY+0xcc>
// bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bf:  R_X86_64_64  _Py_Dealloc
// c7: 4c 89 ef                      movq    %r13, %rdi
// ca: ff d0                         callq   *%rax
// cc: 49 8b 04 24                   movq    (%r12), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 7f 22                         jg      0xf7 <_JIT_ENTRY+0xf7>
// d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d7:  R_X86_64_64  .rodata.str1.1
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _Py_NegativeRefcount
// e9: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// ee: 4c 89 e2                      movq    %r12, %rdx
// f1: ff d0                         callq   *%rax
// f3: 49 8b 04 24                   movq    (%r12), %rax
// f7: 85 c0                         testl   %eax, %eax
// f9: 0f 88 90 02 00 00             js      0x38f <_JIT_ENTRY+0x38f>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 0c 24                   decq    (%r12)
// 10f: 0f 85 7a 02 00 00             jne     0x38f <_JIT_ENTRY+0x38f>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_Dealloc
// 11f: 4c 89 e7                      movq    %r12, %rdi
// 122: ff d0                         callq   *%rax
// 124: e9 66 02 00 00                jmp     0x38f <_JIT_ENTRY+0x38f>
// 129: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012b:  R_X86_64_64  .rodata.str1.1
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_NegativeRefcount
// 13d: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 142: 4c 89 ea                      movq    %r13, %rdx
// 145: ff d0                         callq   *%rax
// 147: 49 8b 45 00                   movq    (%r13), %rax
// 14b: 85 c0                         testl   %eax, %eax
// 14d: 78 12                         js      0x161 <_JIT_ENTRY+0x161>
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 159: ff d0                         callq   *%rax
// 15b: 49 ff 4d 00                   decq    (%r13)
// 15f: 74 0f                         je      0x170 <_JIT_ENTRY+0x170>
// 161: 49 8b 04 24                   movq    (%r12), %rax
// 165: 48 85 c0                      testq   %rax, %rax
// 168: 7e 1e                         jle     0x188 <_JIT_ENTRY+0x188>
// 16a: 85 c0                         testl   %eax, %eax
// 16c: 79 40                         jns     0x1ae <_JIT_ENTRY+0x1ae>
// 16e: eb 54                         jmp     0x1c4 <_JIT_ENTRY+0x1c4>
// 170: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000172:  R_X86_64_64  _Py_Dealloc
// 17a: 4c 89 ef                      movq    %r13, %rdi
// 17d: ff d0                         callq   *%rax
// 17f: 49 8b 04 24                   movq    (%r12), %rax
// 183: 48 85 c0                      testq   %rax, %rax
// 186: 7f e2                         jg      0x16a <_JIT_ENTRY+0x16a>
// 188: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018a:  R_X86_64_64  .rodata.str1.1
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _Py_NegativeRefcount
// 19c: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1a1: 4c 89 e2                      movq    %r12, %rdx
// 1a4: ff d0                         callq   *%rax
// 1a6: 49 8b 04 24                   movq    (%r12), %rax
// 1aa: 85 c0                         testl   %eax, %eax
// 1ac: 78 16                         js      0x1c4 <_JIT_ENTRY+0x1c4>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b8: ff d0                         callq   *%rax
// 1ba: 49 ff 0c 24                   decq    (%r12)
// 1be: 0f 84 94 01 00 00             je      0x358 <_JIT_ENTRY+0x358>
// 1c4: 85 ed                         testl   %ebp, %ebp
// 1c6: 0f 88 c3 01 00 00             js      0x38f <_JIT_ENTRY+0x38f>
// 1cc: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1d0: 48 85 ff                      testq   %rdi, %rdi
// 1d3: 0f 84 b6 01 00 00             je      0x38f <_JIT_ENTRY+0x38f>
// 1d9: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001db:  R_X86_64_64  _Py_NoneStruct
// 1e3: 4c 39 e7                      cmpq    %r12, %rdi
// 1e6: 74 10                         je      0x1f8 <_JIT_ENTRY+0x1f8>
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  PyErr_SetHandledException
// 1f2: ff d0                         callq   *%rax
// 1f4: 4c 8b 24 24                   movq    (%rsp), %r12
// 1f8: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 1fd: 48 89 6b f0                   movq    %rbp, -0x10(%rbx)
// 201: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 205: 4c 8b 6b e8                   movq    -0x18(%rbx), %r13
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_OPARG
// 213: 0f b7 c8                      movzwl  %ax, %ecx
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _PyEval_MatchClass
// 220: 4c 89 ff                      movq    %r15, %rdi
// 223: 4c 89 ee                      movq    %r13, %rsi
// 226: 48 89 ea                      movq    %rbp, %rdx
// 229: 4d 89 e0                      movq    %r12, %r8
// 22c: ff d0                         callq   *%rax
// 22e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 233: 49 8b 45 00                   movq    (%r13), %rax
// 237: 48 85 c0                      testq   %rax, %rax
// 23a: 7f 22                         jg      0x25e <_JIT_ENTRY+0x25e>
// 23c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023e:  R_X86_64_64  .rodata.str1.1
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_NegativeRefcount
// 250: be 10 08 00 00                movl    $0x810, %esi            # imm = 0x810
// 255: 4c 89 ea                      movq    %r13, %rdx
// 258: ff d0                         callq   *%rax
// 25a: 49 8b 45 00                   movq    (%r13), %rax
// 25e: 85 c0                         testl   %eax, %eax
// 260: 78 21                         js      0x283 <_JIT_ENTRY+0x283>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26c: ff d0                         callq   *%rax
// 26e: 49 ff 4d 00                   decq    (%r13)
// 272: 75 0f                         jne     0x283 <_JIT_ENTRY+0x283>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _Py_Dealloc
// 27e: 4c 89 ef                      movq    %r13, %rdi
// 281: ff d0                         callq   *%rax
// 283: 48 8b 45 00                   movq    (%rbp), %rax
// 287: 48 85 c0                      testq   %rax, %rax
// 28a: 7f 22                         jg      0x2ae <_JIT_ENTRY+0x2ae>
// 28c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028e:  R_X86_64_64  .rodata.str1.1
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _Py_NegativeRefcount
// 2a0: be 11 08 00 00                movl    $0x811, %esi            # imm = 0x811
// 2a5: 48 89 ea                      movq    %rbp, %rdx
// 2a8: ff d0                         callq   *%rax
// 2aa: 48 8b 45 00                   movq    (%rbp), %rax
// 2ae: 85 c0                         testl   %eax, %eax
// 2b0: 78 21                         js      0x2d3 <_JIT_ENTRY+0x2d3>
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2bc: ff d0                         callq   *%rax
// 2be: 48 ff 4d 00                   decq    (%rbp)
// 2c2: 75 0f                         jne     0x2d3 <_JIT_ENTRY+0x2d3>
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  _Py_Dealloc
// 2ce: 48 89 ef                      movq    %rbp, %rdi
// 2d1: ff d0                         callq   *%rax
// 2d3: 49 8b 04 24                   movq    (%r12), %rax
// 2d7: 48 85 c0                      testq   %rax, %rax
// 2da: 7f 22                         jg      0x2fe <_JIT_ENTRY+0x2fe>
// 2dc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002de:  R_X86_64_64  .rodata.str1.1
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _Py_NegativeRefcount
// 2f0: be 12 08 00 00                movl    $0x812, %esi            # imm = 0x812
// 2f5: 4c 89 e2                      movq    %r12, %rdx
// 2f8: ff d0                         callq   *%rax
// 2fa: 49 8b 04 24                   movq    (%r12), %rax
// 2fe: 85 c0                         testl   %eax, %eax
// 300: 78 21                         js      0x323 <_JIT_ENTRY+0x323>
// 302: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000304:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 30c: ff d0                         callq   *%rax
// 30e: 49 ff 0c 24                   decq    (%r12)
// 312: 75 0f                         jne     0x323 <_JIT_ENTRY+0x323>
// 314: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000316:  R_X86_64_64  _Py_Dealloc
// 31e: 4c 89 e7                      movq    %r12, %rdi
// 321: ff d0                         callq   *%rax
// 323: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 328: 48 85 c9                      testq   %rcx, %rcx
// 32b: 74 44                         je      0x371 <_JIT_ENTRY+0x371>
// 32d: 48 89 4b e8                   movq    %rcx, -0x18(%rbx)
// 331: 48 83 c3 f0                   addq    $-0x10, %rbx
// 335: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000337:  R_X86_64_64  _JIT_CONTINUE
// 33f: 4c 89 f7                      movq    %r14, %rdi
// 342: 48 89 de                      movq    %rbx, %rsi
// 345: 4c 89 fa                      movq    %r15, %rdx
// 348: 48 83 c4 18                   addq    $0x18, %rsp
// 34c: 5b                            popq    %rbx
// 34d: 41 5c                         popq    %r12
// 34f: 41 5d                         popq    %r13
// 351: 41 5e                         popq    %r14
// 353: 41 5f                         popq    %r15
// 355: 5d                            popq    %rbp
// 356: ff e0                         jmpq    *%rax
// 358: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000035a:  R_X86_64_64  _Py_Dealloc
// 362: 4c 89 e7                      movq    %r12, %rdi
// 365: ff d0                         callq   *%rax
// 367: 85 ed                         testl   %ebp, %ebp
// 369: 0f 89 5d fe ff ff             jns     0x1cc <_JIT_ENTRY+0x1cc>
// 36f: eb 1e                         jmp     0x38f <_JIT_ENTRY+0x38f>
// 371: 49 8b 47 68                   movq    0x68(%r15), %rax
// 375: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000377:  R_X86_64_64  _Py_NoneStruct
// 37f: 48 85 c0                      testq   %rax, %rax
// 382: 74 a9                         je      0x32d <_JIT_ENTRY+0x32d>
// 384: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 389: 74 a2                         je      0x32d <_JIT_ENTRY+0x32d>
// 38b: 48 83 c3 f8                   addq    $-0x8, %rbx
// 38f: 4c 29 f3                      subq    %r14, %rbx
// 392: 48 83 c3 a8                   addq    $-0x58, %rbx
// 396: 48 c1 eb 03                   shrq    $0x3, %rbx
// 39a: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 39e: 31 c0                         xorl    %eax, %eax
// 3a0: 48 83 c4 18                   addq    $0x18, %rsp
// 3a4: 5b                            popq    %rbx
// 3a5: 41 5c                         popq    %r12
// 3a7: 41 5d                         popq    %r13
// 3a9: 41 5e                         popq    %r14
// 3ab: 41 5f                         popq    %r15
// 3ad: 5d                            popq    %rbp
// 3ae: c3                            retq
// 3af: 
static const unsigned char _CHECK_EG_MATCHplus_MATCH_CLASS_code_body[944] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x47, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xba, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xd8, 0x00, 0x00, 0x00, 0xe9, 0xe5, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x90, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x7a, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x66, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x94, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xc3, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xb6, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x89, 0x6b, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x4c, 0x8b, 0x6b, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xea, 0x4d, 0x89, 0xe0, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x10, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x08, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x12, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x44, 0x48, 0x89, 0x4b, 0xe8, 0x48, 0x83, 0xc3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x5d, 0xfe, 0xff, 0xff, 0xeb, 0x1e, 0x49, 0x8b, 0x47, 0x68, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0xa9, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0xa2, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_MATCH_CLASS_code_holes[37] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x87, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchClass, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x316, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x337, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x35a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x377, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_MATCH_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_MATCH_CLASS_data_holes[1];

// _CHECK_EG_MATCHplus_MATCH_KEYS
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_MATCH_KEYS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 08 01 00 00             je      0x217 <_JIT_ENTRY+0x217>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 17 01 00 00             jle     0x232 <_JIT_ENTRY+0x232>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 34 01 00 00             jns     0x257 <_JIT_ENTRY+0x257>
// 123: e9 4f 01 00 00                jmp     0x277 <_JIT_ENTRY+0x277>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 85 00 00 00             je      0x1fe <_JIT_ENTRY+0x1fe>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 f6 00 00 00             js      0x277 <_JIT_ENTRY+0x277>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 e8 00 00 00             je      0x277 <_JIT_ENTRY+0x277>
// 18f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 d7                      cmpq    %rdx, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1af: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 1b4: 48 89 73 f0                   movq    %rsi, -0x10(%rbx)
// 1b8: 48 89 53 f8                   movq    %rdx, -0x8(%rbx)
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _PyEval_MatchKeys
// 1c6: 4c 89 e7                      movq    %r12, %rdi
// 1c9: ff d0                         callq   *%rax
// 1cb: 48 85 c0                      testq   %rax, %rax
// 1ce: 0f 84 a7 00 00 00             je      0x27b <_JIT_ENTRY+0x27b>
// 1d4: 48 89 03                      movq    %rax, (%rbx)
// 1d7: 48 83 c3 08                   addq    $0x8, %rbx
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _JIT_CONTINUE
// 1e5: 4c 89 f7                      movq    %r14, %rdi
// 1e8: 48 89 de                      movq    %rbx, %rsi
// 1eb: 4c 89 e2                      movq    %r12, %rdx
// 1ee: 48 83 c4 18                   addq    $0x18, %rsp
// 1f2: 5b                            popq    %rbx
// 1f3: 41 5c                         popq    %r12
// 1f5: 41 5d                         popq    %r13
// 1f7: 41 5e                         popq    %r14
// 1f9: 41 5f                         popq    %r15
// 1fb: 5d                            popq    %rbp
// 1fc: ff e0                         jmpq    *%rax
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _Py_Dealloc
// 208: 4c 89 ff                      movq    %r15, %rdi
// 20b: ff d0                         callq   *%rax
// 20d: 85 ed                         testl   %ebp, %ebp
// 20f: 0f 89 6c ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 215: eb 60                         jmp     0x277 <_JIT_ENTRY+0x277>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_Dealloc
// 221: 4c 89 ef                      movq    %r13, %rdi
// 224: ff d0                         callq   *%rax
// 226: 49 8b 07                      movq    (%r15), %rax
// 229: 48 85 c0                      testq   %rax, %rax
// 22c: 0f 8f e9 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 232: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000234:  R_X86_64_64  .rodata.str1.1
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_NegativeRefcount
// 246: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 24b: 4c 89 fa                      movq    %r15, %rdx
// 24e: ff d0                         callq   *%rax
// 250: 49 8b 07                      movq    (%r15), %rax
// 253: 85 c0                         testl   %eax, %eax
// 255: 78 20                         js      0x277 <_JIT_ENTRY+0x277>
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 261: ff d0                         callq   *%rax
// 263: 49 ff 0f                      decq    (%r15)
// 266: 75 0f                         jne     0x277 <_JIT_ENTRY+0x277>
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _Py_Dealloc
// 272: 4c 89 ff                      movq    %r15, %rdi
// 275: ff d0                         callq   *%rax
// 277: 48 83 c3 f0                   addq    $-0x10, %rbx
// 27b: 4c 29 f3                      subq    %r14, %rbx
// 27e: 48 83 c3 b8                   addq    $-0x48, %rbx
// 282: 48 c1 eb 03                   shrq    $0x3, %rbx
// 286: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 28a: 31 c0                         xorl    %eax, %eax
// 28c: 48 83 c4 18                   addq    $0x18, %rsp
// 290: 5b                            popq    %rbx
// 291: 41 5c                         popq    %r12
// 293: 41 5d                         popq    %r13
// 295: 41 5e                         popq    %r14
// 297: 41 5f                         popq    %r15
// 299: 5d                            popq    %rbp
// 29a: c3                            retq
// 29b: 
static const unsigned char _CHECK_EG_MATCHplus_MATCH_KEYS_code_body[668] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x08, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x17, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x34, 0x01, 0x00, 0x00, 0xe9, 0x4f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x85, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xf6, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xe8, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xd7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x89, 0x73, 0xf0, 0x48, 0x89, 0x53, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x6c, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xe9, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_MATCH_KEYS_code_holes[23] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchKeys, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_MATCH_KEYS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_MATCH_KEYS_data_holes[1];

// _CHECK_EG_MATCHplus_MATCH_MAPPING
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_MATCH_MAPPING.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 13 01 00 00             je      0x222 <_JIT_ENTRY+0x222>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 22 01 00 00             jle     0x23d <_JIT_ENTRY+0x23d>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 3f 01 00 00             jns     0x262 <_JIT_ENTRY+0x262>
// 123: e9 5a 01 00 00                jmp     0x282 <_JIT_ENTRY+0x282>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 90 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 01 01 00 00             js      0x282 <_JIT_ENTRY+0x282>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 f3 00 00 00             je      0x282 <_JIT_ENTRY+0x282>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 48 8b 40 08                   movq    0x8(%rax), %rax
// 1c0: f6 80 a8 00 00 00 40          testb   $0x40, 0xa8(%rax)
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _Py_FalseStruct
// 1d1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d3:  R_X86_64_64  _Py_TrueStruct
// 1db: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 1df: 48 89 0b                      movq    %rcx, (%rbx)
// 1e2: 48 83 c3 08                   addq    $0x8, %rbx
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _JIT_CONTINUE
// 1f0: 4c 89 f7                      movq    %r14, %rdi
// 1f3: 48 89 de                      movq    %rbx, %rsi
// 1f6: 4c 89 e2                      movq    %r12, %rdx
// 1f9: 48 83 c4 18                   addq    $0x18, %rsp
// 1fd: 5b                            popq    %rbx
// 1fe: 41 5c                         popq    %r12
// 200: 41 5d                         popq    %r13
// 202: 41 5e                         popq    %r14
// 204: 41 5f                         popq    %r15
// 206: 5d                            popq    %rbp
// 207: ff e0                         jmpq    *%rax
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _Py_Dealloc
// 213: 4c 89 ff                      movq    %r15, %rdi
// 216: ff d0                         callq   *%rax
// 218: 85 ed                         testl   %ebp, %ebp
// 21a: 0f 89 61 ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 220: eb 60                         jmp     0x282 <_JIT_ENTRY+0x282>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_Dealloc
// 22c: 4c 89 ef                      movq    %r13, %rdi
// 22f: ff d0                         callq   *%rax
// 231: 49 8b 07                      movq    (%r15), %rax
// 234: 48 85 c0                      testq   %rax, %rax
// 237: 0f 8f de fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 23d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023f:  R_X86_64_64  .rodata.str1.1
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _Py_NegativeRefcount
// 251: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 256: 4c 89 fa                      movq    %r15, %rdx
// 259: ff d0                         callq   *%rax
// 25b: 49 8b 07                      movq    (%r15), %rax
// 25e: 85 c0                         testl   %eax, %eax
// 260: 78 20                         js      0x282 <_JIT_ENTRY+0x282>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26c: ff d0                         callq   *%rax
// 26e: 49 ff 0f                      decq    (%r15)
// 271: 75 0f                         jne     0x282 <_JIT_ENTRY+0x282>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_Dealloc
// 27d: 4c 89 ff                      movq    %r15, %rdi
// 280: ff d0                         callq   *%rax
// 282: 48 83 c3 f0                   addq    $-0x10, %rbx
// 286: 4c 29 f3                      subq    %r14, %rbx
// 289: 48 83 c3 b8                   addq    $-0x48, %rbx
// 28d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 291: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 295: 31 c0                         xorl    %eax, %eax
// 297: 48 83 c4 18                   addq    $0x18, %rsp
// 29b: 5b                            popq    %rbx
// 29c: 41 5c                         popq    %r12
// 29e: 41 5d                         popq    %r13
// 2a0: 41 5e                         popq    %r14
// 2a2: 41 5f                         popq    %r15
// 2a4: 5d                            popq    %rbp
// 2a5: c3                            retq
// 2a6: 
static const unsigned char _CHECK_EG_MATCHplus_MATCH_MAPPING_code_body[679] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x13, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x22, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x3f, 0x01, 0x00, 0x00, 0xe9, 0x5a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x01, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xf3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x0b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x61, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xde, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_MATCH_MAPPING_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_MATCH_MAPPING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_MATCH_MAPPING_data_holes[1];

// _CHECK_EG_MATCHplus_MATCH_SEQUENCE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_MATCH_SEQUENCE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 13 01 00 00             je      0x222 <_JIT_ENTRY+0x222>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 22 01 00 00             jle     0x23d <_JIT_ENTRY+0x23d>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 3f 01 00 00             jns     0x262 <_JIT_ENTRY+0x262>
// 123: e9 5a 01 00 00                jmp     0x282 <_JIT_ENTRY+0x282>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 90 00 00 00             je      0x209 <_JIT_ENTRY+0x209>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 01 01 00 00             js      0x282 <_JIT_ENTRY+0x282>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 f3 00 00 00             je      0x282 <_JIT_ENTRY+0x282>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 48 8b 40 08                   movq    0x8(%rax), %rax
// 1c0: f6 80 a8 00 00 00 20          testb   $0x20, 0xa8(%rax)
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _Py_FalseStruct
// 1d1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d3:  R_X86_64_64  _Py_TrueStruct
// 1db: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 1df: 48 89 0b                      movq    %rcx, (%rbx)
// 1e2: 48 83 c3 08                   addq    $0x8, %rbx
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _JIT_CONTINUE
// 1f0: 4c 89 f7                      movq    %r14, %rdi
// 1f3: 48 89 de                      movq    %rbx, %rsi
// 1f6: 4c 89 e2                      movq    %r12, %rdx
// 1f9: 48 83 c4 18                   addq    $0x18, %rsp
// 1fd: 5b                            popq    %rbx
// 1fe: 41 5c                         popq    %r12
// 200: 41 5d                         popq    %r13
// 202: 41 5e                         popq    %r14
// 204: 41 5f                         popq    %r15
// 206: 5d                            popq    %rbp
// 207: ff e0                         jmpq    *%rax
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _Py_Dealloc
// 213: 4c 89 ff                      movq    %r15, %rdi
// 216: ff d0                         callq   *%rax
// 218: 85 ed                         testl   %ebp, %ebp
// 21a: 0f 89 61 ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 220: eb 60                         jmp     0x282 <_JIT_ENTRY+0x282>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_Dealloc
// 22c: 4c 89 ef                      movq    %r13, %rdi
// 22f: ff d0                         callq   *%rax
// 231: 49 8b 07                      movq    (%r15), %rax
// 234: 48 85 c0                      testq   %rax, %rax
// 237: 0f 8f de fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 23d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023f:  R_X86_64_64  .rodata.str1.1
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _Py_NegativeRefcount
// 251: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 256: 4c 89 fa                      movq    %r15, %rdx
// 259: ff d0                         callq   *%rax
// 25b: 49 8b 07                      movq    (%r15), %rax
// 25e: 85 c0                         testl   %eax, %eax
// 260: 78 20                         js      0x282 <_JIT_ENTRY+0x282>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26c: ff d0                         callq   *%rax
// 26e: 49 ff 0f                      decq    (%r15)
// 271: 75 0f                         jne     0x282 <_JIT_ENTRY+0x282>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_Dealloc
// 27d: 4c 89 ff                      movq    %r15, %rdi
// 280: ff d0                         callq   *%rax
// 282: 48 83 c3 f0                   addq    $-0x10, %rbx
// 286: 4c 29 f3                      subq    %r14, %rbx
// 289: 48 83 c3 b8                   addq    $-0x48, %rbx
// 28d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 291: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 295: 31 c0                         xorl    %eax, %eax
// 297: 48 83 c4 18                   addq    $0x18, %rsp
// 29b: 5b                            popq    %rbx
// 29c: 41 5c                         popq    %r12
// 29e: 41 5d                         popq    %r13
// 2a0: 41 5e                         popq    %r14
// 2a2: 41 5f                         popq    %r15
// 2a4: 5d                            popq    %rbp
// 2a5: c3                            retq
// 2a6: 
static const unsigned char _CHECK_EG_MATCHplus_MATCH_SEQUENCE_code_body[679] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x13, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x22, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x3f, 0x01, 0x00, 0x00, 0xe9, 0x5a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x01, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xf3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x0b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x61, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xde, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_MATCH_SEQUENCE_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_MATCH_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_MATCH_SEQUENCE_data_holes[1];

// _CHECK_EG_MATCHplus_NOP
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_NOP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a2 00 00 00                jmp     0x175 <_JIT_ENTRY+0x175>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 e1 00 00 00             je      0x1f0 <_JIT_ENTRY+0x1f0>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e f0 00 00 00             jle     0x20b <_JIT_ENTRY+0x20b>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 0d 01 00 00             jns     0x230 <_JIT_ENTRY+0x230>
// 123: e9 28 01 00 00                jmp     0x250 <_JIT_ENTRY+0x250>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 11                         js      0x175 <_JIT_ENTRY+0x175>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 74 66                         je      0x1db <_JIT_ENTRY+0x1db>
// 175: 85 ed                         testl   %ebp, %ebp
// 177: 0f 88 d3 00 00 00             js      0x250 <_JIT_ENTRY+0x250>
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 85 ff                      testq   %rdi, %rdi
// 185: 0f 84 c5 00 00 00             je      0x250 <_JIT_ENTRY+0x250>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NoneStruct
// 195: 48 39 c7                      cmpq    %rax, %rdi
// 198: 74 11                         je      0x1ab <_JIT_ENTRY+0x1ab>
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  PyErr_SetHandledException
// 1a4: ff d0                         callq   *%rax
// 1a6: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1ab: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b0: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b4: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ba:  R_X86_64_64  _JIT_CONTINUE
// 1c2: 4c 89 f7                      movq    %r14, %rdi
// 1c5: 48 89 de                      movq    %rbx, %rsi
// 1c8: 4c 89 e2                      movq    %r12, %rdx
// 1cb: 48 83 c4 18                   addq    $0x18, %rsp
// 1cf: 5b                            popq    %rbx
// 1d0: 41 5c                         popq    %r12
// 1d2: 41 5d                         popq    %r13
// 1d4: 41 5e                         popq    %r14
// 1d6: 41 5f                         popq    %r15
// 1d8: 5d                            popq    %rbp
// 1d9: ff e0                         jmpq    *%rax
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: 4c 89 ff                      movq    %r15, %rdi
// 1e8: ff d0                         callq   *%rax
// 1ea: 85 ed                         testl   %ebp, %ebp
// 1ec: 79 8f                         jns     0x17d <_JIT_ENTRY+0x17d>
// 1ee: eb 60                         jmp     0x250 <_JIT_ENTRY+0x250>
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _Py_Dealloc
// 1fa: 4c 89 ef                      movq    %r13, %rdi
// 1fd: ff d0                         callq   *%rax
// 1ff: 49 8b 07                      movq    (%r15), %rax
// 202: 48 85 c0                      testq   %rax, %rax
// 205: 0f 8f 10 ff ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 20b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020d:  R_X86_64_64  .rodata.str1.1
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _Py_NegativeRefcount
// 21f: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 224: 4c 89 fa                      movq    %r15, %rdx
// 227: ff d0                         callq   *%rax
// 229: 49 8b 07                      movq    (%r15), %rax
// 22c: 85 c0                         testl   %eax, %eax
// 22e: 78 20                         js      0x250 <_JIT_ENTRY+0x250>
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23a: ff d0                         callq   *%rax
// 23c: 49 ff 0f                      decq    (%r15)
// 23f: 75 0f                         jne     0x250 <_JIT_ENTRY+0x250>
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _Py_Dealloc
// 24b: 4c 89 ff                      movq    %r15, %rdi
// 24e: ff d0                         callq   *%rax
// 250: 48 83 c3 f0                   addq    $-0x10, %rbx
// 254: 4c 29 f3                      subq    %r14, %rbx
// 257: 48 83 c3 b8                   addq    $-0x48, %rbx
// 25b: 48 c1 eb 03                   shrq    $0x3, %rbx
// 25f: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 263: 31 c0                         xorl    %eax, %eax
// 265: 48 83 c4 18                   addq    $0x18, %rsp
// 269: 5b                            popq    %rbx
// 26a: 41 5c                         popq    %r12
// 26c: 41 5d                         popq    %r13
// 26e: 41 5e                         popq    %r14
// 270: 41 5f                         popq    %r15
// 272: 5d                            popq    %rbp
// 273: c3                            retq
// 274: 
static const unsigned char _CHECK_EG_MATCHplus_NOP_code_body[629] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xe1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xf0, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x0d, 0x01, 0x00, 0x00, 0xe9, 0x28, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x66, 0x85, 0xed, 0x0f, 0x88, 0xd3, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xc5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x79, 0x8f, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x10, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_NOP_code_holes[22] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_NOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_NOP_data_holes[1];

// _CHECK_EG_MATCHplus_POP_EXCEPT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_POP_EXCEPT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 8d 5e f0                   leaq    -0x10(%rsi), %rbx
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 e6                      movq    %r12, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 57                         jle     0xda <_JIT_ENTRY+0xda>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 79                         jns     0x100 <_JIT_ENTRY+0x100>
// 87: e9 8a 00 00 00                jmp     0x116 <_JIT_ENTRY+0x116>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 4c 89 ea                      movq    %r13, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 45 00                   movq    (%r13), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 4d 00                   decq    (%r13)
// c2: 74 6c                         je      0x130 <_JIT_ENTRY+0x130>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7e 7b                         jle     0x148 <_JIT_ENTRY+0x148>
// cd: 85 c0                         testl   %eax, %eax
// cf: 0f 89 99 00 00 00             jns     0x16e <_JIT_ENTRY+0x16e>
// d5: e9 aa 00 00 00                jmp     0x184 <_JIT_ENTRY+0x184>
// da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000dc:  R_X86_64_64  .rodata.str1.1
// e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e6:  R_X86_64_64  _Py_NegativeRefcount
// ee: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f3: 4c 89 ea                      movq    %r13, %rdx
// f6: ff d0                         callq   *%rax
// f8: 49 8b 45 00                   movq    (%r13), %rax
// fc: 85 c0                         testl   %eax, %eax
// fe: 78 16                         js      0x116 <_JIT_ENTRY+0x116>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10a: ff d0                         callq   *%rax
// 10c: 49 ff 4d 00                   decq    (%r13)
// 110: 0f 84 62 01 00 00             je      0x278 <_JIT_ENTRY+0x278>
// 116: 49 8b 04 24                   movq    (%r12), %rax
// 11a: 48 85 c0                      testq   %rax, %rax
// 11d: 0f 8e 71 01 00 00             jle     0x294 <_JIT_ENTRY+0x294>
// 123: 85 c0                         testl   %eax, %eax
// 125: 0f 89 8f 01 00 00             jns     0x2ba <_JIT_ENTRY+0x2ba>
// 12b: e9 ab 01 00 00                jmp     0x2db <_JIT_ENTRY+0x2db>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_Dealloc
// 13a: 4c 89 ef                      movq    %r13, %rdi
// 13d: ff d0                         callq   *%rax
// 13f: 49 8b 04 24                   movq    (%r12), %rax
// 143: 48 85 c0                      testq   %rax, %rax
// 146: 7f 85                         jg      0xcd <_JIT_ENTRY+0xcd>
// 148: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014a:  R_X86_64_64  .rodata.str1.1
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 161: 4c 89 e2                      movq    %r12, %rdx
// 164: ff d0                         callq   *%rax
// 166: 49 8b 04 24                   movq    (%r12), %rax
// 16a: 85 c0                         testl   %eax, %eax
// 16c: 78 16                         js      0x184 <_JIT_ENTRY+0x184>
// 16e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000170:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 178: ff d0                         callq   *%rax
// 17a: 49 ff 0c 24                   decq    (%r12)
// 17e: 0f 84 d6 00 00 00             je      0x25a <_JIT_ENTRY+0x25a>
// 184: 85 ed                         testl   %ebp, %ebp
// 186: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 18b: 0f 88 4a 01 00 00             js      0x2db <_JIT_ENTRY+0x2db>
// 191: 48 8b 3c 24                   movq    (%rsp), %rdi
// 195: 48 85 ff                      testq   %rdi, %rdi
// 198: 0f 84 3d 01 00 00             je      0x2db <_JIT_ENTRY+0x2db>
// 19e: 49 83 c7 f8                   addq    $-0x8, %r15
// 1a2: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001a4:  R_X86_64_64  _Py_NoneStruct
// 1ac: 4c 89 e8                      movq    %r13, %rax
// 1af: 4c 39 ef                      cmpq    %r13, %rdi
// 1b2: 74 10                         je      0x1c4 <_JIT_ENTRY+0x1c4>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  PyErr_SetHandledException
// 1be: ff d0                         callq   *%rax
// 1c0: 48 8b 04 24                   movq    (%rsp), %rax
// 1c4: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1c9: 48 89 0b                      movq    %rcx, (%rbx)
// 1cc: 49 89 07                      movq    %rax, (%r15)
// 1cf: 49 8b 4e 70                   movq    0x70(%r14), %rcx
// 1d3: 4c 8b 21                      movq    (%rcx), %r12
// 1d6: 31 d2                         xorl    %edx, %edx
// 1d8: 4c 39 e8                      cmpq    %r13, %rax
// 1db: 48 0f 45 d0                   cmovneq %rax, %rdx
// 1df: 48 89 11                      movq    %rdx, (%rcx)
// 1e2: 4d 85 e4                      testq   %r12, %r12
// 1e5: 74 50                         je      0x237 <_JIT_ENTRY+0x237>
// 1e7: 49 8b 04 24                   movq    (%r12), %rax
// 1eb: 48 85 c0                      testq   %rax, %rax
// 1ee: 7f 22                         jg      0x212 <_JIT_ENTRY+0x212>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1+0x39
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _Py_NegativeRefcount
// 204: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 209: 4c 89 e2                      movq    %r12, %rdx
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 04 24                   movq    (%r12), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 21                         js      0x237 <_JIT_ENTRY+0x237>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 0c 24                   decq    (%r12)
// 226: 75 0f                         jne     0x237 <_JIT_ENTRY+0x237>
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _Py_Dealloc
// 232: 4c 89 e7                      movq    %r12, %rdi
// 235: ff d0                         callq   *%rax
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _JIT_CONTINUE
// 241: 48 89 ef                      movq    %rbp, %rdi
// 244: 4c 89 fe                      movq    %r15, %rsi
// 247: 4c 89 f2                      movq    %r14, %rdx
// 24a: 48 83 c4 18                   addq    $0x18, %rsp
// 24e: 5b                            popq    %rbx
// 24f: 41 5c                         popq    %r12
// 251: 41 5d                         popq    %r13
// 253: 41 5e                         popq    %r14
// 255: 41 5f                         popq    %r15
// 257: 5d                            popq    %rbp
// 258: ff e0                         jmpq    *%rax
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _Py_Dealloc
// 264: 4c 89 e7                      movq    %r12, %rdi
// 267: ff d0                         callq   *%rax
// 269: 85 ed                         testl   %ebp, %ebp
// 26b: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 270: 0f 89 1b ff ff ff             jns     0x191 <_JIT_ENTRY+0x191>
// 276: eb 63                         jmp     0x2db <_JIT_ENTRY+0x2db>
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _Py_Dealloc
// 282: 4c 89 ef                      movq    %r13, %rdi
// 285: ff d0                         callq   *%rax
// 287: 49 8b 04 24                   movq    (%r12), %rax
// 28b: 48 85 c0                      testq   %rax, %rax
// 28e: 0f 8f 8f fe ff ff             jg      0x123 <_JIT_ENTRY+0x123>
// 294: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000296:  R_X86_64_64  .rodata.str1.1
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _Py_NegativeRefcount
// 2a8: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2ad: 4c 89 e2                      movq    %r12, %rdx
// 2b0: ff d0                         callq   *%rax
// 2b2: 49 8b 04 24                   movq    (%r12), %rax
// 2b6: 85 c0                         testl   %eax, %eax
// 2b8: 78 21                         js      0x2db <_JIT_ENTRY+0x2db>
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c4: ff d0                         callq   *%rax
// 2c6: 49 ff 0c 24                   decq    (%r12)
// 2ca: 75 0f                         jne     0x2db <_JIT_ENTRY+0x2db>
// 2cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ce:  R_X86_64_64  _Py_Dealloc
// 2d6: 4c 89 e7                      movq    %r12, %rdi
// 2d9: ff d0                         callq   *%rax
// 2db: 48 29 eb                      subq    %rbp, %rbx
// 2de: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2e2: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2e6: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 2e9: 31 c0                         xorl    %eax, %eax
// 2eb: 48 83 c4 18                   addq    $0x18, %rsp
// 2ef: 5b                            popq    %rbx
// 2f0: 41 5c                         popq    %r12
// 2f2: 41 5d                         popq    %r13
// 2f4: 41 5e                         popq    %r14
// 2f6: 41 5f                         popq    %r15
// 2f8: 5d                            popq    %rbp
// 2f9: c3                            retq
// 2fa: 
static const unsigned char _CHECK_EG_MATCHplus_POP_EXCEPT_code_body[763] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0x8d, 0x5e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x62, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x71, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x8f, 0x01, 0x00, 0x00, 0xe9, 0xab, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x88, 0x4a, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x3d, 0x01, 0x00, 0x00, 0x49, 0x83, 0xc7, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe8, 0x4c, 0x39, 0xef, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x0b, 0x49, 0x89, 0x07, 0x49, 0x8b, 0x4e, 0x70, 0x4c, 0x8b, 0x21, 0x31, 0xd2, 0x4c, 0x39, 0xe8, 0x48, 0x0f, 0x45, 0xd0, 0x48, 0x89, 0x11, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x89, 0x1b, 0xff, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x8f, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_POP_EXCEPT_code_holes[26] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_POP_EXCEPT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_POP_EXCEPT_data_holes[1];

// _CHECK_EG_MATCHplus_POP_FRAME
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_POP_FRAME.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 76 f8                   movq    -0x8(%rsi), %r14
// 1f: 48 8d 6e f0                   leaq    -0x10(%rsi), %rbp
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 f6                      movq    %r14, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 3e                         js      0x77 <_JIT_ENTRY+0x77>
// 39: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 41: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 4a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004c:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 54: 48 89 e2                      movq    %rsp, %rdx
// 57: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5c: 4c 89 ef                      movq    %r13, %rdi
// 5f: 4c 89 f6                      movq    %r14, %rsi
// 62: ff d0                         callq   *%rax
// 64: 89 44 24 0c                   movl    %eax, 0xc(%rsp)
// 68: 49 8b 45 00                   movq    (%r13), %rax
// 6c: 48 85 c0                      testq   %rax, %rax
// 6f: 7e 18                         jle     0x89 <_JIT_ENTRY+0x89>
// 71: 85 c0                         testl   %eax, %eax
// 73: 79 3a                         jns     0xaf <_JIT_ENTRY+0xaf>
// 75: eb 4a                         jmp     0xc1 <_JIT_ENTRY+0xc1>
// 77: 49 8b 45 00                   movq    (%r13), %rax
// 7b: 48 85 c0                      testq   %rax, %rax
// 7e: 7e 56                         jle     0xd6 <_JIT_ENTRY+0xd6>
// 80: 85 c0                         testl   %eax, %eax
// 82: 79 78                         jns     0xfc <_JIT_ENTRY+0xfc>
// 84: e9 89 00 00 00                jmp     0x112 <_JIT_ENTRY+0x112>
// 89: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008b:  R_X86_64_64  .rodata.str1.1
// 93: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000095:  R_X86_64_64  _Py_NegativeRefcount
// 9d: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a2: 4c 89 ea                      movq    %r13, %rdx
// a5: ff d0                         callq   *%rax
// a7: 49 8b 45 00                   movq    (%r13), %rax
// ab: 85 c0                         testl   %eax, %eax
// ad: 78 12                         js      0xc1 <_JIT_ENTRY+0xc1>
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b9: ff d0                         callq   *%rax
// bb: 49 ff 4d 00                   decq    (%r13)
// bf: 74 6a                         je      0x12b <_JIT_ENTRY+0x12b>
// c1: 49 8b 06                      movq    (%r14), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7e 79                         jle     0x142 <_JIT_ENTRY+0x142>
// c9: 85 c0                         testl   %eax, %eax
// cb: 0f 89 96 00 00 00             jns     0x167 <_JIT_ENTRY+0x167>
// d1: e9 a6 00 00 00                jmp     0x17c <_JIT_ENTRY+0x17c>
// d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d8:  R_X86_64_64  .rodata.str1.1
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_NegativeRefcount
// ea: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ef: 4c 89 ea                      movq    %r13, %rdx
// f2: ff d0                         callq   *%rax
// f4: 49 8b 45 00                   movq    (%r13), %rax
// f8: 85 c0                         testl   %eax, %eax
// fa: 78 16                         js      0x112 <_JIT_ENTRY+0x112>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 106: ff d0                         callq   *%rax
// 108: 49 ff 4d 00                   decq    (%r13)
// 10c: 0f 84 34 01 00 00             je      0x246 <_JIT_ENTRY+0x246>
// 112: 49 8b 06                      movq    (%r14), %rax
// 115: 48 85 c0                      testq   %rax, %rax
// 118: 0f 8e 43 01 00 00             jle     0x261 <_JIT_ENTRY+0x261>
// 11e: 85 c0                         testl   %eax, %eax
// 120: 0f 89 60 01 00 00             jns     0x286 <_JIT_ENTRY+0x286>
// 126: e9 7b 01 00 00                jmp     0x2a6 <_JIT_ENTRY+0x2a6>
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: 4c 89 ef                      movq    %r13, %rdi
// 138: ff d0                         callq   *%rax
// 13a: 49 8b 06                      movq    (%r14), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 87                         jg      0xc9 <_JIT_ENTRY+0xc9>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 f2                      movq    %r14, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 06                      movq    (%r14), %rax
// 163: 85 c0                         testl   %eax, %eax
// 165: 78 15                         js      0x17c <_JIT_ENTRY+0x17c>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 49 ff 0e                      decq    (%r14)
// 176: 0f 84 ae 00 00 00             je      0x22a <_JIT_ENTRY+0x22a>
// 17c: 83 7c 24 0c 00                cmpl    $0x0, 0xc(%rsp)
// 181: 0f 88 1f 01 00 00             js      0x2a6 <_JIT_ENTRY+0x2a6>
// 187: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 12 01 00 00             je      0x2a6 <_JIT_ENTRY+0x2a6>
// 194: 49 83 c4 f8                   addq    $-0x8, %r12
// 198: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000019a:  R_X86_64_64  _Py_NoneStruct
// 1a2: 4c 39 ef                      cmpq    %r13, %rdi
// 1a5: 74 10                         je      0x1b7 <_JIT_ENTRY+0x1b7>
// 1a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a9:  R_X86_64_64  PyErr_SetHandledException
// 1b1: ff d0                         callq   *%rax
// 1b3: 4c 8b 2c 24                   movq    (%rsp), %r13
// 1b7: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1bc: 48 89 45 00                   movq    %rax, (%rbp)
// 1c0: 4d 89 2c 24                   movq    %r13, (%r12)
// 1c4: 49 29 dc                      subq    %rbx, %r12
// 1c7: 49 83 c4 b8                   addq    $-0x48, %r12
// 1cb: 49 c1 ec 03                   shrq    $0x3, %r12
// 1cf: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 1d3: 41 ff 47 24                   incl    0x24(%r15)
// 1d7: 4c 8b 73 08                   movq    0x8(%rbx), %r14
// 1db: 4d 89 77 40                   movq    %r14, 0x40(%r15)
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _PyEval_FrameClearAndPop
// 1e9: 4c 89 ff                      movq    %r15, %rdi
// 1ec: 48 89 de                      movq    %rbx, %rsi
// 1ef: ff d0                         callq   *%rax
// 1f1: 49 63 46 40                   movslq  0x40(%r14), %rax
// 1f5: 4d 89 6c c6 48                movq    %r13, 0x48(%r14,%rax,8)
// 1fa: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1fe: 48 83 c6 50                   addq    $0x50, %rsi
// 202: 41 c7 46 40 ff ff ff ff       movl    $0xffffffff, 0x40(%r14) # imm = 0xFFFFFFFF
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _JIT_CONTINUE
// 214: 4c 89 f7                      movq    %r14, %rdi
// 217: 4c 89 fa                      movq    %r15, %rdx
// 21a: 48 83 c4 18                   addq    $0x18, %rsp
// 21e: 5b                            popq    %rbx
// 21f: 41 5c                         popq    %r12
// 221: 41 5d                         popq    %r13
// 223: 41 5e                         popq    %r14
// 225: 41 5f                         popq    %r15
// 227: 5d                            popq    %rbp
// 228: ff e0                         jmpq    *%rax
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  _Py_Dealloc
// 234: 4c 89 f7                      movq    %r14, %rdi
// 237: ff d0                         callq   *%rax
// 239: 83 7c 24 0c 00                cmpl    $0x0, 0xc(%rsp)
// 23e: 0f 89 43 ff ff ff             jns     0x187 <_JIT_ENTRY+0x187>
// 244: eb 60                         jmp     0x2a6 <_JIT_ENTRY+0x2a6>
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_Dealloc
// 250: 4c 89 ef                      movq    %r13, %rdi
// 253: ff d0                         callq   *%rax
// 255: 49 8b 06                      movq    (%r14), %rax
// 258: 48 85 c0                      testq   %rax, %rax
// 25b: 0f 8f bd fe ff ff             jg      0x11e <_JIT_ENTRY+0x11e>
// 261: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000263:  R_X86_64_64  .rodata.str1.1
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_NegativeRefcount
// 275: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 27a: 4c 89 f2                      movq    %r14, %rdx
// 27d: ff d0                         callq   *%rax
// 27f: 49 8b 06                      movq    (%r14), %rax
// 282: 85 c0                         testl   %eax, %eax
// 284: 78 20                         js      0x2a6 <_JIT_ENTRY+0x2a6>
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 290: ff d0                         callq   *%rax
// 292: 49 ff 0e                      decq    (%r14)
// 295: 75 0f                         jne     0x2a6 <_JIT_ENTRY+0x2a6>
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _Py_Dealloc
// 2a1: 4c 89 f7                      movq    %r14, %rdi
// 2a4: ff d0                         callq   *%rax
// 2a6: 48 29 dd                      subq    %rbx, %rbp
// 2a9: 48 83 c5 b8                   addq    $-0x48, %rbp
// 2ad: 48 c1 ed 03                   shrq    $0x3, %rbp
// 2b1: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 2b4: 31 c0                         xorl    %eax, %eax
// 2b6: 48 83 c4 18                   addq    $0x18, %rsp
// 2ba: 5b                            popq    %rbx
// 2bb: 41 5c                         popq    %r12
// 2bd: 41 5d                         popq    %r13
// 2bf: 41 5e                         popq    %r14
// 2c1: 41 5f                         popq    %r15
// 2c3: 5d                            popq    %rbp
// 2c4: c3                            retq
// 2c5: 
static const unsigned char _CHECK_EG_MATCHplus_POP_FRAME_code_body[710] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x76, 0xf8, 0x48, 0x8d, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3e, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x0c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x34, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x43, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x60, 0x01, 0x00, 0x00, 0xe9, 0x7b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x83, 0x7c, 0x24, 0x0c, 0x00, 0x0f, 0x88, 0x1f, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x12, 0x01, 0x00, 0x00, 0x49, 0x83, 0xc4, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xef, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x2c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x45, 0x00, 0x4d, 0x89, 0x2c, 0x24, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x41, 0xff, 0x47, 0x24, 0x4c, 0x8b, 0x73, 0x08, 0x4d, 0x89, 0x77, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xde, 0xff, 0xd0, 0x49, 0x63, 0x46, 0x40, 0x4d, 0x89, 0x6c, 0xc6, 0x48, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0x50, 0x41, 0xc7, 0x46, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x83, 0x7c, 0x24, 0x0c, 0x00, 0x0f, 0x89, 0x43, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xbd, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_POP_FRAME_code_holes[23] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FrameClearAndPop, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_POP_FRAME_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_POP_FRAME_data_holes[1];

// _CHECK_EG_MATCHplus_POP_TOP
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_POP_TOP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 8d 5e f0                   leaq    -0x10(%rsi), %rbx
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 e6                      movq    %r12, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 1c                         jle     0x90 <_JIT_ENTRY+0x90>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3e                         jns     0xb6 <_JIT_ENTRY+0xb6>
// 78: eb 52                         jmp     0xcc <_JIT_ENTRY+0xcc>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 63                         jle     0xe6 <_JIT_ENTRY+0xe6>
// 83: 85 c0                         testl   %eax, %eax
// 85: 0f 89 81 00 00 00             jns     0x10c <_JIT_ENTRY+0x10c>
// 8b: e9 9d 00 00 00                jmp     0x12d <_JIT_ENTRY+0x12d>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_NegativeRefcount
// a4: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a9: 4c 89 ea                      movq    %r13, %rdx
// ac: ff d0                         callq   *%rax
// ae: 49 8b 45 00                   movq    (%r13), %rax
// b2: 85 c0                         testl   %eax, %eax
// b4: 78 16                         js      0xcc <_JIT_ENTRY+0xcc>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c0: ff d0                         callq   *%rax
// c2: 49 ff 4d 00                   decq    (%r13)
// c6: 0f 84 c7 00 00 00             je      0x193 <_JIT_ENTRY+0x193>
// cc: 49 8b 04 24                   movq    (%r12), %rax
// d0: 48 85 c0                      testq   %rax, %rax
// d3: 0f 8e d6 00 00 00             jle     0x1af <_JIT_ENTRY+0x1af>
// d9: 85 c0                         testl   %eax, %eax
// db: 0f 89 f4 00 00 00             jns     0x1d5 <_JIT_ENTRY+0x1d5>
// e1: e9 05 01 00 00                jmp     0x1eb <_JIT_ENTRY+0x1eb>
// e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e8:  R_X86_64_64  .rodata.str1.1
// f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f2:  R_X86_64_64  _Py_NegativeRefcount
// fa: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ff: 4c 89 ea                      movq    %r13, %rdx
// 102: ff d0                         callq   *%rax
// 104: 49 8b 45 00                   movq    (%r13), %rax
// 108: 85 c0                         testl   %eax, %eax
// 10a: 78 21                         js      0x12d <_JIT_ENTRY+0x12d>
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 116: ff d0                         callq   *%rax
// 118: 49 ff 4d 00                   decq    (%r13)
// 11c: 75 0f                         jne     0x12d <_JIT_ENTRY+0x12d>
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _Py_Dealloc
// 128: 4c 89 ef                      movq    %r13, %rdi
// 12b: ff d0                         callq   *%rax
// 12d: 49 8b 04 24                   movq    (%r12), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 09                         jle     0x13f <_JIT_ENTRY+0x13f>
// 136: 85 c0                         testl   %eax, %eax
// 138: 79 2f                         jns     0x169 <_JIT_ENTRY+0x169>
// 13a: e9 83 01 00 00                jmp     0x2c2 <_JIT_ENTRY+0x2c2>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 0f 88 59 01 00 00             js      0x2c2 <_JIT_ENTRY+0x2c2>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 0c 24                   decq    (%r12)
// 179: 0f 85 43 01 00 00             jne     0x2c2 <_JIT_ENTRY+0x2c2>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_Dealloc
// 189: 4c 89 e7                      movq    %r12, %rdi
// 18c: ff d0                         callq   *%rax
// 18e: e9 2f 01 00 00                jmp     0x2c2 <_JIT_ENTRY+0x2c2>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_Dealloc
// 19d: 4c 89 ef                      movq    %r13, %rdi
// 1a0: ff d0                         callq   *%rax
// 1a2: 49 8b 04 24                   movq    (%r12), %rax
// 1a6: 48 85 c0                      testq   %rax, %rax
// 1a9: 0f 8f 2a ff ff ff             jg      0xd9 <_JIT_ENTRY+0xd9>
// 1af: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b1:  R_X86_64_64  .rodata.str1.1
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_NegativeRefcount
// 1c3: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c8: 4c 89 e2                      movq    %r12, %rdx
// 1cb: ff d0                         callq   *%rax
// 1cd: 49 8b 04 24                   movq    (%r12), %rax
// 1d1: 85 c0                         testl   %eax, %eax
// 1d3: 78 16                         js      0x1eb <_JIT_ENTRY+0x1eb>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1df: ff d0                         callq   *%rax
// 1e1: 49 ff 0c 24                   decq    (%r12)
// 1e5: 0f 84 bb 00 00 00             je      0x2a6 <_JIT_ENTRY+0x2a6>
// 1eb: 85 ed                         testl   %ebp, %ebp
// 1ed: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 1f2: 0f 88 ca 00 00 00             js      0x2c2 <_JIT_ENTRY+0x2c2>
// 1f8: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1fc: 48 85 ff                      testq   %rdi, %rdi
// 1ff: 0f 84 bd 00 00 00             je      0x2c2 <_JIT_ENTRY+0x2c2>
// 205: 49 83 c7 f8                   addq    $-0x8, %r15
// 209: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000020b:  R_X86_64_64  _Py_NoneStruct
// 213: 4c 39 e7                      cmpq    %r12, %rdi
// 216: 74 10                         je      0x228 <_JIT_ENTRY+0x228>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  PyErr_SetHandledException
// 222: ff d0                         callq   *%rax
// 224: 4c 8b 24 24                   movq    (%rsp), %r12
// 228: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 22d: 48 89 03                      movq    %rax, (%rbx)
// 230: 4d 89 27                      movq    %r12, (%r15)
// 233: 49 8b 04 24                   movq    (%r12), %rax
// 237: 48 85 c0                      testq   %rax, %rax
// 23a: 7f 22                         jg      0x25e <_JIT_ENTRY+0x25e>
// 23c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023e:  R_X86_64_64  .rodata.str1.1
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_NegativeRefcount
// 250: be 54 00 00 00                movl    $0x54, %esi
// 255: 4c 89 e2                      movq    %r12, %rdx
// 258: ff d0                         callq   *%rax
// 25a: 49 8b 04 24                   movq    (%r12), %rax
// 25e: 85 c0                         testl   %eax, %eax
// 260: 78 21                         js      0x283 <_JIT_ENTRY+0x283>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26c: ff d0                         callq   *%rax
// 26e: 49 ff 0c 24                   decq    (%r12)
// 272: 75 0f                         jne     0x283 <_JIT_ENTRY+0x283>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _Py_Dealloc
// 27e: 4c 89 e7                      movq    %r12, %rdi
// 281: ff d0                         callq   *%rax
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _JIT_CONTINUE
// 28d: 48 89 ef                      movq    %rbp, %rdi
// 290: 4c 89 fe                      movq    %r15, %rsi
// 293: 4c 89 f2                      movq    %r14, %rdx
// 296: 48 83 c4 18                   addq    $0x18, %rsp
// 29a: 5b                            popq    %rbx
// 29b: 41 5c                         popq    %r12
// 29d: 41 5d                         popq    %r13
// 29f: 41 5e                         popq    %r14
// 2a1: 41 5f                         popq    %r15
// 2a3: 5d                            popq    %rbp
// 2a4: ff e0                         jmpq    *%rax
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  _Py_Dealloc
// 2b0: 4c 89 e7                      movq    %r12, %rdi
// 2b3: ff d0                         callq   *%rax
// 2b5: 85 ed                         testl   %ebp, %ebp
// 2b7: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 2bc: 0f 89 36 ff ff ff             jns     0x1f8 <_JIT_ENTRY+0x1f8>
// 2c2: 48 29 eb                      subq    %rbp, %rbx
// 2c5: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2c9: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2cd: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 2d0: 31 c0                         xorl    %eax, %eax
// 2d2: 48 83 c4 18                   addq    $0x18, %rsp
// 2d6: 5b                            popq    %rbx
// 2d7: 41 5c                         popq    %r12
// 2d9: 41 5d                         popq    %r13
// 2db: 41 5e                         popq    %r14
// 2dd: 41 5f                         popq    %r15
// 2df: 5d                            popq    %rbp
// 2e0: c3                            retq
// 2e1: 
static const unsigned char _CHECK_EG_MATCHplus_POP_TOP_code_body[738] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0x8d, 0x5e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0x83, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x59, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x43, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x2f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xbb, 0x00, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x88, 0xca, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xbd, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc7, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x89, 0x03, 0x4d, 0x89, 0x27, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x89, 0x36, 0xff, 0xff, 0xff, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_POP_TOP_code_holes[26] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_POP_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_POP_TOP_data_holes[1];

// _CHECK_EG_MATCHplus_PUSH_EXC_INFO
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_PUSH_EXC_INFO.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 28 01 00 00             je      0x237 <_JIT_ENTRY+0x237>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 37 01 00 00             jle     0x252 <_JIT_ENTRY+0x252>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 54 01 00 00             jns     0x277 <_JIT_ENTRY+0x277>
// 123: e9 6f 01 00 00                jmp     0x297 <_JIT_ENTRY+0x297>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 a5 00 00 00             je      0x21e <_JIT_ENTRY+0x21e>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 16 01 00 00             js      0x297 <_JIT_ENTRY+0x297>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 08 01 00 00             je      0x297 <_JIT_ENTRY+0x297>
// 18f: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 4c 39 ff                      cmpq    %r15, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 1af: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b4: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 1b8: 4c 89 7b f8                   movq    %r15, -0x8(%rbx)
// 1bc: 4d 8b 6c 24 70                movq    0x70(%r12), %r13
// 1c1: 49 8b 6d 00                   movq    (%r13), %rbp
// 1c5: 41 8b 07                      movl    (%r15), %eax
// 1c8: ff c0                         incl    %eax
// 1ca: 74 0f                         je      0x1db <_JIT_ENTRY+0x1db>
// 1cc: 41 89 07                      movl    %eax, (%r15)
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 48 85 ed                      testq   %rbp, %rbp
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _Py_NoneStruct
// 1e8: 48 0f 45 c5                   cmovneq %rbp, %rax
// 1ec: 4d 89 7d 00                   movq    %r15, (%r13)
// 1f0: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1f4: 4c 89 3b                      movq    %r15, (%rbx)
// 1f7: 48 83 c3 08                   addq    $0x8, %rbx
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _JIT_CONTINUE
// 205: 4c 89 f7                      movq    %r14, %rdi
// 208: 48 89 de                      movq    %rbx, %rsi
// 20b: 4c 89 e2                      movq    %r12, %rdx
// 20e: 48 83 c4 18                   addq    $0x18, %rsp
// 212: 5b                            popq    %rbx
// 213: 41 5c                         popq    %r12
// 215: 41 5d                         popq    %r13
// 217: 41 5e                         popq    %r14
// 219: 41 5f                         popq    %r15
// 21b: 5d                            popq    %rbp
// 21c: ff e0                         jmpq    *%rax
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _Py_Dealloc
// 228: 4c 89 ff                      movq    %r15, %rdi
// 22b: ff d0                         callq   *%rax
// 22d: 85 ed                         testl   %ebp, %ebp
// 22f: 0f 89 4c ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 235: eb 60                         jmp     0x297 <_JIT_ENTRY+0x297>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _Py_Dealloc
// 241: 4c 89 ef                      movq    %r13, %rdi
// 244: ff d0                         callq   *%rax
// 246: 49 8b 07                      movq    (%r15), %rax
// 249: 48 85 c0                      testq   %rax, %rax
// 24c: 0f 8f c9 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 252: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000254:  R_X86_64_64  .rodata.str1.1
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  _Py_NegativeRefcount
// 266: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 26b: 4c 89 fa                      movq    %r15, %rdx
// 26e: ff d0                         callq   *%rax
// 270: 49 8b 07                      movq    (%r15), %rax
// 273: 85 c0                         testl   %eax, %eax
// 275: 78 20                         js      0x297 <_JIT_ENTRY+0x297>
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 281: ff d0                         callq   *%rax
// 283: 49 ff 0f                      decq    (%r15)
// 286: 75 0f                         jne     0x297 <_JIT_ENTRY+0x297>
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _Py_Dealloc
// 292: 4c 89 ff                      movq    %r15, %rdi
// 295: ff d0                         callq   *%rax
// 297: 48 83 c3 f0                   addq    $-0x10, %rbx
// 29b: 4c 29 f3                      subq    %r14, %rbx
// 29e: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2a2: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2a6: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2aa: 31 c0                         xorl    %eax, %eax
// 2ac: 48 83 c4 18                   addq    $0x18, %rsp
// 2b0: 5b                            popq    %rbx
// 2b1: 41 5c                         popq    %r12
// 2b3: 41 5d                         popq    %r13
// 2b5: 41 5e                         popq    %r14
// 2b7: 41 5f                         popq    %r15
// 2b9: 5d                            popq    %rbp
// 2ba: c3                            retq
// 2bb: 
static const unsigned char _CHECK_EG_MATCHplus_PUSH_EXC_INFO_code_body[700] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x28, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x37, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x54, 0x01, 0x00, 0x00, 0xe9, 0x6f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x16, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x08, 0x01, 0x00, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xff, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x7b, 0xf8, 0x4d, 0x8b, 0x6c, 0x24, 0x70, 0x49, 0x8b, 0x6d, 0x00, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45, 0xc5, 0x4d, 0x89, 0x7d, 0x00, 0x48, 0x89, 0x43, 0xf8, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x4c, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xc9, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_PUSH_EXC_INFO_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_PUSH_EXC_INFO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_PUSH_EXC_INFO_data_holes[1];

// _CHECK_EG_MATCHplus_PUSH_FRAME
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_PUSH_FRAME.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f4                      movq    %rsi, %r12
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 76 f8                   movq    -0x8(%rsi), %r14
// 1f: 48 8d 6e f0                   leaq    -0x10(%rsi), %rbp
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 f6                      movq    %r14, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 3e                         js      0x77 <_JIT_ENTRY+0x77>
// 39: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 41: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 4a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004c:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 54: 48 89 e2                      movq    %rsp, %rdx
// 57: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5c: 4c 89 ef                      movq    %r13, %rdi
// 5f: 4c 89 f6                      movq    %r14, %rsi
// 62: ff d0                         callq   *%rax
// 64: 89 44 24 0c                   movl    %eax, 0xc(%rsp)
// 68: 49 8b 45 00                   movq    (%r13), %rax
// 6c: 48 85 c0                      testq   %rax, %rax
// 6f: 7e 18                         jle     0x89 <_JIT_ENTRY+0x89>
// 71: 85 c0                         testl   %eax, %eax
// 73: 79 3a                         jns     0xaf <_JIT_ENTRY+0xaf>
// 75: eb 4a                         jmp     0xc1 <_JIT_ENTRY+0xc1>
// 77: 49 8b 45 00                   movq    (%r13), %rax
// 7b: 48 85 c0                      testq   %rax, %rax
// 7e: 7e 56                         jle     0xd6 <_JIT_ENTRY+0xd6>
// 80: 85 c0                         testl   %eax, %eax
// 82: 79 78                         jns     0xfc <_JIT_ENTRY+0xfc>
// 84: e9 89 00 00 00                jmp     0x112 <_JIT_ENTRY+0x112>
// 89: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008b:  R_X86_64_64  .rodata.str1.1
// 93: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000095:  R_X86_64_64  _Py_NegativeRefcount
// 9d: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a2: 4c 89 ea                      movq    %r13, %rdx
// a5: ff d0                         callq   *%rax
// a7: 49 8b 45 00                   movq    (%r13), %rax
// ab: 85 c0                         testl   %eax, %eax
// ad: 78 12                         js      0xc1 <_JIT_ENTRY+0xc1>
// af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b9: ff d0                         callq   *%rax
// bb: 49 ff 4d 00                   decq    (%r13)
// bf: 74 6a                         je      0x12b <_JIT_ENTRY+0x12b>
// c1: 49 8b 06                      movq    (%r14), %rax
// c4: 48 85 c0                      testq   %rax, %rax
// c7: 7e 79                         jle     0x142 <_JIT_ENTRY+0x142>
// c9: 85 c0                         testl   %eax, %eax
// cb: 0f 89 96 00 00 00             jns     0x167 <_JIT_ENTRY+0x167>
// d1: e9 a6 00 00 00                jmp     0x17c <_JIT_ENTRY+0x17c>
// d6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d8:  R_X86_64_64  .rodata.str1.1
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_NegativeRefcount
// ea: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ef: 4c 89 ea                      movq    %r13, %rdx
// f2: ff d0                         callq   *%rax
// f4: 49 8b 45 00                   movq    (%r13), %rax
// f8: 85 c0                         testl   %eax, %eax
// fa: 78 16                         js      0x112 <_JIT_ENTRY+0x112>
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 106: ff d0                         callq   *%rax
// 108: 49 ff 4d 00                   decq    (%r13)
// 10c: 0f 84 1c 01 00 00             je      0x22e <_JIT_ENTRY+0x22e>
// 112: 49 8b 06                      movq    (%r14), %rax
// 115: 48 85 c0                      testq   %rax, %rax
// 118: 0f 8e 2b 01 00 00             jle     0x249 <_JIT_ENTRY+0x249>
// 11e: 85 c0                         testl   %eax, %eax
// 120: 0f 89 48 01 00 00             jns     0x26e <_JIT_ENTRY+0x26e>
// 126: e9 63 01 00 00                jmp     0x28e <_JIT_ENTRY+0x28e>
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_Dealloc
// 135: 4c 89 ef                      movq    %r13, %rdi
// 138: ff d0                         callq   *%rax
// 13a: 49 8b 06                      movq    (%r14), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 87                         jg      0xc9 <_JIT_ENTRY+0xc9>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 f2                      movq    %r14, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 06                      movq    (%r14), %rax
// 163: 85 c0                         testl   %eax, %eax
// 165: 78 15                         js      0x17c <_JIT_ENTRY+0x17c>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 49 ff 0e                      decq    (%r14)
// 176: 0f 84 96 00 00 00             je      0x212 <_JIT_ENTRY+0x212>
// 17c: 83 7c 24 0c 00                cmpl    $0x0, 0xc(%rsp)
// 181: 0f 88 07 01 00 00             js      0x28e <_JIT_ENTRY+0x28e>
// 187: 48 8b 04 24                   movq    (%rsp), %rax
// 18b: 48 85 c0                      testq   %rax, %rax
// 18e: 0f 84 fa 00 00 00             je      0x28e <_JIT_ENTRY+0x28e>
// 194: 49 83 c4 f8                   addq    $-0x8, %r12
// 198: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019a:  R_X86_64_64  _Py_NoneStruct
// 1a2: 48 39 f8                      cmpq    %rdi, %rax
// 1a5: 74 13                         je      0x1ba <_JIT_ENTRY+0x1ba>
// 1a7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a9:  R_X86_64_64  PyErr_SetHandledException
// 1b1: 48 89 c7                      movq    %rax, %rdi
// 1b4: ff d1                         callq   *%rcx
// 1b6: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ba: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1bf: 48 89 45 00                   movq    %rax, (%rbp)
// 1c3: 49 89 3c 24                   movq    %rdi, (%r12)
// 1c7: 49 29 dc                      subq    %rbx, %r12
// 1ca: 49 83 c4 b8                   addq    $-0x48, %r12
// 1ce: 49 c1 ec 03                   shrq    $0x3, %r12
// 1d2: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 1d6: 48 89 5f 08                   movq    %rbx, 0x8(%rdi)
// 1da: 49 89 7f 40                   movq    %rdi, 0x40(%r15)
// 1de: 41 ff 4f 24                   decl    0x24(%r15)
// 1e2: 48 63 47 40                   movslq  0x40(%rdi), %rax
// 1e6: 48 8d 34 c7                   leaq    (%rdi,%rax,8), %rsi
// 1ea: 48 83 c6 48                   addq    $0x48, %rsi
// 1ee: c7 47 40 ff ff ff ff          movl    $0xffffffff, 0x40(%rdi) # imm = 0xFFFFFFFF
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _JIT_CONTINUE
// 1ff: 4c 89 fa                      movq    %r15, %rdx
// 202: 48 83 c4 18                   addq    $0x18, %rsp
// 206: 5b                            popq    %rbx
// 207: 41 5c                         popq    %r12
// 209: 41 5d                         popq    %r13
// 20b: 41 5e                         popq    %r14
// 20d: 41 5f                         popq    %r15
// 20f: 5d                            popq    %rbp
// 210: ff e0                         jmpq    *%rax
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_Dealloc
// 21c: 4c 89 f7                      movq    %r14, %rdi
// 21f: ff d0                         callq   *%rax
// 221: 83 7c 24 0c 00                cmpl    $0x0, 0xc(%rsp)
// 226: 0f 89 5b ff ff ff             jns     0x187 <_JIT_ENTRY+0x187>
// 22c: eb 60                         jmp     0x28e <_JIT_ENTRY+0x28e>
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _Py_Dealloc
// 238: 4c 89 ef                      movq    %r13, %rdi
// 23b: ff d0                         callq   *%rax
// 23d: 49 8b 06                      movq    (%r14), %rax
// 240: 48 85 c0                      testq   %rax, %rax
// 243: 0f 8f d5 fe ff ff             jg      0x11e <_JIT_ENTRY+0x11e>
// 249: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024b:  R_X86_64_64  .rodata.str1.1
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  _Py_NegativeRefcount
// 25d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 262: 4c 89 f2                      movq    %r14, %rdx
// 265: ff d0                         callq   *%rax
// 267: 49 8b 06                      movq    (%r14), %rax
// 26a: 85 c0                         testl   %eax, %eax
// 26c: 78 20                         js      0x28e <_JIT_ENTRY+0x28e>
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 278: ff d0                         callq   *%rax
// 27a: 49 ff 0e                      decq    (%r14)
// 27d: 75 0f                         jne     0x28e <_JIT_ENTRY+0x28e>
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_Dealloc
// 289: 4c 89 f7                      movq    %r14, %rdi
// 28c: ff d0                         callq   *%rax
// 28e: 48 29 dd                      subq    %rbx, %rbp
// 291: 48 83 c5 b8                   addq    $-0x48, %rbp
// 295: 48 c1 ed 03                   shrq    $0x3, %rbp
// 299: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 29c: 31 c0                         xorl    %eax, %eax
// 29e: 48 83 c4 18                   addq    $0x18, %rsp
// 2a2: 5b                            popq    %rbx
// 2a3: 41 5c                         popq    %r12
// 2a5: 41 5d                         popq    %r13
// 2a7: 41 5e                         popq    %r14
// 2a9: 41 5f                         popq    %r15
// 2ab: 5d                            popq    %rbp
// 2ac: c3                            retq
// 2ad: 
static const unsigned char _CHECK_EG_MATCHplus_PUSH_FRAME_code_body[686] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x76, 0xf8, 0x48, 0x8d, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3e, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x0c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x1c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x2b, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x48, 0x01, 0x00, 0x00, 0xe9, 0x63, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x84, 0x96, 0x00, 0x00, 0x00, 0x83, 0x7c, 0x24, 0x0c, 0x00, 0x0f, 0x88, 0x07, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xfa, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc4, 0xf8, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf8, 0x74, 0x13, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x45, 0x00, 0x49, 0x89, 0x3c, 0x24, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x48, 0x89, 0x5f, 0x08, 0x49, 0x89, 0x7f, 0x40, 0x41, 0xff, 0x4f, 0x24, 0x48, 0x63, 0x47, 0x40, 0x48, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x48, 0xc7, 0x47, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x83, 0x7c, 0x24, 0x0c, 0x00, 0x0f, 0x89, 0x5b, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xd5, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_PUSH_FRAME_code_holes[22] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_PUSH_FRAME_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_PUSH_FRAME_data_holes[1];

// _CHECK_EG_MATCHplus_PUSH_NULL
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_PUSH_NULL.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a2 00 00 00                jmp     0x175 <_JIT_ENTRY+0x175>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 ec 00 00 00             je      0x1fb <_JIT_ENTRY+0x1fb>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e fb 00 00 00             jle     0x216 <_JIT_ENTRY+0x216>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 18 01 00 00             jns     0x23b <_JIT_ENTRY+0x23b>
// 123: e9 33 01 00 00                jmp     0x25b <_JIT_ENTRY+0x25b>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 11                         js      0x175 <_JIT_ENTRY+0x175>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 74 71                         je      0x1e6 <_JIT_ENTRY+0x1e6>
// 175: 85 ed                         testl   %ebp, %ebp
// 177: 0f 88 de 00 00 00             js      0x25b <_JIT_ENTRY+0x25b>
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 85 ff                      testq   %rdi, %rdi
// 185: 0f 84 d0 00 00 00             je      0x25b <_JIT_ENTRY+0x25b>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NoneStruct
// 195: 48 39 c7                      cmpq    %rax, %rdi
// 198: 74 11                         je      0x1ab <_JIT_ENTRY+0x1ab>
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  PyErr_SetHandledException
// 1a4: ff d0                         callq   *%rax
// 1a6: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1ab: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b0: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b4: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1b8: 48 c7 03 00 00 00 00          movq    $0x0, (%rbx)
// 1bf: 48 83 c3 08                   addq    $0x8, %rbx
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _JIT_CONTINUE
// 1cd: 4c 89 f7                      movq    %r14, %rdi
// 1d0: 48 89 de                      movq    %rbx, %rsi
// 1d3: 4c 89 e2                      movq    %r12, %rdx
// 1d6: 48 83 c4 18                   addq    $0x18, %rsp
// 1da: 5b                            popq    %rbx
// 1db: 41 5c                         popq    %r12
// 1dd: 41 5d                         popq    %r13
// 1df: 41 5e                         popq    %r14
// 1e1: 41 5f                         popq    %r15
// 1e3: 5d                            popq    %rbp
// 1e4: ff e0                         jmpq    *%rax
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_Dealloc
// 1f0: 4c 89 ff                      movq    %r15, %rdi
// 1f3: ff d0                         callq   *%rax
// 1f5: 85 ed                         testl   %ebp, %ebp
// 1f7: 79 84                         jns     0x17d <_JIT_ENTRY+0x17d>
// 1f9: eb 60                         jmp     0x25b <_JIT_ENTRY+0x25b>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: 4c 89 ef                      movq    %r13, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 49 8b 07                      movq    (%r15), %rax
// 20d: 48 85 c0                      testq   %rax, %rax
// 210: 0f 8f 05 ff ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 216: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000218:  R_X86_64_64  .rodata.str1.1
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_NegativeRefcount
// 22a: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 22f: 4c 89 fa                      movq    %r15, %rdx
// 232: ff d0                         callq   *%rax
// 234: 49 8b 07                      movq    (%r15), %rax
// 237: 85 c0                         testl   %eax, %eax
// 239: 78 20                         js      0x25b <_JIT_ENTRY+0x25b>
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 245: ff d0                         callq   *%rax
// 247: 49 ff 0f                      decq    (%r15)
// 24a: 75 0f                         jne     0x25b <_JIT_ENTRY+0x25b>
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _Py_Dealloc
// 256: 4c 89 ff                      movq    %r15, %rdi
// 259: ff d0                         callq   *%rax
// 25b: 48 83 c3 f0                   addq    $-0x10, %rbx
// 25f: 4c 29 f3                      subq    %r14, %rbx
// 262: 48 83 c3 b8                   addq    $-0x48, %rbx
// 266: 48 c1 eb 03                   shrq    $0x3, %rbx
// 26a: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 26e: 31 c0                         xorl    %eax, %eax
// 270: 48 83 c4 18                   addq    $0x18, %rsp
// 274: 5b                            popq    %rbx
// 275: 41 5c                         popq    %r12
// 277: 41 5d                         popq    %r13
// 279: 41 5e                         popq    %r14
// 27b: 41 5f                         popq    %r15
// 27d: 5d                            popq    %rbp
// 27e: c3                            retq
// 27f: 
static const unsigned char _CHECK_EG_MATCHplus_PUSH_NULL_code_body[640] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xfb, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x18, 0x01, 0x00, 0x00, 0xe9, 0x33, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x71, 0x85, 0xed, 0x0f, 0x88, 0xde, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xd0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xc7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x79, 0x84, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x05, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_PUSH_NULL_code_holes[22] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_PUSH_NULL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_PUSH_NULL_data_holes[1];

// _CHECK_EG_MATCHplus_RESUME_CHECK
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_RESUME_CHECK.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a2 00 00 00                jmp     0x175 <_JIT_ENTRY+0x175>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 23 01 00 00             je      0x232 <_JIT_ENTRY+0x232>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 32 01 00 00             jle     0x24d <_JIT_ENTRY+0x24d>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 4f 01 00 00             jns     0x272 <_JIT_ENTRY+0x272>
// 123: e9 6a 01 00 00                jmp     0x292 <_JIT_ENTRY+0x292>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 11                         js      0x175 <_JIT_ENTRY+0x175>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 74 7a                         je      0x1ef <_JIT_ENTRY+0x1ef>
// 175: 85 ed                         testl   %ebp, %ebp
// 177: 0f 88 15 01 00 00             js      0x292 <_JIT_ENTRY+0x292>
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 85 ff                      testq   %rdi, %rdi
// 185: 0f 84 07 01 00 00             je      0x292 <_JIT_ENTRY+0x292>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NoneStruct
// 195: 48 39 c7                      cmpq    %rax, %rdi
// 198: 74 11                         je      0x1ab <_JIT_ENTRY+0x1ab>
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  PyErr_SetHandledException
// 1a4: ff d0                         callq   *%rax
// 1a6: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1ab: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b0: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b4: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1b8: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 1bd: 48 8b 08                      movq    (%rax), %rcx
// 1c0: 49 8b 06                      movq    (%r14), %rax
// 1c3: 48 3b 88 a8 00 00 00          cmpq    0xa8(%rax), %rcx
// 1ca: 75 3f                         jne     0x20b <_JIT_ENTRY+0x20b>
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _JIT_CONTINUE
// 1d6: 4c 89 f7                      movq    %r14, %rdi
// 1d9: 48 89 de                      movq    %rbx, %rsi
// 1dc: 4c 89 e2                      movq    %r12, %rdx
// 1df: 48 83 c4 18                   addq    $0x18, %rsp
// 1e3: 5b                            popq    %rbx
// 1e4: 41 5c                         popq    %r12
// 1e6: 41 5d                         popq    %r13
// 1e8: 41 5e                         popq    %r14
// 1ea: 41 5f                         popq    %r15
// 1ec: 5d                            popq    %rbp
// 1ed: ff e0                         jmpq    *%rax
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _Py_Dealloc
// 1f9: 4c 89 ff                      movq    %r15, %rdi
// 1fc: ff d0                         callq   *%rax
// 1fe: 85 ed                         testl   %ebp, %ebp
// 200: 0f 89 77 ff ff ff             jns     0x17d <_JIT_ENTRY+0x17d>
// 206: e9 87 00 00 00                jmp     0x292 <_JIT_ENTRY+0x292>
// 20b: 4c 29 f3                      subq    %r14, %rbx
// 20e: 48 83 c3 b8                   addq    $-0x48, %rbx
// 212: 48 c1 eb 03                   shrq    $0x3, %rbx
// 216: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 21a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021c:  R_X86_64_64  _JIT_TARGET
// 224: 89 c9                         movl    %ecx, %ecx
// 226: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 22a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 230: eb 75                         jmp     0x2a7 <_JIT_ENTRY+0x2a7>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_Dealloc
// 23c: 4c 89 ef                      movq    %r13, %rdi
// 23f: ff d0                         callq   *%rax
// 241: 49 8b 07                      movq    (%r15), %rax
// 244: 48 85 c0                      testq   %rax, %rax
// 247: 0f 8f ce fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 24d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024f:  R_X86_64_64  .rodata.str1.1
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_NegativeRefcount
// 261: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 266: 4c 89 fa                      movq    %r15, %rdx
// 269: ff d0                         callq   *%rax
// 26b: 49 8b 07                      movq    (%r15), %rax
// 26e: 85 c0                         testl   %eax, %eax
// 270: 78 20                         js      0x292 <_JIT_ENTRY+0x292>
// 272: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000274:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27c: ff d0                         callq   *%rax
// 27e: 49 ff 0f                      decq    (%r15)
// 281: 75 0f                         jne     0x292 <_JIT_ENTRY+0x292>
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _Py_Dealloc
// 28d: 4c 89 ff                      movq    %r15, %rdi
// 290: ff d0                         callq   *%rax
// 292: 48 83 c3 f0                   addq    $-0x10, %rbx
// 296: 4c 29 f3                      subq    %r14, %rbx
// 299: 48 83 c3 b8                   addq    $-0x48, %rbx
// 29d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2a1: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2a5: 31 c0                         xorl    %eax, %eax
// 2a7: 48 83 c4 18                   addq    $0x18, %rsp
// 2ab: 5b                            popq    %rbx
// 2ac: 41 5c                         popq    %r12
// 2ae: 41 5d                         popq    %r13
// 2b0: 41 5e                         popq    %r14
// 2b2: 41 5f                         popq    %r15
// 2b4: 5d                            popq    %rbp
// 2b5: c3                            retq
// 2b6: 
static const unsigned char _CHECK_EG_MATCHplus_RESUME_CHECK_code_body[695] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x23, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x32, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x4f, 0x01, 0x00, 0x00, 0xe9, 0x6a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x7a, 0x85, 0xed, 0x0f, 0x88, 0x15, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x07, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x08, 0x49, 0x8b, 0x06, 0x48, 0x3b, 0x88, 0xa8, 0x00, 0x00, 0x00, 0x75, 0x3f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x77, 0xff, 0xff, 0xff, 0xe9, 0x87, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x75, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xce, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_RESUME_CHECK_code_holes[23] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_RESUME_CHECK_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_RESUME_CHECK_data_holes[1];

// _CHECK_EG_MATCHplus_SAVE_RETURN_OFFSET
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_SAVE_RETURN_OFFSET.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a2 00 00 00                jmp     0x175 <_JIT_ENTRY+0x175>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 f0 00 00 00             je      0x1ff <_JIT_ENTRY+0x1ff>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e ff 00 00 00             jle     0x21a <_JIT_ENTRY+0x21a>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 1c 01 00 00             jns     0x23f <_JIT_ENTRY+0x23f>
// 123: e9 37 01 00 00                jmp     0x25f <_JIT_ENTRY+0x25f>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 11                         js      0x175 <_JIT_ENTRY+0x175>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 74 75                         je      0x1ea <_JIT_ENTRY+0x1ea>
// 175: 85 ed                         testl   %ebp, %ebp
// 177: 0f 88 e2 00 00 00             js      0x25f <_JIT_ENTRY+0x25f>
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 85 ff                      testq   %rdi, %rdi
// 185: 0f 84 d4 00 00 00             je      0x25f <_JIT_ENTRY+0x25f>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NoneStruct
// 195: 48 39 c7                      cmpq    %rax, %rdi
// 198: 74 11                         je      0x1ab <_JIT_ENTRY+0x1ab>
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  PyErr_SetHandledException
// 1a4: ff d0                         callq   *%rax
// 1a6: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1ab: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b0: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b4: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ba:  R_X86_64_64  _JIT_OPARG
// 1c2: 66 41 89 46 44                movw    %ax, 0x44(%r14)
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _JIT_CONTINUE
// 1d1: 4c 89 f7                      movq    %r14, %rdi
// 1d4: 48 89 de                      movq    %rbx, %rsi
// 1d7: 4c 89 e2                      movq    %r12, %rdx
// 1da: 48 83 c4 18                   addq    $0x18, %rsp
// 1de: 5b                            popq    %rbx
// 1df: 41 5c                         popq    %r12
// 1e1: 41 5d                         popq    %r13
// 1e3: 41 5e                         popq    %r14
// 1e5: 41 5f                         popq    %r15
// 1e7: 5d                            popq    %rbp
// 1e8: ff e0                         jmpq    *%rax
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  _Py_Dealloc
// 1f4: 4c 89 ff                      movq    %r15, %rdi
// 1f7: ff d0                         callq   *%rax
// 1f9: 85 ed                         testl   %ebp, %ebp
// 1fb: 79 80                         jns     0x17d <_JIT_ENTRY+0x17d>
// 1fd: eb 60                         jmp     0x25f <_JIT_ENTRY+0x25f>
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_Dealloc
// 209: 4c 89 ef                      movq    %r13, %rdi
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 07                      movq    (%r15), %rax
// 211: 48 85 c0                      testq   %rax, %rax
// 214: 0f 8f 01 ff ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 21a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021c:  R_X86_64_64  .rodata.str1.1
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _Py_NegativeRefcount
// 22e: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 233: 4c 89 fa                      movq    %r15, %rdx
// 236: ff d0                         callq   *%rax
// 238: 49 8b 07                      movq    (%r15), %rax
// 23b: 85 c0                         testl   %eax, %eax
// 23d: 78 20                         js      0x25f <_JIT_ENTRY+0x25f>
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 249: ff d0                         callq   *%rax
// 24b: 49 ff 0f                      decq    (%r15)
// 24e: 75 0f                         jne     0x25f <_JIT_ENTRY+0x25f>
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _Py_Dealloc
// 25a: 4c 89 ff                      movq    %r15, %rdi
// 25d: ff d0                         callq   *%rax
// 25f: 48 83 c3 f0                   addq    $-0x10, %rbx
// 263: 4c 29 f3                      subq    %r14, %rbx
// 266: 48 83 c3 b8                   addq    $-0x48, %rbx
// 26a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 26e: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 272: 31 c0                         xorl    %eax, %eax
// 274: 48 83 c4 18                   addq    $0x18, %rsp
// 278: 5b                            popq    %rbx
// 279: 41 5c                         popq    %r12
// 27b: 41 5d                         popq    %r13
// 27d: 41 5e                         popq    %r14
// 27f: 41 5f                         popq    %r15
// 281: 5d                            popq    %rbp
// 282: c3                            retq
// 283: 
static const unsigned char _CHECK_EG_MATCHplus_SAVE_RETURN_OFFSET_code_body[644] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xf0, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xff, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x1c, 0x01, 0x00, 0x00, 0xe9, 0x37, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x75, 0x85, 0xed, 0x0f, 0x88, 0xe2, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x41, 0x89, 0x46, 0x44, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x79, 0x80, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x01, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_SAVE_RETURN_OFFSET_code_holes[23] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_SAVE_RETURN_OFFSET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_SAVE_RETURN_OFFSET_data_holes[1];

// _CHECK_EG_MATCHplus_SETUP_ANNOTATIONS
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_SETUP_ANNOTATIONS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 3e: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 10                leaq    0x10(%rsp), %rdx
// 56: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 9c 01 00 00             je      0x2ac <_JIT_ENTRY+0x2ac>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e ab 01 00 00             jle     0x2c8 <_JIT_ENTRY+0x2c8>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 c9 01 00 00             jns     0x2ee <_JIT_ENTRY+0x2ee>
// 125: e9 e5 01 00 00                jmp     0x30f <_JIT_ENTRY+0x30f>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 e8 00 00 00             je      0x266 <_JIT_ENTRY+0x266>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 89 01 00 00             js      0x30f <_JIT_ENTRY+0x30f>
// 186: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 7b 01 00 00             je      0x30f <_JIT_ENTRY+0x30f>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 48 39 c7                      cmpq    %rax, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b4: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1b9: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1bd: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1c1: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// 1c5: 48 85 ff                      testq   %rdi, %rdi
// 1c8: 0f 84 b4 00 00 00             je      0x282 <_JIT_ENTRY+0x282>
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  PyMapping_GetOptionalItem
// 1d8: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001da:  R_X86_64_64  _PyRuntime
// 1e2: 49 81 c5 a8 a7 00 00          addq    $0xa7a8, %r13           # imm = 0xA7A8
// 1e9: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1ee: 4c 89 ee                      movq    %r13, %rsi
// 1f1: ff d0                         callq   *%rax
// 1f3: 85 c0                         testl   %eax, %eax
// 1f5: 0f 88 18 01 00 00             js      0x313 <_JIT_ENTRY+0x313>
// 1fb: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 200: 4d 85 e4                      testq   %r12, %r12
// 203: 0f 84 2a 01 00 00             je      0x333 <_JIT_ENTRY+0x333>
// 209: 49 8b 04 24                   movq    (%r12), %rax
// 20d: 48 85 c0                      testq   %rax, %rax
// 210: 7f 22                         jg      0x234 <_JIT_ENTRY+0x234>
// 212: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000214:  R_X86_64_64  .rodata.str1.1
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _Py_NegativeRefcount
// 226: be 96 05 00 00                movl    $0x596, %esi            # imm = 0x596
// 22b: 4c 89 e2                      movq    %r12, %rdx
// 22e: ff d0                         callq   *%rax
// 230: 49 8b 04 24                   movq    (%r12), %rax
// 234: 85 c0                         testl   %eax, %eax
// 236: 0f 88 82 01 00 00             js      0x3be <_JIT_ENTRY+0x3be>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 246: ff d0                         callq   *%rax
// 248: 49 ff 0c 24                   decq    (%r12)
// 24c: 0f 85 6c 01 00 00             jne     0x3be <_JIT_ENTRY+0x3be>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_Dealloc
// 25c: 4c 89 e7                      movq    %r12, %rdi
// 25f: ff d0                         callq   *%rax
// 261: e9 58 01 00 00                jmp     0x3be <_JIT_ENTRY+0x3be>
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _Py_Dealloc
// 270: 4c 89 e7                      movq    %r12, %rdi
// 273: ff d0                         callq   *%rax
// 275: 85 ed                         testl   %ebp, %ebp
// 277: 0f 89 09 ff ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 27d: e9 8d 00 00 00                jmp     0x30f <_JIT_ENTRY+0x30f>
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  PyExc_SystemError
// 28c: 48 8b 30                      movq    (%rax), %rsi
// 28f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000291:  R_X86_64_64  .rodata.str1.1+0x39
// 299: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000029b:  R_X86_64_64  _PyErr_Format
// 2a3: 4c 89 ff                      movq    %r15, %rdi
// 2a6: 31 c0                         xorl    %eax, %eax
// 2a8: ff d1                         callq   *%rcx
// 2aa: eb 67                         jmp     0x313 <_JIT_ENTRY+0x313>
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  _Py_Dealloc
// 2b6: 4c 89 ef                      movq    %r13, %rdi
// 2b9: ff d0                         callq   *%rax
// 2bb: 49 8b 04 24                   movq    (%r12), %rax
// 2bf: 48 85 c0                      testq   %rax, %rax
// 2c2: 0f 8f 55 fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 2c8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ca:  R_X86_64_64  .rodata.str1.1
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_NegativeRefcount
// 2dc: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2e1: 4c 89 e2                      movq    %r12, %rdx
// 2e4: ff d0                         callq   *%rax
// 2e6: 49 8b 04 24                   movq    (%r12), %rax
// 2ea: 85 c0                         testl   %eax, %eax
// 2ec: 78 21                         js      0x30f <_JIT_ENTRY+0x30f>
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f8: ff d0                         callq   *%rax
// 2fa: 49 ff 0c 24                   decq    (%r12)
// 2fe: 75 0f                         jne     0x30f <_JIT_ENTRY+0x30f>
// 300: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000302:  R_X86_64_64  _Py_Dealloc
// 30a: 4c 89 e7                      movq    %r12, %rdi
// 30d: ff d0                         callq   *%rax
// 30f: 48 83 c3 f0                   addq    $-0x10, %rbx
// 313: 4c 29 f3                      subq    %r14, %rbx
// 316: 48 83 c3 b8                   addq    $-0x48, %rbx
// 31a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 31e: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 322: 31 c0                         xorl    %eax, %eax
// 324: 48 83 c4 18                   addq    $0x18, %rsp
// 328: 5b                            popq    %rbx
// 329: 41 5c                         popq    %r12
// 32b: 41 5d                         popq    %r13
// 32d: 41 5e                         popq    %r14
// 32f: 41 5f                         popq    %r15
// 331: 5d                            popq    %rbp
// 332: c3                            retq
// 333: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000335:  R_X86_64_64  PyDict_New
// 33d: ff d0                         callq   *%rax
// 33f: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 344: 48 85 c0                      testq   %rax, %rax
// 347: 74 ca                         je      0x313 <_JIT_ENTRY+0x313>
// 349: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// 34d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000034f:  R_X86_64_64  PyObject_SetItem
// 357: 4c 89 ee                      movq    %r13, %rsi
// 35a: 48 89 c2                      movq    %rax, %rdx
// 35d: ff d1                         callq   *%rcx
// 35f: 89 c5                         movl    %eax, %ebp
// 361: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 366: 49 8b 04 24                   movq    (%r12), %rax
// 36a: 48 85 c0                      testq   %rax, %rax
// 36d: 7f 22                         jg      0x391 <_JIT_ENTRY+0x391>
// 36f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000371:  R_X86_64_64  .rodata.str1.1
// 379: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037b:  R_X86_64_64  _Py_NegativeRefcount
// 383: be 92 05 00 00                movl    $0x592, %esi            # imm = 0x592
// 388: 4c 89 e2                      movq    %r12, %rdx
// 38b: ff d0                         callq   *%rax
// 38d: 49 8b 04 24                   movq    (%r12), %rax
// 391: 85 c0                         testl   %eax, %eax
// 393: 78 21                         js      0x3b6 <_JIT_ENTRY+0x3b6>
// 395: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000397:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 39f: ff d0                         callq   *%rax
// 3a1: 49 ff 0c 24                   decq    (%r12)
// 3a5: 75 0f                         jne     0x3b6 <_JIT_ENTRY+0x3b6>
// 3a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a9:  R_X86_64_64  _Py_Dealloc
// 3b1: 4c 89 e7                      movq    %r12, %rdi
// 3b4: ff d0                         callq   *%rax
// 3b6: 85 ed                         testl   %ebp, %ebp
// 3b8: 0f 85 55 ff ff ff             jne     0x313 <_JIT_ENTRY+0x313>
// 3be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003c0:  R_X86_64_64  _JIT_CONTINUE
// 3c8: 4c 89 f7                      movq    %r14, %rdi
// 3cb: 48 89 de                      movq    %rbx, %rsi
// 3ce: 4c 89 fa                      movq    %r15, %rdx
// 3d1: 48 83 c4 18                   addq    $0x18, %rsp
// 3d5: 5b                            popq    %rbx
// 3d6: 41 5c                         popq    %r12
// 3d8: 41 5d                         popq    %r13
// 3da: 41 5e                         popq    %r14
// 3dc: 41 5f                         popq    %r15
// 3de: 5d                            popq    %rbp
// 3df: ff e0                         jmpq    *%rax
// 3e1: 
static const unsigned char _CHECK_EG_MATCHplus_SETUP_ANNOTATIONS_code_body[994] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x10, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x9c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xab, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xc9, 0x01, 0x00, 0x00, 0xe9, 0xe5, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xe8, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x89, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x7b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xb4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xa8, 0xa7, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x18, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x2a, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x82, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x6c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x58, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x09, 0xff, 0xff, 0xff, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0xff, 0xd1, 0xeb, 0x67, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x55, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0xca, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xc2, 0xff, 0xd1, 0x89, 0xc5, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x92, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x85, 0x55, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_SETUP_ANNOTATIONS_code_holes[37] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x291, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x335, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_New, 0x0},
    {0x34f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x371, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x37b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x397, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3c0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when setting up annotations\x00'
// 65: 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_SETUP_ANNOTATIONS_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_SETUP_ANNOTATIONS_data_holes[1];

// _CHECK_EG_MATCHplus_SET_ADD
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_SET_ADD.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8d 76 f8                   leaq    -0x8(%rsi), %r14
// 1b: 48 8b 6e f0                   movq    -0x10(%rsi), %rbp
// 1f: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 ee                      movq    %r13, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 42                         js      0x7b <_JIT_ENTRY+0x7b>
// 39: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 61: 48 89 ef                      movq    %rbp, %rdi
// 64: 4c 89 ee                      movq    %r13, %rsi
// 67: ff d0                         callq   *%rax
// 69: 41 89 c6                      movl    %eax, %r14d
// 6c: 48 8b 45 00                   movq    (%rbp), %rax
// 70: 48 85 c0                      testq   %rax, %rax
// 73: 7e 1c                         jle     0x91 <_JIT_ENTRY+0x91>
// 75: 85 c0                         testl   %eax, %eax
// 77: 79 3e                         jns     0xb7 <_JIT_ENTRY+0xb7>
// 79: eb 52                         jmp     0xcd <_JIT_ENTRY+0xcd>
// 7b: 48 8b 45 00                   movq    (%rbp), %rax
// 7f: 48 85 c0                      testq   %rax, %rax
// 82: 7e 63                         jle     0xe7 <_JIT_ENTRY+0xe7>
// 84: 85 c0                         testl   %eax, %eax
// 86: 0f 89 81 00 00 00             jns     0x10d <_JIT_ENTRY+0x10d>
// 8c: e9 9d 00 00 00                jmp     0x12e <_JIT_ENTRY+0x12e>
// 91: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000093:  R_X86_64_64  .rodata.str1.1
// 9b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009d:  R_X86_64_64  _Py_NegativeRefcount
// a5: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// aa: 48 89 ea                      movq    %rbp, %rdx
// ad: ff d0                         callq   *%rax
// af: 48 8b 45 00                   movq    (%rbp), %rax
// b3: 85 c0                         testl   %eax, %eax
// b5: 78 16                         js      0xcd <_JIT_ENTRY+0xcd>
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c1: ff d0                         callq   *%rax
// c3: 48 ff 4d 00                   decq    (%rbp)
// c7: 0f 84 c7 00 00 00             je      0x194 <_JIT_ENTRY+0x194>
// cd: 49 8b 45 00                   movq    (%r13), %rax
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 0f 8e d6 00 00 00             jle     0x1b0 <_JIT_ENTRY+0x1b0>
// da: 85 c0                         testl   %eax, %eax
// dc: 0f 89 f4 00 00 00             jns     0x1d6 <_JIT_ENTRY+0x1d6>
// e2: e9 05 01 00 00                jmp     0x1ec <_JIT_ENTRY+0x1ec>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 49 8b 45 00                   movq    (%r13), %rax
// 132: 48 85 c0                      testq   %rax, %rax
// 135: 7e 09                         jle     0x140 <_JIT_ENTRY+0x140>
// 137: 85 c0                         testl   %eax, %eax
// 139: 79 2f                         jns     0x16a <_JIT_ENTRY+0x16a>
// 13b: e9 9f 01 00 00                jmp     0x2df <_JIT_ENTRY+0x2df>
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 159: 4c 89 ea                      movq    %r13, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 0f 88 75 01 00 00             js      0x2df <_JIT_ENTRY+0x2df>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 4d 00                   decq    (%r13)
// 17a: 0f 85 5f 01 00 00             jne     0x2df <_JIT_ENTRY+0x2df>
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: 4c 89 ef                      movq    %r13, %rdi
// 18d: ff d0                         callq   *%rax
// 18f: e9 4b 01 00 00                jmp     0x2df <_JIT_ENTRY+0x2df>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_Dealloc
// 19e: 48 89 ef                      movq    %rbp, %rdi
// 1a1: ff d0                         callq   *%rax
// 1a3: 49 8b 45 00                   movq    (%r13), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 0f 8f 2a ff ff ff             jg      0xda <_JIT_ENTRY+0xda>
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_NegativeRefcount
// 1c4: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c9: 4c 89 ea                      movq    %r13, %rdx
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8b 45 00                   movq    (%r13), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 16                         js      0x1ec <_JIT_ENTRY+0x1ec>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 ff 4d 00                   decq    (%r13)
// 1e6: 0f 84 d6 00 00 00             je      0x2c2 <_JIT_ENTRY+0x2c2>
// 1ec: 45 85 f6                      testl   %r14d, %r14d
// 1ef: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1f4: 0f 88 e5 00 00 00             js      0x2df <_JIT_ENTRY+0x2df>
// 1fa: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1fe: 48 85 ff                      testq   %rdi, %rdi
// 201: 0f 84 d8 00 00 00             je      0x2df <_JIT_ENTRY+0x2df>
// 207: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000209:  R_X86_64_64  _Py_NoneStruct
// 211: 4c 39 f7                      cmpq    %r14, %rdi
// 214: 74 10                         je      0x226 <_JIT_ENTRY+0x226>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  PyErr_SetHandledException
// 220: ff d0                         callq   *%rax
// 222: 4c 8b 34 24                   movq    (%rsp), %r14
// 226: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 22b: 49 89 47 f0                   movq    %rax, -0x10(%r15)
// 22f: 4d 89 77 f8                   movq    %r14, -0x8(%r15)
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _JIT_OPARG
// 23d: f7 d0                         notl    %eax
// 23f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 244: 48 98                         cltq
// 246: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  PySet_Add
// 254: 4c 89 f6                      movq    %r14, %rsi
// 257: ff d0                         callq   *%rax
// 259: 89 c5                         movl    %eax, %ebp
// 25b: 49 8b 06                      movq    (%r14), %rax
// 25e: 48 85 c0                      testq   %rax, %rax
// 261: 7f 21                         jg      0x284 <_JIT_ENTRY+0x284>
// 263: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000265:  R_X86_64_64  .rodata.str1.1
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_NegativeRefcount
// 277: be 29 02 00 00                movl    $0x229, %esi            # imm = 0x229
// 27c: 4c 89 f2                      movq    %r14, %rdx
// 27f: ff d0                         callq   *%rax
// 281: 49 8b 06                      movq    (%r14), %rax
// 284: 85 c0                         testl   %eax, %eax
// 286: 78 11                         js      0x299 <_JIT_ENTRY+0x299>
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 292: ff d0                         callq   *%rax
// 294: 49 ff 0e                      decq    (%r14)
// 297: 74 69                         je      0x302 <_JIT_ENTRY+0x302>
// 299: 85 ed                         testl   %ebp, %ebp
// 29b: 75 45                         jne     0x2e2 <_JIT_ENTRY+0x2e2>
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _JIT_CONTINUE
// 2a7: 48 89 df                      movq    %rbx, %rdi
// 2aa: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 2af: 4c 89 e2                      movq    %r12, %rdx
// 2b2: 48 83 c4 18                   addq    $0x18, %rsp
// 2b6: 5b                            popq    %rbx
// 2b7: 41 5c                         popq    %r12
// 2b9: 41 5d                         popq    %r13
// 2bb: 41 5e                         popq    %r14
// 2bd: 41 5f                         popq    %r15
// 2bf: 5d                            popq    %rbp
// 2c0: ff e0                         jmpq    *%rax
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_Dealloc
// 2cc: 4c 89 ef                      movq    %r13, %rdi
// 2cf: ff d0                         callq   *%rax
// 2d1: 45 85 f6                      testl   %r14d, %r14d
// 2d4: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 2d9: 0f 89 1b ff ff ff             jns     0x1fa <_JIT_ENTRY+0x1fa>
// 2df: 4d 89 f7                      movq    %r14, %r15
// 2e2: 49 29 df                      subq    %rbx, %r15
// 2e5: 49 83 c7 b0                   addq    $-0x50, %r15
// 2e9: 49 c1 ef 03                   shrq    $0x3, %r15
// 2ed: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2f1: 31 c0                         xorl    %eax, %eax
// 2f3: 48 83 c4 18                   addq    $0x18, %rsp
// 2f7: 5b                            popq    %rbx
// 2f8: 41 5c                         popq    %r12
// 2fa: 41 5d                         popq    %r13
// 2fc: 41 5e                         popq    %r14
// 2fe: 41 5f                         popq    %r15
// 300: 5d                            popq    %rbp
// 301: c3                            retq
// 302: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000304:  R_X86_64_64  _Py_Dealloc
// 30c: 4c 89 f7                      movq    %r14, %rdi
// 30f: ff d0                         callq   *%rax
// 311: 85 ed                         testl   %ebp, %ebp
// 313: 75 cd                         jne     0x2e2 <_JIT_ENTRY+0x2e2>
// 315: eb 86                         jmp     0x29d <_JIT_ENTRY+0x29d>
// 317: 
static const unsigned char _CHECK_EG_MATCHplus_SET_ADD_code_body[792] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8d, 0x76, 0xf8, 0x48, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x42, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0x9f, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x75, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x5f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0x4b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xd6, 0x00, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x0f, 0x88, 0xe5, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xd8, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xf7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x34, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x89, 0x47, 0xf0, 0x4d, 0x89, 0x77, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x29, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x69, 0x85, 0xed, 0x75, 0x45, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x45, 0x85, 0xf6, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x0f, 0x89, 0x1b, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb0, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xed, 0x75, 0xcd, 0xeb, 0x86};
static const Hole _CHECK_EG_MATCHplus_SET_ADD_code_holes[28] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_SET_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_SET_ADD_data_holes[1];

// _CHECK_EG_MATCHplus_SET_FUNCTION_ATTRIBUTE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_SET_FUNCTION_ATTRIBUTE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 8d 5e f0                   leaq    -0x10(%rsi), %rbx
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 e6                      movq    %r12, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 57                         jle     0xda <_JIT_ENTRY+0xda>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 79                         jns     0x100 <_JIT_ENTRY+0x100>
// 87: e9 8a 00 00 00                jmp     0x116 <_JIT_ENTRY+0x116>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 4c 89 ea                      movq    %r13, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 45 00                   movq    (%r13), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 4d 00                   decq    (%r13)
// c2: 74 6c                         je      0x130 <_JIT_ENTRY+0x130>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7e 7b                         jle     0x148 <_JIT_ENTRY+0x148>
// cd: 85 c0                         testl   %eax, %eax
// cf: 0f 89 99 00 00 00             jns     0x16e <_JIT_ENTRY+0x16e>
// d5: e9 aa 00 00 00                jmp     0x184 <_JIT_ENTRY+0x184>
// da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000dc:  R_X86_64_64  .rodata.str1.1
// e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e6:  R_X86_64_64  _Py_NegativeRefcount
// ee: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f3: 4c 89 ea                      movq    %r13, %rdx
// f6: ff d0                         callq   *%rax
// f8: 49 8b 45 00                   movq    (%r13), %rax
// fc: 85 c0                         testl   %eax, %eax
// fe: 78 16                         js      0x116 <_JIT_ENTRY+0x116>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10a: ff d0                         callq   *%rax
// 10c: 49 ff 4d 00                   decq    (%r13)
// 110: 0f 84 1c 01 00 00             je      0x232 <_JIT_ENTRY+0x232>
// 116: 49 8b 04 24                   movq    (%r12), %rax
// 11a: 48 85 c0                      testq   %rax, %rax
// 11d: 0f 8e 2b 01 00 00             jle     0x24e <_JIT_ENTRY+0x24e>
// 123: 85 c0                         testl   %eax, %eax
// 125: 0f 89 49 01 00 00             jns     0x274 <_JIT_ENTRY+0x274>
// 12b: e9 65 01 00 00                jmp     0x295 <_JIT_ENTRY+0x295>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_Dealloc
// 13a: 4c 89 ef                      movq    %r13, %rdi
// 13d: ff d0                         callq   *%rax
// 13f: 49 8b 04 24                   movq    (%r12), %rax
// 143: 48 85 c0                      testq   %rax, %rax
// 146: 7f 85                         jg      0xcd <_JIT_ENTRY+0xcd>
// 148: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014a:  R_X86_64_64  .rodata.str1.1
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 161: 4c 89 e2                      movq    %r12, %rdx
// 164: ff d0                         callq   *%rax
// 166: 49 8b 04 24                   movq    (%r12), %rax
// 16a: 85 c0                         testl   %eax, %eax
// 16c: 78 16                         js      0x184 <_JIT_ENTRY+0x184>
// 16e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000170:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 178: ff d0                         callq   *%rax
// 17a: 49 ff 0c 24                   decq    (%r12)
// 17e: 0f 84 90 00 00 00             je      0x214 <_JIT_ENTRY+0x214>
// 184: 85 ed                         testl   %ebp, %ebp
// 186: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 18b: 0f 88 04 01 00 00             js      0x295 <_JIT_ENTRY+0x295>
// 191: 48 8b 3c 24                   movq    (%rsp), %rdi
// 195: 48 85 ff                      testq   %rdi, %rdi
// 198: 0f 84 f7 00 00 00             je      0x295 <_JIT_ENTRY+0x295>
// 19e: 49 83 c7 f8                   addq    $-0x8, %r15
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _Py_NoneStruct
// 1ac: 48 39 c7                      cmpq    %rax, %rdi
// 1af: 74 10                         je      0x1c1 <_JIT_ENTRY+0x1c1>
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  PyErr_SetHandledException
// 1bb: ff d0                         callq   *%rax
// 1bd: 48 8b 04 24                   movq    (%rsp), %rax
// 1c1: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1c6: 48 89 0b                      movq    %rcx, (%rbx)
// 1c9: 49 89 07                      movq    %rax, (%r15)
// 1cc: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001ce:  R_X86_64_64  _JIT_OPARG
// 1d6: 0f b7 d2                      movzwl  %dx, %edx
// 1d9: 83 fa 03                      cmpl    $0x3, %edx
// 1dc: 7f 1b                         jg      0x1f9 <_JIT_ENTRY+0x1f9>
// 1de: 83 fa 01                      cmpl    $0x1, %edx
// 1e1: 0f 84 cd 00 00 00             je      0x2b4 <_JIT_ENTRY+0x2b4>
// 1e7: 83 fa 02                      cmpl    $0x2, %edx
// 1ea: 0f 85 f7 00 00 00             jne     0x2e7 <_JIT_ENTRY+0x2e7>
// 1f0: 48 8d 50 40                   leaq    0x40(%rax), %rdx
// 1f4: e9 c5 00 00 00                jmp     0x2be <_JIT_ENTRY+0x2be>
// 1f9: 83 fa 04                      cmpl    $0x4, %edx
// 1fc: 0f 84 b8 00 00 00             je      0x2ba <_JIT_ENTRY+0x2ba>
// 202: 83 fa 08                      cmpl    $0x8, %edx
// 205: 0f 85 dc 00 00 00             jne     0x2e7 <_JIT_ENTRY+0x2e7>
// 20b: 48 8d 50 48                   leaq    0x48(%rax), %rdx
// 20f: e9 aa 00 00 00                jmp     0x2be <_JIT_ENTRY+0x2be>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_Dealloc
// 21e: 4c 89 e7                      movq    %r12, %rdi
// 221: ff d0                         callq   *%rax
// 223: 85 ed                         testl   %ebp, %ebp
// 225: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 22a: 0f 89 61 ff ff ff             jns     0x191 <_JIT_ENTRY+0x191>
// 230: eb 63                         jmp     0x295 <_JIT_ENTRY+0x295>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_Dealloc
// 23c: 4c 89 ef                      movq    %r13, %rdi
// 23f: ff d0                         callq   *%rax
// 241: 49 8b 04 24                   movq    (%r12), %rax
// 245: 48 85 c0                      testq   %rax, %rax
// 248: 0f 8f d5 fe ff ff             jg      0x123 <_JIT_ENTRY+0x123>
// 24e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000250:  R_X86_64_64  .rodata.str1.1
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _Py_NegativeRefcount
// 262: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 267: 4c 89 e2                      movq    %r12, %rdx
// 26a: ff d0                         callq   *%rax
// 26c: 49 8b 04 24                   movq    (%r12), %rax
// 270: 85 c0                         testl   %eax, %eax
// 272: 78 21                         js      0x295 <_JIT_ENTRY+0x295>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27e: ff d0                         callq   *%rax
// 280: 49 ff 0c 24                   decq    (%r12)
// 284: 75 0f                         jne     0x295 <_JIT_ENTRY+0x295>
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _Py_Dealloc
// 290: 4c 89 e7                      movq    %r12, %rdi
// 293: ff d0                         callq   *%rax
// 295: 48 29 eb                      subq    %rbp, %rbx
// 298: 48 83 c3 b8                   addq    $-0x48, %rbx
// 29c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2a0: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 2a3: 31 c0                         xorl    %eax, %eax
// 2a5: 48 83 c4 18                   addq    $0x18, %rsp
// 2a9: 5b                            popq    %rbx
// 2aa: 41 5c                         popq    %r12
// 2ac: 41 5d                         popq    %r13
// 2ae: 41 5e                         popq    %r14
// 2b0: 41 5f                         popq    %r15
// 2b2: 5d                            popq    %rbp
// 2b3: c3                            retq
// 2b4: 48 8d 50 38                   leaq    0x38(%rax), %rdx
// 2b8: eb 04                         jmp     0x2be <_JIT_ENTRY+0x2be>
// 2ba: 48 8d 50 70                   leaq    0x70(%rax), %rdx
// 2be: 48 89 0a                      movq    %rcx, (%rdx)
// 2c1: 48 89 03                      movq    %rax, (%rbx)
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  _JIT_CONTINUE
// 2ce: 48 89 ef                      movq    %rbp, %rdi
// 2d1: 4c 89 fe                      movq    %r15, %rsi
// 2d4: 4c 89 f2                      movq    %r14, %rdx
// 2d7: 48 83 c4 18                   addq    $0x18, %rsp
// 2db: 5b                            popq    %rbx
// 2dc: 41 5c                         popq    %r12
// 2de: 41 5d                         popq    %r13
// 2e0: 41 5e                         popq    %r14
// 2e2: 41 5f                         popq    %r15
// 2e4: 5d                            popq    %rbp
// 2e5: ff e0                         jmpq    *%rax
// 2e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e9:  R_X86_64_64  .rodata.str1.1+0x39
// 2f1: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002f3:  R_X86_64_64  .rodata.str1.1+0x44
// 2fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fd:  R_X86_64_64  _Py_FatalErrorFunc
// 305: ff d0                         callq   *%rax
// 307: 
static const unsigned char _CHECK_EG_MATCHplus_SET_FUNCTION_ATTRIBUTE_code_body[776] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0x8d, 0x5e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x1c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x2b, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x49, 0x01, 0x00, 0x00, 0xe9, 0x65, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x88, 0x04, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xf7, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x0b, 0x49, 0x89, 0x07, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x83, 0xfa, 0x03, 0x7f, 0x1b, 0x83, 0xfa, 0x01, 0x0f, 0x84, 0xcd, 0x00, 0x00, 0x00, 0x83, 0xfa, 0x02, 0x0f, 0x85, 0xf7, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x50, 0x40, 0xe9, 0xc5, 0x00, 0x00, 0x00, 0x83, 0xfa, 0x04, 0x0f, 0x84, 0xb8, 0x00, 0x00, 0x00, 0x83, 0xfa, 0x08, 0x0f, 0x85, 0xdc, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x50, 0x48, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x89, 0x61, 0xff, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xd5, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x8d, 0x50, 0x38, 0xeb, 0x04, 0x48, 0x8d, 0x50, 0x70, 0x48, 0x89, 0x0a, 0x48, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _CHECK_EG_MATCHplus_SET_FUNCTION_ATTRIBUTE_code_holes[26] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2f3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x44},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalErrorFunc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_JIT_ENTRY\x00We've reached an unreachable state. Anything is possible.\nThe limits were in our heads all along. Follow your dreams.\nhttps://xkcd.com/2200\x00"
// d0: 
static const unsigned char _CHECK_EG_MATCHplus_SET_FUNCTION_ATTRIBUTE_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x00, 0x57, 0x65, 0x27, 0x76, 0x65, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x41, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x2e, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x75, 0x72, 0x20, 0x68, 0x65, 0x61, 0x64, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x20, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x78, 0x6b, 0x63, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x32, 0x32, 0x30, 0x30, 0x00};
static const Hole _CHECK_EG_MATCHplus_SET_FUNCTION_ATTRIBUTE_data_holes[1];

// _CHECK_EG_MATCHplus_SET_IP
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_SET_IP.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 05 01 00 00             je      0x214 <_JIT_ENTRY+0x214>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 14 01 00 00             jle     0x22f <_JIT_ENTRY+0x22f>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 31 01 00 00             jns     0x254 <_JIT_ENTRY+0x254>
// 123: e9 4c 01 00 00                jmp     0x274 <_JIT_ENTRY+0x274>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 82 00 00 00             je      0x1fb <_JIT_ENTRY+0x1fb>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 f3 00 00 00             js      0x274 <_JIT_ENTRY+0x274>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 e5 00 00 00             je      0x274 <_JIT_ENTRY+0x274>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 49 8b 06                      movq    (%r14), %rax
// 1bf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c1:  R_X86_64_64  _JIT_OPARG
// 1c9: 0f b7 c9                      movzwl  %cx, %ecx
// 1cc: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// 1d4: 49 89 46 38                   movq    %rax, 0x38(%r14)
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  _JIT_CONTINUE
// 1e2: 4c 89 f7                      movq    %r14, %rdi
// 1e5: 48 89 de                      movq    %rbx, %rsi
// 1e8: 4c 89 e2                      movq    %r12, %rdx
// 1eb: 48 83 c4 18                   addq    $0x18, %rsp
// 1ef: 5b                            popq    %rbx
// 1f0: 41 5c                         popq    %r12
// 1f2: 41 5d                         popq    %r13
// 1f4: 41 5e                         popq    %r14
// 1f6: 41 5f                         popq    %r15
// 1f8: 5d                            popq    %rbp
// 1f9: ff e0                         jmpq    *%rax
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: 4c 89 ff                      movq    %r15, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 85 ed                         testl   %ebp, %ebp
// 20c: 0f 89 6f ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 212: eb 60                         jmp     0x274 <_JIT_ENTRY+0x274>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_Dealloc
// 21e: 4c 89 ef                      movq    %r13, %rdi
// 221: ff d0                         callq   *%rax
// 223: 49 8b 07                      movq    (%r15), %rax
// 226: 48 85 c0                      testq   %rax, %rax
// 229: 0f 8f ec fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 22f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000231:  R_X86_64_64  .rodata.str1.1
// 239: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023b:  R_X86_64_64  _Py_NegativeRefcount
// 243: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 248: 4c 89 fa                      movq    %r15, %rdx
// 24b: ff d0                         callq   *%rax
// 24d: 49 8b 07                      movq    (%r15), %rax
// 250: 85 c0                         testl   %eax, %eax
// 252: 78 20                         js      0x274 <_JIT_ENTRY+0x274>
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25e: ff d0                         callq   *%rax
// 260: 49 ff 0f                      decq    (%r15)
// 263: 75 0f                         jne     0x274 <_JIT_ENTRY+0x274>
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_Dealloc
// 26f: 4c 89 ff                      movq    %r15, %rdi
// 272: ff d0                         callq   *%rax
// 274: 48 83 c3 f0                   addq    $-0x10, %rbx
// 278: 4c 29 f3                      subq    %r14, %rbx
// 27b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 27f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 283: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 287: 31 c0                         xorl    %eax, %eax
// 289: 48 83 c4 18                   addq    $0x18, %rsp
// 28d: 5b                            popq    %rbx
// 28e: 41 5c                         popq    %r12
// 290: 41 5d                         popq    %r13
// 292: 41 5e                         popq    %r14
// 294: 41 5f                         popq    %r15
// 296: 5d                            popq    %rbp
// 297: c3                            retq
// 298: 
static const unsigned char _CHECK_EG_MATCHplus_SET_IP_code_body[665] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x05, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x14, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x31, 0x01, 0x00, 0x00, 0xe9, 0x4c, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xf3, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xe5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x46, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x6f, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xec, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_SET_IP_code_holes[23] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_SET_IP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_SET_IP_data_holes[1];

// _CHECK_EG_MATCHplus_SET_UPDATE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_SET_UPDATE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8d 76 f8                   leaq    -0x8(%rsi), %r14
// 1b: 48 8b 6e f0                   movq    -0x10(%rsi), %rbp
// 1f: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 ee                      movq    %r13, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 42                         js      0x7b <_JIT_ENTRY+0x7b>
// 39: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 61: 48 89 ef                      movq    %rbp, %rdi
// 64: 4c 89 ee                      movq    %r13, %rsi
// 67: ff d0                         callq   *%rax
// 69: 41 89 c6                      movl    %eax, %r14d
// 6c: 48 8b 45 00                   movq    (%rbp), %rax
// 70: 48 85 c0                      testq   %rax, %rax
// 73: 7e 1c                         jle     0x91 <_JIT_ENTRY+0x91>
// 75: 85 c0                         testl   %eax, %eax
// 77: 79 3e                         jns     0xb7 <_JIT_ENTRY+0xb7>
// 79: eb 52                         jmp     0xcd <_JIT_ENTRY+0xcd>
// 7b: 48 8b 45 00                   movq    (%rbp), %rax
// 7f: 48 85 c0                      testq   %rax, %rax
// 82: 7e 63                         jle     0xe7 <_JIT_ENTRY+0xe7>
// 84: 85 c0                         testl   %eax, %eax
// 86: 0f 89 81 00 00 00             jns     0x10d <_JIT_ENTRY+0x10d>
// 8c: e9 9d 00 00 00                jmp     0x12e <_JIT_ENTRY+0x12e>
// 91: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000093:  R_X86_64_64  .rodata.str1.1
// 9b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009d:  R_X86_64_64  _Py_NegativeRefcount
// a5: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// aa: 48 89 ea                      movq    %rbp, %rdx
// ad: ff d0                         callq   *%rax
// af: 48 8b 45 00                   movq    (%rbp), %rax
// b3: 85 c0                         testl   %eax, %eax
// b5: 78 16                         js      0xcd <_JIT_ENTRY+0xcd>
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c1: ff d0                         callq   *%rax
// c3: 48 ff 4d 00                   decq    (%rbp)
// c7: 0f 84 c7 00 00 00             je      0x194 <_JIT_ENTRY+0x194>
// cd: 49 8b 45 00                   movq    (%r13), %rax
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 0f 8e d6 00 00 00             jle     0x1b0 <_JIT_ENTRY+0x1b0>
// da: 85 c0                         testl   %eax, %eax
// dc: 0f 89 f4 00 00 00             jns     0x1d6 <_JIT_ENTRY+0x1d6>
// e2: e9 05 01 00 00                jmp     0x1ec <_JIT_ENTRY+0x1ec>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 49 8b 45 00                   movq    (%r13), %rax
// 132: 48 85 c0                      testq   %rax, %rax
// 135: 7e 09                         jle     0x140 <_JIT_ENTRY+0x140>
// 137: 85 c0                         testl   %eax, %eax
// 139: 79 2f                         jns     0x16a <_JIT_ENTRY+0x16a>
// 13b: e9 9f 01 00 00                jmp     0x2df <_JIT_ENTRY+0x2df>
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 159: 4c 89 ea                      movq    %r13, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 0f 88 75 01 00 00             js      0x2df <_JIT_ENTRY+0x2df>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 4d 00                   decq    (%r13)
// 17a: 0f 85 5f 01 00 00             jne     0x2df <_JIT_ENTRY+0x2df>
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: 4c 89 ef                      movq    %r13, %rdi
// 18d: ff d0                         callq   *%rax
// 18f: e9 4b 01 00 00                jmp     0x2df <_JIT_ENTRY+0x2df>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_Dealloc
// 19e: 48 89 ef                      movq    %rbp, %rdi
// 1a1: ff d0                         callq   *%rax
// 1a3: 49 8b 45 00                   movq    (%r13), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 0f 8f 2a ff ff ff             jg      0xda <_JIT_ENTRY+0xda>
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_NegativeRefcount
// 1c4: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c9: 4c 89 ea                      movq    %r13, %rdx
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8b 45 00                   movq    (%r13), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 16                         js      0x1ec <_JIT_ENTRY+0x1ec>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 ff 4d 00                   decq    (%r13)
// 1e6: 0f 84 d6 00 00 00             je      0x2c2 <_JIT_ENTRY+0x2c2>
// 1ec: 45 85 f6                      testl   %r14d, %r14d
// 1ef: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1f4: 0f 88 e5 00 00 00             js      0x2df <_JIT_ENTRY+0x2df>
// 1fa: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1fe: 48 85 ff                      testq   %rdi, %rdi
// 201: 0f 84 d8 00 00 00             je      0x2df <_JIT_ENTRY+0x2df>
// 207: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000209:  R_X86_64_64  _Py_NoneStruct
// 211: 4c 39 f7                      cmpq    %r14, %rdi
// 214: 74 10                         je      0x226 <_JIT_ENTRY+0x226>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  PyErr_SetHandledException
// 220: ff d0                         callq   *%rax
// 222: 4c 8b 34 24                   movq    (%rsp), %r14
// 226: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 22b: 49 89 47 f0                   movq    %rax, -0x10(%r15)
// 22f: 4d 89 77 f8                   movq    %r14, -0x8(%r15)
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _JIT_OPARG
// 23d: f7 d0                         notl    %eax
// 23f: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 244: 48 98                         cltq
// 246: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _PySet_Update
// 254: 4c 89 f6                      movq    %r14, %rsi
// 257: ff d0                         callq   *%rax
// 259: 89 c5                         movl    %eax, %ebp
// 25b: 49 8b 06                      movq    (%r14), %rax
// 25e: 48 85 c0                      testq   %rax, %rax
// 261: 7f 21                         jg      0x284 <_JIT_ENTRY+0x284>
// 263: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000265:  R_X86_64_64  .rodata.str1.1
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_NegativeRefcount
// 277: be 53 05 00 00                movl    $0x553, %esi            # imm = 0x553
// 27c: 4c 89 f2                      movq    %r14, %rdx
// 27f: ff d0                         callq   *%rax
// 281: 49 8b 06                      movq    (%r14), %rax
// 284: 85 c0                         testl   %eax, %eax
// 286: 78 11                         js      0x299 <_JIT_ENTRY+0x299>
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 292: ff d0                         callq   *%rax
// 294: 49 ff 0e                      decq    (%r14)
// 297: 74 69                         je      0x302 <_JIT_ENTRY+0x302>
// 299: 85 ed                         testl   %ebp, %ebp
// 29b: 78 45                         js      0x2e2 <_JIT_ENTRY+0x2e2>
// 29d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029f:  R_X86_64_64  _JIT_CONTINUE
// 2a7: 48 89 df                      movq    %rbx, %rdi
// 2aa: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 2af: 4c 89 e2                      movq    %r12, %rdx
// 2b2: 48 83 c4 18                   addq    $0x18, %rsp
// 2b6: 5b                            popq    %rbx
// 2b7: 41 5c                         popq    %r12
// 2b9: 41 5d                         popq    %r13
// 2bb: 41 5e                         popq    %r14
// 2bd: 41 5f                         popq    %r15
// 2bf: 5d                            popq    %rbp
// 2c0: ff e0                         jmpq    *%rax
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_Dealloc
// 2cc: 4c 89 ef                      movq    %r13, %rdi
// 2cf: ff d0                         callq   *%rax
// 2d1: 45 85 f6                      testl   %r14d, %r14d
// 2d4: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 2d9: 0f 89 1b ff ff ff             jns     0x1fa <_JIT_ENTRY+0x1fa>
// 2df: 4d 89 f7                      movq    %r14, %r15
// 2e2: 49 29 df                      subq    %rbx, %r15
// 2e5: 49 83 c7 b0                   addq    $-0x50, %r15
// 2e9: 49 c1 ef 03                   shrq    $0x3, %r15
// 2ed: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2f1: 31 c0                         xorl    %eax, %eax
// 2f3: 48 83 c4 18                   addq    $0x18, %rsp
// 2f7: 5b                            popq    %rbx
// 2f8: 41 5c                         popq    %r12
// 2fa: 41 5d                         popq    %r13
// 2fc: 41 5e                         popq    %r14
// 2fe: 41 5f                         popq    %r15
// 300: 5d                            popq    %rbp
// 301: c3                            retq
// 302: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000304:  R_X86_64_64  _Py_Dealloc
// 30c: 4c 89 f7                      movq    %r14, %rdi
// 30f: ff d0                         callq   *%rax
// 311: 85 ed                         testl   %ebp, %ebp
// 313: 79 88                         jns     0x29d <_JIT_ENTRY+0x29d>
// 315: eb cb                         jmp     0x2e2 <_JIT_ENTRY+0x2e2>
// 317: 
static const unsigned char _CHECK_EG_MATCHplus_SET_UPDATE_code_body[792] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8d, 0x76, 0xf8, 0x48, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x42, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0x9f, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x75, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x5f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0x4b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xd6, 0x00, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x0f, 0x88, 0xe5, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xd8, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xf7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x34, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x89, 0x47, 0xf0, 0x4d, 0x89, 0x77, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x53, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x69, 0x85, 0xed, 0x78, 0x45, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x45, 0x85, 0xf6, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x0f, 0x89, 0x1b, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb0, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xed, 0x79, 0x88, 0xeb, 0xcb};
static const Hole _CHECK_EG_MATCHplus_SET_UPDATE_code_holes[28] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySet_Update, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_SET_UPDATE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_SET_UPDATE_data_holes[1];

// _CHECK_EG_MATCHplus_STORE_ATTR
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_STORE_ATTR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 8b 6e f0                   movq    -0x10(%rsi), %rbp
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 4c 8d 76 f0                   leaq    -0x10(%rsi), %r14
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 42                         js      0x7b <_JIT_ENTRY+0x7b>
// 39: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 48 89 ef                      movq    %rbp, %rdi
// 64: 4c 89 e6                      movq    %r12, %rsi
// 67: ff d0                         callq   *%rax
// 69: 41 89 c7                      movl    %eax, %r15d
// 6c: 48 8b 45 00                   movq    (%rbp), %rax
// 70: 48 85 c0                      testq   %rax, %rax
// 73: 7e 1c                         jle     0x91 <_JIT_ENTRY+0x91>
// 75: 85 c0                         testl   %eax, %eax
// 77: 79 3e                         jns     0xb7 <_JIT_ENTRY+0xb7>
// 79: eb 52                         jmp     0xcd <_JIT_ENTRY+0xcd>
// 7b: 48 8b 45 00                   movq    (%rbp), %rax
// 7f: 48 85 c0                      testq   %rax, %rax
// 82: 7e 63                         jle     0xe7 <_JIT_ENTRY+0xe7>
// 84: 85 c0                         testl   %eax, %eax
// 86: 0f 89 81 00 00 00             jns     0x10d <_JIT_ENTRY+0x10d>
// 8c: e9 9d 00 00 00                jmp     0x12e <_JIT_ENTRY+0x12e>
// 91: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000093:  R_X86_64_64  .rodata.str1.1
// 9b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009d:  R_X86_64_64  _Py_NegativeRefcount
// a5: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// aa: 48 89 ea                      movq    %rbp, %rdx
// ad: ff d0                         callq   *%rax
// af: 48 8b 45 00                   movq    (%rbp), %rax
// b3: 85 c0                         testl   %eax, %eax
// b5: 78 16                         js      0xcd <_JIT_ENTRY+0xcd>
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c1: ff d0                         callq   *%rax
// c3: 48 ff 4d 00                   decq    (%rbp)
// c7: 0f 84 c7 00 00 00             je      0x194 <_JIT_ENTRY+0x194>
// cd: 49 8b 04 24                   movq    (%r12), %rax
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 0f 8e d6 00 00 00             jle     0x1b0 <_JIT_ENTRY+0x1b0>
// da: 85 c0                         testl   %eax, %eax
// dc: 0f 89 f4 00 00 00             jns     0x1d6 <_JIT_ENTRY+0x1d6>
// e2: e9 05 01 00 00                jmp     0x1ec <_JIT_ENTRY+0x1ec>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 49 8b 04 24                   movq    (%r12), %rax
// 132: 48 85 c0                      testq   %rax, %rax
// 135: 7e 09                         jle     0x140 <_JIT_ENTRY+0x140>
// 137: 85 c0                         testl   %eax, %eax
// 139: 79 2f                         jns     0x16a <_JIT_ENTRY+0x16a>
// 13b: e9 fa 01 00 00                jmp     0x33a <_JIT_ENTRY+0x33a>
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 159: 4c 89 e2                      movq    %r12, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 04 24                   movq    (%r12), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 0f 88 d0 01 00 00             js      0x33a <_JIT_ENTRY+0x33a>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 0c 24                   decq    (%r12)
// 17a: 0f 85 ba 01 00 00             jne     0x33a <_JIT_ENTRY+0x33a>
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: 4c 89 e7                      movq    %r12, %rdi
// 18d: ff d0                         callq   *%rax
// 18f: e9 a6 01 00 00                jmp     0x33a <_JIT_ENTRY+0x33a>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_Dealloc
// 19e: 48 89 ef                      movq    %rbp, %rdi
// 1a1: ff d0                         callq   *%rax
// 1a3: 49 8b 04 24                   movq    (%r12), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 0f 8f 2a ff ff ff             jg      0xda <_JIT_ENTRY+0xda>
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_NegativeRefcount
// 1c4: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c9: 4c 89 e2                      movq    %r12, %rdx
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8b 04 24                   movq    (%r12), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 16                         js      0x1ec <_JIT_ENTRY+0x1ec>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 ff 0c 24                   decq    (%r12)
// 1e6: 0f 84 21 01 00 00             je      0x30d <_JIT_ENTRY+0x30d>
// 1ec: 45 85 ff                      testl   %r15d, %r15d
// 1ef: 0f 88 45 01 00 00             js      0x33a <_JIT_ENTRY+0x33a>
// 1f5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f9: 48 85 ff                      testq   %rdi, %rdi
// 1fc: 0f 84 38 01 00 00             je      0x33a <_JIT_ENTRY+0x33a>
// 202: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000204:  R_X86_64_64  _Py_NoneStruct
// 20c: 4c 39 e7                      cmpq    %r12, %rdi
// 20f: 74 10                         je      0x221 <_JIT_ENTRY+0x221>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  PyErr_SetHandledException
// 21b: ff d0                         callq   *%rax
// 21d: 4c 8b 24 24                   movq    (%rsp), %r12
// 221: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 226: 4d 89 7d f0                   movq    %r15, -0x10(%r13)
// 22a: 4d 89 65 f8                   movq    %r12, -0x8(%r13)
// 22e: 48 8b 03                      movq    (%rbx), %rax
// 231: 48 8b 40 20                   movq    0x20(%rax), %rax
// 235: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000237:  R_X86_64_64  _JIT_OPARG
// 23f: 0f b7 c9                      movzwl  %cx, %ecx
// 242: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  PyObject_SetAttr
// 251: 4c 89 e7                      movq    %r12, %rdi
// 254: 4c 89 fa                      movq    %r15, %rdx
// 257: ff d0                         callq   *%rax
// 259: 89 c5                         movl    %eax, %ebp
// 25b: 49 8b 07                      movq    (%r15), %rax
// 25e: 48 85 c0                      testq   %rax, %rax
// 261: 7f 21                         jg      0x284 <_JIT_ENTRY+0x284>
// 263: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000265:  R_X86_64_64  .rodata.str1.1
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_NegativeRefcount
// 277: be c5 03 00 00                movl    $0x3c5, %esi            # imm = 0x3C5
// 27c: 4c 89 fa                      movq    %r15, %rdx
// 27f: ff d0                         callq   *%rax
// 281: 49 8b 07                      movq    (%r15), %rax
// 284: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000286:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28e: 85 c0                         testl   %eax, %eax
// 290: 78 17                         js      0x2a9 <_JIT_ENTRY+0x2a9>
// 292: 41 ff d5                      callq   *%r13
// 295: 49 ff 0f                      decq    (%r15)
// 298: 75 0f                         jne     0x2a9 <_JIT_ENTRY+0x2a9>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_Dealloc
// 2a4: 4c 89 ff                      movq    %r15, %rdi
// 2a7: ff d0                         callq   *%rax
// 2a9: 49 8b 04 24                   movq    (%r12), %rax
// 2ad: 48 85 c0                      testq   %rax, %rax
// 2b0: 7f 22                         jg      0x2d4 <_JIT_ENTRY+0x2d4>
// 2b2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b4:  R_X86_64_64  .rodata.str1.1
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  _Py_NegativeRefcount
// 2c6: be c6 03 00 00                movl    $0x3c6, %esi            # imm = 0x3C6
// 2cb: 4c 89 e2                      movq    %r12, %rdx
// 2ce: ff d0                         callq   *%rax
// 2d0: 49 8b 04 24                   movq    (%r12), %rax
// 2d4: 85 c0                         testl   %eax, %eax
// 2d6: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 2db: 78 09                         js      0x2e6 <_JIT_ENTRY+0x2e6>
// 2dd: 41 ff d5                      callq   *%r13
// 2e0: 49 ff 0c 24                   decq    (%r12)
// 2e4: 74 41                         je      0x327 <_JIT_ENTRY+0x327>
// 2e6: 85 ed                         testl   %ebp, %ebp
// 2e8: 75 50                         jne     0x33a <_JIT_ENTRY+0x33a>
// 2ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ec:  R_X86_64_64  _JIT_CONTINUE
// 2f4: 48 89 df                      movq    %rbx, %rdi
// 2f7: 4c 89 f6                      movq    %r14, %rsi
// 2fa: 4c 89 fa                      movq    %r15, %rdx
// 2fd: 48 83 c4 18                   addq    $0x18, %rsp
// 301: 5b                            popq    %rbx
// 302: 41 5c                         popq    %r12
// 304: 41 5d                         popq    %r13
// 306: 41 5e                         popq    %r14
// 308: 41 5f                         popq    %r15
// 30a: 5d                            popq    %rbp
// 30b: ff e0                         jmpq    *%rax
// 30d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030f:  R_X86_64_64  _Py_Dealloc
// 317: 4c 89 e7                      movq    %r12, %rdi
// 31a: ff d0                         callq   *%rax
// 31c: 45 85 ff                      testl   %r15d, %r15d
// 31f: 0f 89 d0 fe ff ff             jns     0x1f5 <_JIT_ENTRY+0x1f5>
// 325: eb 13                         jmp     0x33a <_JIT_ENTRY+0x33a>
// 327: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000329:  R_X86_64_64  _Py_Dealloc
// 331: 4c 89 e7                      movq    %r12, %rdi
// 334: ff d0                         callq   *%rax
// 336: 85 ed                         testl   %ebp, %ebp
// 338: 74 b0                         je      0x2ea <_JIT_ENTRY+0x2ea>
// 33a: 49 29 de                      subq    %rbx, %r14
// 33d: 49 83 c6 b8                   addq    $-0x48, %r14
// 341: 49 c1 ee 03                   shrq    $0x3, %r14
// 345: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 349: 31 c0                         xorl    %eax, %eax
// 34b: 48 83 c4 18                   addq    $0x18, %rsp
// 34f: 5b                            popq    %rbx
// 350: 41 5c                         popq    %r12
// 352: 41 5d                         popq    %r13
// 354: 41 5e                         popq    %r14
// 356: 41 5f                         popq    %r15
// 358: 5d                            popq    %rbp
// 359: c3                            retq
// 35a: 
static const unsigned char _CHECK_EG_MATCHplus_STORE_ATTR_code_body[859] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8d, 0x76, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x42, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x41, 0x89, 0xc7, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0xfa, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xd0, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xba, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xa6, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x21, 0x01, 0x00, 0x00, 0x45, 0x85, 0xff, 0x0f, 0x88, 0x45, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x38, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x4d, 0x89, 0x7d, 0xf0, 0x4d, 0x89, 0x65, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc6, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x09, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x41, 0x85, 0xed, 0x75, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x45, 0x85, 0xff, 0x0f, 0x89, 0xd0, 0xfe, 0xff, 0xff, 0xeb, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x74, 0xb0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_STORE_ATTR_code_holes[31] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetAttr, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ec, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x30f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x329, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_STORE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_STORE_ATTR_data_holes[1];

// _CHECK_EG_MATCHplus_STORE_ATTR_INSTANCE_VALUE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_STORE_ATTR_INSTANCE_VALUE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 8b 6e f0                   movq    -0x10(%rsi), %rbp
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 4c 8d 76 f0                   leaq    -0x10(%rsi), %r14
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 61: 48 89 ef                      movq    %rbp, %rdi
// 64: 4c 89 e6                      movq    %r12, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c3                         movl    %eax, %ebx
// 6b: 48 8b 45 00                   movq    (%rbp), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 48 8b 45 00                   movq    (%rbp), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 57                         jle     0xda <_JIT_ENTRY+0xda>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 79                         jns     0x100 <_JIT_ENTRY+0x100>
// 87: e9 8a 00 00 00                jmp     0x116 <_JIT_ENTRY+0x116>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 48 89 ea                      movq    %rbp, %rdx
// a8: ff d0                         callq   *%rax
// aa: 48 8b 45 00                   movq    (%rbp), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 48 ff 4d 00                   decq    (%rbp)
// c2: 74 6c                         je      0x130 <_JIT_ENTRY+0x130>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7e 7b                         jle     0x148 <_JIT_ENTRY+0x148>
// cd: 85 c0                         testl   %eax, %eax
// cf: 0f 89 99 00 00 00             jns     0x16e <_JIT_ENTRY+0x16e>
// d5: e9 aa 00 00 00                jmp     0x184 <_JIT_ENTRY+0x184>
// da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000dc:  R_X86_64_64  .rodata.str1.1
// e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e6:  R_X86_64_64  _Py_NegativeRefcount
// ee: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f3: 48 89 ea                      movq    %rbp, %rdx
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 85 c0                         testl   %eax, %eax
// fe: 78 16                         js      0x116 <_JIT_ENTRY+0x116>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10a: ff d0                         callq   *%rax
// 10c: 48 ff 4d 00                   decq    (%rbp)
// 110: 0f 84 d9 01 00 00             je      0x2ef <_JIT_ENTRY+0x2ef>
// 116: 49 8b 04 24                   movq    (%r12), %rax
// 11a: 48 85 c0                      testq   %rax, %rax
// 11d: 0f 8e e8 01 00 00             jle     0x30b <_JIT_ENTRY+0x30b>
// 123: 85 c0                         testl   %eax, %eax
// 125: 0f 89 06 02 00 00             jns     0x331 <_JIT_ENTRY+0x331>
// 12b: e9 22 02 00 00                jmp     0x352 <_JIT_ENTRY+0x352>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_Dealloc
// 13a: 48 89 ef                      movq    %rbp, %rdi
// 13d: ff d0                         callq   *%rax
// 13f: 49 8b 04 24                   movq    (%r12), %rax
// 143: 48 85 c0                      testq   %rax, %rax
// 146: 7f 85                         jg      0xcd <_JIT_ENTRY+0xcd>
// 148: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014a:  R_X86_64_64  .rodata.str1.1
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 161: 4c 89 e2                      movq    %r12, %rdx
// 164: ff d0                         callq   *%rax
// 166: 49 8b 04 24                   movq    (%r12), %rax
// 16a: 85 c0                         testl   %eax, %eax
// 16c: 78 16                         js      0x184 <_JIT_ENTRY+0x184>
// 16e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000170:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 178: ff d0                         callq   *%rax
// 17a: 49 ff 0c 24                   decq    (%r12)
// 17e: 0f 84 b6 00 00 00             je      0x23a <_JIT_ENTRY+0x23a>
// 184: 85 db                         testl   %ebx, %ebx
// 186: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 18b: 0f 88 c1 01 00 00             js      0x352 <_JIT_ENTRY+0x352>
// 191: 48 8b 3c 24                   movq    (%rsp), %rdi
// 195: 48 85 ff                      testq   %rdi, %rdi
// 198: 0f 84 b4 01 00 00             je      0x352 <_JIT_ENTRY+0x352>
// 19e: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001a0:  R_X86_64_64  _Py_NoneStruct
// 1a8: 4c 39 e7                      cmpq    %r12, %rdi
// 1ab: 74 10                         je      0x1bd <_JIT_ENTRY+0x1bd>
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  PyErr_SetHandledException
// 1b7: ff d0                         callq   *%rax
// 1b9: 4c 8b 24 24                   movq    (%rsp), %r12
// 1bd: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1c2: 49 89 4d f0                   movq    %rcx, -0x10(%r13)
// 1c6: 4d 89 65 f8                   movq    %r12, -0x8(%r13)
// 1ca: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 1cf: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001d1:  R_X86_64_64  _JIT_OPERAND
// 1d9: 0f b7 d2                      movzwl  %dx, %edx
// 1dc: 48 8b 5c d0 01                movq    0x1(%rax,%rdx,8), %rbx
// 1e1: 48 89 4c d0 01                movq    %rcx, 0x1(%rax,%rdx,8)
// 1e6: 48 85 db                      testq   %rbx, %rbx
// 1e9: 74 70                         je      0x25b <_JIT_ENTRY+0x25b>
// 1eb: 48 8b 03                      movq    (%rbx), %rax
// 1ee: 48 85 c0                      testq   %rax, %rax
// 1f1: 7f 21                         jg      0x214 <_JIT_ENTRY+0x214>
// 1f3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f5:  R_X86_64_64  .rodata.str1.1
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  _Py_NegativeRefcount
// 207: be 16 07 00 00                movl    $0x716, %esi            # imm = 0x716
// 20c: 48 89 da                      movq    %rbx, %rdx
// 20f: ff d0                         callq   *%rax
// 211: 48 8b 03                      movq    (%rbx), %rax
// 214: 85 c0                         testl   %eax, %eax
// 216: 78 5f                         js      0x277 <_JIT_ENTRY+0x277>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 222: ff d0                         callq   *%rax
// 224: 48 ff 0b                      decq    (%rbx)
// 227: 75 4e                         jne     0x277 <_JIT_ENTRY+0x277>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_Dealloc
// 233: 48 89 df                      movq    %rbx, %rdi
// 236: ff d0                         callq   *%rax
// 238: eb 3d                         jmp     0x277 <_JIT_ENTRY+0x277>
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_Dealloc
// 244: 4c 89 e7                      movq    %r12, %rdi
// 247: ff d0                         callq   *%rax
// 249: 85 db                         testl   %ebx, %ebx
// 24b: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 250: 0f 89 3b ff ff ff             jns     0x191 <_JIT_ENTRY+0x191>
// 256: e9 f7 00 00 00                jmp     0x352 <_JIT_ENTRY+0x352>
// 25b: 0f b6 48 ff                   movzbl  -0x1(%rax), %ecx
// 25f: 8d 51 01                      leal    0x1(%rcx), %edx
// 262: 48 f7 d1                      notq    %rcx
// 265: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000267:  R_X86_64_64  _JIT_OPERAND
// 26f: 40 88 74 08 ff                movb    %sil, -0x1(%rax,%rcx)
// 274: 88 50 ff                      movb    %dl, -0x1(%rax)
// 277: 49 8b 04 24                   movq    (%r12), %rax
// 27b: 48 85 c0                      testq   %rax, %rax
// 27e: 7f 22                         jg      0x2a2 <_JIT_ENTRY+0x2a2>
// 280: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000282:  R_X86_64_64  .rodata.str1.1
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _Py_NegativeRefcount
// 294: be 18 07 00 00                movl    $0x718, %esi            # imm = 0x718
// 299: 4c 89 e2                      movq    %r12, %rdx
// 29c: ff d0                         callq   *%rax
// 29e: 49 8b 04 24                   movq    (%r12), %rax
// 2a2: 85 c0                         testl   %eax, %eax
// 2a4: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 2a9: 78 21                         js      0x2cc <_JIT_ENTRY+0x2cc>
// 2ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b5: ff d0                         callq   *%rax
// 2b7: 49 ff 0c 24                   decq    (%r12)
// 2bb: 75 0f                         jne     0x2cc <_JIT_ENTRY+0x2cc>
// 2bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bf:  R_X86_64_64  _Py_Dealloc
// 2c7: 4c 89 e7                      movq    %r12, %rdi
// 2ca: ff d0                         callq   *%rax
// 2cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ce:  R_X86_64_64  _JIT_CONTINUE
// 2d6: 48 89 df                      movq    %rbx, %rdi
// 2d9: 4c 89 f6                      movq    %r14, %rsi
// 2dc: 4c 89 fa                      movq    %r15, %rdx
// 2df: 48 83 c4 18                   addq    $0x18, %rsp
// 2e3: 5b                            popq    %rbx
// 2e4: 41 5c                         popq    %r12
// 2e6: 41 5d                         popq    %r13
// 2e8: 41 5e                         popq    %r14
// 2ea: 41 5f                         popq    %r15
// 2ec: 5d                            popq    %rbp
// 2ed: ff e0                         jmpq    *%rax
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _Py_Dealloc
// 2f9: 48 89 ef                      movq    %rbp, %rdi
// 2fc: ff d0                         callq   *%rax
// 2fe: 49 8b 04 24                   movq    (%r12), %rax
// 302: 48 85 c0                      testq   %rax, %rax
// 305: 0f 8f 18 fe ff ff             jg      0x123 <_JIT_ENTRY+0x123>
// 30b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000030d:  R_X86_64_64  .rodata.str1.1
// 315: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000317:  R_X86_64_64  _Py_NegativeRefcount
// 31f: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 324: 4c 89 e2                      movq    %r12, %rdx
// 327: ff d0                         callq   *%rax
// 329: 49 8b 04 24                   movq    (%r12), %rax
// 32d: 85 c0                         testl   %eax, %eax
// 32f: 78 21                         js      0x352 <_JIT_ENTRY+0x352>
// 331: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000333:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 33b: ff d0                         callq   *%rax
// 33d: 49 ff 0c 24                   decq    (%r12)
// 341: 75 0f                         jne     0x352 <_JIT_ENTRY+0x352>
// 343: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000345:  R_X86_64_64  _Py_Dealloc
// 34d: 4c 89 e7                      movq    %r12, %rdi
// 350: ff d0                         callq   *%rax
// 352: 49 29 de                      subq    %rbx, %r14
// 355: 49 83 c6 b8                   addq    $-0x48, %r14
// 359: 49 c1 ee 03                   shrq    $0x3, %r14
// 35d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 361: 31 c0                         xorl    %eax, %eax
// 363: 48 83 c4 18                   addq    $0x18, %rsp
// 367: 5b                            popq    %rbx
// 368: 41 5c                         popq    %r12
// 36a: 41 5d                         popq    %r13
// 36c: 41 5e                         popq    %r14
// 36e: 41 5f                         popq    %r15
// 370: 5d                            popq    %rbp
// 371: c3                            retq
// 372: 
static const unsigned char _CHECK_EG_MATCHplus_STORE_ATTR_INSTANCE_VALUE_code_body[883] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8d, 0x76, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc3, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xd9, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xe8, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x06, 0x02, 0x00, 0x00, 0xe9, 0x22, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x85, 0xdb, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x0f, 0x88, 0xc1, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xb4, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x89, 0x4d, 0xf0, 0x4d, 0x89, 0x65, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x48, 0x8b, 0x5c, 0xd0, 0x01, 0x48, 0x89, 0x4c, 0xd0, 0x01, 0x48, 0x85, 0xdb, 0x74, 0x70, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x07, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x75, 0x4e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0xeb, 0x3d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xdb, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x0f, 0x89, 0x3b, 0xff, 0xff, 0xff, 0xe9, 0xf7, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0x48, 0xff, 0x8d, 0x51, 0x01, 0x48, 0xf7, 0xd1, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x88, 0x74, 0x08, 0xff, 0x88, 0x50, 0xff, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x18, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_STORE_ATTR_INSTANCE_VALUE_code_holes[32] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ce, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x317, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x333, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x345, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_STORE_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_STORE_ATTR_INSTANCE_VALUE_data_holes[1];

// _CHECK_EG_MATCHplus_STORE_ATTR_SLOT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_STORE_ATTR_SLOT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 8b 6e f0                   movq    -0x10(%rsi), %rbp
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 4c 8d 76 f0                   leaq    -0x10(%rsi), %r14
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 5c 24 08                movq    %rbx, 0x8(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 61: 48 89 ef                      movq    %rbp, %rdi
// 64: 4c 89 e6                      movq    %r12, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c3                         movl    %eax, %ebx
// 6b: 48 8b 45 00                   movq    (%rbp), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 48 8b 45 00                   movq    (%rbp), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 57                         jle     0xda <_JIT_ENTRY+0xda>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 79                         jns     0x100 <_JIT_ENTRY+0x100>
// 87: e9 8a 00 00 00                jmp     0x116 <_JIT_ENTRY+0x116>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 48 89 ea                      movq    %rbp, %rdx
// a8: ff d0                         callq   *%rax
// aa: 48 8b 45 00                   movq    (%rbp), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 48 ff 4d 00                   decq    (%rbp)
// c2: 74 6c                         je      0x130 <_JIT_ENTRY+0x130>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7e 7b                         jle     0x148 <_JIT_ENTRY+0x148>
// cd: 85 c0                         testl   %eax, %eax
// cf: 0f 89 99 00 00 00             jns     0x16e <_JIT_ENTRY+0x16e>
// d5: e9 aa 00 00 00                jmp     0x184 <_JIT_ENTRY+0x184>
// da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000dc:  R_X86_64_64  .rodata.str1.1
// e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e6:  R_X86_64_64  _Py_NegativeRefcount
// ee: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f3: 48 89 ea                      movq    %rbp, %rdx
// f6: ff d0                         callq   *%rax
// f8: 48 8b 45 00                   movq    (%rbp), %rax
// fc: 85 c0                         testl   %eax, %eax
// fe: 78 16                         js      0x116 <_JIT_ENTRY+0x116>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10a: ff d0                         callq   *%rax
// 10c: 48 ff 4d 00                   decq    (%rbp)
// 110: 0f 84 b1 01 00 00             je      0x2c7 <_JIT_ENTRY+0x2c7>
// 116: 49 8b 04 24                   movq    (%r12), %rax
// 11a: 48 85 c0                      testq   %rax, %rax
// 11d: 0f 8e c0 01 00 00             jle     0x2e3 <_JIT_ENTRY+0x2e3>
// 123: 85 c0                         testl   %eax, %eax
// 125: 0f 89 de 01 00 00             jns     0x309 <_JIT_ENTRY+0x309>
// 12b: e9 fa 01 00 00                jmp     0x32a <_JIT_ENTRY+0x32a>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_Dealloc
// 13a: 48 89 ef                      movq    %rbp, %rdi
// 13d: ff d0                         callq   *%rax
// 13f: 49 8b 04 24                   movq    (%r12), %rax
// 143: 48 85 c0                      testq   %rax, %rax
// 146: 7f 85                         jg      0xcd <_JIT_ENTRY+0xcd>
// 148: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014a:  R_X86_64_64  .rodata.str1.1
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 161: 4c 89 e2                      movq    %r12, %rdx
// 164: ff d0                         callq   *%rax
// 166: 49 8b 04 24                   movq    (%r12), %rax
// 16a: 85 c0                         testl   %eax, %eax
// 16c: 78 16                         js      0x184 <_JIT_ENTRY+0x184>
// 16e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000170:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 178: ff d0                         callq   *%rax
// 17a: 49 ff 0c 24                   decq    (%r12)
// 17e: 0f 84 25 01 00 00             je      0x2a9 <_JIT_ENTRY+0x2a9>
// 184: 85 db                         testl   %ebx, %ebx
// 186: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 18b: 0f 88 99 01 00 00             js      0x32a <_JIT_ENTRY+0x32a>
// 191: 48 8b 3c 24                   movq    (%rsp), %rdi
// 195: 48 85 ff                      testq   %rdi, %rdi
// 198: 0f 84 8c 01 00 00             je      0x32a <_JIT_ENTRY+0x32a>
// 19e: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001a0:  R_X86_64_64  _Py_NoneStruct
// 1a8: 4c 39 e7                      cmpq    %r12, %rdi
// 1ab: 74 10                         je      0x1bd <_JIT_ENTRY+0x1bd>
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  PyErr_SetHandledException
// 1b7: ff d0                         callq   *%rax
// 1b9: 4c 8b 24 24                   movq    (%rsp), %r12
// 1bd: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1c2: 49 89 45 f0                   movq    %rax, -0x10(%r13)
// 1c6: 4d 89 65 f8                   movq    %r12, -0x8(%r13)
// 1ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cc:  R_X86_64_64  _JIT_OPERAND
// 1d4: 0f b7 c9                      movzwl  %cx, %ecx
// 1d7: 49 8b 1c 0c                   movq    (%r12,%rcx), %rbx
// 1db: 49 89 04 0c                   movq    %rax, (%r12,%rcx)
// 1df: 48 85 db                      testq   %rbx, %rbx
// 1e2: 74 4d                         je      0x231 <_JIT_ENTRY+0x231>
// 1e4: 48 8b 03                      movq    (%rbx), %rax
// 1e7: 48 85 c0                      testq   %rax, %rax
// 1ea: 7f 21                         jg      0x20d <_JIT_ENTRY+0x20d>
// 1ec: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ee:  R_X86_64_64  .rodata.str1.1+0x39
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_NegativeRefcount
// 200: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 205: 48 89 da                      movq    %rbx, %rdx
// 208: ff d0                         callq   *%rax
// 20a: 48 8b 03                      movq    (%rbx), %rax
// 20d: 85 c0                         testl   %eax, %eax
// 20f: 78 20                         js      0x231 <_JIT_ENTRY+0x231>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21b: ff d0                         callq   *%rax
// 21d: 48 ff 0b                      decq    (%rbx)
// 220: 75 0f                         jne     0x231 <_JIT_ENTRY+0x231>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_Dealloc
// 22c: 48 89 df                      movq    %rbx, %rdi
// 22f: ff d0                         callq   *%rax
// 231: 49 8b 04 24                   movq    (%r12), %rax
// 235: 48 85 c0                      testq   %rax, %rax
// 238: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 23d: 7f 22                         jg      0x261 <_JIT_ENTRY+0x261>
// 23f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000241:  R_X86_64_64  .rodata.str1.1
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_NegativeRefcount
// 253: be 2a 07 00 00                movl    $0x72a, %esi            # imm = 0x72A
// 258: 4c 89 e2                      movq    %r12, %rdx
// 25b: ff d0                         callq   *%rax
// 25d: 49 8b 04 24                   movq    (%r12), %rax
// 261: 85 c0                         testl   %eax, %eax
// 263: 78 21                         js      0x286 <_JIT_ENTRY+0x286>
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26f: ff d0                         callq   *%rax
// 271: 49 ff 0c 24                   decq    (%r12)
// 275: 75 0f                         jne     0x286 <_JIT_ENTRY+0x286>
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _Py_Dealloc
// 281: 4c 89 e7                      movq    %r12, %rdi
// 284: ff d0                         callq   *%rax
// 286: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000288:  R_X86_64_64  _JIT_CONTINUE
// 290: 48 89 df                      movq    %rbx, %rdi
// 293: 4c 89 f6                      movq    %r14, %rsi
// 296: 4c 89 fa                      movq    %r15, %rdx
// 299: 48 83 c4 18                   addq    $0x18, %rsp
// 29d: 5b                            popq    %rbx
// 29e: 41 5c                         popq    %r12
// 2a0: 41 5d                         popq    %r13
// 2a2: 41 5e                         popq    %r14
// 2a4: 41 5f                         popq    %r15
// 2a6: 5d                            popq    %rbp
// 2a7: ff e0                         jmpq    *%rax
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _Py_Dealloc
// 2b3: 4c 89 e7                      movq    %r12, %rdi
// 2b6: ff d0                         callq   *%rax
// 2b8: 85 db                         testl   %ebx, %ebx
// 2ba: 48 8b 5c 24 08                movq    0x8(%rsp), %rbx
// 2bf: 0f 89 cc fe ff ff             jns     0x191 <_JIT_ENTRY+0x191>
// 2c5: eb 63                         jmp     0x32a <_JIT_ENTRY+0x32a>
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _Py_Dealloc
// 2d1: 48 89 ef                      movq    %rbp, %rdi
// 2d4: ff d0                         callq   *%rax
// 2d6: 49 8b 04 24                   movq    (%r12), %rax
// 2da: 48 85 c0                      testq   %rax, %rax
// 2dd: 0f 8f 40 fe ff ff             jg      0x123 <_JIT_ENTRY+0x123>
// 2e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e5:  R_X86_64_64  .rodata.str1.1
// 2ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ef:  R_X86_64_64  _Py_NegativeRefcount
// 2f7: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2fc: 4c 89 e2                      movq    %r12, %rdx
// 2ff: ff d0                         callq   *%rax
// 301: 49 8b 04 24                   movq    (%r12), %rax
// 305: 85 c0                         testl   %eax, %eax
// 307: 78 21                         js      0x32a <_JIT_ENTRY+0x32a>
// 309: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 313: ff d0                         callq   *%rax
// 315: 49 ff 0c 24                   decq    (%r12)
// 319: 75 0f                         jne     0x32a <_JIT_ENTRY+0x32a>
// 31b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031d:  R_X86_64_64  _Py_Dealloc
// 325: 4c 89 e7                      movq    %r12, %rdi
// 328: ff d0                         callq   *%rax
// 32a: 49 29 de                      subq    %rbx, %r14
// 32d: 49 83 c6 b8                   addq    $-0x48, %r14
// 331: 49 c1 ee 03                   shrq    $0x3, %r14
// 335: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 339: 31 c0                         xorl    %eax, %eax
// 33b: 48 83 c4 18                   addq    $0x18, %rsp
// 33f: 5b                            popq    %rbx
// 340: 41 5c                         popq    %r12
// 342: 41 5d                         popq    %r13
// 344: 41 5e                         popq    %r14
// 346: 41 5f                         popq    %r15
// 348: 5d                            popq    %rbp
// 349: c3                            retq
// 34a: 
static const unsigned char _CHECK_EG_MATCHplus_STORE_ATTR_SLOT_code_body[843] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8d, 0x76, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x5c, 0x24, 0x08, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc3, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xb1, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc0, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xde, 0x01, 0x00, 0x00, 0xe9, 0xfa, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x25, 0x01, 0x00, 0x00, 0x85, 0xdb, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x0f, 0x88, 0x99, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x8c, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x89, 0x45, 0xf0, 0x4d, 0x89, 0x65, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x49, 0x8b, 0x1c, 0x0c, 0x49, 0x89, 0x04, 0x0c, 0x48, 0x85, 0xdb, 0x74, 0x4d, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x2a, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xdb, 0x48, 0x8b, 0x5c, 0x24, 0x08, 0x0f, 0x89, 0xcc, 0xfe, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x40, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_STORE_ATTR_SLOT_code_holes[31] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x288, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x30b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x31d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_STORE_ATTR_SLOT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_STORE_ATTR_SLOT_data_holes[1];

// _CHECK_EG_MATCHplus_STORE_DEREF
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_STORE_DEREF.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d6                      movq    %rdx, %r14
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 8d 5e f0                   leaq    -0x10(%rsi), %rbx
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 44                         js      0x7d <_JIT_ENTRY+0x7d>
// 39: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// 3e: 49 89 ee                      movq    %rbp, %r14
// 41: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 49: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 52: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000054:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 5c: 48 89 e2                      movq    %rsp, %rdx
// 5f: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 64: 4c 89 ef                      movq    %r13, %rdi
// 67: 4c 89 e6                      movq    %r12, %rsi
// 6a: ff d0                         callq   *%rax
// 6c: 89 c5                         movl    %eax, %ebp
// 6e: 49 8b 45 00                   movq    (%r13), %rax
// 72: 48 85 c0                      testq   %rax, %rax
// 75: 7e 18                         jle     0x8f <_JIT_ENTRY+0x8f>
// 77: 85 c0                         testl   %eax, %eax
// 79: 79 3a                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 7b: eb 4a                         jmp     0xc7 <_JIT_ENTRY+0xc7>
// 7d: 49 8b 45 00                   movq    (%r13), %rax
// 81: 48 85 c0                      testq   %rax, %rax
// 84: 7e 57                         jle     0xdd <_JIT_ENTRY+0xdd>
// 86: 85 c0                         testl   %eax, %eax
// 88: 79 79                         jns     0x103 <_JIT_ENTRY+0x103>
// 8a: e9 8a 00 00 00                jmp     0x119 <_JIT_ENTRY+0x119>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a8: 4c 89 ea                      movq    %r13, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 45 00                   movq    (%r13), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 12                         js      0xc7 <_JIT_ENTRY+0xc7>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 4d 00                   decq    (%r13)
// c5: 74 6c                         je      0x133 <_JIT_ENTRY+0x133>
// c7: 49 8b 04 24                   movq    (%r12), %rax
// cb: 48 85 c0                      testq   %rax, %rax
// ce: 7e 7b                         jle     0x14b <_JIT_ENTRY+0x14b>
// d0: 85 c0                         testl   %eax, %eax
// d2: 0f 89 99 00 00 00             jns     0x171 <_JIT_ENTRY+0x171>
// d8: e9 aa 00 00 00                jmp     0x187 <_JIT_ENTRY+0x187>
// dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000df:  R_X86_64_64  .rodata.str1.1
// e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e9:  R_X86_64_64  _Py_NegativeRefcount
// f1: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f6: 4c 89 ea                      movq    %r13, %rdx
// f9: ff d0                         callq   *%rax
// fb: 49 8b 45 00                   movq    (%r13), %rax
// ff: 85 c0                         testl   %eax, %eax
// 101: 78 16                         js      0x119 <_JIT_ENTRY+0x119>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10d: ff d0                         callq   *%rax
// 10f: 49 ff 4d 00                   decq    (%r13)
// 113: 0f 84 67 01 00 00             je      0x280 <_JIT_ENTRY+0x280>
// 119: 49 8b 04 24                   movq    (%r12), %rax
// 11d: 48 85 c0                      testq   %rax, %rax
// 120: 0f 8e 76 01 00 00             jle     0x29c <_JIT_ENTRY+0x29c>
// 126: 85 c0                         testl   %eax, %eax
// 128: 0f 89 94 01 00 00             jns     0x2c2 <_JIT_ENTRY+0x2c2>
// 12e: e9 b0 01 00 00                jmp     0x2e3 <_JIT_ENTRY+0x2e3>
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_Dealloc
// 13d: 4c 89 ef                      movq    %r13, %rdi
// 140: ff d0                         callq   *%rax
// 142: 49 8b 04 24                   movq    (%r12), %rax
// 146: 48 85 c0                      testq   %rax, %rax
// 149: 7f 85                         jg      0xd0 <_JIT_ENTRY+0xd0>
// 14b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014d:  R_X86_64_64  .rodata.str1.1
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  _Py_NegativeRefcount
// 15f: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 164: 4c 89 e2                      movq    %r12, %rdx
// 167: ff d0                         callq   *%rax
// 169: 49 8b 04 24                   movq    (%r12), %rax
// 16d: 85 c0                         testl   %eax, %eax
// 16f: 78 16                         js      0x187 <_JIT_ENTRY+0x187>
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17b: ff d0                         callq   *%rax
// 17d: 49 ff 0c 24                   decq    (%r12)
// 181: 0f 84 dd 00 00 00             je      0x264 <_JIT_ENTRY+0x264>
// 187: 85 ed                         testl   %ebp, %ebp
// 189: 4c 89 f5                      movq    %r14, %rbp
// 18c: 0f 88 51 01 00 00             js      0x2e3 <_JIT_ENTRY+0x2e3>
// 192: 48 8b 3c 24                   movq    (%rsp), %rdi
// 196: 48 85 ff                      testq   %rdi, %rdi
// 199: 0f 84 44 01 00 00             je      0x2e3 <_JIT_ENTRY+0x2e3>
// 19f: 49 83 c7 f8                   addq    $-0x8, %r15
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _Py_NoneStruct
// 1ad: 48 39 c7                      cmpq    %rax, %rdi
// 1b0: 74 10                         je      0x1c2 <_JIT_ENTRY+0x1c2>
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  PyErr_SetHandledException
// 1bc: ff d0                         callq   *%rax
// 1be: 48 8b 04 24                   movq    (%rsp), %rax
// 1c2: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1c7: 48 89 0b                      movq    %rcx, (%rbx)
// 1ca: 49 89 07                      movq    %rax, (%r15)
// 1cd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cf:  R_X86_64_64  _JIT_OPARG
// 1d7: 0f b7 c9                      movzwl  %cx, %ecx
// 1da: 48 8b 4c cd 48                movq    0x48(%rbp,%rcx,8), %rcx
// 1df: 4c 8b 61 10                   movq    0x10(%rcx), %r12
// 1e3: 48 89 41 10                   movq    %rax, 0x10(%rcx)
// 1e7: 4d 85 e4                      testq   %r12, %r12
// 1ea: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1ef: 74 50                         je      0x241 <_JIT_ENTRY+0x241>
// 1f1: 49 8b 04 24                   movq    (%r12), %rax
// 1f5: 48 85 c0                      testq   %rax, %rax
// 1f8: 7f 22                         jg      0x21c <_JIT_ENTRY+0x21c>
// 1fa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fc:  R_X86_64_64  .rodata.str1.1+0x39
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _Py_NegativeRefcount
// 20e: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 213: 4c 89 e2                      movq    %r12, %rdx
// 216: ff d0                         callq   *%rax
// 218: 49 8b 04 24                   movq    (%r12), %rax
// 21c: 85 c0                         testl   %eax, %eax
// 21e: 78 21                         js      0x241 <_JIT_ENTRY+0x241>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22a: ff d0                         callq   *%rax
// 22c: 49 ff 0c 24                   decq    (%r12)
// 230: 75 0f                         jne     0x241 <_JIT_ENTRY+0x241>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_Dealloc
// 23c: 4c 89 e7                      movq    %r12, %rdi
// 23f: ff d0                         callq   *%rax
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _JIT_CONTINUE
// 24b: 48 89 ef                      movq    %rbp, %rdi
// 24e: 4c 89 fe                      movq    %r15, %rsi
// 251: 48 89 da                      movq    %rbx, %rdx
// 254: 48 83 c4 18                   addq    $0x18, %rsp
// 258: 5b                            popq    %rbx
// 259: 41 5c                         popq    %r12
// 25b: 41 5d                         popq    %r13
// 25d: 41 5e                         popq    %r14
// 25f: 41 5f                         popq    %r15
// 261: 5d                            popq    %rbp
// 262: ff e0                         jmpq    *%rax
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_Dealloc
// 26e: 4c 89 e7                      movq    %r12, %rdi
// 271: ff d0                         callq   *%rax
// 273: 85 ed                         testl   %ebp, %ebp
// 275: 4c 89 f5                      movq    %r14, %rbp
// 278: 0f 89 14 ff ff ff             jns     0x192 <_JIT_ENTRY+0x192>
// 27e: eb 63                         jmp     0x2e3 <_JIT_ENTRY+0x2e3>
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_Dealloc
// 28a: 4c 89 ef                      movq    %r13, %rdi
// 28d: ff d0                         callq   *%rax
// 28f: 49 8b 04 24                   movq    (%r12), %rax
// 293: 48 85 c0                      testq   %rax, %rax
// 296: 0f 8f 8a fe ff ff             jg      0x126 <_JIT_ENTRY+0x126>
// 29c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029e:  R_X86_64_64  .rodata.str1.1
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  _Py_NegativeRefcount
// 2b0: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2b5: 4c 89 e2                      movq    %r12, %rdx
// 2b8: ff d0                         callq   *%rax
// 2ba: 49 8b 04 24                   movq    (%r12), %rax
// 2be: 85 c0                         testl   %eax, %eax
// 2c0: 78 21                         js      0x2e3 <_JIT_ENTRY+0x2e3>
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2cc: ff d0                         callq   *%rax
// 2ce: 49 ff 0c 24                   decq    (%r12)
// 2d2: 75 0f                         jne     0x2e3 <_JIT_ENTRY+0x2e3>
// 2d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d6:  R_X86_64_64  _Py_Dealloc
// 2de: 4c 89 e7                      movq    %r12, %rdi
// 2e1: ff d0                         callq   *%rax
// 2e3: 48 29 eb                      subq    %rbp, %rbx
// 2e6: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2ea: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2ee: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 2f1: 31 c0                         xorl    %eax, %eax
// 2f3: 48 83 c4 18                   addq    $0x18, %rsp
// 2f7: 5b                            popq    %rbx
// 2f8: 41 5c                         popq    %r12
// 2fa: 41 5d                         popq    %r13
// 2fc: 41 5e                         popq    %r14
// 2fe: 41 5f                         popq    %r15
// 300: 5d                            popq    %rbp
// 301: c3                            retq
// 302: 
static const unsigned char _CHECK_EG_MATCHplus_STORE_DEREF_code_body[771] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0x8d, 0x5e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x44, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x49, 0x89, 0xee, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x67, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x76, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x94, 0x01, 0x00, 0x00, 0xe9, 0xb0, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xdd, 0x00, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x89, 0xf5, 0x0f, 0x88, 0x51, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x44, 0x01, 0x00, 0x00, 0x49, 0x83, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x89, 0x0b, 0x49, 0x89, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x4c, 0xcd, 0x48, 0x4c, 0x8b, 0x61, 0x10, 0x48, 0x89, 0x41, 0x10, 0x4d, 0x85, 0xe4, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x89, 0xf5, 0x0f, 0x89, 0x14, 0xff, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x8a, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_STORE_DEREF_code_holes[27] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x54, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_STORE_DEREF_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_STORE_DEREF_data_holes[1];

// _CHECK_EG_MATCHplus_STORE_FAST
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_STORE_FAST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 4c 8d 76 f0                   leaq    -0x10(%rsi), %r14
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 e6                      movq    %r12, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 57                         jle     0xda <_JIT_ENTRY+0xda>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 79                         jns     0x100 <_JIT_ENTRY+0x100>
// 87: e9 8a 00 00 00                jmp     0x116 <_JIT_ENTRY+0x116>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 4c 89 ea                      movq    %r13, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 45 00                   movq    (%r13), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 4d 00                   decq    (%r13)
// c2: 74 6c                         je      0x130 <_JIT_ENTRY+0x130>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7e 7b                         jle     0x148 <_JIT_ENTRY+0x148>
// cd: 85 c0                         testl   %eax, %eax
// cf: 0f 89 99 00 00 00             jns     0x16e <_JIT_ENTRY+0x16e>
// d5: e9 aa 00 00 00                jmp     0x184 <_JIT_ENTRY+0x184>
// da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000dc:  R_X86_64_64  .rodata.str1.1
// e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e6:  R_X86_64_64  _Py_NegativeRefcount
// ee: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f3: 4c 89 ea                      movq    %r13, %rdx
// f6: ff d0                         callq   *%rax
// f8: 49 8b 45 00                   movq    (%r13), %rax
// fc: 85 c0                         testl   %eax, %eax
// fe: 78 16                         js      0x116 <_JIT_ENTRY+0x116>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10a: ff d0                         callq   *%rax
// 10c: 49 ff 4d 00                   decq    (%r13)
// 110: 0f 84 5e 01 00 00             je      0x274 <_JIT_ENTRY+0x274>
// 116: 49 8b 04 24                   movq    (%r12), %rax
// 11a: 48 85 c0                      testq   %rax, %rax
// 11d: 0f 8e 6d 01 00 00             jle     0x290 <_JIT_ENTRY+0x290>
// 123: 85 c0                         testl   %eax, %eax
// 125: 0f 89 8b 01 00 00             jns     0x2b6 <_JIT_ENTRY+0x2b6>
// 12b: e9 a7 01 00 00                jmp     0x2d7 <_JIT_ENTRY+0x2d7>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_Dealloc
// 13a: 4c 89 ef                      movq    %r13, %rdi
// 13d: ff d0                         callq   *%rax
// 13f: 49 8b 04 24                   movq    (%r12), %rax
// 143: 48 85 c0                      testq   %rax, %rax
// 146: 7f 85                         jg      0xcd <_JIT_ENTRY+0xcd>
// 148: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014a:  R_X86_64_64  .rodata.str1.1
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 161: 4c 89 e2                      movq    %r12, %rdx
// 164: ff d0                         callq   *%rax
// 166: 49 8b 04 24                   movq    (%r12), %rax
// 16a: 85 c0                         testl   %eax, %eax
// 16c: 78 16                         js      0x184 <_JIT_ENTRY+0x184>
// 16e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000170:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 178: ff d0                         callq   *%rax
// 17a: 49 ff 0c 24                   decq    (%r12)
// 17e: 0f 84 d7 00 00 00             je      0x25b <_JIT_ENTRY+0x25b>
// 184: 85 ed                         testl   %ebp, %ebp
// 186: 0f 88 4b 01 00 00             js      0x2d7 <_JIT_ENTRY+0x2d7>
// 18c: 48 8b 3c 24                   movq    (%rsp), %rdi
// 190: 48 85 ff                      testq   %rdi, %rdi
// 193: 0f 84 3e 01 00 00             je      0x2d7 <_JIT_ENTRY+0x2d7>
// 199: 49 83 c7 f8                   addq    $-0x8, %r15
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_NoneStruct
// 1a7: 48 39 c7                      cmpq    %rax, %rdi
// 1aa: 74 10                         je      0x1bc <_JIT_ENTRY+0x1bc>
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  PyErr_SetHandledException
// 1b6: ff d0                         callq   *%rax
// 1b8: 48 8b 04 24                   movq    (%rsp), %rax
// 1bc: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1c1: 49 89 0e                      movq    %rcx, (%r14)
// 1c4: 49 89 07                      movq    %rax, (%r15)
// 1c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c9:  R_X86_64_64  _JIT_OPARG
// 1d1: 0f b7 c9                      movzwl  %cx, %ecx
// 1d4: 4c 8b 64 cb 48                movq    0x48(%rbx,%rcx,8), %r12
// 1d9: 48 89 44 cb 48                movq    %rax, 0x48(%rbx,%rcx,8)
// 1de: 4d 85 e4                      testq   %r12, %r12
// 1e1: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 1e6: 74 50                         je      0x238 <_JIT_ENTRY+0x238>
// 1e8: 49 8b 04 24                   movq    (%r12), %rax
// 1ec: 48 85 c0                      testq   %rax, %rax
// 1ef: 7f 22                         jg      0x213 <_JIT_ENTRY+0x213>
// 1f1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f3:  R_X86_64_64  .rodata.str1.1+0x39
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_NegativeRefcount
// 205: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 20a: 4c 89 e2                      movq    %r12, %rdx
// 20d: ff d0                         callq   *%rax
// 20f: 49 8b 04 24                   movq    (%r12), %rax
// 213: 85 c0                         testl   %eax, %eax
// 215: 78 21                         js      0x238 <_JIT_ENTRY+0x238>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 221: ff d0                         callq   *%rax
// 223: 49 ff 0c 24                   decq    (%r12)
// 227: 75 0f                         jne     0x238 <_JIT_ENTRY+0x238>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_Dealloc
// 233: 4c 89 e7                      movq    %r12, %rdi
// 236: ff d0                         callq   *%rax
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _JIT_CONTINUE
// 242: 48 89 df                      movq    %rbx, %rdi
// 245: 4c 89 fe                      movq    %r15, %rsi
// 248: 4c 89 f2                      movq    %r14, %rdx
// 24b: 48 83 c4 18                   addq    $0x18, %rsp
// 24f: 5b                            popq    %rbx
// 250: 41 5c                         popq    %r12
// 252: 41 5d                         popq    %r13
// 254: 41 5e                         popq    %r14
// 256: 41 5f                         popq    %r15
// 258: 5d                            popq    %rbp
// 259: ff e0                         jmpq    *%rax
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_Dealloc
// 265: 4c 89 e7                      movq    %r12, %rdi
// 268: ff d0                         callq   *%rax
// 26a: 85 ed                         testl   %ebp, %ebp
// 26c: 0f 89 1a ff ff ff             jns     0x18c <_JIT_ENTRY+0x18c>
// 272: eb 63                         jmp     0x2d7 <_JIT_ENTRY+0x2d7>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _Py_Dealloc
// 27e: 4c 89 ef                      movq    %r13, %rdi
// 281: ff d0                         callq   *%rax
// 283: 49 8b 04 24                   movq    (%r12), %rax
// 287: 48 85 c0                      testq   %rax, %rax
// 28a: 0f 8f 93 fe ff ff             jg      0x123 <_JIT_ENTRY+0x123>
// 290: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000292:  R_X86_64_64  .rodata.str1.1
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_NegativeRefcount
// 2a4: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2a9: 4c 89 e2                      movq    %r12, %rdx
// 2ac: ff d0                         callq   *%rax
// 2ae: 49 8b 04 24                   movq    (%r12), %rax
// 2b2: 85 c0                         testl   %eax, %eax
// 2b4: 78 21                         js      0x2d7 <_JIT_ENTRY+0x2d7>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c0: ff d0                         callq   *%rax
// 2c2: 49 ff 0c 24                   decq    (%r12)
// 2c6: 75 0f                         jne     0x2d7 <_JIT_ENTRY+0x2d7>
// 2c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ca:  R_X86_64_64  _Py_Dealloc
// 2d2: 4c 89 e7                      movq    %r12, %rdi
// 2d5: ff d0                         callq   *%rax
// 2d7: 49 29 de                      subq    %rbx, %r14
// 2da: 49 83 c6 b8                   addq    $-0x48, %r14
// 2de: 49 c1 ee 03                   shrq    $0x3, %r14
// 2e2: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2e6: 31 c0                         xorl    %eax, %eax
// 2e8: 48 83 c4 18                   addq    $0x18, %rsp
// 2ec: 5b                            popq    %rbx
// 2ed: 41 5c                         popq    %r12
// 2ef: 41 5d                         popq    %r13
// 2f1: 41 5e                         popq    %r14
// 2f3: 41 5f                         popq    %r15
// 2f5: 5d                            popq    %rbp
// 2f6: c3                            retq
// 2f7: 
static const unsigned char _CHECK_EG_MATCHplus_STORE_FAST_code_body[760] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8d, 0x76, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x5e, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x6d, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x8b, 0x01, 0x00, 0x00, 0xe9, 0xa7, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xd7, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x4b, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x3e, 0x01, 0x00, 0x00, 0x49, 0x83, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x89, 0x0e, 0x49, 0x89, 0x07, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xcb, 0x48, 0x48, 0x89, 0x44, 0xcb, 0x48, 0x4d, 0x85, 0xe4, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x1a, 0xff, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x93, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_STORE_FAST_code_holes[27] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_STORE_FAST_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_STORE_FAST_data_holes[1];

// _CHECK_EG_MATCHplus_STORE_GLOBAL
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_STORE_GLOBAL.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8d 76 f8                   leaq    -0x8(%rsi), %r14
// 1b: 48 8b 6e f0                   movq    -0x10(%rsi), %rbp
// 1f: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 ee                      movq    %r13, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 42                         js      0x7b <_JIT_ENTRY+0x7b>
// 39: 4c 89 74 24 08                movq    %r14, 0x8(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 61: 48 89 ef                      movq    %rbp, %rdi
// 64: 4c 89 ee                      movq    %r13, %rsi
// 67: ff d0                         callq   *%rax
// 69: 41 89 c6                      movl    %eax, %r14d
// 6c: 48 8b 45 00                   movq    (%rbp), %rax
// 70: 48 85 c0                      testq   %rax, %rax
// 73: 7e 1c                         jle     0x91 <_JIT_ENTRY+0x91>
// 75: 85 c0                         testl   %eax, %eax
// 77: 79 3e                         jns     0xb7 <_JIT_ENTRY+0xb7>
// 79: eb 52                         jmp     0xcd <_JIT_ENTRY+0xcd>
// 7b: 48 8b 45 00                   movq    (%rbp), %rax
// 7f: 48 85 c0                      testq   %rax, %rax
// 82: 7e 63                         jle     0xe7 <_JIT_ENTRY+0xe7>
// 84: 85 c0                         testl   %eax, %eax
// 86: 0f 89 81 00 00 00             jns     0x10d <_JIT_ENTRY+0x10d>
// 8c: e9 9d 00 00 00                jmp     0x12e <_JIT_ENTRY+0x12e>
// 91: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000093:  R_X86_64_64  .rodata.str1.1
// 9b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009d:  R_X86_64_64  _Py_NegativeRefcount
// a5: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// aa: 48 89 ea                      movq    %rbp, %rdx
// ad: ff d0                         callq   *%rax
// af: 48 8b 45 00                   movq    (%rbp), %rax
// b3: 85 c0                         testl   %eax, %eax
// b5: 78 16                         js      0xcd <_JIT_ENTRY+0xcd>
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c1: ff d0                         callq   *%rax
// c3: 48 ff 4d 00                   decq    (%rbp)
// c7: 0f 84 c7 00 00 00             je      0x194 <_JIT_ENTRY+0x194>
// cd: 49 8b 45 00                   movq    (%r13), %rax
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 0f 8e d6 00 00 00             jle     0x1b0 <_JIT_ENTRY+0x1b0>
// da: 85 c0                         testl   %eax, %eax
// dc: 0f 89 f4 00 00 00             jns     0x1d6 <_JIT_ENTRY+0x1d6>
// e2: e9 05 01 00 00                jmp     0x1ec <_JIT_ENTRY+0x1ec>
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  .rodata.str1.1
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_NegativeRefcount
// fb: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 100: 48 89 ea                      movq    %rbp, %rdx
// 103: ff d0                         callq   *%rax
// 105: 48 8b 45 00                   movq    (%rbp), %rax
// 109: 85 c0                         testl   %eax, %eax
// 10b: 78 21                         js      0x12e <_JIT_ENTRY+0x12e>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 117: ff d0                         callq   *%rax
// 119: 48 ff 4d 00                   decq    (%rbp)
// 11d: 75 0f                         jne     0x12e <_JIT_ENTRY+0x12e>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_Dealloc
// 129: 48 89 ef                      movq    %rbp, %rdi
// 12c: ff d0                         callq   *%rax
// 12e: 49 8b 45 00                   movq    (%r13), %rax
// 132: 48 85 c0                      testq   %rax, %rax
// 135: 7e 09                         jle     0x140 <_JIT_ENTRY+0x140>
// 137: 85 c0                         testl   %eax, %eax
// 139: 79 2f                         jns     0x16a <_JIT_ENTRY+0x16a>
// 13b: e9 a5 01 00 00                jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 159: 4c 89 ea                      movq    %r13, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 0f 88 7b 01 00 00             js      0x2e5 <_JIT_ENTRY+0x2e5>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 4d 00                   decq    (%r13)
// 17a: 0f 85 65 01 00 00             jne     0x2e5 <_JIT_ENTRY+0x2e5>
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_Dealloc
// 18a: 4c 89 ef                      movq    %r13, %rdi
// 18d: ff d0                         callq   *%rax
// 18f: e9 51 01 00 00                jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_Dealloc
// 19e: 48 89 ef                      movq    %rbp, %rdi
// 1a1: ff d0                         callq   *%rax
// 1a3: 49 8b 45 00                   movq    (%r13), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 0f 8f 2a ff ff ff             jg      0xda <_JIT_ENTRY+0xda>
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_NegativeRefcount
// 1c4: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c9: 4c 89 ea                      movq    %r13, %rdx
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8b 45 00                   movq    (%r13), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 16                         js      0x1ec <_JIT_ENTRY+0x1ec>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 ff 4d 00                   decq    (%r13)
// 1e6: 0f 84 dc 00 00 00             je      0x2c8 <_JIT_ENTRY+0x2c8>
// 1ec: 45 85 f6                      testl   %r14d, %r14d
// 1ef: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1f4: 0f 88 eb 00 00 00             js      0x2e5 <_JIT_ENTRY+0x2e5>
// 1fa: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1fe: 48 85 ff                      testq   %rdi, %rdi
// 201: 0f 84 de 00 00 00             je      0x2e5 <_JIT_ENTRY+0x2e5>
// 207: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000209:  R_X86_64_64  _Py_NoneStruct
// 211: 4c 39 f7                      cmpq    %r14, %rdi
// 214: 74 10                         je      0x226 <_JIT_ENTRY+0x226>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  PyErr_SetHandledException
// 220: ff d0                         callq   *%rax
// 222: 4c 8b 34 24                   movq    (%rsp), %r14
// 226: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 22b: 49 89 47 f0                   movq    %rax, -0x10(%r15)
// 22f: 4d 89 77 f8                   movq    %r14, -0x8(%r15)
// 233: 48 8b 03                      movq    (%rbx), %rax
// 236: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 23a: 48 8b 40 20                   movq    0x20(%rax), %rax
// 23e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000240:  R_X86_64_64  _JIT_OPARG
// 248: 0f b7 c9                      movzwl  %cx, %ecx
// 24b: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  PyDict_SetItem
// 25a: 4c 89 f2                      movq    %r14, %rdx
// 25d: ff d0                         callq   *%rax
// 25f: 89 c5                         movl    %eax, %ebp
// 261: 49 8b 06                      movq    (%r14), %rax
// 264: 48 85 c0                      testq   %rax, %rax
// 267: 7f 21                         jg      0x28a <_JIT_ENTRY+0x28a>
// 269: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026b:  R_X86_64_64  .rodata.str1.1
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_NegativeRefcount
// 27d: be de 03 00 00                movl    $0x3de, %esi            # imm = 0x3DE
// 282: 4c 89 f2                      movq    %r14, %rdx
// 285: ff d0                         callq   *%rax
// 287: 49 8b 06                      movq    (%r14), %rax
// 28a: 85 c0                         testl   %eax, %eax
// 28c: 78 11                         js      0x29f <_JIT_ENTRY+0x29f>
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 298: ff d0                         callq   *%rax
// 29a: 49 ff 0e                      decq    (%r14)
// 29d: 74 69                         je      0x308 <_JIT_ENTRY+0x308>
// 29f: 85 ed                         testl   %ebp, %ebp
// 2a1: 75 45                         jne     0x2e8 <_JIT_ENTRY+0x2e8>
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _JIT_CONTINUE
// 2ad: 48 89 df                      movq    %rbx, %rdi
// 2b0: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 2b5: 4c 89 e2                      movq    %r12, %rdx
// 2b8: 48 83 c4 18                   addq    $0x18, %rsp
// 2bc: 5b                            popq    %rbx
// 2bd: 41 5c                         popq    %r12
// 2bf: 41 5d                         popq    %r13
// 2c1: 41 5e                         popq    %r14
// 2c3: 41 5f                         popq    %r15
// 2c5: 5d                            popq    %rbp
// 2c6: ff e0                         jmpq    *%rax
// 2c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ca:  R_X86_64_64  _Py_Dealloc
// 2d2: 4c 89 ef                      movq    %r13, %rdi
// 2d5: ff d0                         callq   *%rax
// 2d7: 45 85 f6                      testl   %r14d, %r14d
// 2da: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 2df: 0f 89 15 ff ff ff             jns     0x1fa <_JIT_ENTRY+0x1fa>
// 2e5: 4d 89 f7                      movq    %r14, %r15
// 2e8: 49 29 df                      subq    %rbx, %r15
// 2eb: 49 83 c7 b0                   addq    $-0x50, %r15
// 2ef: 49 c1 ef 03                   shrq    $0x3, %r15
// 2f3: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2f7: 31 c0                         xorl    %eax, %eax
// 2f9: 48 83 c4 18                   addq    $0x18, %rsp
// 2fd: 5b                            popq    %rbx
// 2fe: 41 5c                         popq    %r12
// 300: 41 5d                         popq    %r13
// 302: 41 5e                         popq    %r14
// 304: 41 5f                         popq    %r15
// 306: 5d                            popq    %rbp
// 307: c3                            retq
// 308: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030a:  R_X86_64_64  _Py_Dealloc
// 312: 4c 89 f7                      movq    %r14, %rdi
// 315: ff d0                         callq   *%rax
// 317: 85 ed                         testl   %ebp, %ebp
// 319: 75 cd                         jne     0x2e8 <_JIT_ENTRY+0x2e8>
// 31b: eb 86                         jmp     0x2a3 <_JIT_ENTRY+0x2a3>
// 31d: 
static const unsigned char _CHECK_EG_MATCHplus_STORE_GLOBAL_code_body[798] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8d, 0x76, 0xf8, 0x48, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x42, 0x4c, 0x89, 0x74, 0x24, 0x08, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0xa5, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x7b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x65, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0x51, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xdc, 0x00, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x0f, 0x88, 0xeb, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xde, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xf7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x34, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x89, 0x47, 0xf0, 0x4d, 0x89, 0x77, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xde, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x69, 0x85, 0xed, 0x75, 0x45, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x45, 0x85, 0xf6, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x0f, 0x89, 0x15, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb0, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xed, 0x75, 0xcd, 0xeb, 0x86};
static const Hole _CHECK_EG_MATCHplus_STORE_GLOBAL_code_holes[28] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_STORE_GLOBAL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_STORE_GLOBAL_data_holes[1];

// _CHECK_EG_MATCHplus_STORE_NAME
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_STORE_NAME.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8d 76 f8                   leaq    -0x8(%rsi), %r14
// 1b: 48 8b 6e f0                   movq    -0x10(%rsi), %rbp
// 1f: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 ee                      movq    %r13, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 45                         js      0x7e <_JIT_ENTRY+0x7e>
// 39: 4c 89 64 24 10                movq    %r12, 0x10(%rsp)
// 3e: 4d 89 f4                      movq    %r14, %r12
// 41: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 49: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 52: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000054:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 5c: 48 89 e2                      movq    %rsp, %rdx
// 5f: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 64: 48 89 ef                      movq    %rbp, %rdi
// 67: 4c 89 ee                      movq    %r13, %rsi
// 6a: ff d0                         callq   *%rax
// 6c: 41 89 c6                      movl    %eax, %r14d
// 6f: 48 8b 45 00                   movq    (%rbp), %rax
// 73: 48 85 c0                      testq   %rax, %rax
// 76: 7e 18                         jle     0x90 <_JIT_ENTRY+0x90>
// 78: 85 c0                         testl   %eax, %eax
// 7a: 79 3a                         jns     0xb6 <_JIT_ENTRY+0xb6>
// 7c: eb 4a                         jmp     0xc8 <_JIT_ENTRY+0xc8>
// 7e: 48 8b 45 00                   movq    (%rbp), %rax
// 82: 48 85 c0                      testq   %rax, %rax
// 85: 7e 57                         jle     0xde <_JIT_ENTRY+0xde>
// 87: 85 c0                         testl   %eax, %eax
// 89: 79 79                         jns     0x104 <_JIT_ENTRY+0x104>
// 8b: e9 8a 00 00 00                jmp     0x11a <_JIT_ENTRY+0x11a>
// 90: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000092:  R_X86_64_64  .rodata.str1.1
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_NegativeRefcount
// a4: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a9: 48 89 ea                      movq    %rbp, %rdx
// ac: ff d0                         callq   *%rax
// ae: 48 8b 45 00                   movq    (%rbp), %rax
// b2: 85 c0                         testl   %eax, %eax
// b4: 78 12                         js      0xc8 <_JIT_ENTRY+0xc8>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c0: ff d0                         callq   *%rax
// c2: 48 ff 4d 00                   decq    (%rbp)
// c6: 74 6c                         je      0x134 <_JIT_ENTRY+0x134>
// c8: 49 8b 45 00                   movq    (%r13), %rax
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 7e 7b                         jle     0x14c <_JIT_ENTRY+0x14c>
// d1: 85 c0                         testl   %eax, %eax
// d3: 0f 89 99 00 00 00             jns     0x172 <_JIT_ENTRY+0x172>
// d9: e9 aa 00 00 00                jmp     0x188 <_JIT_ENTRY+0x188>
// de: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e0:  R_X86_64_64  .rodata.str1.1
// e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ea:  R_X86_64_64  _Py_NegativeRefcount
// f2: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f7: 48 89 ea                      movq    %rbp, %rdx
// fa: ff d0                         callq   *%rax
// fc: 48 8b 45 00                   movq    (%rbp), %rax
// 100: 85 c0                         testl   %eax, %eax
// 102: 78 16                         js      0x11a <_JIT_ENTRY+0x11a>
// 104: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000106:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10e: ff d0                         callq   *%rax
// 110: 48 ff 4d 00                   decq    (%rbp)
// 114: 0f 84 9c 01 00 00             je      0x2b6 <_JIT_ENTRY+0x2b6>
// 11a: 49 8b 45 00                   movq    (%r13), %rax
// 11e: 48 85 c0                      testq   %rax, %rax
// 121: 0f 8e ab 01 00 00             jle     0x2d2 <_JIT_ENTRY+0x2d2>
// 127: 85 c0                         testl   %eax, %eax
// 129: 0f 89 c9 01 00 00             jns     0x2f8 <_JIT_ENTRY+0x2f8>
// 12f: e9 e5 01 00 00                jmp     0x319 <_JIT_ENTRY+0x319>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_Dealloc
// 13e: 48 89 ef                      movq    %rbp, %rdi
// 141: ff d0                         callq   *%rax
// 143: 49 8b 45 00                   movq    (%r13), %rax
// 147: 48 85 c0                      testq   %rax, %rax
// 14a: 7f 85                         jg      0xd1 <_JIT_ENTRY+0xd1>
// 14c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014e:  R_X86_64_64  .rodata.str1.1
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _Py_NegativeRefcount
// 160: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 165: 4c 89 ea                      movq    %r13, %rdx
// 168: ff d0                         callq   *%rax
// 16a: 49 8b 45 00                   movq    (%r13), %rax
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 16                         js      0x188 <_JIT_ENTRY+0x188>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 4d 00                   decq    (%r13)
// 182: 0f 84 8f 00 00 00             je      0x217 <_JIT_ENTRY+0x217>
// 188: 45 85 f6                      testl   %r14d, %r14d
// 18b: 4d 89 e6                      movq    %r12, %r14
// 18e: 0f 88 85 01 00 00             js      0x319 <_JIT_ENTRY+0x319>
// 194: 48 8b 3c 24                   movq    (%rsp), %rdi
// 198: 48 85 ff                      testq   %rdi, %rdi
// 19b: 0f 84 78 01 00 00             je      0x319 <_JIT_ENTRY+0x319>
// 1a1: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001a3:  R_X86_64_64  _Py_NoneStruct
// 1ab: 4c 39 ef                      cmpq    %r13, %rdi
// 1ae: 74 10                         je      0x1c0 <_JIT_ENTRY+0x1c0>
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  PyErr_SetHandledException
// 1ba: ff d0                         callq   *%rax
// 1bc: 4c 8b 2c 24                   movq    (%rsp), %r13
// 1c0: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1c5: 49 89 47 f0                   movq    %rax, -0x10(%r15)
// 1c9: 4d 89 6f f8                   movq    %r13, -0x8(%r15)
// 1cd: 48 8b 03                      movq    (%rbx), %rax
// 1d0: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 1d4: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1d8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001da:  R_X86_64_64  _JIT_OPARG
// 1e2: 0f b7 c9                      movzwl  %cx, %ecx
// 1e5: 48 8b 4c c8 18                movq    0x18(%rax,%rcx,8), %rcx
// 1ea: 48 85 ff                      testq   %rdi, %rdi
// 1ed: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 1f2: 74 43                         je      0x237 <_JIT_ENTRY+0x237>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  PyDict_Type
// 1fe: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 202: 0f 84 34 01 00 00             je      0x33c <_JIT_ENTRY+0x33c>
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  PyObject_SetItem
// 212: e9 2f 01 00 00                jmp     0x346 <_JIT_ENTRY+0x346>
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_Dealloc
// 221: 4c 89 ef                      movq    %r13, %rdi
// 224: ff d0                         callq   *%rax
// 226: 45 85 f6                      testl   %r14d, %r14d
// 229: 4d 89 e6                      movq    %r12, %r14
// 22c: 0f 89 62 ff ff ff             jns     0x194 <_JIT_ENTRY+0x194>
// 232: e9 e2 00 00 00                jmp     0x319 <_JIT_ENTRY+0x319>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  PyExc_SystemError
// 241: 48 8b 30                      movq    (%rax), %rsi
// 244: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000246:  R_X86_64_64  .rodata.str1.1+0x39
// 24e: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000250:  R_X86_64_64  _PyErr_Format
// 258: 4c 89 e7                      movq    %r12, %rdi
// 25b: 31 c0                         xorl    %eax, %eax
// 25d: 41 ff d0                      callq   *%r8
// 260: 49 8b 45 00                   movq    (%r13), %rax
// 264: 48 85 c0                      testq   %rax, %rax
// 267: 7f 22                         jg      0x28b <_JIT_ENTRY+0x28b>
// 269: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026b:  R_X86_64_64  .rodata.str1.1
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_NegativeRefcount
// 27d: be 4d 03 00 00                movl    $0x34d, %esi            # imm = 0x34D
// 282: 4c 89 ea                      movq    %r13, %rdx
// 285: ff d0                         callq   *%rax
// 287: 49 8b 45 00                   movq    (%r13), %rax
// 28b: 85 c0                         testl   %eax, %eax
// 28d: 0f 88 89 00 00 00             js      0x31c <_JIT_ENTRY+0x31c>
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 29d: ff d0                         callq   *%rax
// 29f: 49 ff 4d 00                   decq    (%r13)
// 2a3: 75 77                         jne     0x31c <_JIT_ENTRY+0x31c>
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _Py_Dealloc
// 2af: 4c 89 ef                      movq    %r13, %rdi
// 2b2: ff d0                         callq   *%rax
// 2b4: eb 66                         jmp     0x31c <_JIT_ENTRY+0x31c>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_Dealloc
// 2c0: 48 89 ef                      movq    %rbp, %rdi
// 2c3: ff d0                         callq   *%rax
// 2c5: 49 8b 45 00                   movq    (%r13), %rax
// 2c9: 48 85 c0                      testq   %rax, %rax
// 2cc: 0f 8f 55 fe ff ff             jg      0x127 <_JIT_ENTRY+0x127>
// 2d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d4:  R_X86_64_64  .rodata.str1.1
// 2dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002de:  R_X86_64_64  _Py_NegativeRefcount
// 2e6: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2eb: 4c 89 ea                      movq    %r13, %rdx
// 2ee: ff d0                         callq   *%rax
// 2f0: 49 8b 45 00                   movq    (%r13), %rax
// 2f4: 85 c0                         testl   %eax, %eax
// 2f6: 78 21                         js      0x319 <_JIT_ENTRY+0x319>
// 2f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 302: ff d0                         callq   *%rax
// 304: 49 ff 4d 00                   decq    (%r13)
// 308: 75 0f                         jne     0x319 <_JIT_ENTRY+0x319>
// 30a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030c:  R_X86_64_64  _Py_Dealloc
// 314: 4c 89 ef                      movq    %r13, %rdi
// 317: ff d0                         callq   *%rax
// 319: 4d 89 f7                      movq    %r14, %r15
// 31c: 49 29 df                      subq    %rbx, %r15
// 31f: 49 83 c7 b0                   addq    $-0x50, %r15
// 323: 49 c1 ef 03                   shrq    $0x3, %r15
// 327: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 32b: 31 c0                         xorl    %eax, %eax
// 32d: 48 83 c4 18                   addq    $0x18, %rsp
// 331: 5b                            popq    %rbx
// 332: 41 5c                         popq    %r12
// 334: 41 5d                         popq    %r13
// 336: 41 5e                         popq    %r14
// 338: 41 5f                         popq    %r15
// 33a: 5d                            popq    %rbp
// 33b: c3                            retq
// 33c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033e:  R_X86_64_64  PyDict_SetItem
// 346: 48 89 ce                      movq    %rcx, %rsi
// 349: 4c 89 ea                      movq    %r13, %rdx
// 34c: ff d0                         callq   *%rax
// 34e: 89 c5                         movl    %eax, %ebp
// 350: 49 8b 45 00                   movq    (%r13), %rax
// 354: 48 85 c0                      testq   %rax, %rax
// 357: 7f 22                         jg      0x37b <_JIT_ENTRY+0x37b>
// 359: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000035b:  R_X86_64_64  .rodata.str1.1
// 363: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000365:  R_X86_64_64  _Py_NegativeRefcount
// 36d: be 54 03 00 00                movl    $0x354, %esi            # imm = 0x354
// 372: 4c 89 ea                      movq    %r13, %rdx
// 375: ff d0                         callq   *%rax
// 377: 49 8b 45 00                   movq    (%r13), %rax
// 37b: 85 c0                         testl   %eax, %eax
// 37d: 78 21                         js      0x3a0 <_JIT_ENTRY+0x3a0>
// 37f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000381:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 389: ff d0                         callq   *%rax
// 38b: 49 ff 4d 00                   decq    (%r13)
// 38f: 75 0f                         jne     0x3a0 <_JIT_ENTRY+0x3a0>
// 391: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000393:  R_X86_64_64  _Py_Dealloc
// 39b: 4c 89 ef                      movq    %r13, %rdi
// 39e: ff d0                         callq   *%rax
// 3a0: 85 ed                         testl   %ebp, %ebp
// 3a2: 0f 85 74 ff ff ff             jne     0x31c <_JIT_ENTRY+0x31c>
// 3a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003aa:  R_X86_64_64  _JIT_CONTINUE
// 3b2: 48 89 df                      movq    %rbx, %rdi
// 3b5: 4c 89 f6                      movq    %r14, %rsi
// 3b8: 4c 89 e2                      movq    %r12, %rdx
// 3bb: 48 83 c4 18                   addq    $0x18, %rsp
// 3bf: 5b                            popq    %rbx
// 3c0: 41 5c                         popq    %r12
// 3c2: 41 5d                         popq    %r13
// 3c4: 41 5e                         popq    %r14
// 3c6: 41 5f                         popq    %r15
// 3c8: 5d                            popq    %rbp
// 3c9: ff e0                         jmpq    *%rax
// 3cb: 
static const unsigned char _CHECK_EG_MATCHplus_STORE_NAME_code_body[972] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8d, 0x76, 0xf8, 0x48, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x45, 0x4c, 0x89, 0x64, 0x24, 0x10, 0x4d, 0x89, 0xf4, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x9c, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xab, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xc9, 0x01, 0x00, 0x00, 0xe9, 0xe5, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x8f, 0x00, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x4d, 0x89, 0xe6, 0x0f, 0x88, 0x85, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x78, 0x01, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xef, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x2c, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x89, 0x47, 0xf0, 0x4d, 0x89, 0x6f, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x4c, 0xc8, 0x18, 0x48, 0x85, 0xff, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x74, 0x43, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x0f, 0x84, 0x34, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x2f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x45, 0x85, 0xf6, 0x4d, 0x89, 0xe6, 0x0f, 0x89, 0x62, 0xff, 0xff, 0xff, 0xe9, 0xe2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4d, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0x89, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x77, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x66, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x55, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb0, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xce, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x85, 0x74, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_STORE_NAME_code_holes[37] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x54, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x35b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x365, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x381, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x393, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3aa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when storing %R\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_STORE_NAME_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_STORE_NAME_data_holes[1];

// _CHECK_EG_MATCHplus_STORE_SLICE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_STORE_SLICE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3c                         js      0x71 <_JIT_ENTRY+0x71>
// 35: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 3d: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 50: 48 89 e2                      movq    %rsp, %rdx
// 53: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 58: 4c 89 ef                      movq    %r13, %rdi
// 5b: 4c 89 e6                      movq    %r12, %rsi
// 5e: ff d0                         callq   *%rax
// 60: 89 c5                         movl    %eax, %ebp
// 62: 49 8b 45 00                   movq    (%r13), %rax
// 66: 48 85 c0                      testq   %rax, %rax
// 69: 7e 18                         jle     0x83 <_JIT_ENTRY+0x83>
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 79 3a                         jns     0xa9 <_JIT_ENTRY+0xa9>
// 6f: eb 4a                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 71: 49 8b 45 00                   movq    (%r13), %rax
// 75: 48 85 c0                      testq   %rax, %rax
// 78: 7e 57                         jle     0xd1 <_JIT_ENTRY+0xd1>
// 7a: 85 c0                         testl   %eax, %eax
// 7c: 79 79                         jns     0xf7 <_JIT_ENTRY+0xf7>
// 7e: e9 8a 00 00 00                jmp     0x10d <_JIT_ENTRY+0x10d>
// 83: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000085:  R_X86_64_64  .rodata.str1.1
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_NegativeRefcount
// 97: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9c: 4c 89 ea                      movq    %r13, %rdx
// 9f: ff d0                         callq   *%rax
// a1: 49 8b 45 00                   movq    (%r13), %rax
// a5: 85 c0                         testl   %eax, %eax
// a7: 78 12                         js      0xbb <_JIT_ENTRY+0xbb>
// a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ab:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b3: ff d0                         callq   *%rax
// b5: 49 ff 4d 00                   decq    (%r13)
// b9: 74 6c                         je      0x127 <_JIT_ENTRY+0x127>
// bb: 49 8b 04 24                   movq    (%r12), %rax
// bf: 48 85 c0                      testq   %rax, %rax
// c2: 7e 7b                         jle     0x13f <_JIT_ENTRY+0x13f>
// c4: 85 c0                         testl   %eax, %eax
// c6: 0f 89 99 00 00 00             jns     0x165 <_JIT_ENTRY+0x165>
// cc: e9 aa 00 00 00                jmp     0x17b <_JIT_ENTRY+0x17b>
// d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d3:  R_X86_64_64  .rodata.str1.1
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_NegativeRefcount
// e5: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ea: 4c 89 ea                      movq    %r13, %rdx
// ed: ff d0                         callq   *%rax
// ef: 49 8b 45 00                   movq    (%r13), %rax
// f3: 85 c0                         testl   %eax, %eax
// f5: 78 16                         js      0x10d <_JIT_ENTRY+0x10d>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 101: ff d0                         callq   *%rax
// 103: 49 ff 4d 00                   decq    (%r13)
// 107: 0f 84 3a 02 00 00             je      0x347 <_JIT_ENTRY+0x347>
// 10d: 49 8b 04 24                   movq    (%r12), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 0f 8e 49 02 00 00             jle     0x363 <_JIT_ENTRY+0x363>
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 0f 89 67 02 00 00             jns     0x389 <_JIT_ENTRY+0x389>
// 122: e9 a5 02 00 00                jmp     0x3cc <_JIT_ENTRY+0x3cc>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_Dealloc
// 131: 4c 89 ef                      movq    %r13, %rdi
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 85                         jg      0xc4 <_JIT_ENTRY+0xc4>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 16                         js      0x17b <_JIT_ENTRY+0x17b>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0c 24                   decq    (%r12)
// 175: 0f 84 9c 01 00 00             je      0x317 <_JIT_ENTRY+0x317>
// 17b: 85 ed                         testl   %ebp, %ebp
// 17d: 0f 88 49 02 00 00             js      0x3cc <_JIT_ENTRY+0x3cc>
// 183: 48 8b 3c 24                   movq    (%rsp), %rdi
// 187: 48 85 ff                      testq   %rdi, %rdi
// 18a: 0f 84 3c 02 00 00             je      0x3cc <_JIT_ENTRY+0x3cc>
// 190: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000192:  R_X86_64_64  _Py_NoneStruct
// 19a: 48 39 f7                      cmpq    %rsi, %rdi
// 19d: 74 10                         je      0x1af <_JIT_ENTRY+0x1af>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  PyErr_SetHandledException
// 1a9: ff d0                         callq   *%rax
// 1ab: 48 8b 34 24                   movq    (%rsp), %rsi
// 1af: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 1b4: 48 89 7b f0                   movq    %rdi, -0x10(%rbx)
// 1b8: 48 89 73 f8                   movq    %rsi, -0x8(%rbx)
// 1bc: 4c 8b 6b e0                   movq    -0x20(%rbx), %r13
// 1c0: 4c 8b 63 e8                   movq    -0x18(%rbx), %r12
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 85 c0                      testq   %rax, %rax
// 1d3: 0f 84 5a 01 00 00             je      0x333 <_JIT_ENTRY+0x333>
// 1d9: 48 89 c5                      movq    %rax, %rbp
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  PyObject_SetItem
// 1e6: 4c 89 e7                      movq    %r12, %rdi
// 1e9: 48 89 ee                      movq    %rbp, %rsi
// 1ec: 4c 89 ea                      movq    %r13, %rdx
// 1ef: ff d0                         callq   *%rax
// 1f1: 89 44 24 0c                   movl    %eax, 0xc(%rsp)
// 1f5: 48 8b 45 00                   movq    (%rbp), %rax
// 1f9: 48 85 c0                      testq   %rax, %rax
// 1fc: 7f 22                         jg      0x220 <_JIT_ENTRY+0x220>
// 1fe: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000200:  R_X86_64_64  .rodata.str1.1
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _Py_NegativeRefcount
// 212: be b2 01 00 00                movl    $0x1b2, %esi            # imm = 0x1B2
// 217: 48 89 ea                      movq    %rbp, %rdx
// 21a: ff d0                         callq   *%rax
// 21c: 48 8b 45 00                   movq    (%rbp), %rax
// 220: 85 c0                         testl   %eax, %eax
// 222: 78 21                         js      0x245 <_JIT_ENTRY+0x245>
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22e: ff d0                         callq   *%rax
// 230: 48 ff 4d 00                   decq    (%rbp)
// 234: 75 0f                         jne     0x245 <_JIT_ENTRY+0x245>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_Dealloc
// 240: 48 89 ef                      movq    %rbp, %rdi
// 243: ff d0                         callq   *%rax
// 245: 83 7c 24 0c 00                cmpl    $0x0, 0xc(%rsp)
// 24a: 40 0f 94 c5                   sete    %bpl
// 24e: 49 8b 45 00                   movq    (%r13), %rax
// 252: 48 85 c0                      testq   %rax, %rax
// 255: 7f 22                         jg      0x279 <_JIT_ENTRY+0x279>
// 257: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000259:  R_X86_64_64  .rodata.str1.1
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_NegativeRefcount
// 26b: be b4 01 00 00                movl    $0x1b4, %esi            # imm = 0x1B4
// 270: 4c 89 ea                      movq    %r13, %rdx
// 273: ff d0                         callq   *%rax
// 275: 49 8b 45 00                   movq    (%r13), %rax
// 279: 85 c0                         testl   %eax, %eax
// 27b: 78 21                         js      0x29e <_JIT_ENTRY+0x29e>
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 287: ff d0                         callq   *%rax
// 289: 49 ff 4d 00                   decq    (%r13)
// 28d: 75 0f                         jne     0x29e <_JIT_ENTRY+0x29e>
// 28f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000291:  R_X86_64_64  _Py_Dealloc
// 299: 4c 89 ef                      movq    %r13, %rdi
// 29c: ff d0                         callq   *%rax
// 29e: 49 8b 04 24                   movq    (%r12), %rax
// 2a2: 48 85 c0                      testq   %rax, %rax
// 2a5: 7f 22                         jg      0x2c9 <_JIT_ENTRY+0x2c9>
// 2a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a9:  R_X86_64_64  .rodata.str1.1
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _Py_NegativeRefcount
// 2bb: be b5 01 00 00                movl    $0x1b5, %esi            # imm = 0x1B5
// 2c0: 4c 89 e2                      movq    %r12, %rdx
// 2c3: ff d0                         callq   *%rax
// 2c5: 49 8b 04 24                   movq    (%r12), %rax
// 2c9: 4c 8d 6b e0                   leaq    -0x20(%rbx), %r13
// 2cd: 85 c0                         testl   %eax, %eax
// 2cf: 78 16                         js      0x2e7 <_JIT_ENTRY+0x2e7>
// 2d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2db: ff d0                         callq   *%rax
// 2dd: 49 ff 0c 24                   decq    (%r12)
// 2e1: 0f 84 c5 00 00 00             je      0x3ac <_JIT_ENTRY+0x3ac>
// 2e7: 40 84 ed                      testb   %bpl, %bpl
// 2ea: 49 0f 45 dd                   cmovneq %r13, %rbx
// 2ee: 0f 84 d4 00 00 00             je      0x3c8 <_JIT_ENTRY+0x3c8>
// 2f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f6:  R_X86_64_64  _JIT_CONTINUE
// 2fe: 4c 89 f7                      movq    %r14, %rdi
// 301: 48 89 de                      movq    %rbx, %rsi
// 304: 4c 89 fa                      movq    %r15, %rdx
// 307: 48 83 c4 18                   addq    $0x18, %rsp
// 30b: 5b                            popq    %rbx
// 30c: 41 5c                         popq    %r12
// 30e: 41 5d                         popq    %r13
// 310: 41 5e                         popq    %r14
// 312: 41 5f                         popq    %r15
// 314: 5d                            popq    %rbp
// 315: ff e0                         jmpq    *%rax
// 317: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000319:  R_X86_64_64  _Py_Dealloc
// 321: 4c 89 e7                      movq    %r12, %rdi
// 324: ff d0                         callq   *%rax
// 326: 85 ed                         testl   %ebp, %ebp
// 328: 0f 89 55 fe ff ff             jns     0x183 <_JIT_ENTRY+0x183>
// 32e: e9 99 00 00 00                jmp     0x3cc <_JIT_ENTRY+0x3cc>
// 333: 31 ed                         xorl    %ebp, %ebp
// 335: 49 8b 45 00                   movq    (%r13), %rax
// 339: 48 85 c0                      testq   %rax, %rax
// 33c: 0f 8f 37 ff ff ff             jg      0x279 <_JIT_ENTRY+0x279>
// 342: e9 10 ff ff ff                jmp     0x257 <_JIT_ENTRY+0x257>
// 347: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000349:  R_X86_64_64  _Py_Dealloc
// 351: 4c 89 ef                      movq    %r13, %rdi
// 354: ff d0                         callq   *%rax
// 356: 49 8b 04 24                   movq    (%r12), %rax
// 35a: 48 85 c0                      testq   %rax, %rax
// 35d: 0f 8f b7 fd ff ff             jg      0x11a <_JIT_ENTRY+0x11a>
// 363: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000365:  R_X86_64_64  .rodata.str1.1
// 36d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036f:  R_X86_64_64  _Py_NegativeRefcount
// 377: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 37c: 4c 89 e2                      movq    %r12, %rdx
// 37f: ff d0                         callq   *%rax
// 381: 49 8b 04 24                   movq    (%r12), %rax
// 385: 85 c0                         testl   %eax, %eax
// 387: 78 43                         js      0x3cc <_JIT_ENTRY+0x3cc>
// 389: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 393: ff d0                         callq   *%rax
// 395: 49 ff 0c 24                   decq    (%r12)
// 399: 75 31                         jne     0x3cc <_JIT_ENTRY+0x3cc>
// 39b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039d:  R_X86_64_64  _Py_Dealloc
// 3a5: 4c 89 e7                      movq    %r12, %rdi
// 3a8: ff d0                         callq   *%rax
// 3aa: eb 20                         jmp     0x3cc <_JIT_ENTRY+0x3cc>
// 3ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003ae:  R_X86_64_64  _Py_Dealloc
// 3b6: 4c 89 e7                      movq    %r12, %rdi
// 3b9: ff d0                         callq   *%rax
// 3bb: 40 84 ed                      testb   %bpl, %bpl
// 3be: 49 0f 45 dd                   cmovneq %r13, %rbx
// 3c2: 0f 85 2c ff ff ff             jne     0x2f4 <_JIT_ENTRY+0x2f4>
// 3c8: 48 83 c3 f0                   addq    $-0x10, %rbx
// 3cc: 4c 29 f3                      subq    %r14, %rbx
// 3cf: 48 83 c3 a8                   addq    $-0x58, %rbx
// 3d3: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3d7: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 3db: 31 c0                         xorl    %eax, %eax
// 3dd: 48 83 c4 18                   addq    $0x18, %rsp
// 3e1: 5b                            popq    %rbx
// 3e2: 41 5c                         popq    %r12
// 3e4: 41 5d                         popq    %r13
// 3e6: 41 5e                         popq    %r14
// 3e8: 41 5f                         popq    %r15
// 3ea: 5d                            popq    %rbp
// 3eb: c3                            retq
// 3ec: 
static const unsigned char _CHECK_EG_MATCHplus_STORE_SLICE_code_body[1005] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x3a, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x49, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x67, 0x02, 0x00, 0x00, 0xe9, 0xa5, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x9c, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x49, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x3c, 0x02, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x34, 0x24, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x89, 0x7b, 0xf0, 0x48, 0x89, 0x73, 0xf8, 0x4c, 0x8b, 0x6b, 0xe0, 0x4c, 0x8b, 0x63, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00, 0x48, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x0c, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb2, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x83, 0x7c, 0x24, 0x0c, 0x00, 0x40, 0x0f, 0x94, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb4, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb5, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x6b, 0xe0, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xc5, 0x00, 0x00, 0x00, 0x40, 0x84, 0xed, 0x49, 0x0f, 0x45, 0xdd, 0x0f, 0x84, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x55, 0xfe, 0xff, 0xff, 0xe9, 0x99, 0x00, 0x00, 0x00, 0x31, 0xed, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x37, 0xff, 0xff, 0xff, 0xe9, 0x10, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xb7, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x43, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x40, 0x84, 0xed, 0x49, 0x0f, 0x45, 0xdd, 0x0f, 0x85, 0x2c, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_STORE_SLICE_code_holes[36] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x291, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x319, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x349, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x365, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x36f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x38b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x39d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x3ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_STORE_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_STORE_SLICE_data_holes[1];

// _CHECK_EG_MATCHplus_STORE_SUBSCR
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_STORE_SUBSCR.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3c                         js      0x71 <_JIT_ENTRY+0x71>
// 35: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 3d: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 50: 48 89 e2                      movq    %rsp, %rdx
// 53: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 58: 4c 89 ef                      movq    %r13, %rdi
// 5b: 4c 89 e6                      movq    %r12, %rsi
// 5e: ff d0                         callq   *%rax
// 60: 89 c5                         movl    %eax, %ebp
// 62: 49 8b 45 00                   movq    (%r13), %rax
// 66: 48 85 c0                      testq   %rax, %rax
// 69: 7e 1c                         jle     0x87 <_JIT_ENTRY+0x87>
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 79 3e                         jns     0xad <_JIT_ENTRY+0xad>
// 6f: eb 52                         jmp     0xc3 <_JIT_ENTRY+0xc3>
// 71: 49 8b 45 00                   movq    (%r13), %rax
// 75: 48 85 c0                      testq   %rax, %rax
// 78: 7e 63                         jle     0xdd <_JIT_ENTRY+0xdd>
// 7a: 85 c0                         testl   %eax, %eax
// 7c: 0f 89 81 00 00 00             jns     0x103 <_JIT_ENTRY+0x103>
// 82: e9 9d 00 00 00                jmp     0x124 <_JIT_ENTRY+0x124>
// 87: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000089:  R_X86_64_64  .rodata.str1.1
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_NegativeRefcount
// 9b: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a0: 4c 89 ea                      movq    %r13, %rdx
// a3: ff d0                         callq   *%rax
// a5: 49 8b 45 00                   movq    (%r13), %rax
// a9: 85 c0                         testl   %eax, %eax
// ab: 78 16                         js      0xc3 <_JIT_ENTRY+0xc3>
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b7: ff d0                         callq   *%rax
// b9: 49 ff 4d 00                   decq    (%r13)
// bd: 0f 84 c7 00 00 00             je      0x18a <_JIT_ENTRY+0x18a>
// c3: 49 8b 04 24                   movq    (%r12), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 0f 8e d6 00 00 00             jle     0x1a6 <_JIT_ENTRY+0x1a6>
// d0: 85 c0                         testl   %eax, %eax
// d2: 0f 89 f4 00 00 00             jns     0x1cc <_JIT_ENTRY+0x1cc>
// d8: e9 05 01 00 00                jmp     0x1e2 <_JIT_ENTRY+0x1e2>
// dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000df:  R_X86_64_64  .rodata.str1.1
// e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e9:  R_X86_64_64  _Py_NegativeRefcount
// f1: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f6: 4c 89 ea                      movq    %r13, %rdx
// f9: ff d0                         callq   *%rax
// fb: 49 8b 45 00                   movq    (%r13), %rax
// ff: 85 c0                         testl   %eax, %eax
// 101: 78 21                         js      0x124 <_JIT_ENTRY+0x124>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10d: ff d0                         callq   *%rax
// 10f: 49 ff 4d 00                   decq    (%r13)
// 113: 75 0f                         jne     0x124 <_JIT_ENTRY+0x124>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_Dealloc
// 11f: 4c 89 ef                      movq    %r13, %rdi
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 48 85 c0                      testq   %rax, %rax
// 12b: 7e 09                         jle     0x136 <_JIT_ENTRY+0x136>
// 12d: 85 c0                         testl   %eax, %eax
// 12f: 79 2f                         jns     0x160 <_JIT_ENTRY+0x160>
// 131: e9 17 02 00 00                jmp     0x34d <_JIT_ENTRY+0x34d>
// 136: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000138:  R_X86_64_64  .rodata.str1.1
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_NegativeRefcount
// 14a: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 14f: 4c 89 e2                      movq    %r12, %rdx
// 152: ff d0                         callq   *%rax
// 154: 49 8b 04 24                   movq    (%r12), %rax
// 158: 85 c0                         testl   %eax, %eax
// 15a: 0f 88 ed 01 00 00             js      0x34d <_JIT_ENTRY+0x34d>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16a: ff d0                         callq   *%rax
// 16c: 49 ff 0c 24                   decq    (%r12)
// 170: 0f 85 d7 01 00 00             jne     0x34d <_JIT_ENTRY+0x34d>
// 176: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000178:  R_X86_64_64  _Py_Dealloc
// 180: 4c 89 e7                      movq    %r12, %rdi
// 183: ff d0                         callq   *%rax
// 185: e9 c3 01 00 00                jmp     0x34d <_JIT_ENTRY+0x34d>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_Dealloc
// 194: 4c 89 ef                      movq    %r13, %rdi
// 197: ff d0                         callq   *%rax
// 199: 49 8b 04 24                   movq    (%r12), %rax
// 19d: 48 85 c0                      testq   %rax, %rax
// 1a0: 0f 8f 2a ff ff ff             jg      0xd0 <_JIT_ENTRY+0xd0>
// 1a6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a8:  R_X86_64_64  .rodata.str1.1
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _Py_NegativeRefcount
// 1ba: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1bf: 4c 89 e2                      movq    %r12, %rdx
// 1c2: ff d0                         callq   *%rax
// 1c4: 49 8b 04 24                   movq    (%r12), %rax
// 1c8: 85 c0                         testl   %eax, %eax
// 1ca: 78 16                         js      0x1e2 <_JIT_ENTRY+0x1e2>
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d6: ff d0                         callq   *%rax
// 1d8: 49 ff 0c 24                   decq    (%r12)
// 1dc: 0f 84 54 01 00 00             je      0x336 <_JIT_ENTRY+0x336>
// 1e2: 85 ed                         testl   %ebp, %ebp
// 1e4: 0f 88 63 01 00 00             js      0x34d <_JIT_ENTRY+0x34d>
// 1ea: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1ee: 48 85 ff                      testq   %rdi, %rdi
// 1f1: 0f 84 56 01 00 00             je      0x34d <_JIT_ENTRY+0x34d>
// 1f7: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001f9:  R_X86_64_64  _Py_NoneStruct
// 201: 4c 39 e7                      cmpq    %r12, %rdi
// 204: 74 10                         je      0x216 <_JIT_ENTRY+0x216>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  PyErr_SetHandledException
// 210: ff d0                         callq   *%rax
// 212: 4c 8b 24 24                   movq    (%rsp), %r12
// 216: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 21b: 4c 89 6b f0                   movq    %r13, -0x10(%rbx)
// 21f: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 223: 48 8b 6b e8                   movq    -0x18(%rbx), %rbp
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  PyObject_SetItem
// 231: 4c 89 ef                      movq    %r13, %rdi
// 234: 4c 89 e6                      movq    %r12, %rsi
// 237: 48 89 ea                      movq    %rbp, %rdx
// 23a: ff d0                         callq   *%rax
// 23c: 89 44 24 0c                   movl    %eax, 0xc(%rsp)
// 240: 48 8b 45 00                   movq    (%rbp), %rax
// 244: 48 85 c0                      testq   %rax, %rax
// 247: 7f 22                         jg      0x26b <_JIT_ENTRY+0x26b>
// 249: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024b:  R_X86_64_64  .rodata.str1.1
// 253: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000255:  R_X86_64_64  _Py_NegativeRefcount
// 25d: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 262: 48 89 ea                      movq    %rbp, %rdx
// 265: ff d0                         callq   *%rax
// 267: 48 8b 45 00                   movq    (%rbp), %rax
// 26b: 85 c0                         testl   %eax, %eax
// 26d: 78 21                         js      0x290 <_JIT_ENTRY+0x290>
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 279: ff d0                         callq   *%rax
// 27b: 48 ff 4d 00                   decq    (%rbp)
// 27f: 75 0f                         jne     0x290 <_JIT_ENTRY+0x290>
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  _Py_Dealloc
// 28b: 48 89 ef                      movq    %rbp, %rdi
// 28e: ff d0                         callq   *%rax
// 290: 49 8b 45 00                   movq    (%r13), %rax
// 294: 48 85 c0                      testq   %rax, %rax
// 297: 7f 22                         jg      0x2bb <_JIT_ENTRY+0x2bb>
// 299: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029b:  R_X86_64_64  .rodata.str1.1
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _Py_NegativeRefcount
// 2ad: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// 2b2: 4c 89 ea                      movq    %r13, %rdx
// 2b5: ff d0                         callq   *%rax
// 2b7: 49 8b 45 00                   movq    (%r13), %rax
// 2bb: 85 c0                         testl   %eax, %eax
// 2bd: 78 21                         js      0x2e0 <_JIT_ENTRY+0x2e0>
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c9: ff d0                         callq   *%rax
// 2cb: 49 ff 4d 00                   decq    (%r13)
// 2cf: 75 0f                         jne     0x2e0 <_JIT_ENTRY+0x2e0>
// 2d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d3:  R_X86_64_64  _Py_Dealloc
// 2db: 4c 89 ef                      movq    %r13, %rdi
// 2de: ff d0                         callq   *%rax
// 2e0: 49 8b 04 24                   movq    (%r12), %rax
// 2e4: 48 85 c0                      testq   %rax, %rax
// 2e7: 7f 22                         jg      0x30b <_JIT_ENTRY+0x30b>
// 2e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002eb:  R_X86_64_64  .rodata.str1.1
// 2f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f5:  R_X86_64_64  _Py_NegativeRefcount
// 2fd: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 302: 4c 89 e2                      movq    %r12, %rdx
// 305: ff d0                         callq   *%rax
// 307: 49 8b 04 24                   movq    (%r12), %rax
// 30b: 4c 8d 6b e8                   leaq    -0x18(%rbx), %r13
// 30f: 85 c0                         testl   %eax, %eax
// 311: 78 12                         js      0x325 <_JIT_ENTRY+0x325>
// 313: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000315:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 31d: ff d0                         callq   *%rax
// 31f: 49 ff 0c 24                   decq    (%r12)
// 323: 74 48                         je      0x36d <_JIT_ENTRY+0x36d>
// 325: 83 7c 24 0c 00                cmpl    $0x0, 0xc(%rsp)
// 32a: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 32e: 74 57                         je      0x387 <_JIT_ENTRY+0x387>
// 330: 48 83 c3 f8                   addq    $-0x8, %rbx
// 334: eb 17                         jmp     0x34d <_JIT_ENTRY+0x34d>
// 336: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000338:  R_X86_64_64  _Py_Dealloc
// 340: 4c 89 e7                      movq    %r12, %rdi
// 343: ff d0                         callq   *%rax
// 345: 85 ed                         testl   %ebp, %ebp
// 347: 0f 89 9d fe ff ff             jns     0x1ea <_JIT_ENTRY+0x1ea>
// 34d: 4c 29 f3                      subq    %r14, %rbx
// 350: 48 83 c3 a8                   addq    $-0x58, %rbx
// 354: 48 c1 eb 03                   shrq    $0x3, %rbx
// 358: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 35c: 31 c0                         xorl    %eax, %eax
// 35e: 48 83 c4 18                   addq    $0x18, %rsp
// 362: 5b                            popq    %rbx
// 363: 41 5c                         popq    %r12
// 365: 41 5d                         popq    %r13
// 367: 41 5e                         popq    %r14
// 369: 41 5f                         popq    %r15
// 36b: 5d                            popq    %rbp
// 36c: c3                            retq
// 36d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000036f:  R_X86_64_64  _Py_Dealloc
// 377: 4c 89 e7                      movq    %r12, %rdi
// 37a: ff d0                         callq   *%rax
// 37c: 83 7c 24 0c 00                cmpl    $0x0, 0xc(%rsp)
// 381: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 385: 75 a9                         jne     0x330 <_JIT_ENTRY+0x330>
// 387: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000389:  R_X86_64_64  _JIT_CONTINUE
// 391: 4c 89 f7                      movq    %r14, %rdi
// 394: 48 89 de                      movq    %rbx, %rsi
// 397: 4c 89 fa                      movq    %r15, %rdx
// 39a: 48 83 c4 18                   addq    $0x18, %rsp
// 39e: 5b                            popq    %rbx
// 39f: 41 5c                         popq    %r12
// 3a1: 41 5d                         popq    %r13
// 3a3: 41 5e                         popq    %r14
// 3a5: 41 5f                         popq    %r15
// 3a7: 5d                            popq    %rbp
// 3a8: ff e0                         jmpq    *%rax
// 3aa: 
static const unsigned char _CHECK_EG_MATCHplus_STORE_SUBSCR_code_body[939] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3c, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0x17, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xed, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xd7, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xc3, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x54, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x63, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x56, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x4c, 0x89, 0x6b, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0x8b, 0x6b, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x0c, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x6b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x48, 0x83, 0x7c, 0x24, 0x0c, 0x00, 0x49, 0x0f, 0x44, 0xdd, 0x74, 0x57, 0x48, 0x83, 0xc3, 0xf8, 0xeb, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x9d, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0x7c, 0x24, 0x0c, 0x00, 0x49, 0x0f, 0x44, 0xdd, 0x75, 0xa9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_STORE_SUBSCR_code_holes[35] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x89, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x315, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x338, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x36f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x389, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_STORE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_STORE_SUBSCR_data_holes[1];

// _CHECK_EG_MATCHplus_STORE_SUBSCR_DICT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_STORE_SUBSCR_DICT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 86 01 00 00             je      0x296 <_JIT_ENTRY+0x296>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 95 01 00 00             jle     0x2b2 <_JIT_ENTRY+0x2b2>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 b3 01 00 00             jns     0x2d8 <_JIT_ENTRY+0x2d8>
// 125: e9 cf 01 00 00                jmp     0x2f9 <_JIT_ENTRY+0x2f9>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 81 00 00 00             je      0x1ff <_JIT_ENTRY+0x1ff>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 73 01 00 00             js      0x2f9 <_JIT_ENTRY+0x2f9>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 65 01 00 00             je      0x2f9 <_JIT_ENTRY+0x2f9>
// 194: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 48 39 f7                      cmpq    %rsi, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 48 8b 74 24 08                movq    0x8(%rsp), %rsi
// 1b4: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 1b9: 4c 89 63 f0                   movq    %r12, -0x10(%rbx)
// 1bd: 48 89 73 f8                   movq    %rsi, -0x8(%rbx)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  PyDict_Type
// 1cb: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1d0: 74 49                         je      0x21b <_JIT_ENTRY+0x21b>
// 1d2: 4c 29 f3                      subq    %r14, %rbx
// 1d5: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1d9: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1dd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1e1: 49 8b 06                      movq    (%r14), %rax
// 1e4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e6:  R_X86_64_64  _JIT_TARGET
// 1ee: 89 c9                         movl    %ecx, %ecx
// 1f0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1fa: e9 0b 01 00 00                jmp     0x30a <_JIT_ENTRY+0x30a>
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_Dealloc
// 209: 4c 89 e7                      movq    %r12, %rdi
// 20c: ff d0                         callq   *%rax
// 20e: 85 ed                         testl   %ebp, %ebp
// 210: 0f 89 70 ff ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 216: e9 de 00 00 00                jmp     0x2f9 <_JIT_ENTRY+0x2f9>
// 21b: 4c 8d 6b e8                   leaq    -0x18(%rbx), %r13
// 21f: 49 8b 55 00                   movq    (%r13), %rdx
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _PyDict_SetItem_Take2
// 22d: 4c 89 e7                      movq    %r12, %rdi
// 230: ff d0                         callq   *%rax
// 232: 89 c5                         movl    %eax, %ebp
// 234: 49 8b 04 24                   movq    (%r12), %rax
// 238: 48 85 c0                      testq   %rax, %rax
// 23b: 7f 22                         jg      0x25f <_JIT_ENTRY+0x25f>
// 23d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023f:  R_X86_64_64  .rodata.str1.1
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _Py_NegativeRefcount
// 251: be 63 02 00 00                movl    $0x263, %esi            # imm = 0x263
// 256: 4c 89 e2                      movq    %r12, %rdx
// 259: ff d0                         callq   *%rax
// 25b: 49 8b 04 24                   movq    (%r12), %rax
// 25f: 85 c0                         testl   %eax, %eax
// 261: 78 21                         js      0x284 <_JIT_ENTRY+0x284>
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26d: ff d0                         callq   *%rax
// 26f: 49 ff 0c 24                   decq    (%r12)
// 273: 75 0f                         jne     0x284 <_JIT_ENTRY+0x284>
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _Py_Dealloc
// 27f: 4c 89 e7                      movq    %r12, %rdi
// 282: ff d0                         callq   *%rax
// 284: 85 ed                         testl   %ebp, %ebp
// 286: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 28a: 0f 84 89 00 00 00             je      0x319 <_JIT_ENTRY+0x319>
// 290: 48 83 c3 f8                   addq    $-0x8, %rbx
// 294: eb 63                         jmp     0x2f9 <_JIT_ENTRY+0x2f9>
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _Py_Dealloc
// 2a0: 4c 89 ef                      movq    %r13, %rdi
// 2a3: ff d0                         callq   *%rax
// 2a5: 49 8b 04 24                   movq    (%r12), %rax
// 2a9: 48 85 c0                      testq   %rax, %rax
// 2ac: 0f 8f 6b fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 2b2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b4:  R_X86_64_64  .rodata.str1.1
// 2bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002be:  R_X86_64_64  _Py_NegativeRefcount
// 2c6: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2cb: 4c 89 e2                      movq    %r12, %rdx
// 2ce: ff d0                         callq   *%rax
// 2d0: 49 8b 04 24                   movq    (%r12), %rax
// 2d4: 85 c0                         testl   %eax, %eax
// 2d6: 78 21                         js      0x2f9 <_JIT_ENTRY+0x2f9>
// 2d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002da:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e2: ff d0                         callq   *%rax
// 2e4: 49 ff 0c 24                   decq    (%r12)
// 2e8: 75 0f                         jne     0x2f9 <_JIT_ENTRY+0x2f9>
// 2ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ec:  R_X86_64_64  _Py_Dealloc
// 2f4: 4c 89 e7                      movq    %r12, %rdi
// 2f7: ff d0                         callq   *%rax
// 2f9: 4c 29 f3                      subq    %r14, %rbx
// 2fc: 48 83 c3 a8                   addq    $-0x58, %rbx
// 300: 48 c1 eb 03                   shrq    $0x3, %rbx
// 304: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 308: 31 c0                         xorl    %eax, %eax
// 30a: 48 83 c4 18                   addq    $0x18, %rsp
// 30e: 5b                            popq    %rbx
// 30f: 41 5c                         popq    %r12
// 311: 41 5d                         popq    %r13
// 313: 41 5e                         popq    %r14
// 315: 41 5f                         popq    %r15
// 317: 5d                            popq    %rbp
// 318: c3                            retq
// 319: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031b:  R_X86_64_64  _JIT_CONTINUE
// 323: 4c 89 f7                      movq    %r14, %rdi
// 326: 48 89 de                      movq    %rbx, %rsi
// 329: 4c 89 fa                      movq    %r15, %rdx
// 32c: 48 83 c4 18                   addq    $0x18, %rsp
// 330: 5b                            popq    %rbx
// 331: 41 5c                         popq    %r12
// 333: 41 5d                         popq    %r13
// 335: 41 5e                         popq    %r14
// 337: 41 5f                         popq    %r15
// 339: 5d                            popq    %rbp
// 33a: ff e0                         jmpq    *%rax
// 33c: 
static const unsigned char _CHECK_EG_MATCHplus_STORE_SUBSCR_DICT_code_body[829] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x86, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x95, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xb3, 0x01, 0x00, 0x00, 0xe9, 0xcf, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x81, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x73, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x65, 0x01, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xf7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x74, 0x24, 0x08, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x4c, 0x89, 0x63, 0xf0, 0x48, 0x89, 0x73, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x49, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x0b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x70, 0xff, 0xff, 0xff, 0xe9, 0xde, 0x00, 0x00, 0x00, 0x4c, 0x8d, 0x6b, 0xe8, 0x49, 0x8b, 0x55, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x63, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x0f, 0x84, 0x89, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc3, 0xf8, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x6b, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_STORE_SUBSCR_DICT_code_holes[29] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_STORE_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_STORE_SUBSCR_DICT_data_holes[1];

// _CHECK_EG_MATCHplus_STORE_SUBSCR_LIST_INT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_STORE_SUBSCR_LIST_INT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 41 02 00 00             je      0x351 <_JIT_ENTRY+0x351>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 50 02 00 00             jle     0x36d <_JIT_ENTRY+0x36d>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 6e 02 00 00             jns     0x393 <_JIT_ENTRY+0x393>
// 125: e9 8a 02 00 00                jmp     0x3b4 <_JIT_ENTRY+0x3b4>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 ba 01 00 00             je      0x338 <_JIT_ENTRY+0x338>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 2e 02 00 00             js      0x3b4 <_JIT_ENTRY+0x3b4>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 20 02 00 00             je      0x3b4 <_JIT_ENTRY+0x3b4>
// 194: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 4c 39 ef                      cmpq    %r13, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 1b4: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 1b9: 4c 89 63 f0                   movq    %r12, -0x10(%rbx)
// 1bd: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  PyLong_Type
// 1cb: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1cf: 0f 85 36 01 00 00             jne     0x30b <_JIT_ENTRY+0x30b>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  PyList_Type
// 1df: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1e4: 0f 85 21 01 00 00             jne     0x30b <_JIT_ENTRY+0x30b>
// 1ea: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 1ef: 0f 87 16 01 00 00             ja      0x30b <_JIT_ENTRY+0x30b>
// 1f5: 41 8b 45 18                   movl    0x18(%r13), %eax
// 1f9: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 1fe: 0f 8e 07 01 00 00             jle     0x30b <_JIT_ENTRY+0x30b>
// 204: 48 8b 4b e8                   movq    -0x18(%rbx), %rcx
// 208: 49 8b 54 24 18                movq    0x18(%r12), %rdx
// 20d: 48 8b 2c c2                   movq    (%rdx,%rax,8), %rbp
// 211: 48 89 0c c2                   movq    %rcx, (%rdx,%rax,8)
// 215: 48 8b 45 00                   movq    (%rbp), %rax
// 219: 48 85 c0                      testq   %rax, %rax
// 21c: 7f 22                         jg      0x240 <_JIT_ENTRY+0x240>
// 21e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000220:  R_X86_64_64  .rodata.str1.1
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _Py_NegativeRefcount
// 232: be 52 02 00 00                movl    $0x252, %esi            # imm = 0x252
// 237: 48 89 ea                      movq    %rbp, %rdx
// 23a: ff d0                         callq   *%rax
// 23c: 48 8b 45 00                   movq    (%rbp), %rax
// 240: 85 c0                         testl   %eax, %eax
// 242: 78 21                         js      0x265 <_JIT_ENTRY+0x265>
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24e: ff d0                         callq   *%rax
// 250: 48 ff 4d 00                   decq    (%rbp)
// 254: 75 0f                         jne     0x265 <_JIT_ENTRY+0x265>
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _Py_Dealloc
// 260: 48 89 ef                      movq    %rbp, %rdi
// 263: ff d0                         callq   *%rax
// 265: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 26a: 75 28                         jne     0x294 <_JIT_ENTRY+0x294>
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  PyInterpreterState_Get
// 276: ff d0                         callq   *%rax
// 278: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 27f: 49 ff 4d 00                   decq    (%r13)
// 283: 75 0f                         jne     0x294 <_JIT_ENTRY+0x294>
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  PyObject_Free
// 28f: 4c 89 ef                      movq    %r13, %rdi
// 292: ff d0                         callq   *%rax
// 294: 49 8b 04 24                   movq    (%r12), %rax
// 298: 48 85 c0                      testq   %rax, %rax
// 29b: 7f 22                         jg      0x2bf <_JIT_ENTRY+0x2bf>
// 29d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029f:  R_X86_64_64  .rodata.str1.1
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _Py_NegativeRefcount
// 2b1: be 54 02 00 00                movl    $0x254, %esi            # imm = 0x254
// 2b6: 4c 89 e2                      movq    %r12, %rdx
// 2b9: ff d0                         callq   *%rax
// 2bb: 49 8b 04 24                   movq    (%r12), %rax
// 2bf: 48 83 c3 e8                   addq    $-0x18, %rbx
// 2c3: 85 c0                         testl   %eax, %eax
// 2c5: 78 21                         js      0x2e8 <_JIT_ENTRY+0x2e8>
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d1: ff d0                         callq   *%rax
// 2d3: 49 ff 0c 24                   decq    (%r12)
// 2d7: 75 0f                         jne     0x2e8 <_JIT_ENTRY+0x2e8>
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _Py_Dealloc
// 2e3: 4c 89 e7                      movq    %r12, %rdi
// 2e6: ff d0                         callq   *%rax
// 2e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ea:  R_X86_64_64  _JIT_CONTINUE
// 2f2: 4c 89 f7                      movq    %r14, %rdi
// 2f5: 48 89 de                      movq    %rbx, %rsi
// 2f8: 4c 89 fa                      movq    %r15, %rdx
// 2fb: 48 83 c4 18                   addq    $0x18, %rsp
// 2ff: 5b                            popq    %rbx
// 300: 41 5c                         popq    %r12
// 302: 41 5d                         popq    %r13
// 304: 41 5e                         popq    %r14
// 306: 41 5f                         popq    %r15
// 308: 5d                            popq    %rbp
// 309: ff e0                         jmpq    *%rax
// 30b: 4c 29 f3                      subq    %r14, %rbx
// 30e: 48 83 c3 b8                   addq    $-0x48, %rbx
// 312: 48 c1 eb 03                   shrq    $0x3, %rbx
// 316: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 31a: 49 8b 06                      movq    (%r14), %rax
// 31d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000031f:  R_X86_64_64  _JIT_TARGET
// 327: 89 c9                         movl    %ecx, %ecx
// 329: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 32d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 333: e9 91 00 00 00                jmp     0x3c9 <_JIT_ENTRY+0x3c9>
// 338: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033a:  R_X86_64_64  _Py_Dealloc
// 342: 4c 89 e7                      movq    %r12, %rdi
// 345: ff d0                         callq   *%rax
// 347: 85 ed                         testl   %ebp, %ebp
// 349: 0f 89 37 fe ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 34f: eb 63                         jmp     0x3b4 <_JIT_ENTRY+0x3b4>
// 351: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000353:  R_X86_64_64  _Py_Dealloc
// 35b: 4c 89 ef                      movq    %r13, %rdi
// 35e: ff d0                         callq   *%rax
// 360: 49 8b 04 24                   movq    (%r12), %rax
// 364: 48 85 c0                      testq   %rax, %rax
// 367: 0f 8f b0 fd ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 36d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000036f:  R_X86_64_64  .rodata.str1.1
// 377: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000379:  R_X86_64_64  _Py_NegativeRefcount
// 381: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 386: 4c 89 e2                      movq    %r12, %rdx
// 389: ff d0                         callq   *%rax
// 38b: 49 8b 04 24                   movq    (%r12), %rax
// 38f: 85 c0                         testl   %eax, %eax
// 391: 78 21                         js      0x3b4 <_JIT_ENTRY+0x3b4>
// 393: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000395:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 39d: ff d0                         callq   *%rax
// 39f: 49 ff 0c 24                   decq    (%r12)
// 3a3: 75 0f                         jne     0x3b4 <_JIT_ENTRY+0x3b4>
// 3a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003a7:  R_X86_64_64  _Py_Dealloc
// 3af: 4c 89 e7                      movq    %r12, %rdi
// 3b2: ff d0                         callq   *%rax
// 3b4: 48 83 c3 f0                   addq    $-0x10, %rbx
// 3b8: 4c 29 f3                      subq    %r14, %rbx
// 3bb: 48 83 c3 b8                   addq    $-0x48, %rbx
// 3bf: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3c3: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 3c7: 31 c0                         xorl    %eax, %eax
// 3c9: 48 83 c4 18                   addq    $0x18, %rsp
// 3cd: 5b                            popq    %rbx
// 3ce: 41 5c                         popq    %r12
// 3d0: 41 5d                         popq    %r13
// 3d2: 41 5e                         popq    %r14
// 3d4: 41 5f                         popq    %r15
// 3d6: 5d                            popq    %rbp
// 3d7: c3                            retq
// 3d8: 
static const unsigned char _CHECK_EG_MATCHplus_STORE_SUBSCR_LIST_INT_code_body[985] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x41, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x50, 0x02, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x6e, 0x02, 0x00, 0x00, 0xe9, 0x8a, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xba, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x2e, 0x02, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x20, 0x02, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xef, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x4c, 0x89, 0x63, 0xf0, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x36, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x21, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x16, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x07, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4b, 0xe8, 0x49, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x8b, 0x2c, 0xc2, 0x48, 0x89, 0x0c, 0xc2, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x52, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x91, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x37, 0xfe, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xb0, 0xfd, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_STORE_SUBSCR_LIST_INT_code_holes[35] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ea, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x33a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x353, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x36f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x379, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x395, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_STORE_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_STORE_SUBSCR_LIST_INT_data_holes[1];

// _CHECK_EG_MATCHplus_SWAP
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_SWAP.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 0e 01 00 00             je      0x21d <_JIT_ENTRY+0x21d>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 1d 01 00 00             jle     0x238 <_JIT_ENTRY+0x238>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 3a 01 00 00             jns     0x25d <_JIT_ENTRY+0x25d>
// 123: e9 55 01 00 00                jmp     0x27d <_JIT_ENTRY+0x27d>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 8b 00 00 00             je      0x204 <_JIT_ENTRY+0x204>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 fc 00 00 00             js      0x27d <_JIT_ENTRY+0x27d>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 ee 00 00 00             je      0x27d <_JIT_ENTRY+0x27d>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001be:  R_X86_64_64  _JIT_OPARG
// 1c6: 0f b7 c9                      movzwl  %cx, %ecx
// 1c9: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1cd: 48 89 da                      movq    %rbx, %rdx
// 1d0: 48 29 ca                      subq    %rcx, %rdx
// 1d3: 48 f7 d9                      negq    %rcx
// 1d6: 48 8b 12                      movq    (%rdx), %rdx
// 1d9: 48 89 04 0b                   movq    %rax, (%rbx,%rcx)
// 1dd: 48 89 53 f8                   movq    %rdx, -0x8(%rbx)
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _JIT_CONTINUE
// 1eb: 4c 89 f7                      movq    %r14, %rdi
// 1ee: 48 89 de                      movq    %rbx, %rsi
// 1f1: 4c 89 e2                      movq    %r12, %rdx
// 1f4: 48 83 c4 18                   addq    $0x18, %rsp
// 1f8: 5b                            popq    %rbx
// 1f9: 41 5c                         popq    %r12
// 1fb: 41 5d                         popq    %r13
// 1fd: 41 5e                         popq    %r14
// 1ff: 41 5f                         popq    %r15
// 201: 5d                            popq    %rbp
// 202: ff e0                         jmpq    *%rax
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _Py_Dealloc
// 20e: 4c 89 ff                      movq    %r15, %rdi
// 211: ff d0                         callq   *%rax
// 213: 85 ed                         testl   %ebp, %ebp
// 215: 0f 89 66 ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 21b: eb 60                         jmp     0x27d <_JIT_ENTRY+0x27d>
// 21d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021f:  R_X86_64_64  _Py_Dealloc
// 227: 4c 89 ef                      movq    %r13, %rdi
// 22a: ff d0                         callq   *%rax
// 22c: 49 8b 07                      movq    (%r15), %rax
// 22f: 48 85 c0                      testq   %rax, %rax
// 232: 0f 8f e3 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 238: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023a:  R_X86_64_64  .rodata.str1.1
// 242: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000244:  R_X86_64_64  _Py_NegativeRefcount
// 24c: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 251: 4c 89 fa                      movq    %r15, %rdx
// 254: ff d0                         callq   *%rax
// 256: 49 8b 07                      movq    (%r15), %rax
// 259: 85 c0                         testl   %eax, %eax
// 25b: 78 20                         js      0x27d <_JIT_ENTRY+0x27d>
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 267: ff d0                         callq   *%rax
// 269: 49 ff 0f                      decq    (%r15)
// 26c: 75 0f                         jne     0x27d <_JIT_ENTRY+0x27d>
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_Dealloc
// 278: 4c 89 ff                      movq    %r15, %rdi
// 27b: ff d0                         callq   *%rax
// 27d: 48 83 c3 f0                   addq    $-0x10, %rbx
// 281: 4c 29 f3                      subq    %r14, %rbx
// 284: 48 83 c3 b8                   addq    $-0x48, %rbx
// 288: 48 c1 eb 03                   shrq    $0x3, %rbx
// 28c: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 290: 31 c0                         xorl    %eax, %eax
// 292: 48 83 c4 18                   addq    $0x18, %rsp
// 296: 5b                            popq    %rbx
// 297: 41 5c                         popq    %r12
// 299: 41 5d                         popq    %r13
// 29b: 41 5e                         popq    %r14
// 29d: 41 5f                         popq    %r15
// 29f: 5d                            popq    %rbp
// 2a0: c3                            retq
// 2a1: 
static const unsigned char _CHECK_EG_MATCHplus_SWAP_code_body[674] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x0e, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x1d, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x3a, 0x01, 0x00, 0x00, 0xe9, 0x55, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xfc, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xee, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0x89, 0xda, 0x48, 0x29, 0xca, 0x48, 0xf7, 0xd9, 0x48, 0x8b, 0x12, 0x48, 0x89, 0x04, 0x0b, 0x48, 0x89, 0x53, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x66, 0xff, 0xff, 0xff, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xe3, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_SWAP_code_holes[23] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_SWAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_SWAP_data_holes[1];

// _CHECK_EG_MATCHplus_TO_BOOL
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_TO_BOOL.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 63                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 81 00 00 00             jns     0x106 <_JIT_ENTRY+0x106>
// 85: e9 9d 00 00 00                jmp     0x127 <_JIT_ENTRY+0x127>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c7 00 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// c6: 49 8b 04 24                   movq    (%r12), %rax
// ca: 48 85 c0                      testq   %rax, %rax
// cd: 0f 8e d6 00 00 00             jle     0x1a9 <_JIT_ENTRY+0x1a9>
// d3: 85 c0                         testl   %eax, %eax
// d5: 0f 89 f4 00 00 00             jns     0x1cf <_JIT_ENTRY+0x1cf>
// db: e9 05 01 00 00                jmp     0x1e5 <_JIT_ENTRY+0x1e5>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f9: 4c 89 ea                      movq    %r13, %rdx
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 21                         js      0x127 <_JIT_ENTRY+0x127>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 4d 00                   decq    (%r13)
// 116: 75 0f                         jne     0x127 <_JIT_ENTRY+0x127>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_Dealloc
// 122: 4c 89 ef                      movq    %r13, %rdi
// 125: ff d0                         callq   *%rax
// 127: 49 8b 04 24                   movq    (%r12), %rax
// 12b: 48 85 c0                      testq   %rax, %rax
// 12e: 7e 09                         jle     0x139 <_JIT_ENTRY+0x139>
// 130: 85 c0                         testl   %eax, %eax
// 132: 79 2f                         jns     0x163 <_JIT_ENTRY+0x163>
// 134: e9 9b 01 00 00                jmp     0x2d4 <_JIT_ENTRY+0x2d4>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_NegativeRefcount
// 14d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 152: 4c 89 e2                      movq    %r12, %rdx
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 71 01 00 00             js      0x2d4 <_JIT_ENTRY+0x2d4>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 5b 01 00 00             jne     0x2d4 <_JIT_ENTRY+0x2d4>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: 4c 89 e7                      movq    %r12, %rdi
// 186: ff d0                         callq   *%rax
// 188: e9 47 01 00 00                jmp     0x2d4 <_JIT_ENTRY+0x2d4>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: 4c 89 ef                      movq    %r13, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 49 8b 04 24                   movq    (%r12), %rax
// 1a0: 48 85 c0                      testq   %rax, %rax
// 1a3: 0f 8f 2a ff ff ff             jg      0xd3 <_JIT_ENTRY+0xd3>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 49 8b 04 24                   movq    (%r12), %rax
// 1cb: 85 c0                         testl   %eax, %eax
// 1cd: 78 16                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 49 ff 0c 24                   decq    (%r12)
// 1df: 0f 84 d8 00 00 00             je      0x2bd <_JIT_ENTRY+0x2bd>
// 1e5: 85 ed                         testl   %ebp, %ebp
// 1e7: 0f 88 e7 00 00 00             js      0x2d4 <_JIT_ENTRY+0x2d4>
// 1ed: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1f2: 48 85 ff                      testq   %rdi, %rdi
// 1f5: 0f 84 d9 00 00 00             je      0x2d4 <_JIT_ENTRY+0x2d4>
// 1fb: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001fd:  R_X86_64_64  _Py_NoneStruct
// 205: 4c 39 e7                      cmpq    %r12, %rdi
// 208: 74 11                         je      0x21b <_JIT_ENTRY+0x21b>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyErr_SetHandledException
// 214: ff d0                         callq   *%rax
// 216: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 21b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 220: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 224: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  PyObject_IsTrue
// 232: 4c 89 e7                      movq    %r12, %rdi
// 235: ff d0                         callq   *%rax
// 237: 89 c5                         movl    %eax, %ebp
// 239: 49 8b 04 24                   movq    (%r12), %rax
// 23d: 48 85 c0                      testq   %rax, %rax
// 240: 7f 22                         jg      0x264 <_JIT_ENTRY+0x264>
// 242: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000244:  R_X86_64_64  .rodata.str1.1
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _Py_NegativeRefcount
// 256: be 86 00 00 00                movl    $0x86, %esi
// 25b: 4c 89 e2                      movq    %r12, %rdx
// 25e: ff d0                         callq   *%rax
// 260: 49 8b 04 24                   movq    (%r12), %rax
// 264: 85 c0                         testl   %eax, %eax
// 266: 78 12                         js      0x27a <_JIT_ENTRY+0x27a>
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 272: ff d0                         callq   *%rax
// 274: 49 ff 0c 24                   decq    (%r12)
// 278: 74 7e                         je      0x2f8 <_JIT_ENTRY+0x2f8>
// 27a: 85 ed                         testl   %ebp, %ebp
// 27c: 78 5a                         js      0x2d8 <_JIT_ENTRY+0x2d8>
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _Py_FalseStruct
// 288: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000028a:  R_X86_64_64  _Py_TrueStruct
// 292: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 296: 48 89 4b f8                   movq    %rcx, -0x8(%rbx)
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _JIT_CONTINUE
// 2a4: 4c 89 f7                      movq    %r14, %rdi
// 2a7: 48 89 de                      movq    %rbx, %rsi
// 2aa: 4c 89 fa                      movq    %r15, %rdx
// 2ad: 48 83 c4 18                   addq    $0x18, %rsp
// 2b1: 5b                            popq    %rbx
// 2b2: 41 5c                         popq    %r12
// 2b4: 41 5d                         popq    %r13
// 2b6: 41 5e                         popq    %r14
// 2b8: 41 5f                         popq    %r15
// 2ba: 5d                            popq    %rbp
// 2bb: ff e0                         jmpq    *%rax
// 2bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bf:  R_X86_64_64  _Py_Dealloc
// 2c7: 4c 89 e7                      movq    %r12, %rdi
// 2ca: ff d0                         callq   *%rax
// 2cc: 85 ed                         testl   %ebp, %ebp
// 2ce: 0f 89 19 ff ff ff             jns     0x1ed <_JIT_ENTRY+0x1ed>
// 2d4: 48 83 c3 f8                   addq    $-0x8, %rbx
// 2d8: 4c 29 f3                      subq    %r14, %rbx
// 2db: 48 83 c3 b0                   addq    $-0x50, %rbx
// 2df: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2e3: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2e7: 31 c0                         xorl    %eax, %eax
// 2e9: 48 83 c4 18                   addq    $0x18, %rsp
// 2ed: 5b                            popq    %rbx
// 2ee: 41 5c                         popq    %r12
// 2f0: 41 5d                         popq    %r13
// 2f2: 41 5e                         popq    %r14
// 2f4: 41 5f                         popq    %r15
// 2f6: 5d                            popq    %rbp
// 2f7: c3                            retq
// 2f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fa:  R_X86_64_64  _Py_Dealloc
// 302: 4c 89 e7                      movq    %r12, %rdi
// 305: ff d0                         callq   *%rax
// 307: 85 ed                         testl   %ebp, %ebp
// 309: 0f 89 6f ff ff ff             jns     0x27e <_JIT_ENTRY+0x27e>
// 30f: eb c7                         jmp     0x2d8 <_JIT_ENTRY+0x2d8>
// 311: 
static const unsigned char _CHECK_EG_MATCHplus_TO_BOOL_code_body[786] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0x9b, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x71, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x5b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x47, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xd8, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xe7, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xd9, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x7e, 0x85, 0xed, 0x78, 0x5a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x4b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x19, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x6f, 0xff, 0xff, 0xff, 0xeb, 0xc7};
static const Hole _CHECK_EG_MATCHplus_TO_BOOL_code_holes[29] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_TO_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_TO_BOOL_data_holes[1];

// _CHECK_EG_MATCHplus_TO_BOOL_ALWAYS_TRUE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_TO_BOOL_ALWAYS_TRUE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 93 01 00 00             je      0x2a3 <_JIT_ENTRY+0x2a3>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e a2 01 00 00             jle     0x2bf <_JIT_ENTRY+0x2bf>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 c0 01 00 00             jns     0x2e5 <_JIT_ENTRY+0x2e5>
// 125: e9 dc 01 00 00                jmp     0x306 <_JIT_ENTRY+0x306>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 0c 01 00 00             je      0x28a <_JIT_ENTRY+0x28a>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 80 01 00 00             js      0x306 <_JIT_ENTRY+0x306>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 72 01 00 00             je      0x306 <_JIT_ENTRY+0x306>
// 194: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 4c 39 e7                      cmpq    %r12, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 1b4: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b9: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 1bd: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 1c1: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 1c6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c8:  R_X86_64_64  _JIT_OPERAND
// 1d0: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 1d6: 0f 85 81 00 00 00             jne     0x25d <_JIT_ENTRY+0x25d>
// 1dc: 49 8b 04 24                   movq    (%r12), %rax
// 1e0: 48 85 c0                      testq   %rax, %rax
// 1e3: 7f 22                         jg      0x207 <_JIT_ENTRY+0x207>
// 1e5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e7:  R_X86_64_64  .rodata.str1.1
// 1ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f1:  R_X86_64_64  _Py_NegativeRefcount
// 1f9: be db 00 00 00                movl    $0xdb, %esi
// 1fe: 4c 89 e2                      movq    %r12, %rdx
// 201: ff d0                         callq   *%rax
// 203: 49 8b 04 24                   movq    (%r12), %rax
// 207: 85 c0                         testl   %eax, %eax
// 209: 78 21                         js      0x22c <_JIT_ENTRY+0x22c>
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 215: ff d0                         callq   *%rax
// 217: 49 ff 0c 24                   decq    (%r12)
// 21b: 75 0f                         jne     0x22c <_JIT_ENTRY+0x22c>
// 21d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021f:  R_X86_64_64  _Py_Dealloc
// 227: 4c 89 e7                      movq    %r12, %rdi
// 22a: ff d0                         callq   *%rax
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _Py_TrueStruct
// 236: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _JIT_CONTINUE
// 244: 4c 89 f7                      movq    %r14, %rdi
// 247: 48 89 de                      movq    %rbx, %rsi
// 24a: 4c 89 fa                      movq    %r15, %rdx
// 24d: 48 83 c4 18                   addq    $0x18, %rsp
// 251: 5b                            popq    %rbx
// 252: 41 5c                         popq    %r12
// 254: 41 5d                         popq    %r13
// 256: 41 5e                         popq    %r14
// 258: 41 5f                         popq    %r15
// 25a: 5d                            popq    %rbp
// 25b: ff e0                         jmpq    *%rax
// 25d: 4c 29 f3                      subq    %r14, %rbx
// 260: 48 83 c3 b8                   addq    $-0x48, %rbx
// 264: 48 c1 eb 03                   shrq    $0x3, %rbx
// 268: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 26c: 49 8b 06                      movq    (%r14), %rax
// 26f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000271:  R_X86_64_64  _JIT_TARGET
// 279: 89 c9                         movl    %ecx, %ecx
// 27b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 27f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 285: e9 91 00 00 00                jmp     0x31b <_JIT_ENTRY+0x31b>
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _Py_Dealloc
// 294: 4c 89 e7                      movq    %r12, %rdi
// 297: ff d0                         callq   *%rax
// 299: 85 ed                         testl   %ebp, %ebp
// 29b: 0f 89 e5 fe ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 2a1: eb 63                         jmp     0x306 <_JIT_ENTRY+0x306>
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _Py_Dealloc
// 2ad: 4c 89 ef                      movq    %r13, %rdi
// 2b0: ff d0                         callq   *%rax
// 2b2: 49 8b 04 24                   movq    (%r12), %rax
// 2b6: 48 85 c0                      testq   %rax, %rax
// 2b9: 0f 8f 5e fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 2bf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c1:  R_X86_64_64  .rodata.str1.1
// 2c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cb:  R_X86_64_64  _Py_NegativeRefcount
// 2d3: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2d8: 4c 89 e2                      movq    %r12, %rdx
// 2db: ff d0                         callq   *%rax
// 2dd: 49 8b 04 24                   movq    (%r12), %rax
// 2e1: 85 c0                         testl   %eax, %eax
// 2e3: 78 21                         js      0x306 <_JIT_ENTRY+0x306>
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ef: ff d0                         callq   *%rax
// 2f1: 49 ff 0c 24                   decq    (%r12)
// 2f5: 75 0f                         jne     0x306 <_JIT_ENTRY+0x306>
// 2f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f9:  R_X86_64_64  _Py_Dealloc
// 301: 4c 89 e7                      movq    %r12, %rdi
// 304: ff d0                         callq   *%rax
// 306: 48 83 c3 f0                   addq    $-0x10, %rbx
// 30a: 4c 29 f3                      subq    %r14, %rbx
// 30d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 311: 48 c1 eb 03                   shrq    $0x3, %rbx
// 315: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 319: 31 c0                         xorl    %eax, %eax
// 31b: 48 83 c4 18                   addq    $0x18, %rsp
// 31f: 5b                            popq    %rbx
// 320: 41 5c                         popq    %r12
// 322: 41 5d                         popq    %r13
// 324: 41 5e                         popq    %r14
// 326: 41 5f                         popq    %r15
// 328: 5d                            popq    %rbp
// 329: c3                            retq
// 32a: 
static const unsigned char _CHECK_EG_MATCHplus_TO_BOOL_ALWAYS_TRUE_code_body[811] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x93, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xa2, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xc0, 0x01, 0x00, 0x00, 0xe9, 0xdc, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x0c, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x80, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x72, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x0f, 0x85, 0x81, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x91, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0xe5, 0xfe, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x5e, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_TO_BOOL_ALWAYS_TRUE_code_holes[29] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_TO_BOOL_ALWAYS_TRUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_TO_BOOL_ALWAYS_TRUE_data_holes[1];

// _CHECK_EG_MATCHplus_TO_BOOL_BOOL
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_TO_BOOL_BOOL.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a6 00 00 00                jmp     0x179 <_JIT_ENTRY+0x179>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 29 01 00 00             je      0x238 <_JIT_ENTRY+0x238>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 38 01 00 00             jle     0x253 <_JIT_ENTRY+0x253>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 55 01 00 00             jns     0x278 <_JIT_ENTRY+0x278>
// 123: e9 70 01 00 00                jmp     0x298 <_JIT_ENTRY+0x298>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 15                         js      0x179 <_JIT_ENTRY+0x179>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 0f 84 80 00 00 00             je      0x1f9 <_JIT_ENTRY+0x1f9>
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 0f 88 17 01 00 00             js      0x298 <_JIT_ENTRY+0x298>
// 181: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 186: 48 85 ff                      testq   %rdi, %rdi
// 189: 0f 84 09 01 00 00             je      0x298 <_JIT_ENTRY+0x298>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_NoneStruct
// 199: 48 39 c7                      cmpq    %rax, %rdi
// 19c: 74 11                         je      0x1af <_JIT_ENTRY+0x1af>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  PyErr_SetHandledException
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1b8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001be:  R_X86_64_64  PyBool_Type
// 1c6: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1ca: 74 49                         je      0x215 <_JIT_ENTRY+0x215>
// 1cc: 4c 29 f3                      subq    %r14, %rbx
// 1cf: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1d3: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1d7: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1db: 49 8b 06                      movq    (%r14), %rax
// 1de: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e0:  R_X86_64_64  _JIT_TARGET
// 1e8: 89 c9                         movl    %ecx, %ecx
// 1ea: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1ee: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f4: e9 b4 00 00 00                jmp     0x2ad <_JIT_ENTRY+0x2ad>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_Dealloc
// 203: 4c 89 ff                      movq    %r15, %rdi
// 206: ff d0                         callq   *%rax
// 208: 85 ed                         testl   %ebp, %ebp
// 20a: 0f 89 71 ff ff ff             jns     0x181 <_JIT_ENTRY+0x181>
// 210: e9 83 00 00 00                jmp     0x298 <_JIT_ENTRY+0x298>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _JIT_CONTINUE
// 21f: 4c 89 f7                      movq    %r14, %rdi
// 222: 48 89 de                      movq    %rbx, %rsi
// 225: 4c 89 e2                      movq    %r12, %rdx
// 228: 48 83 c4 18                   addq    $0x18, %rsp
// 22c: 5b                            popq    %rbx
// 22d: 41 5c                         popq    %r12
// 22f: 41 5d                         popq    %r13
// 231: 41 5e                         popq    %r14
// 233: 41 5f                         popq    %r15
// 235: 5d                            popq    %rbp
// 236: ff e0                         jmpq    *%rax
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _Py_Dealloc
// 242: 4c 89 ef                      movq    %r13, %rdi
// 245: ff d0                         callq   *%rax
// 247: 49 8b 07                      movq    (%r15), %rax
// 24a: 48 85 c0                      testq   %rax, %rax
// 24d: 0f 8f c8 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 253: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000255:  R_X86_64_64  .rodata.str1.1
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _Py_NegativeRefcount
// 267: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 26c: 4c 89 fa                      movq    %r15, %rdx
// 26f: ff d0                         callq   *%rax
// 271: 49 8b 07                      movq    (%r15), %rax
// 274: 85 c0                         testl   %eax, %eax
// 276: 78 20                         js      0x298 <_JIT_ENTRY+0x298>
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 282: ff d0                         callq   *%rax
// 284: 49 ff 0f                      decq    (%r15)
// 287: 75 0f                         jne     0x298 <_JIT_ENTRY+0x298>
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _Py_Dealloc
// 293: 4c 89 ff                      movq    %r15, %rdi
// 296: ff d0                         callq   *%rax
// 298: 48 83 c3 f0                   addq    $-0x10, %rbx
// 29c: 4c 29 f3                      subq    %r14, %rbx
// 29f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2a3: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2a7: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2ab: 31 c0                         xorl    %eax, %eax
// 2ad: 48 83 c4 18                   addq    $0x18, %rsp
// 2b1: 5b                            popq    %rbx
// 2b2: 41 5c                         popq    %r12
// 2b4: 41 5d                         popq    %r13
// 2b6: 41 5e                         popq    %r14
// 2b8: 41 5f                         popq    %r15
// 2ba: 5d                            popq    %rbp
// 2bb: c3                            retq
// 2bc: 
static const unsigned char _CHECK_EG_MATCHplus_TO_BOOL_BOOL_code_body[701] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x29, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x38, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x55, 0x01, 0x00, 0x00, 0xe9, 0x70, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x15, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x17, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x09, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x49, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xb4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x71, 0xff, 0xff, 0xff, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xc8, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_TO_BOOL_BOOL_code_holes[24] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x255, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_TO_BOOL_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_TO_BOOL_BOOL_data_holes[1];

// _CHECK_EG_MATCHplus_TO_BOOL_INT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_TO_BOOL_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 2b 01 00 00             je      0x23b <_JIT_ENTRY+0x23b>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 3a 01 00 00             jle     0x257 <_JIT_ENTRY+0x257>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 58 01 00 00             jns     0x27d <_JIT_ENTRY+0x27d>
// 125: e9 74 01 00 00                jmp     0x29e <_JIT_ENTRY+0x29e>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 81 00 00 00             je      0x1ff <_JIT_ENTRY+0x1ff>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 18 01 00 00             js      0x29e <_JIT_ENTRY+0x29e>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 0a 01 00 00             je      0x29e <_JIT_ENTRY+0x29e>
// 194: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 4c 39 e7                      cmpq    %r12, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 1b4: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b9: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 1bd: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  PyLong_Type
// 1cb: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1d0: 74 49                         je      0x21b <_JIT_ENTRY+0x21b>
// 1d2: 4c 29 f3                      subq    %r14, %rbx
// 1d5: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1d9: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1dd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1e1: 49 8b 06                      movq    (%r14), %rax
// 1e4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e6:  R_X86_64_64  _JIT_TARGET
// 1ee: 89 c9                         movl    %ecx, %ecx
// 1f0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1fa: e9 b4 00 00 00                jmp     0x2b3 <_JIT_ENTRY+0x2b3>
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_Dealloc
// 209: 4c 89 e7                      movq    %r12, %rdi
// 20c: ff d0                         callq   *%rax
// 20e: 85 ed                         testl   %ebp, %ebp
// 210: 0f 89 70 ff ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 216: e9 83 00 00 00                jmp     0x29e <_JIT_ENTRY+0x29e>
// 21b: 41 8b 44 24 10                movl    0x10(%r12), %eax
// 220: 83 e0 03                      andl    $0x3, %eax
// 223: 83 f8 01                      cmpl    $0x1, %eax
// 226: 0f 85 96 00 00 00             jne     0x2c2 <_JIT_ENTRY+0x2c2>
// 22c: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000022e:  R_X86_64_64  _Py_FalseStruct
// 236: e9 e1 00 00 00                jmp     0x31c <_JIT_ENTRY+0x31c>
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_Dealloc
// 245: 4c 89 ef                      movq    %r13, %rdi
// 248: ff d0                         callq   *%rax
// 24a: 49 8b 04 24                   movq    (%r12), %rax
// 24e: 48 85 c0                      testq   %rax, %rax
// 251: 0f 8f c6 fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 257: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000259:  R_X86_64_64  .rodata.str1.1
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_NegativeRefcount
// 26b: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 270: 4c 89 e2                      movq    %r12, %rdx
// 273: ff d0                         callq   *%rax
// 275: 49 8b 04 24                   movq    (%r12), %rax
// 279: 85 c0                         testl   %eax, %eax
// 27b: 78 21                         js      0x29e <_JIT_ENTRY+0x29e>
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 287: ff d0                         callq   *%rax
// 289: 49 ff 0c 24                   decq    (%r12)
// 28d: 75 0f                         jne     0x29e <_JIT_ENTRY+0x29e>
// 28f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000291:  R_X86_64_64  _Py_Dealloc
// 299: 4c 89 e7                      movq    %r12, %rdi
// 29c: ff d0                         callq   *%rax
// 29e: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2a2: 4c 29 f3                      subq    %r14, %rbx
// 2a5: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2a9: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2ad: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2b1: 31 c0                         xorl    %eax, %eax
// 2b3: 48 83 c4 18                   addq    $0x18, %rsp
// 2b7: 5b                            popq    %rbx
// 2b8: 41 5c                         popq    %r12
// 2ba: 41 5d                         popq    %r13
// 2bc: 41 5e                         popq    %r14
// 2be: 41 5f                         popq    %r15
// 2c0: 5d                            popq    %rbp
// 2c1: c3                            retq
// 2c2: 49 8b 04 24                   movq    (%r12), %rax
// 2c6: 48 85 c0                      testq   %rax, %rax
// 2c9: 7f 22                         jg      0x2ed <_JIT_ENTRY+0x2ed>
// 2cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002cd:  R_X86_64_64  .rodata.str1.1
// 2d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d7:  R_X86_64_64  _Py_NegativeRefcount
// 2df: be a0 00 00 00                movl    $0xa0, %esi
// 2e4: 4c 89 e2                      movq    %r12, %rdx
// 2e7: ff d0                         callq   *%rax
// 2e9: 49 8b 04 24                   movq    (%r12), %rax
// 2ed: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000002ef:  R_X86_64_64  _Py_TrueStruct
// 2f7: 85 c0                         testl   %eax, %eax
// 2f9: 78 21                         js      0x31c <_JIT_ENTRY+0x31c>
// 2fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 305: ff d0                         callq   *%rax
// 307: 49 ff 0c 24                   decq    (%r12)
// 30b: 75 0f                         jne     0x31c <_JIT_ENTRY+0x31c>
// 30d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030f:  R_X86_64_64  _Py_Dealloc
// 317: 4c 89 e7                      movq    %r12, %rdi
// 31a: ff d0                         callq   *%rax
// 31c: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 320: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000322:  R_X86_64_64  _JIT_CONTINUE
// 32a: 4c 89 f7                      movq    %r14, %rdi
// 32d: 48 89 de                      movq    %rbx, %rsi
// 330: 4c 89 fa                      movq    %r15, %rdx
// 333: 48 83 c4 18                   addq    $0x18, %rsp
// 337: 5b                            popq    %rbx
// 338: 41 5c                         popq    %r12
// 33a: 41 5d                         popq    %r13
// 33c: 41 5e                         popq    %r14
// 33e: 41 5f                         popq    %r15
// 340: 5d                            popq    %rbp
// 341: ff e0                         jmpq    *%rax
// 343: 
static const unsigned char _CHECK_EG_MATCHplus_TO_BOOL_INT_code_body[836] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x2b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x3a, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x58, 0x01, 0x00, 0x00, 0xe9, 0x74, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x81, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x18, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x0a, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x49, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xb4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x70, 0xff, 0xff, 0xff, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x44, 0x24, 0x10, 0x83, 0xe0, 0x03, 0x83, 0xf8, 0x01, 0x0f, 0x85, 0x96, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0xe1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xc6, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_TO_BOOL_INT_code_holes[30] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x291, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x30f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_TO_BOOL_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_TO_BOOL_INT_data_holes[1];

// _CHECK_EG_MATCHplus_TO_BOOL_LIST
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_TO_BOOL_LIST.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 a2 01 00 00             je      0x2b2 <_JIT_ENTRY+0x2b2>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e b1 01 00 00             jle     0x2ce <_JIT_ENTRY+0x2ce>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 cf 01 00 00             jns     0x2f4 <_JIT_ENTRY+0x2f4>
// 125: e9 eb 01 00 00                jmp     0x315 <_JIT_ENTRY+0x315>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 81 00 00 00             je      0x1ff <_JIT_ENTRY+0x1ff>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 8f 01 00 00             js      0x315 <_JIT_ENTRY+0x315>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 81 01 00 00             je      0x315 <_JIT_ENTRY+0x315>
// 194: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 4c 39 e7                      cmpq    %r12, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 1b4: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b9: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 1bd: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  PyList_Type
// 1cb: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1d0: 74 49                         je      0x21b <_JIT_ENTRY+0x21b>
// 1d2: 4c 29 f3                      subq    %r14, %rbx
// 1d5: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1d9: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1dd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1e1: 49 8b 06                      movq    (%r14), %rax
// 1e4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e6:  R_X86_64_64  _JIT_TARGET
// 1ee: 89 c9                         movl    %ecx, %ecx
// 1f0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1fa: e9 2b 01 00 00                jmp     0x32a <_JIT_ENTRY+0x32a>
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_Dealloc
// 209: 4c 89 e7                      movq    %r12, %rdi
// 20c: ff d0                         callq   *%rax
// 20e: 85 ed                         testl   %ebp, %ebp
// 210: 0f 89 70 ff ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 216: e9 fa 00 00 00                jmp     0x315 <_JIT_ENTRY+0x315>
// 21b: 49 8b 04 24                   movq    (%r12), %rax
// 21f: 4d 8b 6c 24 10                movq    0x10(%r12), %r13
// 224: 48 85 c0                      testq   %rax, %rax
// 227: 7f 22                         jg      0x24b <_JIT_ENTRY+0x24b>
// 229: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022b:  R_X86_64_64  .rodata.str1.1
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_NegativeRefcount
// 23d: be ae 00 00 00                movl    $0xae, %esi
// 242: 4c 89 e2                      movq    %r12, %rdx
// 245: ff d0                         callq   *%rax
// 247: 49 8b 04 24                   movq    (%r12), %rax
// 24b: 85 c0                         testl   %eax, %eax
// 24d: 78 21                         js      0x270 <_JIT_ENTRY+0x270>
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 259: ff d0                         callq   *%rax
// 25b: 49 ff 0c 24                   decq    (%r12)
// 25f: 75 0f                         jne     0x270 <_JIT_ENTRY+0x270>
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_Dealloc
// 26b: 4c 89 e7                      movq    %r12, %rdi
// 26e: ff d0                         callq   *%rax
// 270: 4d 85 ed                      testq   %r13, %r13
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_FalseStruct
// 27d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027f:  R_X86_64_64  _Py_TrueStruct
// 287: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 28b: 48 89 4b f8                   movq    %rcx, -0x8(%rbx)
// 28f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000291:  R_X86_64_64  _JIT_CONTINUE
// 299: 4c 89 f7                      movq    %r14, %rdi
// 29c: 48 89 de                      movq    %rbx, %rsi
// 29f: 4c 89 fa                      movq    %r15, %rdx
// 2a2: 48 83 c4 18                   addq    $0x18, %rsp
// 2a6: 5b                            popq    %rbx
// 2a7: 41 5c                         popq    %r12
// 2a9: 41 5d                         popq    %r13
// 2ab: 41 5e                         popq    %r14
// 2ad: 41 5f                         popq    %r15
// 2af: 5d                            popq    %rbp
// 2b0: ff e0                         jmpq    *%rax
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_Dealloc
// 2bc: 4c 89 ef                      movq    %r13, %rdi
// 2bf: ff d0                         callq   *%rax
// 2c1: 49 8b 04 24                   movq    (%r12), %rax
// 2c5: 48 85 c0                      testq   %rax, %rax
// 2c8: 0f 8f 4f fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 2ce: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d0:  R_X86_64_64  .rodata.str1.1
// 2d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002da:  R_X86_64_64  _Py_NegativeRefcount
// 2e2: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2e7: 4c 89 e2                      movq    %r12, %rdx
// 2ea: ff d0                         callq   *%rax
// 2ec: 49 8b 04 24                   movq    (%r12), %rax
// 2f0: 85 c0                         testl   %eax, %eax
// 2f2: 78 21                         js      0x315 <_JIT_ENTRY+0x315>
// 2f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2fe: ff d0                         callq   *%rax
// 300: 49 ff 0c 24                   decq    (%r12)
// 304: 75 0f                         jne     0x315 <_JIT_ENTRY+0x315>
// 306: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000308:  R_X86_64_64  _Py_Dealloc
// 310: 4c 89 e7                      movq    %r12, %rdi
// 313: ff d0                         callq   *%rax
// 315: 48 83 c3 f0                   addq    $-0x10, %rbx
// 319: 4c 29 f3                      subq    %r14, %rbx
// 31c: 48 83 c3 b8                   addq    $-0x48, %rbx
// 320: 48 c1 eb 03                   shrq    $0x3, %rbx
// 324: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 328: 31 c0                         xorl    %eax, %eax
// 32a: 48 83 c4 18                   addq    $0x18, %rsp
// 32e: 5b                            popq    %rbx
// 32f: 41 5c                         popq    %r12
// 331: 41 5d                         popq    %r13
// 333: 41 5e                         popq    %r14
// 335: 41 5f                         popq    %r15
// 337: 5d                            popq    %rbp
// 338: c3                            retq
// 339: 
static const unsigned char _CHECK_EG_MATCHplus_TO_BOOL_LIST_code_body[826] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xa2, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xb1, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xcf, 0x01, 0x00, 0x00, 0xe9, 0xeb, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x81, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x8f, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x81, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x49, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x2b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x70, 0xff, 0xff, 0xff, 0xe9, 0xfa, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x4b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x4f, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_TO_BOOL_LIST_code_holes[30] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x291, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x308, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_TO_BOOL_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_TO_BOOL_LIST_data_holes[1];

// _CHECK_EG_MATCHplus_TO_BOOL_NONE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_TO_BOOL_NONE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fd                      movq    %rdi, %rbp
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 76 f8                   movq    -0x8(%rsi), %r14
// 1f: 48 8d 5e f0                   leaq    -0x10(%rsi), %rbx
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 f6                      movq    %r14, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 f6                      movq    %r14, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 56                         jle     0xd9 <_JIT_ENTRY+0xd9>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 78                         jns     0xff <_JIT_ENTRY+0xff>
// 87: e9 89 00 00 00                jmp     0x115 <_JIT_ENTRY+0x115>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 4c 89 ea                      movq    %r13, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 45 00                   movq    (%r13), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 4d 00                   decq    (%r13)
// c2: 74 6a                         je      0x12e <_JIT_ENTRY+0x12e>
// c4: 49 8b 06                      movq    (%r14), %rax
// c7: 48 85 c0                      testq   %rax, %rax
// ca: 7e 79                         jle     0x145 <_JIT_ENTRY+0x145>
// cc: 85 c0                         testl   %eax, %eax
// ce: 0f 89 96 00 00 00             jns     0x16a <_JIT_ENTRY+0x16a>
// d4: e9 a2 00 00 00                jmp     0x17b <_JIT_ENTRY+0x17b>
// d9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000db:  R_X86_64_64  .rodata.str1.1
// e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e5:  R_X86_64_64  _Py_NegativeRefcount
// ed: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f2: 4c 89 ea                      movq    %r13, %rdx
// f5: ff d0                         callq   *%rax
// f7: 49 8b 45 00                   movq    (%r13), %rax
// fb: 85 c0                         testl   %eax, %eax
// fd: 78 16                         js      0x115 <_JIT_ENTRY+0x115>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 109: ff d0                         callq   *%rax
// 10b: 49 ff 4d 00                   decq    (%r13)
// 10f: 0f 84 39 01 00 00             je      0x24e <_JIT_ENTRY+0x24e>
// 115: 49 8b 06                      movq    (%r14), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 0f 8e 48 01 00 00             jle     0x269 <_JIT_ENTRY+0x269>
// 121: 85 c0                         testl   %eax, %eax
// 123: 0f 89 65 01 00 00             jns     0x28e <_JIT_ENTRY+0x28e>
// 129: e9 80 01 00 00                jmp     0x2ae <_JIT_ENTRY+0x2ae>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_Dealloc
// 138: 4c 89 ef                      movq    %r13, %rdi
// 13b: ff d0                         callq   *%rax
// 13d: 49 8b 06                      movq    (%r14), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f 87                         jg      0xcc <_JIT_ENTRY+0xcc>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15e: 4c 89 f2                      movq    %r14, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 06                      movq    (%r14), %rax
// 166: 85 c0                         testl   %eax, %eax
// 168: 78 11                         js      0x17b <_JIT_ENTRY+0x17b>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 174: ff d0                         callq   *%rax
// 176: 49 ff 0e                      decq    (%r14)
// 179: 74 79                         je      0x1f4 <_JIT_ENTRY+0x1f4>
// 17b: 85 ed                         testl   %ebp, %ebp
// 17d: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 182: 0f 88 26 01 00 00             js      0x2ae <_JIT_ENTRY+0x2ae>
// 188: 48 8b 3c 24                   movq    (%rsp), %rdi
// 18c: 48 85 ff                      testq   %rdi, %rdi
// 18f: 0f 84 19 01 00 00             je      0x2ae <_JIT_ENTRY+0x2ae>
// 195: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000197:  R_X86_64_64  _Py_NoneStruct
// 19f: 4c 39 f7                      cmpq    %r14, %rdi
// 1a2: 74 71                         je      0x215 <_JIT_ENTRY+0x215>
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  PyErr_SetHandledException
// 1ae: ff d0                         callq   *%rax
// 1b0: 48 8b 04 24                   movq    (%rsp), %rax
// 1b4: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1b9: 49 89 4f f0                   movq    %rcx, -0x10(%r15)
// 1bd: 49 89 47 f8                   movq    %rax, -0x8(%r15)
// 1c1: 4c 39 f0                      cmpq    %r14, %rax
// 1c4: 74 57                         je      0x21d <_JIT_ENTRY+0x21d>
// 1c6: 49 29 ef                      subq    %rbp, %r15
// 1c9: 49 83 c7 b8                   addq    $-0x48, %r15
// 1cd: 49 c1 ef 03                   shrq    $0x3, %r15
// 1d1: 44 89 7d 40                   movl    %r15d, 0x40(%rbp)
// 1d5: 48 8b 45 00                   movq    (%rbp), %rax
// 1d9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001db:  R_X86_64_64  _JIT_TARGET
// 1e3: 89 c9                         movl    %ecx, %ecx
// 1e5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1e9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ef: e9 ca 00 00 00                jmp     0x2be <_JIT_ENTRY+0x2be>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_Dealloc
// 1fe: 4c 89 f7                      movq    %r14, %rdi
// 201: ff d0                         callq   *%rax
// 203: 85 ed                         testl   %ebp, %ebp
// 205: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 20a: 0f 89 78 ff ff ff             jns     0x188 <_JIT_ENTRY+0x188>
// 210: e9 99 00 00 00                jmp     0x2ae <_JIT_ENTRY+0x2ae>
// 215: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 21a: 48 89 03                      movq    %rax, (%rbx)
// 21d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021f:  R_X86_64_64  _Py_FalseStruct
// 227: 49 89 47 f8                   movq    %rax, -0x8(%r15)
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _JIT_CONTINUE
// 235: 48 89 ef                      movq    %rbp, %rdi
// 238: 4c 89 fe                      movq    %r15, %rsi
// 23b: 4c 89 e2                      movq    %r12, %rdx
// 23e: 48 83 c4 18                   addq    $0x18, %rsp
// 242: 5b                            popq    %rbx
// 243: 41 5c                         popq    %r12
// 245: 41 5d                         popq    %r13
// 247: 41 5e                         popq    %r14
// 249: 41 5f                         popq    %r15
// 24b: 5d                            popq    %rbp
// 24c: ff e0                         jmpq    *%rax
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_Dealloc
// 258: 4c 89 ef                      movq    %r13, %rdi
// 25b: ff d0                         callq   *%rax
// 25d: 49 8b 06                      movq    (%r14), %rax
// 260: 48 85 c0                      testq   %rax, %rax
// 263: 0f 8f b8 fe ff ff             jg      0x121 <_JIT_ENTRY+0x121>
// 269: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026b:  R_X86_64_64  .rodata.str1.1
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_NegativeRefcount
// 27d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 282: 4c 89 f2                      movq    %r14, %rdx
// 285: ff d0                         callq   *%rax
// 287: 49 8b 06                      movq    (%r14), %rax
// 28a: 85 c0                         testl   %eax, %eax
// 28c: 78 20                         js      0x2ae <_JIT_ENTRY+0x2ae>
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 298: ff d0                         callq   *%rax
// 29a: 49 ff 0e                      decq    (%r14)
// 29d: 75 0f                         jne     0x2ae <_JIT_ENTRY+0x2ae>
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _Py_Dealloc
// 2a9: 4c 89 f7                      movq    %r14, %rdi
// 2ac: ff d0                         callq   *%rax
// 2ae: 48 29 eb                      subq    %rbp, %rbx
// 2b1: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2b5: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2b9: 89 5d 40                      movl    %ebx, 0x40(%rbp)
// 2bc: 31 c0                         xorl    %eax, %eax
// 2be: 48 83 c4 18                   addq    $0x18, %rsp
// 2c2: 5b                            popq    %rbx
// 2c3: 41 5c                         popq    %r12
// 2c5: 41 5d                         popq    %r13
// 2c7: 41 5e                         popq    %r14
// 2c9: 41 5f                         popq    %r15
// 2cb: 5d                            popq    %rbp
// 2cc: c3                            retq
// 2cd: 
static const unsigned char _CHECK_EG_MATCHplus_TO_BOOL_NONE_code_body[718] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfd, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x76, 0xf8, 0x48, 0x8d, 0x5e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x39, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x48, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x65, 0x01, 0x00, 0x00, 0xe9, 0x80, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x79, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x88, 0x26, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x19, 0x01, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xf7, 0x74, 0x71, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x49, 0x89, 0x4f, 0xf0, 0x49, 0x89, 0x47, 0xf8, 0x4c, 0x39, 0xf0, 0x74, 0x57, 0x49, 0x29, 0xef, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7d, 0x40, 0x48, 0x8b, 0x45, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xca, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xed, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x0f, 0x89, 0x78, 0xff, 0xff, 0xff, 0xe9, 0x99, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x47, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xb8, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x29, 0xeb, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x5d, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_TO_BOOL_NONE_code_holes[24] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_TO_BOOL_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_TO_BOOL_NONE_data_holes[1];

// _CHECK_EG_MATCHplus_TO_BOOL_STR
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_TO_BOOL_STR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 8b 01 00 00             je      0x29b <_JIT_ENTRY+0x29b>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 9a 01 00 00             jle     0x2b7 <_JIT_ENTRY+0x2b7>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 b8 01 00 00             jns     0x2dd <_JIT_ENTRY+0x2dd>
// 125: e9 d4 01 00 00                jmp     0x2fe <_JIT_ENTRY+0x2fe>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 81 00 00 00             je      0x1ff <_JIT_ENTRY+0x1ff>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 78 01 00 00             js      0x2fe <_JIT_ENTRY+0x2fe>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 6a 01 00 00             je      0x2fe <_JIT_ENTRY+0x2fe>
// 194: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 4c 39 e7                      cmpq    %r12, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 1b4: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b9: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 1bd: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  PyUnicode_Type
// 1cb: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1d0: 74 49                         je      0x21b <_JIT_ENTRY+0x21b>
// 1d2: 4c 29 f3                      subq    %r14, %rbx
// 1d5: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1d9: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1dd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1e1: 49 8b 06                      movq    (%r14), %rax
// 1e4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e6:  R_X86_64_64  _JIT_TARGET
// 1ee: 89 c9                         movl    %ecx, %ecx
// 1f0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1fa: e9 14 01 00 00                jmp     0x313 <_JIT_ENTRY+0x313>
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_Dealloc
// 209: 4c 89 e7                      movq    %r12, %rdi
// 20c: ff d0                         callq   *%rax
// 20e: 85 ed                         testl   %ebp, %ebp
// 210: 0f 89 70 ff ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 216: e9 e3 00 00 00                jmp     0x2fe <_JIT_ENTRY+0x2fe>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _PyRuntime
// 225: 48 05 00 a1 00 00             addq    $0xa100, %rax           # imm = 0xA100
// 22b: 49 39 c4                      cmpq    %rax, %r12
// 22e: 0f 84 ee 00 00 00             je      0x322 <_JIT_ENTRY+0x322>
// 234: 49 8b 04 24                   movq    (%r12), %rax
// 238: 48 85 c0                      testq   %rax, %rax
// 23b: 7f 22                         jg      0x25f <_JIT_ENTRY+0x25f>
// 23d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023f:  R_X86_64_64  .rodata.str1.1
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _Py_NegativeRefcount
// 251: be cb 00 00 00                movl    $0xcb, %esi
// 256: 4c 89 e2                      movq    %r12, %rdx
// 259: ff d0                         callq   *%rax
// 25b: 49 8b 04 24                   movq    (%r12), %rax
// 25f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000261:  R_X86_64_64  _Py_TrueStruct
// 269: 85 c0                         testl   %eax, %eax
// 26b: 0f 88 bb 00 00 00             js      0x32c <_JIT_ENTRY+0x32c>
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27b: ff d0                         callq   *%rax
// 27d: 49 ff 0c 24                   decq    (%r12)
// 281: 0f 85 a5 00 00 00             jne     0x32c <_JIT_ENTRY+0x32c>
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _Py_Dealloc
// 291: 4c 89 e7                      movq    %r12, %rdi
// 294: ff d0                         callq   *%rax
// 296: e9 91 00 00 00                jmp     0x32c <_JIT_ENTRY+0x32c>
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _Py_Dealloc
// 2a5: 4c 89 ef                      movq    %r13, %rdi
// 2a8: ff d0                         callq   *%rax
// 2aa: 49 8b 04 24                   movq    (%r12), %rax
// 2ae: 48 85 c0                      testq   %rax, %rax
// 2b1: 0f 8f 66 fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 2b7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b9:  R_X86_64_64  .rodata.str1.1
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  _Py_NegativeRefcount
// 2cb: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2d0: 4c 89 e2                      movq    %r12, %rdx
// 2d3: ff d0                         callq   *%rax
// 2d5: 49 8b 04 24                   movq    (%r12), %rax
// 2d9: 85 c0                         testl   %eax, %eax
// 2db: 78 21                         js      0x2fe <_JIT_ENTRY+0x2fe>
// 2dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002df:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e7: ff d0                         callq   *%rax
// 2e9: 49 ff 0c 24                   decq    (%r12)
// 2ed: 75 0f                         jne     0x2fe <_JIT_ENTRY+0x2fe>
// 2ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f1:  R_X86_64_64  _Py_Dealloc
// 2f9: 4c 89 e7                      movq    %r12, %rdi
// 2fc: ff d0                         callq   *%rax
// 2fe: 48 83 c3 f0                   addq    $-0x10, %rbx
// 302: 4c 29 f3                      subq    %r14, %rbx
// 305: 48 83 c3 b8                   addq    $-0x48, %rbx
// 309: 48 c1 eb 03                   shrq    $0x3, %rbx
// 30d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 311: 31 c0                         xorl    %eax, %eax
// 313: 48 83 c4 18                   addq    $0x18, %rsp
// 317: 5b                            popq    %rbx
// 318: 41 5c                         popq    %r12
// 31a: 41 5d                         popq    %r13
// 31c: 41 5e                         popq    %r14
// 31e: 41 5f                         popq    %r15
// 320: 5d                            popq    %rbp
// 321: c3                            retq
// 322: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000324:  R_X86_64_64  _Py_FalseStruct
// 32c: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 330: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000332:  R_X86_64_64  _JIT_CONTINUE
// 33a: 4c 89 f7                      movq    %r14, %rdi
// 33d: 48 89 de                      movq    %rbx, %rsi
// 340: 4c 89 fa                      movq    %r15, %rdx
// 343: 48 83 c4 18                   addq    $0x18, %rsp
// 347: 5b                            popq    %rbx
// 348: 41 5c                         popq    %r12
// 34a: 41 5d                         popq    %r13
// 34c: 41 5e                         popq    %r14
// 34e: 41 5f                         popq    %r15
// 350: 5d                            popq    %rbp
// 351: ff e0                         jmpq    *%rax
// 353: 
static const unsigned char _CHECK_EG_MATCHplus_TO_BOOL_STR_code_body[852] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x8b, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x9a, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xb8, 0x01, 0x00, 0x00, 0xe9, 0xd4, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x81, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x78, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x6a, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x49, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x14, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x70, 0xff, 0xff, 0xff, 0xe9, 0xe3, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x05, 0x00, 0xa1, 0x00, 0x00, 0x49, 0x39, 0xc4, 0x0f, 0x84, 0xee, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xbb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xa5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x91, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x66, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_TO_BOOL_STR_code_holes[31] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x324, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x332, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_TO_BOOL_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_TO_BOOL_STR_data_holes[1];

// _CHECK_EG_MATCHplus_UNARY_INVERT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_UNARY_INVERT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 63                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 81 00 00 00             jns     0x106 <_JIT_ENTRY+0x106>
// 85: e9 9d 00 00 00                jmp     0x127 <_JIT_ENTRY+0x127>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c7 00 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// c6: 49 8b 04 24                   movq    (%r12), %rax
// ca: 48 85 c0                      testq   %rax, %rax
// cd: 0f 8e d6 00 00 00             jle     0x1a9 <_JIT_ENTRY+0x1a9>
// d3: 85 c0                         testl   %eax, %eax
// d5: 0f 89 f4 00 00 00             jns     0x1cf <_JIT_ENTRY+0x1cf>
// db: e9 05 01 00 00                jmp     0x1e5 <_JIT_ENTRY+0x1e5>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f9: 4c 89 ea                      movq    %r13, %rdx
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 21                         js      0x127 <_JIT_ENTRY+0x127>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 4d 00                   decq    (%r13)
// 116: 75 0f                         jne     0x127 <_JIT_ENTRY+0x127>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_Dealloc
// 122: 4c 89 ef                      movq    %r13, %rdi
// 125: ff d0                         callq   *%rax
// 127: 49 8b 04 24                   movq    (%r12), %rax
// 12b: 48 85 c0                      testq   %rax, %rax
// 12e: 7e 09                         jle     0x139 <_JIT_ENTRY+0x139>
// 130: 85 c0                         testl   %eax, %eax
// 132: 79 2f                         jns     0x163 <_JIT_ENTRY+0x163>
// 134: e9 85 01 00 00                jmp     0x2be <_JIT_ENTRY+0x2be>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_NegativeRefcount
// 14d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 152: 4c 89 e2                      movq    %r12, %rdx
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 5b 01 00 00             js      0x2be <_JIT_ENTRY+0x2be>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 45 01 00 00             jne     0x2be <_JIT_ENTRY+0x2be>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: 4c 89 e7                      movq    %r12, %rdi
// 186: ff d0                         callq   *%rax
// 188: e9 31 01 00 00                jmp     0x2be <_JIT_ENTRY+0x2be>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: 4c 89 ef                      movq    %r13, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 49 8b 04 24                   movq    (%r12), %rax
// 1a0: 48 85 c0                      testq   %rax, %rax
// 1a3: 0f 8f 2a ff ff ff             jg      0xd3 <_JIT_ENTRY+0xd3>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 49 8b 04 24                   movq    (%r12), %rax
// 1cb: 85 c0                         testl   %eax, %eax
// 1cd: 78 16                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 49 ff 0c 24                   decq    (%r12)
// 1df: 0f 84 c2 00 00 00             je      0x2a7 <_JIT_ENTRY+0x2a7>
// 1e5: 85 ed                         testl   %ebp, %ebp
// 1e7: 0f 88 d1 00 00 00             js      0x2be <_JIT_ENTRY+0x2be>
// 1ed: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1f2: 48 85 ff                      testq   %rdi, %rdi
// 1f5: 0f 84 c3 00 00 00             je      0x2be <_JIT_ENTRY+0x2be>
// 1fb: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001fd:  R_X86_64_64  _Py_NoneStruct
// 205: 4c 39 e7                      cmpq    %r12, %rdi
// 208: 74 11                         je      0x21b <_JIT_ENTRY+0x21b>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyErr_SetHandledException
// 214: ff d0                         callq   *%rax
// 216: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 21b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 220: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 224: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  PyNumber_Invert
// 232: 4c 89 e7                      movq    %r12, %rdi
// 235: ff d0                         callq   *%rax
// 237: 49 89 c5                      movq    %rax, %r13
// 23a: 49 8b 04 24                   movq    (%r12), %rax
// 23e: 48 85 c0                      testq   %rax, %rax
// 241: 7f 22                         jg      0x265 <_JIT_ENTRY+0x265>
// 243: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000245:  R_X86_64_64  .rodata.str1.1
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_NegativeRefcount
// 257: be e6 00 00 00                movl    $0xe6, %esi
// 25c: 4c 89 e2                      movq    %r12, %rdx
// 25f: ff d0                         callq   *%rax
// 261: 49 8b 04 24                   movq    (%r12), %rax
// 265: 85 c0                         testl   %eax, %eax
// 267: 78 12                         js      0x27b <_JIT_ENTRY+0x27b>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 273: ff d0                         callq   *%rax
// 275: 49 ff 0c 24                   decq    (%r12)
// 279: 74 67                         je      0x2e2 <_JIT_ENTRY+0x2e2>
// 27b: 4d 85 ed                      testq   %r13, %r13
// 27e: 74 42                         je      0x2c2 <_JIT_ENTRY+0x2c2>
// 280: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _JIT_CONTINUE
// 28e: 4c 89 f7                      movq    %r14, %rdi
// 291: 48 89 de                      movq    %rbx, %rsi
// 294: 4c 89 fa                      movq    %r15, %rdx
// 297: 48 83 c4 18                   addq    $0x18, %rsp
// 29b: 5b                            popq    %rbx
// 29c: 41 5c                         popq    %r12
// 29e: 41 5d                         popq    %r13
// 2a0: 41 5e                         popq    %r14
// 2a2: 41 5f                         popq    %r15
// 2a4: 5d                            popq    %rbp
// 2a5: ff e0                         jmpq    *%rax
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _Py_Dealloc
// 2b1: 4c 89 e7                      movq    %r12, %rdi
// 2b4: ff d0                         callq   *%rax
// 2b6: 85 ed                         testl   %ebp, %ebp
// 2b8: 0f 89 2f ff ff ff             jns     0x1ed <_JIT_ENTRY+0x1ed>
// 2be: 48 83 c3 f8                   addq    $-0x8, %rbx
// 2c2: 4c 29 f3                      subq    %r14, %rbx
// 2c5: 48 83 c3 b0                   addq    $-0x50, %rbx
// 2c9: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2cd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2d1: 31 c0                         xorl    %eax, %eax
// 2d3: 48 83 c4 18                   addq    $0x18, %rsp
// 2d7: 5b                            popq    %rbx
// 2d8: 41 5c                         popq    %r12
// 2da: 41 5d                         popq    %r13
// 2dc: 41 5e                         popq    %r14
// 2de: 41 5f                         popq    %r15
// 2e0: 5d                            popq    %rbp
// 2e1: c3                            retq
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  _Py_Dealloc
// 2ec: 4c 89 e7                      movq    %r12, %rdi
// 2ef: ff d0                         callq   *%rax
// 2f1: 4d 85 ed                      testq   %r13, %r13
// 2f4: 75 8a                         jne     0x280 <_JIT_ENTRY+0x280>
// 2f6: eb ca                         jmp     0x2c2 <_JIT_ENTRY+0x2c2>
// 2f8: 
static const unsigned char _CHECK_EG_MATCHplus_UNARY_INVERT_code_body[761] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0x85, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x5b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x45, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x31, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xc2, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xd1, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x67, 0x4d, 0x85, 0xed, 0x74, 0x42, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x2f, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0x8a, 0xeb, 0xca};
static const Hole _CHECK_EG_MATCHplus_UNARY_INVERT_code_holes[27] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Invert, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_UNARY_INVERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_UNARY_INVERT_data_holes[1];

// _CHECK_EG_MATCHplus_UNARY_NEGATIVE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_UNARY_NEGATIVE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 63                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 81 00 00 00             jns     0x106 <_JIT_ENTRY+0x106>
// 85: e9 9d 00 00 00                jmp     0x127 <_JIT_ENTRY+0x127>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c7 00 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// c6: 49 8b 04 24                   movq    (%r12), %rax
// ca: 48 85 c0                      testq   %rax, %rax
// cd: 0f 8e d6 00 00 00             jle     0x1a9 <_JIT_ENTRY+0x1a9>
// d3: 85 c0                         testl   %eax, %eax
// d5: 0f 89 f4 00 00 00             jns     0x1cf <_JIT_ENTRY+0x1cf>
// db: e9 05 01 00 00                jmp     0x1e5 <_JIT_ENTRY+0x1e5>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f9: 4c 89 ea                      movq    %r13, %rdx
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 21                         js      0x127 <_JIT_ENTRY+0x127>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 4d 00                   decq    (%r13)
// 116: 75 0f                         jne     0x127 <_JIT_ENTRY+0x127>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_Dealloc
// 122: 4c 89 ef                      movq    %r13, %rdi
// 125: ff d0                         callq   *%rax
// 127: 49 8b 04 24                   movq    (%r12), %rax
// 12b: 48 85 c0                      testq   %rax, %rax
// 12e: 7e 09                         jle     0x139 <_JIT_ENTRY+0x139>
// 130: 85 c0                         testl   %eax, %eax
// 132: 79 2f                         jns     0x163 <_JIT_ENTRY+0x163>
// 134: e9 85 01 00 00                jmp     0x2be <_JIT_ENTRY+0x2be>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_NegativeRefcount
// 14d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 152: 4c 89 e2                      movq    %r12, %rdx
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 5b 01 00 00             js      0x2be <_JIT_ENTRY+0x2be>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 45 01 00 00             jne     0x2be <_JIT_ENTRY+0x2be>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: 4c 89 e7                      movq    %r12, %rdi
// 186: ff d0                         callq   *%rax
// 188: e9 31 01 00 00                jmp     0x2be <_JIT_ENTRY+0x2be>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: 4c 89 ef                      movq    %r13, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 49 8b 04 24                   movq    (%r12), %rax
// 1a0: 48 85 c0                      testq   %rax, %rax
// 1a3: 0f 8f 2a ff ff ff             jg      0xd3 <_JIT_ENTRY+0xd3>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 49 8b 04 24                   movq    (%r12), %rax
// 1cb: 85 c0                         testl   %eax, %eax
// 1cd: 78 16                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 49 ff 0c 24                   decq    (%r12)
// 1df: 0f 84 c2 00 00 00             je      0x2a7 <_JIT_ENTRY+0x2a7>
// 1e5: 85 ed                         testl   %ebp, %ebp
// 1e7: 0f 88 d1 00 00 00             js      0x2be <_JIT_ENTRY+0x2be>
// 1ed: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1f2: 48 85 ff                      testq   %rdi, %rdi
// 1f5: 0f 84 c3 00 00 00             je      0x2be <_JIT_ENTRY+0x2be>
// 1fb: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001fd:  R_X86_64_64  _Py_NoneStruct
// 205: 4c 39 e7                      cmpq    %r12, %rdi
// 208: 74 11                         je      0x21b <_JIT_ENTRY+0x21b>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyErr_SetHandledException
// 214: ff d0                         callq   *%rax
// 216: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 21b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 220: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 224: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  PyNumber_Negative
// 232: 4c 89 e7                      movq    %r12, %rdi
// 235: ff d0                         callq   *%rax
// 237: 49 89 c5                      movq    %rax, %r13
// 23a: 49 8b 04 24                   movq    (%r12), %rax
// 23e: 48 85 c0                      testq   %rax, %rax
// 241: 7f 22                         jg      0x265 <_JIT_ENTRY+0x265>
// 243: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000245:  R_X86_64_64  .rodata.str1.1
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_NegativeRefcount
// 257: be 71 00 00 00                movl    $0x71, %esi
// 25c: 4c 89 e2                      movq    %r12, %rdx
// 25f: ff d0                         callq   *%rax
// 261: 49 8b 04 24                   movq    (%r12), %rax
// 265: 85 c0                         testl   %eax, %eax
// 267: 78 12                         js      0x27b <_JIT_ENTRY+0x27b>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 273: ff d0                         callq   *%rax
// 275: 49 ff 0c 24                   decq    (%r12)
// 279: 74 67                         je      0x2e2 <_JIT_ENTRY+0x2e2>
// 27b: 4d 85 ed                      testq   %r13, %r13
// 27e: 74 42                         je      0x2c2 <_JIT_ENTRY+0x2c2>
// 280: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _JIT_CONTINUE
// 28e: 4c 89 f7                      movq    %r14, %rdi
// 291: 48 89 de                      movq    %rbx, %rsi
// 294: 4c 89 fa                      movq    %r15, %rdx
// 297: 48 83 c4 18                   addq    $0x18, %rsp
// 29b: 5b                            popq    %rbx
// 29c: 41 5c                         popq    %r12
// 29e: 41 5d                         popq    %r13
// 2a0: 41 5e                         popq    %r14
// 2a2: 41 5f                         popq    %r15
// 2a4: 5d                            popq    %rbp
// 2a5: ff e0                         jmpq    *%rax
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _Py_Dealloc
// 2b1: 4c 89 e7                      movq    %r12, %rdi
// 2b4: ff d0                         callq   *%rax
// 2b6: 85 ed                         testl   %ebp, %ebp
// 2b8: 0f 89 2f ff ff ff             jns     0x1ed <_JIT_ENTRY+0x1ed>
// 2be: 48 83 c3 f8                   addq    $-0x8, %rbx
// 2c2: 4c 29 f3                      subq    %r14, %rbx
// 2c5: 48 83 c3 b0                   addq    $-0x50, %rbx
// 2c9: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2cd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2d1: 31 c0                         xorl    %eax, %eax
// 2d3: 48 83 c4 18                   addq    $0x18, %rsp
// 2d7: 5b                            popq    %rbx
// 2d8: 41 5c                         popq    %r12
// 2da: 41 5d                         popq    %r13
// 2dc: 41 5e                         popq    %r14
// 2de: 41 5f                         popq    %r15
// 2e0: 5d                            popq    %rbp
// 2e1: c3                            retq
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  _Py_Dealloc
// 2ec: 4c 89 e7                      movq    %r12, %rdi
// 2ef: ff d0                         callq   *%rax
// 2f1: 4d 85 ed                      testq   %r13, %r13
// 2f4: 75 8a                         jne     0x280 <_JIT_ENTRY+0x280>
// 2f6: eb ca                         jmp     0x2c2 <_JIT_ENTRY+0x2c2>
// 2f8: 
static const unsigned char _CHECK_EG_MATCHplus_UNARY_NEGATIVE_code_body[761] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0x85, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x5b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x45, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x31, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xc2, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xd1, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x67, 0x4d, 0x85, 0xed, 0x74, 0x42, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x2f, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0x8a, 0xeb, 0xca};
static const Hole _CHECK_EG_MATCHplus_UNARY_NEGATIVE_code_holes[27] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Negative, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_UNARY_NEGATIVE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_UNARY_NEGATIVE_data_holes[1];

// _CHECK_EG_MATCHplus_UNARY_NOT
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_UNARY_NOT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 fe                      movq    %r15, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 fe                      movq    %r15, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 56                         jle     0xd3 <_JIT_ENTRY+0xd3>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 78                         jns     0xf9 <_JIT_ENTRY+0xf9>
// 81: e9 89 00 00 00                jmp     0x10f <_JIT_ENTRY+0x10f>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6a                         je      0x128 <_JIT_ENTRY+0x128>
// be: 49 8b 07                      movq    (%r15), %rax
// c1: 48 85 c0                      testq   %rax, %rax
// c4: 7e 79                         jle     0x13f <_JIT_ENTRY+0x13f>
// c6: 85 c0                         testl   %eax, %eax
// c8: 0f 89 96 00 00 00             jns     0x164 <_JIT_ENTRY+0x164>
// ce: e9 a2 00 00 00                jmp     0x175 <_JIT_ENTRY+0x175>
// d3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d5:  R_X86_64_64  .rodata.str1.1
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _Py_NegativeRefcount
// e7: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ec: 4c 89 ea                      movq    %r13, %rdx
// ef: ff d0                         callq   *%rax
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 85 c0                         testl   %eax, %eax
// f7: 78 16                         js      0x10f <_JIT_ENTRY+0x10f>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 103: ff d0                         callq   *%rax
// 105: 49 ff 4d 00                   decq    (%r13)
// 109: 0f 84 08 01 00 00             je      0x217 <_JIT_ENTRY+0x217>
// 10f: 49 8b 07                      movq    (%r15), %rax
// 112: 48 85 c0                      testq   %rax, %rax
// 115: 0f 8e 17 01 00 00             jle     0x232 <_JIT_ENTRY+0x232>
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 0f 89 34 01 00 00             jns     0x257 <_JIT_ENTRY+0x257>
// 123: e9 4f 01 00 00                jmp     0x277 <_JIT_ENTRY+0x277>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ef                      movq    %r13, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 07                      movq    (%r15), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 87                         jg      0xc6 <_JIT_ENTRY+0xc6>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 158: 4c 89 fa                      movq    %r15, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 07                      movq    (%r15), %rax
// 160: 85 c0                         testl   %eax, %eax
// 162: 78 11                         js      0x175 <_JIT_ENTRY+0x175>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16e: ff d0                         callq   *%rax
// 170: 49 ff 0f                      decq    (%r15)
// 173: 74 50                         je      0x1c5 <_JIT_ENTRY+0x1c5>
// 175: 85 ed                         testl   %ebp, %ebp
// 177: 0f 88 fa 00 00 00             js      0x277 <_JIT_ENTRY+0x277>
// 17d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 182: 48 85 ff                      testq   %rdi, %rdi
// 185: 0f 84 ec 00 00 00             je      0x277 <_JIT_ENTRY+0x277>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NoneStruct
// 195: 48 39 c7                      cmpq    %rax, %rdi
// 198: 74 43                         je      0x1dd <_JIT_ENTRY+0x1dd>
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  PyErr_SetHandledException
// 1a4: ff d0                         callq   *%rax
// 1a6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a8:  R_X86_64_64  _Py_FalseStruct
// 1b0: 48 39 4c 24 08                cmpq    %rcx, 0x8(%rsp)
// 1b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b7:  R_X86_64_64  _Py_TrueStruct
// 1bf: 48 0f 45 c1                   cmovneq %rcx, %rax
// 1c3: eb 22                         jmp     0x1e7 <_JIT_ENTRY+0x1e7>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_Dealloc
// 1cf: 4c 89 ff                      movq    %r15, %rdi
// 1d2: ff d0                         callq   *%rax
// 1d4: 85 ed                         testl   %ebp, %ebp
// 1d6: 79 a5                         jns     0x17d <_JIT_ENTRY+0x17d>
// 1d8: e9 9a 00 00 00                jmp     0x277 <_JIT_ENTRY+0x277>
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _Py_FalseStruct
// 1e7: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1ec: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1f0: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _JIT_CONTINUE
// 1fe: 4c 89 f7                      movq    %r14, %rdi
// 201: 48 89 de                      movq    %rbx, %rsi
// 204: 4c 89 e2                      movq    %r12, %rdx
// 207: 48 83 c4 18                   addq    $0x18, %rsp
// 20b: 5b                            popq    %rbx
// 20c: 41 5c                         popq    %r12
// 20e: 41 5d                         popq    %r13
// 210: 41 5e                         popq    %r14
// 212: 41 5f                         popq    %r15
// 214: 5d                            popq    %rbp
// 215: ff e0                         jmpq    *%rax
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _Py_Dealloc
// 221: 4c 89 ef                      movq    %r13, %rdi
// 224: ff d0                         callq   *%rax
// 226: 49 8b 07                      movq    (%r15), %rax
// 229: 48 85 c0                      testq   %rax, %rax
// 22c: 0f 8f e9 fe ff ff             jg      0x11b <_JIT_ENTRY+0x11b>
// 232: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000234:  R_X86_64_64  .rodata.str1.1
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_NegativeRefcount
// 246: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 24b: 4c 89 fa                      movq    %r15, %rdx
// 24e: ff d0                         callq   *%rax
// 250: 49 8b 07                      movq    (%r15), %rax
// 253: 85 c0                         testl   %eax, %eax
// 255: 78 20                         js      0x277 <_JIT_ENTRY+0x277>
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 261: ff d0                         callq   *%rax
// 263: 49 ff 0f                      decq    (%r15)
// 266: 75 0f                         jne     0x277 <_JIT_ENTRY+0x277>
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _Py_Dealloc
// 272: 4c 89 ff                      movq    %r15, %rdi
// 275: ff d0                         callq   *%rax
// 277: 48 83 c3 f0                   addq    $-0x10, %rbx
// 27b: 4c 29 f3                      subq    %r14, %rbx
// 27e: 48 83 c3 b8                   addq    $-0x48, %rbx
// 282: 48 c1 eb 03                   shrq    $0x3, %rbx
// 286: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 28a: 31 c0                         xorl    %eax, %eax
// 28c: 48 83 c4 18                   addq    $0x18, %rsp
// 290: 5b                            popq    %rbx
// 291: 41 5c                         popq    %r12
// 293: 41 5d                         popq    %r13
// 295: 41 5e                         popq    %r14
// 297: 41 5f                         popq    %r15
// 299: 5d                            popq    %rbp
// 29a: c3                            retq
// 29b: 
static const unsigned char _CHECK_EG_MATCHplus_UNARY_NOT_code_body[668] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x56, 0x85, 0xc0, 0x79, 0x78, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6a, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x79, 0x85, 0xc0, 0x0f, 0x89, 0x96, 0x00, 0x00, 0x00, 0xe9, 0xa2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x08, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x17, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x34, 0x01, 0x00, 0x00, 0xe9, 0x4f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x87, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x50, 0x85, 0xed, 0x0f, 0x88, 0xfa, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x43, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45, 0xc1, 0xeb, 0x22, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x79, 0xa5, 0xe9, 0x9a, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0xe9, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_UNARY_NOT_code_holes[25] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_UNARY_NOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_UNARY_NOT_data_holes[1];

// _CHECK_EG_MATCHplus_UNPACK_EX
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_UNPACK_EX.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 63                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 81 00 00 00             jns     0x106 <_JIT_ENTRY+0x106>
// 85: e9 9d 00 00 00                jmp     0x127 <_JIT_ENTRY+0x127>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c7 00 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// c6: 49 8b 04 24                   movq    (%r12), %rax
// ca: 48 85 c0                      testq   %rax, %rax
// cd: 0f 8e d6 00 00 00             jle     0x1a9 <_JIT_ENTRY+0x1a9>
// d3: 85 c0                         testl   %eax, %eax
// d5: 0f 89 f4 00 00 00             jns     0x1cf <_JIT_ENTRY+0x1cf>
// db: e9 05 01 00 00                jmp     0x1e5 <_JIT_ENTRY+0x1e5>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f9: 4c 89 ea                      movq    %r13, %rdx
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 21                         js      0x127 <_JIT_ENTRY+0x127>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 4d 00                   decq    (%r13)
// 116: 75 0f                         jne     0x127 <_JIT_ENTRY+0x127>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_Dealloc
// 122: 4c 89 ef                      movq    %r13, %rdi
// 125: ff d0                         callq   *%rax
// 127: 49 8b 04 24                   movq    (%r12), %rax
// 12b: 48 85 c0                      testq   %rax, %rax
// 12e: 7e 09                         jle     0x139 <_JIT_ENTRY+0x139>
// 130: 85 c0                         testl   %eax, %eax
// 132: 79 2f                         jns     0x163 <_JIT_ENTRY+0x163>
// 134: e9 ae 01 00 00                jmp     0x2e7 <_JIT_ENTRY+0x2e7>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_NegativeRefcount
// 14d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 152: 4c 89 e2                      movq    %r12, %rdx
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 84 01 00 00             js      0x2e7 <_JIT_ENTRY+0x2e7>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 6e 01 00 00             jne     0x2e7 <_JIT_ENTRY+0x2e7>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: 4c 89 e7                      movq    %r12, %rdi
// 186: ff d0                         callq   *%rax
// 188: e9 5a 01 00 00                jmp     0x2e7 <_JIT_ENTRY+0x2e7>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: 4c 89 ef                      movq    %r13, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 49 8b 04 24                   movq    (%r12), %rax
// 1a0: 48 85 c0                      testq   %rax, %rax
// 1a3: 0f 8f 2a ff ff ff             jg      0xd3 <_JIT_ENTRY+0xd3>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 49 8b 04 24                   movq    (%r12), %rax
// 1cb: 85 c0                         testl   %eax, %eax
// 1cd: 78 16                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 49 ff 0c 24                   decq    (%r12)
// 1df: 0f 84 eb 00 00 00             je      0x2d0 <_JIT_ENTRY+0x2d0>
// 1e5: 85 ed                         testl   %ebp, %ebp
// 1e7: 0f 88 fa 00 00 00             js      0x2e7 <_JIT_ENTRY+0x2e7>
// 1ed: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1f2: 48 85 ff                      testq   %rdi, %rdi
// 1f5: 0f 84 ec 00 00 00             je      0x2e7 <_JIT_ENTRY+0x2e7>
// 1fb: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001fd:  R_X86_64_64  _Py_NoneStruct
// 205: 4c 39 e7                      cmpq    %r12, %rdi
// 208: 74 11                         je      0x21b <_JIT_ENTRY+0x21b>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyErr_SetHandledException
// 214: ff d0                         callq   *%rax
// 216: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 21b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 220: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 224: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _JIT_OPARG
// 232: 0f b6 cc                      movzbl  %ah, %ecx
// 235: 0f b6 d0                      movzbl  %al, %edx
// 238: 8d 44 0a 01                   leal    0x1(%rdx,%rcx), %eax
// 23c: 4d 8d 44 c6 f8                leaq    -0x8(%r14,%rax,8), %r8
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _PyEval_UnpackIterable
// 24b: 4c 89 ff                      movq    %r15, %rdi
// 24e: 4c 89 e6                      movq    %r12, %rsi
// 251: ff d0                         callq   *%rax
// 253: 89 c5                         movl    %eax, %ebp
// 255: 49 8b 04 24                   movq    (%r12), %rax
// 259: 48 85 c0                      testq   %rax, %rax
// 25c: 7f 22                         jg      0x280 <_JIT_ENTRY+0x280>
// 25e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000260:  R_X86_64_64  .rodata.str1.1
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _Py_NegativeRefcount
// 272: be b7 03 00 00                movl    $0x3b7, %esi            # imm = 0x3B7
// 277: 4c 89 e2                      movq    %r12, %rdx
// 27a: ff d0                         callq   *%rax
// 27c: 49 8b 04 24                   movq    (%r12), %rax
// 280: 85 c0                         testl   %eax, %eax
// 282: 78 12                         js      0x296 <_JIT_ENTRY+0x296>
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28e: ff d0                         callq   *%rax
// 290: 49 ff 0c 24                   decq    (%r12)
// 294: 74 75                         je      0x30b <_JIT_ENTRY+0x30b>
// 296: 85 ed                         testl   %ebp, %ebp
// 298: 74 51                         je      0x2eb <_JIT_ENTRY+0x2eb>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _JIT_OPARG
// 2a4: 0f b6 c8                      movzbl  %al, %ecx
// 2a7: 0f b6 c4                      movzbl  %ah, %eax
// 2aa: 01 c8                         addl    %ecx, %eax
// 2ac: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b2:  R_X86_64_64  _JIT_CONTINUE
// 2ba: 48 89 df                      movq    %rbx, %rdi
// 2bd: 4c 89 fa                      movq    %r15, %rdx
// 2c0: 48 83 c4 18                   addq    $0x18, %rsp
// 2c4: 5b                            popq    %rbx
// 2c5: 41 5c                         popq    %r12
// 2c7: 41 5d                         popq    %r13
// 2c9: 41 5e                         popq    %r14
// 2cb: 41 5f                         popq    %r15
// 2cd: 5d                            popq    %rbp
// 2ce: ff e0                         jmpq    *%rax
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _Py_Dealloc
// 2da: 4c 89 e7                      movq    %r12, %rdi
// 2dd: ff d0                         callq   *%rax
// 2df: 85 ed                         testl   %ebp, %ebp
// 2e1: 0f 89 06 ff ff ff             jns     0x1ed <_JIT_ENTRY+0x1ed>
// 2e7: 49 83 c6 f8                   addq    $-0x8, %r14
// 2eb: 49 29 de                      subq    %rbx, %r14
// 2ee: 49 83 c6 b0                   addq    $-0x50, %r14
// 2f2: 49 c1 ee 03                   shrq    $0x3, %r14
// 2f6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2fa: 31 c0                         xorl    %eax, %eax
// 2fc: 48 83 c4 18                   addq    $0x18, %rsp
// 300: 5b                            popq    %rbx
// 301: 41 5c                         popq    %r12
// 303: 41 5d                         popq    %r13
// 305: 41 5e                         popq    %r14
// 307: 41 5f                         popq    %r15
// 309: 5d                            popq    %rbp
// 30a: c3                            retq
// 30b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030d:  R_X86_64_64  _Py_Dealloc
// 315: 4c 89 e7                      movq    %r12, %rdi
// 318: ff d0                         callq   *%rax
// 31a: 85 ed                         testl   %ebp, %ebp
// 31c: 0f 85 78 ff ff ff             jne     0x29a <_JIT_ENTRY+0x29a>
// 322: eb c7                         jmp     0x2eb <_JIT_ENTRY+0x2eb>
// 324: 
static const unsigned char _CHECK_EG_MATCHplus_UNPACK_EX_code_body[805] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0xae, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x84, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x6e, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x5a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xeb, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xfa, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x89, 0x46, 0xf0, 0x4d, 0x89, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0xcc, 0x0f, 0xb6, 0xd0, 0x8d, 0x44, 0x0a, 0x01, 0x4d, 0x8d, 0x44, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x75, 0x85, 0xed, 0x74, 0x51, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0xc8, 0x0f, 0xb6, 0xc4, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x06, 0xff, 0xff, 0xff, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x85, 0x78, 0xff, 0xff, 0xff, 0xeb, 0xc7};
static const Hole _CHECK_EG_MATCHplus_UNPACK_EX_code_holes[29] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_UNPACK_EX_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_UNPACK_EX_data_holes[1];

// _CHECK_EG_MATCHplus_UNPACK_SEQUENCE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_UNPACK_SEQUENCE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 1c                         jle     0x8a <_JIT_ENTRY+0x8a>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3e                         jns     0xb0 <_JIT_ENTRY+0xb0>
// 72: eb 52                         jmp     0xc6 <_JIT_ENTRY+0xc6>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 63                         jle     0xe0 <_JIT_ENTRY+0xe0>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 0f 89 81 00 00 00             jns     0x106 <_JIT_ENTRY+0x106>
// 85: e9 9d 00 00 00                jmp     0x127 <_JIT_ENTRY+0x127>
// 8a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008c:  R_X86_64_64  .rodata.str1.1
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_NegativeRefcount
// 9e: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a3: 4c 89 ea                      movq    %r13, %rdx
// a6: ff d0                         callq   *%rax
// a8: 49 8b 45 00                   movq    (%r13), %rax
// ac: 85 c0                         testl   %eax, %eax
// ae: 78 16                         js      0xc6 <_JIT_ENTRY+0xc6>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ba: ff d0                         callq   *%rax
// bc: 49 ff 4d 00                   decq    (%r13)
// c0: 0f 84 c7 00 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// c6: 49 8b 04 24                   movq    (%r12), %rax
// ca: 48 85 c0                      testq   %rax, %rax
// cd: 0f 8e d6 00 00 00             jle     0x1a9 <_JIT_ENTRY+0x1a9>
// d3: 85 c0                         testl   %eax, %eax
// d5: 0f 89 f4 00 00 00             jns     0x1cf <_JIT_ENTRY+0x1cf>
// db: e9 05 01 00 00                jmp     0x1e5 <_JIT_ENTRY+0x1e5>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f9: 4c 89 ea                      movq    %r13, %rdx
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 21                         js      0x127 <_JIT_ENTRY+0x127>
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 110: ff d0                         callq   *%rax
// 112: 49 ff 4d 00                   decq    (%r13)
// 116: 75 0f                         jne     0x127 <_JIT_ENTRY+0x127>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_Dealloc
// 122: 4c 89 ef                      movq    %r13, %rdi
// 125: ff d0                         callq   *%rax
// 127: 49 8b 04 24                   movq    (%r12), %rax
// 12b: 48 85 c0                      testq   %rax, %rax
// 12e: 7e 09                         jle     0x139 <_JIT_ENTRY+0x139>
// 130: 85 c0                         testl   %eax, %eax
// 132: 79 2f                         jns     0x163 <_JIT_ENTRY+0x163>
// 134: e9 ae 01 00 00                jmp     0x2e7 <_JIT_ENTRY+0x2e7>
// 139: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013b:  R_X86_64_64  .rodata.str1.1
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_NegativeRefcount
// 14d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 152: 4c 89 e2                      movq    %r12, %rdx
// 155: ff d0                         callq   *%rax
// 157: 49 8b 04 24                   movq    (%r12), %rax
// 15b: 85 c0                         testl   %eax, %eax
// 15d: 0f 88 84 01 00 00             js      0x2e7 <_JIT_ENTRY+0x2e7>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16d: ff d0                         callq   *%rax
// 16f: 49 ff 0c 24                   decq    (%r12)
// 173: 0f 85 6e 01 00 00             jne     0x2e7 <_JIT_ENTRY+0x2e7>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: 4c 89 e7                      movq    %r12, %rdi
// 186: ff d0                         callq   *%rax
// 188: e9 5a 01 00 00                jmp     0x2e7 <_JIT_ENTRY+0x2e7>
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _Py_Dealloc
// 197: 4c 89 ef                      movq    %r13, %rdi
// 19a: ff d0                         callq   *%rax
// 19c: 49 8b 04 24                   movq    (%r12), %rax
// 1a0: 48 85 c0                      testq   %rax, %rax
// 1a3: 0f 8f 2a ff ff ff             jg      0xd3 <_JIT_ENTRY+0xd3>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 49 8b 04 24                   movq    (%r12), %rax
// 1cb: 85 c0                         testl   %eax, %eax
// 1cd: 78 16                         js      0x1e5 <_JIT_ENTRY+0x1e5>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d9: ff d0                         callq   *%rax
// 1db: 49 ff 0c 24                   decq    (%r12)
// 1df: 0f 84 eb 00 00 00             je      0x2d0 <_JIT_ENTRY+0x2d0>
// 1e5: 85 ed                         testl   %ebp, %ebp
// 1e7: 0f 88 fa 00 00 00             js      0x2e7 <_JIT_ENTRY+0x2e7>
// 1ed: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1f2: 48 85 ff                      testq   %rdi, %rdi
// 1f5: 0f 84 ec 00 00 00             je      0x2e7 <_JIT_ENTRY+0x2e7>
// 1fb: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001fd:  R_X86_64_64  _Py_NoneStruct
// 205: 4c 39 e7                      cmpq    %r12, %rdi
// 208: 74 11                         je      0x21b <_JIT_ENTRY+0x21b>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyErr_SetHandledException
// 214: ff d0                         callq   *%rax
// 216: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 21b: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 220: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 224: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _JIT_OPARG
// 232: 0f b7 c8                      movzwl  %ax, %ecx
// 235: 4d 8d 44 ce f8                leaq    -0x8(%r14,%rcx,8), %r8
// 23a: 0f b7 d0                      movzwl  %ax, %edx
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _PyEval_UnpackIterable
// 247: 4c 89 ff                      movq    %r15, %rdi
// 24a: 4c 89 e6                      movq    %r12, %rsi
// 24d: b9 ff ff ff ff                movl    $0xffffffff, %ecx       # imm = 0xFFFFFFFF
// 252: ff d0                         callq   *%rax
// 254: 89 c5                         movl    %eax, %ebp
// 256: 49 8b 04 24                   movq    (%r12), %rax
// 25a: 48 85 c0                      testq   %rax, %rax
// 25d: 7f 22                         jg      0x281 <_JIT_ENTRY+0x281>
// 25f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000261:  R_X86_64_64  .rodata.str1.1
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_NegativeRefcount
// 273: be 75 03 00 00                movl    $0x375, %esi            # imm = 0x375
// 278: 4c 89 e2                      movq    %r12, %rdx
// 27b: ff d0                         callq   *%rax
// 27d: 49 8b 04 24                   movq    (%r12), %rax
// 281: 85 c0                         testl   %eax, %eax
// 283: 78 12                         js      0x297 <_JIT_ENTRY+0x297>
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28f: ff d0                         callq   *%rax
// 291: 49 ff 0c 24                   decq    (%r12)
// 295: 74 74                         je      0x30b <_JIT_ENTRY+0x30b>
// 297: 85 ed                         testl   %ebp, %ebp
// 299: 74 50                         je      0x2eb <_JIT_ENTRY+0x2eb>
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _JIT_OPARG
// 2a5: 0f b7 c0                      movzwl  %ax, %eax
// 2a8: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2ac: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b2:  R_X86_64_64  _JIT_CONTINUE
// 2ba: 48 89 df                      movq    %rbx, %rdi
// 2bd: 4c 89 fa                      movq    %r15, %rdx
// 2c0: 48 83 c4 18                   addq    $0x18, %rsp
// 2c4: 5b                            popq    %rbx
// 2c5: 41 5c                         popq    %r12
// 2c7: 41 5d                         popq    %r13
// 2c9: 41 5e                         popq    %r14
// 2cb: 41 5f                         popq    %r15
// 2cd: 5d                            popq    %rbp
// 2ce: ff e0                         jmpq    *%rax
// 2d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d2:  R_X86_64_64  _Py_Dealloc
// 2da: 4c 89 e7                      movq    %r12, %rdi
// 2dd: ff d0                         callq   *%rax
// 2df: 85 ed                         testl   %ebp, %ebp
// 2e1: 0f 89 06 ff ff ff             jns     0x1ed <_JIT_ENTRY+0x1ed>
// 2e7: 49 83 c6 f8                   addq    $-0x8, %r14
// 2eb: 49 29 de                      subq    %rbx, %r14
// 2ee: 49 83 c6 b0                   addq    $-0x50, %r14
// 2f2: 49 c1 ee 03                   shrq    $0x3, %r14
// 2f6: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2fa: 31 c0                         xorl    %eax, %eax
// 2fc: 48 83 c4 18                   addq    $0x18, %rsp
// 300: 5b                            popq    %rbx
// 301: 41 5c                         popq    %r12
// 303: 41 5d                         popq    %r13
// 305: 41 5e                         popq    %r14
// 307: 41 5f                         popq    %r15
// 309: 5d                            popq    %rbp
// 30a: c3                            retq
// 30b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030d:  R_X86_64_64  _Py_Dealloc
// 315: 4c 89 e7                      movq    %r12, %rdi
// 318: ff d0                         callq   *%rax
// 31a: 85 ed                         testl   %ebp, %ebp
// 31c: 0f 85 79 ff ff ff             jne     0x29b <_JIT_ENTRY+0x29b>
// 322: eb c7                         jmp     0x2eb <_JIT_ENTRY+0x2eb>
// 324: 
static const unsigned char _CHECK_EG_MATCHplus_UNPACK_SEQUENCE_code_body[805] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x52, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x63, 0x85, 0xc0, 0x0f, 0x89, 0x81, 0x00, 0x00, 0x00, 0xe9, 0x9d, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc7, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xf4, 0x00, 0x00, 0x00, 0xe9, 0x05, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x09, 0x85, 0xc0, 0x79, 0x2f, 0xe9, 0xae, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x84, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x6e, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x5a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x2a, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xeb, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xfa, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xec, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x89, 0x46, 0xf0, 0x4d, 0x89, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x4d, 0x8d, 0x44, 0xce, 0xf8, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x74, 0x85, 0xed, 0x74, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x06, 0xff, 0xff, 0xff, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0xeb, 0xc7};
static const Hole _CHECK_EG_MATCHplus_UNPACK_SEQUENCE_code_holes[29] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_UNPACK_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_UNPACK_SEQUENCE_data_holes[1];

// _CHECK_EG_MATCHplus_UNPACK_SEQUENCE_LIST
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_UNPACK_SEQUENCE_LIST.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 4c 8d 7e f0                   leaq    -0x10(%rsi), %r15
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 44                         js      0x7d <_JIT_ENTRY+0x7d>
// 39: 48 89 6c 24 20                movq    %rbp, 0x20(%rsp)
// 3e: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 47: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 5a: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 5f: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 64: 4c 89 ef                      movq    %r13, %rdi
// 67: 4c 89 e6                      movq    %r12, %rsi
// 6a: ff d0                         callq   *%rax
// 6c: 89 c5                         movl    %eax, %ebp
// 6e: 49 8b 45 00                   movq    (%r13), %rax
// 72: 48 85 c0                      testq   %rax, %rax
// 75: 7e 18                         jle     0x8f <_JIT_ENTRY+0x8f>
// 77: 85 c0                         testl   %eax, %eax
// 79: 79 3a                         jns     0xb5 <_JIT_ENTRY+0xb5>
// 7b: eb 4a                         jmp     0xc7 <_JIT_ENTRY+0xc7>
// 7d: 49 8b 45 00                   movq    (%r13), %rax
// 81: 48 85 c0                      testq   %rax, %rax
// 84: 7e 57                         jle     0xdd <_JIT_ENTRY+0xdd>
// 86: 85 c0                         testl   %eax, %eax
// 88: 79 79                         jns     0x103 <_JIT_ENTRY+0x103>
// 8a: e9 8a 00 00 00                jmp     0x119 <_JIT_ENTRY+0x119>
// 8f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000091:  R_X86_64_64  .rodata.str1.1
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_NegativeRefcount
// a3: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a8: 4c 89 ea                      movq    %r13, %rdx
// ab: ff d0                         callq   *%rax
// ad: 49 8b 45 00                   movq    (%r13), %rax
// b1: 85 c0                         testl   %eax, %eax
// b3: 78 12                         js      0xc7 <_JIT_ENTRY+0xc7>
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bf: ff d0                         callq   *%rax
// c1: 49 ff 4d 00                   decq    (%r13)
// c5: 74 6c                         je      0x133 <_JIT_ENTRY+0x133>
// c7: 49 8b 04 24                   movq    (%r12), %rax
// cb: 48 85 c0                      testq   %rax, %rax
// ce: 7e 7b                         jle     0x14b <_JIT_ENTRY+0x14b>
// d0: 85 c0                         testl   %eax, %eax
// d2: 0f 89 99 00 00 00             jns     0x171 <_JIT_ENTRY+0x171>
// d8: e9 aa 00 00 00                jmp     0x187 <_JIT_ENTRY+0x187>
// dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000df:  R_X86_64_64  .rodata.str1.1
// e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e9:  R_X86_64_64  _Py_NegativeRefcount
// f1: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f6: 4c 89 ea                      movq    %r13, %rdx
// f9: ff d0                         callq   *%rax
// fb: 49 8b 45 00                   movq    (%r13), %rax
// ff: 85 c0                         testl   %eax, %eax
// 101: 78 16                         js      0x119 <_JIT_ENTRY+0x119>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10d: ff d0                         callq   *%rax
// 10f: 49 ff 4d 00                   decq    (%r13)
// 113: 0f 84 7f 01 00 00             je      0x298 <_JIT_ENTRY+0x298>
// 119: 49 8b 04 24                   movq    (%r12), %rax
// 11d: 48 85 c0                      testq   %rax, %rax
// 120: 0f 8e 8e 01 00 00             jle     0x2b4 <_JIT_ENTRY+0x2b4>
// 126: 85 c0                         testl   %eax, %eax
// 128: 0f 89 ac 01 00 00             jns     0x2da <_JIT_ENTRY+0x2da>
// 12e: e9 c8 01 00 00                jmp     0x2fb <_JIT_ENTRY+0x2fb>
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_Dealloc
// 13d: 4c 89 ef                      movq    %r13, %rdi
// 140: ff d0                         callq   *%rax
// 142: 49 8b 04 24                   movq    (%r12), %rax
// 146: 48 85 c0                      testq   %rax, %rax
// 149: 7f 85                         jg      0xd0 <_JIT_ENTRY+0xd0>
// 14b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014d:  R_X86_64_64  .rodata.str1.1
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  _Py_NegativeRefcount
// 15f: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 164: 4c 89 e2                      movq    %r12, %rdx
// 167: ff d0                         callq   *%rax
// 169: 49 8b 04 24                   movq    (%r12), %rax
// 16d: 85 c0                         testl   %eax, %eax
// 16f: 78 16                         js      0x187 <_JIT_ENTRY+0x187>
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17b: ff d0                         callq   *%rax
// 17d: 49 ff 0c 24                   decq    (%r12)
// 181: 0f 84 f8 00 00 00             je      0x27f <_JIT_ENTRY+0x27f>
// 187: 85 ed                         testl   %ebp, %ebp
// 189: 0f 88 6c 01 00 00             js      0x2fb <_JIT_ENTRY+0x2fb>
// 18f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 194: 48 85 ff                      testq   %rdi, %rdi
// 197: 0f 84 5e 01 00 00             je      0x2fb <_JIT_ENTRY+0x2fb>
// 19d: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 1a1: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001a3:  R_X86_64_64  _Py_NoneStruct
// 1ab: 4c 39 e7                      cmpq    %r12, %rdi
// 1ae: 74 11                         je      0x1c1 <_JIT_ENTRY+0x1c1>
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  PyErr_SetHandledException
// 1ba: ff d0                         callq   *%rax
// 1bc: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 1c1: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1c6: 49 89 07                      movq    %rax, (%r15)
// 1c9: 4d 89 65 00                   movq    %r12, (%r13)
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  PyList_Type
// 1d7: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1dc: 75 74                         jne     0x252 <_JIT_ENTRY+0x252>
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _JIT_OPARG
// 1e8: 0f b7 c0                      movzwl  %ax, %eax
// 1eb: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 1f0: 75 60                         jne     0x252 <_JIT_ENTRY+0x252>
// 1f2: 48 89 5c 24 18                movq    %rbx, 0x18(%rsp)
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  _JIT_OPARG
// 201: a9 ff ff 00 00                testl   $0xffff, %eax           # imm = 0xFFFF
// 206: 0f 8e 0f 01 00 00             jle     0x31b <_JIT_ENTRY+0x31b>
// 20c: 4d 8b 7c 24 18                movq    0x18(%r12), %r15
// 211: 0f b7 e8                      movzwl  %ax, %ebp
// 214: 48 ff c5                      incq    %rbp
// 217: eb 1c                         jmp     0x235 <_JIT_ENTRY+0x235>
// 219: 0f 1f 80 00 00 00 00          nopl    (%rax)
// 220: 49 89 5d 00                   movq    %rbx, (%r13)
// 224: 49 83 c5 08                   addq    $0x8, %r13
// 228: 48 ff cd                      decq    %rbp
// 22b: 48 83 fd 01                   cmpq    $0x1, %rbp
// 22f: 0f 8e e6 00 00 00             jle     0x31b <_JIT_ENTRY+0x31b>
// 235: 8d 45 fe                      leal    -0x2(%rbp), %eax
// 238: 49 8b 1c c7                   movq    (%r15,%rax,8), %rbx
// 23c: 8b 03                         movl    (%rbx), %eax
// 23e: ff c0                         incl    %eax
// 240: 74 de                         je      0x220 <_JIT_ENTRY+0x220>
// 242: 89 03                         movl    %eax, (%rbx)
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 24e: ff d0                         callq   *%rax
// 250: eb ce                         jmp     0x220 <_JIT_ENTRY+0x220>
// 252: 49 29 de                      subq    %rbx, %r14
// 255: 49 83 c6 b8                   addq    $-0x48, %r14
// 259: 49 c1 ee 03                   shrq    $0x3, %r14
// 25d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 261: 48 8b 03                      movq    (%rbx), %rax
// 264: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000266:  R_X86_64_64  _JIT_TARGET
// 26e: 89 c9                         movl    %ecx, %ecx
// 270: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 274: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 27a: e9 8d 00 00 00                jmp     0x30c <_JIT_ENTRY+0x30c>
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_Dealloc
// 289: 4c 89 e7                      movq    %r12, %rdi
// 28c: ff d0                         callq   *%rax
// 28e: 85 ed                         testl   %ebp, %ebp
// 290: 0f 89 f9 fe ff ff             jns     0x18f <_JIT_ENTRY+0x18f>
// 296: eb 63                         jmp     0x2fb <_JIT_ENTRY+0x2fb>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_Dealloc
// 2a2: 4c 89 ef                      movq    %r13, %rdi
// 2a5: ff d0                         callq   *%rax
// 2a7: 49 8b 04 24                   movq    (%r12), %rax
// 2ab: 48 85 c0                      testq   %rax, %rax
// 2ae: 0f 8f 72 fe ff ff             jg      0x126 <_JIT_ENTRY+0x126>
// 2b4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b6:  R_X86_64_64  .rodata.str1.1
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_NegativeRefcount
// 2c8: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2cd: 4c 89 e2                      movq    %r12, %rdx
// 2d0: ff d0                         callq   *%rax
// 2d2: 49 8b 04 24                   movq    (%r12), %rax
// 2d6: 85 c0                         testl   %eax, %eax
// 2d8: 78 21                         js      0x2fb <_JIT_ENTRY+0x2fb>
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e4: ff d0                         callq   *%rax
// 2e6: 49 ff 0c 24                   decq    (%r12)
// 2ea: 75 0f                         jne     0x2fb <_JIT_ENTRY+0x2fb>
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _Py_Dealloc
// 2f6: 4c 89 e7                      movq    %r12, %rdi
// 2f9: ff d0                         callq   *%rax
// 2fb: 49 29 df                      subq    %rbx, %r15
// 2fe: 49 83 c7 b8                   addq    $-0x48, %r15
// 302: 49 c1 ef 03                   shrq    $0x3, %r15
// 306: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 30a: 31 c0                         xorl    %eax, %eax
// 30c: 48 83 c4 28                   addq    $0x28, %rsp
// 310: 5b                            popq    %rbx
// 311: 41 5c                         popq    %r12
// 313: 41 5d                         popq    %r13
// 315: 41 5e                         popq    %r14
// 317: 41 5f                         popq    %r15
// 319: 5d                            popq    %rbp
// 31a: c3                            retq
// 31b: 49 8b 04 24                   movq    (%r12), %rax
// 31f: 48 85 c0                      testq   %rax, %rax
// 322: 7f 22                         jg      0x346 <_JIT_ENTRY+0x346>
// 324: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000326:  R_X86_64_64  .rodata.str1.1
// 32e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000330:  R_X86_64_64  _Py_NegativeRefcount
// 338: be ab 03 00 00                movl    $0x3ab, %esi            # imm = 0x3AB
// 33d: 4c 89 e2                      movq    %r12, %rdx
// 340: ff d0                         callq   *%rax
// 342: 49 8b 04 24                   movq    (%r12), %rax
// 346: 85 c0                         testl   %eax, %eax
// 348: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 34d: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 352: 78 21                         js      0x375 <_JIT_ENTRY+0x375>
// 354: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000356:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 35e: ff d0                         callq   *%rax
// 360: 49 ff 0c 24                   decq    (%r12)
// 364: 75 0f                         jne     0x375 <_JIT_ENTRY+0x375>
// 366: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000368:  R_X86_64_64  _Py_Dealloc
// 370: 4c 89 e7                      movq    %r12, %rdi
// 373: ff d0                         callq   *%rax
// 375: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000377:  R_X86_64_64  _JIT_OPARG
// 37f: 0f b7 c0                      movzwl  %ax, %eax
// 382: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 386: 48 83 c6 f8                   addq    $-0x8, %rsi
// 38a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038c:  R_X86_64_64  _JIT_CONTINUE
// 394: 48 89 df                      movq    %rbx, %rdi
// 397: 4c 89 fa                      movq    %r15, %rdx
// 39a: 48 83 c4 28                   addq    $0x28, %rsp
// 39e: 5b                            popq    %rbx
// 39f: 41 5c                         popq    %r12
// 3a1: 41 5d                         popq    %r13
// 3a3: 41 5e                         popq    %r14
// 3a5: 41 5f                         popq    %r15
// 3a7: 5d                            popq    %rbp
// 3a8: ff e0                         jmpq    *%rax
// 3aa: 
static const unsigned char _CHECK_EG_MATCHplus_UNPACK_SEQUENCE_LIST_code_body[939] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8d, 0x7e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x44, 0x48, 0x89, 0x6c, 0x24, 0x20, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x7f, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x8e, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xac, 0x01, 0x00, 0x00, 0xe9, 0xc8, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x6c, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x5e, 0x01, 0x00, 0x00, 0x4d, 0x8d, 0x6e, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x89, 0x07, 0x4d, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x74, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x75, 0x60, 0x48, 0x89, 0x5c, 0x24, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x0f, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x7c, 0x24, 0x18, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x1c, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x5d, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xe6, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x49, 0x8b, 0x1c, 0xc7, 0x8b, 0x03, 0xff, 0xc0, 0x74, 0xde, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xce, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0xf9, 0xfe, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x72, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xab, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_UNPACK_SEQUENCE_LIST_code_holes[32] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x326, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x330, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x356, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x368, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x377, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x38c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_UNPACK_SEQUENCE_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_UNPACK_SEQUENCE_LIST_data_holes[1];

// _CHECK_EG_MATCHplus_UNPACK_SEQUENCE_TUPLE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_UNPACK_SEQUENCE_TUPLE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 d5                      movq    %rdx, %rbp
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 4c 8d 7e f0                   leaq    -0x10(%rsi), %r15
// 23: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000025:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 2d: 48 89 d7                      movq    %rdx, %rdi
// 30: 4c 89 e6                      movq    %r12, %rsi
// 33: ff d0                         callq   *%rax
// 35: 85 c0                         testl   %eax, %eax
// 37: 78 41                         js      0x7a <_JIT_ENTRY+0x7a>
// 39: 48 89 6c 24 10                movq    %rbp, 0x10(%rsp)
// 3e: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 46: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 4f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000051:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 59: 48 89 e2                      movq    %rsp, %rdx
// 5c: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
// 61: 4c 89 ef                      movq    %r13, %rdi
// 64: 4c 89 e6                      movq    %r12, %rsi
// 67: ff d0                         callq   *%rax
// 69: 89 c5                         movl    %eax, %ebp
// 6b: 49 8b 45 00                   movq    (%r13), %rax
// 6f: 48 85 c0                      testq   %rax, %rax
// 72: 7e 18                         jle     0x8c <_JIT_ENTRY+0x8c>
// 74: 85 c0                         testl   %eax, %eax
// 76: 79 3a                         jns     0xb2 <_JIT_ENTRY+0xb2>
// 78: eb 4a                         jmp     0xc4 <_JIT_ENTRY+0xc4>
// 7a: 49 8b 45 00                   movq    (%r13), %rax
// 7e: 48 85 c0                      testq   %rax, %rax
// 81: 7e 57                         jle     0xda <_JIT_ENTRY+0xda>
// 83: 85 c0                         testl   %eax, %eax
// 85: 79 79                         jns     0x100 <_JIT_ENTRY+0x100>
// 87: e9 8a 00 00 00                jmp     0x116 <_JIT_ENTRY+0x116>
// 8c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008e:  R_X86_64_64  .rodata.str1.1
// 96: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000098:  R_X86_64_64  _Py_NegativeRefcount
// a0: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// a5: 4c 89 ea                      movq    %r13, %rdx
// a8: ff d0                         callq   *%rax
// aa: 49 8b 45 00                   movq    (%r13), %rax
// ae: 85 c0                         testl   %eax, %eax
// b0: 78 12                         js      0xc4 <_JIT_ENTRY+0xc4>
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// bc: ff d0                         callq   *%rax
// be: 49 ff 4d 00                   decq    (%r13)
// c2: 74 6c                         je      0x130 <_JIT_ENTRY+0x130>
// c4: 49 8b 04 24                   movq    (%r12), %rax
// c8: 48 85 c0                      testq   %rax, %rax
// cb: 7e 7b                         jle     0x148 <_JIT_ENTRY+0x148>
// cd: 85 c0                         testl   %eax, %eax
// cf: 0f 89 99 00 00 00             jns     0x16e <_JIT_ENTRY+0x16e>
// d5: e9 aa 00 00 00                jmp     0x184 <_JIT_ENTRY+0x184>
// da: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000dc:  R_X86_64_64  .rodata.str1.1
// e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e6:  R_X86_64_64  _Py_NegativeRefcount
// ee: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// f3: 4c 89 ea                      movq    %r13, %rdx
// f6: ff d0                         callq   *%rax
// f8: 49 8b 45 00                   movq    (%r13), %rax
// fc: 85 c0                         testl   %eax, %eax
// fe: 78 16                         js      0x116 <_JIT_ENTRY+0x116>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10a: ff d0                         callq   *%rax
// 10c: 49 ff 4d 00                   decq    (%r13)
// 110: 0f 84 76 01 00 00             je      0x28c <_JIT_ENTRY+0x28c>
// 116: 49 8b 04 24                   movq    (%r12), %rax
// 11a: 48 85 c0                      testq   %rax, %rax
// 11d: 0f 8e 85 01 00 00             jle     0x2a8 <_JIT_ENTRY+0x2a8>
// 123: 85 c0                         testl   %eax, %eax
// 125: 0f 89 a3 01 00 00             jns     0x2ce <_JIT_ENTRY+0x2ce>
// 12b: e9 bf 01 00 00                jmp     0x2ef <_JIT_ENTRY+0x2ef>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_Dealloc
// 13a: 4c 89 ef                      movq    %r13, %rdi
// 13d: ff d0                         callq   *%rax
// 13f: 49 8b 04 24                   movq    (%r12), %rax
// 143: 48 85 c0                      testq   %rax, %rax
// 146: 7f 85                         jg      0xcd <_JIT_ENTRY+0xcd>
// 148: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014a:  R_X86_64_64  .rodata.str1.1
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_NegativeRefcount
// 15c: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 161: 4c 89 e2                      movq    %r12, %rdx
// 164: ff d0                         callq   *%rax
// 166: 49 8b 04 24                   movq    (%r12), %rax
// 16a: 85 c0                         testl   %eax, %eax
// 16c: 78 16                         js      0x184 <_JIT_ENTRY+0x184>
// 16e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000170:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 178: ff d0                         callq   *%rax
// 17a: 49 ff 0c 24                   decq    (%r12)
// 17e: 0f 84 ef 00 00 00             je      0x273 <_JIT_ENTRY+0x273>
// 184: 85 ed                         testl   %ebp, %ebp
// 186: 0f 88 63 01 00 00             js      0x2ef <_JIT_ENTRY+0x2ef>
// 18c: 48 8b 3c 24                   movq    (%rsp), %rdi
// 190: 48 85 ff                      testq   %rdi, %rdi
// 193: 0f 84 56 01 00 00             je      0x2ef <_JIT_ENTRY+0x2ef>
// 199: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 19d: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000019f:  R_X86_64_64  _Py_NoneStruct
// 1a7: 4c 39 e7                      cmpq    %r12, %rdi
// 1aa: 74 10                         je      0x1bc <_JIT_ENTRY+0x1bc>
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  PyErr_SetHandledException
// 1b6: ff d0                         callq   *%rax
// 1b8: 4c 8b 24 24                   movq    (%rsp), %r12
// 1bc: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1c1: 49 89 07                      movq    %rax, (%r15)
// 1c4: 4d 89 65 00                   movq    %r12, (%r13)
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  PyTuple_Type
// 1d2: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1d7: 75 6d                         jne     0x246 <_JIT_ENTRY+0x246>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _JIT_OPARG
// 1e3: 0f b7 c0                      movzwl  %ax, %eax
// 1e6: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 1eb: 75 59                         jne     0x246 <_JIT_ENTRY+0x246>
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _JIT_OPARG
// 1f7: a9 ff ff 00 00                testl   $0xffff, %eax           # imm = 0xFFFF
// 1fc: 0f 8e 0d 01 00 00             jle     0x30f <_JIT_ENTRY+0x30f>
// 202: 44 0f b7 f8                   movzwl  %ax, %r15d
// 206: 49 ff c7                      incq    %r15
// 209: eb 1a                         jmp     0x225 <_JIT_ENTRY+0x225>
// 20b: 0f 1f 44 00 00                nopl    (%rax,%rax)
// 210: 49 89 6d 00                   movq    %rbp, (%r13)
// 214: 49 83 c5 08                   addq    $0x8, %r13
// 218: 49 ff cf                      decq    %r15
// 21b: 49 83 ff 01                   cmpq    $0x1, %r15
// 21f: 0f 8e ea 00 00 00             jle     0x30f <_JIT_ENTRY+0x30f>
// 225: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// 229: 49 8b 6c c4 18                movq    0x18(%r12,%rax,8), %rbp
// 22e: 8b 45 00                      movl    (%rbp), %eax
// 231: ff c0                         incl    %eax
// 233: 74 db                         je      0x210 <_JIT_ENTRY+0x210>
// 235: 89 45 00                      movl    %eax, (%rbp)
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 242: ff d0                         callq   *%rax
// 244: eb ca                         jmp     0x210 <_JIT_ENTRY+0x210>
// 246: 49 29 de                      subq    %rbx, %r14
// 249: 49 83 c6 b8                   addq    $-0x48, %r14
// 24d: 49 c1 ee 03                   shrq    $0x3, %r14
// 251: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 255: 48 8b 03                      movq    (%rbx), %rax
// 258: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000025a:  R_X86_64_64  _JIT_TARGET
// 262: 89 c9                         movl    %ecx, %ecx
// 264: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 268: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 26e: e9 8d 00 00 00                jmp     0x300 <_JIT_ENTRY+0x300>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_Dealloc
// 27d: 4c 89 e7                      movq    %r12, %rdi
// 280: ff d0                         callq   *%rax
// 282: 85 ed                         testl   %ebp, %ebp
// 284: 0f 89 02 ff ff ff             jns     0x18c <_JIT_ENTRY+0x18c>
// 28a: eb 63                         jmp     0x2ef <_JIT_ENTRY+0x2ef>
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _Py_Dealloc
// 296: 4c 89 ef                      movq    %r13, %rdi
// 299: ff d0                         callq   *%rax
// 29b: 49 8b 04 24                   movq    (%r12), %rax
// 29f: 48 85 c0                      testq   %rax, %rax
// 2a2: 0f 8f 7b fe ff ff             jg      0x123 <_JIT_ENTRY+0x123>
// 2a8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002aa:  R_X86_64_64  .rodata.str1.1
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_NegativeRefcount
// 2bc: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2c1: 4c 89 e2                      movq    %r12, %rdx
// 2c4: ff d0                         callq   *%rax
// 2c6: 49 8b 04 24                   movq    (%r12), %rax
// 2ca: 85 c0                         testl   %eax, %eax
// 2cc: 78 21                         js      0x2ef <_JIT_ENTRY+0x2ef>
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d8: ff d0                         callq   *%rax
// 2da: 49 ff 0c 24                   decq    (%r12)
// 2de: 75 0f                         jne     0x2ef <_JIT_ENTRY+0x2ef>
// 2e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e2:  R_X86_64_64  _Py_Dealloc
// 2ea: 4c 89 e7                      movq    %r12, %rdi
// 2ed: ff d0                         callq   *%rax
// 2ef: 49 29 df                      subq    %rbx, %r15
// 2f2: 49 83 c7 b8                   addq    $-0x48, %r15
// 2f6: 49 c1 ef 03                   shrq    $0x3, %r15
// 2fa: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2fe: 31 c0                         xorl    %eax, %eax
// 300: 48 83 c4 18                   addq    $0x18, %rsp
// 304: 5b                            popq    %rbx
// 305: 41 5c                         popq    %r12
// 307: 41 5d                         popq    %r13
// 309: 41 5e                         popq    %r14
// 30b: 41 5f                         popq    %r15
// 30d: 5d                            popq    %rbp
// 30e: c3                            retq
// 30f: 49 8b 04 24                   movq    (%r12), %rax
// 313: 48 85 c0                      testq   %rax, %rax
// 316: 7f 22                         jg      0x33a <_JIT_ENTRY+0x33a>
// 318: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000031a:  R_X86_64_64  .rodata.str1.1
// 322: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000324:  R_X86_64_64  _Py_NegativeRefcount
// 32c: be 99 03 00 00                movl    $0x399, %esi            # imm = 0x399
// 331: 4c 89 e2                      movq    %r12, %rdx
// 334: ff d0                         callq   *%rax
// 336: 49 8b 04 24                   movq    (%r12), %rax
// 33a: 85 c0                         testl   %eax, %eax
// 33c: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 341: 78 21                         js      0x364 <_JIT_ENTRY+0x364>
// 343: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000345:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 34d: ff d0                         callq   *%rax
// 34f: 49 ff 0c 24                   decq    (%r12)
// 353: 75 0f                         jne     0x364 <_JIT_ENTRY+0x364>
// 355: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000357:  R_X86_64_64  _Py_Dealloc
// 35f: 4c 89 e7                      movq    %r12, %rdi
// 362: ff d0                         callq   *%rax
// 364: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000366:  R_X86_64_64  _JIT_OPARG
// 36e: 0f b7 c0                      movzwl  %ax, %eax
// 371: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 375: 48 83 c6 f8                   addq    $-0x8, %rsi
// 379: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037b:  R_X86_64_64  _JIT_CONTINUE
// 383: 48 89 df                      movq    %rbx, %rdi
// 386: 4c 89 fa                      movq    %r15, %rdx
// 389: 48 83 c4 18                   addq    $0x18, %rsp
// 38d: 5b                            popq    %rbx
// 38e: 41 5c                         popq    %r12
// 390: 41 5d                         popq    %r13
// 392: 41 5e                         popq    %r14
// 394: 41 5f                         popq    %r15
// 396: 5d                            popq    %rbp
// 397: ff e0                         jmpq    *%rax
// 399: 
static const unsigned char _CHECK_EG_MATCHplus_UNPACK_SEQUENCE_TUPLE_code_body[922] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8d, 0x7e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x41, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x76, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x85, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xa3, 0x01, 0x00, 0x00, 0xe9, 0xbf, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xef, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x63, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x56, 0x01, 0x00, 0x00, 0x4d, 0x8d, 0x6e, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x24, 0x24, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x89, 0x07, 0x4d, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x6d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x75, 0x59, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x0d, 0x01, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x1a, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x49, 0x89, 0x6d, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xea, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc4, 0x18, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0xdb, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xca, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x02, 0xff, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x7b, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_UNPACK_SEQUENCE_TUPLE_code_holes[32] = {
    {0x25, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x324, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x345, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x357, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x366, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x37b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_UNPACK_SEQUENCE_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_UNPACK_SEQUENCE_TUPLE_data_holes[1];

// _CHECK_EG_MATCHplus_UNPACK_SEQUENCE_TWO_TUPLE
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_UNPACK_SEQUENCE_TWO_TUPLE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 5d 01 00 00             je      0x26d <_JIT_ENTRY+0x26d>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e 6c 01 00 00             jle     0x289 <_JIT_ENTRY+0x289>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 8a 01 00 00             jns     0x2af <_JIT_ENTRY+0x2af>
// 125: e9 a6 01 00 00                jmp     0x2d0 <_JIT_ENTRY+0x2d0>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 d6 00 00 00             je      0x254 <_JIT_ENTRY+0x254>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 4a 01 00 00             js      0x2d0 <_JIT_ENTRY+0x2d0>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 3c 01 00 00             je      0x2d0 <_JIT_ENTRY+0x2d0>
// 194: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 4c 39 e7                      cmpq    %r12, %rdi
// 1a1: 74 11                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyErr_SetHandledException
// 1ad: ff d0                         callq   *%rax
// 1af: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 1b4: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1b9: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 1bd: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  PyTuple_Type
// 1cb: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1d0: 75 55                         jne     0x227 <_JIT_ENTRY+0x227>
// 1d2: 49 83 7c 24 10 02             cmpq    $0x2, 0x10(%r12)
// 1d8: 75 4d                         jne     0x227 <_JIT_ENTRY+0x227>
// 1da: 49 8b 6c 24 20                movq    0x20(%r12), %rbp
// 1df: 8b 45 00                      movl    (%rbp), %eax
// 1e2: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001e4:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ec: ff c0                         incl    %eax
// 1ee: 74 06                         je      0x1f6 <_JIT_ENTRY+0x1f6>
// 1f0: 89 45 00                      movl    %eax, (%rbp)
// 1f3: 41 ff d5                      callq   *%r13
// 1f6: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// 1fa: 49 8b 6c 24 18                movq    0x18(%r12), %rbp
// 1ff: 8b 45 00                      movl    (%rbp), %eax
// 202: ff c0                         incl    %eax
// 204: 0f 85 ea 00 00 00             jne     0x2f4 <_JIT_ENTRY+0x2f4>
// 20a: 49 89 2e                      movq    %rbp, (%r14)
// 20d: 49 8b 04 24                   movq    (%r12), %rax
// 211: 48 85 c0                      testq   %rax, %rax
// 214: 0f 8e f0 00 00 00             jle     0x30a <_JIT_ENTRY+0x30a>
// 21a: 85 c0                         testl   %eax, %eax
// 21c: 0f 89 0e 01 00 00             jns     0x330 <_JIT_ENTRY+0x330>
// 222: e9 2a 01 00 00                jmp     0x351 <_JIT_ENTRY+0x351>
// 227: 49 29 de                      subq    %rbx, %r14
// 22a: 49 83 c6 b8                   addq    $-0x48, %r14
// 22e: 49 c1 ee 03                   shrq    $0x3, %r14
// 232: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 236: 48 8b 03                      movq    (%rbx), %rax
// 239: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023b:  R_X86_64_64  _JIT_TARGET
// 243: 89 c9                         movl    %ecx, %ecx
// 245: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 249: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 24f: e9 91 00 00 00                jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _Py_Dealloc
// 25e: 4c 89 e7                      movq    %r12, %rdi
// 261: ff d0                         callq   *%rax
// 263: 85 ed                         testl   %ebp, %ebp
// 265: 0f 89 1b ff ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 26b: eb 63                         jmp     0x2d0 <_JIT_ENTRY+0x2d0>
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_Dealloc
// 277: 4c 89 ef                      movq    %r13, %rdi
// 27a: ff d0                         callq   *%rax
// 27c: 49 8b 04 24                   movq    (%r12), %rax
// 280: 48 85 c0                      testq   %rax, %rax
// 283: 0f 8f 94 fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 289: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028b:  R_X86_64_64  .rodata.str1.1
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  _Py_NegativeRefcount
// 29d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2a2: 4c 89 e2                      movq    %r12, %rdx
// 2a5: ff d0                         callq   *%rax
// 2a7: 49 8b 04 24                   movq    (%r12), %rax
// 2ab: 85 c0                         testl   %eax, %eax
// 2ad: 78 21                         js      0x2d0 <_JIT_ENTRY+0x2d0>
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b9: ff d0                         callq   *%rax
// 2bb: 49 ff 0c 24                   decq    (%r12)
// 2bf: 75 0f                         jne     0x2d0 <_JIT_ENTRY+0x2d0>
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  _Py_Dealloc
// 2cb: 4c 89 e7                      movq    %r12, %rdi
// 2ce: ff d0                         callq   *%rax
// 2d0: 49 83 c6 f0                   addq    $-0x10, %r14
// 2d4: 49 29 de                      subq    %rbx, %r14
// 2d7: 49 83 c6 b8                   addq    $-0x48, %r14
// 2db: 49 c1 ee 03                   shrq    $0x3, %r14
// 2df: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2e3: 31 c0                         xorl    %eax, %eax
// 2e5: 48 83 c4 18                   addq    $0x18, %rsp
// 2e9: 5b                            popq    %rbx
// 2ea: 41 5c                         popq    %r12
// 2ec: 41 5d                         popq    %r13
// 2ee: 41 5e                         popq    %r14
// 2f0: 41 5f                         popq    %r15
// 2f2: 5d                            popq    %rbp
// 2f3: c3                            retq
// 2f4: 89 45 00                      movl    %eax, (%rbp)
// 2f7: 41 ff d5                      callq   *%r13
// 2fa: 49 89 2e                      movq    %rbp, (%r14)
// 2fd: 49 8b 04 24                   movq    (%r12), %rax
// 301: 48 85 c0                      testq   %rax, %rax
// 304: 0f 8f 10 ff ff ff             jg      0x21a <_JIT_ENTRY+0x21a>
// 30a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000030c:  R_X86_64_64  .rodata.str1.1
// 314: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000316:  R_X86_64_64  _Py_NegativeRefcount
// 31e: be 87 03 00 00                movl    $0x387, %esi            # imm = 0x387
// 323: 4c 89 e2                      movq    %r12, %rdx
// 326: ff d0                         callq   *%rax
// 328: 49 8b 04 24                   movq    (%r12), %rax
// 32c: 85 c0                         testl   %eax, %eax
// 32e: 78 21                         js      0x351 <_JIT_ENTRY+0x351>
// 330: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000332:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 33a: ff d0                         callq   *%rax
// 33c: 49 ff 0c 24                   decq    (%r12)
// 340: 75 0f                         jne     0x351 <_JIT_ENTRY+0x351>
// 342: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000344:  R_X86_64_64  _Py_Dealloc
// 34c: 4c 89 e7                      movq    %r12, %rdi
// 34f: ff d0                         callq   *%rax
// 351: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000353:  R_X86_64_64  _JIT_OPARG
// 35b: 0f b7 c0                      movzwl  %ax, %eax
// 35e: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 362: 48 83 c6 f8                   addq    $-0x8, %rsi
// 366: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000368:  R_X86_64_64  _JIT_CONTINUE
// 370: 48 89 df                      movq    %rbx, %rdi
// 373: 4c 89 fa                      movq    %r15, %rdx
// 376: 48 83 c4 18                   addq    $0x18, %rsp
// 37a: 5b                            popq    %rbx
// 37b: 41 5c                         popq    %r12
// 37d: 41 5d                         popq    %r13
// 37f: 41 5e                         popq    %r14
// 381: 41 5f                         popq    %r15
// 383: 5d                            popq    %rbp
// 384: ff e0                         jmpq    *%rax
// 386: 
static const unsigned char _CHECK_EG_MATCHplus_UNPACK_SEQUENCE_TWO_TUPLE_code_body[903] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x5d, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x6c, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x8a, 0x01, 0x00, 0x00, 0xe9, 0xa6, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xd6, 0x00, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x4a, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x3c, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x89, 0x46, 0xf0, 0x4d, 0x89, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x55, 0x49, 0x83, 0x7c, 0x24, 0x10, 0x02, 0x75, 0x4d, 0x49, 0x8b, 0x6c, 0x24, 0x20, 0x8b, 0x45, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x06, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd5, 0x49, 0x89, 0x6e, 0xf8, 0x49, 0x8b, 0x6c, 0x24, 0x18, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x0f, 0x85, 0xea, 0x00, 0x00, 0x00, 0x49, 0x89, 0x2e, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xf0, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x0e, 0x01, 0x00, 0x00, 0xe9, 0x2a, 0x01, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x91, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0x1b, 0xff, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x94, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xf0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd5, 0x49, 0x89, 0x2e, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x10, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _CHECK_EG_MATCHplus_UNPACK_SEQUENCE_TWO_TUPLE_code_holes[30] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x23b, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x316, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x332, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x344, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x353, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x368, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_UNPACK_SEQUENCE_TWO_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_UNPACK_SEQUENCE_TWO_TUPLE_data_holes[1];

// _CHECK_EG_MATCHplus_WITH_EXCEPT_START
// 
// /tmp/tmpn8zusf08/_CHECK_EG_MATCHplus_WITH_EXCEPT_START.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 48                   subq    $0x48, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000021:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 29: 48 89 d7                      movq    %rdx, %rdi
// 2c: 4c 89 e6                      movq    %r12, %rsi
// 2f: ff d0                         callq   *%rax
// 31: 85 c0                         testl   %eax, %eax
// 33: 78 3f                         js      0x74 <_JIT_ENTRY+0x74>
// 35: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 3e: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 51: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 56: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 5b: 4c 89 ef                      movq    %r13, %rdi
// 5e: 4c 89 e6                      movq    %r12, %rsi
// 61: ff d0                         callq   *%rax
// 63: 89 c5                         movl    %eax, %ebp
// 65: 49 8b 45 00                   movq    (%r13), %rax
// 69: 48 85 c0                      testq   %rax, %rax
// 6c: 7e 18                         jle     0x86 <_JIT_ENTRY+0x86>
// 6e: 85 c0                         testl   %eax, %eax
// 70: 79 3a                         jns     0xac <_JIT_ENTRY+0xac>
// 72: eb 4a                         jmp     0xbe <_JIT_ENTRY+0xbe>
// 74: 49 8b 45 00                   movq    (%r13), %rax
// 78: 48 85 c0                      testq   %rax, %rax
// 7b: 7e 57                         jle     0xd4 <_JIT_ENTRY+0xd4>
// 7d: 85 c0                         testl   %eax, %eax
// 7f: 79 79                         jns     0xfa <_JIT_ENTRY+0xfa>
// 81: e9 8a 00 00 00                jmp     0x110 <_JIT_ENTRY+0x110>
// 86: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000088:  R_X86_64_64  .rodata.str1.1
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_NegativeRefcount
// 9a: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 9f: 4c 89 ea                      movq    %r13, %rdx
// a2: ff d0                         callq   *%rax
// a4: 49 8b 45 00                   movq    (%r13), %rax
// a8: 85 c0                         testl   %eax, %eax
// aa: 78 12                         js      0xbe <_JIT_ENTRY+0xbe>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b6: ff d0                         callq   *%rax
// b8: 49 ff 4d 00                   decq    (%r13)
// bc: 74 6c                         je      0x12a <_JIT_ENTRY+0x12a>
// be: 49 8b 04 24                   movq    (%r12), %rax
// c2: 48 85 c0                      testq   %rax, %rax
// c5: 7e 7b                         jle     0x142 <_JIT_ENTRY+0x142>
// c7: 85 c0                         testl   %eax, %eax
// c9: 0f 89 99 00 00 00             jns     0x168 <_JIT_ENTRY+0x168>
// cf: e9 aa 00 00 00                jmp     0x17e <_JIT_ENTRY+0x17e>
// d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000d6:  R_X86_64_64  .rodata.str1.1
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _Py_NegativeRefcount
// e8: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 49 8b 45 00                   movq    (%r13), %rax
// f6: 85 c0                         testl   %eax, %eax
// f8: 78 16                         js      0x110 <_JIT_ENTRY+0x110>
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 104: ff d0                         callq   *%rax
// 106: 49 ff 4d 00                   decq    (%r13)
// 10a: 0f 84 ba 01 00 00             je      0x2ca <_JIT_ENTRY+0x2ca>
// 110: 49 8b 04 24                   movq    (%r12), %rax
// 114: 48 85 c0                      testq   %rax, %rax
// 117: 0f 8e c9 01 00 00             jle     0x2e6 <_JIT_ENTRY+0x2e6>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 0f 89 e7 01 00 00             jns     0x30c <_JIT_ENTRY+0x30c>
// 125: e9 03 02 00 00                jmp     0x32d <_JIT_ENTRY+0x32d>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_Dealloc
// 134: 4c 89 ef                      movq    %r13, %rdi
// 137: ff d0                         callq   *%rax
// 139: 49 8b 04 24                   movq    (%r12), %rax
// 13d: 48 85 c0                      testq   %rax, %rax
// 140: 7f 85                         jg      0xc7 <_JIT_ENTRY+0xc7>
// 142: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_NegativeRefcount
// 156: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 15b: 4c 89 e2                      movq    %r12, %rdx
// 15e: ff d0                         callq   *%rax
// 160: 49 8b 04 24                   movq    (%r12), %rax
// 164: 85 c0                         testl   %eax, %eax
// 166: 78 16                         js      0x17e <_JIT_ENTRY+0x17e>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 172: ff d0                         callq   *%rax
// 174: 49 ff 0c 24                   decq    (%r12)
// 178: 0f 84 33 01 00 00             je      0x2b1 <_JIT_ENTRY+0x2b1>
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 0f 88 a7 01 00 00             js      0x32d <_JIT_ENTRY+0x32d>
// 186: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 18b: 48 85 ff                      testq   %rdi, %rdi
// 18e: 0f 84 99 01 00 00             je      0x32d <_JIT_ENTRY+0x32d>
// 194: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 4d 89 e5                      movq    %r12, %r13
// 1a1: 4c 39 e7                      cmpq    %r12, %rdi
// 1a4: 74 11                         je      0x1b7 <_JIT_ENTRY+0x1b7>
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  PyErr_SetHandledException
// 1b0: ff d0                         callq   *%rax
// 1b2: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 1b7: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1bc: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 1c0: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 1c4: 48 8b 43 e0                   movq    -0x20(%rbx), %rax
// 1c8: 48 89 44 24 40                movq    %rax, 0x40(%rsp)
// 1cd: 49 8b 45 08                   movq    0x8(%r13), %rax
// 1d1: 48 89 44 24 38                movq    %rax, 0x38(%rsp)
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  PyException_GetTraceback
// 1e0: 4c 89 ef                      movq    %r13, %rdi
// 1e3: ff d0                         callq   *%rax
// 1e5: 48 85 c0                      testq   %rax, %rax
// 1e8: 74 55                         je      0x23f <_JIT_ENTRY+0x23f>
// 1ea: 48 89 c5                      movq    %rax, %rbp
// 1ed: 48 8b 00                      movq    (%rax), %rax
// 1f0: 48 85 c0                      testq   %rax, %rax
// 1f3: 7f 22                         jg      0x217 <_JIT_ENTRY+0x217>
// 1f5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f7:  R_X86_64_64  .rodata.str1.1
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_NegativeRefcount
// 209: be 64 09 00 00                movl    $0x964, %esi            # imm = 0x964
// 20e: 48 89 ea                      movq    %rbp, %rdx
// 211: ff d0                         callq   *%rax
// 213: 48 8b 45 00                   movq    (%rbp), %rax
// 217: 85 c0                         testl   %eax, %eax
// 219: 78 21                         js      0x23c <_JIT_ENTRY+0x23c>
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 225: ff d0                         callq   *%rax
// 227: 48 ff 4d 00                   decq    (%rbp)
// 22b: 75 0f                         jne     0x23c <_JIT_ENTRY+0x23c>
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_Dealloc
// 237: 48 89 ef                      movq    %rbp, %rdi
// 23a: ff d0                         callq   *%rax
// 23c: 49 89 ec                      movq    %rbp, %r12
// 23f: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 248: 48 8d 74 24 18                leaq    0x18(%rsp), %rsi
// 24d: 48 8b 44 24 38                movq    0x38(%rsp), %rax
// 252: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 257: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 25c: 4c 89 64 24 28                movq    %r12, 0x28(%rsp)
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  PyObject_Vectorcall
// 26b: 48 ba 03 00 00 00 00 00 00 80 movabsq $-0x7ffffffffffffffd, %rdx # imm = 0x8000000000000003
// 275: 48 8b 7c 24 40                movq    0x40(%rsp), %rdi
// 27a: 31 c9                         xorl    %ecx, %ecx
// 27c: ff d0                         callq   *%rax
// 27e: 48 85 c0                      testq   %rax, %rax
// 281: 0f 84 aa 00 00 00             je      0x331 <_JIT_ENTRY+0x331>
// 287: 48 89 03                      movq    %rax, (%rbx)
// 28a: 48 83 c3 08                   addq    $0x8, %rbx
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _JIT_CONTINUE
// 298: 4c 89 f7                      movq    %r14, %rdi
// 29b: 48 89 de                      movq    %rbx, %rsi
// 29e: 4c 89 fa                      movq    %r15, %rdx
// 2a1: 48 83 c4 48                   addq    $0x48, %rsp
// 2a5: 5b                            popq    %rbx
// 2a6: 41 5c                         popq    %r12
// 2a8: 41 5d                         popq    %r13
// 2aa: 41 5e                         popq    %r14
// 2ac: 41 5f                         popq    %r15
// 2ae: 5d                            popq    %rbp
// 2af: ff e0                         jmpq    *%rax
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _Py_Dealloc
// 2bb: 4c 89 e7                      movq    %r12, %rdi
// 2be: ff d0                         callq   *%rax
// 2c0: 85 ed                         testl   %ebp, %ebp
// 2c2: 0f 89 be fe ff ff             jns     0x186 <_JIT_ENTRY+0x186>
// 2c8: eb 63                         jmp     0x32d <_JIT_ENTRY+0x32d>
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  _Py_Dealloc
// 2d4: 4c 89 ef                      movq    %r13, %rdi
// 2d7: ff d0                         callq   *%rax
// 2d9: 49 8b 04 24                   movq    (%r12), %rax
// 2dd: 48 85 c0                      testq   %rax, %rax
// 2e0: 0f 8f 37 fe ff ff             jg      0x11d <_JIT_ENTRY+0x11d>
// 2e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e8:  R_X86_64_64  .rodata.str1.1
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  _Py_NegativeRefcount
// 2fa: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 2ff: 4c 89 e2                      movq    %r12, %rdx
// 302: ff d0                         callq   *%rax
// 304: 49 8b 04 24                   movq    (%r12), %rax
// 308: 85 c0                         testl   %eax, %eax
// 30a: 78 21                         js      0x32d <_JIT_ENTRY+0x32d>
// 30c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 316: ff d0                         callq   *%rax
// 318: 49 ff 0c 24                   decq    (%r12)
// 31c: 75 0f                         jne     0x32d <_JIT_ENTRY+0x32d>
// 31e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000320:  R_X86_64_64  _Py_Dealloc
// 328: 4c 89 e7                      movq    %r12, %rdi
// 32b: ff d0                         callq   *%rax
// 32d: 48 83 c3 f0                   addq    $-0x10, %rbx
// 331: 4c 29 f3                      subq    %r14, %rbx
// 334: 48 83 c3 b8                   addq    $-0x48, %rbx
// 338: 48 c1 eb 03                   shrq    $0x3, %rbx
// 33c: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 340: 31 c0                         xorl    %eax, %eax
// 342: 48 83 c4 48                   addq    $0x48, %rsp
// 346: 5b                            popq    %rbx
// 347: 41 5c                         popq    %r12
// 349: 41 5d                         popq    %r13
// 34b: 41 5e                         popq    %r14
// 34d: 41 5f                         popq    %r15
// 34f: 5d                            popq    %rbp
// 350: c3                            retq
// 351: 
static const unsigned char _CHECK_EG_MATCHplus_WITH_EXCEPT_START_code_body[850] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x48, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x6e, 0xf0, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x18, 0x85, 0xc0, 0x79, 0x3a, 0xeb, 0x4a, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x57, 0x85, 0xc0, 0x79, 0x79, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x6c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7b, 0x85, 0xc0, 0x0f, 0x89, 0x99, 0x00, 0x00, 0x00, 0xe9, 0xaa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xba, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0xc9, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xe7, 0x01, 0x00, 0x00, 0xe9, 0x03, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x85, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x33, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0xa7, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x99, 0x01, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xe5, 0x4c, 0x39, 0xe7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x89, 0x43, 0xf0, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0x8b, 0x43, 0xe0, 0x48, 0x89, 0x44, 0x24, 0x40, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x89, 0x44, 0x24, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x55, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x64, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xec, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x74, 0x24, 0x18, 0x48, 0x8b, 0x44, 0x24, 0x38, 0x48, 0x89, 0x44, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x4c, 0x89, 0x64, 0x24, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x48, 0x8b, 0x7c, 0x24, 0x40, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xaa, 0x00, 0x00, 0x00, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x48, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0xbe, 0xfe, 0xff, 0xff, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8f, 0x37, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x48, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _CHECK_EG_MATCHplus_WITH_EXCEPT_START_code_holes[28] = {
    {0x21, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x88, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyException_GetTraceback, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Vectorcall, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x30e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x320, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _CHECK_EG_MATCHplus_WITH_EXCEPT_START_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _CHECK_EG_MATCHplus_WITH_EXCEPT_START_data_holes[1];

#define INIT_STENCIL(STENCIL) {                         \
    .body_size = Py_ARRAY_LENGTH(STENCIL##_body) - 1,   \
    .body = STENCIL##_body,                             \
    .holes_size = Py_ARRAY_LENGTH(STENCIL##_holes) - 1, \
    .holes = STENCIL##_holes,                           \
}

#define INIT_STENCIL_GROUP(OP) {     \
    .code = INIT_STENCIL(OP##_code), \
    .data = INIT_STENCIL(OP##_data), \
}

static const StencilGroup stencil_groups[512] = {
    [_CHECK_EG_MATCHplus_BEFORE_ASYNC_WITH] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BEFORE_ASYNC_WITH),
    [_CHECK_EG_MATCHplus_BEFORE_WITH] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BEFORE_WITH),
    [_CHECK_EG_MATCHplus_BINARY_OP] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BINARY_OP),
    [_CHECK_EG_MATCHplus_BINARY_OP_ADD_FLOAT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BINARY_OP_ADD_FLOAT),
    [_CHECK_EG_MATCHplus_BINARY_OP_ADD_INT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BINARY_OP_ADD_INT),
    [_CHECK_EG_MATCHplus_BINARY_OP_ADD_UNICODE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BINARY_OP_ADD_UNICODE),
    [_CHECK_EG_MATCHplus_BINARY_OP_MULTIPLY_FLOAT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BINARY_OP_MULTIPLY_FLOAT),
    [_CHECK_EG_MATCHplus_BINARY_OP_MULTIPLY_INT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BINARY_OP_MULTIPLY_INT),
    [_CHECK_EG_MATCHplus_BINARY_OP_SUBTRACT_FLOAT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BINARY_OP_SUBTRACT_FLOAT),
    [_CHECK_EG_MATCHplus_BINARY_OP_SUBTRACT_INT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BINARY_OP_SUBTRACT_INT),
    [_CHECK_EG_MATCHplus_BINARY_SLICE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BINARY_SLICE),
    [_CHECK_EG_MATCHplus_BINARY_SUBSCR] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BINARY_SUBSCR),
    [_CHECK_EG_MATCHplus_BINARY_SUBSCR_DICT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BINARY_SUBSCR_DICT),
    [_CHECK_EG_MATCHplus_BINARY_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BINARY_SUBSCR_LIST_INT),
    [_CHECK_EG_MATCHplus_BINARY_SUBSCR_STR_INT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BINARY_SUBSCR_STR_INT),
    [_CHECK_EG_MATCHplus_BINARY_SUBSCR_TUPLE_INT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BINARY_SUBSCR_TUPLE_INT),
    [_CHECK_EG_MATCHplus_BUILD_CONST_KEY_MAP] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BUILD_CONST_KEY_MAP),
    [_CHECK_EG_MATCHplus_BUILD_LIST] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BUILD_LIST),
    [_CHECK_EG_MATCHplus_BUILD_MAP] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BUILD_MAP),
    [_CHECK_EG_MATCHplus_BUILD_SET] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BUILD_SET),
    [_CHECK_EG_MATCHplus_BUILD_SLICE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BUILD_SLICE),
    [_CHECK_EG_MATCHplus_BUILD_STRING] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BUILD_STRING),
    [_CHECK_EG_MATCHplus_BUILD_TUPLE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_BUILD_TUPLE),
    [_CHECK_EG_MATCHplus_CALL_BUILTIN_CLASS] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CALL_BUILTIN_CLASS),
    [_CHECK_EG_MATCHplus_CALL_BUILTIN_FAST] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CALL_BUILTIN_FAST),
    [_CHECK_EG_MATCHplus_CALL_BUILTIN_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CALL_BUILTIN_FAST_WITH_KEYWORDS),
    [_CHECK_EG_MATCHplus_CALL_BUILTIN_O] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CALL_BUILTIN_O),
    [_CHECK_EG_MATCHplus_CALL_INTRINSIC_1] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CALL_INTRINSIC_1),
    [_CHECK_EG_MATCHplus_CALL_INTRINSIC_2] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CALL_INTRINSIC_2),
    [_CHECK_EG_MATCHplus_CALL_ISINSTANCE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CALL_ISINSTANCE),
    [_CHECK_EG_MATCHplus_CALL_LEN] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CALL_LEN),
    [_CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_FAST] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_FAST),
    [_CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS),
    [_CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_NOARGS] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_NOARGS),
    [_CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_O] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CALL_METHOD_DESCRIPTOR_O),
    [_CHECK_EG_MATCHplus_CALL_STR_1] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CALL_STR_1),
    [_CHECK_EG_MATCHplus_CALL_TUPLE_1] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CALL_TUPLE_1),
    [_CHECK_EG_MATCHplus_CALL_TYPE_1] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CALL_TYPE_1),
    [_CHECK_EG_MATCHplus_CHECK_ATTR_CLASS] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CHECK_ATTR_CLASS),
    [_CHECK_EG_MATCHplus_CHECK_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CHECK_ATTR_METHOD_LAZY_DICT),
    [_CHECK_EG_MATCHplus_CHECK_ATTR_MODULE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CHECK_ATTR_MODULE),
    [_CHECK_EG_MATCHplus_CHECK_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CHECK_ATTR_WITH_HINT),
    [_CHECK_EG_MATCHplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS),
    [_CHECK_EG_MATCHplus_CHECK_EG_MATCH] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CHECK_EG_MATCH),
    [_CHECK_EG_MATCHplus_CHECK_EXC_MATCH] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CHECK_EXC_MATCH),
    [_CHECK_EG_MATCHplus_CHECK_FUNCTION_EXACT_ARGS] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CHECK_FUNCTION_EXACT_ARGS),
    [_CHECK_EG_MATCHplus_CHECK_MANAGED_OBJECT_HAS_VALUES] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CHECK_MANAGED_OBJECT_HAS_VALUES),
    [_CHECK_EG_MATCHplus_CHECK_PEP_523] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CHECK_PEP_523),
    [_CHECK_EG_MATCHplus_CHECK_STACK_SPACE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CHECK_STACK_SPACE),
    [_CHECK_EG_MATCHplus_CHECK_VALIDITY] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CHECK_VALIDITY),
    [_CHECK_EG_MATCHplus_COMPARE_OP] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_COMPARE_OP),
    [_CHECK_EG_MATCHplus_COMPARE_OP_FLOAT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_COMPARE_OP_FLOAT),
    [_CHECK_EG_MATCHplus_COMPARE_OP_INT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_COMPARE_OP_INT),
    [_CHECK_EG_MATCHplus_COMPARE_OP_STR] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_COMPARE_OP_STR),
    [_CHECK_EG_MATCHplus_CONTAINS_OP] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CONTAINS_OP),
    [_CHECK_EG_MATCHplus_CONVERT_VALUE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_CONVERT_VALUE),
    [_CHECK_EG_MATCHplus_COPY] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_COPY),
    [_CHECK_EG_MATCHplus_COPY_FREE_VARS] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_COPY_FREE_VARS),
    [_CHECK_EG_MATCHplus_DELETE_ATTR] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_DELETE_ATTR),
    [_CHECK_EG_MATCHplus_DELETE_DEREF] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_DELETE_DEREF),
    [_CHECK_EG_MATCHplus_DELETE_FAST] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_DELETE_FAST),
    [_CHECK_EG_MATCHplus_DELETE_GLOBAL] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_DELETE_GLOBAL),
    [_CHECK_EG_MATCHplus_DELETE_NAME] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_DELETE_NAME),
    [_CHECK_EG_MATCHplus_DELETE_SUBSCR] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_DELETE_SUBSCR),
    [_CHECK_EG_MATCHplus_DICT_MERGE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_DICT_MERGE),
    [_CHECK_EG_MATCHplus_DICT_UPDATE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_DICT_UPDATE),
    [_CHECK_EG_MATCHplus_END_SEND] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_END_SEND),
    [_CHECK_EG_MATCHplus_EXIT_INIT_CHECK] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_EXIT_INIT_CHECK),
    [_CHECK_EG_MATCHplus_EXIT_TRACE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_EXIT_TRACE),
    [_CHECK_EG_MATCHplus_FORMAT_SIMPLE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_FORMAT_SIMPLE),
    [_CHECK_EG_MATCHplus_FORMAT_WITH_SPEC] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_FORMAT_WITH_SPEC),
    [_CHECK_EG_MATCHplus_FOR_ITER_TIER_TWO] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_FOR_ITER_TIER_TWO),
    [_CHECK_EG_MATCHplus_GET_AITER] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_GET_AITER),
    [_CHECK_EG_MATCHplus_GET_ANEXT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_GET_ANEXT),
    [_CHECK_EG_MATCHplus_GET_AWAITABLE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_GET_AWAITABLE),
    [_CHECK_EG_MATCHplus_GET_ITER] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_GET_ITER),
    [_CHECK_EG_MATCHplus_GET_LEN] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_GET_LEN),
    [_CHECK_EG_MATCHplus_GET_YIELD_FROM_ITER] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_GET_YIELD_FROM_ITER),
    [_CHECK_EG_MATCHplus_GUARD_BOTH_FLOAT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_GUARD_BOTH_FLOAT),
    [_CHECK_EG_MATCHplus_GUARD_BOTH_INT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_GUARD_BOTH_INT),
    [_CHECK_EG_MATCHplus_GUARD_BOTH_UNICODE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_GUARD_BOTH_UNICODE),
    [_CHECK_EG_MATCHplus_GUARD_BUILTINS_VERSION] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_GUARD_BUILTINS_VERSION),
    [_CHECK_EG_MATCHplus_GUARD_DORV_VALUES] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_GUARD_DORV_VALUES),
    [_CHECK_EG_MATCHplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT),
    [_CHECK_EG_MATCHplus_GUARD_GLOBALS_VERSION] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_GUARD_GLOBALS_VERSION),
    [_CHECK_EG_MATCHplus_GUARD_IS_FALSE_POP] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_GUARD_IS_FALSE_POP),
    [_CHECK_EG_MATCHplus_GUARD_IS_NONE_POP] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_GUARD_IS_NONE_POP),
    [_CHECK_EG_MATCHplus_GUARD_IS_NOT_NONE_POP] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_GUARD_IS_NOT_NONE_POP),
    [_CHECK_EG_MATCHplus_GUARD_IS_TRUE_POP] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_GUARD_IS_TRUE_POP),
    [_CHECK_EG_MATCHplus_GUARD_KEYS_VERSION] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_GUARD_KEYS_VERSION),
    [_CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_LIST] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_LIST),
    [_CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_RANGE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_RANGE),
    [_CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_TUPLE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_GUARD_NOT_EXHAUSTED_TUPLE),
    [_CHECK_EG_MATCHplus_GUARD_TYPE_VERSION] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_GUARD_TYPE_VERSION),
    [_CHECK_EG_MATCHplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS),
    [_CHECK_EG_MATCHplus_INIT_CALL_PY_EXACT_ARGS] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_INIT_CALL_PY_EXACT_ARGS),
    [_CHECK_EG_MATCHplus_INSERT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_INSERT),
    [_CHECK_EG_MATCHplus_IS_NONE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_IS_NONE),
    [_CHECK_EG_MATCHplus_IS_OP] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_IS_OP),
    [_CHECK_EG_MATCHplus_ITER_CHECK_LIST] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_ITER_CHECK_LIST),
    [_CHECK_EG_MATCHplus_ITER_CHECK_RANGE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_ITER_CHECK_RANGE),
    [_CHECK_EG_MATCHplus_ITER_CHECK_TUPLE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_ITER_CHECK_TUPLE),
    [_CHECK_EG_MATCHplus_ITER_NEXT_LIST] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_ITER_NEXT_LIST),
    [_CHECK_EG_MATCHplus_ITER_NEXT_RANGE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_ITER_NEXT_RANGE),
    [_CHECK_EG_MATCHplus_ITER_NEXT_TUPLE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_ITER_NEXT_TUPLE),
    [_CHECK_EG_MATCHplus_JUMP_TO_TOP] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_JUMP_TO_TOP),
    [_CHECK_EG_MATCHplus_LIST_APPEND] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LIST_APPEND),
    [_CHECK_EG_MATCHplus_LIST_EXTEND] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LIST_EXTEND),
    [_CHECK_EG_MATCHplus_LOAD_ASSERTION_ERROR] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_ASSERTION_ERROR),
    [_CHECK_EG_MATCHplus_LOAD_ATTR] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_ATTR),
    [_CHECK_EG_MATCHplus_LOAD_ATTR_CLASS] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_ATTR_CLASS),
    [_CHECK_EG_MATCHplus_LOAD_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_ATTR_INSTANCE_VALUE),
    [_CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_LAZY_DICT),
    [_CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_NO_DICT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_NO_DICT),
    [_CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_WITH_VALUES] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_ATTR_METHOD_WITH_VALUES),
    [_CHECK_EG_MATCHplus_LOAD_ATTR_MODULE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_ATTR_MODULE),
    [_CHECK_EG_MATCHplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT),
    [_CHECK_EG_MATCHplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES),
    [_CHECK_EG_MATCHplus_LOAD_ATTR_SLOT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_ATTR_SLOT),
    [_CHECK_EG_MATCHplus_LOAD_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_ATTR_WITH_HINT),
    [_CHECK_EG_MATCHplus_LOAD_BUILD_CLASS] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_BUILD_CLASS),
    [_CHECK_EG_MATCHplus_LOAD_CONST] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_CONST),
    [_CHECK_EG_MATCHplus_LOAD_DEREF] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_DEREF),
    [_CHECK_EG_MATCHplus_LOAD_FAST] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_FAST),
    [_CHECK_EG_MATCHplus_LOAD_FAST_AND_CLEAR] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_FAST_AND_CLEAR),
    [_CHECK_EG_MATCHplus_LOAD_FAST_CHECK] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_FAST_CHECK),
    [_CHECK_EG_MATCHplus_LOAD_FROM_DICT_OR_DEREF] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_FROM_DICT_OR_DEREF),
    [_CHECK_EG_MATCHplus_LOAD_FROM_DICT_OR_GLOBALS] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_FROM_DICT_OR_GLOBALS),
    [_CHECK_EG_MATCHplus_LOAD_GLOBAL] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_GLOBAL),
    [_CHECK_EG_MATCHplus_LOAD_GLOBAL_BUILTINS] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_GLOBAL_BUILTINS),
    [_CHECK_EG_MATCHplus_LOAD_GLOBAL_MODULE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_GLOBAL_MODULE),
    [_CHECK_EG_MATCHplus_LOAD_LOCALS] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_LOCALS),
    [_CHECK_EG_MATCHplus_LOAD_NAME] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_NAME),
    [_CHECK_EG_MATCHplus_LOAD_SUPER_ATTR_ATTR] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_SUPER_ATTR_ATTR),
    [_CHECK_EG_MATCHplus_LOAD_SUPER_ATTR_METHOD] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_LOAD_SUPER_ATTR_METHOD),
    [_CHECK_EG_MATCHplus_MAKE_CELL] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_MAKE_CELL),
    [_CHECK_EG_MATCHplus_MAKE_FUNCTION] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_MAKE_FUNCTION),
    [_CHECK_EG_MATCHplus_MAP_ADD] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_MAP_ADD),
    [_CHECK_EG_MATCHplus_MATCH_CLASS] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_MATCH_CLASS),
    [_CHECK_EG_MATCHplus_MATCH_KEYS] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_MATCH_KEYS),
    [_CHECK_EG_MATCHplus_MATCH_MAPPING] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_MATCH_MAPPING),
    [_CHECK_EG_MATCHplus_MATCH_SEQUENCE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_MATCH_SEQUENCE),
    [_CHECK_EG_MATCHplus_NOP] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_NOP),
    [_CHECK_EG_MATCHplus_POP_EXCEPT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_POP_EXCEPT),
    [_CHECK_EG_MATCHplus_POP_FRAME] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_POP_FRAME),
    [_CHECK_EG_MATCHplus_POP_TOP] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_POP_TOP),
    [_CHECK_EG_MATCHplus_PUSH_EXC_INFO] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_PUSH_EXC_INFO),
    [_CHECK_EG_MATCHplus_PUSH_FRAME] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_PUSH_FRAME),
    [_CHECK_EG_MATCHplus_PUSH_NULL] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_PUSH_NULL),
    [_CHECK_EG_MATCHplus_RESUME_CHECK] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_RESUME_CHECK),
    [_CHECK_EG_MATCHplus_SAVE_RETURN_OFFSET] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_SAVE_RETURN_OFFSET),
    [_CHECK_EG_MATCHplus_SETUP_ANNOTATIONS] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_SETUP_ANNOTATIONS),
    [_CHECK_EG_MATCHplus_SET_ADD] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_SET_ADD),
    [_CHECK_EG_MATCHplus_SET_FUNCTION_ATTRIBUTE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_SET_FUNCTION_ATTRIBUTE),
    [_CHECK_EG_MATCHplus_SET_IP] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_SET_IP),
    [_CHECK_EG_MATCHplus_SET_UPDATE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_SET_UPDATE),
    [_CHECK_EG_MATCHplus_STORE_ATTR] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_STORE_ATTR),
    [_CHECK_EG_MATCHplus_STORE_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_STORE_ATTR_INSTANCE_VALUE),
    [_CHECK_EG_MATCHplus_STORE_ATTR_SLOT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_STORE_ATTR_SLOT),
    [_CHECK_EG_MATCHplus_STORE_DEREF] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_STORE_DEREF),
    [_CHECK_EG_MATCHplus_STORE_FAST] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_STORE_FAST),
    [_CHECK_EG_MATCHplus_STORE_GLOBAL] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_STORE_GLOBAL),
    [_CHECK_EG_MATCHplus_STORE_NAME] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_STORE_NAME),
    [_CHECK_EG_MATCHplus_STORE_SLICE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_STORE_SLICE),
    [_CHECK_EG_MATCHplus_STORE_SUBSCR] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_STORE_SUBSCR),
    [_CHECK_EG_MATCHplus_STORE_SUBSCR_DICT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_STORE_SUBSCR_DICT),
    [_CHECK_EG_MATCHplus_STORE_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_STORE_SUBSCR_LIST_INT),
    [_CHECK_EG_MATCHplus_SWAP] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_SWAP),
    [_CHECK_EG_MATCHplus_TO_BOOL] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_TO_BOOL),
    [_CHECK_EG_MATCHplus_TO_BOOL_ALWAYS_TRUE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_TO_BOOL_ALWAYS_TRUE),
    [_CHECK_EG_MATCHplus_TO_BOOL_BOOL] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_TO_BOOL_BOOL),
    [_CHECK_EG_MATCHplus_TO_BOOL_INT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_TO_BOOL_INT),
    [_CHECK_EG_MATCHplus_TO_BOOL_LIST] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_TO_BOOL_LIST),
    [_CHECK_EG_MATCHplus_TO_BOOL_NONE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_TO_BOOL_NONE),
    [_CHECK_EG_MATCHplus_TO_BOOL_STR] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_TO_BOOL_STR),
    [_CHECK_EG_MATCHplus_UNARY_INVERT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_UNARY_INVERT),
    [_CHECK_EG_MATCHplus_UNARY_NEGATIVE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_UNARY_NEGATIVE),
    [_CHECK_EG_MATCHplus_UNARY_NOT] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_UNARY_NOT),
    [_CHECK_EG_MATCHplus_UNPACK_EX] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_UNPACK_EX),
    [_CHECK_EG_MATCHplus_UNPACK_SEQUENCE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_UNPACK_SEQUENCE),
    [_CHECK_EG_MATCHplus_UNPACK_SEQUENCE_LIST] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_UNPACK_SEQUENCE_LIST),
    [_CHECK_EG_MATCHplus_UNPACK_SEQUENCE_TUPLE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_UNPACK_SEQUENCE_TUPLE),
    [_CHECK_EG_MATCHplus_UNPACK_SEQUENCE_TWO_TUPLE] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_UNPACK_SEQUENCE_TWO_TUPLE),
    [_CHECK_EG_MATCHplus_WITH_EXCEPT_START] = INIT_STENCIL_GROUP(_CHECK_EG_MATCHplus_WITH_EXCEPT_START),
};

#define GET_PATCHES() { \
    [HoleValue_CODE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_CONTINUE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_DATA] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_EXECUTOR] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_GOT] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPARG] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPERAND] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TARGET] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TOP] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_ZERO] = (uint64_t)0xBADBADBADBADBADB, \
}
