// $ /home/jglass/.pyenv/versions/3.12.1/bin/python Tools/jit/build_two_reuse.py x86_64-unknown-linux-gnu --all_ops

typedef enum {
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGE21,
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGEOFF12,
    HoleKind_ARM64_RELOC_UNSIGNED,
    HoleKind_IMAGE_REL_AMD64_ADDR64,
    HoleKind_IMAGE_REL_I386_DIR32,
    HoleKind_R_AARCH64_ABS64,
    HoleKind_R_AARCH64_CALL26,
    HoleKind_R_AARCH64_JUMP26,
    HoleKind_R_AARCH64_MOVW_UABS_G0_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G1_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G2_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G3,
    HoleKind_R_X86_64_64,
    HoleKind_X86_64_RELOC_UNSIGNED,
} HoleKind;

typedef enum {
    HoleValue_CODE,
    HoleValue_CONTINUE,
    HoleValue_DATA,
    HoleValue_EXECUTOR,
    HoleValue_GOT,
    HoleValue_OPARG,
    HoleValue_OPERAND,
    HoleValue_TARGET,
    HoleValue_TOP,
    HoleValue_ZERO,
} HoleValue;

typedef struct {
    const uint64_t offset;
    const HoleKind kind;
    const HoleValue value;
    const void *symbol;
    const uint64_t addend;
} Hole;

typedef struct {
    const size_t body_size;
    const unsigned char * const body;
    const size_t holes_size;
    const Hole * const holes;
} Stencil;

typedef struct {
    const Stencil code;
    const Stencil data;
} StencilGroup;

// _STORE_SUBSCRplus_BEFORE_ASYNC_WITH
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BEFORE_ASYNC_WITH.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 f2                      movq    %r14, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 06                      movq    (%r14), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 f2                      movq    %r14, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 06                      movq    (%r14), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0e                      decq    (%r14)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 f7                      movq    %r14, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 33                         je      0x179 <_JIT_ENTRY+0x179>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 fd                   cmoveq  %r13, %r15
// 14c: 74 42                         je      0x190 <_JIT_ENTRY+0x190>
// 14e: 49 83 c7 f0                   addq    $-0x10, %r15
// 152: 4d 89 fd                      movq    %r15, %r13
// 155: 49 83 c5 f8                   addq    $-0x8, %r13
// 159: 49 29 dd                      subq    %rbx, %r13
// 15c: 49 83 c5 b8                   addq    $-0x48, %r13
// 160: 49 c1 ed 03                   shrq    $0x3, %r13
// 164: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 168: 31 c0                         xorl    %eax, %eax
// 16a: 48 83 c4 18                   addq    $0x18, %rsp
// 16e: 5b                            popq    %rbx
// 16f: 41 5c                         popq    %r12
// 171: 41 5d                         popq    %r13
// 173: 41 5e                         popq    %r14
// 175: 41 5f                         popq    %r15
// 177: 5d                            popq    %rbp
// 178: c3                            retq
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: 4c 89 e7                      movq    %r12, %rdi
// 186: ff d0                         callq   *%rax
// 188: 85 ed                         testl   %ebp, %ebp
// 18a: 4d 0f 44 fd                   cmoveq  %r13, %r15
// 18e: 75 be                         jne     0x14e <_JIT_ENTRY+0x14e>
// 190: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 195: 49 8b 6f f8                   movq    -0x8(%r15), %rbp
// 199: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000019b:  R_X86_64_64  _PyObject_LookupSpecial
// 1a3: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000001a5:  R_X86_64_64  _PyRuntime
// 1ad: 49 8d b6 68 a6 00 00          leaq    0xa668(%r14), %rsi
// 1b4: 48 89 ef                      movq    %rbp, %rdi
// 1b7: ff d3                         callq   *%rbx
// 1b9: 48 85 c0                      testq   %rax, %rax
// 1bc: 0f 84 c1 00 00 00             je      0x283 <_JIT_ENTRY+0x283>
// 1c2: 49 89 c4                      movq    %rax, %r12
// 1c5: 49 81 c6 a0 a6 00 00          addq    $0xa6a0, %r14           # imm = 0xA6A0
// 1cc: 48 89 ef                      movq    %rbp, %rdi
// 1cf: 4c 89 f6                      movq    %r14, %rsi
// 1d2: ff d3                         callq   *%rbx
// 1d4: 48 85 c0                      testq   %rax, %rax
// 1d7: 0f 84 74 01 00 00             je      0x351 <_JIT_ENTRY+0x351>
// 1dd: 49 89 c6                      movq    %rax, %r14
// 1e0: 48 8b 45 00                   movq    (%rbp), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7f 22                         jg      0x20b <_JIT_ENTRY+0x20b>
// 1e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001eb:  R_X86_64_64  .rodata.str1.1
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _Py_NegativeRefcount
// 1fd: be 14 09 00 00                movl    $0x914, %esi            # imm = 0x914
// 202: 48 89 ea                      movq    %rbp, %rdx
// 205: ff d0                         callq   *%rax
// 207: 48 8b 45 00                   movq    (%rbp), %rax
// 20b: 85 c0                         testl   %eax, %eax
// 20d: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 212: 78 21                         js      0x235 <_JIT_ENTRY+0x235>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21e: ff d0                         callq   *%rax
// 220: 48 ff 4d 00                   decq    (%rbp)
// 224: 75 0f                         jne     0x235 <_JIT_ENTRY+0x235>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_Dealloc
// 230: 48 89 ef                      movq    %rbp, %rdi
// 233: ff d0                         callq   *%rax
// 235: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 23a: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 241: 74 67                         je      0x2aa <_JIT_ENTRY+0x2aa>
// 243: 48 8b 40 38                   movq    0x38(%rax), %rax
// 247: 49 8b 04 04                   movq    (%r12,%rax), %rax
// 24b: 48 85 c0                      testq   %rax, %rax
// 24e: 74 5a                         je      0x2aa <_JIT_ENTRY+0x2aa>
// 250: 4c 89 e7                      movq    %r12, %rdi
// 253: 31 f6                         xorl    %esi, %esi
// 255: 31 d2                         xorl    %edx, %edx
// 257: 31 c9                         xorl    %ecx, %ecx
// 259: ff d0                         callq   *%rax
// 25b: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000025d:  R_X86_64_64  _Py_CheckFunctionResult
// 265: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 26a: 4c 89 e6                      movq    %r12, %rsi
// 26d: 48 89 c2                      movq    %rax, %rdx
// 270: 31 c9                         xorl    %ecx, %ecx
// 272: 41 ff d0                      callq   *%r8
// 275: 48 89 c5                      movq    %rax, %rbp
// 278: 49 8b 04 24                   movq    (%r12), %rax
// 27c: 48 85 c0                      testq   %rax, %rax
// 27f: 7f 72                         jg      0x2f3 <_JIT_ENTRY+0x2f3>
// 281: eb 4e                         jmp     0x2d1 <_JIT_ENTRY+0x2d1>
// 283: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 288: 48 8b 40 68                   movq    0x68(%rax), %rax
// 28c: 48 85 c0                      testq   %rax, %rax
// 28f: 0f 84 f8 00 00 00             je      0x38d <_JIT_ENTRY+0x38d>
// 295: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 29a: 0f 84 ed 00 00 00             je      0x38d <_JIT_ENTRY+0x38d>
// 2a0: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 2a5: e9 af fe ff ff                jmp     0x159 <_JIT_ENTRY+0x159>
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  _PyObject_MakeTpCall
// 2b4: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2b9: 4c 89 e6                      movq    %r12, %rsi
// 2bc: 31 d2                         xorl    %edx, %edx
// 2be: 31 c9                         xorl    %ecx, %ecx
// 2c0: 45 31 c0                      xorl    %r8d, %r8d
// 2c3: ff d0                         callq   *%rax
// 2c5: 48 89 c5                      movq    %rax, %rbp
// 2c8: 49 8b 04 24                   movq    (%r12), %rax
// 2cc: 48 85 c0                      testq   %rax, %rax
// 2cf: 7f 22                         jg      0x2f3 <_JIT_ENTRY+0x2f3>
// 2d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d3:  R_X86_64_64  .rodata.str1.1
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _Py_NegativeRefcount
// 2e5: be 16 09 00 00                movl    $0x916, %esi            # imm = 0x916
// 2ea: 4c 89 e2                      movq    %r12, %rdx
// 2ed: ff d0                         callq   *%rax
// 2ef: 49 8b 04 24                   movq    (%r12), %rax
// 2f3: 85 c0                         testl   %eax, %eax
// 2f5: 78 21                         js      0x318 <_JIT_ENTRY+0x318>
// 2f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 301: ff d0                         callq   *%rax
// 303: 49 ff 0c 24                   decq    (%r12)
// 307: 75 0f                         jne     0x318 <_JIT_ENTRY+0x318>
// 309: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030b:  R_X86_64_64  _Py_Dealloc
// 313: 4c 89 e7                      movq    %r12, %rdi
// 316: ff d0                         callq   *%rax
// 318: 48 85 ed                      testq   %rbp, %rbp
// 31b: 0f 84 a9 00 00 00             je      0x3ca <_JIT_ENTRY+0x3ca>
// 321: 4d 89 77 f8                   movq    %r14, -0x8(%r15)
// 325: 49 89 2f                      movq    %rbp, (%r15)
// 328: 49 83 c7 08                   addq    $0x8, %r15
// 32c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032e:  R_X86_64_64  _JIT_CONTINUE
// 336: 48 89 df                      movq    %rbx, %rdi
// 339: 4c 89 fe                      movq    %r15, %rsi
// 33c: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 341: 48 83 c4 18                   addq    $0x18, %rsp
// 345: 5b                            popq    %rbx
// 346: 41 5c                         popq    %r12
// 348: 41 5d                         popq    %r13
// 34a: 41 5e                         popq    %r14
// 34c: 41 5f                         popq    %r15
// 34e: 5d                            popq    %rbp
// 34f: ff e0                         jmpq    *%rax
// 351: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 356: 48 8b 40 68                   movq    0x68(%rax), %rax
// 35a: 48 85 c0                      testq   %rax, %rax
// 35d: 0f 84 c1 00 00 00             je      0x424 <_JIT_ENTRY+0x424>
// 363: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 368: 0f 84 b6 00 00 00             je      0x424 <_JIT_ENTRY+0x424>
// 36e: 49 8b 04 24                   movq    (%r12), %rax
// 372: 48 85 c0                      testq   %rax, %rax
// 375: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 37a: 0f 8e e9 00 00 00             jle     0x469 <_JIT_ENTRY+0x469>
// 380: 85 c0                         testl   %eax, %eax
// 382: 0f 88 d1 fd ff ff             js      0x159 <_JIT_ENTRY+0x159>
// 388: e9 06 01 00 00                jmp     0x493 <_JIT_ENTRY+0x493>
// 38d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038f:  R_X86_64_64  PyExc_TypeError
// 397: 48 8b 30                      movq    (%rax), %rsi
// 39a: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 39e: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 3a2: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000003a4:  R_X86_64_64  .rodata.str1.1+0x39
// 3ac: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000003ae:  R_X86_64_64  _PyErr_Format
// 3b6: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 3bb: 31 c0                         xorl    %eax, %eax
// 3bd: 41 ff d0                      callq   *%r8
// 3c0: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 3c5: e9 8f fd ff ff                jmp     0x159 <_JIT_ENTRY+0x159>
// 3ca: 49 8b 06                      movq    (%r14), %rax
// 3cd: 48 85 c0                      testq   %rax, %rax
// 3d0: 7f 21                         jg      0x3f3 <_JIT_ENTRY+0x3f3>
// 3d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003d4:  R_X86_64_64  .rodata.str1.1
// 3dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003de:  R_X86_64_64  _Py_NegativeRefcount
// 3e6: be 18 09 00 00                movl    $0x918, %esi            # imm = 0x918
// 3eb: 4c 89 f2                      movq    %r14, %rdx
// 3ee: ff d0                         callq   *%rax
// 3f0: 49 8b 06                      movq    (%r14), %rax
// 3f3: 85 c0                         testl   %eax, %eax
// 3f5: 0f 88 5a fd ff ff             js      0x155 <_JIT_ENTRY+0x155>
// 3fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 405: ff d0                         callq   *%rax
// 407: 49 ff 0e                      decq    (%r14)
// 40a: 0f 85 45 fd ff ff             jne     0x155 <_JIT_ENTRY+0x155>
// 410: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000412:  R_X86_64_64  _Py_Dealloc
// 41a: 4c 89 f7                      movq    %r14, %rdi
// 41d: ff d0                         callq   *%rax
// 41f: e9 31 fd ff ff                jmp     0x155 <_JIT_ENTRY+0x155>
// 424: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000426:  R_X86_64_64  PyExc_TypeError
// 42e: 48 8b 30                      movq    (%rax), %rsi
// 431: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 435: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 439: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000043b:  R_X86_64_64  .rodata.str1.1+0x84
// 443: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000445:  R_X86_64_64  _PyErr_Format
// 44d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 452: 31 c0                         xorl    %eax, %eax
// 454: 41 ff d0                      callq   *%r8
// 457: 49 8b 04 24                   movq    (%r12), %rax
// 45b: 48 85 c0                      testq   %rax, %rax
// 45e: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 463: 0f 8f 17 ff ff ff             jg      0x380 <_JIT_ENTRY+0x380>
// 469: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000046b:  R_X86_64_64  .rodata.str1.1
// 473: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000475:  R_X86_64_64  _Py_NegativeRefcount
// 47d: be 11 09 00 00                movl    $0x911, %esi            # imm = 0x911
// 482: 4c 89 e2                      movq    %r12, %rdx
// 485: ff d0                         callq   *%rax
// 487: 49 8b 04 24                   movq    (%r12), %rax
// 48b: 85 c0                         testl   %eax, %eax
// 48d: 0f 88 c6 fc ff ff             js      0x159 <_JIT_ENTRY+0x159>
// 493: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000495:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 49d: ff d0                         callq   *%rax
// 49f: 49 ff 0c 24                   decq    (%r12)
// 4a3: 0f 85 b0 fc ff ff             jne     0x159 <_JIT_ENTRY+0x159>
// 4a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004ab:  R_X86_64_64  _Py_Dealloc
// 4b3: 4c 89 e7                      movq    %r12, %rdi
// 4b6: ff d0                         callq   *%rax
// 4b8: e9 9c fc ff ff                jmp     0x159 <_JIT_ENTRY+0x159>
// 4bd: 
static const unsigned char _STORE_SUBSCRplus_BEFORE_ASYNC_WITH_code_body[1214] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x6f, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6f, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x33, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfd, 0x74, 0x42, 0x49, 0x83, 0xc7, 0xf0, 0x4d, 0x89, 0xfd, 0x49, 0x83, 0xc5, 0xf8, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfd, 0x75, 0xbe, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x49, 0x8b, 0x6f, 0xf8, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb6, 0x68, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd3, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xc1, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x49, 0x81, 0xc6, 0xa0, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd3, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x74, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x74, 0x67, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x04, 0x04, 0x48, 0x85, 0xc0, 0x74, 0x5a, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x72, 0xeb, 0x4e, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x40, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0xe9, 0xaf, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x77, 0xf8, 0x49, 0x89, 0x2f, 0x49, 0x83, 0xc7, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x40, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xc1, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x8e, 0xe9, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xd1, 0xfd, 0xff, 0xff, 0xe9, 0x06, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0xe9, 0x8f, 0xfd, 0xff, 0xff, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x0f, 0x88, 0x5a, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x45, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xe9, 0x31, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x8f, 0x17, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xc6, 0xfc, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xb0, 0xfc, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x9c, 0xfc, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_BEFORE_ASYNC_WITH_code_holes[41] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x30b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x32e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x38f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x3a4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x3ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x3d4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x412, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x426, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x43b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x84},
    {0x445, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x46b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x475, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x495, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the asynchronous context manager protocol\x00'%.200s' object does not support the asynchronous context manager protocol (missed __aexit__ method)\x00"
// e9: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_BEFORE_ASYNC_WITH_data_body[241] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x61, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BEFORE_ASYNC_WITH_data_holes[1];

// _STORE_SUBSCRplus_BEFORE_WITH
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BEFORE_WITH.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 f2                      movq    %r14, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 06                      movq    (%r14), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 f2                      movq    %r14, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 06                      movq    (%r14), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0e                      decq    (%r14)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 f7                      movq    %r14, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 33                         je      0x179 <_JIT_ENTRY+0x179>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 fd                   cmoveq  %r13, %r15
// 14c: 74 42                         je      0x190 <_JIT_ENTRY+0x190>
// 14e: 49 83 c7 f0                   addq    $-0x10, %r15
// 152: 4d 89 fd                      movq    %r15, %r13
// 155: 49 83 c5 f8                   addq    $-0x8, %r13
// 159: 49 29 dd                      subq    %rbx, %r13
// 15c: 49 83 c5 b8                   addq    $-0x48, %r13
// 160: 49 c1 ed 03                   shrq    $0x3, %r13
// 164: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 168: 31 c0                         xorl    %eax, %eax
// 16a: 48 83 c4 18                   addq    $0x18, %rsp
// 16e: 5b                            popq    %rbx
// 16f: 41 5c                         popq    %r12
// 171: 41 5d                         popq    %r13
// 173: 41 5e                         popq    %r14
// 175: 41 5f                         popq    %r15
// 177: 5d                            popq    %rbp
// 178: c3                            retq
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: 4c 89 e7                      movq    %r12, %rdi
// 186: ff d0                         callq   *%rax
// 188: 85 ed                         testl   %ebp, %ebp
// 18a: 4d 0f 44 fd                   cmoveq  %r13, %r15
// 18e: 75 be                         jne     0x14e <_JIT_ENTRY+0x14e>
// 190: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 195: 49 8b 6f f8                   movq    -0x8(%r15), %rbp
// 199: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000019b:  R_X86_64_64  _PyObject_LookupSpecial
// 1a3: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000001a5:  R_X86_64_64  _PyRuntime
// 1ad: 49 8d b6 50 ae 00 00          leaq    0xae50(%r14), %rsi
// 1b4: 48 89 ef                      movq    %rbp, %rdi
// 1b7: ff d3                         callq   *%rbx
// 1b9: 48 85 c0                      testq   %rax, %rax
// 1bc: 0f 84 c1 00 00 00             je      0x283 <_JIT_ENTRY+0x283>
// 1c2: 49 89 c4                      movq    %rax, %r12
// 1c5: 49 81 c6 b8 ae 00 00          addq    $0xaeb8, %r14           # imm = 0xAEB8
// 1cc: 48 89 ef                      movq    %rbp, %rdi
// 1cf: 4c 89 f6                      movq    %r14, %rsi
// 1d2: ff d3                         callq   *%rbx
// 1d4: 48 85 c0                      testq   %rax, %rax
// 1d7: 0f 84 74 01 00 00             je      0x351 <_JIT_ENTRY+0x351>
// 1dd: 49 89 c6                      movq    %rax, %r14
// 1e0: 48 8b 45 00                   movq    (%rbp), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7f 22                         jg      0x20b <_JIT_ENTRY+0x20b>
// 1e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001eb:  R_X86_64_64  .rodata.str1.1
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _Py_NegativeRefcount
// 1fd: be 3f 09 00 00                movl    $0x93f, %esi            # imm = 0x93F
// 202: 48 89 ea                      movq    %rbp, %rdx
// 205: ff d0                         callq   *%rax
// 207: 48 8b 45 00                   movq    (%rbp), %rax
// 20b: 85 c0                         testl   %eax, %eax
// 20d: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 212: 78 21                         js      0x235 <_JIT_ENTRY+0x235>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21e: ff d0                         callq   *%rax
// 220: 48 ff 4d 00                   decq    (%rbp)
// 224: 75 0f                         jne     0x235 <_JIT_ENTRY+0x235>
// 226: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000228:  R_X86_64_64  _Py_Dealloc
// 230: 48 89 ef                      movq    %rbp, %rdi
// 233: ff d0                         callq   *%rax
// 235: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 23a: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 241: 74 67                         je      0x2aa <_JIT_ENTRY+0x2aa>
// 243: 48 8b 40 38                   movq    0x38(%rax), %rax
// 247: 49 8b 04 04                   movq    (%r12,%rax), %rax
// 24b: 48 85 c0                      testq   %rax, %rax
// 24e: 74 5a                         je      0x2aa <_JIT_ENTRY+0x2aa>
// 250: 4c 89 e7                      movq    %r12, %rdi
// 253: 31 f6                         xorl    %esi, %esi
// 255: 31 d2                         xorl    %edx, %edx
// 257: 31 c9                         xorl    %ecx, %ecx
// 259: ff d0                         callq   *%rax
// 25b: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000025d:  R_X86_64_64  _Py_CheckFunctionResult
// 265: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 26a: 4c 89 e6                      movq    %r12, %rsi
// 26d: 48 89 c2                      movq    %rax, %rdx
// 270: 31 c9                         xorl    %ecx, %ecx
// 272: 41 ff d0                      callq   *%r8
// 275: 48 89 c5                      movq    %rax, %rbp
// 278: 49 8b 04 24                   movq    (%r12), %rax
// 27c: 48 85 c0                      testq   %rax, %rax
// 27f: 7f 72                         jg      0x2f3 <_JIT_ENTRY+0x2f3>
// 281: eb 4e                         jmp     0x2d1 <_JIT_ENTRY+0x2d1>
// 283: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 288: 48 8b 40 68                   movq    0x68(%rax), %rax
// 28c: 48 85 c0                      testq   %rax, %rax
// 28f: 0f 84 f8 00 00 00             je      0x38d <_JIT_ENTRY+0x38d>
// 295: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 29a: 0f 84 ed 00 00 00             je      0x38d <_JIT_ENTRY+0x38d>
// 2a0: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 2a5: e9 af fe ff ff                jmp     0x159 <_JIT_ENTRY+0x159>
// 2aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ac:  R_X86_64_64  _PyObject_MakeTpCall
// 2b4: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2b9: 4c 89 e6                      movq    %r12, %rsi
// 2bc: 31 d2                         xorl    %edx, %edx
// 2be: 31 c9                         xorl    %ecx, %ecx
// 2c0: 45 31 c0                      xorl    %r8d, %r8d
// 2c3: ff d0                         callq   *%rax
// 2c5: 48 89 c5                      movq    %rax, %rbp
// 2c8: 49 8b 04 24                   movq    (%r12), %rax
// 2cc: 48 85 c0                      testq   %rax, %rax
// 2cf: 7f 22                         jg      0x2f3 <_JIT_ENTRY+0x2f3>
// 2d1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d3:  R_X86_64_64  .rodata.str1.1
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _Py_NegativeRefcount
// 2e5: be 41 09 00 00                movl    $0x941, %esi            # imm = 0x941
// 2ea: 4c 89 e2                      movq    %r12, %rdx
// 2ed: ff d0                         callq   *%rax
// 2ef: 49 8b 04 24                   movq    (%r12), %rax
// 2f3: 85 c0                         testl   %eax, %eax
// 2f5: 78 21                         js      0x318 <_JIT_ENTRY+0x318>
// 2f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 301: ff d0                         callq   *%rax
// 303: 49 ff 0c 24                   decq    (%r12)
// 307: 75 0f                         jne     0x318 <_JIT_ENTRY+0x318>
// 309: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030b:  R_X86_64_64  _Py_Dealloc
// 313: 4c 89 e7                      movq    %r12, %rdi
// 316: ff d0                         callq   *%rax
// 318: 48 85 ed                      testq   %rbp, %rbp
// 31b: 0f 84 a9 00 00 00             je      0x3ca <_JIT_ENTRY+0x3ca>
// 321: 4d 89 77 f8                   movq    %r14, -0x8(%r15)
// 325: 49 89 2f                      movq    %rbp, (%r15)
// 328: 49 83 c7 08                   addq    $0x8, %r15
// 32c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032e:  R_X86_64_64  _JIT_CONTINUE
// 336: 48 89 df                      movq    %rbx, %rdi
// 339: 4c 89 fe                      movq    %r15, %rsi
// 33c: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 341: 48 83 c4 18                   addq    $0x18, %rsp
// 345: 5b                            popq    %rbx
// 346: 41 5c                         popq    %r12
// 348: 41 5d                         popq    %r13
// 34a: 41 5e                         popq    %r14
// 34c: 41 5f                         popq    %r15
// 34e: 5d                            popq    %rbp
// 34f: ff e0                         jmpq    *%rax
// 351: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 356: 48 8b 40 68                   movq    0x68(%rax), %rax
// 35a: 48 85 c0                      testq   %rax, %rax
// 35d: 0f 84 c1 00 00 00             je      0x424 <_JIT_ENTRY+0x424>
// 363: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 368: 0f 84 b6 00 00 00             je      0x424 <_JIT_ENTRY+0x424>
// 36e: 49 8b 04 24                   movq    (%r12), %rax
// 372: 48 85 c0                      testq   %rax, %rax
// 375: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 37a: 0f 8e e9 00 00 00             jle     0x469 <_JIT_ENTRY+0x469>
// 380: 85 c0                         testl   %eax, %eax
// 382: 0f 88 d1 fd ff ff             js      0x159 <_JIT_ENTRY+0x159>
// 388: e9 06 01 00 00                jmp     0x493 <_JIT_ENTRY+0x493>
// 38d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038f:  R_X86_64_64  PyExc_TypeError
// 397: 48 8b 30                      movq    (%rax), %rsi
// 39a: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 39e: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 3a2: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000003a4:  R_X86_64_64  .rodata.str1.1+0x39
// 3ac: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000003ae:  R_X86_64_64  _PyErr_Format
// 3b6: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 3bb: 31 c0                         xorl    %eax, %eax
// 3bd: 41 ff d0                      callq   *%r8
// 3c0: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 3c5: e9 8f fd ff ff                jmp     0x159 <_JIT_ENTRY+0x159>
// 3ca: 49 8b 06                      movq    (%r14), %rax
// 3cd: 48 85 c0                      testq   %rax, %rax
// 3d0: 7f 21                         jg      0x3f3 <_JIT_ENTRY+0x3f3>
// 3d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000003d4:  R_X86_64_64  .rodata.str1.1
// 3dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003de:  R_X86_64_64  _Py_NegativeRefcount
// 3e6: be 43 09 00 00                movl    $0x943, %esi            # imm = 0x943
// 3eb: 4c 89 f2                      movq    %r14, %rdx
// 3ee: ff d0                         callq   *%rax
// 3f0: 49 8b 06                      movq    (%r14), %rax
// 3f3: 85 c0                         testl   %eax, %eax
// 3f5: 0f 88 5a fd ff ff             js      0x155 <_JIT_ENTRY+0x155>
// 3fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 405: ff d0                         callq   *%rax
// 407: 49 ff 0e                      decq    (%r14)
// 40a: 0f 85 45 fd ff ff             jne     0x155 <_JIT_ENTRY+0x155>
// 410: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000412:  R_X86_64_64  _Py_Dealloc
// 41a: 4c 89 f7                      movq    %r14, %rdi
// 41d: ff d0                         callq   *%rax
// 41f: e9 31 fd ff ff                jmp     0x155 <_JIT_ENTRY+0x155>
// 424: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000426:  R_X86_64_64  PyExc_TypeError
// 42e: 48 8b 30                      movq    (%rax), %rsi
// 431: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 435: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 439: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000043b:  R_X86_64_64  .rodata.str1.1+0x77
// 443: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000445:  R_X86_64_64  _PyErr_Format
// 44d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 452: 31 c0                         xorl    %eax, %eax
// 454: 41 ff d0                      callq   *%r8
// 457: 49 8b 04 24                   movq    (%r12), %rax
// 45b: 48 85 c0                      testq   %rax, %rax
// 45e: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 463: 0f 8f 17 ff ff ff             jg      0x380 <_JIT_ENTRY+0x380>
// 469: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000046b:  R_X86_64_64  .rodata.str1.1
// 473: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000475:  R_X86_64_64  _Py_NegativeRefcount
// 47d: be 3c 09 00 00                movl    $0x93c, %esi            # imm = 0x93C
// 482: 4c 89 e2                      movq    %r12, %rdx
// 485: ff d0                         callq   *%rax
// 487: 49 8b 04 24                   movq    (%r12), %rax
// 48b: 85 c0                         testl   %eax, %eax
// 48d: 0f 88 c6 fc ff ff             js      0x159 <_JIT_ENTRY+0x159>
// 493: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000495:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 49d: ff d0                         callq   *%rax
// 49f: 49 ff 0c 24                   decq    (%r12)
// 4a3: 0f 85 b0 fc ff ff             jne     0x159 <_JIT_ENTRY+0x159>
// 4a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000004ab:  R_X86_64_64  _Py_Dealloc
// 4b3: 4c 89 e7                      movq    %r12, %rdi
// 4b6: ff d0                         callq   *%rax
// 4b8: e9 9c fc ff ff                jmp     0x159 <_JIT_ENTRY+0x159>
// 4bd: 
static const unsigned char _STORE_SUBSCRplus_BEFORE_WITH_code_body[1214] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x6f, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6f, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x33, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfd, 0x74, 0x42, 0x49, 0x83, 0xc7, 0xf0, 0x4d, 0x89, 0xfd, 0x49, 0x83, 0xc5, 0xf8, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfd, 0x75, 0xbe, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x49, 0x8b, 0x6f, 0xf8, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb6, 0x50, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd3, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xc1, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x49, 0x81, 0xc6, 0xb8, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd3, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x74, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3f, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x74, 0x67, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x04, 0x04, 0x48, 0x85, 0xc0, 0x74, 0x5a, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x72, 0xeb, 0x4e, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x40, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0xe9, 0xaf, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x41, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x77, 0xf8, 0x49, 0x89, 0x2f, 0x49, 0x83, 0xc7, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x40, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xc1, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x8e, 0xe9, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xd1, 0xfd, 0xff, 0xff, 0xe9, 0x06, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0xe9, 0x8f, 0xfd, 0xff, 0xff, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x0f, 0x88, 0x5a, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x45, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xe9, 0x31, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x0f, 0x8f, 0x17, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3c, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xc6, 0xfc, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xb0, 0xfc, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x9c, 0xfc, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_BEFORE_WITH_code_holes[41] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x228, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x2d3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x30b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x32e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x38f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x3a4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x3ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x3d4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x3de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x412, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x426, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x43b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x77},
    {0x445, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x46b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x475, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x495, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x4ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the context manager protocol\x00'%.200s' object does not support the context manager protocol (missed __exit__ method)\x00"
// ce: 00 00
static const unsigned char _STORE_SUBSCRplus_BEFORE_WITH_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BEFORE_WITH_data_holes[1];

// _STORE_SUBSCRplus_BINARY_OP
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BINARY_OP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 8b 5e f8                   movq    -0x8(%rsi), %rbx
// 1f: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 23: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  PyObject_SetItem
// 31: 4c 89 ef                      movq    %r13, %rdi
// 34: 48 89 de                      movq    %rbx, %rsi
// 37: 4c 89 f2                      movq    %r14, %rdx
// 3a: ff d0                         callq   *%rax
// 3c: 89 c5                         movl    %eax, %ebp
// 3e: 49 8b 06                      movq    (%r14), %rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 7e 06                         jle     0x4c <_JIT_ENTRY+0x4c>
// 46: 85 c0                         testl   %eax, %eax
// 48: 79 27                         jns     0x71 <_JIT_ENTRY+0x71>
// 4a: eb 36                         jmp     0x82 <_JIT_ENTRY+0x82>
// 4c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004e:  R_X86_64_64  .rodata.str1.1
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _Py_NegativeRefcount
// 60: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 65: 4c 89 f2                      movq    %r14, %rdx
// 68: ff d0                         callq   *%rax
// 6a: 49 8b 06                      movq    (%r14), %rax
// 6d: 85 c0                         testl   %eax, %eax
// 6f: 78 11                         js      0x82 <_JIT_ENTRY+0x82>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 7b: ff d0                         callq   *%rax
// 7d: 49 ff 0e                      decq    (%r14)
// 80: 74 0f                         je      0x91 <_JIT_ENTRY+0x91>
// 82: 49 8b 45 00                   movq    (%r13), %rax
// 86: 48 85 c0                      testq   %rax, %rax
// 89: 7e 1e                         jle     0xa9 <_JIT_ENTRY+0xa9>
// 8b: 85 c0                         testl   %eax, %eax
// 8d: 79 40                         jns     0xcf <_JIT_ENTRY+0xcf>
// 8f: eb 50                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_Dealloc
// 9b: 4c 89 f7                      movq    %r14, %rdi
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 45 00                   movq    (%r13), %rax
// a4: 48 85 c0                      testq   %rax, %rax
// a7: 7f e2                         jg      0x8b <_JIT_ENTRY+0x8b>
// a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ab:  R_X86_64_64  .rodata.str1.1
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_NegativeRefcount
// bd: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c2: 4c 89 ea                      movq    %r13, %rdx
// c5: ff d0                         callq   *%rax
// c7: 49 8b 45 00                   movq    (%r13), %rax
// cb: 85 c0                         testl   %eax, %eax
// cd: 78 12                         js      0xe1 <_JIT_ENTRY+0xe1>
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d9: ff d0                         callq   *%rax
// db: 49 ff 4d 00                   decq    (%r13)
// df: 74 12                         je      0xf3 <_JIT_ENTRY+0xf3>
// e1: 48 8b 03                      movq    (%rbx), %rax
// e4: 48 85 c0                      testq   %rax, %rax
// e7: 7e 21                         jle     0x10a <_JIT_ENTRY+0x10a>
// e9: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// ed: 85 c0                         testl   %eax, %eax
// ef: 79 42                         jns     0x133 <_JIT_ENTRY+0x133>
// f1: eb 60                         jmp     0x153 <_JIT_ENTRY+0x153>
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: 4c 89 ef                      movq    %r13, %rdi
// 100: ff d0                         callq   *%rax
// 102: 48 8b 03                      movq    (%rbx), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f df                         jg      0xe9 <_JIT_ENTRY+0xe9>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 48 89 da                      movq    %rbx, %rdx
// 126: ff d0                         callq   *%rax
// 128: 48 8b 03                      movq    (%rbx), %rax
// 12b: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// 12f: 85 c0                         testl   %eax, %eax
// 131: 78 20                         js      0x153 <_JIT_ENTRY+0x153>
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13d: ff d0                         callq   *%rax
// 13f: 48 ff 0b                      decq    (%rbx)
// 142: 75 0f                         jne     0x153 <_JIT_ENTRY+0x153>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_Dealloc
// 14e: 48 89 df                      movq    %rbx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 ed                         testl   %ebp, %ebp
// 155: 4d 0f 44 fc                   cmoveq  %r12, %r15
// 159: 49 8d 5f f8                   leaq    -0x8(%r15), %rbx
// 15d: 85 ed                         testl   %ebp, %ebp
// 15f: 74 28                         je      0x189 <_JIT_ENTRY+0x189>
// 161: 49 89 dc                      movq    %rbx, %r12
// 164: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 169: 49 29 c4                      subq    %rax, %r12
// 16c: 49 83 c4 a8                   addq    $-0x58, %r12
// 170: 49 c1 ec 03                   shrq    $0x3, %r12
// 174: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 178: 31 c0                         xorl    %eax, %eax
// 17a: 48 83 c4 18                   addq    $0x18, %rsp
// 17e: 5b                            popq    %rbx
// 17f: 41 5c                         popq    %r12
// 181: 41 5d                         popq    %r13
// 183: 41 5e                         popq    %r14
// 185: 41 5f                         popq    %r15
// 187: 5d                            popq    %rbp
// 188: c3                            retq
// 189: 4d 8b 77 f0                   movq    -0x10(%r15), %r14
// 18d: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a0:  R_X86_64_64  _PyEval_BinaryOps
// 1a8: 4c 89 f7                      movq    %r14, %rdi
// 1ab: 4c 89 ee                      movq    %r13, %rsi
// 1ae: ff 14 c1                      callq   *(%rcx,%rax,8)
// 1b1: 48 89 c5                      movq    %rax, %rbp
// 1b4: 49 8b 06                      movq    (%r14), %rax
// 1b7: 48 85 c0                      testq   %rax, %rax
// 1ba: 7e 06                         jle     0x1c2 <_JIT_ENTRY+0x1c2>
// 1bc: 85 c0                         testl   %eax, %eax
// 1be: 79 27                         jns     0x1e7 <_JIT_ENTRY+0x1e7>
// 1c0: eb 36                         jmp     0x1f8 <_JIT_ENTRY+0x1f8>
// 1c2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c4:  R_X86_64_64  .rodata.str1.1
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _Py_NegativeRefcount
// 1d6: be d4 0c 00 00                movl    $0xcd4, %esi            # imm = 0xCD4
// 1db: 4c 89 f2                      movq    %r14, %rdx
// 1de: ff d0                         callq   *%rax
// 1e0: 49 8b 06                      movq    (%r14), %rax
// 1e3: 85 c0                         testl   %eax, %eax
// 1e5: 78 11                         js      0x1f8 <_JIT_ENTRY+0x1f8>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f1: ff d0                         callq   *%rax
// 1f3: 49 ff 0e                      decq    (%r14)
// 1f6: 74 0f                         je      0x207 <_JIT_ENTRY+0x207>
// 1f8: 49 8b 45 00                   movq    (%r13), %rax
// 1fc: 48 85 c0                      testq   %rax, %rax
// 1ff: 7e 1e                         jle     0x21f <_JIT_ENTRY+0x21f>
// 201: 85 c0                         testl   %eax, %eax
// 203: 79 40                         jns     0x245 <_JIT_ENTRY+0x245>
// 205: eb 5f                         jmp     0x266 <_JIT_ENTRY+0x266>
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  _Py_Dealloc
// 211: 4c 89 f7                      movq    %r14, %rdi
// 214: ff d0                         callq   *%rax
// 216: 49 8b 45 00                   movq    (%r13), %rax
// 21a: 48 85 c0                      testq   %rax, %rax
// 21d: 7f e2                         jg      0x201 <_JIT_ENTRY+0x201>
// 21f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000221:  R_X86_64_64  .rodata.str1.1
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _Py_NegativeRefcount
// 233: be d5 0c 00 00                movl    $0xcd5, %esi            # imm = 0xCD5
// 238: 4c 89 ea                      movq    %r13, %rdx
// 23b: ff d0                         callq   *%rax
// 23d: 49 8b 45 00                   movq    (%r13), %rax
// 241: 85 c0                         testl   %eax, %eax
// 243: 78 21                         js      0x266 <_JIT_ENTRY+0x266>
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24f: ff d0                         callq   *%rax
// 251: 49 ff 4d 00                   decq    (%r13)
// 255: 75 0f                         jne     0x266 <_JIT_ENTRY+0x266>
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_Dealloc
// 261: 4c 89 ef                      movq    %r13, %rdi
// 264: ff d0                         callq   *%rax
// 266: 48 85 ed                      testq   %rbp, %rbp
// 269: 0f 84 f5 fe ff ff             je      0x164 <_JIT_ENTRY+0x164>
// 26f: 49 89 6f f0                   movq    %rbp, -0x10(%r15)
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _JIT_CONTINUE
// 27d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 282: 48 89 de                      movq    %rbx, %rsi
// 285: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 28a: 48 83 c4 18                   addq    $0x18, %rsp
// 28e: 5b                            popq    %rbx
// 28f: 41 5c                         popq    %r12
// 291: 41 5d                         popq    %r13
// 293: 41 5e                         popq    %r14
// 295: 41 5f                         popq    %r15
// 297: 5d                            popq    %rbp
// 298: ff e0                         jmpq    *%rax
// 29a: 
static const unsigned char _STORE_SUBSCRplus_BINARY_OP_code_body[667] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x5e, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x12, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x21, 0x4d, 0x8d, 0x67, 0xe8, 0x85, 0xc0, 0x79, 0x42, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xdf, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x4d, 0x8d, 0x67, 0xe8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfc, 0x49, 0x8d, 0x5f, 0xf8, 0x85, 0xed, 0x74, 0x28, 0x49, 0x89, 0xdc, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xa8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x77, 0xf0, 0x4d, 0x8b, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xee, 0xff, 0x14, 0xc1, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd4, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd5, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x0f, 0x84, 0xf5, 0xfe, 0xff, 0xff, 0x49, 0x89, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_BINARY_OP_code_holes[25] = {
    {0x29, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_BinaryOps, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_BINARY_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BINARY_OP_data_holes[1];

// _STORE_SUBSCRplus_BINARY_OP_ADD_FLOAT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BINARY_OP_ADD_FLOAT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 48 89 f3                      movq    %rsi, %rbx
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 23: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  PyObject_SetItem
// 31: 4c 89 ef                      movq    %r13, %rdi
// 34: 4c 89 e6                      movq    %r12, %rsi
// 37: 4c 89 fa                      movq    %r15, %rdx
// 3a: ff d0                         callq   *%rax
// 3c: 89 c5                         movl    %eax, %ebp
// 3e: 49 8b 07                      movq    (%r15), %rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 7e 06                         jle     0x4c <_JIT_ENTRY+0x4c>
// 46: 85 c0                         testl   %eax, %eax
// 48: 79 27                         jns     0x71 <_JIT_ENTRY+0x71>
// 4a: eb 36                         jmp     0x82 <_JIT_ENTRY+0x82>
// 4c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004e:  R_X86_64_64  .rodata.str1.1
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _Py_NegativeRefcount
// 60: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 65: 4c 89 fa                      movq    %r15, %rdx
// 68: ff d0                         callq   *%rax
// 6a: 49 8b 07                      movq    (%r15), %rax
// 6d: 85 c0                         testl   %eax, %eax
// 6f: 78 11                         js      0x82 <_JIT_ENTRY+0x82>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 7b: ff d0                         callq   *%rax
// 7d: 49 ff 0f                      decq    (%r15)
// 80: 74 0f                         je      0x91 <_JIT_ENTRY+0x91>
// 82: 49 8b 45 00                   movq    (%r13), %rax
// 86: 48 85 c0                      testq   %rax, %rax
// 89: 7e 1e                         jle     0xa9 <_JIT_ENTRY+0xa9>
// 8b: 85 c0                         testl   %eax, %eax
// 8d: 79 40                         jns     0xcf <_JIT_ENTRY+0xcf>
// 8f: eb 50                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_Dealloc
// 9b: 4c 89 ff                      movq    %r15, %rdi
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 45 00                   movq    (%r13), %rax
// a4: 48 85 c0                      testq   %rax, %rax
// a7: 7f e2                         jg      0x8b <_JIT_ENTRY+0x8b>
// a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ab:  R_X86_64_64  .rodata.str1.1
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_NegativeRefcount
// bd: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c2: 4c 89 ea                      movq    %r13, %rdx
// c5: ff d0                         callq   *%rax
// c7: 49 8b 45 00                   movq    (%r13), %rax
// cb: 85 c0                         testl   %eax, %eax
// cd: 78 12                         js      0xe1 <_JIT_ENTRY+0xe1>
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d9: ff d0                         callq   *%rax
// db: 49 ff 4d 00                   decq    (%r13)
// df: 74 13                         je      0xf4 <_JIT_ENTRY+0xf4>
// e1: 49 8b 04 24                   movq    (%r12), %rax
// e5: 48 85 c0                      testq   %rax, %rax
// e8: 7e 22                         jle     0x10c <_JIT_ENTRY+0x10c>
// ea: 4c 8d 73 e8                   leaq    -0x18(%rbx), %r14
// ee: 85 c0                         testl   %eax, %eax
// f0: 79 44                         jns     0x136 <_JIT_ENTRY+0x136>
// f2: eb 54                         jmp     0x148 <_JIT_ENTRY+0x148>
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_Dealloc
// fe: 4c 89 ef                      movq    %r13, %rdi
// 101: ff d0                         callq   *%rax
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f de                         jg      0xea <_JIT_ENTRY+0xea>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 4c 8d 73 e8                   leaq    -0x18(%rbx), %r14
// 132: 85 c0                         testl   %eax, %eax
// 134: 78 12                         js      0x148 <_JIT_ENTRY+0x148>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 140: ff d0                         callq   *%rax
// 142: 49 ff 0c 24                   decq    (%r12)
// 146: 74 34                         je      0x17c <_JIT_ENTRY+0x17c>
// 148: 85 ed                         testl   %ebp, %ebp
// 14a: 49 0f 44 de                   cmoveq  %r14, %rbx
// 14e: 74 43                         je      0x193 <_JIT_ENTRY+0x193>
// 150: 48 83 c3 e8                   addq    $-0x18, %rbx
// 154: 49 89 de                      movq    %rbx, %r14
// 157: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15c: 49 29 c6                      subq    %rax, %r14
// 15f: 49 83 c6 b8                   addq    $-0x48, %r14
// 163: 49 c1 ee 03                   shrq    $0x3, %r14
// 167: 44 89 70 40                   movl    %r14d, 0x40(%rax)
// 16b: 31 c0                         xorl    %eax, %eax
// 16d: 48 83 c4 18                   addq    $0x18, %rsp
// 171: 5b                            popq    %rbx
// 172: 41 5c                         popq    %r12
// 174: 41 5d                         popq    %r13
// 176: 41 5e                         popq    %r14
// 178: 41 5f                         popq    %r15
// 17a: 5d                            popq    %rbp
// 17b: c3                            retq
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_Dealloc
// 186: 4c 89 e7                      movq    %r12, %rdi
// 189: ff d0                         callq   *%rax
// 18b: 85 ed                         testl   %ebp, %ebp
// 18d: 49 0f 44 de                   cmoveq  %r14, %rbx
// 191: 75 bd                         jne     0x150 <_JIT_ENTRY+0x150>
// 193: 4c 8b 6b f0                   movq    -0x10(%rbx), %r13
// 197: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 19b: f2 41 0f 10 45 10             movsd   0x10(%r13), %xmm0       # xmm0 = mem[0],zero
// 1a1: f2 41 0f 58 44 24 10          addsd   0x10(%r12), %xmm0
// 1a8: 49 83 7d 00 01                cmpq    $0x1, (%r13)
// 1ad: 75 3e                         jne     0x1ed <_JIT_ENTRY+0x1ed>
// 1af: f2 41 0f 11 45 10             movsd   %xmm0, 0x10(%r13)
// 1b5: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1bb: 75 28                         jne     0x1e5 <_JIT_ENTRY+0x1e5>
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  PyInterpreterState_Get
// 1c7: ff d0                         callq   *%rax
// 1c9: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1d0: 49 ff 0c 24                   decq    (%r12)
// 1d4: 75 0f                         jne     0x1e5 <_JIT_ENTRY+0x1e5>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _PyFloat_ExactDealloc
// 1e0: 4c 89 e7                      movq    %r12, %rdi
// 1e3: ff d0                         callq   *%rax
// 1e5: 4d 89 ec                      movq    %r13, %r12
// 1e8: e9 d1 00 00 00                jmp     0x2be <_JIT_ENTRY+0x2be>
// 1ed: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 1f2: 75 33                         jne     0x227 <_JIT_ENTRY+0x227>
// 1f4: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 1fb: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 200: 0f 85 b8 00 00 00             jne     0x2be <_JIT_ENTRY+0x2be>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  PyInterpreterState_Get
// 210: ff d0                         callq   *%rax
// 212: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 219: 49 8b 45 00                   movq    (%r13), %rax
// 21d: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 221: 49 89 4d 00                   movq    %rcx, (%r13)
// 225: eb 6e                         jmp     0x295 <_JIT_ENTRY+0x295>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  PyFloat_FromDouble
// 231: ff d0                         callq   *%rax
// 233: 48 85 c0                      testq   %rax, %rax
// 236: 0f 84 1b ff ff ff             je      0x157 <_JIT_ENTRY+0x157>
// 23c: 49 89 c7                      movq    %rax, %r15
// 23f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 244: 75 25                         jne     0x26b <_JIT_ENTRY+0x26b>
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  PyInterpreterState_Get
// 250: ff d0                         callq   *%rax
// 252: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 259: 49 8b 45 00                   movq    (%r13), %rax
// 25d: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 261: 49 89 4d 00                   movq    %rcx, (%r13)
// 265: 48 83 f8 01                   cmpq    $0x1, %rax
// 269: 7e 30                         jle     0x29b <_JIT_ENTRY+0x29b>
// 26b: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 271: 75 48                         jne     0x2bb <_JIT_ENTRY+0x2bb>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  PyInterpreterState_Get
// 27d: ff d0                         callq   *%rax
// 27f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 286: 49 8b 04 24                   movq    (%r12), %rax
// 28a: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 28e: 49 89 0c 24                   movq    %rcx, (%r12)
// 292: 4d 89 fc                      movq    %r15, %r12
// 295: 48 83 f8 01                   cmpq    $0x1, %rax
// 299: 7f 23                         jg      0x2be <_JIT_ENTRY+0x2be>
// 29b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029d:  R_X86_64_64  .rodata.str1.1+0x39
// 2a5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002a7:  R_X86_64_64  .rodata.str1.1+0x4f
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 2b9: ff d0                         callq   *%rax
// 2bb: 4d 89 fc                      movq    %r15, %r12
// 2be: 4c 89 63 f0                   movq    %r12, -0x10(%rbx)
// 2c2: 48 83 c3 f8                   addq    $-0x8, %rbx
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _JIT_CONTINUE
// 2d0: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2d5: 48 89 de                      movq    %rbx, %rsi
// 2d8: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2dd: 48 83 c4 18                   addq    $0x18, %rsp
// 2e1: 5b                            popq    %rbx
// 2e2: 41 5c                         popq    %r12
// 2e4: 41 5d                         popq    %r13
// 2e6: 41 5e                         popq    %r14
// 2e8: 41 5f                         popq    %r15
// 2ea: 5d                            popq    %rbp
// 2eb: ff e0                         jmpq    *%rax
// 2ed: 
static const unsigned char _STORE_SUBSCRplus_BINARY_OP_ADD_FLOAT_code_body[750] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0xf3, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x73, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x73, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x34, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xde, 0x74, 0x43, 0x48, 0x83, 0xc3, 0xe8, 0x49, 0x89, 0xde, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x70, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xde, 0x75, 0xbd, 0x4c, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0xf2, 0x41, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x58, 0x44, 0x24, 0x10, 0x49, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x3e, 0xf2, 0x41, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0xe9, 0xd1, 0x00, 0x00, 0x00, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x33, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xb8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0xeb, 0x6e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x1b, 0xff, 0xff, 0xff, 0x49, 0x89, 0xc7, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xfc, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x23, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x4c, 0x89, 0x63, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_BINARY_OP_ADD_FLOAT_code_holes[24] = {
    {0x29, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _STORE_SUBSCRplus_BINARY_OP_ADD_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BINARY_OP_ADD_FLOAT_data_holes[1];

// _STORE_SUBSCRplus_BINARY_OP_ADD_INT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BINARY_OP_ADD_INT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 8b 5e f8                   movq    -0x8(%rsi), %rbx
// 1f: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 23: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  PyObject_SetItem
// 31: 4c 89 ef                      movq    %r13, %rdi
// 34: 48 89 de                      movq    %rbx, %rsi
// 37: 4c 89 f2                      movq    %r14, %rdx
// 3a: ff d0                         callq   *%rax
// 3c: 89 c5                         movl    %eax, %ebp
// 3e: 49 8b 06                      movq    (%r14), %rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 7e 06                         jle     0x4c <_JIT_ENTRY+0x4c>
// 46: 85 c0                         testl   %eax, %eax
// 48: 79 27                         jns     0x71 <_JIT_ENTRY+0x71>
// 4a: eb 36                         jmp     0x82 <_JIT_ENTRY+0x82>
// 4c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004e:  R_X86_64_64  .rodata.str1.1
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _Py_NegativeRefcount
// 60: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 65: 4c 89 f2                      movq    %r14, %rdx
// 68: ff d0                         callq   *%rax
// 6a: 49 8b 06                      movq    (%r14), %rax
// 6d: 85 c0                         testl   %eax, %eax
// 6f: 78 11                         js      0x82 <_JIT_ENTRY+0x82>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 7b: ff d0                         callq   *%rax
// 7d: 49 ff 0e                      decq    (%r14)
// 80: 74 0f                         je      0x91 <_JIT_ENTRY+0x91>
// 82: 49 8b 45 00                   movq    (%r13), %rax
// 86: 48 85 c0                      testq   %rax, %rax
// 89: 7e 1e                         jle     0xa9 <_JIT_ENTRY+0xa9>
// 8b: 85 c0                         testl   %eax, %eax
// 8d: 79 40                         jns     0xcf <_JIT_ENTRY+0xcf>
// 8f: eb 50                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_Dealloc
// 9b: 4c 89 f7                      movq    %r14, %rdi
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 45 00                   movq    (%r13), %rax
// a4: 48 85 c0                      testq   %rax, %rax
// a7: 7f e2                         jg      0x8b <_JIT_ENTRY+0x8b>
// a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ab:  R_X86_64_64  .rodata.str1.1
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_NegativeRefcount
// bd: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c2: 4c 89 ea                      movq    %r13, %rdx
// c5: ff d0                         callq   *%rax
// c7: 49 8b 45 00                   movq    (%r13), %rax
// cb: 85 c0                         testl   %eax, %eax
// cd: 78 12                         js      0xe1 <_JIT_ENTRY+0xe1>
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d9: ff d0                         callq   *%rax
// db: 49 ff 4d 00                   decq    (%r13)
// df: 74 12                         je      0xf3 <_JIT_ENTRY+0xf3>
// e1: 48 8b 03                      movq    (%rbx), %rax
// e4: 48 85 c0                      testq   %rax, %rax
// e7: 7e 21                         jle     0x10a <_JIT_ENTRY+0x10a>
// e9: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// ed: 85 c0                         testl   %eax, %eax
// ef: 79 42                         jns     0x133 <_JIT_ENTRY+0x133>
// f1: eb 60                         jmp     0x153 <_JIT_ENTRY+0x153>
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: 4c 89 ef                      movq    %r13, %rdi
// 100: ff d0                         callq   *%rax
// 102: 48 8b 03                      movq    (%rbx), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f df                         jg      0xe9 <_JIT_ENTRY+0xe9>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 48 89 da                      movq    %rbx, %rdx
// 126: ff d0                         callq   *%rax
// 128: 48 8b 03                      movq    (%rbx), %rax
// 12b: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// 12f: 85 c0                         testl   %eax, %eax
// 131: 78 20                         js      0x153 <_JIT_ENTRY+0x153>
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13d: ff d0                         callq   *%rax
// 13f: 48 ff 0b                      decq    (%rbx)
// 142: 75 0f                         jne     0x153 <_JIT_ENTRY+0x153>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_Dealloc
// 14e: 48 89 df                      movq    %rbx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 ed                         testl   %ebp, %ebp
// 155: 4d 0f 44 fc                   cmoveq  %r12, %r15
// 159: 49 8d 5f f8                   leaq    -0x8(%r15), %rbx
// 15d: 85 ed                         testl   %ebp, %ebp
// 15f: 74 28                         je      0x189 <_JIT_ENTRY+0x189>
// 161: 49 89 dc                      movq    %rbx, %r12
// 164: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 169: 49 29 c4                      subq    %rax, %r12
// 16c: 49 83 c4 a8                   addq    $-0x58, %r12
// 170: 49 c1 ec 03                   shrq    $0x3, %r12
// 174: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 178: 31 c0                         xorl    %eax, %eax
// 17a: 48 83 c4 18                   addq    $0x18, %rsp
// 17e: 5b                            popq    %rbx
// 17f: 41 5c                         popq    %r12
// 181: 41 5d                         popq    %r13
// 183: 41 5e                         popq    %r14
// 185: 41 5f                         popq    %r15
// 187: 5d                            popq    %rbp
// 188: c3                            retq
// 189: 4d 8b 77 f0                   movq    -0x10(%r15), %r14
// 18d: 49 8b 6f f8                   movq    -0x8(%r15), %rbp
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _PyLong_Add
// 19b: 4c 89 f7                      movq    %r14, %rdi
// 19e: 48 89 ee                      movq    %rbp, %rsi
// 1a1: ff d0                         callq   *%rax
// 1a3: 49 89 c5                      movq    %rax, %r13
// 1a6: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 1aa: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ac:  R_X86_64_64  PyInterpreterState_Get
// 1b4: 75 3c                         jne     0x1f2 <_JIT_ENTRY+0x1f2>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  PyInterpreterState_Get
// 1c0: ff d0                         callq   *%rax
// 1c2: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cb:  R_X86_64_64  PyInterpreterState_Get
// 1d3: 48 ff 4d 00                   decq    (%rbp)
// 1d7: 75 19                         jne     0x1f2 <_JIT_ENTRY+0x1f2>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  PyObject_Free
// 1e3: 48 89 ef                      movq    %rbp, %rdi
// 1e6: ff d0                         callq   *%rax
// 1e8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ea:  R_X86_64_64  PyInterpreterState_Get
// 1f2: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 1f7: 75 1d                         jne     0x216 <_JIT_ENTRY+0x216>
// 1f9: ff d1                         callq   *%rcx
// 1fb: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 202: 49 ff 0e                      decq    (%r14)
// 205: 75 0f                         jne     0x216 <_JIT_ENTRY+0x216>
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  PyObject_Free
// 211: 4c 89 f7                      movq    %r14, %rdi
// 214: ff d0                         callq   *%rax
// 216: 4d 85 ed                      testq   %r13, %r13
// 219: 0f 84 45 ff ff ff             je      0x164 <_JIT_ENTRY+0x164>
// 21f: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _JIT_CONTINUE
// 22d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 232: 48 89 de                      movq    %rbx, %rsi
// 235: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 23a: 48 83 c4 18                   addq    $0x18, %rsp
// 23e: 5b                            popq    %rbx
// 23f: 41 5c                         popq    %r12
// 241: 41 5d                         popq    %r13
// 243: 41 5e                         popq    %r14
// 245: 41 5f                         popq    %r15
// 247: 5d                            popq    %rbp
// 248: ff e0                         jmpq    *%rax
// 24a: 
static const unsigned char _STORE_SUBSCRplus_BINARY_OP_ADD_INT_code_body[587] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x5e, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x12, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x21, 0x4d, 0x8d, 0x67, 0xe8, 0x85, 0xc0, 0x79, 0x42, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xdf, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x4d, 0x8d, 0x67, 0xe8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfc, 0x49, 0x8d, 0x5f, 0xf8, 0x85, 0xed, 0x74, 0x28, 0x49, 0x89, 0xdc, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xa8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x77, 0xf0, 0x49, 0x8b, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x75, 0x1d, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x45, 0xff, 0xff, 0xff, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_BINARY_OP_ADD_INT_code_holes[22] = {
    {0x29, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Add, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_BINARY_OP_ADD_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BINARY_OP_ADD_INT_data_holes[1];

// _STORE_SUBSCRplus_BINARY_OP_ADD_UNICODE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BINARY_OP_ADD_UNICODE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 8b 5e f8                   movq    -0x8(%rsi), %rbx
// 1f: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 23: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  PyObject_SetItem
// 31: 4c 89 ef                      movq    %r13, %rdi
// 34: 48 89 de                      movq    %rbx, %rsi
// 37: 4c 89 f2                      movq    %r14, %rdx
// 3a: ff d0                         callq   *%rax
// 3c: 89 c5                         movl    %eax, %ebp
// 3e: 49 8b 06                      movq    (%r14), %rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 7e 06                         jle     0x4c <_JIT_ENTRY+0x4c>
// 46: 85 c0                         testl   %eax, %eax
// 48: 79 27                         jns     0x71 <_JIT_ENTRY+0x71>
// 4a: eb 36                         jmp     0x82 <_JIT_ENTRY+0x82>
// 4c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004e:  R_X86_64_64  .rodata.str1.1
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _Py_NegativeRefcount
// 60: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 65: 4c 89 f2                      movq    %r14, %rdx
// 68: ff d0                         callq   *%rax
// 6a: 49 8b 06                      movq    (%r14), %rax
// 6d: 85 c0                         testl   %eax, %eax
// 6f: 78 11                         js      0x82 <_JIT_ENTRY+0x82>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 7b: ff d0                         callq   *%rax
// 7d: 49 ff 0e                      decq    (%r14)
// 80: 74 0f                         je      0x91 <_JIT_ENTRY+0x91>
// 82: 49 8b 45 00                   movq    (%r13), %rax
// 86: 48 85 c0                      testq   %rax, %rax
// 89: 7e 1e                         jle     0xa9 <_JIT_ENTRY+0xa9>
// 8b: 85 c0                         testl   %eax, %eax
// 8d: 79 40                         jns     0xcf <_JIT_ENTRY+0xcf>
// 8f: eb 50                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_Dealloc
// 9b: 4c 89 f7                      movq    %r14, %rdi
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 45 00                   movq    (%r13), %rax
// a4: 48 85 c0                      testq   %rax, %rax
// a7: 7f e2                         jg      0x8b <_JIT_ENTRY+0x8b>
// a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ab:  R_X86_64_64  .rodata.str1.1
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_NegativeRefcount
// bd: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c2: 4c 89 ea                      movq    %r13, %rdx
// c5: ff d0                         callq   *%rax
// c7: 49 8b 45 00                   movq    (%r13), %rax
// cb: 85 c0                         testl   %eax, %eax
// cd: 78 12                         js      0xe1 <_JIT_ENTRY+0xe1>
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d9: ff d0                         callq   *%rax
// db: 49 ff 4d 00                   decq    (%r13)
// df: 74 12                         je      0xf3 <_JIT_ENTRY+0xf3>
// e1: 48 8b 03                      movq    (%rbx), %rax
// e4: 48 85 c0                      testq   %rax, %rax
// e7: 7e 21                         jle     0x10a <_JIT_ENTRY+0x10a>
// e9: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// ed: 85 c0                         testl   %eax, %eax
// ef: 79 42                         jns     0x133 <_JIT_ENTRY+0x133>
// f1: eb 60                         jmp     0x153 <_JIT_ENTRY+0x153>
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: 4c 89 ef                      movq    %r13, %rdi
// 100: ff d0                         callq   *%rax
// 102: 48 8b 03                      movq    (%rbx), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f df                         jg      0xe9 <_JIT_ENTRY+0xe9>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 48 89 da                      movq    %rbx, %rdx
// 126: ff d0                         callq   *%rax
// 128: 48 8b 03                      movq    (%rbx), %rax
// 12b: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// 12f: 85 c0                         testl   %eax, %eax
// 131: 78 20                         js      0x153 <_JIT_ENTRY+0x153>
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13d: ff d0                         callq   *%rax
// 13f: 48 ff 0b                      decq    (%rbx)
// 142: 75 0f                         jne     0x153 <_JIT_ENTRY+0x153>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_Dealloc
// 14e: 48 89 df                      movq    %rbx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 ed                         testl   %ebp, %ebp
// 155: 4d 0f 44 fc                   cmoveq  %r12, %r15
// 159: 49 8d 5f f8                   leaq    -0x8(%r15), %rbx
// 15d: 85 ed                         testl   %ebp, %ebp
// 15f: 74 28                         je      0x189 <_JIT_ENTRY+0x189>
// 161: 49 89 dc                      movq    %rbx, %r12
// 164: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 169: 49 29 c4                      subq    %rax, %r12
// 16c: 49 83 c4 a8                   addq    $-0x58, %r12
// 170: 49 c1 ec 03                   shrq    $0x3, %r12
// 174: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 178: 31 c0                         xorl    %eax, %eax
// 17a: 48 83 c4 18                   addq    $0x18, %rsp
// 17e: 5b                            popq    %rbx
// 17f: 41 5c                         popq    %r12
// 181: 41 5d                         popq    %r13
// 183: 41 5e                         popq    %r14
// 185: 41 5f                         popq    %r15
// 187: 5d                            popq    %rbp
// 188: c3                            retq
// 189: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 18d: 4d 8b 77 f8                   movq    -0x8(%r15), %r14
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  PyUnicode_Concat
// 19b: 48 89 ef                      movq    %rbp, %rdi
// 19e: 4c 89 f6                      movq    %r14, %rsi
// 1a1: ff d0                         callq   *%rax
// 1a3: 49 89 c5                      movq    %rax, %r13
// 1a6: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 1aa: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ac:  R_X86_64_64  PyInterpreterState_Get
// 1b4: 75 3c                         jne     0x1f2 <_JIT_ENTRY+0x1f2>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  PyInterpreterState_Get
// 1c0: ff d0                         callq   *%rax
// 1c2: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cb:  R_X86_64_64  PyInterpreterState_Get
// 1d3: 48 ff 4d 00                   decq    (%rbp)
// 1d7: 75 19                         jne     0x1f2 <_JIT_ENTRY+0x1f2>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _PyUnicode_ExactDealloc
// 1e3: 48 89 ef                      movq    %rbp, %rdi
// 1e6: ff d0                         callq   *%rax
// 1e8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ea:  R_X86_64_64  PyInterpreterState_Get
// 1f2: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 1f7: 75 1d                         jne     0x216 <_JIT_ENTRY+0x216>
// 1f9: ff d1                         callq   *%rcx
// 1fb: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 202: 49 ff 0e                      decq    (%r14)
// 205: 75 0f                         jne     0x216 <_JIT_ENTRY+0x216>
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  _PyUnicode_ExactDealloc
// 211: 4c 89 f7                      movq    %r14, %rdi
// 214: ff d0                         callq   *%rax
// 216: 4d 85 ed                      testq   %r13, %r13
// 219: 0f 84 45 ff ff ff             je      0x164 <_JIT_ENTRY+0x164>
// 21f: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _JIT_CONTINUE
// 22d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 232: 48 89 de                      movq    %rbx, %rsi
// 235: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 23a: 48 83 c4 18                   addq    $0x18, %rsp
// 23e: 5b                            popq    %rbx
// 23f: 41 5c                         popq    %r12
// 241: 41 5d                         popq    %r13
// 243: 41 5e                         popq    %r14
// 245: 41 5f                         popq    %r15
// 247: 5d                            popq    %rbp
// 248: ff e0                         jmpq    *%rax
// 24a: 
static const unsigned char _STORE_SUBSCRplus_BINARY_OP_ADD_UNICODE_code_body[587] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x5e, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x12, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x21, 0x4d, 0x8d, 0x67, 0xe8, 0x85, 0xc0, 0x79, 0x42, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xdf, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x4d, 0x8d, 0x67, 0xe8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfc, 0x49, 0x8d, 0x5f, 0xf8, 0x85, 0xed, 0x74, 0x28, 0x49, 0x89, 0xdc, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xa8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x6f, 0xf0, 0x4d, 0x8b, 0x77, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x75, 0x1d, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x45, 0xff, 0xff, 0xff, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_BINARY_OP_ADD_UNICODE_code_holes[22] = {
    {0x29, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Concat, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_BINARY_OP_ADD_UNICODE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BINARY_OP_ADD_UNICODE_data_holes[1];

// _STORE_SUBSCRplus_BINARY_OP_MULTIPLY_FLOAT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BINARY_OP_MULTIPLY_FLOAT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 48 89 f3                      movq    %rsi, %rbx
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 23: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  PyObject_SetItem
// 31: 4c 89 ef                      movq    %r13, %rdi
// 34: 4c 89 e6                      movq    %r12, %rsi
// 37: 4c 89 fa                      movq    %r15, %rdx
// 3a: ff d0                         callq   *%rax
// 3c: 89 c5                         movl    %eax, %ebp
// 3e: 49 8b 07                      movq    (%r15), %rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 7e 06                         jle     0x4c <_JIT_ENTRY+0x4c>
// 46: 85 c0                         testl   %eax, %eax
// 48: 79 27                         jns     0x71 <_JIT_ENTRY+0x71>
// 4a: eb 36                         jmp     0x82 <_JIT_ENTRY+0x82>
// 4c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004e:  R_X86_64_64  .rodata.str1.1
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _Py_NegativeRefcount
// 60: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 65: 4c 89 fa                      movq    %r15, %rdx
// 68: ff d0                         callq   *%rax
// 6a: 49 8b 07                      movq    (%r15), %rax
// 6d: 85 c0                         testl   %eax, %eax
// 6f: 78 11                         js      0x82 <_JIT_ENTRY+0x82>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 7b: ff d0                         callq   *%rax
// 7d: 49 ff 0f                      decq    (%r15)
// 80: 74 0f                         je      0x91 <_JIT_ENTRY+0x91>
// 82: 49 8b 45 00                   movq    (%r13), %rax
// 86: 48 85 c0                      testq   %rax, %rax
// 89: 7e 1e                         jle     0xa9 <_JIT_ENTRY+0xa9>
// 8b: 85 c0                         testl   %eax, %eax
// 8d: 79 40                         jns     0xcf <_JIT_ENTRY+0xcf>
// 8f: eb 50                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_Dealloc
// 9b: 4c 89 ff                      movq    %r15, %rdi
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 45 00                   movq    (%r13), %rax
// a4: 48 85 c0                      testq   %rax, %rax
// a7: 7f e2                         jg      0x8b <_JIT_ENTRY+0x8b>
// a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ab:  R_X86_64_64  .rodata.str1.1
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_NegativeRefcount
// bd: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c2: 4c 89 ea                      movq    %r13, %rdx
// c5: ff d0                         callq   *%rax
// c7: 49 8b 45 00                   movq    (%r13), %rax
// cb: 85 c0                         testl   %eax, %eax
// cd: 78 12                         js      0xe1 <_JIT_ENTRY+0xe1>
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d9: ff d0                         callq   *%rax
// db: 49 ff 4d 00                   decq    (%r13)
// df: 74 13                         je      0xf4 <_JIT_ENTRY+0xf4>
// e1: 49 8b 04 24                   movq    (%r12), %rax
// e5: 48 85 c0                      testq   %rax, %rax
// e8: 7e 22                         jle     0x10c <_JIT_ENTRY+0x10c>
// ea: 4c 8d 73 e8                   leaq    -0x18(%rbx), %r14
// ee: 85 c0                         testl   %eax, %eax
// f0: 79 44                         jns     0x136 <_JIT_ENTRY+0x136>
// f2: eb 54                         jmp     0x148 <_JIT_ENTRY+0x148>
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_Dealloc
// fe: 4c 89 ef                      movq    %r13, %rdi
// 101: ff d0                         callq   *%rax
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f de                         jg      0xea <_JIT_ENTRY+0xea>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 4c 8d 73 e8                   leaq    -0x18(%rbx), %r14
// 132: 85 c0                         testl   %eax, %eax
// 134: 78 12                         js      0x148 <_JIT_ENTRY+0x148>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 140: ff d0                         callq   *%rax
// 142: 49 ff 0c 24                   decq    (%r12)
// 146: 74 34                         je      0x17c <_JIT_ENTRY+0x17c>
// 148: 85 ed                         testl   %ebp, %ebp
// 14a: 49 0f 44 de                   cmoveq  %r14, %rbx
// 14e: 74 43                         je      0x193 <_JIT_ENTRY+0x193>
// 150: 48 83 c3 e8                   addq    $-0x18, %rbx
// 154: 49 89 de                      movq    %rbx, %r14
// 157: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15c: 49 29 c6                      subq    %rax, %r14
// 15f: 49 83 c6 b8                   addq    $-0x48, %r14
// 163: 49 c1 ee 03                   shrq    $0x3, %r14
// 167: 44 89 70 40                   movl    %r14d, 0x40(%rax)
// 16b: 31 c0                         xorl    %eax, %eax
// 16d: 48 83 c4 18                   addq    $0x18, %rsp
// 171: 5b                            popq    %rbx
// 172: 41 5c                         popq    %r12
// 174: 41 5d                         popq    %r13
// 176: 41 5e                         popq    %r14
// 178: 41 5f                         popq    %r15
// 17a: 5d                            popq    %rbp
// 17b: c3                            retq
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_Dealloc
// 186: 4c 89 e7                      movq    %r12, %rdi
// 189: ff d0                         callq   *%rax
// 18b: 85 ed                         testl   %ebp, %ebp
// 18d: 49 0f 44 de                   cmoveq  %r14, %rbx
// 191: 75 bd                         jne     0x150 <_JIT_ENTRY+0x150>
// 193: 4c 8b 6b f0                   movq    -0x10(%rbx), %r13
// 197: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 19b: f2 41 0f 10 45 10             movsd   0x10(%r13), %xmm0       # xmm0 = mem[0],zero
// 1a1: f2 41 0f 59 44 24 10          mulsd   0x10(%r12), %xmm0
// 1a8: 49 83 7d 00 01                cmpq    $0x1, (%r13)
// 1ad: 75 3e                         jne     0x1ed <_JIT_ENTRY+0x1ed>
// 1af: f2 41 0f 11 45 10             movsd   %xmm0, 0x10(%r13)
// 1b5: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1bb: 75 28                         jne     0x1e5 <_JIT_ENTRY+0x1e5>
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  PyInterpreterState_Get
// 1c7: ff d0                         callq   *%rax
// 1c9: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1d0: 49 ff 0c 24                   decq    (%r12)
// 1d4: 75 0f                         jne     0x1e5 <_JIT_ENTRY+0x1e5>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _PyFloat_ExactDealloc
// 1e0: 4c 89 e7                      movq    %r12, %rdi
// 1e3: ff d0                         callq   *%rax
// 1e5: 4d 89 ec                      movq    %r13, %r12
// 1e8: e9 d1 00 00 00                jmp     0x2be <_JIT_ENTRY+0x2be>
// 1ed: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 1f2: 75 33                         jne     0x227 <_JIT_ENTRY+0x227>
// 1f4: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 1fb: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 200: 0f 85 b8 00 00 00             jne     0x2be <_JIT_ENTRY+0x2be>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  PyInterpreterState_Get
// 210: ff d0                         callq   *%rax
// 212: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 219: 49 8b 45 00                   movq    (%r13), %rax
// 21d: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 221: 49 89 4d 00                   movq    %rcx, (%r13)
// 225: eb 6e                         jmp     0x295 <_JIT_ENTRY+0x295>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  PyFloat_FromDouble
// 231: ff d0                         callq   *%rax
// 233: 48 85 c0                      testq   %rax, %rax
// 236: 0f 84 1b ff ff ff             je      0x157 <_JIT_ENTRY+0x157>
// 23c: 49 89 c7                      movq    %rax, %r15
// 23f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 244: 75 25                         jne     0x26b <_JIT_ENTRY+0x26b>
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  PyInterpreterState_Get
// 250: ff d0                         callq   *%rax
// 252: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 259: 49 8b 45 00                   movq    (%r13), %rax
// 25d: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 261: 49 89 4d 00                   movq    %rcx, (%r13)
// 265: 48 83 f8 01                   cmpq    $0x1, %rax
// 269: 7e 30                         jle     0x29b <_JIT_ENTRY+0x29b>
// 26b: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 271: 75 48                         jne     0x2bb <_JIT_ENTRY+0x2bb>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  PyInterpreterState_Get
// 27d: ff d0                         callq   *%rax
// 27f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 286: 49 8b 04 24                   movq    (%r12), %rax
// 28a: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 28e: 49 89 0c 24                   movq    %rcx, (%r12)
// 292: 4d 89 fc                      movq    %r15, %r12
// 295: 48 83 f8 01                   cmpq    $0x1, %rax
// 299: 7f 23                         jg      0x2be <_JIT_ENTRY+0x2be>
// 29b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029d:  R_X86_64_64  .rodata.str1.1+0x39
// 2a5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002a7:  R_X86_64_64  .rodata.str1.1+0x4f
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 2b9: ff d0                         callq   *%rax
// 2bb: 4d 89 fc                      movq    %r15, %r12
// 2be: 4c 89 63 f0                   movq    %r12, -0x10(%rbx)
// 2c2: 48 83 c3 f8                   addq    $-0x8, %rbx
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _JIT_CONTINUE
// 2d0: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2d5: 48 89 de                      movq    %rbx, %rsi
// 2d8: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2dd: 48 83 c4 18                   addq    $0x18, %rsp
// 2e1: 5b                            popq    %rbx
// 2e2: 41 5c                         popq    %r12
// 2e4: 41 5d                         popq    %r13
// 2e6: 41 5e                         popq    %r14
// 2e8: 41 5f                         popq    %r15
// 2ea: 5d                            popq    %rbp
// 2eb: ff e0                         jmpq    *%rax
// 2ed: 
static const unsigned char _STORE_SUBSCRplus_BINARY_OP_MULTIPLY_FLOAT_code_body[750] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0xf3, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x73, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x73, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x34, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xde, 0x74, 0x43, 0x48, 0x83, 0xc3, 0xe8, 0x49, 0x89, 0xde, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x70, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xde, 0x75, 0xbd, 0x4c, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0xf2, 0x41, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x59, 0x44, 0x24, 0x10, 0x49, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x3e, 0xf2, 0x41, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0xe9, 0xd1, 0x00, 0x00, 0x00, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x33, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xb8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0xeb, 0x6e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x1b, 0xff, 0xff, 0xff, 0x49, 0x89, 0xc7, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xfc, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x23, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x4c, 0x89, 0x63, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_BINARY_OP_MULTIPLY_FLOAT_code_holes[24] = {
    {0x29, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _STORE_SUBSCRplus_BINARY_OP_MULTIPLY_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BINARY_OP_MULTIPLY_FLOAT_data_holes[1];

// _STORE_SUBSCRplus_BINARY_OP_MULTIPLY_INT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BINARY_OP_MULTIPLY_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 8b 5e f8                   movq    -0x8(%rsi), %rbx
// 1f: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 23: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  PyObject_SetItem
// 31: 4c 89 ef                      movq    %r13, %rdi
// 34: 48 89 de                      movq    %rbx, %rsi
// 37: 4c 89 f2                      movq    %r14, %rdx
// 3a: ff d0                         callq   *%rax
// 3c: 89 c5                         movl    %eax, %ebp
// 3e: 49 8b 06                      movq    (%r14), %rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 7e 06                         jle     0x4c <_JIT_ENTRY+0x4c>
// 46: 85 c0                         testl   %eax, %eax
// 48: 79 27                         jns     0x71 <_JIT_ENTRY+0x71>
// 4a: eb 36                         jmp     0x82 <_JIT_ENTRY+0x82>
// 4c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004e:  R_X86_64_64  .rodata.str1.1
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _Py_NegativeRefcount
// 60: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 65: 4c 89 f2                      movq    %r14, %rdx
// 68: ff d0                         callq   *%rax
// 6a: 49 8b 06                      movq    (%r14), %rax
// 6d: 85 c0                         testl   %eax, %eax
// 6f: 78 11                         js      0x82 <_JIT_ENTRY+0x82>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 7b: ff d0                         callq   *%rax
// 7d: 49 ff 0e                      decq    (%r14)
// 80: 74 0f                         je      0x91 <_JIT_ENTRY+0x91>
// 82: 49 8b 45 00                   movq    (%r13), %rax
// 86: 48 85 c0                      testq   %rax, %rax
// 89: 7e 1e                         jle     0xa9 <_JIT_ENTRY+0xa9>
// 8b: 85 c0                         testl   %eax, %eax
// 8d: 79 40                         jns     0xcf <_JIT_ENTRY+0xcf>
// 8f: eb 50                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_Dealloc
// 9b: 4c 89 f7                      movq    %r14, %rdi
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 45 00                   movq    (%r13), %rax
// a4: 48 85 c0                      testq   %rax, %rax
// a7: 7f e2                         jg      0x8b <_JIT_ENTRY+0x8b>
// a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ab:  R_X86_64_64  .rodata.str1.1
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_NegativeRefcount
// bd: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c2: 4c 89 ea                      movq    %r13, %rdx
// c5: ff d0                         callq   *%rax
// c7: 49 8b 45 00                   movq    (%r13), %rax
// cb: 85 c0                         testl   %eax, %eax
// cd: 78 12                         js      0xe1 <_JIT_ENTRY+0xe1>
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d9: ff d0                         callq   *%rax
// db: 49 ff 4d 00                   decq    (%r13)
// df: 74 12                         je      0xf3 <_JIT_ENTRY+0xf3>
// e1: 48 8b 03                      movq    (%rbx), %rax
// e4: 48 85 c0                      testq   %rax, %rax
// e7: 7e 21                         jle     0x10a <_JIT_ENTRY+0x10a>
// e9: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// ed: 85 c0                         testl   %eax, %eax
// ef: 79 42                         jns     0x133 <_JIT_ENTRY+0x133>
// f1: eb 60                         jmp     0x153 <_JIT_ENTRY+0x153>
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: 4c 89 ef                      movq    %r13, %rdi
// 100: ff d0                         callq   *%rax
// 102: 48 8b 03                      movq    (%rbx), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f df                         jg      0xe9 <_JIT_ENTRY+0xe9>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 48 89 da                      movq    %rbx, %rdx
// 126: ff d0                         callq   *%rax
// 128: 48 8b 03                      movq    (%rbx), %rax
// 12b: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// 12f: 85 c0                         testl   %eax, %eax
// 131: 78 20                         js      0x153 <_JIT_ENTRY+0x153>
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13d: ff d0                         callq   *%rax
// 13f: 48 ff 0b                      decq    (%rbx)
// 142: 75 0f                         jne     0x153 <_JIT_ENTRY+0x153>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_Dealloc
// 14e: 48 89 df                      movq    %rbx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 ed                         testl   %ebp, %ebp
// 155: 4d 0f 44 fc                   cmoveq  %r12, %r15
// 159: 49 8d 5f f8                   leaq    -0x8(%r15), %rbx
// 15d: 85 ed                         testl   %ebp, %ebp
// 15f: 74 28                         je      0x189 <_JIT_ENTRY+0x189>
// 161: 49 89 dc                      movq    %rbx, %r12
// 164: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 169: 49 29 c4                      subq    %rax, %r12
// 16c: 49 83 c4 a8                   addq    $-0x58, %r12
// 170: 49 c1 ec 03                   shrq    $0x3, %r12
// 174: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 178: 31 c0                         xorl    %eax, %eax
// 17a: 48 83 c4 18                   addq    $0x18, %rsp
// 17e: 5b                            popq    %rbx
// 17f: 41 5c                         popq    %r12
// 181: 41 5d                         popq    %r13
// 183: 41 5e                         popq    %r14
// 185: 41 5f                         popq    %r15
// 187: 5d                            popq    %rbp
// 188: c3                            retq
// 189: 4d 8b 77 f0                   movq    -0x10(%r15), %r14
// 18d: 49 8b 6f f8                   movq    -0x8(%r15), %rbp
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _PyLong_Multiply
// 19b: 4c 89 f7                      movq    %r14, %rdi
// 19e: 48 89 ee                      movq    %rbp, %rsi
// 1a1: ff d0                         callq   *%rax
// 1a3: 49 89 c5                      movq    %rax, %r13
// 1a6: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 1aa: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ac:  R_X86_64_64  PyInterpreterState_Get
// 1b4: 75 3c                         jne     0x1f2 <_JIT_ENTRY+0x1f2>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  PyInterpreterState_Get
// 1c0: ff d0                         callq   *%rax
// 1c2: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cb:  R_X86_64_64  PyInterpreterState_Get
// 1d3: 48 ff 4d 00                   decq    (%rbp)
// 1d7: 75 19                         jne     0x1f2 <_JIT_ENTRY+0x1f2>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  PyObject_Free
// 1e3: 48 89 ef                      movq    %rbp, %rdi
// 1e6: ff d0                         callq   *%rax
// 1e8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ea:  R_X86_64_64  PyInterpreterState_Get
// 1f2: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 1f7: 75 1d                         jne     0x216 <_JIT_ENTRY+0x216>
// 1f9: ff d1                         callq   *%rcx
// 1fb: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 202: 49 ff 0e                      decq    (%r14)
// 205: 75 0f                         jne     0x216 <_JIT_ENTRY+0x216>
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  PyObject_Free
// 211: 4c 89 f7                      movq    %r14, %rdi
// 214: ff d0                         callq   *%rax
// 216: 4d 85 ed                      testq   %r13, %r13
// 219: 0f 84 45 ff ff ff             je      0x164 <_JIT_ENTRY+0x164>
// 21f: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _JIT_CONTINUE
// 22d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 232: 48 89 de                      movq    %rbx, %rsi
// 235: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 23a: 48 83 c4 18                   addq    $0x18, %rsp
// 23e: 5b                            popq    %rbx
// 23f: 41 5c                         popq    %r12
// 241: 41 5d                         popq    %r13
// 243: 41 5e                         popq    %r14
// 245: 41 5f                         popq    %r15
// 247: 5d                            popq    %rbp
// 248: ff e0                         jmpq    *%rax
// 24a: 
static const unsigned char _STORE_SUBSCRplus_BINARY_OP_MULTIPLY_INT_code_body[587] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x5e, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x12, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x21, 0x4d, 0x8d, 0x67, 0xe8, 0x85, 0xc0, 0x79, 0x42, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xdf, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x4d, 0x8d, 0x67, 0xe8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfc, 0x49, 0x8d, 0x5f, 0xf8, 0x85, 0xed, 0x74, 0x28, 0x49, 0x89, 0xdc, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xa8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x77, 0xf0, 0x49, 0x8b, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x75, 0x1d, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x45, 0xff, 0xff, 0xff, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_BINARY_OP_MULTIPLY_INT_code_holes[22] = {
    {0x29, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Multiply, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_BINARY_OP_MULTIPLY_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BINARY_OP_MULTIPLY_INT_data_holes[1];

// _STORE_SUBSCRplus_BINARY_OP_SUBTRACT_FLOAT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BINARY_OP_SUBTRACT_FLOAT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 48 89 f3                      movq    %rsi, %rbx
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 23: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  PyObject_SetItem
// 31: 4c 89 ef                      movq    %r13, %rdi
// 34: 4c 89 e6                      movq    %r12, %rsi
// 37: 4c 89 fa                      movq    %r15, %rdx
// 3a: ff d0                         callq   *%rax
// 3c: 89 c5                         movl    %eax, %ebp
// 3e: 49 8b 07                      movq    (%r15), %rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 7e 06                         jle     0x4c <_JIT_ENTRY+0x4c>
// 46: 85 c0                         testl   %eax, %eax
// 48: 79 27                         jns     0x71 <_JIT_ENTRY+0x71>
// 4a: eb 36                         jmp     0x82 <_JIT_ENTRY+0x82>
// 4c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004e:  R_X86_64_64  .rodata.str1.1
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _Py_NegativeRefcount
// 60: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 65: 4c 89 fa                      movq    %r15, %rdx
// 68: ff d0                         callq   *%rax
// 6a: 49 8b 07                      movq    (%r15), %rax
// 6d: 85 c0                         testl   %eax, %eax
// 6f: 78 11                         js      0x82 <_JIT_ENTRY+0x82>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 7b: ff d0                         callq   *%rax
// 7d: 49 ff 0f                      decq    (%r15)
// 80: 74 0f                         je      0x91 <_JIT_ENTRY+0x91>
// 82: 49 8b 45 00                   movq    (%r13), %rax
// 86: 48 85 c0                      testq   %rax, %rax
// 89: 7e 1e                         jle     0xa9 <_JIT_ENTRY+0xa9>
// 8b: 85 c0                         testl   %eax, %eax
// 8d: 79 40                         jns     0xcf <_JIT_ENTRY+0xcf>
// 8f: eb 50                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_Dealloc
// 9b: 4c 89 ff                      movq    %r15, %rdi
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 45 00                   movq    (%r13), %rax
// a4: 48 85 c0                      testq   %rax, %rax
// a7: 7f e2                         jg      0x8b <_JIT_ENTRY+0x8b>
// a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ab:  R_X86_64_64  .rodata.str1.1
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_NegativeRefcount
// bd: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c2: 4c 89 ea                      movq    %r13, %rdx
// c5: ff d0                         callq   *%rax
// c7: 49 8b 45 00                   movq    (%r13), %rax
// cb: 85 c0                         testl   %eax, %eax
// cd: 78 12                         js      0xe1 <_JIT_ENTRY+0xe1>
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d9: ff d0                         callq   *%rax
// db: 49 ff 4d 00                   decq    (%r13)
// df: 74 13                         je      0xf4 <_JIT_ENTRY+0xf4>
// e1: 49 8b 04 24                   movq    (%r12), %rax
// e5: 48 85 c0                      testq   %rax, %rax
// e8: 7e 22                         jle     0x10c <_JIT_ENTRY+0x10c>
// ea: 4c 8d 73 e8                   leaq    -0x18(%rbx), %r14
// ee: 85 c0                         testl   %eax, %eax
// f0: 79 44                         jns     0x136 <_JIT_ENTRY+0x136>
// f2: eb 54                         jmp     0x148 <_JIT_ENTRY+0x148>
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_Dealloc
// fe: 4c 89 ef                      movq    %r13, %rdi
// 101: ff d0                         callq   *%rax
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f de                         jg      0xea <_JIT_ENTRY+0xea>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 4c 8d 73 e8                   leaq    -0x18(%rbx), %r14
// 132: 85 c0                         testl   %eax, %eax
// 134: 78 12                         js      0x148 <_JIT_ENTRY+0x148>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 140: ff d0                         callq   *%rax
// 142: 49 ff 0c 24                   decq    (%r12)
// 146: 74 34                         je      0x17c <_JIT_ENTRY+0x17c>
// 148: 85 ed                         testl   %ebp, %ebp
// 14a: 49 0f 44 de                   cmoveq  %r14, %rbx
// 14e: 74 43                         je      0x193 <_JIT_ENTRY+0x193>
// 150: 48 83 c3 e8                   addq    $-0x18, %rbx
// 154: 49 89 de                      movq    %rbx, %r14
// 157: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15c: 49 29 c6                      subq    %rax, %r14
// 15f: 49 83 c6 b8                   addq    $-0x48, %r14
// 163: 49 c1 ee 03                   shrq    $0x3, %r14
// 167: 44 89 70 40                   movl    %r14d, 0x40(%rax)
// 16b: 31 c0                         xorl    %eax, %eax
// 16d: 48 83 c4 18                   addq    $0x18, %rsp
// 171: 5b                            popq    %rbx
// 172: 41 5c                         popq    %r12
// 174: 41 5d                         popq    %r13
// 176: 41 5e                         popq    %r14
// 178: 41 5f                         popq    %r15
// 17a: 5d                            popq    %rbp
// 17b: c3                            retq
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_Dealloc
// 186: 4c 89 e7                      movq    %r12, %rdi
// 189: ff d0                         callq   *%rax
// 18b: 85 ed                         testl   %ebp, %ebp
// 18d: 49 0f 44 de                   cmoveq  %r14, %rbx
// 191: 75 bd                         jne     0x150 <_JIT_ENTRY+0x150>
// 193: 4c 8b 6b f0                   movq    -0x10(%rbx), %r13
// 197: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 19b: f2 41 0f 10 45 10             movsd   0x10(%r13), %xmm0       # xmm0 = mem[0],zero
// 1a1: f2 41 0f 5c 44 24 10          subsd   0x10(%r12), %xmm0
// 1a8: 49 83 7d 00 01                cmpq    $0x1, (%r13)
// 1ad: 75 3e                         jne     0x1ed <_JIT_ENTRY+0x1ed>
// 1af: f2 41 0f 11 45 10             movsd   %xmm0, 0x10(%r13)
// 1b5: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1bb: 75 28                         jne     0x1e5 <_JIT_ENTRY+0x1e5>
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  PyInterpreterState_Get
// 1c7: ff d0                         callq   *%rax
// 1c9: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1d0: 49 ff 0c 24                   decq    (%r12)
// 1d4: 75 0f                         jne     0x1e5 <_JIT_ENTRY+0x1e5>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _PyFloat_ExactDealloc
// 1e0: 4c 89 e7                      movq    %r12, %rdi
// 1e3: ff d0                         callq   *%rax
// 1e5: 4d 89 ec                      movq    %r13, %r12
// 1e8: e9 d1 00 00 00                jmp     0x2be <_JIT_ENTRY+0x2be>
// 1ed: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 1f2: 75 33                         jne     0x227 <_JIT_ENTRY+0x227>
// 1f4: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 1fb: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 200: 0f 85 b8 00 00 00             jne     0x2be <_JIT_ENTRY+0x2be>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  PyInterpreterState_Get
// 210: ff d0                         callq   *%rax
// 212: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 219: 49 8b 45 00                   movq    (%r13), %rax
// 21d: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 221: 49 89 4d 00                   movq    %rcx, (%r13)
// 225: eb 6e                         jmp     0x295 <_JIT_ENTRY+0x295>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  PyFloat_FromDouble
// 231: ff d0                         callq   *%rax
// 233: 48 85 c0                      testq   %rax, %rax
// 236: 0f 84 1b ff ff ff             je      0x157 <_JIT_ENTRY+0x157>
// 23c: 49 89 c7                      movq    %rax, %r15
// 23f: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 244: 75 25                         jne     0x26b <_JIT_ENTRY+0x26b>
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  PyInterpreterState_Get
// 250: ff d0                         callq   *%rax
// 252: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 259: 49 8b 45 00                   movq    (%r13), %rax
// 25d: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 261: 49 89 4d 00                   movq    %rcx, (%r13)
// 265: 48 83 f8 01                   cmpq    $0x1, %rax
// 269: 7e 30                         jle     0x29b <_JIT_ENTRY+0x29b>
// 26b: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 271: 75 48                         jne     0x2bb <_JIT_ENTRY+0x2bb>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  PyInterpreterState_Get
// 27d: ff d0                         callq   *%rax
// 27f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 286: 49 8b 04 24                   movq    (%r12), %rax
// 28a: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 28e: 49 89 0c 24                   movq    %rcx, (%r12)
// 292: 4d 89 fc                      movq    %r15, %r12
// 295: 48 83 f8 01                   cmpq    $0x1, %rax
// 299: 7f 23                         jg      0x2be <_JIT_ENTRY+0x2be>
// 29b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029d:  R_X86_64_64  .rodata.str1.1+0x39
// 2a5: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002a7:  R_X86_64_64  .rodata.str1.1+0x4f
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 2b9: ff d0                         callq   *%rax
// 2bb: 4d 89 fc                      movq    %r15, %r12
// 2be: 4c 89 63 f0                   movq    %r12, -0x10(%rbx)
// 2c2: 48 83 c3 f8                   addq    $-0x8, %rbx
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _JIT_CONTINUE
// 2d0: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2d5: 48 89 de                      movq    %rbx, %rsi
// 2d8: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2dd: 48 83 c4 18                   addq    $0x18, %rsp
// 2e1: 5b                            popq    %rbx
// 2e2: 41 5c                         popq    %r12
// 2e4: 41 5d                         popq    %r13
// 2e6: 41 5e                         popq    %r14
// 2e8: 41 5f                         popq    %r15
// 2ea: 5d                            popq    %rbp
// 2eb: ff e0                         jmpq    *%rax
// 2ed: 
static const unsigned char _STORE_SUBSCRplus_BINARY_OP_SUBTRACT_FLOAT_code_body[750] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0xf3, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x73, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x73, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x34, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xde, 0x74, 0x43, 0x48, 0x83, 0xc3, 0xe8, 0x49, 0x89, 0xde, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x70, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xde, 0x75, 0xbd, 0x4c, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0xf2, 0x41, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x5c, 0x44, 0x24, 0x10, 0x49, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x3e, 0xf2, 0x41, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0xe9, 0xd1, 0x00, 0x00, 0x00, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x33, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xb8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0xeb, 0x6e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x1b, 0xff, 0xff, 0xff, 0x49, 0x89, 0xc7, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xfc, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x23, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x4c, 0x89, 0x63, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_BINARY_OP_SUBTRACT_FLOAT_code_holes[24] = {
    {0x29, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _STORE_SUBSCRplus_BINARY_OP_SUBTRACT_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BINARY_OP_SUBTRACT_FLOAT_data_holes[1];

// _STORE_SUBSCRplus_BINARY_OP_SUBTRACT_INT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BINARY_OP_SUBTRACT_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 8b 5e f8                   movq    -0x8(%rsi), %rbx
// 1f: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 23: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  PyObject_SetItem
// 31: 4c 89 ef                      movq    %r13, %rdi
// 34: 48 89 de                      movq    %rbx, %rsi
// 37: 4c 89 f2                      movq    %r14, %rdx
// 3a: ff d0                         callq   *%rax
// 3c: 89 c5                         movl    %eax, %ebp
// 3e: 49 8b 06                      movq    (%r14), %rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 7e 06                         jle     0x4c <_JIT_ENTRY+0x4c>
// 46: 85 c0                         testl   %eax, %eax
// 48: 79 27                         jns     0x71 <_JIT_ENTRY+0x71>
// 4a: eb 36                         jmp     0x82 <_JIT_ENTRY+0x82>
// 4c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004e:  R_X86_64_64  .rodata.str1.1
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _Py_NegativeRefcount
// 60: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 65: 4c 89 f2                      movq    %r14, %rdx
// 68: ff d0                         callq   *%rax
// 6a: 49 8b 06                      movq    (%r14), %rax
// 6d: 85 c0                         testl   %eax, %eax
// 6f: 78 11                         js      0x82 <_JIT_ENTRY+0x82>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 7b: ff d0                         callq   *%rax
// 7d: 49 ff 0e                      decq    (%r14)
// 80: 74 0f                         je      0x91 <_JIT_ENTRY+0x91>
// 82: 49 8b 45 00                   movq    (%r13), %rax
// 86: 48 85 c0                      testq   %rax, %rax
// 89: 7e 1e                         jle     0xa9 <_JIT_ENTRY+0xa9>
// 8b: 85 c0                         testl   %eax, %eax
// 8d: 79 40                         jns     0xcf <_JIT_ENTRY+0xcf>
// 8f: eb 50                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_Dealloc
// 9b: 4c 89 f7                      movq    %r14, %rdi
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 45 00                   movq    (%r13), %rax
// a4: 48 85 c0                      testq   %rax, %rax
// a7: 7f e2                         jg      0x8b <_JIT_ENTRY+0x8b>
// a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ab:  R_X86_64_64  .rodata.str1.1
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_NegativeRefcount
// bd: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c2: 4c 89 ea                      movq    %r13, %rdx
// c5: ff d0                         callq   *%rax
// c7: 49 8b 45 00                   movq    (%r13), %rax
// cb: 85 c0                         testl   %eax, %eax
// cd: 78 12                         js      0xe1 <_JIT_ENTRY+0xe1>
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d9: ff d0                         callq   *%rax
// db: 49 ff 4d 00                   decq    (%r13)
// df: 74 12                         je      0xf3 <_JIT_ENTRY+0xf3>
// e1: 48 8b 03                      movq    (%rbx), %rax
// e4: 48 85 c0                      testq   %rax, %rax
// e7: 7e 21                         jle     0x10a <_JIT_ENTRY+0x10a>
// e9: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// ed: 85 c0                         testl   %eax, %eax
// ef: 79 42                         jns     0x133 <_JIT_ENTRY+0x133>
// f1: eb 60                         jmp     0x153 <_JIT_ENTRY+0x153>
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: 4c 89 ef                      movq    %r13, %rdi
// 100: ff d0                         callq   *%rax
// 102: 48 8b 03                      movq    (%rbx), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f df                         jg      0xe9 <_JIT_ENTRY+0xe9>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 48 89 da                      movq    %rbx, %rdx
// 126: ff d0                         callq   *%rax
// 128: 48 8b 03                      movq    (%rbx), %rax
// 12b: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// 12f: 85 c0                         testl   %eax, %eax
// 131: 78 20                         js      0x153 <_JIT_ENTRY+0x153>
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13d: ff d0                         callq   *%rax
// 13f: 48 ff 0b                      decq    (%rbx)
// 142: 75 0f                         jne     0x153 <_JIT_ENTRY+0x153>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_Dealloc
// 14e: 48 89 df                      movq    %rbx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 ed                         testl   %ebp, %ebp
// 155: 4d 0f 44 fc                   cmoveq  %r12, %r15
// 159: 49 8d 5f f8                   leaq    -0x8(%r15), %rbx
// 15d: 85 ed                         testl   %ebp, %ebp
// 15f: 74 28                         je      0x189 <_JIT_ENTRY+0x189>
// 161: 49 89 dc                      movq    %rbx, %r12
// 164: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 169: 49 29 c4                      subq    %rax, %r12
// 16c: 49 83 c4 a8                   addq    $-0x58, %r12
// 170: 49 c1 ec 03                   shrq    $0x3, %r12
// 174: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 178: 31 c0                         xorl    %eax, %eax
// 17a: 48 83 c4 18                   addq    $0x18, %rsp
// 17e: 5b                            popq    %rbx
// 17f: 41 5c                         popq    %r12
// 181: 41 5d                         popq    %r13
// 183: 41 5e                         popq    %r14
// 185: 41 5f                         popq    %r15
// 187: 5d                            popq    %rbp
// 188: c3                            retq
// 189: 4d 8b 77 f0                   movq    -0x10(%r15), %r14
// 18d: 49 8b 6f f8                   movq    -0x8(%r15), %rbp
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _PyLong_Subtract
// 19b: 4c 89 f7                      movq    %r14, %rdi
// 19e: 48 89 ee                      movq    %rbp, %rsi
// 1a1: ff d0                         callq   *%rax
// 1a3: 49 89 c5                      movq    %rax, %r13
// 1a6: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 1aa: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ac:  R_X86_64_64  PyInterpreterState_Get
// 1b4: 75 3c                         jne     0x1f2 <_JIT_ENTRY+0x1f2>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  PyInterpreterState_Get
// 1c0: ff d0                         callq   *%rax
// 1c2: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cb:  R_X86_64_64  PyInterpreterState_Get
// 1d3: 48 ff 4d 00                   decq    (%rbp)
// 1d7: 75 19                         jne     0x1f2 <_JIT_ENTRY+0x1f2>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  PyObject_Free
// 1e3: 48 89 ef                      movq    %rbp, %rdi
// 1e6: ff d0                         callq   *%rax
// 1e8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ea:  R_X86_64_64  PyInterpreterState_Get
// 1f2: 41 f6 46 03 80                testb   $-0x80, 0x3(%r14)
// 1f7: 75 1d                         jne     0x216 <_JIT_ENTRY+0x216>
// 1f9: ff d1                         callq   *%rcx
// 1fb: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 202: 49 ff 0e                      decq    (%r14)
// 205: 75 0f                         jne     0x216 <_JIT_ENTRY+0x216>
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  PyObject_Free
// 211: 4c 89 f7                      movq    %r14, %rdi
// 214: ff d0                         callq   *%rax
// 216: 4d 85 ed                      testq   %r13, %r13
// 219: 0f 84 45 ff ff ff             je      0x164 <_JIT_ENTRY+0x164>
// 21f: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _JIT_CONTINUE
// 22d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 232: 48 89 de                      movq    %rbx, %rsi
// 235: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 23a: 48 83 c4 18                   addq    $0x18, %rsp
// 23e: 5b                            popq    %rbx
// 23f: 41 5c                         popq    %r12
// 241: 41 5d                         popq    %r13
// 243: 41 5e                         popq    %r14
// 245: 41 5f                         popq    %r15
// 247: 5d                            popq    %rbp
// 248: ff e0                         jmpq    *%rax
// 24a: 
static const unsigned char _STORE_SUBSCRplus_BINARY_OP_SUBTRACT_INT_code_body[587] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x5e, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x12, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x21, 0x4d, 0x8d, 0x67, 0xe8, 0x85, 0xc0, 0x79, 0x42, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xdf, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x4d, 0x8d, 0x67, 0xe8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfc, 0x49, 0x8d, 0x5f, 0xf8, 0x85, 0xed, 0x74, 0x28, 0x49, 0x89, 0xdc, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xa8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x77, 0xf0, 0x49, 0x8b, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xf6, 0x46, 0x03, 0x80, 0x75, 0x1d, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x45, 0xff, 0xff, 0xff, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_BINARY_OP_SUBTRACT_INT_code_holes[22] = {
    {0x29, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Subtract, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_BINARY_OP_SUBTRACT_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BINARY_OP_SUBTRACT_INT_data_holes[1];

// _STORE_SUBSCRplus_BINARY_SLICE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BINARY_SLICE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 0f                         je      0xea <_JIT_ENTRY+0xea>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 1e                         jle     0x102 <_JIT_ENTRY+0x102>
// e4: 85 c0                         testl   %eax, %eax
// e6: 79 40                         jns     0x128 <_JIT_ENTRY+0x128>
// e8: eb 50                         jmp     0x13a <_JIT_ENTRY+0x13a>
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_Dealloc
// f4: 4c 89 ef                      movq    %r13, %rdi
// f7: ff d0                         callq   *%rax
// f9: 49 8b 04 24                   movq    (%r12), %rax
// fd: 48 85 c0                      testq   %rax, %rax
// 100: 7f e2                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 102: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000104:  R_X86_64_64  .rodata.str1.1
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_NegativeRefcount
// 116: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11b: 4c 89 e2                      movq    %r12, %rdx
// 11e: ff d0                         callq   *%rax
// 120: 49 8b 04 24                   movq    (%r12), %rax
// 124: 85 c0                         testl   %eax, %eax
// 126: 78 12                         js      0x13a <_JIT_ENTRY+0x13a>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 132: ff d0                         callq   *%rax
// 134: 49 ff 0c 24                   decq    (%r12)
// 138: 74 24                         je      0x15e <_JIT_ENTRY+0x15e>
// 13a: 85 ed                         testl   %ebp, %ebp
// 13c: 74 33                         je      0x171 <_JIT_ENTRY+0x171>
// 13e: 4c 29 f3                      subq    %r14, %rbx
// 141: 48 83 c3 a0                   addq    $-0x60, %rbx
// 145: 48 c1 eb 03                   shrq    $0x3, %rbx
// 149: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 14d: 31 c0                         xorl    %eax, %eax
// 14f: 48 83 c4 08                   addq    $0x8, %rsp
// 153: 5b                            popq    %rbx
// 154: 41 5c                         popq    %r12
// 156: 41 5d                         popq    %r13
// 158: 41 5e                         popq    %r14
// 15a: 41 5f                         popq    %r15
// 15c: 5d                            popq    %rbp
// 15d: c3                            retq
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_Dealloc
// 168: 4c 89 e7                      movq    %r12, %rdi
// 16b: ff d0                         callq   *%rax
// 16d: 85 ed                         testl   %ebp, %ebp
// 16f: 75 cd                         jne     0x13e <_JIT_ENTRY+0x13e>
// 171: 48 8b 73 e0                   movq    -0x20(%rbx), %rsi
// 175: 4c 8b 63 d0                   movq    -0x30(%rbx), %r12
// 179: 48 8b 7b d8                   movq    -0x28(%rbx), %rdi
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 187: ff d0                         callq   *%rax
// 189: 48 85 c0                      testq   %rax, %rax
// 18c: 74 27                         je      0x1b5 <_JIT_ENTRY+0x1b5>
// 18e: 48 89 c5                      movq    %rax, %rbp
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  PyObject_GetItem
// 19b: 4c 89 e7                      movq    %r12, %rdi
// 19e: 48 89 ee                      movq    %rbp, %rsi
// 1a1: ff d0                         callq   *%rax
// 1a3: 49 89 c5                      movq    %rax, %r13
// 1a6: 48 8b 45 00                   movq    (%rbp), %rax
// 1aa: 48 85 c0                      testq   %rax, %rax
// 1ad: 7e 0b                         jle     0x1ba <_JIT_ENTRY+0x1ba>
// 1af: 85 c0                         testl   %eax, %eax
// 1b1: 79 2d                         jns     0x1e0 <_JIT_ENTRY+0x1e0>
// 1b3: eb 4c                         jmp     0x201 <_JIT_ENTRY+0x201>
// 1b5: 45 31 ed                      xorl    %r13d, %r13d
// 1b8: eb 47                         jmp     0x201 <_JIT_ENTRY+0x201>
// 1ba: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bc:  R_X86_64_64  .rodata.str1.1
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _Py_NegativeRefcount
// 1ce: be 99 01 00 00                movl    $0x199, %esi            # imm = 0x199
// 1d3: 48 89 ea                      movq    %rbp, %rdx
// 1d6: ff d0                         callq   *%rax
// 1d8: 48 8b 45 00                   movq    (%rbp), %rax
// 1dc: 85 c0                         testl   %eax, %eax
// 1de: 78 21                         js      0x201 <_JIT_ENTRY+0x201>
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ea: ff d0                         callq   *%rax
// 1ec: 48 ff 4d 00                   decq    (%rbp)
// 1f0: 75 0f                         jne     0x201 <_JIT_ENTRY+0x201>
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_Dealloc
// 1fc: 48 89 ef                      movq    %rbp, %rdi
// 1ff: ff d0                         callq   *%rax
// 201: 49 8b 04 24                   movq    (%r12), %rax
// 205: 48 85 c0                      testq   %rax, %rax
// 208: 7e 06                         jle     0x210 <_JIT_ENTRY+0x210>
// 20a: 85 c0                         testl   %eax, %eax
// 20c: 79 28                         jns     0x236 <_JIT_ENTRY+0x236>
// 20e: eb 38                         jmp     0x248 <_JIT_ENTRY+0x248>
// 210: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000212:  R_X86_64_64  .rodata.str1.1
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_NegativeRefcount
// 224: be 9b 01 00 00                movl    $0x19b, %esi            # imm = 0x19B
// 229: 4c 89 e2                      movq    %r12, %rdx
// 22c: ff d0                         callq   *%rax
// 22e: 49 8b 04 24                   movq    (%r12), %rax
// 232: 85 c0                         testl   %eax, %eax
// 234: 78 12                         js      0x248 <_JIT_ENTRY+0x248>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 240: ff d0                         callq   *%rax
// 242: 49 ff 0c 24                   decq    (%r12)
// 246: 74 31                         je      0x279 <_JIT_ENTRY+0x279>
// 248: 4d 85 ed                      testq   %r13, %r13
// 24b: 74 40                         je      0x28d <_JIT_ENTRY+0x28d>
// 24d: 4c 89 6b d0                   movq    %r13, -0x30(%rbx)
// 251: 48 83 c3 d8                   addq    $-0x28, %rbx
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _JIT_CONTINUE
// 25f: 4c 89 f7                      movq    %r14, %rdi
// 262: 48 89 de                      movq    %rbx, %rsi
// 265: 48 8b 14 24                   movq    (%rsp), %rdx
// 269: 48 83 c4 08                   addq    $0x8, %rsp
// 26d: 5b                            popq    %rbx
// 26e: 41 5c                         popq    %r12
// 270: 41 5d                         popq    %r13
// 272: 41 5e                         popq    %r14
// 274: 41 5f                         popq    %r15
// 276: 5d                            popq    %rbp
// 277: ff e0                         jmpq    *%rax
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_Dealloc
// 283: 4c 89 e7                      movq    %r12, %rdi
// 286: ff d0                         callq   *%rax
// 288: 4d 85 ed                      testq   %r13, %r13
// 28b: 75 c0                         jne     0x24d <_JIT_ENTRY+0x24d>
// 28d: 48 83 c3 e8                   addq    $-0x18, %rbx
// 291: e9 a8 fe ff ff                jmp     0x13e <_JIT_ENTRY+0x13e>
// 296: 
static const unsigned char _STORE_SUBSCRplus_BINARY_SLICE_code_body[663] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x24, 0x85, 0xed, 0x74, 0x33, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x75, 0xcd, 0x48, 0x8b, 0x73, 0xe0, 0x4c, 0x8b, 0x63, 0xd0, 0x48, 0x8b, 0x7b, 0xd8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x27, 0x48, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0b, 0x85, 0xc0, 0x79, 0x2d, 0xeb, 0x4c, 0x45, 0x31, 0xed, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x9b, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x31, 0x4d, 0x85, 0xed, 0x74, 0x40, 0x4c, 0x89, 0x6b, 0xd0, 0x48, 0x83, 0xc3, 0xd8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0xc0, 0x48, 0x83, 0xc3, 0xe8, 0xe9, 0xa8, 0xfe, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_BINARY_SLICE_code_holes[25] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_BINARY_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BINARY_SLICE_data_holes[1];

// _STORE_SUBSCRplus_BINARY_SUBSCR
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BINARY_SUBSCR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 8b 5e f8                   movq    -0x8(%rsi), %rbx
// 1f: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 23: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  PyObject_SetItem
// 31: 4c 89 ef                      movq    %r13, %rdi
// 34: 48 89 de                      movq    %rbx, %rsi
// 37: 4c 89 f2                      movq    %r14, %rdx
// 3a: ff d0                         callq   *%rax
// 3c: 89 c5                         movl    %eax, %ebp
// 3e: 49 8b 06                      movq    (%r14), %rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 7e 06                         jle     0x4c <_JIT_ENTRY+0x4c>
// 46: 85 c0                         testl   %eax, %eax
// 48: 79 27                         jns     0x71 <_JIT_ENTRY+0x71>
// 4a: eb 36                         jmp     0x82 <_JIT_ENTRY+0x82>
// 4c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004e:  R_X86_64_64  .rodata.str1.1
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _Py_NegativeRefcount
// 60: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 65: 4c 89 f2                      movq    %r14, %rdx
// 68: ff d0                         callq   *%rax
// 6a: 49 8b 06                      movq    (%r14), %rax
// 6d: 85 c0                         testl   %eax, %eax
// 6f: 78 11                         js      0x82 <_JIT_ENTRY+0x82>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 7b: ff d0                         callq   *%rax
// 7d: 49 ff 0e                      decq    (%r14)
// 80: 74 0f                         je      0x91 <_JIT_ENTRY+0x91>
// 82: 49 8b 45 00                   movq    (%r13), %rax
// 86: 48 85 c0                      testq   %rax, %rax
// 89: 7e 1e                         jle     0xa9 <_JIT_ENTRY+0xa9>
// 8b: 85 c0                         testl   %eax, %eax
// 8d: 79 40                         jns     0xcf <_JIT_ENTRY+0xcf>
// 8f: eb 50                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_Dealloc
// 9b: 4c 89 f7                      movq    %r14, %rdi
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 45 00                   movq    (%r13), %rax
// a4: 48 85 c0                      testq   %rax, %rax
// a7: 7f e2                         jg      0x8b <_JIT_ENTRY+0x8b>
// a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ab:  R_X86_64_64  .rodata.str1.1
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_NegativeRefcount
// bd: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c2: 4c 89 ea                      movq    %r13, %rdx
// c5: ff d0                         callq   *%rax
// c7: 49 8b 45 00                   movq    (%r13), %rax
// cb: 85 c0                         testl   %eax, %eax
// cd: 78 12                         js      0xe1 <_JIT_ENTRY+0xe1>
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d9: ff d0                         callq   *%rax
// db: 49 ff 4d 00                   decq    (%r13)
// df: 74 12                         je      0xf3 <_JIT_ENTRY+0xf3>
// e1: 48 8b 03                      movq    (%rbx), %rax
// e4: 48 85 c0                      testq   %rax, %rax
// e7: 7e 21                         jle     0x10a <_JIT_ENTRY+0x10a>
// e9: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// ed: 85 c0                         testl   %eax, %eax
// ef: 79 42                         jns     0x133 <_JIT_ENTRY+0x133>
// f1: eb 60                         jmp     0x153 <_JIT_ENTRY+0x153>
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: 4c 89 ef                      movq    %r13, %rdi
// 100: ff d0                         callq   *%rax
// 102: 48 8b 03                      movq    (%rbx), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f df                         jg      0xe9 <_JIT_ENTRY+0xe9>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 48 89 da                      movq    %rbx, %rdx
// 126: ff d0                         callq   *%rax
// 128: 48 8b 03                      movq    (%rbx), %rax
// 12b: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// 12f: 85 c0                         testl   %eax, %eax
// 131: 78 20                         js      0x153 <_JIT_ENTRY+0x153>
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13d: ff d0                         callq   *%rax
// 13f: 48 ff 0b                      decq    (%rbx)
// 142: 75 0f                         jne     0x153 <_JIT_ENTRY+0x153>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_Dealloc
// 14e: 48 89 df                      movq    %rbx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 ed                         testl   %ebp, %ebp
// 155: 4d 0f 44 fc                   cmoveq  %r12, %r15
// 159: 49 8d 5f f8                   leaq    -0x8(%r15), %rbx
// 15d: 85 ed                         testl   %ebp, %ebp
// 15f: 74 28                         je      0x189 <_JIT_ENTRY+0x189>
// 161: 49 89 dc                      movq    %rbx, %r12
// 164: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 169: 49 29 c4                      subq    %rax, %r12
// 16c: 49 83 c4 a8                   addq    $-0x58, %r12
// 170: 49 c1 ec 03                   shrq    $0x3, %r12
// 174: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 178: 31 c0                         xorl    %eax, %eax
// 17a: 48 83 c4 18                   addq    $0x18, %rsp
// 17e: 5b                            popq    %rbx
// 17f: 41 5c                         popq    %r12
// 181: 41 5d                         popq    %r13
// 183: 41 5e                         popq    %r14
// 185: 41 5f                         popq    %r15
// 187: 5d                            popq    %rbp
// 188: c3                            retq
// 189: 4d 8b 77 f0                   movq    -0x10(%r15), %r14
// 18d: 49 8b 6f f8                   movq    -0x8(%r15), %rbp
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  PyObject_GetItem
// 19b: 4c 89 f7                      movq    %r14, %rdi
// 19e: 48 89 ee                      movq    %rbp, %rsi
// 1a1: ff d0                         callq   *%rax
// 1a3: 49 89 c5                      movq    %rax, %r13
// 1a6: 49 8b 06                      movq    (%r14), %rax
// 1a9: 48 85 c0                      testq   %rax, %rax
// 1ac: 7e 06                         jle     0x1b4 <_JIT_ENTRY+0x1b4>
// 1ae: 85 c0                         testl   %eax, %eax
// 1b0: 79 27                         jns     0x1d9 <_JIT_ENTRY+0x1d9>
// 1b2: eb 36                         jmp     0x1ea <_JIT_ENTRY+0x1ea>
// 1b4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b6:  R_X86_64_64  .rodata.str1.1
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _Py_NegativeRefcount
// 1c8: be 81 01 00 00                movl    $0x181, %esi            # imm = 0x181
// 1cd: 4c 89 f2                      movq    %r14, %rdx
// 1d0: ff d0                         callq   *%rax
// 1d2: 49 8b 06                      movq    (%r14), %rax
// 1d5: 85 c0                         testl   %eax, %eax
// 1d7: 78 11                         js      0x1ea <_JIT_ENTRY+0x1ea>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e3: ff d0                         callq   *%rax
// 1e5: 49 ff 0e                      decq    (%r14)
// 1e8: 74 0f                         je      0x1f9 <_JIT_ENTRY+0x1f9>
// 1ea: 48 8b 45 00                   movq    (%rbp), %rax
// 1ee: 48 85 c0                      testq   %rax, %rax
// 1f1: 7e 1e                         jle     0x211 <_JIT_ENTRY+0x211>
// 1f3: 85 c0                         testl   %eax, %eax
// 1f5: 79 40                         jns     0x237 <_JIT_ENTRY+0x237>
// 1f7: eb 5f                         jmp     0x258 <_JIT_ENTRY+0x258>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_Dealloc
// 203: 4c 89 f7                      movq    %r14, %rdi
// 206: ff d0                         callq   *%rax
// 208: 48 8b 45 00                   movq    (%rbp), %rax
// 20c: 48 85 c0                      testq   %rax, %rax
// 20f: 7f e2                         jg      0x1f3 <_JIT_ENTRY+0x1f3>
// 211: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000213:  R_X86_64_64  .rodata.str1.1
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_NegativeRefcount
// 225: be 82 01 00 00                movl    $0x182, %esi            # imm = 0x182
// 22a: 48 89 ea                      movq    %rbp, %rdx
// 22d: ff d0                         callq   *%rax
// 22f: 48 8b 45 00                   movq    (%rbp), %rax
// 233: 85 c0                         testl   %eax, %eax
// 235: 78 21                         js      0x258 <_JIT_ENTRY+0x258>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 241: ff d0                         callq   *%rax
// 243: 48 ff 4d 00                   decq    (%rbp)
// 247: 75 0f                         jne     0x258 <_JIT_ENTRY+0x258>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_Dealloc
// 253: 48 89 ef                      movq    %rbp, %rdi
// 256: ff d0                         callq   *%rax
// 258: 4d 85 ed                      testq   %r13, %r13
// 25b: 0f 84 03 ff ff ff             je      0x164 <_JIT_ENTRY+0x164>
// 261: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _JIT_CONTINUE
// 26f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 274: 48 89 de                      movq    %rbx, %rsi
// 277: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 27c: 48 83 c4 18                   addq    $0x18, %rsp
// 280: 5b                            popq    %rbx
// 281: 41 5c                         popq    %r12
// 283: 41 5d                         popq    %r13
// 285: 41 5e                         popq    %r14
// 287: 41 5f                         popq    %r15
// 289: 5d                            popq    %rbp
// 28a: ff e0                         jmpq    *%rax
// 28c: 
static const unsigned char _STORE_SUBSCRplus_BINARY_SUBSCR_code_body[653] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x5e, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x12, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x21, 0x4d, 0x8d, 0x67, 0xe8, 0x85, 0xc0, 0x79, 0x42, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xdf, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x4d, 0x8d, 0x67, 0xe8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfc, 0x49, 0x8d, 0x5f, 0xf8, 0x85, 0xed, 0x74, 0x28, 0x49, 0x89, 0xdc, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xa8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x77, 0xf0, 0x49, 0x8b, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x81, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x82, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x03, 0xff, 0xff, 0xff, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_BINARY_SUBSCR_code_holes[24] = {
    {0x29, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_BINARY_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BINARY_SUBSCR_data_holes[1];

// _STORE_SUBSCRplus_BINARY_SUBSCR_DICT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BINARY_SUBSCR_DICT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f6                      movq    %rsi, %r14
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 fa                      movq    %r15, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 07                      movq    (%r15), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 fa                      movq    %r15, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 07                      movq    (%r15), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0f                      decq    (%r15)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 ff                      movq    %r15, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 22                         je      0x168 <_JIT_ENTRY+0x168>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 14c: 74 31                         je      0x17f <_JIT_ENTRY+0x17f>
// 14e: 49 83 c6 f8                   addq    $-0x8, %r14
// 152: 4d 89 f7                      movq    %r14, %r15
// 155: 49 29 df                      subq    %rbx, %r15
// 158: 49 83 c7 a8                   addq    $-0x58, %r15
// 15c: 49 c1 ef 03                   shrq    $0x3, %r15
// 160: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 164: 31 c0                         xorl    %eax, %eax
// 166: eb 53                         jmp     0x1bb <_JIT_ENTRY+0x1bb>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_Dealloc
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: ff d0                         callq   *%rax
// 177: 85 ed                         testl   %ebp, %ebp
// 179: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 17d: 75 cf                         jne     0x14e <_JIT_ENTRY+0x14e>
// 17f: 4d 8b 6e f0                   movq    -0x10(%r14), %r13
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  PyDict_Type
// 18d: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 191: 74 37                         je      0x1ca <_JIT_ENTRY+0x1ca>
// 193: 49 29 df                      subq    %rbx, %r15
// 196: 49 83 c7 b8                   addq    $-0x48, %r15
// 19a: 49 c1 ef 03                   shrq    $0x3, %r15
// 19e: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 1a2: 48 8b 03                      movq    (%rbx), %rax
// 1a5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a7:  R_X86_64_64  _JIT_TARGET
// 1af: 89 c9                         movl    %ecx, %ecx
// 1b1: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b5: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1bb: 48 83 c4 18                   addq    $0x18, %rsp
// 1bf: 5b                            popq    %rbx
// 1c0: 41 5c                         popq    %r12
// 1c2: 41 5d                         popq    %r13
// 1c4: 41 5e                         popq    %r14
// 1c6: 41 5f                         popq    %r15
// 1c8: 5d                            popq    %rbp
// 1c9: c3                            retq
// 1ca: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  PyDict_GetItemRef
// 1d8: 48 8d 54 24 10                leaq    0x10(%rsp), %rdx
// 1dd: 4c 89 ef                      movq    %r13, %rdi
// 1e0: 4c 89 e6                      movq    %r12, %rsi
// 1e3: ff d0                         callq   *%rax
// 1e5: 89 c5                         movl    %eax, %ebp
// 1e7: 85 c0                         testl   %eax, %eax
// 1e9: 74 0f                         je      0x1fa <_JIT_ENTRY+0x1fa>
// 1eb: 49 8b 45 00                   movq    (%r13), %rax
// 1ef: 48 85 c0                      testq   %rax, %rax
// 1f2: 7e 1e                         jle     0x212 <_JIT_ENTRY+0x212>
// 1f4: 85 c0                         testl   %eax, %eax
// 1f6: 79 40                         jns     0x238 <_JIT_ENTRY+0x238>
// 1f8: eb 5f                         jmp     0x259 <_JIT_ENTRY+0x259>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _PyErr_SetKeyError
// 204: 4c 89 e7                      movq    %r12, %rdi
// 207: ff d0                         callq   *%rax
// 209: 49 8b 45 00                   movq    (%r13), %rax
// 20d: 48 85 c0                      testq   %rax, %rax
// 210: 7f e2                         jg      0x1f4 <_JIT_ENTRY+0x1f4>
// 212: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000214:  R_X86_64_64  .rodata.str1.1
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _Py_NegativeRefcount
// 226: be 0c 02 00 00                movl    $0x20c, %esi            # imm = 0x20C
// 22b: 4c 89 ea                      movq    %r13, %rdx
// 22e: ff d0                         callq   *%rax
// 230: 49 8b 45 00                   movq    (%r13), %rax
// 234: 85 c0                         testl   %eax, %eax
// 236: 78 21                         js      0x259 <_JIT_ENTRY+0x259>
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 242: ff d0                         callq   *%rax
// 244: 49 ff 4d 00                   decq    (%r13)
// 248: 75 0f                         jne     0x259 <_JIT_ENTRY+0x259>
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_Dealloc
// 254: 4c 89 ef                      movq    %r13, %rdi
// 257: ff d0                         callq   *%rax
// 259: 49 8b 04 24                   movq    (%r12), %rax
// 25d: 48 85 c0                      testq   %rax, %rax
// 260: 7f 22                         jg      0x284 <_JIT_ENTRY+0x284>
// 262: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000264:  R_X86_64_64  .rodata.str1.1
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _Py_NegativeRefcount
// 276: be 0d 02 00 00                movl    $0x20d, %esi            # imm = 0x20D
// 27b: 4c 89 e2                      movq    %r12, %rdx
// 27e: ff d0                         callq   *%rax
// 280: 49 8b 04 24                   movq    (%r12), %rax
// 284: 85 c0                         testl   %eax, %eax
// 286: 78 21                         js      0x2a9 <_JIT_ENTRY+0x2a9>
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 292: ff d0                         callq   *%rax
// 294: 49 ff 0c 24                   decq    (%r12)
// 298: 75 0f                         jne     0x2a9 <_JIT_ENTRY+0x2a9>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_Dealloc
// 2a4: 4c 89 e7                      movq    %r12, %rdi
// 2a7: ff d0                         callq   *%rax
// 2a9: 85 ed                         testl   %ebp, %ebp
// 2ab: 0f 8e a4 fe ff ff             jle     0x155 <_JIT_ENTRY+0x155>
// 2b1: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2b6: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 2ba: 49 83 c6 f8                   addq    $-0x8, %r14
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _JIT_CONTINUE
// 2c8: 48 89 df                      movq    %rbx, %rdi
// 2cb: 4c 89 f6                      movq    %r14, %rsi
// 2ce: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2d3: 48 83 c4 18                   addq    $0x18, %rsp
// 2d7: 5b                            popq    %rbx
// 2d8: 41 5c                         popq    %r12
// 2da: 41 5d                         popq    %r13
// 2dc: 41 5e                         popq    %r14
// 2de: 41 5f                         popq    %r15
// 2e0: 5d                            popq    %rbp
// 2e1: ff e0                         jmpq    *%rax
// 2e3: 
static const unsigned char _STORE_SUBSCRplus_BINARY_SUBSCR_DICT_code_body[740] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x22, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x31, 0x49, 0x83, 0xc6, 0xf8, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xa8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xeb, 0x53, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xcf, 0x4d, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x85, 0xc0, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0d, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x8e, 0xa4, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x89, 0x46, 0xf0, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_BINARY_SUBSCR_DICT_code_holes[27] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetKeyError, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_BINARY_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BINARY_SUBSCR_DICT_data_holes[1];

// _STORE_SUBSCRplus_BINARY_SUBSCR_LIST_INT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BINARY_SUBSCR_LIST_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1e                         je      0x160 <_JIT_ENTRY+0x160>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 2d                         je      0x177 <_JIT_ENTRY+0x177>
// 14a: 49 29 de                      subq    %rbx, %r14
// 14d: 49 83 c6 a0                   addq    $-0x60, %r14
// 151: 49 c1 ee 03                   shrq    $0x3, %r14
// 155: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: e9 54 01 00 00                jmp     0x2b4 <_JIT_ENTRY+0x2b4>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_Dealloc
// 16a: 4c 89 e7                      movq    %r12, %rdi
// 16d: ff d0                         callq   *%rax
// 16f: 85 ed                         testl   %ebp, %ebp
// 171: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 175: 75 d3                         jne     0x14a <_JIT_ENTRY+0x14a>
// 177: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  PyLong_Type
// 185: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 189: 0f 85 fd 00 00 00             jne     0x28c <_JIT_ENTRY+0x28c>
// 18f: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  PyList_Type
// 19d: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1a2: 0f 85 e4 00 00 00             jne     0x28c <_JIT_ENTRY+0x28c>
// 1a8: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 1ad: 0f 87 d9 00 00 00             ja      0x28c <_JIT_ENTRY+0x28c>
// 1b3: 41 8b 45 18                   movl    0x18(%r13), %eax
// 1b7: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 1bc: 0f 8e ca 00 00 00             jle     0x28c <_JIT_ENTRY+0x28c>
// 1c2: 49 8b 4c 24 18                movq    0x18(%r12), %rcx
// 1c7: 48 8b 2c c1                   movq    (%rcx,%rax,8), %rbp
// 1cb: 8b 45 00                      movl    (%rbp), %eax
// 1ce: ff c0                         incl    %eax
// 1d0: 74 0f                         je      0x1e1 <_JIT_ENTRY+0x1e1>
// 1d2: 89 45 00                      movl    %eax, (%rbp)
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1df: ff d0                         callq   *%rax
// 1e1: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1e6: 75 28                         jne     0x210 <_JIT_ENTRY+0x210>
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  PyInterpreterState_Get
// 1f2: ff d0                         callq   *%rax
// 1f4: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1fb: 49 ff 4d 00                   decq    (%r13)
// 1ff: 75 0f                         jne     0x210 <_JIT_ENTRY+0x210>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  PyObject_Free
// 20b: 4c 89 ef                      movq    %r13, %rdi
// 20e: ff d0                         callq   *%rax
// 210: 49 8b 04 24                   movq    (%r12), %rax
// 214: 48 85 c0                      testq   %rax, %rax
// 217: 7f 22                         jg      0x23b <_JIT_ENTRY+0x23b>
// 219: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021b:  R_X86_64_64  .rodata.str1.1
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_NegativeRefcount
// 22d: be cc 01 00 00                movl    $0x1cc, %esi            # imm = 0x1CC
// 232: 4c 89 e2                      movq    %r12, %rdx
// 235: ff d0                         callq   *%rax
// 237: 49 8b 04 24                   movq    (%r12), %rax
// 23b: 4d 8d 7e f8                   leaq    -0x8(%r14), %r15
// 23f: 85 c0                         testl   %eax, %eax
// 241: 78 21                         js      0x264 <_JIT_ENTRY+0x264>
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24d: ff d0                         callq   *%rax
// 24f: 49 ff 0c 24                   decq    (%r12)
// 253: 75 0f                         jne     0x264 <_JIT_ENTRY+0x264>
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _Py_Dealloc
// 25f: 4c 89 e7                      movq    %r12, %rdi
// 262: ff d0                         callq   *%rax
// 264: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _JIT_CONTINUE
// 272: 48 89 df                      movq    %rbx, %rdi
// 275: 4c 89 fe                      movq    %r15, %rsi
// 278: 48 8b 14 24                   movq    (%rsp), %rdx
// 27c: 48 83 c4 08                   addq    $0x8, %rsp
// 280: 5b                            popq    %rbx
// 281: 41 5c                         popq    %r12
// 283: 41 5d                         popq    %r13
// 285: 41 5e                         popq    %r14
// 287: 41 5f                         popq    %r15
// 289: 5d                            popq    %rbp
// 28a: ff e0                         jmpq    *%rax
// 28c: 49 29 de                      subq    %rbx, %r14
// 28f: 49 83 c6 b8                   addq    $-0x48, %r14
// 293: 49 c1 ee 03                   shrq    $0x3, %r14
// 297: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 29b: 48 8b 03                      movq    (%rbx), %rax
// 29e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002a0:  R_X86_64_64  _JIT_TARGET
// 2a8: 89 c9                         movl    %ecx, %ecx
// 2aa: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2ae: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2b4: 48 83 c4 08                   addq    $0x8, %rsp
// 2b8: 5b                            popq    %rbx
// 2b9: 41 5c                         popq    %r12
// 2bb: 41 5d                         popq    %r13
// 2bd: 41 5e                         popq    %r14
// 2bf: 41 5f                         popq    %r15
// 2c1: 5d                            popq    %rbp
// 2c2: c3                            retq
// 2c3: 
static const unsigned char _STORE_SUBSCRplus_BINARY_SUBSCR_LIST_INT_code_body[708] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1e, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x2d, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x54, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xd3, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfd, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xe4, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xd9, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xca, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x8b, 0x2c, 0xc1, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x0f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcc, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _STORE_SUBSCRplus_BINARY_SUBSCR_LIST_INT_code_holes[25] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_BINARY_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BINARY_SUBSCR_LIST_INT_data_holes[1];

// _STORE_SUBSCRplus_BINARY_SUBSCR_STR_INT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BINARY_SUBSCR_STR_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1e                         je      0x160 <_JIT_ENTRY+0x160>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 2d                         je      0x177 <_JIT_ENTRY+0x177>
// 14a: 49 29 de                      subq    %rbx, %r14
// 14d: 49 83 c6 a0                   addq    $-0x60, %r14
// 151: 49 c1 ee 03                   shrq    $0x3, %r14
// 155: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: e9 1d 01 00 00                jmp     0x27d <_JIT_ENTRY+0x27d>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_Dealloc
// 16a: 4c 89 e7                      movq    %r12, %rdi
// 16d: ff d0                         callq   *%rax
// 16f: 85 ed                         testl   %ebp, %ebp
// 171: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 175: 75 d3                         jne     0x14a <_JIT_ENTRY+0x14a>
// 177: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  PyLong_Type
// 185: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 189: 0f 85 c6 00 00 00             jne     0x255 <_JIT_ENTRY+0x255>
// 18f: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  PyUnicode_Type
// 19d: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1a2: 0f 85 ad 00 00 00             jne     0x255 <_JIT_ENTRY+0x255>
// 1a8: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 1ad: 0f 87 a2 00 00 00             ja      0x255 <_JIT_ENTRY+0x255>
// 1b3: 41 8b 45 18                   movl    0x18(%r13), %eax
// 1b7: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 1bc: 0f 8e 93 00 00 00             jle     0x255 <_JIT_ENTRY+0x255>
// 1c2: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// 1c7: 89 ca                         movl    %ecx, %edx
// 1c9: c1 ea 02                      shrl    $0x2, %edx
// 1cc: 83 e2 07                      andl    $0x7, %edx
// 1cf: 83 fa 02                      cmpl    $0x2, %edx
// 1d2: 74 15                         je      0x1e9 <_JIT_ENTRY+0x1e9>
// 1d4: 83 fa 01                      cmpl    $0x1, %edx
// 1d7: 75 20                         jne     0x1f9 <_JIT_ENTRY+0x1f9>
// 1d9: f6 c1 20                      testb   $0x20, %cl
// 1dc: 75 27                         jne     0x205 <_JIT_ENTRY+0x205>
// 1de: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 1e3: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// 1e7: eb 67                         jmp     0x250 <_JIT_ENTRY+0x250>
// 1e9: f6 c1 20                      testb   $0x20, %cl
// 1ec: 75 31                         jne     0x21f <_JIT_ENTRY+0x21f>
// 1ee: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 1f3: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// 1f7: eb 57                         jmp     0x250 <_JIT_ENTRY+0x250>
// 1f9: f6 c1 20                      testb   $0x20, %cl
// 1fc: 75 3b                         jne     0x239 <_JIT_ENTRY+0x239>
// 1fe: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 203: eb 48                         jmp     0x24d <_JIT_ENTRY+0x24d>
// 205: 31 d2                         xorl    %edx, %edx
// 207: f6 c1 40                      testb   $0x40, %cl
// 20a: 0f 94 c2                      sete    %dl
// 20d: 48 c1 e2 04                   shlq    $0x4, %rdx
// 211: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// 215: 48 83 c1 28                   addq    $0x28, %rcx
// 219: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// 21d: eb 31                         jmp     0x250 <_JIT_ENTRY+0x250>
// 21f: 31 d2                         xorl    %edx, %edx
// 221: f6 c1 40                      testb   $0x40, %cl
// 224: 0f 94 c2                      sete    %dl
// 227: 48 c1 e2 04                   shlq    $0x4, %rdx
// 22b: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// 22f: 48 83 c1 28                   addq    $0x28, %rcx
// 233: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// 237: eb 17                         jmp     0x250 <_JIT_ENTRY+0x250>
// 239: 31 d2                         xorl    %edx, %edx
// 23b: f6 c1 40                      testb   $0x40, %cl
// 23e: 0f 94 c2                      sete    %dl
// 241: 48 c1 e2 04                   shlq    $0x4, %rdx
// 245: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// 249: 48 83 c1 28                   addq    $0x28, %rcx
// 24d: 8b 2c 81                      movl    (%rcx,%rax,4), %ebp
// 250: 83 fd 7f                      cmpl    $0x7f, %ebp
// 253: 76 37                         jbe     0x28c <_JIT_ENTRY+0x28c>
// 255: 49 29 de                      subq    %rbx, %r14
// 258: 49 83 c6 b8                   addq    $-0x48, %r14
// 25c: 49 c1 ee 03                   shrq    $0x3, %r14
// 260: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 264: 48 8b 03                      movq    (%rbx), %rax
// 267: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000269:  R_X86_64_64  _JIT_TARGET
// 271: 89 c9                         movl    %ecx, %ecx
// 273: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 277: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 27d: 48 83 c4 08                   addq    $0x8, %rsp
// 281: 5b                            popq    %rbx
// 282: 41 5c                         popq    %r12
// 284: 41 5d                         popq    %r13
// 286: 41 5e                         popq    %r14
// 288: 41 5f                         popq    %r15
// 28a: 5d                            popq    %rbp
// 28b: c3                            retq
// 28c: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 291: 75 28                         jne     0x2bb <_JIT_ENTRY+0x2bb>
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  PyInterpreterState_Get
// 29d: ff d0                         callq   *%rax
// 29f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 2a6: 49 ff 4d 00                   decq    (%r13)
// 2aa: 75 0f                         jne     0x2bb <_JIT_ENTRY+0x2bb>
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  PyObject_Free
// 2b6: 4c 89 ef                      movq    %r13, %rdi
// 2b9: ff d0                         callq   *%rax
// 2bb: 49 8b 04 24                   movq    (%r12), %rax
// 2bf: 48 85 c0                      testq   %rax, %rax
// 2c2: 7f 22                         jg      0x2e6 <_JIT_ENTRY+0x2e6>
// 2c4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c6:  R_X86_64_64  .rodata.str1.1
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _Py_NegativeRefcount
// 2d8: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 2dd: 4c 89 e2                      movq    %r12, %rdx
// 2e0: ff d0                         callq   *%rax
// 2e2: 49 8b 04 24                   movq    (%r12), %rax
// 2e6: 4d 8d 7e f8                   leaq    -0x8(%r14), %r15
// 2ea: 85 c0                         testl   %eax, %eax
// 2ec: 78 21                         js      0x30f <_JIT_ENTRY+0x30f>
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f8: ff d0                         callq   *%rax
// 2fa: 49 ff 0c 24                   decq    (%r12)
// 2fe: 75 0f                         jne     0x30f <_JIT_ENTRY+0x30f>
// 300: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000302:  R_X86_64_64  _Py_Dealloc
// 30a: 4c 89 e7                      movq    %r12, %rdi
// 30d: ff d0                         callq   *%rax
// 30f: 89 e8                         movl    %ebp, %eax
// 311: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 315: 48 c1 e0 04                   shlq    $0x4, %rax
// 319: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000031b:  R_X86_64_64  _PyRuntime
// 323: 48 01 c8                      addq    %rcx, %rax
// 326: 48 05 a0 32 01 00             addq    $0x132a0, %rax          # imm = 0x132A0
// 32c: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 330: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000332:  R_X86_64_64  _JIT_CONTINUE
// 33a: 48 89 df                      movq    %rbx, %rdi
// 33d: 4c 89 fe                      movq    %r15, %rsi
// 340: 48 8b 14 24                   movq    (%rsp), %rdx
// 344: 48 83 c4 08                   addq    $0x8, %rsp
// 348: 5b                            popq    %rbx
// 349: 41 5c                         popq    %r12
// 34b: 41 5d                         popq    %r13
// 34d: 41 5e                         popq    %r14
// 34f: 41 5f                         popq    %r15
// 351: 5d                            popq    %rbp
// 352: ff e0                         jmpq    *%rax
// 354: 
static const unsigned char _STORE_SUBSCRplus_BINARY_SUBSCR_STR_INT_code_body[853] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1e, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x2d, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x1d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xd3, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xc6, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xad, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xa2, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x93, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75, 0x20, 0xf6, 0xc1, 0x20, 0x75, 0x27, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x67, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x2c, 0x81, 0x83, 0xfd, 0x7f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xe8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xc8, 0x48, 0x05, 0xa0, 0x32, 0x01, 0x00, 0x49, 0x89, 0x46, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_BINARY_SUBSCR_STR_INT_code_holes[25] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x302, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x332, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_BINARY_SUBSCR_STR_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BINARY_SUBSCR_STR_INT_data_holes[1];

// _STORE_SUBSCRplus_BINARY_SUBSCR_TUPLE_INT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BINARY_SUBSCR_TUPLE_INT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1e                         je      0x160 <_JIT_ENTRY+0x160>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 2d                         je      0x177 <_JIT_ENTRY+0x177>
// 14a: 49 29 de                      subq    %rbx, %r14
// 14d: 49 83 c6 a0                   addq    $-0x60, %r14
// 151: 49 c1 ee 03                   shrq    $0x3, %r14
// 155: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: e9 50 01 00 00                jmp     0x2b0 <_JIT_ENTRY+0x2b0>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_Dealloc
// 16a: 4c 89 e7                      movq    %r12, %rdi
// 16d: ff d0                         callq   *%rax
// 16f: 85 ed                         testl   %ebp, %ebp
// 171: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 175: 75 d3                         jne     0x14a <_JIT_ENTRY+0x14a>
// 177: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  PyLong_Type
// 185: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 189: 0f 85 f9 00 00 00             jne     0x288 <_JIT_ENTRY+0x288>
// 18f: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  PyTuple_Type
// 19d: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1a2: 0f 85 e0 00 00 00             jne     0x288 <_JIT_ENTRY+0x288>
// 1a8: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 1ad: 0f 87 d5 00 00 00             ja      0x288 <_JIT_ENTRY+0x288>
// 1b3: 41 8b 45 18                   movl    0x18(%r13), %eax
// 1b7: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 1bc: 0f 8e c6 00 00 00             jle     0x288 <_JIT_ENTRY+0x288>
// 1c2: 49 8b 6c c4 18                movq    0x18(%r12,%rax,8), %rbp
// 1c7: 8b 45 00                      movl    (%rbp), %eax
// 1ca: ff c0                         incl    %eax
// 1cc: 74 0f                         je      0x1dd <_JIT_ENTRY+0x1dd>
// 1ce: 89 45 00                      movl    %eax, (%rbp)
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1db: ff d0                         callq   *%rax
// 1dd: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1e2: 75 28                         jne     0x20c <_JIT_ENTRY+0x20c>
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  PyInterpreterState_Get
// 1ee: ff d0                         callq   *%rax
// 1f0: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1f7: 49 ff 4d 00                   decq    (%r13)
// 1fb: 75 0f                         jne     0x20c <_JIT_ENTRY+0x20c>
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  PyObject_Free
// 207: 4c 89 ef                      movq    %r13, %rdi
// 20a: ff d0                         callq   *%rax
// 20c: 49 8b 04 24                   movq    (%r12), %rax
// 210: 48 85 c0                      testq   %rax, %rax
// 213: 7f 22                         jg      0x237 <_JIT_ENTRY+0x237>
// 215: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000217:  R_X86_64_64  .rodata.str1.1
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_NegativeRefcount
// 229: be fa 01 00 00                movl    $0x1fa, %esi            # imm = 0x1FA
// 22e: 4c 89 e2                      movq    %r12, %rdx
// 231: ff d0                         callq   *%rax
// 233: 49 8b 04 24                   movq    (%r12), %rax
// 237: 4d 8d 7e f8                   leaq    -0x8(%r14), %r15
// 23b: 85 c0                         testl   %eax, %eax
// 23d: 78 21                         js      0x260 <_JIT_ENTRY+0x260>
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 249: ff d0                         callq   *%rax
// 24b: 49 ff 0c 24                   decq    (%r12)
// 24f: 75 0f                         jne     0x260 <_JIT_ENTRY+0x260>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _Py_Dealloc
// 25b: 4c 89 e7                      movq    %r12, %rdi
// 25e: ff d0                         callq   *%rax
// 260: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _JIT_CONTINUE
// 26e: 48 89 df                      movq    %rbx, %rdi
// 271: 4c 89 fe                      movq    %r15, %rsi
// 274: 48 8b 14 24                   movq    (%rsp), %rdx
// 278: 48 83 c4 08                   addq    $0x8, %rsp
// 27c: 5b                            popq    %rbx
// 27d: 41 5c                         popq    %r12
// 27f: 41 5d                         popq    %r13
// 281: 41 5e                         popq    %r14
// 283: 41 5f                         popq    %r15
// 285: 5d                            popq    %rbp
// 286: ff e0                         jmpq    *%rax
// 288: 49 29 de                      subq    %rbx, %r14
// 28b: 49 83 c6 b8                   addq    $-0x48, %r14
// 28f: 49 c1 ee 03                   shrq    $0x3, %r14
// 293: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 297: 48 8b 03                      movq    (%rbx), %rax
// 29a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000029c:  R_X86_64_64  _JIT_TARGET
// 2a4: 89 c9                         movl    %ecx, %ecx
// 2a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2b0: 48 83 c4 08                   addq    $0x8, %rsp
// 2b4: 5b                            popq    %rbx
// 2b5: 41 5c                         popq    %r12
// 2b7: 41 5d                         popq    %r13
// 2b9: 41 5e                         popq    %r14
// 2bb: 41 5f                         popq    %r15
// 2bd: 5d                            popq    %rbp
// 2be: c3                            retq
// 2bf: 
static const unsigned char _STORE_SUBSCRplus_BINARY_SUBSCR_TUPLE_INT_code_body[704] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1e, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x2d, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x50, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xd3, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xf9, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0xe0, 0x00, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xd5, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xc6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x6c, 0xc4, 0x18, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x0f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfa, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _STORE_SUBSCRplus_BINARY_SUBSCR_TUPLE_INT_code_holes[25] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_BINARY_SUBSCR_TUPLE_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BINARY_SUBSCR_TUPLE_INT_data_holes[1];

// _STORE_SUBSCRplus_BUILD_CONST_KEY_MAP
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BUILD_CONST_KEY_MAP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 1d: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 21: 4c 8b 66 f0                   movq    -0x10(%rsi), %r12
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 e7                      movq    %r12, %rdi
// 32: 4c 89 ee                      movq    %r13, %rsi
// 35: 4c 89 f2                      movq    %r14, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 06                      movq    (%r14), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 f2                      movq    %r14, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 06                      movq    (%r14), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0e                      decq    (%r14)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 04 24                   movq    (%r12), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 f7                      movq    %r14, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 04 24                   movq    (%r12), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 e2                      movq    %r12, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 04 24                   movq    (%r12), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 0c 24                   decq    (%r12)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 45 00                   movq    (%r13), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 e7                      movq    %r12, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 45 00                   movq    (%r13), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 ea                      movq    %r13, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 45 00                   movq    (%r13), %rax
// 12c: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 4d 00                   decq    (%r13)
// 144: 74 14                         je      0x15a <_JIT_ENTRY+0x15a>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 fc                   cmoveq  %r12, %r15
// 14c: 74 23                         je      0x171 <_JIT_ENTRY+0x171>
// 14e: 49 83 c7 e8                   addq    $-0x18, %r15
// 152: 4d 89 fc                      movq    %r15, %r12
// 155: e9 55 01 00 00                jmp     0x2af <_JIT_ENTRY+0x2af>
// 15a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015c:  R_X86_64_64  _Py_Dealloc
// 164: 4c 89 ef                      movq    %r13, %rdi
// 167: ff d0                         callq   *%rax
// 169: 85 ed                         testl   %ebp, %ebp
// 16b: 4d 0f 44 fc                   cmoveq  %r12, %r15
// 16f: 75 dd                         jne     0x14e <_JIT_ENTRY+0x14e>
// 171: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  PyTuple_Type
// 17f: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 183: 0f 85 fe 00 00 00             jne     0x287 <_JIT_ENTRY+0x287>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _JIT_OPARG
// 193: 0f b7 c0                      movzwl  %ax, %eax
// 196: 49 39 45 10                   cmpq    %rax, 0x10(%r13)
// 19a: 0f 85 e7 00 00 00             jne     0x287 <_JIT_ENTRY+0x287>
// 1a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a2:  R_X86_64_64  _JIT_OPARG
// 1aa: f7 d0                         notl    %eax
// 1ac: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1b1: 48 98                         cltq
// 1b3: 4d 8d 24 c7                   leaq    (%r15,%rax,8), %r12
// 1b7: 49 8d 7d 18                   leaq    0x18(%r13), %rdi
// 1bb: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000001bd:  R_X86_64_64  _JIT_OPARG
// 1c5: 45 0f b7 c6                   movzwl  %r14w, %r8d
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _PyDict_FromItems
// 1d3: be 01 00 00 00                movl    $0x1, %esi
// 1d8: b9 01 00 00 00                movl    $0x1, %ecx
// 1dd: 4c 89 e2                      movq    %r12, %rdx
// 1e0: ff d0                         callq   *%rax
// 1e2: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 1e7: 41 f7 c6 ff ff 00 00          testl   $0xffff, %r14d          # imm = 0xFFFF
// 1ee: 0f 8e db 00 00 00             jle     0x2cf <_JIT_ENTRY+0x2cf>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _JIT_OPARG
// 1fe: 0f b7 e8                      movzwl  %ax, %ebp
// 201: 48 ff c5                      incq    %rbp
// 204: eb 17                         jmp     0x21d <_JIT_ENTRY+0x21d>
// 206: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 210: 48 ff cd                      decq    %rbp
// 213: 48 83 fd 01                   cmpq    $0x1, %rbp
// 217: 0f 8e b2 00 00 00             jle     0x2cf <_JIT_ENTRY+0x2cf>
// 21d: 8d 45 fe                      leal    -0x2(%rbp), %eax
// 220: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// 224: 49 8b 06                      movq    (%r14), %rax
// 227: 48 85 c0                      testq   %rax, %rax
// 22a: 7e 14                         jle     0x240 <_JIT_ENTRY+0x240>
// 22c: 85 c0                         testl   %eax, %eax
// 22e: 78 e0                         js      0x210 <_JIT_ENTRY+0x210>
// 230: eb 33                         jmp     0x265 <_JIT_ENTRY+0x265>
// 232: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 240: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000242:  R_X86_64_64  .rodata.str1.1
// 24a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 24f: 4c 89 f2                      movq    %r14, %rdx
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_NegativeRefcount
// 25c: ff d0                         callq   *%rax
// 25e: 49 8b 06                      movq    (%r14), %rax
// 261: 85 c0                         testl   %eax, %eax
// 263: 78 ab                         js      0x210 <_JIT_ENTRY+0x210>
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26f: ff d0                         callq   *%rax
// 271: 49 ff 0e                      decq    (%r14)
// 274: 75 9a                         jne     0x210 <_JIT_ENTRY+0x210>
// 276: 4c 89 f7                      movq    %r14, %rdi
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_Dealloc
// 283: ff d0                         callq   *%rax
// 285: eb 89                         jmp     0x210 <_JIT_ENTRY+0x210>
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  PyExc_SystemError
// 291: 48 8b 30                      movq    (%rax), %rsi
// 294: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000296:  R_X86_64_64  .rodata.str1.1+0x39
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _PyErr_SetString
// 2a8: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2ad: ff d0                         callq   *%rax
// 2af: 49 29 dc                      subq    %rbx, %r12
// 2b2: 49 83 c4 b8                   addq    $-0x48, %r12
// 2b6: 49 c1 ec 03                   shrq    $0x3, %r12
// 2ba: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 2be: 31 c0                         xorl    %eax, %eax
// 2c0: 48 83 c4 18                   addq    $0x18, %rsp
// 2c4: 5b                            popq    %rbx
// 2c5: 41 5c                         popq    %r12
// 2c7: 41 5d                         popq    %r13
// 2c9: 41 5e                         popq    %r14
// 2cb: 41 5f                         popq    %r15
// 2cd: 5d                            popq    %rbp
// 2ce: c3                            retq
// 2cf: 49 8b 45 00                   movq    (%r13), %rax
// 2d3: 48 85 c0                      testq   %rax, %rax
// 2d6: 7f 22                         jg      0x2fa <_JIT_ENTRY+0x2fa>
// 2d8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002da:  R_X86_64_64  .rodata.str1.1
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  _Py_NegativeRefcount
// 2ec: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 2f1: 4c 89 ea                      movq    %r13, %rdx
// 2f4: ff d0                         callq   *%rax
// 2f6: 49 8b 45 00                   movq    (%r13), %rax
// 2fa: 85 c0                         testl   %eax, %eax
// 2fc: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 301: 78 21                         js      0x324 <_JIT_ENTRY+0x324>
// 303: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000305:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 30d: ff d0                         callq   *%rax
// 30f: 49 ff 4d 00                   decq    (%r13)
// 313: 75 0f                         jne     0x324 <_JIT_ENTRY+0x324>
// 315: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000317:  R_X86_64_64  _Py_Dealloc
// 31f: 4c 89 ef                      movq    %r13, %rdi
// 322: ff d0                         callq   *%rax
// 324: 4d 85 f6                      testq   %r14, %r14
// 327: 74 86                         je      0x2af <_JIT_ENTRY+0x2af>
// 329: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032b:  R_X86_64_64  _JIT_OPARG
// 333: 0f b7 c8                      movzwl  %ax, %ecx
// 336: f7 d0                         notl    %eax
// 338: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 33d: 48 98                         cltq
// 33f: 4d 89 34 c7                   movq    %r14, (%r15,%rax,8)
// 343: 48 c1 e1 03                   shlq    $0x3, %rcx
// 347: 49 29 cf                      subq    %rcx, %r15
// 34a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000034c:  R_X86_64_64  _JIT_CONTINUE
// 354: 48 89 df                      movq    %rbx, %rdi
// 357: 4c 89 fe                      movq    %r15, %rsi
// 35a: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 35f: 48 83 c4 18                   addq    $0x18, %rsp
// 363: 5b                            popq    %rbx
// 364: 41 5c                         popq    %r12
// 366: 41 5d                         popq    %r13
// 368: 41 5e                         popq    %r14
// 36a: 41 5f                         popq    %r15
// 36c: 5d                            popq    %rbp
// 36d: ff e0                         jmpq    *%rax
// 36f: 
static const unsigned char _STORE_SUBSCRplus_BUILD_CONST_KEY_MAP_code_body[880] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x13, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x67, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4d, 0x8d, 0x67, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x14, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfc, 0x74, 0x23, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x89, 0xfc, 0xe9, 0x55, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfc, 0x75, 0xdd, 0x4d, 0x8b, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x45, 0x10, 0x0f, 0x85, 0xe7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x24, 0xc7, 0x49, 0x8d, 0x7d, 0x18, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xdb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x17, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x0f, 0x8e, 0xb2, 0x00, 0x00, 0x00, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x78, 0xe0, 0xeb, 0x33, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xab, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x9a, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x89, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xf6, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x34, 0xc7, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_BUILD_CONST_KEY_MAP_code_holes[33] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x2da, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x305, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x317, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x32b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x34c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _STORE_SUBSCRplus_BUILD_CONST_KEY_MAP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BUILD_CONST_KEY_MAP_data_holes[1];

// _STORE_SUBSCRplus_BUILD_LIST
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BUILD_LIST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f7                      movq    %rsi, %r15
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 f2                      movq    %r14, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 06                      movq    (%r14), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 f2                      movq    %r14, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0e                      decq    (%r14)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 f7                      movq    %r14, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c7 e8                   addq    $-0x18, %r15
// 14e: 4d 89 fe                      movq    %r15, %r14
// 151: 49 29 de                      subq    %rbx, %r14
// 154: 49 83 c6 b8                   addq    $-0x48, %r14
// 158: 49 c1 ee 03                   shrq    $0x3, %r14
// 15c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  _JIT_OPARG
// 192: 0f b7 f0                      movzwl  %ax, %esi
// 195: 48 8d 04 f5 00 00 00 00       leaq    (,%rsi,8), %rax
// 19d: 4d 89 fe                      movq    %r15, %r14
// 1a0: 49 29 c6                      subq    %rax, %r14
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _PyList_FromArraySteal
// 1ad: 4c 89 f7                      movq    %r14, %rdi
// 1b0: ff d0                         callq   *%rax
// 1b2: 48 85 c0                      testq   %rax, %rax
// 1b5: 74 9a                         je      0x151 <_JIT_ENTRY+0x151>
// 1b7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b9:  R_X86_64_64  _JIT_OPARG
// 1c1: 0f b7 d1                      movzwl  %cx, %edx
// 1c4: 0f b7 c9                      movzwl  %cx, %ecx
// 1c7: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1cb: 48 f7 d9                      negq    %rcx
// 1ce: 49 89 04 0f                   movq    %rax, (%r15,%rcx)
// 1d2: b8 01 00 00 00                movl    $0x1, %eax
// 1d7: 29 d0                         subl    %edx, %eax
// 1d9: 48 98                         cltq
// 1db: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _JIT_CONTINUE
// 1e9: 48 89 df                      movq    %rbx, %rdi
// 1ec: 48 8b 14 24                   movq    (%rsp), %rdx
// 1f0: 48 83 c4 08                   addq    $0x8, %rsp
// 1f4: 5b                            popq    %rbx
// 1f5: 41 5c                         popq    %r12
// 1f7: 41 5d                         popq    %r13
// 1f9: 41 5e                         popq    %r14
// 1fb: 41 5f                         popq    %r15
// 1fd: 5d                            popq    %rbp
// 1fe: ff e0                         jmpq    *%rax
// 200: 
static const unsigned char _STORE_SUBSCRplus_BUILD_LIST_code_body[513] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0x8d, 0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x9a, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x49, 0x89, 0x04, 0x0f, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x98, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_BUILD_LIST_code_holes[18] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_FromArraySteal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_BUILD_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BUILD_LIST_data_holes[1];

// _STORE_SUBSCRplus_BUILD_MAP
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BUILD_MAP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 3c 24                   movq    %rdi, (%rsp)
// 1a: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1e: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 22: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 26: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000028:  R_X86_64_64  PyObject_SetItem
// 30: 4c 89 ef                      movq    %r13, %rdi
// 33: 4c 89 e6                      movq    %r12, %rsi
// 36: 4c 89 f2                      movq    %r14, %rdx
// 39: ff d0                         callq   *%rax
// 3b: 89 c5                         movl    %eax, %ebp
// 3d: 49 8b 06                      movq    (%r14), %rax
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 7e 06                         jle     0x4b <_JIT_ENTRY+0x4b>
// 45: 85 c0                         testl   %eax, %eax
// 47: 79 27                         jns     0x70 <_JIT_ENTRY+0x70>
// 49: eb 36                         jmp     0x81 <_JIT_ENTRY+0x81>
// 4b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004d:  R_X86_64_64  .rodata.str1.1
// 55: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000057:  R_X86_64_64  _Py_NegativeRefcount
// 5f: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 64: 4c 89 f2                      movq    %r14, %rdx
// 67: ff d0                         callq   *%rax
// 69: 49 8b 06                      movq    (%r14), %rax
// 6c: 85 c0                         testl   %eax, %eax
// 6e: 78 11                         js      0x81 <_JIT_ENTRY+0x81>
// 70: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000072:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 7a: ff d0                         callq   *%rax
// 7c: 49 ff 0e                      decq    (%r14)
// 7f: 74 0f                         je      0x90 <_JIT_ENTRY+0x90>
// 81: 49 8b 45 00                   movq    (%r13), %rax
// 85: 48 85 c0                      testq   %rax, %rax
// 88: 7e 1e                         jle     0xa8 <_JIT_ENTRY+0xa8>
// 8a: 85 c0                         testl   %eax, %eax
// 8c: 79 40                         jns     0xce <_JIT_ENTRY+0xce>
// 8e: eb 50                         jmp     0xe0 <_JIT_ENTRY+0xe0>
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_Dealloc
// 9a: 4c 89 f7                      movq    %r14, %rdi
// 9d: ff d0                         callq   *%rax
// 9f: 49 8b 45 00                   movq    (%r13), %rax
// a3: 48 85 c0                      testq   %rax, %rax
// a6: 7f e2                         jg      0x8a <_JIT_ENTRY+0x8a>
// a8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000aa:  R_X86_64_64  .rodata.str1.1
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_NegativeRefcount
// bc: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c1: 4c 89 ea                      movq    %r13, %rdx
// c4: ff d0                         callq   *%rax
// c6: 49 8b 45 00                   movq    (%r13), %rax
// ca: 85 c0                         testl   %eax, %eax
// cc: 78 12                         js      0xe0 <_JIT_ENTRY+0xe0>
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d8: ff d0                         callq   *%rax
// da: 49 ff 4d 00                   decq    (%r13)
// de: 74 13                         je      0xf3 <_JIT_ENTRY+0xf3>
// e0: 49 8b 04 24                   movq    (%r12), %rax
// e4: 48 85 c0                      testq   %rax, %rax
// e7: 7e 22                         jle     0x10b <_JIT_ENTRY+0x10b>
// e9: 49 8d 5f e8                   leaq    -0x18(%r15), %rbx
// ed: 85 c0                         testl   %eax, %eax
// ef: 79 44                         jns     0x135 <_JIT_ENTRY+0x135>
// f1: eb 54                         jmp     0x147 <_JIT_ENTRY+0x147>
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: 4c 89 ef                      movq    %r13, %rdi
// 100: ff d0                         callq   *%rax
// 102: 49 8b 04 24                   movq    (%r12), %rax
// 106: 48 85 c0                      testq   %rax, %rax
// 109: 7f de                         jg      0xe9 <_JIT_ENTRY+0xe9>
// 10b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010d:  R_X86_64_64  .rodata.str1.1
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_NegativeRefcount
// 11f: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 124: 4c 89 e2                      movq    %r12, %rdx
// 127: ff d0                         callq   *%rax
// 129: 49 8b 04 24                   movq    (%r12), %rax
// 12d: 49 8d 5f e8                   leaq    -0x18(%r15), %rbx
// 131: 85 c0                         testl   %eax, %eax
// 133: 78 12                         js      0x147 <_JIT_ENTRY+0x147>
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13f: ff d0                         callq   *%rax
// 141: 49 ff 0c 24                   decq    (%r12)
// 145: 74 33                         je      0x17a <_JIT_ENTRY+0x17a>
// 147: 85 ed                         testl   %ebp, %ebp
// 149: 4c 0f 44 fb                   cmoveq  %rbx, %r15
// 14d: 74 42                         je      0x191 <_JIT_ENTRY+0x191>
// 14f: 49 83 c7 e8                   addq    $-0x18, %r15
// 153: 4d 89 fc                      movq    %r15, %r12
// 156: 48 8b 04 24                   movq    (%rsp), %rax
// 15a: 49 29 c4                      subq    %rax, %r12
// 15d: 49 83 c4 b8                   addq    $-0x48, %r12
// 161: 49 c1 ec 03                   shrq    $0x3, %r12
// 165: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 169: 31 c0                         xorl    %eax, %eax
// 16b: 48 83 c4 18                   addq    $0x18, %rsp
// 16f: 5b                            popq    %rbx
// 170: 41 5c                         popq    %r12
// 172: 41 5d                         popq    %r13
// 174: 41 5e                         popq    %r14
// 176: 41 5f                         popq    %r15
// 178: 5d                            popq    %rbp
// 179: c3                            retq
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_Dealloc
// 184: 4c 89 e7                      movq    %r12, %rdi
// 187: ff d0                         callq   *%rax
// 189: 85 ed                         testl   %ebp, %ebp
// 18b: 4c 0f 44 fb                   cmoveq  %rbx, %r15
// 18f: 75 be                         jne     0x14f <_JIT_ENTRY+0x14f>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 d8                      movzwl  %ax, %ebx
// 19e: 89 d9                         movl    %ebx, %ecx
// 1a0: f7 d9                         negl    %ecx
// 1a2: 01 c9                         addl    %ecx, %ecx
// 1a4: 48 63 c9                      movslq  %ecx, %rcx
// 1a7: 4d 8d 24 cf                   leaq    (%r15,%rcx,8), %r12
// 1ab: 49 8d 14 cf                   leaq    (%r15,%rcx,8), %rdx
// 1af: 48 83 c2 08                   addq    $0x8, %rdx
// 1b3: 44 0f b7 c0                   movzwl  %ax, %r8d
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _PyDict_FromItems
// 1c1: be 02 00 00 00                movl    $0x2, %esi
// 1c6: b9 02 00 00 00                movl    $0x2, %ecx
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1d5: 01 db                         addl    %ebx, %ebx
// 1d7: 85 db                         testl   %ebx, %ebx
// 1d9: 0f 8e 84 00 00 00             jle     0x263 <_JIT_ENTRY+0x263>
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _JIT_OPARG
// 1e9: 0f b7 c0                      movzwl  %ax, %eax
// 1ec: 4c 8d 2c 00                   leaq    (%rax,%rax), %r13
// 1f0: 49 ff c5                      incq    %r13
// 1f3: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001f5:  R_X86_64_64  _Py_NegativeRefcount
// 1fd: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001ff:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 207: eb 10                         jmp     0x219 <_JIT_ENTRY+0x219>
// 209: 0f 1f 80 00 00 00 00          nopl    (%rax)
// 210: 49 ff cd                      decq    %r13
// 213: 49 83 fd 01                   cmpq    $0x1, %r13
// 217: 7e 4a                         jle     0x263 <_JIT_ENTRY+0x263>
// 219: 41 8d 45 fe                   leal    -0x2(%r13), %eax
// 21d: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// 221: 49 8b 06                      movq    (%r14), %rax
// 224: 48 85 c0                      testq   %rax, %rax
// 227: 7e 07                         jle     0x230 <_JIT_ENTRY+0x230>
// 229: 85 c0                         testl   %eax, %eax
// 22b: 78 e3                         js      0x210 <_JIT_ENTRY+0x210>
// 22d: eb 1c                         jmp     0x24b <_JIT_ENTRY+0x24b>
// 22f: 90                            nop
// 230: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000232:  R_X86_64_64  .rodata.str1.1
// 23a: be 7b 05 00 00                movl    $0x57b, %esi            # imm = 0x57B
// 23f: 4c 89 f2                      movq    %r14, %rdx
// 242: ff d3                         callq   *%rbx
// 244: 49 8b 06                      movq    (%r14), %rax
// 247: 85 c0                         testl   %eax, %eax
// 249: 78 c5                         js      0x210 <_JIT_ENTRY+0x210>
// 24b: ff d5                         callq   *%rbp
// 24d: 49 ff 0e                      decq    (%r14)
// 250: 75 be                         jne     0x210 <_JIT_ENTRY+0x210>
// 252: 4c 89 f7                      movq    %r14, %rdi
// 255: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000257:  R_X86_64_64  _Py_Dealloc
// 25f: ff d0                         callq   *%rax
// 261: eb ad                         jmp     0x210 <_JIT_ENTRY+0x210>
// 263: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 268: 48 85 d2                      testq   %rdx, %rdx
// 26b: 0f 84 e5 fe ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  _JIT_OPARG
// 27b: 0f b7 c0                      movzwl  %ax, %eax
// 27e: 89 c1                         movl    %eax, %ecx
// 280: f7 d9                         negl    %ecx
// 282: 01 c9                         addl    %ecx, %ecx
// 284: 48 63 c9                      movslq  %ecx, %rcx
// 287: 49 89 14 cf                   movq    %rdx, (%r15,%rcx,8)
// 28b: 01 c0                         addl    %eax, %eax
// 28d: b9 01 00 00 00                movl    $0x1, %ecx
// 292: 29 c1                         subl    %eax, %ecx
// 294: 48 63 c1                      movslq  %ecx, %rax
// 297: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _JIT_CONTINUE
// 2a5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 2a9: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2ae: 48 83 c4 18                   addq    $0x18, %rsp
// 2b2: 5b                            popq    %rbx
// 2b3: 41 5c                         popq    %r12
// 2b5: 41 5d                         popq    %r13
// 2b7: 41 5e                         popq    %r14
// 2b9: 41 5f                         popq    %r15
// 2bb: 5d                            popq    %rbp
// 2bc: ff e0                         jmpq    *%rax
// 2be: 
static const unsigned char _STORE_SUBSCRplus_BUILD_MAP_code_body[703] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x3c, 0x24, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x49, 0x8d, 0x5f, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x5f, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x33, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xfb, 0x74, 0x42, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x89, 0xfc, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xfb, 0x75, 0xbe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x89, 0xd9, 0xf7, 0xd9, 0x01, 0xc9, 0x48, 0x63, 0xc9, 0x4d, 0x8d, 0x24, 0xcf, 0x49, 0x8d, 0x14, 0xcf, 0x48, 0x83, 0xc2, 0x08, 0x44, 0x0f, 0xb7, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x01, 0xdb, 0x85, 0xdb, 0x0f, 0x8e, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8d, 0x2c, 0x00, 0x49, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcd, 0x49, 0x83, 0xfd, 0x01, 0x7e, 0x4a, 0x41, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x1c, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7b, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd3, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xc5, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xbe, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xad, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xe5, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd9, 0x01, 0xc9, 0x48, 0x63, 0xc9, 0x49, 0x89, 0x14, 0xcf, 0x01, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_BUILD_MAP_code_holes[23] = {
    {0x28, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x57, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x72, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x257, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_BUILD_MAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BUILD_MAP_data_holes[1];

// _STORE_SUBSCRplus_BUILD_SET
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BUILD_SET.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 48 89 f3                      movq    %rsi, %rbx
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 23: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  PyObject_SetItem
// 31: 4c 89 ef                      movq    %r13, %rdi
// 34: 4c 89 e6                      movq    %r12, %rsi
// 37: 4c 89 f2                      movq    %r14, %rdx
// 3a: ff d0                         callq   *%rax
// 3c: 89 c5                         movl    %eax, %ebp
// 3e: 49 8b 06                      movq    (%r14), %rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 7e 06                         jle     0x4c <_JIT_ENTRY+0x4c>
// 46: 85 c0                         testl   %eax, %eax
// 48: 79 27                         jns     0x71 <_JIT_ENTRY+0x71>
// 4a: eb 36                         jmp     0x82 <_JIT_ENTRY+0x82>
// 4c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004e:  R_X86_64_64  .rodata.str1.1
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _Py_NegativeRefcount
// 60: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 65: 4c 89 f2                      movq    %r14, %rdx
// 68: ff d0                         callq   *%rax
// 6a: 49 8b 06                      movq    (%r14), %rax
// 6d: 85 c0                         testl   %eax, %eax
// 6f: 78 11                         js      0x82 <_JIT_ENTRY+0x82>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 7b: ff d0                         callq   *%rax
// 7d: 49 ff 0e                      decq    (%r14)
// 80: 74 0f                         je      0x91 <_JIT_ENTRY+0x91>
// 82: 49 8b 45 00                   movq    (%r13), %rax
// 86: 48 85 c0                      testq   %rax, %rax
// 89: 7e 1e                         jle     0xa9 <_JIT_ENTRY+0xa9>
// 8b: 85 c0                         testl   %eax, %eax
// 8d: 79 40                         jns     0xcf <_JIT_ENTRY+0xcf>
// 8f: eb 50                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_Dealloc
// 9b: 4c 89 f7                      movq    %r14, %rdi
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 45 00                   movq    (%r13), %rax
// a4: 48 85 c0                      testq   %rax, %rax
// a7: 7f e2                         jg      0x8b <_JIT_ENTRY+0x8b>
// a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ab:  R_X86_64_64  .rodata.str1.1
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_NegativeRefcount
// bd: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c2: 4c 89 ea                      movq    %r13, %rdx
// c5: ff d0                         callq   *%rax
// c7: 49 8b 45 00                   movq    (%r13), %rax
// cb: 85 c0                         testl   %eax, %eax
// cd: 78 12                         js      0xe1 <_JIT_ENTRY+0xe1>
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d9: ff d0                         callq   *%rax
// db: 49 ff 4d 00                   decq    (%r13)
// df: 74 13                         je      0xf4 <_JIT_ENTRY+0xf4>
// e1: 49 8b 04 24                   movq    (%r12), %rax
// e5: 48 85 c0                      testq   %rax, %rax
// e8: 7e 22                         jle     0x10c <_JIT_ENTRY+0x10c>
// ea: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// ee: 85 c0                         testl   %eax, %eax
// f0: 79 44                         jns     0x136 <_JIT_ENTRY+0x136>
// f2: eb 54                         jmp     0x148 <_JIT_ENTRY+0x148>
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_Dealloc
// fe: 4c 89 ef                      movq    %r13, %rdi
// 101: ff d0                         callq   *%rax
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f de                         jg      0xea <_JIT_ENTRY+0xea>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 132: 85 c0                         testl   %eax, %eax
// 134: 78 12                         js      0x148 <_JIT_ENTRY+0x148>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 140: ff d0                         callq   *%rax
// 142: 49 ff 0c 24                   decq    (%r12)
// 146: 74 34                         je      0x17c <_JIT_ENTRY+0x17c>
// 148: 85 ed                         testl   %ebp, %ebp
// 14a: 49 0f 44 df                   cmoveq  %r15, %rbx
// 14e: 74 43                         je      0x193 <_JIT_ENTRY+0x193>
// 150: 48 83 c3 e8                   addq    $-0x18, %rbx
// 154: 49 89 df                      movq    %rbx, %r15
// 157: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15c: 49 29 c7                      subq    %rax, %r15
// 15f: 49 83 c7 b8                   addq    $-0x48, %r15
// 163: 49 c1 ef 03                   shrq    $0x3, %r15
// 167: 44 89 78 40                   movl    %r15d, 0x40(%rax)
// 16b: 31 c0                         xorl    %eax, %eax
// 16d: 48 83 c4 18                   addq    $0x18, %rsp
// 171: 5b                            popq    %rbx
// 172: 41 5c                         popq    %r12
// 174: 41 5d                         popq    %r13
// 176: 41 5e                         popq    %r14
// 178: 41 5f                         popq    %r15
// 17a: 5d                            popq    %rbp
// 17b: c3                            retq
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  _Py_Dealloc
// 186: 4c 89 e7                      movq    %r12, %rdi
// 189: ff d0                         callq   *%rax
// 18b: 85 ed                         testl   %ebp, %ebp
// 18d: 49 0f 44 df                   cmoveq  %r15, %rbx
// 191: 75 bd                         jne     0x150 <_JIT_ENTRY+0x150>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  PySet_New
// 19d: 31 ff                         xorl    %edi, %edi
// 19f: ff d0                         callq   *%rax
// 1a1: 48 85 c0                      testq   %rax, %rax
// 1a4: 74 b1                         je      0x157 <_JIT_ENTRY+0x157>
// 1a6: 49 89 c6                      movq    %rax, %r14
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _JIT_OPARG
// 1b3: 66 85 c0                      testw   %ax, %ax
// 1b6: 0f 84 1d 01 00 00             je      0x2d9 <_JIT_ENTRY+0x2d9>
// 1bc: 4c 89 34 24                   movq    %r14, (%rsp)
// 1c0: 0f b7 c0                      movzwl  %ax, %eax
// 1c3: 48 c1 e0 03                   shlq    $0x3, %rax
// 1c7: 49 89 df                      movq    %rbx, %r15
// 1ca: 49 29 c7                      subq    %rax, %r15
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _JIT_OPARG
// 1d7: 0f b7 c0                      movzwl  %ax, %eax
// 1da: 83 f8 02                      cmpl    $0x2, %eax
// 1dd: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 1e3: 44 0f 43 e8                   cmovael %eax, %r13d
// 1e7: 45 31 e4                      xorl    %r12d, %r12d
// 1ea: 31 ed                         xorl    %ebp, %ebp
// 1ec: eb 0a                         jmp     0x1f8 <_JIT_ENTRY+0x1f8>
// 1ee: 66 90                         nop
// 1f0: 49 ff c4                      incq    %r12
// 1f3: 4d 39 e5                      cmpq    %r12, %r13
// 1f6: 74 7f                         je      0x277 <_JIT_ENTRY+0x277>
// 1f8: 4f 8b 34 e7                   movq    (%r15,%r12,8), %r14
// 1fc: 85 ed                         testl   %ebp, %ebp
// 1fe: 74 10                         je      0x210 <_JIT_ENTRY+0x210>
// 200: 49 8b 06                      movq    (%r14), %rax
// 203: 48 85 c0                      testq   %rax, %rax
// 206: 7e 25                         jle     0x22d <_JIT_ENTRY+0x22d>
// 208: 85 c0                         testl   %eax, %eax
// 20a: 78 e4                         js      0x1f0 <_JIT_ENTRY+0x1f0>
// 20c: eb 44                         jmp     0x252 <_JIT_ENTRY+0x252>
// 20e: 66 90                         nop
// 210: 48 8b 3c 24                   movq    (%rsp), %rdi
// 214: 4c 89 f6                      movq    %r14, %rsi
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  PySet_Add
// 221: ff d0                         callq   *%rax
// 223: 89 c5                         movl    %eax, %ebp
// 225: 49 8b 06                      movq    (%r14), %rax
// 228: 48 85 c0                      testq   %rax, %rax
// 22b: 7f db                         jg      0x208 <_JIT_ENTRY+0x208>
// 22d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022f:  R_X86_64_64  .rodata.str1.1
// 237: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// 23c: 4c 89 f2                      movq    %r14, %rdx
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _Py_NegativeRefcount
// 249: ff d0                         callq   *%rax
// 24b: 49 8b 06                      movq    (%r14), %rax
// 24e: 85 c0                         testl   %eax, %eax
// 250: 78 9e                         js      0x1f0 <_JIT_ENTRY+0x1f0>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 25c: ff d0                         callq   *%rax
// 25e: 49 ff 0e                      decq    (%r14)
// 261: 75 8d                         jne     0x1f0 <_JIT_ENTRY+0x1f0>
// 263: 4c 89 f7                      movq    %r14, %rdi
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _Py_Dealloc
// 270: ff d0                         callq   *%rax
// 272: e9 79 ff ff ff                jmp     0x1f0 <_JIT_ENTRY+0x1f0>
// 277: 85 ed                         testl   %ebp, %ebp
// 279: 4c 8b 34 24                   movq    (%rsp), %r14
// 27d: 74 5a                         je      0x2d9 <_JIT_ENTRY+0x2d9>
// 27f: 49 8b 06                      movq    (%r14), %rax
// 282: 48 85 c0                      testq   %rax, %rax
// 285: 7f 21                         jg      0x2a8 <_JIT_ENTRY+0x2a8>
// 287: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000289:  R_X86_64_64  .rodata.str1.1
// 291: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 296: 4c 89 f2                      movq    %r14, %rdx
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _Py_NegativeRefcount
// 2a3: ff d0                         callq   *%rax
// 2a5: 49 8b 06                      movq    (%r14), %rax
// 2a8: 85 c0                         testl   %eax, %eax
// 2aa: 0f 88 a7 fe ff ff             js      0x157 <_JIT_ENTRY+0x157>
// 2b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ba: ff d0                         callq   *%rax
// 2bc: 49 ff 0e                      decq    (%r14)
// 2bf: 0f 85 92 fe ff ff             jne     0x157 <_JIT_ENTRY+0x157>
// 2c5: 4c 89 f7                      movq    %r14, %rdi
// 2c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ca:  R_X86_64_64  _Py_Dealloc
// 2d2: ff d0                         callq   *%rax
// 2d4: e9 7e fe ff ff                jmp     0x157 <_JIT_ENTRY+0x157>
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _JIT_OPARG
// 2e3: 0f b7 c8                      movzwl  %ax, %ecx
// 2e6: 0f b7 c0                      movzwl  %ax, %eax
// 2e9: 48 c1 e0 03                   shlq    $0x3, %rax
// 2ed: 48 f7 d8                      negq    %rax
// 2f0: 4c 89 34 03                   movq    %r14, (%rbx,%rax)
// 2f4: b8 01 00 00 00                movl    $0x1, %eax
// 2f9: 29 c8                         subl    %ecx, %eax
// 2fb: 48 98                         cltq
// 2fd: 48 8d 34 c3                   leaq    (%rbx,%rax,8), %rsi
// 301: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000303:  R_X86_64_64  _JIT_CONTINUE
// 30b: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 310: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 315: 48 83 c4 18                   addq    $0x18, %rsp
// 319: 5b                            popq    %rbx
// 31a: 41 5c                         popq    %r12
// 31c: 41 5d                         popq    %r13
// 31e: 41 5e                         popq    %r14
// 320: 41 5f                         popq    %r15
// 322: 5d                            popq    %rbp
// 323: ff e0                         jmpq    *%rax
// 325: 
static const unsigned char _STORE_SUBSCRplus_BUILD_SET_code_body[806] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0xf3, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x34, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x43, 0x48, 0x83, 0xc3, 0xe8, 0x49, 0x89, 0xdf, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x78, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xbd, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xb1, 0x49, 0x89, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0x1d, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x34, 0x24, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x49, 0x89, 0xdf, 0x49, 0x29, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe8, 0x45, 0x31, 0xe4, 0x31, 0xed, 0xeb, 0x0a, 0x66, 0x90, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe5, 0x74, 0x7f, 0x4f, 0x8b, 0x34, 0xe7, 0x85, 0xed, 0x74, 0x10, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x25, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x44, 0x66, 0x90, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0xdb, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x9e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x8d, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x79, 0xff, 0xff, 0xff, 0x85, 0xed, 0x4c, 0x8b, 0x34, 0x24, 0x74, 0x5a, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x0f, 0x88, 0xa7, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0x92, 0xfe, 0xff, 0xff, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x7e, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4c, 0x89, 0x34, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_BUILD_SET_code_holes[28] = {
    {0x29, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x303, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_BUILD_SET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BUILD_SET_data_holes[1];

// _STORE_SUBSCRplus_BUILD_SLICE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BUILD_SLICE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 f2                      movq    %r14, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 06                      movq    (%r14), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 f2                      movq    %r14, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 06                      movq    (%r14), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0e                      decq    (%r14)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 f7                      movq    %r14, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 2e                         je      0x174 <_JIT_ENTRY+0x174>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 14c: 74 3d                         je      0x18b <_JIT_ENTRY+0x18b>
// 14e: 49 83 c7 e8                   addq    $-0x18, %r15
// 152: 4c 89 f8                      movq    %r15, %rax
// 155: 48 29 d8                      subq    %rbx, %rax
// 158: 48 83 c0 b8                   addq    $-0x48, %rax
// 15c: 48 c1 e8 03                   shrq    $0x3, %rax
// 160: 89 43 40                      movl    %eax, 0x40(%rbx)
// 163: 31 c0                         xorl    %eax, %eax
// 165: 48 83 c4 18                   addq    $0x18, %rsp
// 169: 5b                            popq    %rbx
// 16a: 41 5c                         popq    %r12
// 16c: 41 5d                         popq    %r13
// 16e: 41 5e                         popq    %r14
// 170: 41 5f                         popq    %r15
// 172: 5d                            popq    %rbp
// 173: c3                            retq
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_Dealloc
// 17e: 4c 89 e7                      movq    %r12, %rdi
// 181: ff d0                         callq   *%rax
// 183: 85 ed                         testl   %ebp, %ebp
// 185: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 189: 75 c3                         jne     0x14e <_JIT_ENTRY+0x14e>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _JIT_OPARG
// 195: 66 83 f8 03                   cmpw    $0x3, %ax
// 199: 75 10                         jne     0x1ab <_JIT_ENTRY+0x1ab>
// 19b: 31 c9                         xorl    %ecx, %ecx
// 19d: 66 83 f8 03                   cmpw    $0x3, %ax
// 1a1: 0f 95 c1                      setne   %cl
// 1a4: 4d 8b 64 cf f8                movq    -0x8(%r15,%rcx,8), %r12
// 1a9: eb 03                         jmp     0x1ae <_JIT_ENTRY+0x1ae>
// 1ab: 45 31 e4                      xorl    %r12d, %r12d
// 1ae: 31 c9                         xorl    %ecx, %ecx
// 1b0: 66 83 f8 03                   cmpw    $0x3, %ax
// 1b4: 0f 94 c1                      sete    %cl
// 1b7: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// 1bc: 29 c8                         subl    %ecx, %eax
// 1be: f7 d1                         notl    %ecx
// 1c0: 48 63 c9                      movslq  %ecx, %rcx
// 1c3: 48 89 0c 24                   movq    %rcx, (%rsp)
// 1c7: 49 8b 2c cf                   movq    (%r15,%rcx,8), %rbp
// 1cb: 48 98                         cltq
// 1cd: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1d2: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  PySlice_New
// 1e0: 4c 89 f7                      movq    %r14, %rdi
// 1e3: 48 89 ee                      movq    %rbp, %rsi
// 1e6: 4c 89 e2                      movq    %r12, %rdx
// 1e9: ff d0                         callq   *%rax
// 1eb: 49 89 c5                      movq    %rax, %r13
// 1ee: 49 8b 06                      movq    (%r14), %rax
// 1f1: 48 85 c0                      testq   %rax, %rax
// 1f4: 7e 06                         jle     0x1fc <_JIT_ENTRY+0x1fc>
// 1f6: 85 c0                         testl   %eax, %eax
// 1f8: 79 27                         jns     0x221 <_JIT_ENTRY+0x221>
// 1fa: eb 36                         jmp     0x232 <_JIT_ENTRY+0x232>
// 1fc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fe:  R_X86_64_64  .rodata.str1.1
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_NegativeRefcount
// 210: be 86 0c 00 00                movl    $0xc86, %esi            # imm = 0xC86
// 215: 4c 89 f2                      movq    %r14, %rdx
// 218: ff d0                         callq   *%rax
// 21a: 49 8b 06                      movq    (%r14), %rax
// 21d: 85 c0                         testl   %eax, %eax
// 21f: 78 11                         js      0x232 <_JIT_ENTRY+0x232>
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22b: ff d0                         callq   *%rax
// 22d: 49 ff 0e                      decq    (%r14)
// 230: 74 0f                         je      0x241 <_JIT_ENTRY+0x241>
// 232: 48 8b 45 00                   movq    (%rbp), %rax
// 236: 48 85 c0                      testq   %rax, %rax
// 239: 7e 1e                         jle     0x259 <_JIT_ENTRY+0x259>
// 23b: 85 c0                         testl   %eax, %eax
// 23d: 79 40                         jns     0x27f <_JIT_ENTRY+0x27f>
// 23f: eb 5f                         jmp     0x2a0 <_JIT_ENTRY+0x2a0>
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _Py_Dealloc
// 24b: 4c 89 f7                      movq    %r14, %rdi
// 24e: ff d0                         callq   *%rax
// 250: 48 8b 45 00                   movq    (%rbp), %rax
// 254: 48 85 c0                      testq   %rax, %rax
// 257: 7f e2                         jg      0x23b <_JIT_ENTRY+0x23b>
// 259: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025b:  R_X86_64_64  .rodata.str1.1
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _Py_NegativeRefcount
// 26d: be 87 0c 00 00                movl    $0xc87, %esi            # imm = 0xC87
// 272: 48 89 ea                      movq    %rbp, %rdx
// 275: ff d0                         callq   *%rax
// 277: 48 8b 45 00                   movq    (%rbp), %rax
// 27b: 85 c0                         testl   %eax, %eax
// 27d: 78 21                         js      0x2a0 <_JIT_ENTRY+0x2a0>
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 289: ff d0                         callq   *%rax
// 28b: 48 ff 4d 00                   decq    (%rbp)
// 28f: 75 0f                         jne     0x2a0 <_JIT_ENTRY+0x2a0>
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _Py_Dealloc
// 29b: 48 89 ef                      movq    %rbp, %rdi
// 29e: ff d0                         callq   *%rax
// 2a0: 4d 85 e4                      testq   %r12, %r12
// 2a3: 74 56                         je      0x2fb <_JIT_ENTRY+0x2fb>
// 2a5: 49 8b 04 24                   movq    (%r12), %rax
// 2a9: 48 85 c0                      testq   %rax, %rax
// 2ac: 7e 06                         jle     0x2b4 <_JIT_ENTRY+0x2b4>
// 2ae: 85 c0                         testl   %eax, %eax
// 2b0: 79 28                         jns     0x2da <_JIT_ENTRY+0x2da>
// 2b2: eb 47                         jmp     0x2fb <_JIT_ENTRY+0x2fb>
// 2b4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b6:  R_X86_64_64  .rodata.str1.1+0x39
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _Py_NegativeRefcount
// 2c8: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 2cd: 4c 89 e2                      movq    %r12, %rdx
// 2d0: ff d0                         callq   *%rax
// 2d2: 49 8b 04 24                   movq    (%r12), %rax
// 2d6: 85 c0                         testl   %eax, %eax
// 2d8: 78 21                         js      0x2fb <_JIT_ENTRY+0x2fb>
// 2da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e4: ff d0                         callq   *%rax
// 2e6: 49 ff 0c 24                   decq    (%r12)
// 2ea: 75 0f                         jne     0x2fb <_JIT_ENTRY+0x2fb>
// 2ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ee:  R_X86_64_64  _Py_Dealloc
// 2f6: 4c 89 e7                      movq    %r12, %rdi
// 2f9: ff d0                         callq   *%rax
// 2fb: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 300: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 304: 4d 85 ed                      testq   %r13, %r13
// 307: 0f 84 48 fe ff ff             je      0x155 <_JIT_ENTRY+0x155>
// 30d: 48 8b 0c 24                   movq    (%rsp), %rcx
// 311: 49 8d 34 cf                   leaq    (%r15,%rcx,8), %rsi
// 315: 4c 89 28                      movq    %r13, (%rax)
// 318: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031a:  R_X86_64_64  _JIT_CONTINUE
// 322: 48 89 df                      movq    %rbx, %rdi
// 325: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 32a: 48 83 c4 18                   addq    $0x18, %rsp
// 32e: 5b                            popq    %rbx
// 32f: 41 5c                         popq    %r12
// 331: 41 5d                         popq    %r13
// 333: 41 5e                         popq    %r14
// 335: 41 5f                         popq    %r15
// 337: 5d                            popq    %rbp
// 338: ff e0                         jmpq    *%rax
// 33a: 
static const unsigned char _STORE_SUBSCRplus_BUILD_SLICE_code_body[827] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2e, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x3d, 0x49, 0x83, 0xc7, 0xe8, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xf8, 0x03, 0x75, 0x10, 0x31, 0xc9, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x95, 0xc1, 0x4d, 0x8b, 0x64, 0xcf, 0xf8, 0xeb, 0x03, 0x45, 0x31, 0xe4, 0x31, 0xc9, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc1, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc8, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x89, 0x0c, 0x24, 0x49, 0x8b, 0x2c, 0xcf, 0x48, 0x98, 0x48, 0x89, 0x44, 0x24, 0x08, 0x4d, 0x8b, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x56, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x8d, 0x04, 0xc7, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x48, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x34, 0xcf, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_BUILD_SLICE_code_holes[29] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySlice_New, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_BUILD_SLICE_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BUILD_SLICE_data_holes[1];

// _STORE_SUBSCRplus_BUILD_STRING
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BUILD_STRING.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 3c 24                   movq    %rdi, (%rsp)
// 1a: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1e: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 22: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 26: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000028:  R_X86_64_64  PyObject_SetItem
// 30: 4c 89 ef                      movq    %r13, %rdi
// 33: 4c 89 e6                      movq    %r12, %rsi
// 36: 4c 89 f2                      movq    %r14, %rdx
// 39: ff d0                         callq   *%rax
// 3b: 89 c5                         movl    %eax, %ebp
// 3d: 49 8b 06                      movq    (%r14), %rax
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 7e 06                         jle     0x4b <_JIT_ENTRY+0x4b>
// 45: 85 c0                         testl   %eax, %eax
// 47: 79 27                         jns     0x70 <_JIT_ENTRY+0x70>
// 49: eb 36                         jmp     0x81 <_JIT_ENTRY+0x81>
// 4b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004d:  R_X86_64_64  .rodata.str1.1
// 55: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000057:  R_X86_64_64  _Py_NegativeRefcount
// 5f: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 64: 4c 89 f2                      movq    %r14, %rdx
// 67: ff d0                         callq   *%rax
// 69: 49 8b 06                      movq    (%r14), %rax
// 6c: 85 c0                         testl   %eax, %eax
// 6e: 78 11                         js      0x81 <_JIT_ENTRY+0x81>
// 70: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000072:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 7a: ff d0                         callq   *%rax
// 7c: 49 ff 0e                      decq    (%r14)
// 7f: 74 0f                         je      0x90 <_JIT_ENTRY+0x90>
// 81: 49 8b 45 00                   movq    (%r13), %rax
// 85: 48 85 c0                      testq   %rax, %rax
// 88: 7e 1e                         jle     0xa8 <_JIT_ENTRY+0xa8>
// 8a: 85 c0                         testl   %eax, %eax
// 8c: 79 40                         jns     0xce <_JIT_ENTRY+0xce>
// 8e: eb 50                         jmp     0xe0 <_JIT_ENTRY+0xe0>
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_Dealloc
// 9a: 4c 89 f7                      movq    %r14, %rdi
// 9d: ff d0                         callq   *%rax
// 9f: 49 8b 45 00                   movq    (%r13), %rax
// a3: 48 85 c0                      testq   %rax, %rax
// a6: 7f e2                         jg      0x8a <_JIT_ENTRY+0x8a>
// a8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000aa:  R_X86_64_64  .rodata.str1.1
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_NegativeRefcount
// bc: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c1: 4c 89 ea                      movq    %r13, %rdx
// c4: ff d0                         callq   *%rax
// c6: 49 8b 45 00                   movq    (%r13), %rax
// ca: 85 c0                         testl   %eax, %eax
// cc: 78 12                         js      0xe0 <_JIT_ENTRY+0xe0>
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d8: ff d0                         callq   *%rax
// da: 49 ff 4d 00                   decq    (%r13)
// de: 74 13                         je      0xf3 <_JIT_ENTRY+0xf3>
// e0: 49 8b 04 24                   movq    (%r12), %rax
// e4: 48 85 c0                      testq   %rax, %rax
// e7: 7e 22                         jle     0x10b <_JIT_ENTRY+0x10b>
// e9: 49 8d 5f e8                   leaq    -0x18(%r15), %rbx
// ed: 85 c0                         testl   %eax, %eax
// ef: 79 44                         jns     0x135 <_JIT_ENTRY+0x135>
// f1: eb 54                         jmp     0x147 <_JIT_ENTRY+0x147>
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: 4c 89 ef                      movq    %r13, %rdi
// 100: ff d0                         callq   *%rax
// 102: 49 8b 04 24                   movq    (%r12), %rax
// 106: 48 85 c0                      testq   %rax, %rax
// 109: 7f de                         jg      0xe9 <_JIT_ENTRY+0xe9>
// 10b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010d:  R_X86_64_64  .rodata.str1.1
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_NegativeRefcount
// 11f: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 124: 4c 89 e2                      movq    %r12, %rdx
// 127: ff d0                         callq   *%rax
// 129: 49 8b 04 24                   movq    (%r12), %rax
// 12d: 49 8d 5f e8                   leaq    -0x18(%r15), %rbx
// 131: 85 c0                         testl   %eax, %eax
// 133: 78 12                         js      0x147 <_JIT_ENTRY+0x147>
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13f: ff d0                         callq   *%rax
// 141: 49 ff 0c 24                   decq    (%r12)
// 145: 74 33                         je      0x17a <_JIT_ENTRY+0x17a>
// 147: 85 ed                         testl   %ebp, %ebp
// 149: 4c 0f 44 fb                   cmoveq  %rbx, %r15
// 14d: 74 42                         je      0x191 <_JIT_ENTRY+0x191>
// 14f: 49 83 c7 e8                   addq    $-0x18, %r15
// 153: 4d 89 fc                      movq    %r15, %r12
// 156: 48 8b 04 24                   movq    (%rsp), %rax
// 15a: 49 29 c4                      subq    %rax, %r12
// 15d: 49 83 c4 b8                   addq    $-0x48, %r12
// 161: 49 c1 ec 03                   shrq    $0x3, %r12
// 165: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 169: 31 c0                         xorl    %eax, %eax
// 16b: 48 83 c4 18                   addq    $0x18, %rsp
// 16f: 5b                            popq    %rbx
// 170: 41 5c                         popq    %r12
// 172: 41 5d                         popq    %r13
// 174: 41 5e                         popq    %r14
// 176: 41 5f                         popq    %r15
// 178: 5d                            popq    %rbp
// 179: c3                            retq
// 17a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017c:  R_X86_64_64  _Py_Dealloc
// 184: 4c 89 e7                      movq    %r12, %rdi
// 187: ff d0                         callq   *%rax
// 189: 85 ed                         testl   %ebp, %ebp
// 18b: 4c 0f 44 fb                   cmoveq  %rbx, %r15
// 18f: 75 be                         jne     0x14f <_JIT_ENTRY+0x14f>
// 191: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 d3                      movzwl  %bx, %edx
// 19e: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// 1a6: 4d 89 fc                      movq    %r15, %r12
// 1a9: 49 29 c4                      subq    %rax, %r12
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _PyUnicode_JoinArray
// 1b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b8:  R_X86_64_64  _PyRuntime
// 1c0: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 1c7: 4c 89 e6                      movq    %r12, %rsi
// 1ca: ff d0                         callq   *%rax
// 1cc: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1d1: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 1d7: 7e 7a                         jle     0x253 <_JIT_ENTRY+0x253>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _JIT_OPARG
// 1e3: 44 0f b7 e8                   movzwl  %ax, %r13d
// 1e7: 49 ff c5                      incq    %r13
// 1ea: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000001ec:  R_X86_64_64  _Py_NegativeRefcount
// 1f4: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001f6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fe: eb 09                         jmp     0x209 <_JIT_ENTRY+0x209>
// 200: 49 ff cd                      decq    %r13
// 203: 49 83 fd 01                   cmpq    $0x1, %r13
// 207: 7e 4a                         jle     0x253 <_JIT_ENTRY+0x253>
// 209: 41 8d 45 fe                   leal    -0x2(%r13), %eax
// 20d: 4d 8b 34 c4                   movq    (%r12,%rax,8), %r14
// 211: 49 8b 06                      movq    (%r14), %rax
// 214: 48 85 c0                      testq   %rax, %rax
// 217: 7e 07                         jle     0x220 <_JIT_ENTRY+0x220>
// 219: 85 c0                         testl   %eax, %eax
// 21b: 78 e3                         js      0x200 <_JIT_ENTRY+0x200>
// 21d: eb 1c                         jmp     0x23b <_JIT_ENTRY+0x23b>
// 21f: 90                            nop
// 220: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000222:  R_X86_64_64  .rodata.str1.1
// 22a: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// 22f: 4c 89 f2                      movq    %r14, %rdx
// 232: ff d3                         callq   *%rbx
// 234: 49 8b 06                      movq    (%r14), %rax
// 237: 85 c0                         testl   %eax, %eax
// 239: 78 c5                         js      0x200 <_JIT_ENTRY+0x200>
// 23b: ff d5                         callq   *%rbp
// 23d: 49 ff 0e                      decq    (%r14)
// 240: 75 be                         jne     0x200 <_JIT_ENTRY+0x200>
// 242: 4c 89 f7                      movq    %r14, %rdi
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_Dealloc
// 24f: ff d0                         callq   *%rax
// 251: eb ad                         jmp     0x200 <_JIT_ENTRY+0x200>
// 253: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 258: 48 85 d2                      testq   %rdx, %rdx
// 25b: 0f 84 f5 fe ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _JIT_OPARG
// 26b: 0f b7 c8                      movzwl  %ax, %ecx
// 26e: 0f b7 c0                      movzwl  %ax, %eax
// 271: 48 c1 e0 03                   shlq    $0x3, %rax
// 275: 48 f7 d8                      negq    %rax
// 278: 49 89 14 07                   movq    %rdx, (%r15,%rax)
// 27c: b8 01 00 00 00                movl    $0x1, %eax
// 281: 29 c8                         subl    %ecx, %eax
// 283: 48 98                         cltq
// 285: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 289: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028b:  R_X86_64_64  _JIT_CONTINUE
// 293: 48 8b 3c 24                   movq    (%rsp), %rdi
// 297: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 29c: 48 83 c4 18                   addq    $0x18, %rsp
// 2a0: 5b                            popq    %rbx
// 2a1: 41 5c                         popq    %r12
// 2a3: 41 5d                         popq    %r13
// 2a5: 41 5e                         popq    %r14
// 2a7: 41 5f                         popq    %r15
// 2a9: 5d                            popq    %rbp
// 2aa: ff e0                         jmpq    *%rax
// 2ac: 
static const unsigned char _STORE_SUBSCRplus_BUILD_STRING_code_body[685] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x3c, 0x24, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x49, 0x8d, 0x5f, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x5f, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x33, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xfb, 0x74, 0x42, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x89, 0xfc, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xfb, 0x75, 0xbe, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x7a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe8, 0x49, 0xff, 0xc5, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x09, 0x49, 0xff, 0xcd, 0x49, 0x83, 0xfd, 0x01, 0x7e, 0x4a, 0x41, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x34, 0xc4, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x1c, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd3, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xc5, 0xff, 0xd5, 0x49, 0xff, 0x0e, 0x75, 0xbe, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xad, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x85, 0xd2, 0x0f, 0x84, 0xf5, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x49, 0x89, 0x14, 0x07, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_BUILD_STRING_code_holes[24] = {
    {0x28, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x57, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x72, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_BUILD_STRING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BUILD_STRING_data_holes[1];

// _STORE_SUBSCRplus_BUILD_TUPLE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_BUILD_TUPLE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f7                      movq    %rsi, %r15
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 f2                      movq    %r14, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 06                      movq    (%r14), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 f2                      movq    %r14, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0e                      decq    (%r14)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 f7                      movq    %r14, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c7 e8                   addq    $-0x18, %r15
// 14e: 4d 89 fe                      movq    %r15, %r14
// 151: 49 29 de                      subq    %rbx, %r14
// 154: 49 83 c6 b8                   addq    $-0x48, %r14
// 158: 49 c1 ee 03                   shrq    $0x3, %r14
// 15c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  _JIT_OPARG
// 192: 0f b7 f0                      movzwl  %ax, %esi
// 195: 48 8d 04 f5 00 00 00 00       leaq    (,%rsi,8), %rax
// 19d: 4d 89 fe                      movq    %r15, %r14
// 1a0: 49 29 c6                      subq    %rax, %r14
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _PyTuple_FromArraySteal
// 1ad: 4c 89 f7                      movq    %r14, %rdi
// 1b0: ff d0                         callq   *%rax
// 1b2: 48 85 c0                      testq   %rax, %rax
// 1b5: 74 9a                         je      0x151 <_JIT_ENTRY+0x151>
// 1b7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b9:  R_X86_64_64  _JIT_OPARG
// 1c1: 0f b7 d1                      movzwl  %cx, %edx
// 1c4: 0f b7 c9                      movzwl  %cx, %ecx
// 1c7: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1cb: 48 f7 d9                      negq    %rcx
// 1ce: 49 89 04 0f                   movq    %rax, (%r15,%rcx)
// 1d2: b8 01 00 00 00                movl    $0x1, %eax
// 1d7: 29 d0                         subl    %edx, %eax
// 1d9: 48 98                         cltq
// 1db: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _JIT_CONTINUE
// 1e9: 48 89 df                      movq    %rbx, %rdi
// 1ec: 48 8b 14 24                   movq    (%rsp), %rdx
// 1f0: 48 83 c4 08                   addq    $0x8, %rsp
// 1f4: 5b                            popq    %rbx
// 1f5: 41 5c                         popq    %r12
// 1f7: 41 5d                         popq    %r13
// 1f9: 41 5e                         popq    %r14
// 1fb: 41 5f                         popq    %r15
// 1fd: 5d                            popq    %rbp
// 1fe: ff e0                         jmpq    *%rax
// 200: 
static const unsigned char _STORE_SUBSCRplus_BUILD_TUPLE_code_body[513] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0x8d, 0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x9a, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x49, 0x89, 0x04, 0x0f, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x98, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_BUILD_TUPLE_code_holes[18] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyTuple_FromArraySteal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_BUILD_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_BUILD_TUPLE_data_holes[1];

// _STORE_SUBSCRplus_CALL_BUILTIN_CLASS
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CALL_BUILTIN_CLASS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 3c 24                   movq    %rdi, (%rsp)
// 1a: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1e: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 22: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 26: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000028:  R_X86_64_64  PyObject_SetItem
// 30: 4c 89 ef                      movq    %r13, %rdi
// 33: 4c 89 e6                      movq    %r12, %rsi
// 36: 4c 89 f2                      movq    %r14, %rdx
// 39: ff d0                         callq   *%rax
// 3b: 89 c5                         movl    %eax, %ebp
// 3d: 49 8b 06                      movq    (%r14), %rax
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 7e 06                         jle     0x4b <_JIT_ENTRY+0x4b>
// 45: 85 c0                         testl   %eax, %eax
// 47: 79 27                         jns     0x70 <_JIT_ENTRY+0x70>
// 49: eb 36                         jmp     0x81 <_JIT_ENTRY+0x81>
// 4b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004d:  R_X86_64_64  .rodata.str1.1
// 55: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000057:  R_X86_64_64  _Py_NegativeRefcount
// 5f: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 64: 4c 89 f2                      movq    %r14, %rdx
// 67: ff d0                         callq   *%rax
// 69: 49 8b 06                      movq    (%r14), %rax
// 6c: 85 c0                         testl   %eax, %eax
// 6e: 78 11                         js      0x81 <_JIT_ENTRY+0x81>
// 70: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000072:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 7a: ff d0                         callq   *%rax
// 7c: 49 ff 0e                      decq    (%r14)
// 7f: 74 0f                         je      0x90 <_JIT_ENTRY+0x90>
// 81: 49 8b 45 00                   movq    (%r13), %rax
// 85: 48 85 c0                      testq   %rax, %rax
// 88: 7e 1e                         jle     0xa8 <_JIT_ENTRY+0xa8>
// 8a: 85 c0                         testl   %eax, %eax
// 8c: 79 40                         jns     0xce <_JIT_ENTRY+0xce>
// 8e: eb 50                         jmp     0xe0 <_JIT_ENTRY+0xe0>
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_Dealloc
// 9a: 4c 89 f7                      movq    %r14, %rdi
// 9d: ff d0                         callq   *%rax
// 9f: 49 8b 45 00                   movq    (%r13), %rax
// a3: 48 85 c0                      testq   %rax, %rax
// a6: 7f e2                         jg      0x8a <_JIT_ENTRY+0x8a>
// a8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000aa:  R_X86_64_64  .rodata.str1.1
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_NegativeRefcount
// bc: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c1: 4c 89 ea                      movq    %r13, %rdx
// c4: ff d0                         callq   *%rax
// c6: 49 8b 45 00                   movq    (%r13), %rax
// ca: 85 c0                         testl   %eax, %eax
// cc: 78 12                         js      0xe0 <_JIT_ENTRY+0xe0>
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d8: ff d0                         callq   *%rax
// da: 49 ff 4d 00                   decq    (%r13)
// de: 74 13                         je      0xf3 <_JIT_ENTRY+0xf3>
// e0: 49 8b 04 24                   movq    (%r12), %rax
// e4: 48 85 c0                      testq   %rax, %rax
// e7: 7e 22                         jle     0x10b <_JIT_ENTRY+0x10b>
// e9: 49 8d 5f e8                   leaq    -0x18(%r15), %rbx
// ed: 85 c0                         testl   %eax, %eax
// ef: 79 44                         jns     0x135 <_JIT_ENTRY+0x135>
// f1: eb 54                         jmp     0x147 <_JIT_ENTRY+0x147>
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: 4c 89 ef                      movq    %r13, %rdi
// 100: ff d0                         callq   *%rax
// 102: 49 8b 04 24                   movq    (%r12), %rax
// 106: 48 85 c0                      testq   %rax, %rax
// 109: 7f de                         jg      0xe9 <_JIT_ENTRY+0xe9>
// 10b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010d:  R_X86_64_64  .rodata.str1.1
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_NegativeRefcount
// 11f: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 124: 4c 89 e2                      movq    %r12, %rdx
// 127: ff d0                         callq   *%rax
// 129: 49 8b 04 24                   movq    (%r12), %rax
// 12d: 49 8d 5f e8                   leaq    -0x18(%r15), %rbx
// 131: 85 c0                         testl   %eax, %eax
// 133: 78 12                         js      0x147 <_JIT_ENTRY+0x147>
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13f: ff d0                         callq   *%rax
// 141: 49 ff 0c 24                   decq    (%r12)
// 145: 74 28                         je      0x16f <_JIT_ENTRY+0x16f>
// 147: 85 ed                         testl   %ebp, %ebp
// 149: 4c 0f 44 fb                   cmoveq  %rbx, %r15
// 14d: 74 37                         je      0x186 <_JIT_ENTRY+0x186>
// 14f: 49 83 c7 e8                   addq    $-0x18, %r15
// 153: 4c 89 f8                      movq    %r15, %rax
// 156: 48 8b 0c 24                   movq    (%rsp), %rcx
// 15a: 48 29 c8                      subq    %rcx, %rax
// 15d: 48 83 c0 b8                   addq    $-0x48, %rax
// 161: 48 c1 e8 03                   shrq    $0x3, %rax
// 165: 89 41 40                      movl    %eax, 0x40(%rcx)
// 168: 31 c0                         xorl    %eax, %eax
// 16a: e9 8b 01 00 00                jmp     0x2fa <_JIT_ENTRY+0x2fa>
// 16f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000171:  R_X86_64_64  _Py_Dealloc
// 179: 4c 89 e7                      movq    %r12, %rdi
// 17c: ff d0                         callq   *%rax
// 17e: 85 ed                         testl   %ebp, %ebp
// 180: 4c 0f 44 fb                   cmoveq  %rbx, %r15
// 184: 75 c9                         jne     0x14f <_JIT_ENTRY+0x14f>
// 186: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000188:  R_X86_64_64  _JIT_OPARG
// 190: 0f b7 d1                      movzwl  %cx, %edx
// 193: 89 d0                         movl    %edx, %eax
// 195: f7 d0                         notl    %eax
// 197: 48 63 f8                      movslq  %eax, %rdi
// 19a: 49 8b 04 ff                   movq    (%r15,%rdi,8), %rax
// 19e: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 1a3: 29 d6                         subl    %edx, %esi
// 1a5: 4c 63 ce                      movslq  %esi, %r9
// 1a8: 0f b7 c9                      movzwl  %cx, %ecx
// 1ab: 48 89 ce                      movq    %rcx, %rsi
// 1ae: 48 f7 de                      negq    %rsi
// 1b1: 8d 5a 01                      leal    0x1(%rdx), %ebx
// 1b4: 48 85 c0                      testq   %rax, %rax
// 1b7: 48 f7 d1                      notq    %rcx
// 1ba: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 1be: 0f 44 da                      cmovel  %edx, %ebx
// 1c1: 4f 8b 24 cf                   movq    (%r15,%r9,8), %r12
// 1c5: 49 8b 54 24 08                movq    0x8(%r12), %rdx
// 1ca: f6 82 ab 00 00 00 80          testb   $-0x80, 0xab(%rdx)
// 1d1: 0f 84 f7 00 00 00             je      0x2ce <_JIT_ENTRY+0x2ce>
// 1d7: 4d 8b 84 24 90 01 00 00       movq    0x190(%r12), %r8
// 1df: 4d 85 c0                      testq   %r8, %r8
// 1e2: 0f 84 e6 00 00 00             je      0x2ce <_JIT_ENTRY+0x2ce>
// 1e8: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 1ed: 48 89 7c 24 18                movq    %rdi, 0x18(%rsp)
// 1f2: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 1f6: 48 85 c0                      testq   %rax, %rax
// 1f9: 41 0f 94 c6                   sete    %r14b
// 1fd: 89 da                         movl    %ebx, %edx
// 1ff: 4c 89 e7                      movq    %r12, %rdi
// 202: 48 89 ee                      movq    %rbp, %rsi
// 205: 31 c9                         xorl    %ecx, %ecx
// 207: 41 ff d0                      callq   *%r8
// 20a: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _JIT_OPARG
// 219: 66 85 c0                      testw   %ax, %ax
// 21c: 0f 94 c0                      sete    %al
// 21f: 41 84 c6                      testb   %al, %r14b
// 222: 0f 84 e1 00 00 00             je      0x309 <_JIT_ENTRY+0x309>
// 228: 49 8b 04 24                   movq    (%r12), %rax
// 22c: 48 85 c0                      testq   %rax, %rax
// 22f: 7f 22                         jg      0x253 <_JIT_ENTRY+0x253>
// 231: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000233:  R_X86_64_64  .rodata.str1.1
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_NegativeRefcount
// 245: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 24a: 4c 89 e2                      movq    %r12, %rdx
// 24d: ff d0                         callq   *%rax
// 24f: 49 8b 04 24                   movq    (%r12), %rax
// 253: 85 c0                         testl   %eax, %eax
// 255: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
// 25a: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 25f: 78 21                         js      0x282 <_JIT_ENTRY+0x282>
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26b: ff d0                         callq   *%rax
// 26d: 49 ff 0c 24                   decq    (%r12)
// 271: 75 0f                         jne     0x282 <_JIT_ENTRY+0x282>
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_Dealloc
// 27d: 4c 89 e7                      movq    %r12, %rdi
// 280: ff d0                         callq   *%rax
// 282: 4b 8d 04 f7                   leaq    (%r15,%r14,8), %rax
// 286: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 28b: 48 85 c9                      testq   %rcx, %rcx
// 28e: 0f 84 c2 fe ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 294: 4d 8d 34 df                   leaq    (%r15,%rbx,8), %r14
// 298: 48 89 08                      movq    %rcx, (%rax)
// 29b: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 2a0: 48 8b 43 10                   movq    0x10(%rbx), %rax
// 2a4: 48 8b 00                      movq    (%rax), %rax
// 2a7: 84 c0                         testb   %al, %al
// 2a9: 0f 84 d8 00 00 00             je      0x387 <_JIT_ENTRY+0x387>
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _Py_HandlePending
// 2b9: 48 89 df                      movq    %rbx, %rdi
// 2bc: ff d0                         callq   *%rax
// 2be: 85 c0                         testl   %eax, %eax
// 2c0: 0f 84 c1 00 00 00             je      0x387 <_JIT_ENTRY+0x387>
// 2c6: 4c 89 f0                      movq    %r14, %rax
// 2c9: e9 88 fe ff ff                jmp     0x156 <_JIT_ENTRY+0x156>
// 2ce: 48 8b 04 24                   movq    (%rsp), %rax
// 2d2: 49 29 c7                      subq    %rax, %r15
// 2d5: 49 83 c7 b8                   addq    $-0x48, %r15
// 2d9: 49 c1 ef 03                   shrq    $0x3, %r15
// 2dd: 44 89 78 40                   movl    %r15d, 0x40(%rax)
// 2e1: 48 8b 00                      movq    (%rax), %rax
// 2e4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002e6:  R_X86_64_64  _JIT_TARGET
// 2ee: 89 c9                         movl    %ecx, %ecx
// 2f0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2f4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2fa: 48 83 c4 28                   addq    $0x28, %rsp
// 2fe: 5b                            popq    %rbx
// 2ff: 41 5c                         popq    %r12
// 301: 41 5d                         popq    %r13
// 303: 41 5e                         popq    %r14
// 305: 41 5f                         popq    %r15
// 307: 5d                            popq    %rbp
// 308: c3                            retq
// 309: 83 fb 02                      cmpl    $0x2, %ebx
// 30c: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 312: 44 0f 43 eb                   cmovael %ebx, %r13d
// 316: 31 db                         xorl    %ebx, %ebx
// 318: eb 12                         jmp     0x32c <_JIT_ENTRY+0x32c>
// 31a: 66 0f 1f 44 00 00             nopw    (%rax,%rax)
// 320: 48 ff c3                      incq    %rbx
// 323: 49 39 dd                      cmpq    %rbx, %r13
// 326: 0f 84 fc fe ff ff             je      0x228 <_JIT_ENTRY+0x228>
// 32c: 4c 8b 74 dd 00                movq    (%rbp,%rbx,8), %r14
// 331: 49 8b 06                      movq    (%r14), %rax
// 334: 48 85 c0                      testq   %rax, %rax
// 337: 7e 07                         jle     0x340 <_JIT_ENTRY+0x340>
// 339: 85 c0                         testl   %eax, %eax
// 33b: 78 e3                         js      0x320 <_JIT_ENTRY+0x320>
// 33d: eb 26                         jmp     0x365 <_JIT_ENTRY+0x365>
// 33f: 90                            nop
// 340: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000342:  R_X86_64_64  .rodata.str1.1
// 34a: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 34f: 4c 89 f2                      movq    %r14, %rdx
// 352: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000354:  R_X86_64_64  _Py_NegativeRefcount
// 35c: ff d0                         callq   *%rax
// 35e: 49 8b 06                      movq    (%r14), %rax
// 361: 85 c0                         testl   %eax, %eax
// 363: 78 bb                         js      0x320 <_JIT_ENTRY+0x320>
// 365: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000367:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 36f: ff d0                         callq   *%rax
// 371: 49 ff 0e                      decq    (%r14)
// 374: 75 aa                         jne     0x320 <_JIT_ENTRY+0x320>
// 376: 4c 89 f7                      movq    %r14, %rdi
// 379: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037b:  R_X86_64_64  _Py_Dealloc
// 383: ff d0                         callq   *%rax
// 385: eb 99                         jmp     0x320 <_JIT_ENTRY+0x320>
// 387: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000389:  R_X86_64_64  _JIT_CONTINUE
// 391: 48 8b 3c 24                   movq    (%rsp), %rdi
// 395: 4c 89 f6                      movq    %r14, %rsi
// 398: 48 89 da                      movq    %rbx, %rdx
// 39b: 48 83 c4 28                   addq    $0x28, %rsp
// 39f: 5b                            popq    %rbx
// 3a0: 41 5c                         popq    %r12
// 3a2: 41 5d                         popq    %r13
// 3a4: 41 5e                         popq    %r14
// 3a6: 41 5f                         popq    %r15
// 3a8: 5d                            popq    %rbp
// 3a9: ff e0                         jmpq    *%rax
// 3ab: 
static const unsigned char _STORE_SUBSCRplus_CALL_BUILTIN_CLASS_code_body[940] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x20, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x3c, 0x24, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x49, 0x8d, 0x5f, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x5f, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xfb, 0x74, 0x37, 0x49, 0x83, 0xc7, 0xe8, 0x4c, 0x89, 0xf8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x41, 0x40, 0x31, 0xc0, 0xe9, 0x8b, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xfb, 0x75, 0xc9, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x48, 0x63, 0xf8, 0x49, 0x8b, 0x04, 0xff, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd6, 0x4c, 0x63, 0xce, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x8d, 0x5a, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x0f, 0x44, 0xda, 0x4f, 0x8b, 0x24, 0xcf, 0x49, 0x8b, 0x54, 0x24, 0x08, 0xf6, 0x82, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xf7, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x84, 0x24, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0xe6, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc6, 0x89, 0xda, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc6, 0x0f, 0x84, 0xe1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xf7, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xc2, 0xfe, 0xff, 0xff, 0x4d, 0x8d, 0x34, 0xdf, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x48, 0x8b, 0x43, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xd8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xc1, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0xe9, 0x88, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x78, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x83, 0xfb, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xeb, 0x31, 0xdb, 0xeb, 0x12, 0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x48, 0xff, 0xc3, 0x49, 0x39, 0xdd, 0x0f, 0x84, 0xfc, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x74, 0xdd, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xda, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_CALL_BUILTIN_CLASS_code_holes[27] = {
    {0x28, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x57, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x72, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x342, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x354, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x367, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x37b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x389, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CALL_BUILTIN_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CALL_BUILTIN_CLASS_data_holes[1];

// _STORE_SUBSCRplus_CALL_BUILTIN_FAST
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CALL_BUILTIN_FAST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 f2                      movq    %r14, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 06                      movq    (%r14), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 f2                      movq    %r14, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 06                      movq    (%r14), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0e                      decq    (%r14)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 f7                      movq    %r14, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 24                         je      0x16a <_JIT_ENTRY+0x16a>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 14c: 74 33                         je      0x181 <_JIT_ENTRY+0x181>
// 14e: 49 83 c7 e8                   addq    $-0x18, %r15
// 152: 4c 89 f8                      movq    %r15, %rax
// 155: 48 29 d8                      subq    %rbx, %rax
// 158: 48 83 c0 b8                   addq    $-0x48, %rax
// 15c: 48 c1 e8 03                   shrq    $0x3, %rax
// 160: 89 43 40                      movl    %eax, 0x40(%rbx)
// 163: 31 c0                         xorl    %eax, %eax
// 165: e9 95 01 00 00                jmp     0x2ff <_JIT_ENTRY+0x2ff>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 17f: 75 cd                         jne     0x14e <_JIT_ENTRY+0x14e>
// 181: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000183:  R_X86_64_64  _JIT_OPARG
// 18b: 0f b7 d1                      movzwl  %cx, %edx
// 18e: 89 d0                         movl    %edx, %eax
// 190: f7 d0                         notl    %eax
// 192: 48 63 f8                      movslq  %eax, %rdi
// 195: 49 8b 04 ff                   movq    (%r15,%rdi,8), %rax
// 199: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 19e: 29 d6                         subl    %edx, %esi
// 1a0: 4c 63 ce                      movslq  %esi, %r9
// 1a3: 0f b7 c9                      movzwl  %cx, %ecx
// 1a6: 48 89 ce                      movq    %rcx, %rsi
// 1a9: 48 f7 de                      negq    %rsi
// 1ac: 44 8d 72 01                   leal    0x1(%rdx), %r14d
// 1b0: 48 85 c0                      testq   %rax, %rax
// 1b3: 48 f7 d1                      notq    %rcx
// 1b6: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 1ba: 44 0f 44 f2                   cmovel  %edx, %r14d
// 1be: 4b 8b 34 cf                   movq    (%r15,%r9,8), %rsi
// 1c2: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001c4:  R_X86_64_64  PyCFunction_Type
// 1cc: 48 39 56 08                   cmpq    %rdx, 0x8(%rsi)
// 1d0: 0f 85 01 01 00 00             jne     0x2d7 <_JIT_ENTRY+0x2d7>
// 1d6: 4c 8b 46 10                   movq    0x10(%rsi), %r8
// 1da: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 1e2: 0f 85 ef 00 00 00             jne     0x2d7 <_JIT_ENTRY+0x2d7>
// 1e8: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 1ed: 48 89 7c 24 18                movq    %rdi, 0x18(%rsp)
// 1f2: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 1f6: 48 85 c0                      testq   %rax, %rax
// 1f9: 41 0f 94 c4                   sete    %r12b
// 1fd: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 202: 48 8b 7e 18                   movq    0x18(%rsi), %rdi
// 206: 44 89 f2                      movl    %r14d, %edx
// 209: 48 89 ee                      movq    %rbp, %rsi
// 20c: 41 ff 50 08                   callq   *0x8(%r8)
// 210: 48 89 04 24                   movq    %rax, (%rsp)
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _JIT_OPARG
// 21e: 66 85 c0                      testw   %ax, %ax
// 221: 0f 94 c0                      sete    %al
// 224: 41 84 c4                      testb   %al, %r12b
// 227: 0f 84 e1 00 00 00             je      0x30e <_JIT_ENTRY+0x30e>
// 22d: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 232: 49 8b 45 00                   movq    (%r13), %rax
// 236: 48 85 c0                      testq   %rax, %rax
// 239: 7f 22                         jg      0x25d <_JIT_ENTRY+0x25d>
// 23b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023d:  R_X86_64_64  .rodata.str1.1
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_NegativeRefcount
// 24f: be 28 0b 00 00                movl    $0xb28, %esi            # imm = 0xB28
// 254: 4c 89 ea                      movq    %r13, %rdx
// 257: ff d0                         callq   *%rax
// 259: 49 8b 45 00                   movq    (%r13), %rax
// 25d: 85 c0                         testl   %eax, %eax
// 25f: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 264: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 269: 78 21                         js      0x28c <_JIT_ENTRY+0x28c>
// 26b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 275: ff d0                         callq   *%rax
// 277: 49 ff 4d 00                   decq    (%r13)
// 27b: 75 0f                         jne     0x28c <_JIT_ENTRY+0x28c>
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _Py_Dealloc
// 287: 4c 89 ef                      movq    %r13, %rdi
// 28a: ff d0                         callq   *%rax
// 28c: 4b 8d 04 e7                   leaq    (%r15,%r12,8), %rax
// 290: 48 8b 0c 24                   movq    (%rsp), %rcx
// 294: 48 85 c9                      testq   %rcx, %rcx
// 297: 0f 84 b8 fe ff ff             je      0x155 <_JIT_ENTRY+0x155>
// 29d: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 2a1: 48 89 08                      movq    %rcx, (%rax)
// 2a4: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 2a9: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2ad: 48 8b 00                      movq    (%rax), %rax
// 2b0: 84 c0                         testb   %al, %al
// 2b2: 0f 84 df 00 00 00             je      0x397 <_JIT_ENTRY+0x397>
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_HandlePending
// 2c2: 4c 89 ff                      movq    %r15, %rdi
// 2c5: ff d0                         callq   *%rax
// 2c7: 85 c0                         testl   %eax, %eax
// 2c9: 0f 84 c8 00 00 00             je      0x397 <_JIT_ENTRY+0x397>
// 2cf: 4c 89 f0                      movq    %r14, %rax
// 2d2: e9 7e fe ff ff                jmp     0x155 <_JIT_ENTRY+0x155>
// 2d7: 49 29 df                      subq    %rbx, %r15
// 2da: 49 83 c7 b8                   addq    $-0x48, %r15
// 2de: 49 c1 ef 03                   shrq    $0x3, %r15
// 2e2: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2e6: 48 8b 03                      movq    (%rbx), %rax
// 2e9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002eb:  R_X86_64_64  _JIT_TARGET
// 2f3: 89 c9                         movl    %ecx, %ecx
// 2f5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2f9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2ff: 48 83 c4 28                   addq    $0x28, %rsp
// 303: 5b                            popq    %rbx
// 304: 41 5c                         popq    %r12
// 306: 41 5d                         popq    %r13
// 308: 41 5e                         popq    %r14
// 30a: 41 5f                         popq    %r15
// 30c: 5d                            popq    %rbp
// 30d: c3                            retq
// 30e: 41 83 fe 02                   cmpl    $0x2, %r14d
// 312: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 318: 45 0f 43 ee                   cmovael %r14d, %r13d
// 31c: 45 31 e4                      xorl    %r12d, %r12d
// 31f: eb 1b                         jmp     0x33c <_JIT_ENTRY+0x33c>
// 321: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
// 330: 49 ff c4                      incq    %r12
// 333: 4d 39 e5                      cmpq    %r12, %r13
// 336: 0f 84 f1 fe ff ff             je      0x22d <_JIT_ENTRY+0x22d>
// 33c: 4e 8b 74 e5 00                movq    (%rbp,%r12,8), %r14
// 341: 49 8b 06                      movq    (%r14), %rax
// 344: 48 85 c0                      testq   %rax, %rax
// 347: 7e 07                         jle     0x350 <_JIT_ENTRY+0x350>
// 349: 85 c0                         testl   %eax, %eax
// 34b: 78 e3                         js      0x330 <_JIT_ENTRY+0x330>
// 34d: eb 26                         jmp     0x375 <_JIT_ENTRY+0x375>
// 34f: 90                            nop
// 350: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000352:  R_X86_64_64  .rodata.str1.1
// 35a: be 26 0b 00 00                movl    $0xb26, %esi            # imm = 0xB26
// 35f: 4c 89 f2                      movq    %r14, %rdx
// 362: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000364:  R_X86_64_64  _Py_NegativeRefcount
// 36c: ff d0                         callq   *%rax
// 36e: 49 8b 06                      movq    (%r14), %rax
// 371: 85 c0                         testl   %eax, %eax
// 373: 78 bb                         js      0x330 <_JIT_ENTRY+0x330>
// 375: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000377:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 37f: ff d0                         callq   *%rax
// 381: 49 ff 0e                      decq    (%r14)
// 384: 75 aa                         jne     0x330 <_JIT_ENTRY+0x330>
// 386: 4c 89 f7                      movq    %r14, %rdi
// 389: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038b:  R_X86_64_64  _Py_Dealloc
// 393: ff d0                         callq   *%rax
// 395: eb 99                         jmp     0x330 <_JIT_ENTRY+0x330>
// 397: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000399:  R_X86_64_64  _JIT_CONTINUE
// 3a1: 48 89 df                      movq    %rbx, %rdi
// 3a4: 4c 89 f6                      movq    %r14, %rsi
// 3a7: 4c 89 fa                      movq    %r15, %rdx
// 3aa: 48 83 c4 28                   addq    $0x28, %rsp
// 3ae: 5b                            popq    %rbx
// 3af: 41 5c                         popq    %r12
// 3b1: 41 5d                         popq    %r13
// 3b3: 41 5e                         popq    %r14
// 3b5: 41 5f                         popq    %r15
// 3b7: 5d                            popq    %rbp
// 3b8: ff e0                         jmpq    *%rax
// 3ba: 
static const unsigned char _STORE_SUBSCRplus_CALL_BUILTIN_FAST_code_body[955] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x20, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x24, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x33, 0x49, 0x83, 0xc7, 0xe8, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x95, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xcd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x48, 0x63, 0xf8, 0x49, 0x8b, 0x04, 0xff, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd6, 0x4c, 0x63, 0xce, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x72, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xf2, 0x4b, 0x8b, 0x34, 0xcf, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x56, 0x08, 0x0f, 0x85, 0x01, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x46, 0x10, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xef, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc4, 0x48, 0x89, 0x74, 0x24, 0x08, 0x48, 0x8b, 0x7e, 0x18, 0x44, 0x89, 0xf2, 0x48, 0x89, 0xee, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc4, 0x0f, 0x84, 0xe1, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x28, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe7, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb8, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xf7, 0x48, 0x89, 0x08, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xdf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xc8, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0xe9, 0x7e, 0xfe, 0xff, 0xff, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xee, 0x45, 0x31, 0xe4, 0xeb, 0x1b, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe5, 0x0f, 0x84, 0xf1, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x74, 0xe5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x26, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_CALL_BUILTIN_FAST_code_holes[28] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x352, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x364, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x377, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x38b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x399, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CALL_BUILTIN_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CALL_BUILTIN_FAST_data_holes[1];

// _STORE_SUBSCRplus_CALL_BUILTIN_FAST_WITH_KEYWORDS
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CALL_BUILTIN_FAST_WITH_KEYWORDS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 f2                      movq    %r14, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 06                      movq    (%r14), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 f2                      movq    %r14, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 06                      movq    (%r14), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0e                      decq    (%r14)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 f7                      movq    %r14, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 24                         je      0x16a <_JIT_ENTRY+0x16a>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 14c: 74 33                         je      0x181 <_JIT_ENTRY+0x181>
// 14e: 49 83 c7 e8                   addq    $-0x18, %r15
// 152: 4c 89 f8                      movq    %r15, %rax
// 155: 48 29 d8                      subq    %rbx, %rax
// 158: 48 83 c0 b8                   addq    $-0x48, %rax
// 15c: 48 c1 e8 03                   shrq    $0x3, %rax
// 160: 89 43 40                      movl    %eax, 0x40(%rbx)
// 163: 31 c0                         xorl    %eax, %eax
// 165: e9 97 01 00 00                jmp     0x301 <_JIT_ENTRY+0x301>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 17f: 75 cd                         jne     0x14e <_JIT_ENTRY+0x14e>
// 181: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000183:  R_X86_64_64  _JIT_OPARG
// 18b: 0f b7 d1                      movzwl  %cx, %edx
// 18e: 89 d0                         movl    %edx, %eax
// 190: f7 d0                         notl    %eax
// 192: 48 63 f8                      movslq  %eax, %rdi
// 195: 49 8b 04 ff                   movq    (%r15,%rdi,8), %rax
// 199: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 19e: 29 d6                         subl    %edx, %esi
// 1a0: 4c 63 ce                      movslq  %esi, %r9
// 1a3: 0f b7 c9                      movzwl  %cx, %ecx
// 1a6: 48 89 ce                      movq    %rcx, %rsi
// 1a9: 48 f7 de                      negq    %rsi
// 1ac: 44 8d 72 01                   leal    0x1(%rdx), %r14d
// 1b0: 48 85 c0                      testq   %rax, %rax
// 1b3: 48 f7 d1                      notq    %rcx
// 1b6: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 1ba: 44 0f 44 f2                   cmovel  %edx, %r14d
// 1be: 4b 8b 34 cf                   movq    (%r15,%r9,8), %rsi
// 1c2: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001c4:  R_X86_64_64  PyCFunction_Type
// 1cc: 48 39 56 08                   cmpq    %rdx, 0x8(%rsi)
// 1d0: 0f 85 03 01 00 00             jne     0x2d9 <_JIT_ENTRY+0x2d9>
// 1d6: 4c 8b 46 10                   movq    0x10(%rsi), %r8
// 1da: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 1e2: 0f 85 f1 00 00 00             jne     0x2d9 <_JIT_ENTRY+0x2d9>
// 1e8: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 1ed: 48 89 7c 24 18                movq    %rdi, 0x18(%rsp)
// 1f2: 49 8d 2c cf                   leaq    (%r15,%rcx,8), %rbp
// 1f6: 48 85 c0                      testq   %rax, %rax
// 1f9: 41 0f 94 c4                   sete    %r12b
// 1fd: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 202: 48 8b 7e 18                   movq    0x18(%rsi), %rdi
// 206: 44 89 f2                      movl    %r14d, %edx
// 209: 48 89 ee                      movq    %rbp, %rsi
// 20c: 31 c9                         xorl    %ecx, %ecx
// 20e: 41 ff 50 08                   callq   *0x8(%r8)
// 212: 48 89 04 24                   movq    %rax, (%rsp)
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _JIT_OPARG
// 220: 66 85 c0                      testw   %ax, %ax
// 223: 0f 94 c0                      sete    %al
// 226: 41 84 c4                      testb   %al, %r12b
// 229: 0f 84 e1 00 00 00             je      0x310 <_JIT_ENTRY+0x310>
// 22f: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 234: 49 8b 45 00                   movq    (%r13), %rax
// 238: 48 85 c0                      testq   %rax, %rax
// 23b: 7f 22                         jg      0x25f <_JIT_ENTRY+0x25f>
// 23d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023f:  R_X86_64_64  .rodata.str1.1
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _Py_NegativeRefcount
// 251: be 51 0b 00 00                movl    $0xb51, %esi            # imm = 0xB51
// 256: 4c 89 ea                      movq    %r13, %rdx
// 259: ff d0                         callq   *%rax
// 25b: 49 8b 45 00                   movq    (%r13), %rax
// 25f: 85 c0                         testl   %eax, %eax
// 261: 4c 8b 74 24 18                movq    0x18(%rsp), %r14
// 266: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
// 26b: 78 21                         js      0x28e <_JIT_ENTRY+0x28e>
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 277: ff d0                         callq   *%rax
// 279: 49 ff 4d 00                   decq    (%r13)
// 27d: 75 0f                         jne     0x28e <_JIT_ENTRY+0x28e>
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_Dealloc
// 289: 4c 89 ef                      movq    %r13, %rdi
// 28c: ff d0                         callq   *%rax
// 28e: 4b 8d 04 e7                   leaq    (%r15,%r12,8), %rax
// 292: 48 8b 0c 24                   movq    (%rsp), %rcx
// 296: 48 85 c9                      testq   %rcx, %rcx
// 299: 0f 84 b6 fe ff ff             je      0x155 <_JIT_ENTRY+0x155>
// 29f: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 2a3: 48 89 08                      movq    %rcx, (%rax)
// 2a6: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 2ab: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2af: 48 8b 00                      movq    (%rax), %rax
// 2b2: 84 c0                         testb   %al, %al
// 2b4: 0f 84 dd 00 00 00             je      0x397 <_JIT_ENTRY+0x397>
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _Py_HandlePending
// 2c4: 4c 89 ff                      movq    %r15, %rdi
// 2c7: ff d0                         callq   *%rax
// 2c9: 85 c0                         testl   %eax, %eax
// 2cb: 0f 84 c6 00 00 00             je      0x397 <_JIT_ENTRY+0x397>
// 2d1: 4c 89 f0                      movq    %r14, %rax
// 2d4: e9 7c fe ff ff                jmp     0x155 <_JIT_ENTRY+0x155>
// 2d9: 49 29 df                      subq    %rbx, %r15
// 2dc: 49 83 c7 b8                   addq    $-0x48, %r15
// 2e0: 49 c1 ef 03                   shrq    $0x3, %r15
// 2e4: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2e8: 48 8b 03                      movq    (%rbx), %rax
// 2eb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002ed:  R_X86_64_64  _JIT_TARGET
// 2f5: 89 c9                         movl    %ecx, %ecx
// 2f7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2fb: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 301: 48 83 c4 28                   addq    $0x28, %rsp
// 305: 5b                            popq    %rbx
// 306: 41 5c                         popq    %r12
// 308: 41 5d                         popq    %r13
// 30a: 41 5e                         popq    %r14
// 30c: 41 5f                         popq    %r15
// 30e: 5d                            popq    %rbp
// 30f: c3                            retq
// 310: 41 83 fe 02                   cmpl    $0x2, %r14d
// 314: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 31a: 45 0f 43 ee                   cmovael %r14d, %r13d
// 31e: 45 31 e4                      xorl    %r12d, %r12d
// 321: eb 19                         jmp     0x33c <_JIT_ENTRY+0x33c>
// 323: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
// 330: 49 ff c4                      incq    %r12
// 333: 4d 39 e5                      cmpq    %r12, %r13
// 336: 0f 84 f3 fe ff ff             je      0x22f <_JIT_ENTRY+0x22f>
// 33c: 4e 8b 74 e5 00                movq    (%rbp,%r12,8), %r14
// 341: 49 8b 06                      movq    (%r14), %rax
// 344: 48 85 c0                      testq   %rax, %rax
// 347: 7e 07                         jle     0x350 <_JIT_ENTRY+0x350>
// 349: 85 c0                         testl   %eax, %eax
// 34b: 78 e3                         js      0x330 <_JIT_ENTRY+0x330>
// 34d: eb 26                         jmp     0x375 <_JIT_ENTRY+0x375>
// 34f: 90                            nop
// 350: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000352:  R_X86_64_64  .rodata.str1.1
// 35a: be 4f 0b 00 00                movl    $0xb4f, %esi            # imm = 0xB4F
// 35f: 4c 89 f2                      movq    %r14, %rdx
// 362: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000364:  R_X86_64_64  _Py_NegativeRefcount
// 36c: ff d0                         callq   *%rax
// 36e: 49 8b 06                      movq    (%r14), %rax
// 371: 85 c0                         testl   %eax, %eax
// 373: 78 bb                         js      0x330 <_JIT_ENTRY+0x330>
// 375: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000377:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 37f: ff d0                         callq   *%rax
// 381: 49 ff 0e                      decq    (%r14)
// 384: 75 aa                         jne     0x330 <_JIT_ENTRY+0x330>
// 386: 4c 89 f7                      movq    %r14, %rdi
// 389: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038b:  R_X86_64_64  _Py_Dealloc
// 393: ff d0                         callq   *%rax
// 395: eb 99                         jmp     0x330 <_JIT_ENTRY+0x330>
// 397: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000399:  R_X86_64_64  _JIT_CONTINUE
// 3a1: 48 89 df                      movq    %rbx, %rdi
// 3a4: 4c 89 f6                      movq    %r14, %rsi
// 3a7: 4c 89 fa                      movq    %r15, %rdx
// 3aa: 48 83 c4 28                   addq    $0x28, %rsp
// 3ae: 5b                            popq    %rbx
// 3af: 41 5c                         popq    %r12
// 3b1: 41 5d                         popq    %r13
// 3b3: 41 5e                         popq    %r14
// 3b5: 41 5f                         popq    %r15
// 3b7: 5d                            popq    %rbp
// 3b8: ff e0                         jmpq    *%rax
// 3ba: 
static const unsigned char _STORE_SUBSCRplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_body[955] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x20, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x24, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x33, 0x49, 0x83, 0xc7, 0xe8, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0x97, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xcd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x48, 0x63, 0xf8, 0x49, 0x8b, 0x04, 0xff, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd6, 0x4c, 0x63, 0xce, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x72, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xf2, 0x4b, 0x8b, 0x34, 0xcf, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x56, 0x08, 0x0f, 0x85, 0x03, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x46, 0x10, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xf1, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x49, 0x8d, 0x2c, 0xcf, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc4, 0x48, 0x89, 0x74, 0x24, 0x08, 0x48, 0x8b, 0x7e, 0x18, 0x44, 0x89, 0xf2, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc4, 0x0f, 0x84, 0xe1, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x51, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x18, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe7, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb6, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xf7, 0x48, 0x89, 0x08, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xdd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0xc6, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0xe9, 0x7c, 0xfe, 0xff, 0xff, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfe, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xee, 0x45, 0x31, 0xe4, 0xeb, 0x19, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe5, 0x0f, 0x84, 0xf3, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x74, 0xe5, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4f, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xaa, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_holes[28] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x352, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x364, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x377, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x38b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x399, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_holes[1];

// _STORE_SUBSCRplus_CALL_BUILTIN_O
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CALL_BUILTIN_O.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 f2                      movq    %r14, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 06                      movq    (%r14), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 f2                      movq    %r14, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 06                      movq    (%r14), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0e                      decq    (%r14)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 f7                      movq    %r14, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 16                         je      0xf5 <_JIT_ENTRY+0xf5>
// df: 4d 89 fd                      movq    %r15, %r13
// e2: 49 8b 04 24                   movq    (%r12), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7e 25                         jle     0x110 <_JIT_ENTRY+0x110>
// eb: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// ef: 85 c0                         testl   %eax, %eax
// f1: 79 47                         jns     0x13a <_JIT_ENTRY+0x13a>
// f3: eb 57                         jmp     0x14c <_JIT_ENTRY+0x14c>
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: 4c 89 ef                      movq    %r13, %rdi
// 102: ff d0                         callq   *%rax
// 104: 4d 89 fd                      movq    %r15, %r13
// 107: 49 8b 04 24                   movq    (%r12), %rax
// 10b: 48 85 c0                      testq   %rax, %rax
// 10e: 7f db                         jg      0xeb <_JIT_ENTRY+0xeb>
// 110: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000112:  R_X86_64_64  .rodata.str1.1
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  _Py_NegativeRefcount
// 124: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 129: 4c 89 e2                      movq    %r12, %rdx
// 12c: ff d0                         callq   *%rax
// 12e: 49 8b 04 24                   movq    (%r12), %rax
// 132: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 136: 85 c0                         testl   %eax, %eax
// 138: 78 12                         js      0x14c <_JIT_ENTRY+0x14c>
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 144: ff d0                         callq   *%rax
// 146: 49 ff 0c 24                   decq    (%r12)
// 14a: 74 2a                         je      0x176 <_JIT_ENTRY+0x176>
// 14c: 85 ed                         testl   %ebp, %ebp
// 14e: 49 0f 44 df                   cmoveq  %r15, %rbx
// 152: 74 39                         je      0x18d <_JIT_ENTRY+0x18d>
// 154: 48 83 c3 e8                   addq    $-0x18, %rbx
// 158: 49 89 df                      movq    %rbx, %r15
// 15b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 160: 49 29 c7                      subq    %rax, %r15
// 163: 49 83 c7 b8                   addq    $-0x48, %r15
// 167: 49 c1 ef 03                   shrq    $0x3, %r15
// 16b: 44 89 78 40                   movl    %r15d, 0x40(%rax)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: e9 dc 00 00 00                jmp     0x252 <_JIT_ENTRY+0x252>
// 176: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000178:  R_X86_64_64  _Py_Dealloc
// 180: 4c 89 e7                      movq    %r12, %rdi
// 183: ff d0                         callq   *%rax
// 185: 85 ed                         testl   %ebp, %ebp
// 187: 49 0f 44 df                   cmoveq  %r15, %rbx
// 18b: 75 c7                         jne     0x154 <_JIT_ENTRY+0x154>
// 18d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018f:  R_X86_64_64  _JIT_OPARG
// 197: 0f b7 c1                      movzwl  %cx, %eax
// 19a: 89 c2                         movl    %eax, %edx
// 19c: f7 d2                         notl    %edx
// 19e: 4c 63 f2                      movslq  %edx, %r14
// 1a1: 0f b7 e9                      movzwl  %cx, %ebp
// 1a4: 48 89 e9                      movq    %rbp, %rcx
// 1a7: 48 f7 d9                      negq    %rcx
// 1aa: 31 d2                         xorl    %edx, %edx
// 1ac: 66 85 ed                      testw   %bp, %bp
// 1af: 0f 94 c2                      sete    %dl
// 1b2: 31 f6                         xorl    %esi, %esi
// 1b4: 66 83 fd 01                   cmpw    $0x1, %bp
// 1b8: 40 0f 94 c6                   sete    %sil
// 1bc: 4a 83 3c f3 00                cmpq    $0x0, (%rbx,%r14,8)
// 1c1: 48 f7 d5                      notq    %rbp
// 1c4: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 1c8: 0f 44 d6                      cmovel  %esi, %edx
// 1cb: 80 fa 01                      cmpb    $0x1, %dl
// 1ce: 75 56                         jne     0x226 <_JIT_ENTRY+0x226>
// 1d0: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1d5: 29 c1                         subl    %eax, %ecx
// 1d7: 48 63 c9                      movslq  %ecx, %rcx
// 1da: 4c 8b 24 cb                   movq    (%rbx,%rcx,8), %r12
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  PyCFunction_Type
// 1e8: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1ed: 75 37                         jne     0x226 <_JIT_ENTRY+0x226>
// 1ef: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 1f4: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 1f8: 75 2c                         jne     0x226 <_JIT_ENTRY+0x226>
// 1fa: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 1ff: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 203: 4c 89 ee                      movq    %r13, %rsi
// 206: 41 8b 4d 2c                   movl    0x2c(%r13), %ecx
// 20a: 8d 51 ff                      leal    -0x1(%rcx), %edx
// 20d: 41 89 55 2c                   movl    %edx, 0x2c(%r13)
// 211: 85 c9                         testl   %ecx, %ecx
// 213: 7e 4c                         jle     0x261 <_JIT_ENTRY+0x261>
// 215: 48 8b 2c eb                   movq    (%rbx,%rbp,8), %rbp
// 219: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 21d: 75 7a                         jne     0x299 <_JIT_ENTRY+0x299>
// 21f: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// 224: eb 75                         jmp     0x29b <_JIT_ENTRY+0x29b>
// 226: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 22b: 48 29 c3                      subq    %rax, %rbx
// 22e: 48 83 c3 b8                   addq    $-0x48, %rbx
// 232: 48 c1 eb 03                   shrq    $0x3, %rbx
// 236: 89 58 40                      movl    %ebx, 0x40(%rax)
// 239: 48 8b 00                      movq    (%rax), %rax
// 23c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023e:  R_X86_64_64  _JIT_TARGET
// 246: 89 c9                         movl    %ecx, %ecx
// 248: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 24c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 252: 48 83 c4 18                   addq    $0x18, %rsp
// 256: 5b                            popq    %rbx
// 257: 41 5c                         popq    %r12
// 259: 41 5d                         popq    %r13
// 25b: 41 5e                         popq    %r14
// 25d: 41 5f                         popq    %r15
// 25f: 5d                            popq    %rbp
// 260: c3                            retq
// 261: 4c 89 04 24                   movq    %r8, (%rsp)
// 265: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000267:  R_X86_64_64  .rodata.str1.1+0x39
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _Py_CheckRecursiveCall
// 279: 4c 89 ef                      movq    %r13, %rdi
// 27c: ff d0                         callq   *%rax
// 27e: 85 c0                         testl   %eax, %eax
// 280: 0f 85 d5 fe ff ff             jne     0x15b <_JIT_ENTRY+0x15b>
// 286: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 28b: 4c 8b 04 24                   movq    (%rsp), %r8
// 28f: 48 8b 2c eb                   movq    (%rbx,%rbp,8), %rbp
// 293: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 297: 74 86                         je      0x21f <_JIT_ENTRY+0x21f>
// 299: 31 ff                         xorl    %edi, %edi
// 29b: 4d 89 ef                      movq    %r13, %r15
// 29e: 48 89 ee                      movq    %rbp, %rsi
// 2a1: 41 ff d0                      callq   *%r8
// 2a4: 41 ff 45 2c                   incl    0x2c(%r13)
// 2a8: 48 89 04 24                   movq    %rax, (%rsp)
// 2ac: 48 8b 45 00                   movq    (%rbp), %rax
// 2b0: 48 85 c0                      testq   %rax, %rax
// 2b3: 7f 22                         jg      0x2d7 <_JIT_ENTRY+0x2d7>
// 2b5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b7:  R_X86_64_64  .rodata.str1.1
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _Py_NegativeRefcount
// 2c9: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 2ce: 48 89 ea                      movq    %rbp, %rdx
// 2d1: ff d0                         callq   *%rax
// 2d3: 48 8b 45 00                   movq    (%rbp), %rax
// 2d7: 85 c0                         testl   %eax, %eax
// 2d9: 78 21                         js      0x2fc <_JIT_ENTRY+0x2fc>
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e5: ff d0                         callq   *%rax
// 2e7: 48 ff 4d 00                   decq    (%rbp)
// 2eb: 75 0f                         jne     0x2fc <_JIT_ENTRY+0x2fc>
// 2ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ef:  R_X86_64_64  _Py_Dealloc
// 2f7: 48 89 ef                      movq    %rbp, %rdi
// 2fa: ff d0                         callq   *%rax
// 2fc: 49 8b 04 24                   movq    (%r12), %rax
// 300: 48 85 c0                      testq   %rax, %rax
// 303: 7f 22                         jg      0x327 <_JIT_ENTRY+0x327>
// 305: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000307:  R_X86_64_64  .rodata.str1.1
// 30f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000311:  R_X86_64_64  _Py_NegativeRefcount
// 319: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 31e: 4c 89 e2                      movq    %r12, %rdx
// 321: ff d0                         callq   *%rax
// 323: 49 8b 04 24                   movq    (%r12), %rax
// 327: 85 c0                         testl   %eax, %eax
// 329: 78 21                         js      0x34c <_JIT_ENTRY+0x34c>
// 32b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 335: ff d0                         callq   *%rax
// 337: 49 ff 0c 24                   decq    (%r12)
// 33b: 75 0f                         jne     0x34c <_JIT_ENTRY+0x34c>
// 33d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033f:  R_X86_64_64  _Py_Dealloc
// 347: 4c 89 e7                      movq    %r12, %rdi
// 34a: ff d0                         callq   *%rax
// 34c: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 351: 4c 8d 3c c3                   leaq    (%rbx,%rax,8), %r15
// 355: 48 8b 04 24                   movq    (%rsp), %rax
// 359: 48 85 c0                      testq   %rax, %rax
// 35c: 0f 84 f9 fd ff ff             je      0x15b <_JIT_ENTRY+0x15b>
// 362: 4e 8d 34 f3                   leaq    (%rbx,%r14,8), %r14
// 366: 49 89 07                      movq    %rax, (%r15)
// 369: 49 8b 45 10                   movq    0x10(%r13), %rax
// 36d: 48 8b 00                      movq    (%rax), %rax
// 370: 84 c0                         testb   %al, %al
// 372: 74 1b                         je      0x38f <_JIT_ENTRY+0x38f>
// 374: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000376:  R_X86_64_64  _Py_HandlePending
// 37e: 4c 89 ef                      movq    %r13, %rdi
// 381: ff d0                         callq   *%rax
// 383: 85 c0                         testl   %eax, %eax
// 385: 74 08                         je      0x38f <_JIT_ENTRY+0x38f>
// 387: 4d 89 f7                      movq    %r14, %r15
// 38a: e9 cc fd ff ff                jmp     0x15b <_JIT_ENTRY+0x15b>
// 38f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000391:  R_X86_64_64  _JIT_CONTINUE
// 399: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 39e: 4c 89 f6                      movq    %r14, %rsi
// 3a1: 4c 89 ea                      movq    %r13, %rdx
// 3a4: 48 83 c4 18                   addq    $0x18, %rsp
// 3a8: 5b                            popq    %rbx
// 3a9: 41 5c                         popq    %r12
// 3ab: 41 5d                         popq    %r13
// 3ad: 41 5e                         popq    %r14
// 3af: 41 5f                         popq    %r15
// 3b1: 5d                            popq    %rbp
// 3b2: ff e0                         jmpq    *%rax
// 3b4: 
static const unsigned char _STORE_SUBSCRplus_CALL_BUILTIN_O_code_body[949] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x16, 0x4d, 0x89, 0xfd, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x25, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x47, 0xeb, 0x57, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xdb, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2a, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x39, 0x48, 0x83, 0xc3, 0xe8, 0x49, 0x89, 0xdf, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x78, 0x40, 0x31, 0xc0, 0xe9, 0xdc, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc7, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xf2, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x31, 0xd2, 0x66, 0x85, 0xed, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xfd, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x4a, 0x83, 0x3c, 0xf3, 0x00, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x0f, 0x44, 0xd6, 0x80, 0xfa, 0x01, 0x75, 0x56, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x4c, 0x8b, 0x24, 0xcb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x37, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2c, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x8b, 0x40, 0x08, 0x4c, 0x89, 0xee, 0x41, 0x8b, 0x4d, 0x2c, 0x8d, 0x51, 0xff, 0x41, 0x89, 0x55, 0x2c, 0x85, 0xc9, 0x7e, 0x4c, 0x48, 0x8b, 0x2c, 0xeb, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7a, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x75, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x58, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x04, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xd5, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x2c, 0xeb, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x86, 0x31, 0xff, 0x4d, 0x89, 0xef, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x41, 0xff, 0x45, 0x2c, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8d, 0x3c, 0xc3, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xf9, 0xfd, 0xff, 0xff, 0x4e, 0x8d, 0x34, 0xf3, 0x49, 0x89, 0x07, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4d, 0x89, 0xf7, 0xe9, 0xcc, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_CALL_BUILTIN_O_code_holes[29] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x178, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x307, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x311, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x32d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x33f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x376, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x391, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _STORE_SUBSCRplus_CALL_BUILTIN_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _STORE_SUBSCRplus_CALL_BUILTIN_O_data_holes[1];

// _STORE_SUBSCRplus_CALL_INTRINSIC_1
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CALL_INTRINSIC_1.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c6 f0                   addq    $-0x10, %r14
// 14e: 4d 89 f7                      movq    %r14, %r15
// 151: 49 29 df                      subq    %rbx, %r15
// 154: 49 83 c7 b0                   addq    $-0x50, %r15
// 158: 49 c1 ef 03                   shrq    $0x3, %r15
// 15c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c8                      movzwl  %ax, %ecx
// 199: 48 c1 e1 04                   shlq    $0x4, %rcx
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _PyIntrinsics_UnaryFunctions
// 1a7: 48 8b 2c 24                   movq    (%rsp), %rbp
// 1ab: 48 89 ef                      movq    %rbp, %rdi
// 1ae: 4c 89 e6                      movq    %r12, %rsi
// 1b1: ff 14 01                      callq   *(%rcx,%rax)
// 1b4: 49 89 c5                      movq    %rax, %r13
// 1b7: 49 8b 04 24                   movq    (%r12), %rax
// 1bb: 48 85 c0                      testq   %rax, %rax
// 1be: 7e 06                         jle     0x1c6 <_JIT_ENTRY+0x1c6>
// 1c0: 85 c0                         testl   %eax, %eax
// 1c2: 79 28                         jns     0x1ec <_JIT_ENTRY+0x1ec>
// 1c4: eb 47                         jmp     0x20d <_JIT_ENTRY+0x20d>
// 1c6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c8:  R_X86_64_64  .rodata.str1.1
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _Py_NegativeRefcount
// 1da: be 7e 02 00 00                movl    $0x27e, %esi            # imm = 0x27E
// 1df: 4c 89 e2                      movq    %r12, %rdx
// 1e2: ff d0                         callq   *%rax
// 1e4: 49 8b 04 24                   movq    (%r12), %rax
// 1e8: 85 c0                         testl   %eax, %eax
// 1ea: 78 21                         js      0x20d <_JIT_ENTRY+0x20d>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f6: ff d0                         callq   *%rax
// 1f8: 49 ff 0c 24                   decq    (%r12)
// 1fc: 75 0f                         jne     0x20d <_JIT_ENTRY+0x20d>
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _Py_Dealloc
// 208: 4c 89 e7                      movq    %r12, %rdi
// 20b: ff d0                         callq   *%rax
// 20d: 4d 85 ed                      testq   %r13, %r13
// 210: 0f 84 3b ff ff ff             je      0x151 <_JIT_ENTRY+0x151>
// 216: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _JIT_CONTINUE
// 224: 48 89 df                      movq    %rbx, %rdi
// 227: 4c 89 f6                      movq    %r14, %rsi
// 22a: 48 89 ea                      movq    %rbp, %rdx
// 22d: 48 83 c4 08                   addq    $0x8, %rsp
// 231: 5b                            popq    %rbx
// 232: 41 5c                         popq    %r12
// 234: 41 5d                         popq    %r13
// 236: 41 5e                         popq    %r14
// 238: 41 5f                         popq    %r15
// 23a: 5d                            popq    %rbp
// 23b: ff e0                         jmpq    *%rax
// 23d: 
static const unsigned char _STORE_SUBSCRplus_CALL_INTRINSIC_1_code_body[574] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x3e, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb0, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xc2, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x2c, 0x24, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0x14, 0x01, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x3b, 0xff, 0xff, 0xff, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_CALL_INTRINSIC_1_code_holes[21] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_UnaryFunctions, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CALL_INTRINSIC_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CALL_INTRINSIC_1_data_holes[1];

// _STORE_SUBSCRplus_CALL_INTRINSIC_2
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CALL_INTRINSIC_2.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 1b: 48 8b 5e f8                   movq    -0x8(%rsi), %rbx
// 1f: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 23: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  PyObject_SetItem
// 31: 4c 89 ef                      movq    %r13, %rdi
// 34: 48 89 de                      movq    %rbx, %rsi
// 37: 4c 89 f2                      movq    %r14, %rdx
// 3a: ff d0                         callq   *%rax
// 3c: 89 c5                         movl    %eax, %ebp
// 3e: 49 8b 06                      movq    (%r14), %rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 7e 06                         jle     0x4c <_JIT_ENTRY+0x4c>
// 46: 85 c0                         testl   %eax, %eax
// 48: 79 27                         jns     0x71 <_JIT_ENTRY+0x71>
// 4a: eb 36                         jmp     0x82 <_JIT_ENTRY+0x82>
// 4c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004e:  R_X86_64_64  .rodata.str1.1
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _Py_NegativeRefcount
// 60: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 65: 4c 89 f2                      movq    %r14, %rdx
// 68: ff d0                         callq   *%rax
// 6a: 49 8b 06                      movq    (%r14), %rax
// 6d: 85 c0                         testl   %eax, %eax
// 6f: 78 11                         js      0x82 <_JIT_ENTRY+0x82>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 7b: ff d0                         callq   *%rax
// 7d: 49 ff 0e                      decq    (%r14)
// 80: 74 0f                         je      0x91 <_JIT_ENTRY+0x91>
// 82: 49 8b 45 00                   movq    (%r13), %rax
// 86: 48 85 c0                      testq   %rax, %rax
// 89: 7e 1e                         jle     0xa9 <_JIT_ENTRY+0xa9>
// 8b: 85 c0                         testl   %eax, %eax
// 8d: 79 40                         jns     0xcf <_JIT_ENTRY+0xcf>
// 8f: eb 50                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_Dealloc
// 9b: 4c 89 f7                      movq    %r14, %rdi
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 45 00                   movq    (%r13), %rax
// a4: 48 85 c0                      testq   %rax, %rax
// a7: 7f e2                         jg      0x8b <_JIT_ENTRY+0x8b>
// a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ab:  R_X86_64_64  .rodata.str1.1
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_NegativeRefcount
// bd: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c2: 4c 89 ea                      movq    %r13, %rdx
// c5: ff d0                         callq   *%rax
// c7: 49 8b 45 00                   movq    (%r13), %rax
// cb: 85 c0                         testl   %eax, %eax
// cd: 78 12                         js      0xe1 <_JIT_ENTRY+0xe1>
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d9: ff d0                         callq   *%rax
// db: 49 ff 4d 00                   decq    (%r13)
// df: 74 12                         je      0xf3 <_JIT_ENTRY+0xf3>
// e1: 48 8b 03                      movq    (%rbx), %rax
// e4: 48 85 c0                      testq   %rax, %rax
// e7: 7e 21                         jle     0x10a <_JIT_ENTRY+0x10a>
// e9: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// ed: 85 c0                         testl   %eax, %eax
// ef: 79 42                         jns     0x133 <_JIT_ENTRY+0x133>
// f1: eb 60                         jmp     0x153 <_JIT_ENTRY+0x153>
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: 4c 89 ef                      movq    %r13, %rdi
// 100: ff d0                         callq   *%rax
// 102: 48 8b 03                      movq    (%rbx), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f df                         jg      0xe9 <_JIT_ENTRY+0xe9>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 48 89 da                      movq    %rbx, %rdx
// 126: ff d0                         callq   *%rax
// 128: 48 8b 03                      movq    (%rbx), %rax
// 12b: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// 12f: 85 c0                         testl   %eax, %eax
// 131: 78 20                         js      0x153 <_JIT_ENTRY+0x153>
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13d: ff d0                         callq   *%rax
// 13f: 48 ff 0b                      decq    (%rbx)
// 142: 75 0f                         jne     0x153 <_JIT_ENTRY+0x153>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_Dealloc
// 14e: 48 89 df                      movq    %rbx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 ed                         testl   %ebp, %ebp
// 155: 4d 0f 44 fc                   cmoveq  %r12, %r15
// 159: 49 8d 5f f8                   leaq    -0x8(%r15), %rbx
// 15d: 85 ed                         testl   %ebp, %ebp
// 15f: 74 28                         je      0x189 <_JIT_ENTRY+0x189>
// 161: 49 89 dc                      movq    %rbx, %r12
// 164: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 169: 49 29 c4                      subq    %rax, %r12
// 16c: 49 83 c4 a8                   addq    $-0x58, %r12
// 170: 49 c1 ec 03                   shrq    $0x3, %r12
// 174: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 178: 31 c0                         xorl    %eax, %eax
// 17a: 48 83 c4 18                   addq    $0x18, %rsp
// 17e: 5b                            popq    %rbx
// 17f: 41 5c                         popq    %r12
// 181: 41 5d                         popq    %r13
// 183: 41 5e                         popq    %r14
// 185: 41 5f                         popq    %r15
// 187: 5d                            popq    %rbp
// 188: c3                            retq
// 189: 4d 8b 77 f0                   movq    -0x10(%r15), %r14
// 18d: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c8                      movzwl  %ax, %ecx
// 19e: 48 c1 e1 04                   shlq    $0x4, %rcx
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _PyIntrinsics_BinaryFunctions
// 1ac: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1b1: 4c 89 f6                      movq    %r14, %rsi
// 1b4: 4c 89 ea                      movq    %r13, %rdx
// 1b7: ff 14 01                      callq   *(%rcx,%rax)
// 1ba: 48 89 c5                      movq    %rax, %rbp
// 1bd: 49 8b 06                      movq    (%r14), %rax
// 1c0: 48 85 c0                      testq   %rax, %rax
// 1c3: 7e 06                         jle     0x1cb <_JIT_ENTRY+0x1cb>
// 1c5: 85 c0                         testl   %eax, %eax
// 1c7: 79 27                         jns     0x1f0 <_JIT_ENTRY+0x1f0>
// 1c9: eb 36                         jmp     0x201 <_JIT_ENTRY+0x201>
// 1cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001cd:  R_X86_64_64  .rodata.str1.1
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_NegativeRefcount
// 1df: be 8d 02 00 00                movl    $0x28d, %esi            # imm = 0x28D
// 1e4: 4c 89 f2                      movq    %r14, %rdx
// 1e7: ff d0                         callq   *%rax
// 1e9: 49 8b 06                      movq    (%r14), %rax
// 1ec: 85 c0                         testl   %eax, %eax
// 1ee: 78 11                         js      0x201 <_JIT_ENTRY+0x201>
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fa: ff d0                         callq   *%rax
// 1fc: 49 ff 0e                      decq    (%r14)
// 1ff: 74 0f                         je      0x210 <_JIT_ENTRY+0x210>
// 201: 49 8b 45 00                   movq    (%r13), %rax
// 205: 48 85 c0                      testq   %rax, %rax
// 208: 7e 1e                         jle     0x228 <_JIT_ENTRY+0x228>
// 20a: 85 c0                         testl   %eax, %eax
// 20c: 79 40                         jns     0x24e <_JIT_ENTRY+0x24e>
// 20e: eb 5f                         jmp     0x26f <_JIT_ENTRY+0x26f>
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _Py_Dealloc
// 21a: 4c 89 f7                      movq    %r14, %rdi
// 21d: ff d0                         callq   *%rax
// 21f: 49 8b 45 00                   movq    (%r13), %rax
// 223: 48 85 c0                      testq   %rax, %rax
// 226: 7f e2                         jg      0x20a <_JIT_ENTRY+0x20a>
// 228: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000022a:  R_X86_64_64  .rodata.str1.1
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_NegativeRefcount
// 23c: be 8e 02 00 00                movl    $0x28e, %esi            # imm = 0x28E
// 241: 4c 89 ea                      movq    %r13, %rdx
// 244: ff d0                         callq   *%rax
// 246: 49 8b 45 00                   movq    (%r13), %rax
// 24a: 85 c0                         testl   %eax, %eax
// 24c: 78 21                         js      0x26f <_JIT_ENTRY+0x26f>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 258: ff d0                         callq   *%rax
// 25a: 49 ff 4d 00                   decq    (%r13)
// 25e: 75 0f                         jne     0x26f <_JIT_ENTRY+0x26f>
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _Py_Dealloc
// 26a: 4c 89 ef                      movq    %r13, %rdi
// 26d: ff d0                         callq   *%rax
// 26f: 48 85 ed                      testq   %rbp, %rbp
// 272: 0f 84 ec fe ff ff             je      0x164 <_JIT_ENTRY+0x164>
// 278: 49 89 6f f0                   movq    %rbp, -0x10(%r15)
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _JIT_CONTINUE
// 286: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 28b: 48 89 de                      movq    %rbx, %rsi
// 28e: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 293: 48 83 c4 18                   addq    $0x18, %rsp
// 297: 5b                            popq    %rbx
// 298: 41 5c                         popq    %r12
// 29a: 41 5d                         popq    %r13
// 29c: 41 5e                         popq    %r14
// 29e: 41 5f                         popq    %r15
// 2a0: 5d                            popq    %rbp
// 2a1: ff e0                         jmpq    *%rax
// 2a3: 
static const unsigned char _STORE_SUBSCRplus_CALL_INTRINSIC_2_code_body[676] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x5e, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x12, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x21, 0x4d, 0x8d, 0x67, 0xe8, 0x85, 0xc0, 0x79, 0x42, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xdf, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x4d, 0x8d, 0x67, 0xe8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfc, 0x49, 0x8d, 0x5f, 0xf8, 0x85, 0xed, 0x74, 0x28, 0x49, 0x89, 0xdc, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xa8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x77, 0xf0, 0x4d, 0x8b, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xc1, 0xe1, 0x04, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xea, 0xff, 0x14, 0x01, 0x48, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8d, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x0f, 0x84, 0xec, 0xfe, 0xff, 0xff, 0x49, 0x89, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_CALL_INTRINSIC_2_code_holes[25] = {
    {0x29, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_BinaryFunctions, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CALL_INTRINSIC_2_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CALL_INTRINSIC_2_data_holes[1];

// _STORE_SUBSCRplus_CALL_ISINSTANCE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CALL_ISINSTANCE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 48 89 f3                      movq    %rsi, %rbx
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 23: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  PyObject_SetItem
// 31: 4c 89 ef                      movq    %r13, %rdi
// 34: 4c 89 e6                      movq    %r12, %rsi
// 37: 4c 89 fa                      movq    %r15, %rdx
// 3a: ff d0                         callq   *%rax
// 3c: 89 c5                         movl    %eax, %ebp
// 3e: 49 8b 07                      movq    (%r15), %rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 7e 06                         jle     0x4c <_JIT_ENTRY+0x4c>
// 46: 85 c0                         testl   %eax, %eax
// 48: 79 27                         jns     0x71 <_JIT_ENTRY+0x71>
// 4a: eb 36                         jmp     0x82 <_JIT_ENTRY+0x82>
// 4c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004e:  R_X86_64_64  .rodata.str1.1
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _Py_NegativeRefcount
// 60: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 65: 4c 89 fa                      movq    %r15, %rdx
// 68: ff d0                         callq   *%rax
// 6a: 49 8b 07                      movq    (%r15), %rax
// 6d: 85 c0                         testl   %eax, %eax
// 6f: 78 11                         js      0x82 <_JIT_ENTRY+0x82>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 7b: ff d0                         callq   *%rax
// 7d: 49 ff 0f                      decq    (%r15)
// 80: 74 0f                         je      0x91 <_JIT_ENTRY+0x91>
// 82: 49 8b 45 00                   movq    (%r13), %rax
// 86: 48 85 c0                      testq   %rax, %rax
// 89: 7e 1e                         jle     0xa9 <_JIT_ENTRY+0xa9>
// 8b: 85 c0                         testl   %eax, %eax
// 8d: 79 40                         jns     0xcf <_JIT_ENTRY+0xcf>
// 8f: eb 50                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_Dealloc
// 9b: 4c 89 ff                      movq    %r15, %rdi
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 45 00                   movq    (%r13), %rax
// a4: 48 85 c0                      testq   %rax, %rax
// a7: 7f e2                         jg      0x8b <_JIT_ENTRY+0x8b>
// a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ab:  R_X86_64_64  .rodata.str1.1
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_NegativeRefcount
// bd: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c2: 4c 89 ea                      movq    %r13, %rdx
// c5: ff d0                         callq   *%rax
// c7: 49 8b 45 00                   movq    (%r13), %rax
// cb: 85 c0                         testl   %eax, %eax
// cd: 78 12                         js      0xe1 <_JIT_ENTRY+0xe1>
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d9: ff d0                         callq   *%rax
// db: 49 ff 4d 00                   decq    (%r13)
// df: 74 13                         je      0xf4 <_JIT_ENTRY+0xf4>
// e1: 49 8b 04 24                   movq    (%r12), %rax
// e5: 48 85 c0                      testq   %rax, %rax
// e8: 7e 22                         jle     0x10c <_JIT_ENTRY+0x10c>
// ea: 4c 8d 73 e8                   leaq    -0x18(%rbx), %r14
// ee: 85 c0                         testl   %eax, %eax
// f0: 79 44                         jns     0x136 <_JIT_ENTRY+0x136>
// f2: eb 54                         jmp     0x148 <_JIT_ENTRY+0x148>
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_Dealloc
// fe: 4c 89 ef                      movq    %r13, %rdi
// 101: ff d0                         callq   *%rax
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f de                         jg      0xea <_JIT_ENTRY+0xea>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 4c 8d 73 e8                   leaq    -0x18(%rbx), %r14
// 132: 85 c0                         testl   %eax, %eax
// 134: 78 12                         js      0x148 <_JIT_ENTRY+0x148>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 140: ff d0                         callq   *%rax
// 142: 49 ff 0c 24                   decq    (%r12)
// 146: 74 2a                         je      0x172 <_JIT_ENTRY+0x172>
// 148: 85 ed                         testl   %ebp, %ebp
// 14a: 49 0f 44 de                   cmoveq  %r14, %rbx
// 14e: 74 39                         je      0x189 <_JIT_ENTRY+0x189>
// 150: 48 83 c3 e8                   addq    $-0x18, %rbx
// 154: 49 89 de                      movq    %rbx, %r14
// 157: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 15c: 49 29 c6                      subq    %rax, %r14
// 15f: 49 83 c6 b8                   addq    $-0x48, %r14
// 163: 49 c1 ee 03                   shrq    $0x3, %r14
// 167: 44 89 70 40                   movl    %r14d, 0x40(%rax)
// 16b: 31 c0                         xorl    %eax, %eax
// 16d: e9 a9 00 00 00                jmp     0x21b <_JIT_ENTRY+0x21b>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: 4c 89 e7                      movq    %r12, %rdi
// 17f: ff d0                         callq   *%rax
// 181: 85 ed                         testl   %ebp, %ebp
// 183: 49 0f 44 de                   cmoveq  %r14, %rbx
// 187: 75 c7                         jne     0x150 <_JIT_ENTRY+0x150>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _JIT_OPARG
// 193: 0f b7 c8                      movzwl  %ax, %ecx
// 196: 89 ca                         movl    %ecx, %edx
// 198: f7 d2                         notl    %edx
// 19a: 4c 63 fa                      movslq  %edx, %r15
// 19d: 0f b7 c0                      movzwl  %ax, %eax
// 1a0: 48 89 c2                      movq    %rax, %rdx
// 1a3: 48 f7 da                      negq    %rdx
// 1a6: 31 f6                         xorl    %esi, %esi
// 1a8: 66 83 f8 01                   cmpw    $0x1, %ax
// 1ac: 40 0f 94 c6                   sete    %sil
// 1b0: 31 ff                         xorl    %edi, %edi
// 1b2: 66 83 f8 02                   cmpw    $0x2, %ax
// 1b6: 40 0f 94 c7                   sete    %dil
// 1ba: 4a 83 3c fb 00                cmpq    $0x0, (%rbx,%r15,8)
// 1bf: 48 f7 d0                      notq    %rax
// 1c2: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1c6: 0f 44 f7                      cmovel  %edi, %esi
// 1c9: 40 80 fe 01                   cmpb    $0x1, %sil
// 1cd: 75 20                         jne     0x1ef <_JIT_ENTRY+0x1ef>
// 1cf: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1d4: 29 ca                         subl    %ecx, %edx
// 1d6: 48 63 ea                      movslq  %edx, %rbp
// 1d9: 4c 8b 24 eb                   movq    (%rbx,%rbp,8), %r12
// 1dd: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1e2: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 1e6: 4c 3b a1 b8 54 06 00          cmpq    0x654b8(%rcx), %r12
// 1ed: 74 3b                         je      0x22a <_JIT_ENTRY+0x22a>
// 1ef: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1f4: 48 29 c3                      subq    %rax, %rbx
// 1f7: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1fb: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1ff: 89 58 40                      movl    %ebx, 0x40(%rax)
// 202: 48 8b 00                      movq    (%rax), %rax
// 205: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000207:  R_X86_64_64  _JIT_TARGET
// 20f: 89 c9                         movl    %ecx, %ecx
// 211: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 215: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 21b: 48 83 c4 28                   addq    $0x28, %rsp
// 21f: 5b                            popq    %rbx
// 220: 41 5c                         popq    %r12
// 222: 41 5d                         popq    %r13
// 224: 41 5e                         popq    %r14
// 226: 41 5f                         popq    %r15
// 228: 5d                            popq    %rbp
// 229: c3                            retq
// 22a: 4c 8b 2c c3                   movq    (%rbx,%rax,8), %r13
// 22e: 48 8b 74 c3 08                movq    0x8(%rbx,%rax,8), %rsi
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  PyObject_IsInstance
// 23d: 4c 89 ef                      movq    %r13, %rdi
// 240: 48 89 74 24 20                movq    %rsi, 0x20(%rsp)
// 245: ff d0                         callq   *%rax
// 247: 85 c0                         testl   %eax, %eax
// 249: 0f 88 08 ff ff ff             js      0x157 <_JIT_ENTRY+0x157>
// 24f: 89 c7                         movl    %eax, %edi
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  PyBool_FromLong
// 25b: ff d0                         callq   *%rax
// 25d: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 262: 49 8b 45 00                   movq    (%r13), %rax
// 266: 48 85 c0                      testq   %rax, %rax
// 269: 7f 22                         jg      0x28d <_JIT_ENTRY+0x28d>
// 26b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026d:  R_X86_64_64  .rodata.str1.1
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _Py_NegativeRefcount
// 27f: be 96 0b 00 00                movl    $0xb96, %esi            # imm = 0xB96
// 284: 4c 89 ea                      movq    %r13, %rdx
// 287: ff d0                         callq   *%rax
// 289: 49 8b 45 00                   movq    (%r13), %rax
// 28d: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000028f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 297: 85 c0                         testl   %eax, %eax
// 299: 78 18                         js      0x2b3 <_JIT_ENTRY+0x2b3>
// 29b: 41 ff d6                      callq   *%r14
// 29e: 49 ff 4d 00                   decq    (%r13)
// 2a2: 75 0f                         jne     0x2b3 <_JIT_ENTRY+0x2b3>
// 2a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a6:  R_X86_64_64  _Py_Dealloc
// 2ae: 4c 89 ef                      movq    %r13, %rdi
// 2b1: ff d0                         callq   *%rax
// 2b3: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
// 2b8: 49 8b 45 00                   movq    (%r13), %rax
// 2bc: 48 85 c0                      testq   %rax, %rax
// 2bf: 7f 22                         jg      0x2e3 <_JIT_ENTRY+0x2e3>
// 2c1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c3:  R_X86_64_64  .rodata.str1.1
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _Py_NegativeRefcount
// 2d5: be 97 0b 00 00                movl    $0xb97, %esi            # imm = 0xB97
// 2da: 4c 89 ea                      movq    %r13, %rdx
// 2dd: ff d0                         callq   *%rax
// 2df: 49 8b 45 00                   movq    (%r13), %rax
// 2e3: 85 c0                         testl   %eax, %eax
// 2e5: 78 18                         js      0x2ff <_JIT_ENTRY+0x2ff>
// 2e7: 41 ff d6                      callq   *%r14
// 2ea: 49 ff 4d 00                   decq    (%r13)
// 2ee: 75 0f                         jne     0x2ff <_JIT_ENTRY+0x2ff>
// 2f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f2:  R_X86_64_64  _Py_Dealloc
// 2fa: 4c 89 ef                      movq    %r13, %rdi
// 2fd: ff d0                         callq   *%rax
// 2ff: 49 8b 04 24                   movq    (%r12), %rax
// 303: 48 85 c0                      testq   %rax, %rax
// 306: 7f 22                         jg      0x32a <_JIT_ENTRY+0x32a>
// 308: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000030a:  R_X86_64_64  .rodata.str1.1
// 312: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000314:  R_X86_64_64  _Py_NegativeRefcount
// 31c: be 98 0b 00 00                movl    $0xb98, %esi            # imm = 0xB98
// 321: 4c 89 e2                      movq    %r12, %rdx
// 324: ff d0                         callq   *%rax
// 326: 49 8b 04 24                   movq    (%r12), %rax
// 32a: 85 c0                         testl   %eax, %eax
// 32c: 78 18                         js      0x346 <_JIT_ENTRY+0x346>
// 32e: 41 ff d6                      callq   *%r14
// 331: 49 ff 0c 24                   decq    (%r12)
// 335: 75 0f                         jne     0x346 <_JIT_ENTRY+0x346>
// 337: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000339:  R_X86_64_64  _Py_Dealloc
// 341: 4c 89 e7                      movq    %r12, %rdi
// 344: ff d0                         callq   *%rax
// 346: 4c 8d 34 eb                   leaq    (%rbx,%rbp,8), %r14
// 34a: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 34f: 48 85 c0                      testq   %rax, %rax
// 352: 0f 84 ff fd ff ff             je      0x157 <_JIT_ENTRY+0x157>
// 358: 4a 8d 34 fb                   leaq    (%rbx,%r15,8), %rsi
// 35c: 49 89 06                      movq    %rax, (%r14)
// 35f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000361:  R_X86_64_64  _JIT_CONTINUE
// 369: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 36e: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 373: 48 83 c4 28                   addq    $0x28, %rsp
// 377: 5b                            popq    %rbx
// 378: 41 5c                         popq    %r12
// 37a: 41 5d                         popq    %r13
// 37c: 41 5e                         popq    %r14
// 37e: 41 5f                         popq    %r15
// 380: 5d                            popq    %rbp
// 381: ff e0                         jmpq    *%rax
// 383: 
static const unsigned char _STORE_SUBSCRplus_CALL_ISINSTANCE_code_body[900] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0xf3, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x73, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x73, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2a, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xde, 0x74, 0x39, 0x48, 0x83, 0xc3, 0xe8, 0x49, 0x89, 0xde, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x70, 0x40, 0x31, 0xc0, 0xe9, 0xa9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xde, 0x75, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x4c, 0x63, 0xfa, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x02, 0x40, 0x0f, 0x94, 0xc7, 0x4a, 0x83, 0x3c, 0xfb, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x20, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xea, 0x4c, 0x8b, 0x24, 0xeb, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x8b, 0x49, 0x10, 0x4c, 0x3b, 0xa1, 0xb8, 0x54, 0x06, 0x00, 0x74, 0x3b, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x58, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x8b, 0x2c, 0xc3, 0x48, 0x8b, 0x74, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0x74, 0x24, 0x20, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x08, 0xff, 0xff, 0xff, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd6, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd6, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd6, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8d, 0x34, 0xeb, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xff, 0xfd, 0xff, 0xff, 0x4a, 0x8d, 0x34, 0xfb, 0x49, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_CALL_ISINSTANCE_code_holes[29] = {
    {0x29, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsInstance, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_FromLong, 0x0},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x314, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x339, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x361, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CALL_ISINSTANCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CALL_ISINSTANCE_data_holes[1];

// _STORE_SUBSCRplus_CALL_LEN
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CALL_LEN.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 48 89 f3                      movq    %rsi, %rbx
// 16: 48 89 3c 24                   movq    %rdi, (%rsp)
// 1a: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1e: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 22: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 26: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000028:  R_X86_64_64  PyObject_SetItem
// 30: 4c 89 ef                      movq    %r13, %rdi
// 33: 4c 89 e6                      movq    %r12, %rsi
// 36: 4c 89 fa                      movq    %r15, %rdx
// 39: ff d0                         callq   *%rax
// 3b: 89 c5                         movl    %eax, %ebp
// 3d: 49 8b 07                      movq    (%r15), %rax
// 40: 48 85 c0                      testq   %rax, %rax
// 43: 7e 06                         jle     0x4b <_JIT_ENTRY+0x4b>
// 45: 85 c0                         testl   %eax, %eax
// 47: 79 27                         jns     0x70 <_JIT_ENTRY+0x70>
// 49: eb 36                         jmp     0x81 <_JIT_ENTRY+0x81>
// 4b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004d:  R_X86_64_64  .rodata.str1.1
// 55: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000057:  R_X86_64_64  _Py_NegativeRefcount
// 5f: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 64: 4c 89 fa                      movq    %r15, %rdx
// 67: ff d0                         callq   *%rax
// 69: 49 8b 07                      movq    (%r15), %rax
// 6c: 85 c0                         testl   %eax, %eax
// 6e: 78 11                         js      0x81 <_JIT_ENTRY+0x81>
// 70: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000072:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 7a: ff d0                         callq   *%rax
// 7c: 49 ff 0f                      decq    (%r15)
// 7f: 74 0f                         je      0x90 <_JIT_ENTRY+0x90>
// 81: 49 8b 45 00                   movq    (%r13), %rax
// 85: 48 85 c0                      testq   %rax, %rax
// 88: 7e 1e                         jle     0xa8 <_JIT_ENTRY+0xa8>
// 8a: 85 c0                         testl   %eax, %eax
// 8c: 79 40                         jns     0xce <_JIT_ENTRY+0xce>
// 8e: eb 50                         jmp     0xe0 <_JIT_ENTRY+0xe0>
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_Dealloc
// 9a: 4c 89 ff                      movq    %r15, %rdi
// 9d: ff d0                         callq   *%rax
// 9f: 49 8b 45 00                   movq    (%r13), %rax
// a3: 48 85 c0                      testq   %rax, %rax
// a6: 7f e2                         jg      0x8a <_JIT_ENTRY+0x8a>
// a8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000aa:  R_X86_64_64  .rodata.str1.1
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  _Py_NegativeRefcount
// bc: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c1: 4c 89 ea                      movq    %r13, %rdx
// c4: ff d0                         callq   *%rax
// c6: 49 8b 45 00                   movq    (%r13), %rax
// ca: 85 c0                         testl   %eax, %eax
// cc: 78 12                         js      0xe0 <_JIT_ENTRY+0xe0>
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d8: ff d0                         callq   *%rax
// da: 49 ff 4d 00                   decq    (%r13)
// de: 74 13                         je      0xf3 <_JIT_ENTRY+0xf3>
// e0: 49 8b 04 24                   movq    (%r12), %rax
// e4: 48 85 c0                      testq   %rax, %rax
// e7: 7e 22                         jle     0x10b <_JIT_ENTRY+0x10b>
// e9: 4c 8d 73 e8                   leaq    -0x18(%rbx), %r14
// ed: 85 c0                         testl   %eax, %eax
// ef: 79 44                         jns     0x135 <_JIT_ENTRY+0x135>
// f1: eb 54                         jmp     0x147 <_JIT_ENTRY+0x147>
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: 4c 89 ef                      movq    %r13, %rdi
// 100: ff d0                         callq   *%rax
// 102: 49 8b 04 24                   movq    (%r12), %rax
// 106: 48 85 c0                      testq   %rax, %rax
// 109: 7f de                         jg      0xe9 <_JIT_ENTRY+0xe9>
// 10b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010d:  R_X86_64_64  .rodata.str1.1
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_NegativeRefcount
// 11f: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 124: 4c 89 e2                      movq    %r12, %rdx
// 127: ff d0                         callq   *%rax
// 129: 49 8b 04 24                   movq    (%r12), %rax
// 12d: 4c 8d 73 e8                   leaq    -0x18(%rbx), %r14
// 131: 85 c0                         testl   %eax, %eax
// 133: 78 12                         js      0x147 <_JIT_ENTRY+0x147>
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13f: ff d0                         callq   *%rax
// 141: 49 ff 0c 24                   decq    (%r12)
// 145: 74 29                         je      0x170 <_JIT_ENTRY+0x170>
// 147: 85 ed                         testl   %ebp, %ebp
// 149: 49 0f 44 de                   cmoveq  %r14, %rbx
// 14d: 74 38                         je      0x187 <_JIT_ENTRY+0x187>
// 14f: 48 83 c3 e8                   addq    $-0x18, %rbx
// 153: 49 89 de                      movq    %rbx, %r14
// 156: 48 8b 04 24                   movq    (%rsp), %rax
// 15a: 49 29 c6                      subq    %rax, %r14
// 15d: 49 83 c6 b8                   addq    $-0x48, %r14
// 161: 49 c1 ee 03                   shrq    $0x3, %r14
// 165: 44 89 70 40                   movl    %r14d, 0x40(%rax)
// 169: 31 c0                         xorl    %eax, %eax
// 16b: e9 a7 00 00 00                jmp     0x217 <_JIT_ENTRY+0x217>
// 170: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000172:  R_X86_64_64  _Py_Dealloc
// 17a: 4c 89 e7                      movq    %r12, %rdi
// 17d: ff d0                         callq   *%rax
// 17f: 85 ed                         testl   %ebp, %ebp
// 181: 49 0f 44 de                   cmoveq  %r14, %rbx
// 185: 75 c8                         jne     0x14f <_JIT_ENTRY+0x14f>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c8                      movzwl  %ax, %ecx
// 194: 89 ca                         movl    %ecx, %edx
// 196: f7 d2                         notl    %edx
// 198: 4c 63 fa                      movslq  %edx, %r15
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: 48 89 c2                      movq    %rax, %rdx
// 1a1: 48 f7 da                      negq    %rdx
// 1a4: 31 f6                         xorl    %esi, %esi
// 1a6: 66 85 c0                      testw   %ax, %ax
// 1a9: 40 0f 94 c6                   sete    %sil
// 1ad: 31 ff                         xorl    %edi, %edi
// 1af: 66 83 f8 01                   cmpw    $0x1, %ax
// 1b3: 40 0f 94 c7                   sete    %dil
// 1b7: 4a 83 3c fb 00                cmpq    $0x0, (%rbx,%r15,8)
// 1bc: 48 f7 d0                      notq    %rax
// 1bf: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1c3: 0f 44 f7                      cmovel  %edi, %esi
// 1c6: 40 80 fe 01                   cmpb    $0x1, %sil
// 1ca: 75 20                         jne     0x1ec <_JIT_ENTRY+0x1ec>
// 1cc: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1d1: 29 ca                         subl    %ecx, %edx
// 1d3: 4c 63 ea                      movslq  %edx, %r13
// 1d6: 4a 8b 2c eb                   movq    (%rbx,%r13,8), %rbp
// 1da: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1df: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 1e3: 48 3b a9 c0 54 06 00          cmpq    0x654c0(%rcx), %rbp
// 1ea: 74 3a                         je      0x226 <_JIT_ENTRY+0x226>
// 1ec: 48 8b 04 24                   movq    (%rsp), %rax
// 1f0: 48 29 c3                      subq    %rax, %rbx
// 1f3: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1f7: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1fb: 89 58 40                      movl    %ebx, 0x40(%rax)
// 1fe: 48 8b 00                      movq    (%rax), %rax
// 201: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000203:  R_X86_64_64  _JIT_TARGET
// 20b: 89 c9                         movl    %ecx, %ecx
// 20d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 211: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 217: 48 83 c4 18                   addq    $0x18, %rsp
// 21b: 5b                            popq    %rbx
// 21c: 41 5c                         popq    %r12
// 21e: 41 5d                         popq    %r13
// 220: 41 5e                         popq    %r14
// 222: 41 5f                         popq    %r15
// 224: 5d                            popq    %rbp
// 225: c3                            retq
// 226: 4c 8b 24 c3                   movq    (%rbx,%rax,8), %r12
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  PyObject_Size
// 234: 4c 89 e7                      movq    %r12, %rdi
// 237: ff d0                         callq   *%rax
// 239: 48 85 c0                      testq   %rax, %rax
// 23c: 0f 88 14 ff ff ff             js      0x156 <_JIT_ENTRY+0x156>
// 242: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000244:  R_X86_64_64  PyLong_FromSsize_t
// 24c: 48 89 c7                      movq    %rax, %rdi
// 24f: ff d1                         callq   *%rcx
// 251: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 256: 48 8b 45 00                   movq    (%rbp), %rax
// 25a: 48 85 c0                      testq   %rax, %rax
// 25d: 7f 22                         jg      0x281 <_JIT_ENTRY+0x281>
// 25f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000261:  R_X86_64_64  .rodata.str1.1
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_NegativeRefcount
// 273: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 278: 48 89 ea                      movq    %rbp, %rdx
// 27b: ff d0                         callq   *%rax
// 27d: 48 8b 45 00                   movq    (%rbp), %rax
// 281: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000283:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28b: 85 c0                         testl   %eax, %eax
// 28d: 78 18                         js      0x2a7 <_JIT_ENTRY+0x2a7>
// 28f: 41 ff d6                      callq   *%r14
// 292: 48 ff 4d 00                   decq    (%rbp)
// 296: 75 0f                         jne     0x2a7 <_JIT_ENTRY+0x2a7>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_Dealloc
// 2a2: 48 89 ef                      movq    %rbp, %rdi
// 2a5: ff d0                         callq   *%rax
// 2a7: 49 8b 04 24                   movq    (%r12), %rax
// 2ab: 48 85 c0                      testq   %rax, %rax
// 2ae: 7f 22                         jg      0x2d2 <_JIT_ENTRY+0x2d2>
// 2b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b2:  R_X86_64_64  .rodata.str1.1
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _Py_NegativeRefcount
// 2c4: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 2c9: 4c 89 e2                      movq    %r12, %rdx
// 2cc: ff d0                         callq   *%rax
// 2ce: 49 8b 04 24                   movq    (%r12), %rax
// 2d2: 85 c0                         testl   %eax, %eax
// 2d4: 78 18                         js      0x2ee <_JIT_ENTRY+0x2ee>
// 2d6: 41 ff d6                      callq   *%r14
// 2d9: 49 ff 0c 24                   decq    (%r12)
// 2dd: 75 0f                         jne     0x2ee <_JIT_ENTRY+0x2ee>
// 2df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e1:  R_X86_64_64  _Py_Dealloc
// 2e9: 4c 89 e7                      movq    %r12, %rdi
// 2ec: ff d0                         callq   *%rax
// 2ee: 4e 8d 34 eb                   leaq    (%rbx,%r13,8), %r14
// 2f2: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2f7: 48 85 c0                      testq   %rax, %rax
// 2fa: 0f 84 56 fe ff ff             je      0x156 <_JIT_ENTRY+0x156>
// 300: 4a 8d 34 fb                   leaq    (%rbx,%r15,8), %rsi
// 304: 49 89 06                      movq    %rax, (%r14)
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  _JIT_CONTINUE
// 311: 48 8b 3c 24                   movq    (%rsp), %rdi
// 315: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 31a: 48 83 c4 18                   addq    $0x18, %rsp
// 31e: 5b                            popq    %rbx
// 31f: 41 5c                         popq    %r12
// 321: 41 5d                         popq    %r13
// 323: 41 5e                         popq    %r14
// 325: 41 5f                         popq    %r15
// 327: 5d                            popq    %rbp
// 328: ff e0                         jmpq    *%rax
// 32a: 
static const unsigned char _STORE_SUBSCRplus_CALL_LEN_code_body[811] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x48, 0x89, 0xf3, 0x48, 0x89, 0x3c, 0x24, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x73, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x73, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x29, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xde, 0x74, 0x38, 0x48, 0x83, 0xc3, 0xe8, 0x49, 0x89, 0xde, 0x48, 0x8b, 0x04, 0x24, 0x49, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x70, 0x40, 0x31, 0xc0, 0xe9, 0xa7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xde, 0x75, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x4c, 0x63, 0xfa, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x4a, 0x83, 0x3c, 0xfb, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x20, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x4c, 0x63, 0xea, 0x4a, 0x8b, 0x2c, 0xeb, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x3b, 0xa9, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x3a, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x58, 0x40, 0x48, 0x8b, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x8b, 0x24, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0x14, 0xff, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd6, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd6, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4e, 0x8d, 0x34, 0xeb, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x56, 0xfe, 0xff, 0xff, 0x4a, 0x8d, 0x34, 0xfb, 0x49, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_CALL_LEN_code_holes[26] = {
    {0x28, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x57, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x72, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x309, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CALL_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CALL_LEN_data_holes[1];

// _STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_FAST
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_FAST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 f2                      movq    %r14, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 06                      movq    (%r14), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 f2                      movq    %r14, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 06                      movq    (%r14), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0e                      decq    (%r14)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 f7                      movq    %r14, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 24                         je      0x16a <_JIT_ENTRY+0x16a>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 14c: 74 33                         je      0x181 <_JIT_ENTRY+0x181>
// 14e: 49 83 c7 e8                   addq    $-0x18, %r15
// 152: 4c 89 f8                      movq    %r15, %rax
// 155: 48 29 d8                      subq    %rbx, %rax
// 158: 48 83 c0 b8                   addq    $-0x48, %rax
// 15c: 48 c1 e8 03                   shrq    $0x3, %rax
// 160: 89 43 40                      movl    %eax, 0x40(%rbx)
// 163: 31 c0                         xorl    %eax, %eax
// 165: e9 b2 00 00 00                jmp     0x21c <_JIT_ENTRY+0x21c>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 17f: 75 cd                         jne     0x14e <_JIT_ENTRY+0x14e>
// 181: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000183:  R_X86_64_64  _JIT_OPARG
// 18b: 0f b7 d1                      movzwl  %cx, %edx
// 18e: 89 d0                         movl    %edx, %eax
// 190: f7 d0                         notl    %eax
// 192: 4c 63 c8                      movslq  %eax, %r9
// 195: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 199: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 19e: 29 d6                         subl    %edx, %esi
// 1a0: 4c 63 d6                      movslq  %esi, %r10
// 1a3: 0f b7 c9                      movzwl  %cx, %ecx
// 1a6: 48 89 ce                      movq    %rcx, %rsi
// 1a9: 48 f7 de                      negq    %rsi
// 1ac: 44 8d 72 01                   leal    0x1(%rdx), %r14d
// 1b0: 48 85 c0                      testq   %rax, %rax
// 1b3: 48 f7 d1                      notq    %rcx
// 1b6: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 1ba: 44 0f 44 f2                   cmovel  %edx, %r14d
// 1be: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 1c2: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001c4:  R_X86_64_64  PyMethodDescr_Type
// 1cc: 49 39 54 24 08                cmpq    %rdx, 0x8(%r12)
// 1d1: 75 21                         jne     0x1f4 <_JIT_ENTRY+0x1f4>
// 1d3: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 1d8: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 1e0: 75 12                         jne     0x1f4 <_JIT_ENTRY+0x1f4>
// 1e2: 49 8d 14 cf                   leaq    (%r15,%rcx,8), %rdx
// 1e6: 48 8b 3a                      movq    (%rdx), %rdi
// 1e9: 48 8b 4f 08                   movq    0x8(%rdi), %rcx
// 1ed: 49 3b 4c 24 10                cmpq    0x10(%r12), %rcx
// 1f2: 74 37                         je      0x22b <_JIT_ENTRY+0x22b>
// 1f4: 49 29 df                      subq    %rbx, %r15
// 1f7: 49 83 c7 b8                   addq    $-0x48, %r15
// 1fb: 49 c1 ef 03                   shrq    $0x3, %r15
// 1ff: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 203: 48 8b 03                      movq    (%rbx), %rax
// 206: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000208:  R_X86_64_64  _JIT_TARGET
// 210: 89 c9                         movl    %ecx, %ecx
// 212: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 216: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 21c: 48 83 c4 28                   addq    $0x28, %rsp
// 220: 5b                            popq    %rbx
// 221: 41 5c                         popq    %r12
// 223: 41 5d                         popq    %r13
// 225: 41 5e                         popq    %r14
// 227: 41 5f                         popq    %r15
// 229: 5d                            popq    %rbp
// 22a: c3                            retq
// 22b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 230: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 235: 48 85 c0                      testq   %rax, %rax
// 238: 40 0f 94 c5                   sete    %bpl
// 23c: 41 8d 46 ff                   leal    -0x1(%r14), %eax
// 240: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 245: 48 8d 72 08                   leaq    0x8(%rdx), %rsi
// 249: 48 63 d0                      movslq  %eax, %rdx
// 24c: 41 ff 50 08                   callq   *0x8(%r8)
// 250: 48 89 04 24                   movq    %rax, (%rsp)
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _JIT_OPARG
// 25e: 66 85 c0                      testw   %ax, %ax
// 261: 0f 94 c0                      sete    %al
// 264: 40 84 c5                      testb   %al, %bpl
// 267: 0f 84 a5 00 00 00             je      0x312 <_JIT_ENTRY+0x312>
// 26d: 49 8b 04 24                   movq    (%r12), %rax
// 271: 48 85 c0                      testq   %rax, %rax
// 274: 7f 22                         jg      0x298 <_JIT_ENTRY+0x298>
// 276: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000278:  R_X86_64_64  .rodata.str1.1
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_NegativeRefcount
// 28a: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 28f: 4c 89 e2                      movq    %r12, %rdx
// 292: ff d0                         callq   *%rax
// 294: 49 8b 04 24                   movq    (%r12), %rax
// 298: 85 c0                         testl   %eax, %eax
// 29a: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 29f: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 2a4: 78 21                         js      0x2c7 <_JIT_ENTRY+0x2c7>
// 2a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b0: ff d0                         callq   *%rax
// 2b2: 49 ff 0c 24                   decq    (%r12)
// 2b6: 75 0f                         jne     0x2c7 <_JIT_ENTRY+0x2c7>
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_Dealloc
// 2c2: 4c 89 e7                      movq    %r12, %rdi
// 2c5: ff d0                         callq   *%rax
// 2c7: 4b 8d 04 ef                   leaq    (%r15,%r13,8), %rax
// 2cb: 48 8b 0c 24                   movq    (%rsp), %rcx
// 2cf: 48 85 c9                      testq   %rcx, %rcx
// 2d2: 0f 84 7d fe ff ff             je      0x155 <_JIT_ENTRY+0x155>
// 2d8: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 2dc: 48 89 08                      movq    %rcx, (%rax)
// 2df: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 2e4: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2e8: 48 8b 00                      movq    (%rax), %rax
// 2eb: 84 c0                         testb   %al, %al
// 2ed: 0f 84 a7 00 00 00             je      0x39a <_JIT_ENTRY+0x39a>
// 2f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f5:  R_X86_64_64  _Py_HandlePending
// 2fd: 4c 89 ff                      movq    %r15, %rdi
// 300: ff d0                         callq   *%rax
// 302: 85 c0                         testl   %eax, %eax
// 304: 0f 84 90 00 00 00             je      0x39a <_JIT_ENTRY+0x39a>
// 30a: 4c 89 f0                      movq    %r14, %rax
// 30d: e9 43 fe ff ff                jmp     0x155 <_JIT_ENTRY+0x155>
// 312: 41 83 fe 02                   cmpl    $0x2, %r14d
// 316: bd 01 00 00 00                movl    $0x1, %ebp
// 31b: 41 0f 43 ee                   cmovael %r14d, %ebp
// 31f: 45 31 ed                      xorl    %r13d, %r13d
// 322: eb 18                         jmp     0x33c <_JIT_ENTRY+0x33c>
// 324: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 330: 49 ff c5                      incq    %r13
// 333: 4c 39 ed                      cmpq    %r13, %rbp
// 336: 0f 84 31 ff ff ff             je      0x26d <_JIT_ENTRY+0x26d>
// 33c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 341: 4e 8b 34 e8                   movq    (%rax,%r13,8), %r14
// 345: 49 8b 06                      movq    (%r14), %rax
// 348: 48 85 c0                      testq   %rax, %rax
// 34b: 7e 06                         jle     0x353 <_JIT_ENTRY+0x353>
// 34d: 85 c0                         testl   %eax, %eax
// 34f: 78 df                         js      0x330 <_JIT_ENTRY+0x330>
// 351: eb 25                         jmp     0x378 <_JIT_ENTRY+0x378>
// 353: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000355:  R_X86_64_64  .rodata.str1.1
// 35d: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 362: 4c 89 f2                      movq    %r14, %rdx
// 365: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000367:  R_X86_64_64  _Py_NegativeRefcount
// 36f: ff d0                         callq   *%rax
// 371: 49 8b 06                      movq    (%r14), %rax
// 374: 85 c0                         testl   %eax, %eax
// 376: 78 b8                         js      0x330 <_JIT_ENTRY+0x330>
// 378: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 382: ff d0                         callq   *%rax
// 384: 49 ff 0e                      decq    (%r14)
// 387: 75 a7                         jne     0x330 <_JIT_ENTRY+0x330>
// 389: 4c 89 f7                      movq    %r14, %rdi
// 38c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038e:  R_X86_64_64  _Py_Dealloc
// 396: ff d0                         callq   *%rax
// 398: eb 96                         jmp     0x330 <_JIT_ENTRY+0x330>
// 39a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039c:  R_X86_64_64  _JIT_CONTINUE
// 3a4: 48 89 df                      movq    %rbx, %rdi
// 3a7: 4c 89 f6                      movq    %r14, %rsi
// 3aa: 4c 89 fa                      movq    %r15, %rdx
// 3ad: 48 83 c4 28                   addq    $0x28, %rsp
// 3b1: 5b                            popq    %rbx
// 3b2: 41 5c                         popq    %r12
// 3b4: 41 5d                         popq    %r13
// 3b6: 41 5e                         popq    %r14
// 3b8: 41 5f                         popq    %r15
// 3ba: 5d                            popq    %rbp
// 3bb: ff e0                         jmpq    *%rax
// 3bd: 
static const unsigned char _STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_FAST_code_body[958] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x20, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x24, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x33, 0x49, 0x83, 0xc7, 0xe8, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xb2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xcd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd6, 0x4c, 0x63, 0xd6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x72, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xf2, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x54, 0x24, 0x08, 0x75, 0x21, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x49, 0x8d, 0x14, 0xcf, 0x48, 0x8b, 0x3a, 0x48, 0x8b, 0x4f, 0x08, 0x49, 0x3b, 0x4c, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x46, 0xff, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x8d, 0x72, 0x08, 0x48, 0x63, 0xd0, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xef, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x7d, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xf7, 0x48, 0x89, 0x08, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa7, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0xe9, 0x43, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfe, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xee, 0x45, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xed, 0x0f, 0x84, 0x31, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x4e, 0x8b, 0x34, 0xe8, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x25, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xb8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xa7, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x96, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_FAST_code_holes[28] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x355, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x367, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x37a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x38e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x39c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_FAST_data_holes[1];

// _STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 f2                      movq    %r14, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 06                      movq    (%r14), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 f2                      movq    %r14, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 06                      movq    (%r14), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0e                      decq    (%r14)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 f7                      movq    %r14, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 24                         je      0x16a <_JIT_ENTRY+0x16a>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 14c: 74 33                         je      0x181 <_JIT_ENTRY+0x181>
// 14e: 49 83 c7 e8                   addq    $-0x18, %r15
// 152: 4c 89 f8                      movq    %r15, %rax
// 155: 48 29 d8                      subq    %rbx, %rax
// 158: 48 83 c0 b8                   addq    $-0x48, %rax
// 15c: 48 c1 e8 03                   shrq    $0x3, %rax
// 160: 89 43 40                      movl    %eax, 0x40(%rbx)
// 163: 31 c0                         xorl    %eax, %eax
// 165: e9 b2 00 00 00                jmp     0x21c <_JIT_ENTRY+0x21c>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 17f: 75 cd                         jne     0x14e <_JIT_ENTRY+0x14e>
// 181: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000183:  R_X86_64_64  _JIT_OPARG
// 18b: 0f b7 d1                      movzwl  %cx, %edx
// 18e: 89 d0                         movl    %edx, %eax
// 190: f7 d0                         notl    %eax
// 192: 4c 63 c8                      movslq  %eax, %r9
// 195: 4b 8b 04 cf                   movq    (%r15,%r9,8), %rax
// 199: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 19e: 29 d6                         subl    %edx, %esi
// 1a0: 4c 63 d6                      movslq  %esi, %r10
// 1a3: 0f b7 c9                      movzwl  %cx, %ecx
// 1a6: 48 89 ce                      movq    %rcx, %rsi
// 1a9: 48 f7 de                      negq    %rsi
// 1ac: 44 8d 72 01                   leal    0x1(%rdx), %r14d
// 1b0: 48 85 c0                      testq   %rax, %rax
// 1b3: 48 f7 d1                      notq    %rcx
// 1b6: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// 1ba: 44 0f 44 f2                   cmovel  %edx, %r14d
// 1be: 4f 8b 24 d7                   movq    (%r15,%r10,8), %r12
// 1c2: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001c4:  R_X86_64_64  PyMethodDescr_Type
// 1cc: 49 39 54 24 08                cmpq    %rdx, 0x8(%r12)
// 1d1: 75 21                         jne     0x1f4 <_JIT_ENTRY+0x1f4>
// 1d3: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 1d8: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 1e0: 75 12                         jne     0x1f4 <_JIT_ENTRY+0x1f4>
// 1e2: 49 8d 14 cf                   leaq    (%r15,%rcx,8), %rdx
// 1e6: 48 8b 3a                      movq    (%rdx), %rdi
// 1e9: 48 8b 4f 08                   movq    0x8(%rdi), %rcx
// 1ed: 49 3b 4c 24 10                cmpq    0x10(%r12), %rcx
// 1f2: 74 37                         je      0x22b <_JIT_ENTRY+0x22b>
// 1f4: 49 29 df                      subq    %rbx, %r15
// 1f7: 49 83 c7 b8                   addq    $-0x48, %r15
// 1fb: 49 c1 ef 03                   shrq    $0x3, %r15
// 1ff: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 203: 48 8b 03                      movq    (%rbx), %rax
// 206: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000208:  R_X86_64_64  _JIT_TARGET
// 210: 89 c9                         movl    %ecx, %ecx
// 212: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 216: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 21c: 48 83 c4 28                   addq    $0x28, %rsp
// 220: 5b                            popq    %rbx
// 221: 41 5c                         popq    %r12
// 223: 41 5d                         popq    %r13
// 225: 41 5e                         popq    %r14
// 227: 41 5f                         popq    %r15
// 229: 5d                            popq    %rbp
// 22a: c3                            retq
// 22b: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 230: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 235: 48 85 c0                      testq   %rax, %rax
// 238: 40 0f 94 c5                   sete    %bpl
// 23c: 41 8d 46 ff                   leal    -0x1(%r14), %eax
// 240: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
// 245: 48 8d 72 08                   leaq    0x8(%rdx), %rsi
// 249: 48 63 d0                      movslq  %eax, %rdx
// 24c: 31 c9                         xorl    %ecx, %ecx
// 24e: 41 ff 50 08                   callq   *0x8(%r8)
// 252: 48 89 04 24                   movq    %rax, (%rsp)
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _JIT_OPARG
// 260: 66 85 c0                      testw   %ax, %ax
// 263: 0f 94 c0                      sete    %al
// 266: 40 84 c5                      testb   %al, %bpl
// 269: 0f 84 a5 00 00 00             je      0x314 <_JIT_ENTRY+0x314>
// 26f: 49 8b 04 24                   movq    (%r12), %rax
// 273: 48 85 c0                      testq   %rax, %rax
// 276: 7f 22                         jg      0x29a <_JIT_ENTRY+0x29a>
// 278: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027a:  R_X86_64_64  .rodata.str1.1
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_NegativeRefcount
// 28c: be e8 0b 00 00                movl    $0xbe8, %esi            # imm = 0xBE8
// 291: 4c 89 e2                      movq    %r12, %rdx
// 294: ff d0                         callq   *%rax
// 296: 49 8b 04 24                   movq    (%r12), %rax
// 29a: 85 c0                         testl   %eax, %eax
// 29c: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
// 2a1: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 2a6: 78 21                         js      0x2c9 <_JIT_ENTRY+0x2c9>
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b2: ff d0                         callq   *%rax
// 2b4: 49 ff 0c 24                   decq    (%r12)
// 2b8: 75 0f                         jne     0x2c9 <_JIT_ENTRY+0x2c9>
// 2ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bc:  R_X86_64_64  _Py_Dealloc
// 2c4: 4c 89 e7                      movq    %r12, %rdi
// 2c7: ff d0                         callq   *%rax
// 2c9: 4b 8d 04 ef                   leaq    (%r15,%r13,8), %rax
// 2cd: 48 8b 0c 24                   movq    (%rsp), %rcx
// 2d1: 48 85 c9                      testq   %rcx, %rcx
// 2d4: 0f 84 7b fe ff ff             je      0x155 <_JIT_ENTRY+0x155>
// 2da: 4f 8d 34 f7                   leaq    (%r15,%r14,8), %r14
// 2de: 48 89 08                      movq    %rcx, (%rax)
// 2e1: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 2e6: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2ea: 48 8b 00                      movq    (%rax), %rax
// 2ed: 84 c0                         testb   %al, %al
// 2ef: 0f 84 a5 00 00 00             je      0x39a <_JIT_ENTRY+0x39a>
// 2f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f7:  R_X86_64_64  _Py_HandlePending
// 2ff: 4c 89 ff                      movq    %r15, %rdi
// 302: ff d0                         callq   *%rax
// 304: 85 c0                         testl   %eax, %eax
// 306: 0f 84 8e 00 00 00             je      0x39a <_JIT_ENTRY+0x39a>
// 30c: 4c 89 f0                      movq    %r14, %rax
// 30f: e9 41 fe ff ff                jmp     0x155 <_JIT_ENTRY+0x155>
// 314: 41 83 fe 02                   cmpl    $0x2, %r14d
// 318: bd 01 00 00 00                movl    $0x1, %ebp
// 31d: 41 0f 43 ee                   cmovael %r14d, %ebp
// 321: 45 31 ed                      xorl    %r13d, %r13d
// 324: eb 16                         jmp     0x33c <_JIT_ENTRY+0x33c>
// 326: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 330: 49 ff c5                      incq    %r13
// 333: 4c 39 ed                      cmpq    %r13, %rbp
// 336: 0f 84 33 ff ff ff             je      0x26f <_JIT_ENTRY+0x26f>
// 33c: 48 8b 44 24 18                movq    0x18(%rsp), %rax
// 341: 4e 8b 34 e8                   movq    (%rax,%r13,8), %r14
// 345: 49 8b 06                      movq    (%r14), %rax
// 348: 48 85 c0                      testq   %rax, %rax
// 34b: 7e 06                         jle     0x353 <_JIT_ENTRY+0x353>
// 34d: 85 c0                         testl   %eax, %eax
// 34f: 78 df                         js      0x330 <_JIT_ENTRY+0x330>
// 351: eb 25                         jmp     0x378 <_JIT_ENTRY+0x378>
// 353: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000355:  R_X86_64_64  .rodata.str1.1
// 35d: be e6 0b 00 00                movl    $0xbe6, %esi            # imm = 0xBE6
// 362: 4c 89 f2                      movq    %r14, %rdx
// 365: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000367:  R_X86_64_64  _Py_NegativeRefcount
// 36f: ff d0                         callq   *%rax
// 371: 49 8b 06                      movq    (%r14), %rax
// 374: 85 c0                         testl   %eax, %eax
// 376: 78 b8                         js      0x330 <_JIT_ENTRY+0x330>
// 378: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 382: ff d0                         callq   *%rax
// 384: 49 ff 0e                      decq    (%r14)
// 387: 75 a7                         jne     0x330 <_JIT_ENTRY+0x330>
// 389: 4c 89 f7                      movq    %r14, %rdi
// 38c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000038e:  R_X86_64_64  _Py_Dealloc
// 396: ff d0                         callq   *%rax
// 398: eb 96                         jmp     0x330 <_JIT_ENTRY+0x330>
// 39a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039c:  R_X86_64_64  _JIT_CONTINUE
// 3a4: 48 89 df                      movq    %rbx, %rdi
// 3a7: 4c 89 f6                      movq    %r14, %rsi
// 3aa: 4c 89 fa                      movq    %r15, %rdx
// 3ad: 48 83 c4 28                   addq    $0x28, %rsp
// 3b1: 5b                            popq    %rbx
// 3b2: 41 5c                         popq    %r12
// 3b4: 41 5d                         popq    %r13
// 3b6: 41 5e                         popq    %r14
// 3b8: 41 5f                         popq    %r15
// 3ba: 5d                            popq    %rbp
// 3bb: ff e0                         jmpq    *%rax
// 3bd: 
static const unsigned char _STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_body[958] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x20, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x24, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x33, 0x49, 0x83, 0xc7, 0xe8, 0x4c, 0x89, 0xf8, 0x48, 0x29, 0xd8, 0x48, 0x83, 0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x89, 0x43, 0x40, 0x31, 0xc0, 0xe9, 0xb2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xcd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xcf, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd6, 0x4c, 0x63, 0xd6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x72, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xf2, 0x4f, 0x8b, 0x24, 0xd7, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x54, 0x24, 0x08, 0x75, 0x21, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x75, 0x12, 0x49, 0x8d, 0x14, 0xcf, 0x48, 0x8b, 0x3a, 0x48, 0x8b, 0x4f, 0x08, 0x49, 0x3b, 0x4c, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x46, 0xff, 0x48, 0x89, 0x54, 0x24, 0x18, 0x48, 0x8d, 0x72, 0x08, 0x48, 0x63, 0xd0, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe8, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x74, 0x24, 0x10, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xef, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x7b, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xf7, 0x48, 0x89, 0x08, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x8e, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf0, 0xe9, 0x41, 0xfe, 0xff, 0xff, 0x41, 0x83, 0xfe, 0x02, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x43, 0xee, 0x45, 0x31, 0xed, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc5, 0x4c, 0x39, 0xed, 0x0f, 0x84, 0x33, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x4e, 0x8b, 0x34, 0xe8, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xdf, 0xeb, 0x25, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0xb8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0xa7, 0x4c, 0x89, 0xf7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x96, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_holes[28] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x355, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x367, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x37a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x38e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x39c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_holes[1];

// _STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_NOARGS
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_NOARGS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 14 24                   movq    %rdx, (%rsp)
// 12: 49 89 f7                      movq    %rsi, %r15
// 15: 48 89 fb                      movq    %rdi, %rbx
// 18: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1c: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 20: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 24: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000026:  R_X86_64_64  PyObject_SetItem
// 2e: 4c 89 ef                      movq    %r13, %rdi
// 31: 4c 89 e6                      movq    %r12, %rsi
// 34: 4c 89 f2                      movq    %r14, %rdx
// 37: ff d0                         callq   *%rax
// 39: 89 c5                         movl    %eax, %ebp
// 3b: 49 8b 06                      movq    (%r14), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 06                         jle     0x49 <_JIT_ENTRY+0x49>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 27                         jns     0x6e <_JIT_ENTRY+0x6e>
// 47: eb 36                         jmp     0x7f <_JIT_ENTRY+0x7f>
// 49: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004b:  R_X86_64_64  .rodata.str1.1
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _Py_NegativeRefcount
// 5d: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 62: 4c 89 f2                      movq    %r14, %rdx
// 65: ff d0                         callq   *%rax
// 67: 49 8b 06                      movq    (%r14), %rax
// 6a: 85 c0                         testl   %eax, %eax
// 6c: 78 11                         js      0x7f <_JIT_ENTRY+0x7f>
// 6e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000070:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 78: ff d0                         callq   *%rax
// 7a: 49 ff 0e                      decq    (%r14)
// 7d: 74 0f                         je      0x8e <_JIT_ENTRY+0x8e>
// 7f: 49 8b 45 00                   movq    (%r13), %rax
// 83: 48 85 c0                      testq   %rax, %rax
// 86: 7e 1e                         jle     0xa6 <_JIT_ENTRY+0xa6>
// 88: 85 c0                         testl   %eax, %eax
// 8a: 79 40                         jns     0xcc <_JIT_ENTRY+0xcc>
// 8c: eb 50                         jmp     0xde <_JIT_ENTRY+0xde>
// 8e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000090:  R_X86_64_64  _Py_Dealloc
// 98: 4c 89 f7                      movq    %r14, %rdi
// 9b: ff d0                         callq   *%rax
// 9d: 49 8b 45 00                   movq    (%r13), %rax
// a1: 48 85 c0                      testq   %rax, %rax
// a4: 7f e2                         jg      0x88 <_JIT_ENTRY+0x88>
// a6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a8:  R_X86_64_64  .rodata.str1.1
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_NegativeRefcount
// ba: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bf: 4c 89 ea                      movq    %r13, %rdx
// c2: ff d0                         callq   *%rax
// c4: 49 8b 45 00                   movq    (%r13), %rax
// c8: 85 c0                         testl   %eax, %eax
// ca: 78 12                         js      0xde <_JIT_ENTRY+0xde>
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d6: ff d0                         callq   *%rax
// d8: 49 ff 4d 00                   decq    (%r13)
// dc: 74 13                         je      0xf1 <_JIT_ENTRY+0xf1>
// de: 49 8b 04 24                   movq    (%r12), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7e 22                         jle     0x109 <_JIT_ENTRY+0x109>
// e7: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// eb: 85 c0                         testl   %eax, %eax
// ed: 79 44                         jns     0x133 <_JIT_ENTRY+0x133>
// ef: eb 54                         jmp     0x145 <_JIT_ENTRY+0x145>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_Dealloc
// fb: 4c 89 ef                      movq    %r13, %rdi
// fe: ff d0                         callq   *%rax
// 100: 49 8b 04 24                   movq    (%r12), %rax
// 104: 48 85 c0                      testq   %rax, %rax
// 107: 7f de                         jg      0xe7 <_JIT_ENTRY+0xe7>
// 109: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010b:  R_X86_64_64  .rodata.str1.1
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_NegativeRefcount
// 11d: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 122: 4c 89 e2                      movq    %r12, %rdx
// 125: ff d0                         callq   *%rax
// 127: 49 8b 04 24                   movq    (%r12), %rax
// 12b: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 12f: 85 c0                         testl   %eax, %eax
// 131: 78 12                         js      0x145 <_JIT_ENTRY+0x145>
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13d: ff d0                         callq   *%rax
// 13f: 49 ff 0c 24                   decq    (%r12)
// 143: 74 25                         je      0x16a <_JIT_ENTRY+0x16a>
// 145: 85 ed                         testl   %ebp, %ebp
// 147: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 14b: 74 34                         je      0x181 <_JIT_ENTRY+0x181>
// 14d: 49 83 c7 e8                   addq    $-0x18, %r15
// 151: 4d 89 fe                      movq    %r15, %r14
// 154: 49 29 de                      subq    %rbx, %r14
// 157: 49 83 c6 b8                   addq    $-0x48, %r14
// 15b: 49 c1 ee 03                   shrq    $0x3, %r14
// 15f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 163: 31 c0                         xorl    %eax, %eax
// 165: e9 84 01 00 00                jmp     0x2ee <_JIT_ENTRY+0x2ee>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 17f: 75 cc                         jne     0x14d <_JIT_ENTRY+0x14d>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _JIT_OPARG
// 18b: 0f b7 c8                      movzwl  %ax, %ecx
// 18e: 89 ca                         movl    %ecx, %edx
// 190: f7 d2                         notl    %edx
// 192: 48 63 ea                      movslq  %edx, %rbp
// 195: 0f b7 c0                      movzwl  %ax, %eax
// 198: 48 89 c2                      movq    %rax, %rdx
// 19b: 48 f7 da                      negq    %rdx
// 19e: 31 f6                         xorl    %esi, %esi
// 1a0: 66 85 c0                      testw   %ax, %ax
// 1a3: 40 0f 94 c6                   sete    %sil
// 1a7: 31 ff                         xorl    %edi, %edi
// 1a9: 66 83 f8 01                   cmpw    $0x1, %ax
// 1ad: 40 0f 94 c7                   sete    %dil
// 1b1: 49 83 3c ef 00                cmpq    $0x0, (%r15,%rbp,8)
// 1b6: 48 f7 d0                      notq    %rax
// 1b9: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1bd: 0f 44 f7                      cmovel  %edi, %esi
// 1c0: 40 80 fe 01                   cmpb    $0x1, %sil
// 1c4: 0f 85 fc 00 00 00             jne     0x2c6 <_JIT_ENTRY+0x2c6>
// 1ca: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1cf: 29 ca                         subl    %ecx, %edx
// 1d1: 4c 63 ea                      movslq  %edx, %r13
// 1d4: 4f 8b 24 ef                   movq    (%r15,%r13,8), %r12
// 1d8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001da:  R_X86_64_64  PyMethodDescr_Type
// 1e2: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 1e7: 0f 85 d9 00 00 00             jne     0x2c6 <_JIT_ENTRY+0x2c6>
// 1ed: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 1f1: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 1f5: 49 3b 44 24 10                cmpq    0x10(%r12), %rax
// 1fa: 0f 85 c6 00 00 00             jne     0x2c6 <_JIT_ENTRY+0x2c6>
// 200: 49 8b 44 24 28                movq    0x28(%r12), %rax
// 205: 83 78 10 04                   cmpl    $0x4, 0x10(%rax)
// 209: 0f 85 b7 00 00 00             jne     0x2c6 <_JIT_ENTRY+0x2c6>
// 20f: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 213: 48 8b 14 24                   movq    (%rsp), %rdx
// 217: 8b 42 2c                      movl    0x2c(%rdx), %eax
// 21a: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 21d: 89 4a 2c                      movl    %ecx, 0x2c(%rdx)
// 220: 85 c0                         testl   %eax, %eax
// 222: 0f 8e d5 00 00 00             jle     0x2fd <_JIT_ENTRY+0x2fd>
// 228: 4f 8d 34 ef                   leaq    (%r15,%r13,8), %r14
// 22c: 49 89 fd                      movq    %rdi, %r13
// 22f: 31 f6                         xorl    %esi, %esi
// 231: 41 ff d0                      callq   *%r8
// 234: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 239: 48 8b 04 24                   movq    (%rsp), %rax
// 23d: ff 40 2c                      incl    0x2c(%rax)
// 240: bf 10 0c 00 00                movl    $0xc10, %edi            # imm = 0xC10
// 245: 4c 89 ee                      movq    %r13, %rsi
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  .text+0x340
// 252: ff d0                         callq   *%rax
// 254: bf 11 0c 00 00                movl    $0xc11, %edi            # imm = 0xC11
// 259: 4c 89 e6                      movq    %r12, %rsi
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  .text+0x340
// 266: ff d0                         callq   *%rax
// 268: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 26d: 48 85 c0                      testq   %rax, %rax
// 270: 0f 84 de fe ff ff             je      0x154 <_JIT_ENTRY+0x154>
// 276: 4d 8d 3c ef                   leaq    (%r15,%rbp,8), %r15
// 27a: 49 89 06                      movq    %rax, (%r14)
// 27d: 4c 8b 34 24                   movq    (%rsp), %r14
// 281: 49 8b 46 10                   movq    0x10(%r14), %rax
// 285: 48 8b 00                      movq    (%rax), %rax
// 288: 84 c0                         testb   %al, %al
// 28a: 74 17                         je      0x2a3 <_JIT_ENTRY+0x2a3>
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _Py_HandlePending
// 296: 4c 89 f7                      movq    %r14, %rdi
// 299: ff d0                         callq   *%rax
// 29b: 85 c0                         testl   %eax, %eax
// 29d: 0f 85 ae fe ff ff             jne     0x151 <_JIT_ENTRY+0x151>
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _JIT_CONTINUE
// 2ad: 48 89 df                      movq    %rbx, %rdi
// 2b0: 4c 89 fe                      movq    %r15, %rsi
// 2b3: 4c 89 f2                      movq    %r14, %rdx
// 2b6: 48 83 c4 18                   addq    $0x18, %rsp
// 2ba: 5b                            popq    %rbx
// 2bb: 41 5c                         popq    %r12
// 2bd: 41 5d                         popq    %r13
// 2bf: 41 5e                         popq    %r14
// 2c1: 41 5f                         popq    %r15
// 2c3: 5d                            popq    %rbp
// 2c4: ff e0                         jmpq    *%rax
// 2c6: 49 29 df                      subq    %rbx, %r15
// 2c9: 49 83 c7 b8                   addq    $-0x48, %r15
// 2cd: 49 c1 ef 03                   shrq    $0x3, %r15
// 2d1: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 2d5: 48 8b 03                      movq    (%rbx), %rax
// 2d8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002da:  R_X86_64_64  _JIT_TARGET
// 2e2: 89 c9                         movl    %ecx, %ecx
// 2e4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2e8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2ee: 48 83 c4 18                   addq    $0x18, %rsp
// 2f2: 5b                            popq    %rbx
// 2f3: 41 5c                         popq    %r12
// 2f5: 41 5d                         popq    %r13
// 2f7: 41 5e                         popq    %r14
// 2f9: 41 5f                         popq    %r15
// 2fb: 5d                            popq    %rbp
// 2fc: c3                            retq
// 2fd: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002ff:  R_X86_64_64  .rodata.str1.1+0x39
// 307: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000309:  R_X86_64_64  _Py_CheckRecursiveCall
// 311: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 316: 48 8b 3c 24                   movq    (%rsp), %rdi
// 31a: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// 31f: ff d0                         callq   *%rax
// 321: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 326: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 32b: 85 c0                         testl   %eax, %eax
// 32d: 0f 85 21 fe ff ff             jne     0x154 <_JIT_ENTRY+0x154>
// 333: e9 f0 fe ff ff                jmp     0x228 <_JIT_ENTRY+0x228>
// 338: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 
// 0000000000000340 <Py_DECREF>:
// 340: 53                            pushq   %rbx
// 341: 48 89 f3                      movq    %rsi, %rbx
// 344: 48 8b 06                      movq    (%rsi), %rax
// 347: 48 85 c0                      testq   %rax, %rax
// 34a: 7e 06                         jle     0x352 <Py_DECREF+0x12>
// 34c: 85 c0                         testl   %eax, %eax
// 34e: 79 24                         jns     0x374 <Py_DECREF+0x34>
// 350: eb 33                         jmp     0x385 <Py_DECREF+0x45>
// 352: 89 fe                         movl    %edi, %esi
// 354: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000356:  R_X86_64_64  .rodata.str1.1
// 35e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000360:  R_X86_64_64  _Py_NegativeRefcount
// 368: 48 89 da                      movq    %rbx, %rdx
// 36b: ff d0                         callq   *%rax
// 36d: 48 8b 03                      movq    (%rbx), %rax
// 370: 85 c0                         testl   %eax, %eax
// 372: 78 11                         js      0x385 <Py_DECREF+0x45>
// 374: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000376:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 37e: ff d0                         callq   *%rax
// 380: 48 ff 0b                      decq    (%rbx)
// 383: 74 02                         je      0x387 <Py_DECREF+0x47>
// 385: 5b                            popq    %rbx
// 386: c3                            retq
// 387: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000389:  R_X86_64_64  _Py_Dealloc
// 391: 48 89 df                      movq    %rbx, %rdi
// 394: 5b                            popq    %rbx
// 395: ff e0                         jmpq    *%rax
// 397: 
static const unsigned char _STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_body[920] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x25, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x34, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x84, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xcc, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xea, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x49, 0x83, 0x3c, 0xef, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x0f, 0x85, 0xfc, 0x00, 0x00, 0x00, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x4c, 0x63, 0xea, 0x4f, 0x8b, 0x24, 0xef, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0xd9, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0x8b, 0x47, 0x08, 0x49, 0x3b, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xc6, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x28, 0x83, 0x78, 0x10, 0x04, 0x0f, 0x85, 0xb7, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x14, 0x24, 0x8b, 0x42, 0x2c, 0x8d, 0x48, 0xff, 0x89, 0x4a, 0x2c, 0x85, 0xc0, 0x0f, 0x8e, 0xd5, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xef, 0x49, 0x89, 0xfd, 0x31, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x04, 0x24, 0xff, 0x40, 0x2c, 0xbf, 0x10, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xbf, 0x11, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xde, 0xfe, 0xff, 0xff, 0x4d, 0x8d, 0x3c, 0xef, 0x49, 0x89, 0x06, 0x4c, 0x8b, 0x34, 0x24, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xae, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0x44, 0x24, 0x10, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x85, 0xc0, 0x0f, 0x85, 0x21, 0xfe, 0xff, 0xff, 0xe9, 0xf0, 0xfe, 0xff, 0xff, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_holes[27] = {
    {0x26, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x70, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x340},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x340},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2da, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2ff, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x309, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x356, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x360, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x376, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x389, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_holes[1];

// _STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_O
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_O.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 f2                      movq    %r14, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 06                      movq    (%r14), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 f2                      movq    %r14, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 06                      movq    (%r14), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0e                      decq    (%r14)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 f7                      movq    %r14, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 25                         je      0x16b <_JIT_ENTRY+0x16b>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 14c: 74 34                         je      0x182 <_JIT_ENTRY+0x182>
// 14e: 49 83 c7 e8                   addq    $-0x18, %r15
// 152: 4d 89 fe                      movq    %r15, %r14
// 155: 49 29 de                      subq    %rbx, %r14
// 158: 49 83 c6 b8                   addq    $-0x48, %r14
// 15c: 49 c1 ee 03                   shrq    $0x3, %r14
// 160: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 164: 31 c0                         xorl    %eax, %eax
// 166: e9 be 00 00 00                jmp     0x229 <_JIT_ENTRY+0x229>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 85 ed                         testl   %ebp, %ebp
// 17c: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 180: 75 cc                         jne     0x14e <_JIT_ENTRY+0x14e>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _JIT_OPARG
// 18c: 0f b7 c8                      movzwl  %ax, %ecx
// 18f: 89 ca                         movl    %ecx, %edx
// 191: f7 d2                         notl    %edx
// 193: 48 63 ea                      movslq  %edx, %rbp
// 196: 0f b7 c0                      movzwl  %ax, %eax
// 199: 48 89 c2                      movq    %rax, %rdx
// 19c: 48 f7 da                      negq    %rdx
// 19f: 31 f6                         xorl    %esi, %esi
// 1a1: 66 83 f8 01                   cmpw    $0x1, %ax
// 1a5: 40 0f 94 c6                   sete    %sil
// 1a9: 31 ff                         xorl    %edi, %edi
// 1ab: 66 83 f8 02                   cmpw    $0x2, %ax
// 1af: 40 0f 94 c7                   sete    %dil
// 1b3: 49 83 3c ef 00                cmpq    $0x0, (%r15,%rbp,8)
// 1b8: 48 f7 d0                      notq    %rax
// 1bb: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 1bf: 0f 44 f7                      cmovel  %edi, %esi
// 1c2: 40 80 fe 01                   cmpb    $0x1, %sil
// 1c6: 75 39                         jne     0x201 <_JIT_ENTRY+0x201>
// 1c8: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 1cd: 29 ca                         subl    %ecx, %edx
// 1cf: 4c 63 ea                      movslq  %edx, %r13
// 1d2: 4f 8b 24 ef                   movq    (%r15,%r13,8), %r12
// 1d6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d8:  R_X86_64_64  PyMethodDescr_Type
// 1e0: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 1e5: 75 1a                         jne     0x201 <_JIT_ENTRY+0x201>
// 1e7: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 1ec: 83 79 10 08                   cmpl    $0x8, 0x10(%rcx)
// 1f0: 75 0f                         jne     0x201 <_JIT_ENTRY+0x201>
// 1f2: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 1f6: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 1fa: 49 3b 54 24 10                cmpq    0x10(%r12), %rdx
// 1ff: 74 37                         je      0x238 <_JIT_ENTRY+0x238>
// 201: 49 29 df                      subq    %rbx, %r15
// 204: 49 83 c7 b8                   addq    $-0x48, %r15
// 208: 49 c1 ef 03                   shrq    $0x3, %r15
// 20c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 210: 48 8b 03                      movq    (%rbx), %rax
// 213: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000215:  R_X86_64_64  _JIT_TARGET
// 21d: 89 c9                         movl    %ecx, %ecx
// 21f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 223: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 229: 48 83 c4 28                   addq    $0x28, %rsp
// 22d: 5b                            popq    %rbx
// 22e: 41 5c                         popq    %r12
// 230: 41 5d                         popq    %r13
// 232: 41 5e                         popq    %r14
// 234: 41 5f                         popq    %r15
// 236: 5d                            popq    %rbp
// 237: c3                            retq
// 238: 49 8b 74 c7 08                movq    0x8(%r15,%rax,8), %rsi
// 23d: 4c 8b 41 08                   movq    0x8(%rcx), %r8
// 241: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 246: 8b 42 2c                      movl    0x2c(%rdx), %eax
// 249: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 24c: 89 4a 2c                      movl    %ecx, 0x2c(%rdx)
// 24f: 85 c0                         testl   %eax, %eax
// 251: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
// 256: 0f 8e ac 00 00 00             jle     0x308 <_JIT_ENTRY+0x308>
// 25c: 4f 8d 34 ef                   leaq    (%r15,%r13,8), %r14
// 260: 49 89 fd                      movq    %rdi, %r13
// 263: 41 ff d0                      callq   *%r8
// 266: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 26b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 270: ff 40 2c                      incl    0x2c(%rax)
// 273: bf bf 0b 00 00                movl    $0xbbf, %edi            # imm = 0xBBF
// 278: 4c 89 ee                      movq    %r13, %rsi
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  .text+0x350
// 285: ff d0                         callq   *%rax
// 287: bf c0 0b 00 00                movl    $0xbc0, %edi            # imm = 0xBC0
// 28c: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// 291: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000293:  R_X86_64_64  .text+0x350
// 29b: 41 ff d5                      callq   *%r13
// 29e: bf c1 0b 00 00                movl    $0xbc1, %edi            # imm = 0xBC1
// 2a3: 4c 89 e6                      movq    %r12, %rsi
// 2a6: 41 ff d5                      callq   *%r13
// 2a9: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 2ae: 48 85 c0                      testq   %rax, %rax
// 2b1: 0f 84 9e fe ff ff             je      0x155 <_JIT_ENTRY+0x155>
// 2b7: 4d 8d 3c ef                   leaq    (%r15,%rbp,8), %r15
// 2bb: 49 89 06                      movq    %rax, (%r14)
// 2be: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 2c3: 49 8b 46 10                   movq    0x10(%r14), %rax
// 2c7: 48 8b 00                      movq    (%rax), %rax
// 2ca: 84 c0                         testb   %al, %al
// 2cc: 74 17                         je      0x2e5 <_JIT_ENTRY+0x2e5>
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _Py_HandlePending
// 2d8: 4c 89 f7                      movq    %r14, %rdi
// 2db: ff d0                         callq   *%rax
// 2dd: 85 c0                         testl   %eax, %eax
// 2df: 0f 85 6d fe ff ff             jne     0x152 <_JIT_ENTRY+0x152>
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _JIT_CONTINUE
// 2ef: 48 89 df                      movq    %rbx, %rdi
// 2f2: 4c 89 fe                      movq    %r15, %rsi
// 2f5: 4c 89 f2                      movq    %r14, %rdx
// 2f8: 48 83 c4 28                   addq    $0x28, %rsp
// 2fc: 5b                            popq    %rbx
// 2fd: 41 5c                         popq    %r12
// 2ff: 41 5d                         popq    %r13
// 301: 41 5e                         popq    %r14
// 303: 41 5f                         popq    %r15
// 305: 5d                            popq    %rbp
// 306: ff e0                         jmpq    *%rax
// 308: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000030a:  R_X86_64_64  .rodata.str1.1+0x39
// 312: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000314:  R_X86_64_64  _Py_CheckRecursiveCall
// 31c: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 321: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 326: 4c 89 44 24 20                movq    %r8, 0x20(%rsp)
// 32b: ff d0                         callq   *%rax
// 32d: 4c 8b 44 24 20                movq    0x20(%rsp), %r8
// 332: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 337: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// 33c: 85 c0                         testl   %eax, %eax
// 33e: 0f 85 11 fe ff ff             jne     0x155 <_JIT_ENTRY+0x155>
// 344: e9 13 ff ff ff                jmp     0x25c <_JIT_ENTRY+0x25c>
// 349: 0f 1f 80 00 00 00 00          nopl    (%rax)
// 
// 0000000000000350 <Py_DECREF>:
// 350: 53                            pushq   %rbx
// 351: 48 89 f3                      movq    %rsi, %rbx
// 354: 48 8b 06                      movq    (%rsi), %rax
// 357: 48 85 c0                      testq   %rax, %rax
// 35a: 7e 06                         jle     0x362 <Py_DECREF+0x12>
// 35c: 85 c0                         testl   %eax, %eax
// 35e: 79 24                         jns     0x384 <Py_DECREF+0x34>
// 360: eb 33                         jmp     0x395 <Py_DECREF+0x45>
// 362: 89 fe                         movl    %edi, %esi
// 364: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000366:  R_X86_64_64  .rodata.str1.1
// 36e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000370:  R_X86_64_64  _Py_NegativeRefcount
// 378: 48 89 da                      movq    %rbx, %rdx
// 37b: ff d0                         callq   *%rax
// 37d: 48 8b 03                      movq    (%rbx), %rax
// 380: 85 c0                         testl   %eax, %eax
// 382: 78 11                         js      0x395 <Py_DECREF+0x45>
// 384: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000386:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 38e: ff d0                         callq   *%rax
// 390: 48 ff 0b                      decq    (%rbx)
// 393: 74 02                         je      0x397 <Py_DECREF+0x47>
// 395: 5b                            popq    %rbx
// 396: c3                            retq
// 397: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000399:  R_X86_64_64  _Py_Dealloc
// 3a1: 48 89 df                      movq    %rbx, %rdi
// 3a4: 5b                            popq    %rbx
// 3a5: ff e0                         jmpq    *%rax
// 3a7: 
static const unsigned char _STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_O_code_body[936] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x25, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x34, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xbe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xcc, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xea, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x02, 0x40, 0x0f, 0x94, 0xc7, 0x49, 0x83, 0x3c, 0xef, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x39, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x4c, 0x63, 0xea, 0x4f, 0x8b, 0x24, 0xef, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x1a, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x83, 0x79, 0x10, 0x08, 0x75, 0x0f, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0x8b, 0x57, 0x08, 0x49, 0x3b, 0x54, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x74, 0xc7, 0x08, 0x4c, 0x8b, 0x41, 0x08, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x8b, 0x42, 0x2c, 0x8d, 0x48, 0xff, 0x89, 0x4a, 0x2c, 0x85, 0xc0, 0x48, 0x89, 0x74, 0x24, 0x18, 0x0f, 0x8e, 0xac, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xef, 0x49, 0x89, 0xfd, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xff, 0x40, 0x2c, 0xbf, 0xbf, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xbf, 0xc0, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xff, 0xd5, 0xbf, 0xc1, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x9e, 0xfe, 0xff, 0xff, 0x4d, 0x8d, 0x3c, 0xef, 0x49, 0x89, 0x06, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x49, 0x8b, 0x46, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x6d, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0x44, 0x24, 0x20, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x85, 0xc0, 0x0f, 0x85, 0x11, 0xfe, 0xff, 0xff, 0xe9, 0x13, 0xff, 0xff, 0xff, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_O_code_holes[27] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x350},
    {0x293, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x350},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x314, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x366, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x370, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x386, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x399, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_O_data_holes[1];

// _STORE_SUBSCRplus_CALL_STR_1
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CALL_STR_1.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 f2                      movq    %r14, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 06                      movq    (%r14), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 f2                      movq    %r14, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 06                      movq    (%r14), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0e                      decq    (%r14)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 f7                      movq    %r14, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 21                         je      0x167 <_JIT_ENTRY+0x167>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 14c: 74 30                         je      0x17e <_JIT_ENTRY+0x17e>
// 14e: 49 83 c7 e8                   addq    $-0x18, %r15
// 152: 4c 89 fd                      movq    %r15, %rbp
// 155: 48 29 dd                      subq    %rbx, %rbp
// 158: 48 83 c5 b8                   addq    $-0x48, %rbp
// 15c: 48 c1 ed 03                   shrq    $0x3, %rbp
// 160: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 163: 31 c0                         xorl    %eax, %eax
// 165: eb 78                         jmp     0x1df <_JIT_ENTRY+0x1df>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_Dealloc
// 171: 4c 89 e7                      movq    %r12, %rdi
// 174: ff d0                         callq   *%rax
// 176: 85 ed                         testl   %ebp, %ebp
// 178: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 17c: 75 d0                         jne     0x14e <_JIT_ENTRY+0x14e>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _JIT_OPARG
// 188: 0f b7 c0                      movzwl  %ax, %eax
// 18b: 89 c1                         movl    %eax, %ecx
// 18d: f7 d1                         notl    %ecx
// 18f: 4c 63 e9                      movslq  %ecx, %r13
// 192: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 197: 75 1e                         jne     0x1b7 <_JIT_ENTRY+0x1b7>
// 199: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 19e: 29 c1                         subl    %eax, %ecx
// 1a0: 48 63 c1                      movslq  %ecx, %rax
// 1a3: 49 8d 2c c7                   leaq    (%r15,%rax,8), %rbp
// 1a7: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001a9:  R_X86_64_64  PyUnicode_Type
// 1b1: 4c 39 65 00                   cmpq    %r12, (%rbp)
// 1b5: 74 37                         je      0x1ee <_JIT_ENTRY+0x1ee>
// 1b7: 49 29 df                      subq    %rbx, %r15
// 1ba: 49 83 c7 b8                   addq    $-0x48, %r15
// 1be: 49 c1 ef 03                   shrq    $0x3, %r15
// 1c2: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 1c6: 48 8b 03                      movq    (%rbx), %rax
// 1c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cb:  R_X86_64_64  _JIT_TARGET
// 1d3: 89 c9                         movl    %ecx, %ecx
// 1d5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1d9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1df: 48 83 c4 18                   addq    $0x18, %rsp
// 1e3: 5b                            popq    %rbx
// 1e4: 41 5c                         popq    %r12
// 1e6: 41 5d                         popq    %r13
// 1e8: 41 5e                         popq    %r14
// 1ea: 41 5f                         popq    %r15
// 1ec: 5d                            popq    %rbp
// 1ed: c3                            retq
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _JIT_OPARG
// 1f8: 0f b7 c0                      movzwl  %ax, %eax
// 1fb: 48 c1 e0 03                   shlq    $0x3, %rax
// 1ff: 4c 89 f9                      movq    %r15, %rcx
// 202: 48 29 c1                      subq    %rax, %rcx
// 205: 4c 8b 31                      movq    (%rcx), %r14
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  PyObject_Str
// 212: 4c 89 f7                      movq    %r14, %rdi
// 215: ff d0                         callq   *%rax
// 217: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 21c: 49 8b 06                      movq    (%r14), %rax
// 21f: 48 85 c0                      testq   %rax, %rax
// 222: 7f 21                         jg      0x245 <_JIT_ENTRY+0x245>
// 224: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000226:  R_X86_64_64  .rodata.str1.1
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _Py_NegativeRefcount
// 238: be 95 0a 00 00                movl    $0xa95, %esi            # imm = 0xA95
// 23d: 4c 89 f2                      movq    %r14, %rdx
// 240: ff d0                         callq   *%rax
// 242: 49 8b 06                      movq    (%r14), %rax
// 245: 85 c0                         testl   %eax, %eax
// 247: 78 20                         js      0x269 <_JIT_ENTRY+0x269>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 253: ff d0                         callq   *%rax
// 255: 49 ff 0e                      decq    (%r14)
// 258: 75 0f                         jne     0x269 <_JIT_ENTRY+0x269>
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _Py_Dealloc
// 264: 4c 89 f7                      movq    %r14, %rdi
// 267: ff d0                         callq   *%rax
// 269: 49 8b 04 24                   movq    (%r12), %rax
// 26d: 48 85 c0                      testq   %rax, %rax
// 270: 7f 22                         jg      0x294 <_JIT_ENTRY+0x294>
// 272: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000274:  R_X86_64_64  .rodata.str1.1
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_NegativeRefcount
// 286: be 96 0a 00 00                movl    $0xa96, %esi            # imm = 0xA96
// 28b: 4c 89 e2                      movq    %r12, %rdx
// 28e: ff d0                         callq   *%rax
// 290: 49 8b 04 24                   movq    (%r12), %rax
// 294: 85 c0                         testl   %eax, %eax
// 296: 78 28                         js      0x2c0 <_JIT_ENTRY+0x2c0>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a2: ff d0                         callq   *%rax
// 2a4: 49 ff 0c 24                   decq    (%r12)
// 2a8: 75 16                         jne     0x2c0 <_JIT_ENTRY+0x2c0>
// 2aa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ac:  R_X86_64_64  PyUnicode_Type
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _Py_Dealloc
// 2be: ff d0                         callq   *%rax
// 2c0: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2c5: 48 85 c0                      testq   %rax, %rax
// 2c8: 0f 84 87 fe ff ff             je      0x155 <_JIT_ENTRY+0x155>
// 2ce: 4f 8d 34 ef                   leaq    (%r15,%r13,8), %r14
// 2d2: 48 89 45 00                   movq    %rax, (%rbp)
// 2d6: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 2db: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2df: 48 8b 00                      movq    (%rax), %rax
// 2e2: 84 c0                         testb   %al, %al
// 2e4: 74 1b                         je      0x301 <_JIT_ENTRY+0x301>
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _Py_HandlePending
// 2f0: 4c 89 ff                      movq    %r15, %rdi
// 2f3: ff d0                         callq   *%rax
// 2f5: 85 c0                         testl   %eax, %eax
// 2f7: 74 08                         je      0x301 <_JIT_ENTRY+0x301>
// 2f9: 4c 89 f5                      movq    %r14, %rbp
// 2fc: e9 54 fe ff ff                jmp     0x155 <_JIT_ENTRY+0x155>
// 301: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000303:  R_X86_64_64  _JIT_CONTINUE
// 30b: 48 89 df                      movq    %rbx, %rdi
// 30e: 4c 89 f6                      movq    %r14, %rsi
// 311: 4c 89 fa                      movq    %r15, %rdx
// 314: 48 83 c4 18                   addq    $0x18, %rsp
// 318: 5b                            popq    %rbx
// 319: 41 5c                         popq    %r12
// 31b: 41 5d                         popq    %r13
// 31d: 41 5e                         popq    %r14
// 31f: 41 5f                         popq    %r15
// 321: 5d                            popq    %rbp
// 322: ff e0                         jmpq    *%rax
// 324: 
static const unsigned char _STORE_SUBSCRplus_CALL_STR_1_code_body[805] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x21, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x30, 0x49, 0x83, 0xc7, 0xe8, 0x4c, 0x89, 0xfd, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xeb, 0x78, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x4c, 0x63, 0xe9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x75, 0x1e, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x2c, 0xc7, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x65, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf9, 0x48, 0x29, 0xc1, 0x4c, 0x8b, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x95, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x87, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xef, 0x48, 0x89, 0x45, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4c, 0x89, 0xf5, 0xe9, 0x54, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_CALL_STR_1_code_holes[30] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x303, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CALL_STR_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CALL_STR_1_data_holes[1];

// _STORE_SUBSCRplus_CALL_TUPLE_1
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CALL_TUPLE_1.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 f2                      movq    %r14, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 06                      movq    (%r14), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 f2                      movq    %r14, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 06                      movq    (%r14), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0e                      decq    (%r14)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 f7                      movq    %r14, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 21                         je      0x167 <_JIT_ENTRY+0x167>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 14c: 74 30                         je      0x17e <_JIT_ENTRY+0x17e>
// 14e: 49 83 c7 e8                   addq    $-0x18, %r15
// 152: 4c 89 fd                      movq    %r15, %rbp
// 155: 48 29 dd                      subq    %rbx, %rbp
// 158: 48 83 c5 b8                   addq    $-0x48, %rbp
// 15c: 48 c1 ed 03                   shrq    $0x3, %rbp
// 160: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 163: 31 c0                         xorl    %eax, %eax
// 165: eb 78                         jmp     0x1df <_JIT_ENTRY+0x1df>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_Dealloc
// 171: 4c 89 e7                      movq    %r12, %rdi
// 174: ff d0                         callq   *%rax
// 176: 85 ed                         testl   %ebp, %ebp
// 178: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 17c: 75 d0                         jne     0x14e <_JIT_ENTRY+0x14e>
// 17e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000180:  R_X86_64_64  _JIT_OPARG
// 188: 0f b7 c0                      movzwl  %ax, %eax
// 18b: 89 c1                         movl    %eax, %ecx
// 18d: f7 d1                         notl    %ecx
// 18f: 4c 63 e9                      movslq  %ecx, %r13
// 192: 4b 83 3c ef 00                cmpq    $0x0, (%r15,%r13,8)
// 197: 75 1e                         jne     0x1b7 <_JIT_ENTRY+0x1b7>
// 199: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 19e: 29 c1                         subl    %eax, %ecx
// 1a0: 48 63 c1                      movslq  %ecx, %rax
// 1a3: 49 8d 2c c7                   leaq    (%r15,%rax,8), %rbp
// 1a7: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001a9:  R_X86_64_64  PyTuple_Type
// 1b1: 4c 39 65 00                   cmpq    %r12, (%rbp)
// 1b5: 74 37                         je      0x1ee <_JIT_ENTRY+0x1ee>
// 1b7: 49 29 df                      subq    %rbx, %r15
// 1ba: 49 83 c7 b8                   addq    $-0x48, %r15
// 1be: 49 c1 ef 03                   shrq    $0x3, %r15
// 1c2: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 1c6: 48 8b 03                      movq    (%rbx), %rax
// 1c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cb:  R_X86_64_64  _JIT_TARGET
// 1d3: 89 c9                         movl    %ecx, %ecx
// 1d5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1d9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1df: 48 83 c4 18                   addq    $0x18, %rsp
// 1e3: 5b                            popq    %rbx
// 1e4: 41 5c                         popq    %r12
// 1e6: 41 5d                         popq    %r13
// 1e8: 41 5e                         popq    %r14
// 1ea: 41 5f                         popq    %r15
// 1ec: 5d                            popq    %rbp
// 1ed: c3                            retq
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _JIT_OPARG
// 1f8: 0f b7 c0                      movzwl  %ax, %eax
// 1fb: 48 c1 e0 03                   shlq    $0x3, %rax
// 1ff: 4c 89 f9                      movq    %r15, %rcx
// 202: 48 29 c1                      subq    %rax, %rcx
// 205: 4c 8b 31                      movq    (%rcx), %r14
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  PySequence_Tuple
// 212: 4c 89 f7                      movq    %r14, %rdi
// 215: ff d0                         callq   *%rax
// 217: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 21c: 49 8b 06                      movq    (%r14), %rax
// 21f: 48 85 c0                      testq   %rax, %rax
// 222: 7f 21                         jg      0x245 <_JIT_ENTRY+0x245>
// 224: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000226:  R_X86_64_64  .rodata.str1.1
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _Py_NegativeRefcount
// 238: be ad 0a 00 00                movl    $0xaad, %esi            # imm = 0xAAD
// 23d: 4c 89 f2                      movq    %r14, %rdx
// 240: ff d0                         callq   *%rax
// 242: 49 8b 06                      movq    (%r14), %rax
// 245: 85 c0                         testl   %eax, %eax
// 247: 78 20                         js      0x269 <_JIT_ENTRY+0x269>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 253: ff d0                         callq   *%rax
// 255: 49 ff 0e                      decq    (%r14)
// 258: 75 0f                         jne     0x269 <_JIT_ENTRY+0x269>
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _Py_Dealloc
// 264: 4c 89 f7                      movq    %r14, %rdi
// 267: ff d0                         callq   *%rax
// 269: 49 8b 04 24                   movq    (%r12), %rax
// 26d: 48 85 c0                      testq   %rax, %rax
// 270: 7f 22                         jg      0x294 <_JIT_ENTRY+0x294>
// 272: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000274:  R_X86_64_64  .rodata.str1.1
// 27c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027e:  R_X86_64_64  _Py_NegativeRefcount
// 286: be ae 0a 00 00                movl    $0xaae, %esi            # imm = 0xAAE
// 28b: 4c 89 e2                      movq    %r12, %rdx
// 28e: ff d0                         callq   *%rax
// 290: 49 8b 04 24                   movq    (%r12), %rax
// 294: 85 c0                         testl   %eax, %eax
// 296: 78 28                         js      0x2c0 <_JIT_ENTRY+0x2c0>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a2: ff d0                         callq   *%rax
// 2a4: 49 ff 0c 24                   decq    (%r12)
// 2a8: 75 16                         jne     0x2c0 <_JIT_ENTRY+0x2c0>
// 2aa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ac:  R_X86_64_64  PyTuple_Type
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _Py_Dealloc
// 2be: ff d0                         callq   *%rax
// 2c0: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 2c5: 48 85 c0                      testq   %rax, %rax
// 2c8: 0f 84 87 fe ff ff             je      0x155 <_JIT_ENTRY+0x155>
// 2ce: 4f 8d 34 ef                   leaq    (%r15,%r13,8), %r14
// 2d2: 48 89 45 00                   movq    %rax, (%rbp)
// 2d6: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 2db: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2df: 48 8b 00                      movq    (%rax), %rax
// 2e2: 84 c0                         testb   %al, %al
// 2e4: 74 1b                         je      0x301 <_JIT_ENTRY+0x301>
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _Py_HandlePending
// 2f0: 4c 89 ff                      movq    %r15, %rdi
// 2f3: ff d0                         callq   *%rax
// 2f5: 85 c0                         testl   %eax, %eax
// 2f7: 74 08                         je      0x301 <_JIT_ENTRY+0x301>
// 2f9: 4c 89 f5                      movq    %r14, %rbp
// 2fc: e9 54 fe ff ff                jmp     0x155 <_JIT_ENTRY+0x155>
// 301: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000303:  R_X86_64_64  _JIT_CONTINUE
// 30b: 48 89 df                      movq    %rbx, %rdi
// 30e: 4c 89 f6                      movq    %r14, %rsi
// 311: 4c 89 fa                      movq    %r15, %rdx
// 314: 48 83 c4 18                   addq    $0x18, %rsp
// 318: 5b                            popq    %rbx
// 319: 41 5c                         popq    %r12
// 31b: 41 5d                         popq    %r13
// 31d: 41 5e                         popq    %r14
// 31f: 41 5f                         popq    %r15
// 321: 5d                            popq    %rbp
// 322: ff e0                         jmpq    *%rax
// 324: 
static const unsigned char _STORE_SUBSCRplus_CALL_TUPLE_1_code_body[805] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x21, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x30, 0x49, 0x83, 0xc7, 0xe8, 0x4c, 0x89, 0xfd, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0xeb, 0x78, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x4c, 0x63, 0xe9, 0x4b, 0x83, 0x3c, 0xef, 0x00, 0x75, 0x1e, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8d, 0x2c, 0xc7, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x39, 0x65, 0x00, 0x74, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf9, 0x48, 0x29, 0xc1, 0x4c, 0x8b, 0x31, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xad, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x87, 0xfe, 0xff, 0xff, 0x4f, 0x8d, 0x34, 0xef, 0x48, 0x89, 0x45, 0x00, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x08, 0x4c, 0x89, 0xf5, 0xe9, 0x54, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_CALL_TUPLE_1_code_holes[30] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Tuple, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x274, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x303, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CALL_TUPLE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CALL_TUPLE_1_data_holes[1];

// _STORE_SUBSCRplus_CALL_TYPE_1
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CALL_TYPE_1.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1e                         je      0x160 <_JIT_ENTRY+0x160>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 2d                         je      0x177 <_JIT_ENTRY+0x177>
// 14a: 49 29 de                      subq    %rbx, %r14
// 14d: 49 83 c6 a0                   addq    $-0x60, %r14
// 151: 49 c1 ee 03                   shrq    $0x3, %r14
// 155: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: e9 81 00 00 00                jmp     0x1e1 <_JIT_ENTRY+0x1e1>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_Dealloc
// 16a: 4c 89 e7                      movq    %r12, %rdi
// 16d: ff d0                         callq   *%rax
// 16f: 85 ed                         testl   %ebp, %ebp
// 171: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 175: 75 d3                         jne     0x14a <_JIT_ENTRY+0x14a>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _JIT_OPARG
// 181: f7 d0                         notl    %eax
// 183: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 188: 4c 63 f8                      movslq  %eax, %r15
// 18b: 4b 83 3c fe 00                cmpq    $0x0, (%r14,%r15,8)
// 190: 75 27                         jne     0x1b9 <_JIT_ENTRY+0x1b9>
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _JIT_OPARG
// 19c: 0f b7 c0                      movzwl  %ax, %eax
// 19f: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a4: 29 c1                         subl    %eax, %ecx
// 1a6: 48 63 c1                      movslq  %ecx, %rax
// 1a9: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001ab:  R_X86_64_64  PyType_Type
// 1b3: 4d 39 24 c6                   cmpq    %r12, (%r14,%rax,8)
// 1b7: 74 37                         je      0x1f0 <_JIT_ENTRY+0x1f0>
// 1b9: 49 29 de                      subq    %rbx, %r14
// 1bc: 49 83 c6 b8                   addq    $-0x48, %r14
// 1c0: 49 c1 ee 03                   shrq    $0x3, %r14
// 1c4: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1c8: 48 8b 03                      movq    (%rbx), %rax
// 1cb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cd:  R_X86_64_64  _JIT_TARGET
// 1d5: 89 c9                         movl    %ecx, %ecx
// 1d7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1db: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1e1: 48 83 c4 08                   addq    $0x8, %rsp
// 1e5: 5b                            popq    %rbx
// 1e6: 41 5c                         popq    %r12
// 1e8: 41 5d                         popq    %r13
// 1ea: 41 5e                         popq    %r14
// 1ec: 41 5f                         popq    %r15
// 1ee: 5d                            popq    %rbp
// 1ef: c3                            retq
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _JIT_OPARG
// 1fa: 0f b7 c0                      movzwl  %ax, %eax
// 1fd: 48 c1 e0 03                   shlq    $0x3, %rax
// 201: 4c 89 f1                      movq    %r14, %rcx
// 204: 48 29 c1                      subq    %rax, %rcx
// 207: 4c 8b 29                      movq    (%rcx), %r13
// 20a: 49 8b 6d 08                   movq    0x8(%r13), %rbp
// 20e: 8b 45 00                      movl    (%rbp), %eax
// 211: ff c0                         incl    %eax
// 213: 75 0f                         jne     0x224 <_JIT_ENTRY+0x224>
// 215: 49 8b 45 00                   movq    (%r13), %rax
// 219: 48 85 c0                      testq   %rax, %rax
// 21c: 7e 1e                         jle     0x23c <_JIT_ENTRY+0x23c>
// 21e: 85 c0                         testl   %eax, %eax
// 220: 79 40                         jns     0x262 <_JIT_ENTRY+0x262>
// 222: eb 5f                         jmp     0x283 <_JIT_ENTRY+0x283>
// 224: 89 45 00                      movl    %eax, (%rbp)
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 231: ff d0                         callq   *%rax
// 233: 49 8b 45 00                   movq    (%r13), %rax
// 237: 48 85 c0                      testq   %rax, %rax
// 23a: 7f e2                         jg      0x21e <_JIT_ENTRY+0x21e>
// 23c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023e:  R_X86_64_64  .rodata.str1.1
// 246: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000248:  R_X86_64_64  _Py_NegativeRefcount
// 250: be 7f 0a 00 00                movl    $0xa7f, %esi            # imm = 0xA7F
// 255: 4c 89 ea                      movq    %r13, %rdx
// 258: ff d0                         callq   *%rax
// 25a: 49 8b 45 00                   movq    (%r13), %rax
// 25e: 85 c0                         testl   %eax, %eax
// 260: 78 21                         js      0x283 <_JIT_ENTRY+0x283>
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26c: ff d0                         callq   *%rax
// 26e: 49 ff 4d 00                   decq    (%r13)
// 272: 75 0f                         jne     0x283 <_JIT_ENTRY+0x283>
// 274: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000276:  R_X86_64_64  _Py_Dealloc
// 27e: 4c 89 ef                      movq    %r13, %rdi
// 281: ff d0                         callq   *%rax
// 283: 49 8b 04 24                   movq    (%r12), %rax
// 287: 48 85 c0                      testq   %rax, %rax
// 28a: 7f 22                         jg      0x2ae <_JIT_ENTRY+0x2ae>
// 28c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028e:  R_X86_64_64  .rodata.str1.1
// 296: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000298:  R_X86_64_64  _Py_NegativeRefcount
// 2a0: be 80 0a 00 00                movl    $0xa80, %esi            # imm = 0xA80
// 2a5: 4c 89 e2                      movq    %r12, %rdx
// 2a8: ff d0                         callq   *%rax
// 2aa: 49 8b 04 24                   movq    (%r12), %rax
// 2ae: 4f 8d 3c fe                   leaq    (%r14,%r15,8), %r15
// 2b2: 85 c0                         testl   %eax, %eax
// 2b4: 78 28                         js      0x2de <_JIT_ENTRY+0x2de>
// 2b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c0: ff d0                         callq   *%rax
// 2c2: 49 ff 0c 24                   decq    (%r12)
// 2c6: 75 16                         jne     0x2de <_JIT_ENTRY+0x2de>
// 2c8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ca:  R_X86_64_64  PyType_Type
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_Dealloc
// 2dc: ff d0                         callq   *%rax
// 2de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e0:  R_X86_64_64  _JIT_OPARG
// 2e8: 0f b7 c0                      movzwl  %ax, %eax
// 2eb: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 2f0: 29 c1                         subl    %eax, %ecx
// 2f2: 48 63 c1                      movslq  %ecx, %rax
// 2f5: 49 89 2c c6                   movq    %rbp, (%r14,%rax,8)
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _JIT_CONTINUE
// 303: 48 89 df                      movq    %rbx, %rdi
// 306: 4c 89 fe                      movq    %r15, %rsi
// 309: 48 8b 14 24                   movq    (%rsp), %rdx
// 30d: 48 83 c4 08                   addq    $0x8, %rsp
// 311: 5b                            popq    %rbx
// 312: 41 5c                         popq    %r12
// 314: 41 5d                         popq    %r13
// 316: 41 5e                         popq    %r14
// 318: 41 5f                         popq    %r15
// 31a: 5d                            popq    %rbp
// 31b: ff e0                         jmpq    *%rax
// 31d: 
static const unsigned char _STORE_SUBSCRplus_CALL_TYPE_1_code_body[798] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1e, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x2d, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xd3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x4b, 0x83, 0x3c, 0xfe, 0x00, 0x75, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x24, 0xc6, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x4c, 0x8b, 0x29, 0x49, 0x8b, 0x6d, 0x08, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7f, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4f, 0x8d, 0x3c, 0xfe, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x89, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_CALL_TYPE_1_code_holes[31] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x248, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x276, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x298, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CALL_TYPE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CALL_TYPE_1_data_holes[1];

// _STORE_SUBSCRplus_CHECK_ATTR_CLASS
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CHECK_ATTR_CLASS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1e                         je      0x160 <_JIT_ENTRY+0x160>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2d                         je      0x177 <_JIT_ENTRY+0x177>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: e9 86 00 00 00                jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_Dealloc
// 16a: 4c 89 e7                      movq    %r12, %rdi
// 16d: ff d0                         callq   *%rax
// 16f: 85 ed                         testl   %ebp, %ebp
// 171: 49 0f 44 df                   cmoveq  %r15, %rbx
// 175: 75 d3                         jne     0x14a <_JIT_ENTRY+0x14a>
// 177: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 17b: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 17f: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
// 186: 74 36                         je      0x1be <_JIT_ENTRY+0x1be>
// 188: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018a:  R_X86_64_64  _JIT_OPERAND
// 192: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 198: 75 24                         jne     0x1be <_JIT_ENTRY+0x1be>
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  _JIT_CONTINUE
// 1a4: 4c 89 f7                      movq    %r14, %rdi
// 1a7: 48 89 de                      movq    %rbx, %rsi
// 1aa: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ae: 48 83 c4 08                   addq    $0x8, %rsp
// 1b2: 5b                            popq    %rbx
// 1b3: 41 5c                         popq    %r12
// 1b5: 41 5d                         popq    %r13
// 1b7: 41 5e                         popq    %r14
// 1b9: 41 5f                         popq    %r15
// 1bb: 5d                            popq    %rbp
// 1bc: ff e0                         jmpq    *%rax
// 1be: 4c 29 f3                      subq    %r14, %rbx
// 1c1: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1c5: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1c9: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1cd: 49 8b 06                      movq    (%r14), %rax
// 1d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d2:  R_X86_64_64  _JIT_TARGET
// 1da: 89 c9                         movl    %ecx, %ecx
// 1dc: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1e0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1e6: 48 83 c4 08                   addq    $0x8, %rsp
// 1ea: 5b                            popq    %rbx
// 1eb: 41 5c                         popq    %r12
// 1ed: 41 5d                         popq    %r13
// 1ef: 41 5e                         popq    %r14
// 1f1: 41 5f                         popq    %r15
// 1f3: 5d                            popq    %rbp
// 1f4: c3                            retq
// 1f5: 
static const unsigned char _STORE_SUBSCRplus_CHECK_ATTR_CLASS_code_body[502] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1e, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2d, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x86, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd3, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x36, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _STORE_SUBSCRplus_CHECK_ATTR_CLASS_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CHECK_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CHECK_ATTR_CLASS_data_holes[1];

// _STORE_SUBSCRplus_CHECK_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CHECK_ATTR_METHOD_LAZY_DICT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1b                         je      0x15d <_JIT_ENTRY+0x15d>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2a                         je      0x174 <_JIT_ENTRY+0x174>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: eb 55                         jmp     0x1b2 <_JIT_ENTRY+0x1b2>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 ed                         testl   %ebp, %ebp
// 16e: 49 0f 44 df                   cmoveq  %r15, %rbx
// 172: 75 d6                         jne     0x14a <_JIT_ENTRY+0x14a>
// 174: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 178: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 17c: 48 8b 89 20 01 00 00          movq    0x120(%rcx), %rcx
// 183: 48 83 3c 08 00                cmpq    $0x0, (%rax,%rcx)
// 188: 74 37                         je      0x1c1 <_JIT_ENTRY+0x1c1>
// 18a: 4c 29 f3                      subq    %r14, %rbx
// 18d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 191: 48 c1 eb 03                   shrq    $0x3, %rbx
// 195: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 199: 49 8b 06                      movq    (%r14), %rax
// 19c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019e:  R_X86_64_64  _JIT_TARGET
// 1a6: 89 c9                         movl    %ecx, %ecx
// 1a8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1ac: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b2: 48 83 c4 08                   addq    $0x8, %rsp
// 1b6: 5b                            popq    %rbx
// 1b7: 41 5c                         popq    %r12
// 1b9: 41 5d                         popq    %r13
// 1bb: 41 5e                         popq    %r14
// 1bd: 41 5f                         popq    %r15
// 1bf: 5d                            popq    %rbp
// 1c0: c3                            retq
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _JIT_CONTINUE
// 1cb: 4c 89 f7                      movq    %r14, %rdi
// 1ce: 48 89 de                      movq    %rbx, %rsi
// 1d1: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d5: 48 83 c4 08                   addq    $0x8, %rsp
// 1d9: 5b                            popq    %rbx
// 1da: 41 5c                         popq    %r12
// 1dc: 41 5d                         popq    %r13
// 1de: 41 5e                         popq    %r14
// 1e0: 41 5f                         popq    %r15
// 1e2: 5d                            popq    %rbp
// 1e3: ff e0                         jmpq    *%rax
// 1e5: 
static const unsigned char _STORE_SUBSCRplus_CHECK_ATTR_METHOD_LAZY_DICT_code_body[486] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2a, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x55, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd6, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0x48, 0x8b, 0x89, 0x20, 0x01, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x08, 0x00, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_CHECK_ATTR_METHOD_LAZY_DICT_code_holes[16] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CHECK_ATTR_METHOD_LAZY_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CHECK_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _STORE_SUBSCRplus_CHECK_ATTR_MODULE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CHECK_ATTR_MODULE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1e                         je      0x160 <_JIT_ENTRY+0x160>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2d                         je      0x177 <_JIT_ENTRY+0x177>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: e9 8e 00 00 00                jmp     0x1ee <_JIT_ENTRY+0x1ee>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_Dealloc
// 16a: 4c 89 e7                      movq    %r12, %rdi
// 16d: ff d0                         callq   *%rax
// 16f: 85 ed                         testl   %ebp, %ebp
// 171: 49 0f 44 df                   cmoveq  %r15, %rbx
// 175: 75 d3                         jne     0x14a <_JIT_ENTRY+0x14a>
// 177: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 17b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017d:  R_X86_64_64  PyModule_Type
// 185: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 189: 75 3b                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 18b: 48 8b 40 10                   movq    0x10(%rax), %rax
// 18f: 48 8b 40 20                   movq    0x20(%rax), %rax
// 193: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000195:  R_X86_64_64  _JIT_OPERAND
// 19d: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 1a0: 75 24                         jne     0x1c6 <_JIT_ENTRY+0x1c6>
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _JIT_CONTINUE
// 1ac: 4c 89 f7                      movq    %r14, %rdi
// 1af: 48 89 de                      movq    %rbx, %rsi
// 1b2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1b6: 48 83 c4 08                   addq    $0x8, %rsp
// 1ba: 5b                            popq    %rbx
// 1bb: 41 5c                         popq    %r12
// 1bd: 41 5d                         popq    %r13
// 1bf: 41 5e                         popq    %r14
// 1c1: 41 5f                         popq    %r15
// 1c3: 5d                            popq    %rbp
// 1c4: ff e0                         jmpq    *%rax
// 1c6: 4c 29 f3                      subq    %r14, %rbx
// 1c9: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1cd: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1d1: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1d5: 49 8b 06                      movq    (%r14), %rax
// 1d8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001da:  R_X86_64_64  _JIT_TARGET
// 1e2: 89 c9                         movl    %ecx, %ecx
// 1e4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1e8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ee: 48 83 c4 08                   addq    $0x8, %rsp
// 1f2: 5b                            popq    %rbx
// 1f3: 41 5c                         popq    %r12
// 1f5: 41 5d                         popq    %r13
// 1f7: 41 5e                         popq    %r14
// 1f9: 41 5f                         popq    %r15
// 1fb: 5d                            popq    %rbp
// 1fc: c3                            retq
// 1fd: 
static const unsigned char _STORE_SUBSCRplus_CHECK_ATTR_MODULE_code_body[510] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1e, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2d, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd3, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x3b, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _STORE_SUBSCRplus_CHECK_ATTR_MODULE_code_holes[18] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyModule_Type, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CHECK_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CHECK_ATTR_MODULE_data_holes[1];

// _STORE_SUBSCRplus_CHECK_ATTR_WITH_HINT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CHECK_ATTR_WITH_HINT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1b                         je      0x15d <_JIT_ENTRY+0x15d>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2a                         je      0x174 <_JIT_ENTRY+0x174>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: eb 74                         jmp     0x1d1 <_JIT_ENTRY+0x1d1>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 ed                         testl   %ebp, %ebp
// 16e: 49 0f 44 df                   cmoveq  %r15, %rbx
// 172: 75 d6                         jne     0x14a <_JIT_ENTRY+0x14a>
// 174: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 178: 48 8b 40 e8                   movq    -0x18(%rax), %rax
// 17c: a8 01                         testb   $0x1, %al
// 17e: 75 29                         jne     0x1a9 <_JIT_ENTRY+0x1a9>
// 180: 48 85 c0                      testq   %rax, %rax
// 183: 74 24                         je      0x1a9 <_JIT_ENTRY+0x1a9>
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _JIT_CONTINUE
// 18f: 4c 89 f7                      movq    %r14, %rdi
// 192: 48 89 de                      movq    %rbx, %rsi
// 195: 48 8b 14 24                   movq    (%rsp), %rdx
// 199: 48 83 c4 08                   addq    $0x8, %rsp
// 19d: 5b                            popq    %rbx
// 19e: 41 5c                         popq    %r12
// 1a0: 41 5d                         popq    %r13
// 1a2: 41 5e                         popq    %r14
// 1a4: 41 5f                         popq    %r15
// 1a6: 5d                            popq    %rbp
// 1a7: ff e0                         jmpq    *%rax
// 1a9: 4c 29 f3                      subq    %r14, %rbx
// 1ac: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1b0: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1b4: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1b8: 49 8b 06                      movq    (%r14), %rax
// 1bb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bd:  R_X86_64_64  _JIT_TARGET
// 1c5: 89 c9                         movl    %ecx, %ecx
// 1c7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1cb: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1d1: 48 83 c4 08                   addq    $0x8, %rsp
// 1d5: 5b                            popq    %rbx
// 1d6: 41 5c                         popq    %r12
// 1d8: 41 5d                         popq    %r13
// 1da: 41 5e                         popq    %r14
// 1dc: 41 5f                         popq    %r15
// 1de: 5d                            popq    %rbp
// 1df: c3                            retq
// 1e0: 
static const unsigned char _STORE_SUBSCRplus_CHECK_ATTR_WITH_HINT_code_body[481] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2a, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x74, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd6, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x40, 0xe8, 0xa8, 0x01, 0x75, 0x29, 0x48, 0x85, 0xc0, 0x74, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _STORE_SUBSCRplus_CHECK_ATTR_WITH_HINT_code_holes[16] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CHECK_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CHECK_ATTR_WITH_HINT_data_holes[1];

// _STORE_SUBSCRplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1e                         je      0x160 <_JIT_ENTRY+0x160>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2d                         je      0x177 <_JIT_ENTRY+0x177>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: e9 84 00 00 00                jmp     0x1e4 <_JIT_ENTRY+0x1e4>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_Dealloc
// 16a: 4c 89 e7                      movq    %r12, %rdi
// 16d: ff d0                         callq   *%rax
// 16f: 85 ed                         testl   %ebp, %ebp
// 171: 49 0f 44 df                   cmoveq  %r15, %rbx
// 175: 75 d3                         jne     0x14a <_JIT_ENTRY+0x14a>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _JIT_OPARG
// 181: f7 d0                         notl    %eax
// 183: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 188: 48 98                         cltq
// 18a: 48 83 3c c3 00                cmpq    $0x0, (%rbx,%rax,8)
// 18f: 75 2b                         jne     0x1bc <_JIT_ENTRY+0x1bc>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 c0                      movzwl  %ax, %eax
// 19e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1a3: 29 c1                         subl    %eax, %ecx
// 1a5: 48 63 c1                      movslq  %ecx, %rax
// 1a8: 48 8b 04 c3                   movq    (%rbx,%rax,8), %rax
// 1ac: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ae:  R_X86_64_64  PyMethod_Type
// 1b6: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 1ba: 74 37                         je      0x1f3 <_JIT_ENTRY+0x1f3>
// 1bc: 4c 29 f3                      subq    %r14, %rbx
// 1bf: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1c3: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1c7: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1cb: 49 8b 06                      movq    (%r14), %rax
// 1ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d0:  R_X86_64_64  _JIT_TARGET
// 1d8: 89 c9                         movl    %ecx, %ecx
// 1da: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1de: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1e4: 48 83 c4 08                   addq    $0x8, %rsp
// 1e8: 5b                            popq    %rbx
// 1e9: 41 5c                         popq    %r12
// 1eb: 41 5d                         popq    %r13
// 1ed: 41 5e                         popq    %r14
// 1ef: 41 5f                         popq    %r15
// 1f1: 5d                            popq    %rbp
// 1f2: c3                            retq
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _JIT_CONTINUE
// 1fd: 4c 89 f7                      movq    %r14, %rdi
// 200: 48 89 de                      movq    %rbx, %rsi
// 203: 48 8b 14 24                   movq    (%rsp), %rdx
// 207: 48 83 c4 08                   addq    $0x8, %rsp
// 20b: 5b                            popq    %rbx
// 20c: 41 5c                         popq    %r12
// 20e: 41 5d                         popq    %r13
// 210: 41 5e                         popq    %r14
// 212: 41 5f                         popq    %r15
// 214: 5d                            popq    %rbp
// 215: ff e0                         jmpq    *%rax
// 217: 
static const unsigned char _STORE_SUBSCRplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_body[536] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1e, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2d, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x84, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x83, 0x3c, 0xc3, 0x00, 0x75, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x04, 0xc3, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[19] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethod_Type, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _STORE_SUBSCRplus_CHECK_EG_MATCH
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CHECK_EG_MATCH.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f6                      movq    %rsi, %r14
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 fa                      movq    %r15, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 07                      movq    (%r15), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 fa                      movq    %r15, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 07                      movq    (%r15), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0f                      decq    (%r15)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 ff                      movq    %r15, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 2f                         je      0x175 <_JIT_ENTRY+0x175>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 14c: 74 3e                         je      0x18c <_JIT_ENTRY+0x18c>
// 14e: 49 83 c6 f8                   addq    $-0x8, %r14
// 152: 4d 89 f7                      movq    %r14, %r15
// 155: 49 29 df                      subq    %rbx, %r15
// 158: 49 83 c7 a8                   addq    $-0x58, %r15
// 15c: 49 c1 ef 03                   shrq    $0x3, %r15
// 160: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 164: 31 c0                         xorl    %eax, %eax
// 166: 48 83 c4 18                   addq    $0x18, %rsp
// 16a: 5b                            popq    %rbx
// 16b: 41 5c                         popq    %r12
// 16d: 41 5d                         popq    %r13
// 16f: 41 5e                         popq    %r14
// 171: 41 5f                         popq    %r15
// 173: 5d                            popq    %rbp
// 174: c3                            retq
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 e7                      movq    %r12, %rdi
// 182: ff d0                         callq   *%rax
// 184: 85 ed                         testl   %ebp, %ebp
// 186: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 18a: 75 c2                         jne     0x14e <_JIT_ENTRY+0x14e>
// 18c: 4d 8b 6e f0                   movq    -0x10(%r14), %r13
// 190: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// 19e: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1a3: 4c 89 e6                      movq    %r12, %rsi
// 1a6: ff d0                         callq   *%rax
// 1a8: 85 c0                         testl   %eax, %eax
// 1aa: 0f 88 33 01 00 00             js      0x2e3 <_JIT_ENTRY+0x2e3>
// 1b0: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
// 1b8: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// 1cb: 48 89 e2                      movq    %rsp, %rdx
// 1ce: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// 1d3: 4c 89 ef                      movq    %r13, %rdi
// 1d6: 4c 89 e6                      movq    %r12, %rsi
// 1d9: ff d0                         callq   *%rax
// 1db: 89 c5                         movl    %eax, %ebp
// 1dd: 49 8b 45 00                   movq    (%r13), %rax
// 1e1: 48 85 c0                      testq   %rax, %rax
// 1e4: 7f 22                         jg      0x208 <_JIT_ENTRY+0x208>
// 1e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e8:  R_X86_64_64  .rodata.str1.1
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _Py_NegativeRefcount
// 1fa: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 1ff: 4c 89 ea                      movq    %r13, %rdx
// 202: ff d0                         callq   *%rax
// 204: 49 8b 45 00                   movq    (%r13), %rax
// 208: 85 c0                         testl   %eax, %eax
// 20a: 78 21                         js      0x22d <_JIT_ENTRY+0x22d>
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 216: ff d0                         callq   *%rax
// 218: 49 ff 4d 00                   decq    (%r13)
// 21c: 75 0f                         jne     0x22d <_JIT_ENTRY+0x22d>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _Py_Dealloc
// 228: 4c 89 ef                      movq    %r13, %rdi
// 22b: ff d0                         callq   *%rax
// 22d: 49 8b 04 24                   movq    (%r12), %rax
// 231: 48 85 c0                      testq   %rax, %rax
// 234: 7f 22                         jg      0x258 <_JIT_ENTRY+0x258>
// 236: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000238:  R_X86_64_64  .rodata.str1.1
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _Py_NegativeRefcount
// 24a: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 24f: 4c 89 e2                      movq    %r12, %rdx
// 252: ff d0                         callq   *%rax
// 254: 49 8b 04 24                   movq    (%r12), %rax
// 258: 85 c0                         testl   %eax, %eax
// 25a: 78 21                         js      0x27d <_JIT_ENTRY+0x27d>
// 25c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 266: ff d0                         callq   *%rax
// 268: 49 ff 0c 24                   decq    (%r12)
// 26c: 75 0f                         jne     0x27d <_JIT_ENTRY+0x27d>
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_Dealloc
// 278: 4c 89 e7                      movq    %r12, %rdi
// 27b: ff d0                         callq   *%rax
// 27d: 85 ed                         testl   %ebp, %ebp
// 27f: 0f 88 d0 fe ff ff             js      0x155 <_JIT_ENTRY+0x155>
// 285: 48 8b 3c 24                   movq    (%rsp), %rdi
// 289: 48 85 ff                      testq   %rdi, %rdi
// 28c: 0f 84 c3 fe ff ff             je      0x155 <_JIT_ENTRY+0x155>
// 292: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000294:  R_X86_64_64  _Py_NoneStruct
// 29c: 48 39 c7                      cmpq    %rax, %rdi
// 29f: 74 10                         je      0x2b1 <_JIT_ENTRY+0x2b1>
// 2a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a3:  R_X86_64_64  PyErr_SetHandledException
// 2ab: ff d0                         callq   *%rax
// 2ad: 48 8b 04 24                   movq    (%rsp), %rax
// 2b1: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 2b6: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 2ba: 49 89 46 f8                   movq    %rax, -0x8(%r14)
// 2be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c0:  R_X86_64_64  _JIT_CONTINUE
// 2c8: 48 89 df                      movq    %rbx, %rdi
// 2cb: 4c 89 f6                      movq    %r14, %rsi
// 2ce: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2d3: 48 83 c4 18                   addq    $0x18, %rsp
// 2d7: 5b                            popq    %rbx
// 2d8: 41 5c                         popq    %r12
// 2da: 41 5d                         popq    %r13
// 2dc: 41 5e                         popq    %r14
// 2de: 41 5f                         popq    %r15
// 2e0: 5d                            popq    %rbp
// 2e1: ff e0                         jmpq    *%rax
// 2e3: 49 8b 45 00                   movq    (%r13), %rax
// 2e7: 48 85 c0                      testq   %rax, %rax
// 2ea: 7f 22                         jg      0x30e <_JIT_ENTRY+0x30e>
// 2ec: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ee:  R_X86_64_64  .rodata.str1.1
// 2f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f8:  R_X86_64_64  _Py_NegativeRefcount
// 300: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 305: 4c 89 ea                      movq    %r13, %rdx
// 308: ff d0                         callq   *%rax
// 30a: 49 8b 45 00                   movq    (%r13), %rax
// 30e: 85 c0                         testl   %eax, %eax
// 310: 78 21                         js      0x333 <_JIT_ENTRY+0x333>
// 312: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000314:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 31c: ff d0                         callq   *%rax
// 31e: 49 ff 4d 00                   decq    (%r13)
// 322: 75 0f                         jne     0x333 <_JIT_ENTRY+0x333>
// 324: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000326:  R_X86_64_64  _Py_Dealloc
// 32e: 4c 89 ef                      movq    %r13, %rdi
// 331: ff d0                         callq   *%rax
// 333: 49 8b 04 24                   movq    (%r12), %rax
// 337: 48 85 c0                      testq   %rax, %rax
// 33a: 7f 22                         jg      0x35e <_JIT_ENTRY+0x35e>
// 33c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000033e:  R_X86_64_64  .rodata.str1.1
// 346: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000348:  R_X86_64_64  _Py_NegativeRefcount
// 350: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 355: 4c 89 e2                      movq    %r12, %rdx
// 358: ff d0                         callq   *%rax
// 35a: 49 8b 04 24                   movq    (%r12), %rax
// 35e: 85 c0                         testl   %eax, %eax
// 360: 0f 88 ef fd ff ff             js      0x155 <_JIT_ENTRY+0x155>
// 366: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000368:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 370: ff d0                         callq   *%rax
// 372: 49 ff 0c 24                   decq    (%r12)
// 376: 0f 85 d9 fd ff ff             jne     0x155 <_JIT_ENTRY+0x155>
// 37c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037e:  R_X86_64_64  _Py_Dealloc
// 386: 4c 89 e7                      movq    %r12, %rdi
// 389: ff d0                         callq   *%rax
// 38b: e9 c5 fd ff ff                jmp     0x155 <_JIT_ENTRY+0x155>
// 390: 
static const unsigned char _STORE_SUBSCRplus_CHECK_EG_MATCH_code_body[913] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x3e, 0x49, 0x83, 0xc6, 0xf8, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xa8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xc2, 0x4d, 0x8b, 0x6e, 0xf0, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x33, 0x01, 0x00, 0x00, 0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x88, 0xd0, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xc3, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x49, 0x89, 0x4e, 0xf0, 0x49, 0x89, 0x46, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xef, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xd9, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xc5, 0xfd, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_CHECK_EG_MATCH_code_holes[35] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x2c0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x314, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x326, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x348, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x368, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x37e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CHECK_EG_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CHECK_EG_MATCH_data_holes[1];

// _STORE_SUBSCRplus_CHECK_EXC_MATCH
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CHECK_EXC_MATCH.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c6 f0                   addq    $-0x10, %r14
// 14e: 4d 89 f5                      movq    %r14, %r13
// 151: 49 29 dd                      subq    %rbx, %r13
// 154: 49 83 c5 b0                   addq    $-0x50, %r13
// 158: 49 c1 ed 03                   shrq    $0x3, %r13
// 15c: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 4d 8b 7e f0                   movq    -0x10(%r14), %r15
// 18c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _PyEval_CheckExceptTypeValid
// 19a: 48 8b 3c 24                   movq    (%rsp), %rdi
// 19e: 4c 89 e6                      movq    %r12, %rsi
// 1a1: ff d0                         callq   *%rax
// 1a3: 85 c0                         testl   %eax, %eax
// 1a5: 0f 88 a6 00 00 00             js      0x251 <_JIT_ENTRY+0x251>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  PyErr_GivenExceptionMatches
// 1b5: 4c 89 ff                      movq    %r15, %rdi
// 1b8: 4c 89 e6                      movq    %r12, %rsi
// 1bb: ff d0                         callq   *%rax
// 1bd: 89 c5                         movl    %eax, %ebp
// 1bf: 49 8b 04 24                   movq    (%r12), %rax
// 1c3: 48 85 c0                      testq   %rax, %rax
// 1c6: 7f 22                         jg      0x1ea <_JIT_ENTRY+0x1ea>
// 1c8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ca:  R_X86_64_64  .rodata.str1.1
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: be da 07 00 00                movl    $0x7da, %esi            # imm = 0x7DA
// 1e1: 4c 89 e2                      movq    %r12, %rdx
// 1e4: ff d0                         callq   *%rax
// 1e6: 49 8b 04 24                   movq    (%r12), %rax
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 21                         js      0x20f <_JIT_ENTRY+0x20f>
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f8: ff d0                         callq   *%rax
// 1fa: 49 ff 0c 24                   decq    (%r12)
// 1fe: 75 0f                         jne     0x20f <_JIT_ENTRY+0x20f>
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _Py_Dealloc
// 20a: 4c 89 e7                      movq    %r12, %rdi
// 20d: ff d0                         callq   *%rax
// 20f: 85 ed                         testl   %ebp, %ebp
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_FalseStruct
// 21b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021d:  R_X86_64_64  _Py_TrueStruct
// 225: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 229: 49 89 4e f8                   movq    %rcx, -0x8(%r14)
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _JIT_CONTINUE
// 237: 48 89 df                      movq    %rbx, %rdi
// 23a: 4c 89 f6                      movq    %r14, %rsi
// 23d: 48 8b 14 24                   movq    (%rsp), %rdx
// 241: 48 83 c4 08                   addq    $0x8, %rsp
// 245: 5b                            popq    %rbx
// 246: 41 5c                         popq    %r12
// 248: 41 5d                         popq    %r13
// 24a: 41 5e                         popq    %r14
// 24c: 41 5f                         popq    %r15
// 24e: 5d                            popq    %rbp
// 24f: ff e0                         jmpq    *%rax
// 251: 49 8b 04 24                   movq    (%r12), %rax
// 255: 48 85 c0                      testq   %rax, %rax
// 258: 7f 22                         jg      0x27c <_JIT_ENTRY+0x27c>
// 25a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025c:  R_X86_64_64  .rodata.str1.1
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_NegativeRefcount
// 26e: be d6 07 00 00                movl    $0x7d6, %esi            # imm = 0x7D6
// 273: 4c 89 e2                      movq    %r12, %rdx
// 276: ff d0                         callq   *%rax
// 278: 49 8b 04 24                   movq    (%r12), %rax
// 27c: 85 c0                         testl   %eax, %eax
// 27e: 0f 88 cd fe ff ff             js      0x151 <_JIT_ENTRY+0x151>
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28e: ff d0                         callq   *%rax
// 290: 49 ff 0c 24                   decq    (%r12)
// 294: 0f 85 b7 fe ff ff             jne     0x151 <_JIT_ENTRY+0x151>
// 29a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029c:  R_X86_64_64  _Py_Dealloc
// 2a4: 4c 89 e7                      movq    %r12, %rdi
// 2a7: ff d0                         callq   *%rax
// 2a9: e9 a3 fe ff ff                jmp     0x151 <_JIT_ENTRY+0x151>
// 2ae: 
static const unsigned char _STORE_SUBSCRplus_CHECK_EXC_MATCH_code_body[687] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x6e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x74, 0x3e, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb0, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x75, 0xc2, 0x4d, 0x8b, 0x7e, 0xf0, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xa6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xda, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x4e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xcd, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xb7, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xa3, 0xfe, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_CHECK_EXC_MATCH_code_holes[27] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptTypeValid, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_GivenExceptionMatches, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x29c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CHECK_EXC_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CHECK_EXC_MATCH_data_holes[1];

// _STORE_SUBSCRplus_CHECK_FUNCTION_EXACT_ARGS
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CHECK_FUNCTION_EXACT_ARGS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1e                         je      0x160 <_JIT_ENTRY+0x160>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2d                         je      0x177 <_JIT_ENTRY+0x177>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: e9 c2 00 00 00                jmp     0x222 <_JIT_ENTRY+0x222>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_Dealloc
// 16a: 4c 89 e7                      movq    %r12, %rdi
// 16d: ff d0                         callq   *%rax
// 16f: 85 ed                         testl   %ebp, %ebp
// 171: 49 0f 44 df                   cmoveq  %r15, %rbx
// 175: 75 d3                         jne     0x14a <_JIT_ENTRY+0x14a>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _JIT_OPARG
// 181: 0f b7 c0                      movzwl  %ax, %eax
// 184: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 189: 29 c1                         subl    %eax, %ecx
// 18b: 48 63 c9                      movslq  %ecx, %rcx
// 18e: 48 8b 0c cb                   movq    (%rbx,%rcx,8), %rcx
// 192: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000194:  R_X86_64_64  PyFunction_Type
// 19c: 48 39 51 08                   cmpq    %rdx, 0x8(%rcx)
// 1a0: 75 58                         jne     0x1fa <_JIT_ENTRY+0x1fa>
// 1a2: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001a4:  R_X86_64_64  _JIT_OPERAND
// 1ac: 39 91 88 00 00 00             cmpl    %edx, 0x88(%rcx)
// 1b2: 75 46                         jne     0x1fa <_JIT_ENTRY+0x1fa>
// 1b4: f7 d0                         notl    %eax
// 1b6: 48 98                         cltq
// 1b8: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 1bc: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001be:  R_X86_64_64  _JIT_OPARG
// 1c6: 0f b7 d2                      movzwl  %dx, %edx
// 1c9: 48 83 3c c3 01                cmpq    $0x1, (%rbx,%rax,8)
// 1ce: 83 da ff                      sbbl    $-0x1, %edx
// 1d1: 39 51 34                      cmpl    %edx, 0x34(%rcx)
// 1d4: 75 24                         jne     0x1fa <_JIT_ENTRY+0x1fa>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _JIT_CONTINUE
// 1e0: 4c 89 f7                      movq    %r14, %rdi
// 1e3: 48 89 de                      movq    %rbx, %rsi
// 1e6: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ea: 48 83 c4 08                   addq    $0x8, %rsp
// 1ee: 5b                            popq    %rbx
// 1ef: 41 5c                         popq    %r12
// 1f1: 41 5d                         popq    %r13
// 1f3: 41 5e                         popq    %r14
// 1f5: 41 5f                         popq    %r15
// 1f7: 5d                            popq    %rbp
// 1f8: ff e0                         jmpq    *%rax
// 1fa: 4c 29 f3                      subq    %r14, %rbx
// 1fd: 48 83 c3 b8                   addq    $-0x48, %rbx
// 201: 48 c1 eb 03                   shrq    $0x3, %rbx
// 205: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 209: 49 8b 06                      movq    (%r14), %rax
// 20c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000020e:  R_X86_64_64  _JIT_TARGET
// 216: 89 c9                         movl    %ecx, %ecx
// 218: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 21c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 222: 48 83 c4 08                   addq    $0x8, %rsp
// 226: 5b                            popq    %rbx
// 227: 41 5c                         popq    %r12
// 229: 41 5d                         popq    %r13
// 22b: 41 5e                         popq    %r14
// 22d: 41 5f                         popq    %r15
// 22f: 5d                            popq    %rbp
// 230: c3                            retq
// 231: 
static const unsigned char _STORE_SUBSCRplus_CHECK_FUNCTION_EXACT_ARGS_code_body[562] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1e, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2d, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xc2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x48, 0x8b, 0x0c, 0xcb, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x51, 0x08, 0x75, 0x58, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x91, 0x88, 0x00, 0x00, 0x00, 0x75, 0x46, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x8b, 0x49, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x48, 0x83, 0x3c, 0xc3, 0x01, 0x83, 0xda, 0xff, 0x39, 0x51, 0x34, 0x75, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _STORE_SUBSCRplus_CHECK_FUNCTION_EXACT_ARGS_code_holes[20] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_Type, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CHECK_FUNCTION_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CHECK_FUNCTION_EXACT_ARGS_data_holes[1];

// _STORE_SUBSCRplus_CHECK_MANAGED_OBJECT_HAS_VALUES
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CHECK_MANAGED_OBJECT_HAS_VALUES.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 8b 7b f8                   movq    -0x8(%rbx), %rdi
// 185: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 189: 75 14                         jne     0x19f <_JIT_ENTRY+0x19f>
// 18b: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 199: ff d0                         callq   *%rax
// 19b: 84 c0                         testb   %al, %al
// 19d: 74 24                         je      0x1c3 <_JIT_ENTRY+0x1c3>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _JIT_CONTINUE
// 1a9: 4c 89 f7                      movq    %r14, %rdi
// 1ac: 48 89 de                      movq    %rbx, %rsi
// 1af: 48 8b 14 24                   movq    (%rsp), %rdx
// 1b3: 48 83 c4 08                   addq    $0x8, %rsp
// 1b7: 5b                            popq    %rbx
// 1b8: 41 5c                         popq    %r12
// 1ba: 41 5d                         popq    %r13
// 1bc: 41 5e                         popq    %r14
// 1be: 41 5f                         popq    %r15
// 1c0: 5d                            popq    %rbp
// 1c1: ff e0                         jmpq    *%rax
// 1c3: 4c 29 f3                      subq    %r14, %rbx
// 1c6: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1ca: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1ce: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1d2: 49 8b 06                      movq    (%r14), %rax
// 1d5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d7:  R_X86_64_64  _JIT_TARGET
// 1df: 89 c9                         movl    %ecx, %ecx
// 1e1: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1e5: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1eb: e9 6b ff ff ff                jmp     0x15b <_JIT_ENTRY+0x15b>
// 1f0: 
static const unsigned char _STORE_SUBSCRplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_body[497] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0x8b, 0x7b, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x14, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x74, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x6b, 0xff, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_holes[1];

// _STORE_SUBSCRplus_CHECK_PEP_523
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CHECK_PEP_523.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1b                         je      0x15d <_JIT_ENTRY+0x15d>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2a                         je      0x174 <_JIT_ENTRY+0x174>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: eb 51                         jmp     0x1ae <_JIT_ENTRY+0x1ae>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 ed                         testl   %ebp, %ebp
// 16e: 49 0f 44 df                   cmoveq  %r15, %rbx
// 172: 75 d6                         jne     0x14a <_JIT_ENTRY+0x14a>
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 17c: 48 83 b8 20 08 00 00 00       cmpq    $0x0, 0x820(%rax)
// 184: 74 37                         je      0x1bd <_JIT_ENTRY+0x1bd>
// 186: 4c 29 f3                      subq    %r14, %rbx
// 189: 48 83 c3 b8                   addq    $-0x48, %rbx
// 18d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 191: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 195: 49 8b 06                      movq    (%r14), %rax
// 198: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019a:  R_X86_64_64  _JIT_TARGET
// 1a2: 89 c9                         movl    %ecx, %ecx
// 1a4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1a8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ae: 48 83 c4 08                   addq    $0x8, %rsp
// 1b2: 5b                            popq    %rbx
// 1b3: 41 5c                         popq    %r12
// 1b5: 41 5d                         popq    %r13
// 1b7: 41 5e                         popq    %r14
// 1b9: 41 5f                         popq    %r15
// 1bb: 5d                            popq    %rbp
// 1bc: c3                            retq
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _JIT_CONTINUE
// 1c7: 4c 89 f7                      movq    %r14, %rdi
// 1ca: 48 89 de                      movq    %rbx, %rsi
// 1cd: 48 83 c4 08                   addq    $0x8, %rsp
// 1d1: 5b                            popq    %rbx
// 1d2: 41 5c                         popq    %r12
// 1d4: 41 5d                         popq    %r13
// 1d6: 41 5e                         popq    %r14
// 1d8: 41 5f                         popq    %r15
// 1da: 5d                            popq    %rbp
// 1db: ff e0                         jmpq    *%rax
// 1dd: 
static const unsigned char _STORE_SUBSCRplus_CHECK_PEP_523_code_body[478] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2a, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x51, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x83, 0xb8, 0x20, 0x08, 0x00, 0x00, 0x00, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_CHECK_PEP_523_code_holes[16] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CHECK_PEP_523_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CHECK_PEP_523_data_holes[1];

// _STORE_SUBSCRplus_CHECK_STACK_SPACE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CHECK_STACK_SPACE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1e                         je      0x160 <_JIT_ENTRY+0x160>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2d                         je      0x177 <_JIT_ENTRY+0x177>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: e9 8b 00 00 00                jmp     0x1eb <_JIT_ENTRY+0x1eb>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_Dealloc
// 16a: 4c 89 e7                      movq    %r12, %rdi
// 16d: ff d0                         callq   *%rax
// 16f: 85 ed                         testl   %ebp, %ebp
// 171: 49 0f 44 df                   cmoveq  %r15, %rbx
// 175: 75 d3                         jne     0x14a <_JIT_ENTRY+0x14a>
// 177: 48 8b 14 24                   movq    (%rsp), %rdx
// 17b: 48 8b 82 00 01 00 00          movq    0x100(%rdx), %rax
// 182: 48 85 c0                      testq   %rax, %rax
// 185: 74 3c                         je      0x1c3 <_JIT_ENTRY+0x1c3>
// 187: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000189:  R_X86_64_64  _JIT_OPARG
// 191: 0f b7 c9                      movzwl  %cx, %ecx
// 194: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// 199: 29 ce                         subl    %ecx, %esi
// 19b: 48 63 ce                      movslq  %esi, %rcx
// 19e: 48 8b 0c cb                   movq    (%rbx,%rcx,8), %rcx
// 1a2: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 1a6: 48 63 49 4c                   movslq  0x4c(%rcx), %rcx
// 1aa: 48 8b b2 08 01 00 00          movq    0x108(%rdx), %rsi
// 1b1: 48 29 c6                      subq    %rax, %rsi
// 1b4: 48 c1 fe 03                   sarq    $0x3, %rsi
// 1b8: 48 39 ce                      cmpq    %rcx, %rsi
// 1bb: 7e 06                         jle     0x1c3 <_JIT_ENTRY+0x1c3>
// 1bd: 83 7a 24 02                   cmpl    $0x2, 0x24(%rdx)
// 1c1: 7d 37                         jge     0x1fa <_JIT_ENTRY+0x1fa>
// 1c3: 4c 29 f3                      subq    %r14, %rbx
// 1c6: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1ca: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1ce: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1d2: 49 8b 06                      movq    (%r14), %rax
// 1d5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d7:  R_X86_64_64  _JIT_TARGET
// 1df: 89 c9                         movl    %ecx, %ecx
// 1e1: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1e5: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1eb: 48 83 c4 08                   addq    $0x8, %rsp
// 1ef: 5b                            popq    %rbx
// 1f0: 41 5c                         popq    %r12
// 1f2: 41 5d                         popq    %r13
// 1f4: 41 5e                         popq    %r14
// 1f6: 41 5f                         popq    %r15
// 1f8: 5d                            popq    %rbp
// 1f9: c3                            retq
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _JIT_CONTINUE
// 204: 4c 89 f7                      movq    %r14, %rdi
// 207: 48 89 de                      movq    %rbx, %rsi
// 20a: 48 83 c4 08                   addq    $0x8, %rsp
// 20e: 5b                            popq    %rbx
// 20f: 41 5c                         popq    %r12
// 211: 41 5d                         popq    %r13
// 213: 41 5e                         popq    %r14
// 215: 41 5f                         popq    %r15
// 217: 5d                            popq    %rbp
// 218: ff e0                         jmpq    *%rax
// 21a: 
static const unsigned char _STORE_SUBSCRplus_CHECK_STACK_SPACE_code_body[539] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1e, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2d, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x8b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd3, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x82, 0x00, 0x01, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x3c, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xce, 0x48, 0x63, 0xce, 0x48, 0x8b, 0x0c, 0xcb, 0x48, 0x8b, 0x49, 0x30, 0x48, 0x63, 0x49, 0x4c, 0x48, 0x8b, 0xb2, 0x08, 0x01, 0x00, 0x00, 0x48, 0x29, 0xc6, 0x48, 0xc1, 0xfe, 0x03, 0x48, 0x39, 0xce, 0x7e, 0x06, 0x83, 0x7a, 0x24, 0x02, 0x7d, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_CHECK_STACK_SPACE_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CHECK_STACK_SPACE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CHECK_STACK_SPACE_data_holes[1];

// _STORE_SUBSCRplus_CHECK_VALIDITY
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CHECK_VALIDITY.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _JIT_EXECUTOR
// 18b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// 18f: 74 24                         je      0x1b5 <_JIT_ENTRY+0x1b5>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_CONTINUE
// 19b: 4c 89 f7                      movq    %r14, %rdi
// 19e: 48 89 de                      movq    %rbx, %rsi
// 1a1: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a5: 48 83 c4 08                   addq    $0x8, %rsp
// 1a9: 5b                            popq    %rbx
// 1aa: 41 5c                         popq    %r12
// 1ac: 41 5d                         popq    %r13
// 1ae: 41 5e                         popq    %r14
// 1b0: 41 5f                         popq    %r15
// 1b2: 5d                            popq    %rbp
// 1b3: ff e0                         jmpq    *%rax
// 1b5: 4c 29 f3                      subq    %r14, %rbx
// 1b8: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1bc: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1c0: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1c4: 49 8b 06                      movq    (%r14), %rax
// 1c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c9:  R_X86_64_64  _JIT_TARGET
// 1d1: 89 c9                         movl    %ecx, %ecx
// 1d3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1d7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1dd: e9 79 ff ff ff                jmp     0x15b <_JIT_ENTRY+0x15b>
// 1e2: 
static const unsigned char _STORE_SUBSCRplus_CHECK_VALIDITY_code_body[483] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x79, 0xff, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_CHECK_VALIDITY_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CHECK_VALIDITY_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CHECK_VALIDITY_data_holes[1];

// _STORE_SUBSCRplus_COMPARE_OP
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_COMPARE_OP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 8b 5e f8                   movq    -0x8(%rsi), %rbx
// 1f: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 23: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  PyObject_SetItem
// 31: 4c 89 ef                      movq    %r13, %rdi
// 34: 48 89 de                      movq    %rbx, %rsi
// 37: 4c 89 f2                      movq    %r14, %rdx
// 3a: ff d0                         callq   *%rax
// 3c: 89 c5                         movl    %eax, %ebp
// 3e: 49 8b 06                      movq    (%r14), %rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 7e 06                         jle     0x4c <_JIT_ENTRY+0x4c>
// 46: 85 c0                         testl   %eax, %eax
// 48: 79 27                         jns     0x71 <_JIT_ENTRY+0x71>
// 4a: eb 36                         jmp     0x82 <_JIT_ENTRY+0x82>
// 4c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004e:  R_X86_64_64  .rodata.str1.1
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _Py_NegativeRefcount
// 60: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 65: 4c 89 f2                      movq    %r14, %rdx
// 68: ff d0                         callq   *%rax
// 6a: 49 8b 06                      movq    (%r14), %rax
// 6d: 85 c0                         testl   %eax, %eax
// 6f: 78 11                         js      0x82 <_JIT_ENTRY+0x82>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 7b: ff d0                         callq   *%rax
// 7d: 49 ff 0e                      decq    (%r14)
// 80: 74 0f                         je      0x91 <_JIT_ENTRY+0x91>
// 82: 49 8b 45 00                   movq    (%r13), %rax
// 86: 48 85 c0                      testq   %rax, %rax
// 89: 7e 1e                         jle     0xa9 <_JIT_ENTRY+0xa9>
// 8b: 85 c0                         testl   %eax, %eax
// 8d: 79 40                         jns     0xcf <_JIT_ENTRY+0xcf>
// 8f: eb 50                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_Dealloc
// 9b: 4c 89 f7                      movq    %r14, %rdi
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 45 00                   movq    (%r13), %rax
// a4: 48 85 c0                      testq   %rax, %rax
// a7: 7f e2                         jg      0x8b <_JIT_ENTRY+0x8b>
// a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ab:  R_X86_64_64  .rodata.str1.1
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_NegativeRefcount
// bd: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c2: 4c 89 ea                      movq    %r13, %rdx
// c5: ff d0                         callq   *%rax
// c7: 49 8b 45 00                   movq    (%r13), %rax
// cb: 85 c0                         testl   %eax, %eax
// cd: 78 12                         js      0xe1 <_JIT_ENTRY+0xe1>
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d9: ff d0                         callq   *%rax
// db: 49 ff 4d 00                   decq    (%r13)
// df: 74 12                         je      0xf3 <_JIT_ENTRY+0xf3>
// e1: 48 8b 03                      movq    (%rbx), %rax
// e4: 48 85 c0                      testq   %rax, %rax
// e7: 7e 21                         jle     0x10a <_JIT_ENTRY+0x10a>
// e9: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// ed: 85 c0                         testl   %eax, %eax
// ef: 79 42                         jns     0x133 <_JIT_ENTRY+0x133>
// f1: eb 60                         jmp     0x153 <_JIT_ENTRY+0x153>
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: 4c 89 ef                      movq    %r13, %rdi
// 100: ff d0                         callq   *%rax
// 102: 48 8b 03                      movq    (%rbx), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f df                         jg      0xe9 <_JIT_ENTRY+0xe9>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 48 89 da                      movq    %rbx, %rdx
// 126: ff d0                         callq   *%rax
// 128: 48 8b 03                      movq    (%rbx), %rax
// 12b: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// 12f: 85 c0                         testl   %eax, %eax
// 131: 78 20                         js      0x153 <_JIT_ENTRY+0x153>
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13d: ff d0                         callq   *%rax
// 13f: 48 ff 0b                      decq    (%rbx)
// 142: 75 0f                         jne     0x153 <_JIT_ENTRY+0x153>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_Dealloc
// 14e: 48 89 df                      movq    %rbx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 ed                         testl   %ebp, %ebp
// 155: 4d 0f 44 fc                   cmoveq  %r12, %r15
// 159: 49 8d 5f f8                   leaq    -0x8(%r15), %rbx
// 15d: 85 ed                         testl   %ebp, %ebp
// 15f: 74 28                         je      0x189 <_JIT_ENTRY+0x189>
// 161: 49 89 dc                      movq    %rbx, %r12
// 164: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 169: 49 29 fc                      subq    %rdi, %r12
// 16c: 49 83 c4 a8                   addq    $-0x58, %r12
// 170: 49 c1 ec 03                   shrq    $0x3, %r12
// 174: 44 89 67 40                   movl    %r12d, 0x40(%rdi)
// 178: 31 c0                         xorl    %eax, %eax
// 17a: 48 83 c4 18                   addq    $0x18, %rsp
// 17e: 5b                            popq    %rbx
// 17f: 41 5c                         popq    %r12
// 181: 41 5d                         popq    %r13
// 183: 41 5e                         popq    %r14
// 185: 41 5f                         popq    %r15
// 187: 5d                            popq    %rbp
// 188: c3                            retq
// 189: 4d 8b 77 f0                   movq    -0x10(%r15), %r14
// 18d: 49 8b 6f f8                   movq    -0x8(%r15), %rbp
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _JIT_OPARG
// 19b: 0f b7 d0                      movzwl  %ax, %edx
// 19e: c1 ea 05                      shrl    $0x5, %edx
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  PyObject_RichCompare
// 1ab: 4c 89 f7                      movq    %r14, %rdi
// 1ae: 48 89 ee                      movq    %rbp, %rsi
// 1b1: ff d0                         callq   *%rax
// 1b3: 49 89 c5                      movq    %rax, %r13
// 1b6: 49 8b 06                      movq    (%r14), %rax
// 1b9: 48 85 c0                      testq   %rax, %rax
// 1bc: 7e 06                         jle     0x1c4 <_JIT_ENTRY+0x1c4>
// 1be: 85 c0                         testl   %eax, %eax
// 1c0: 79 27                         jns     0x1e9 <_JIT_ENTRY+0x1e9>
// 1c2: eb 36                         jmp     0x1fa <_JIT_ENTRY+0x1fa>
// 1c4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c6:  R_X86_64_64  .rodata.str1.1
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _Py_NegativeRefcount
// 1d8: be 38 07 00 00                movl    $0x738, %esi            # imm = 0x738
// 1dd: 4c 89 f2                      movq    %r14, %rdx
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 8b 06                      movq    (%r14), %rax
// 1e5: 85 c0                         testl   %eax, %eax
// 1e7: 78 11                         js      0x1fa <_JIT_ENTRY+0x1fa>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f3: ff d0                         callq   *%rax
// 1f5: 49 ff 0e                      decq    (%r14)
// 1f8: 74 0f                         je      0x209 <_JIT_ENTRY+0x209>
// 1fa: 48 8b 45 00                   movq    (%rbp), %rax
// 1fe: 48 85 c0                      testq   %rax, %rax
// 201: 7e 1e                         jle     0x221 <_JIT_ENTRY+0x221>
// 203: 85 c0                         testl   %eax, %eax
// 205: 79 40                         jns     0x247 <_JIT_ENTRY+0x247>
// 207: eb 54                         jmp     0x25d <_JIT_ENTRY+0x25d>
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _Py_Dealloc
// 213: 4c 89 f7                      movq    %r14, %rdi
// 216: ff d0                         callq   *%rax
// 218: 48 8b 45 00                   movq    (%rbp), %rax
// 21c: 48 85 c0                      testq   %rax, %rax
// 21f: 7f e2                         jg      0x203 <_JIT_ENTRY+0x203>
// 221: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000223:  R_X86_64_64  .rodata.str1.1
// 22b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022d:  R_X86_64_64  _Py_NegativeRefcount
// 235: be 39 07 00 00                movl    $0x739, %esi            # imm = 0x739
// 23a: 48 89 ea                      movq    %rbp, %rdx
// 23d: ff d0                         callq   *%rax
// 23f: 48 8b 45 00                   movq    (%rbp), %rax
// 243: 85 c0                         testl   %eax, %eax
// 245: 78 16                         js      0x25d <_JIT_ENTRY+0x25d>
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 251: ff d0                         callq   *%rax
// 253: 48 ff 4d 00                   decq    (%rbp)
// 257: 0f 84 cd 00 00 00             je      0x32a <_JIT_ENTRY+0x32a>
// 25d: 4d 85 ed                      testq   %r13, %r13
// 260: 0f 84 fe fe ff ff             je      0x164 <_JIT_ENTRY+0x164>
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _JIT_OPARG
// 270: a8 10                         testb   $0x10, %al
// 272: 0f 84 87 00 00 00             je      0x2ff <_JIT_ENTRY+0x2ff>
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  PyObject_IsTrue
// 282: 4c 89 ef                      movq    %r13, %rdi
// 285: ff d0                         callq   *%rax
// 287: 89 c5                         movl    %eax, %ebp
// 289: 49 8b 45 00                   movq    (%r13), %rax
// 28d: 48 85 c0                      testq   %rax, %rax
// 290: 7f 22                         jg      0x2b4 <_JIT_ENTRY+0x2b4>
// 292: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000294:  R_X86_64_64  .rodata.str1.1
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _Py_NegativeRefcount
// 2a6: be 3d 07 00 00                movl    $0x73d, %esi            # imm = 0x73D
// 2ab: 4c 89 ea                      movq    %r13, %rdx
// 2ae: ff d0                         callq   *%rax
// 2b0: 49 8b 45 00                   movq    (%r13), %rax
// 2b4: 85 c0                         testl   %eax, %eax
// 2b6: 78 21                         js      0x2d9 <_JIT_ENTRY+0x2d9>
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c2: ff d0                         callq   *%rax
// 2c4: 49 ff 4d 00                   decq    (%r13)
// 2c8: 75 0f                         jne     0x2d9 <_JIT_ENTRY+0x2d9>
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  _Py_Dealloc
// 2d4: 4c 89 ef                      movq    %r13, %rdi
// 2d7: ff d0                         callq   *%rax
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _Py_FalseStruct
// 2e3: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000002e5:  R_X86_64_64  _Py_TrueStruct
// 2ed: 85 ed                         testl   %ebp, %ebp
// 2ef: 4c 0f 44 e8                   cmoveq  %rax, %r13
// 2f3: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 2f8: 79 0a                         jns     0x304 <_JIT_ENTRY+0x304>
// 2fa: e9 6a fe ff ff                jmp     0x169 <_JIT_ENTRY+0x169>
// 2ff: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 304: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 308: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030a:  R_X86_64_64  _JIT_CONTINUE
// 312: 48 89 de                      movq    %rbx, %rsi
// 315: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 31a: 48 83 c4 18                   addq    $0x18, %rsp
// 31e: 5b                            popq    %rbx
// 31f: 41 5c                         popq    %r12
// 321: 41 5d                         popq    %r13
// 323: 41 5e                         popq    %r14
// 325: 41 5f                         popq    %r15
// 327: 5d                            popq    %rbp
// 328: ff e0                         jmpq    *%rax
// 32a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032c:  R_X86_64_64  _Py_Dealloc
// 334: 48 89 ef                      movq    %rbp, %rdi
// 337: ff d0                         callq   *%rax
// 339: 4d 85 ed                      testq   %r13, %r13
// 33c: 0f 85 24 ff ff ff             jne     0x266 <_JIT_ENTRY+0x266>
// 342: e9 1d fe ff ff                jmp     0x164 <_JIT_ENTRY+0x164>
// 347: 
static const unsigned char _STORE_SUBSCRplus_COMPARE_OP_code_body[840] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x5e, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x12, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x21, 0x4d, 0x8d, 0x67, 0xe8, 0x85, 0xc0, 0x79, 0x42, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xdf, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x4d, 0x8d, 0x67, 0xe8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfc, 0x49, 0x8d, 0x5f, 0xf8, 0x85, 0xed, 0x74, 0x28, 0x49, 0x89, 0xdc, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x29, 0xfc, 0x49, 0x83, 0xc4, 0xa8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x67, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x77, 0xf0, 0x49, 0x8b, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0xc1, 0xea, 0x05, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xcd, 0x00, 0x00, 0x00, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0xfe, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x10, 0x0f, 0x84, 0x87, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3d, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe8, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x79, 0x0a, 0xe9, 0x6a, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x85, 0x24, 0xff, 0xff, 0xff, 0xe9, 0x1d, 0xfe, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_COMPARE_OP_code_holes[33] = {
    {0x29, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_RichCompare, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x30a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_COMPARE_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_COMPARE_OP_data_holes[1];

// _STORE_SUBSCRplus_COMPARE_OP_FLOAT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_COMPARE_OP_FLOAT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f6                      movq    %rsi, %r14
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 fa                      movq    %r15, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 07                      movq    (%r15), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 fa                      movq    %r15, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 07                      movq    (%r15), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0f                      decq    (%r15)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 ff                      movq    %r15, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 1b                         je      0x161 <_JIT_ENTRY+0x161>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 14c: 74 2a                         je      0x178 <_JIT_ENTRY+0x178>
// 14e: 49 29 de                      subq    %rbx, %r14
// 151: 49 83 c6 a0                   addq    $-0x60, %r14
// 155: 49 c1 ee 03                   shrq    $0x3, %r14
// 159: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 15d: 31 c0                         xorl    %eax, %eax
// 15f: eb 5e                         jmp     0x1bf <_JIT_ENTRY+0x1bf>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_Dealloc
// 16b: 4c 89 e7                      movq    %r12, %rdi
// 16e: ff d0                         callq   *%rax
// 170: 85 ed                         testl   %ebp, %ebp
// 172: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 176: 75 d6                         jne     0x14e <_JIT_ENTRY+0x14e>
// 178: 4d 8b 7e f0                   movq    -0x10(%r14), %r15
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  PyFloat_Type
// 186: 49 39 47 08                   cmpq    %rax, 0x8(%r15)
// 18a: 75 0b                         jne     0x197 <_JIT_ENTRY+0x197>
// 18c: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 190: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 195: 74 37                         je      0x1ce <_JIT_ENTRY+0x1ce>
// 197: 49 29 de                      subq    %rbx, %r14
// 19a: 49 83 c6 b8                   addq    $-0x48, %r14
// 19e: 49 c1 ee 03                   shrq    $0x3, %r14
// 1a2: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1a6: 48 8b 03                      movq    (%rbx), %rax
// 1a9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ab:  R_X86_64_64  _JIT_TARGET
// 1b3: 89 c9                         movl    %ecx, %ecx
// 1b5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1bf: 48 83 c4 18                   addq    $0x18, %rsp
// 1c3: 5b                            popq    %rbx
// 1c4: 41 5c                         popq    %r12
// 1c6: 41 5d                         popq    %r13
// 1c8: 41 5e                         popq    %r14
// 1ca: 41 5f                         popq    %r15
// 1cc: 5d                            popq    %rbp
// 1cd: c3                            retq
// 1ce: f2 41 0f 10 47 10             movsd   0x10(%r15), %xmm0       # xmm0 = mem[0],zero
// 1d4: f2 0f 11 44 24 08             movsd   %xmm0, 0x8(%rsp)
// 1da: f2 41 0f 10 44 24 10          movsd   0x10(%r12), %xmm0       # xmm0 = mem[0],zero
// 1e1: f2 0f 11 04 24                movsd   %xmm0, (%rsp)
// 1e6: 41 f6 47 03 80                testb   $-0x80, 0x3(%r15)
// 1eb: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001ed:  R_X86_64_64  PyInterpreterState_Get
// 1f5: 75 1e                         jne     0x215 <_JIT_ENTRY+0x215>
// 1f7: 41 ff d5                      callq   *%r13
// 1fa: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 201: 49 ff 0f                      decq    (%r15)
// 204: 75 0f                         jne     0x215 <_JIT_ENTRY+0x215>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _PyFloat_ExactDealloc
// 210: 4c 89 ff                      movq    %r15, %rdi
// 213: ff d0                         callq   *%rax
// 215: 4d 8d 7e f8                   leaq    -0x8(%r14), %r15
// 219: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 21f: 75 1f                         jne     0x240 <_JIT_ENTRY+0x240>
// 221: 41 ff d5                      callq   *%r13
// 224: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 22b: 49 ff 0c 24                   decq    (%r12)
// 22f: 75 0f                         jne     0x240 <_JIT_ENTRY+0x240>
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _PyFloat_ExactDealloc
// 23b: 4c 89 e7                      movq    %r12, %rdi
// 23e: ff d0                         callq   *%rax
// 240: 31 c0                         xorl    %eax, %eax
// 242: f2 0f 10 44 24 08             movsd   0x8(%rsp), %xmm0        # xmm0 = mem[0],zero
// 248: f2 0f 10 0c 24                movsd   (%rsp), %xmm1           # xmm1 = mem[0],zero
// 24d: 66 0f 2e c1                   ucomisd %xmm1, %xmm0
// 251: 0f 93 c0                      setae   %al
// 254: 01 c0                         addl    %eax, %eax
// 256: 31 c9                         xorl    %ecx, %ecx
// 258: 66 0f 2e c8                   ucomisd %xmm0, %xmm1
// 25c: 0f 93 c1                      setae   %cl
// 25f: 09 c1                         orl     %eax, %ecx
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _JIT_OPARG
// 26b: 0f a3 c8                      btl     %ecx, %eax
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_FalseStruct
// 278: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027a:  R_X86_64_64  _Py_TrueStruct
// 282: 48 0f 43 c8                   cmovaeq %rax, %rcx
// 286: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _JIT_CONTINUE
// 294: 48 89 df                      movq    %rbx, %rdi
// 297: 4c 89 fe                      movq    %r15, %rsi
// 29a: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 29f: 48 83 c4 18                   addq    $0x18, %rsp
// 2a3: 5b                            popq    %rbx
// 2a4: 41 5c                         popq    %r12
// 2a6: 41 5d                         popq    %r13
// 2a8: 41 5e                         popq    %r14
// 2aa: 41 5f                         popq    %r15
// 2ac: 5d                            popq    %rbp
// 2ad: ff e0                         jmpq    *%rax
// 2af: 
static const unsigned char _STORE_SUBSCRplus_COMPARE_OP_FLOAT_code_body[688] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x2a, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x5e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xd6, 0x4d, 0x8b, 0x7e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x47, 0x08, 0x75, 0x0b, 0x4d, 0x8b, 0x66, 0xf8, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0xf2, 0x41, 0x0f, 0x10, 0x47, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x08, 0xf2, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0xf2, 0x0f, 0x11, 0x04, 0x24, 0x41, 0xf6, 0x47, 0x03, 0x80, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0x41, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x8d, 0x7e, 0xf8, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x1f, 0x41, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x31, 0xc0, 0xf2, 0x0f, 0x10, 0x44, 0x24, 0x08, 0xf2, 0x0f, 0x10, 0x0c, 0x24, 0x66, 0x0f, 0x2e, 0xc1, 0x0f, 0x93, 0xc0, 0x01, 0xc0, 0x31, 0xc9, 0x66, 0x0f, 0x2e, 0xc8, 0x0f, 0x93, 0xc1, 0x09, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xa3, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xc8, 0x49, 0x89, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_COMPARE_OP_FLOAT_code_holes[23] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_COMPARE_OP_FLOAT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_COMPARE_OP_FLOAT_data_holes[1];

// _STORE_SUBSCRplus_COMPARE_OP_INT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_COMPARE_OP_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f6                      movq    %rsi, %r14
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 fa                      movq    %r15, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 07                      movq    (%r15), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 fa                      movq    %r15, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 07                      movq    (%r15), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0f                      decq    (%r15)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 ff                      movq    %r15, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 1b                         je      0x161 <_JIT_ENTRY+0x161>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 14c: 74 2a                         je      0x178 <_JIT_ENTRY+0x178>
// 14e: 49 29 de                      subq    %rbx, %r14
// 151: 49 83 c6 a0                   addq    $-0x60, %r14
// 155: 49 c1 ee 03                   shrq    $0x3, %r14
// 159: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 15d: 31 c0                         xorl    %eax, %eax
// 15f: eb 71                         jmp     0x1d2 <_JIT_ENTRY+0x1d2>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_Dealloc
// 16b: 4c 89 e7                      movq    %r12, %rdi
// 16e: ff d0                         callq   *%rax
// 170: 85 ed                         testl   %ebp, %ebp
// 172: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 176: 75 d6                         jne     0x14e <_JIT_ENTRY+0x14e>
// 178: 4d 8b 7e f0                   movq    -0x10(%r14), %r15
// 17c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017e:  R_X86_64_64  PyLong_Type
// 186: 49 39 47 08                   cmpq    %rax, 0x8(%r15)
// 18a: 75 1e                         jne     0x1aa <_JIT_ENTRY+0x1aa>
// 18c: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 190: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 194: 75 14                         jne     0x1aa <_JIT_ENTRY+0x1aa>
// 196: 4d 8b 67 10                   movq    0x10(%r15), %r12
// 19a: 49 83 fc 0f                   cmpq    $0xf, %r12
// 19e: 77 0a                         ja      0x1aa <_JIT_ENTRY+0x1aa>
// 1a0: 49 8b 6d 10                   movq    0x10(%r13), %rbp
// 1a4: 48 83 fd 0f                   cmpq    $0xf, %rbp
// 1a8: 76 37                         jbe     0x1e1 <_JIT_ENTRY+0x1e1>
// 1aa: 49 29 de                      subq    %rbx, %r14
// 1ad: 49 83 c6 b8                   addq    $-0x48, %r14
// 1b1: 49 c1 ee 03                   shrq    $0x3, %r14
// 1b5: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1b9: 48 8b 03                      movq    (%rbx), %rax
// 1bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001be:  R_X86_64_64  _JIT_TARGET
// 1c6: 89 c9                         movl    %ecx, %ecx
// 1c8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1cc: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1d2: 48 83 c4 18                   addq    $0x18, %rsp
// 1d6: 5b                            popq    %rbx
// 1d7: 41 5c                         popq    %r12
// 1d9: 41 5d                         popq    %r13
// 1db: 41 5e                         popq    %r14
// 1dd: 41 5f                         popq    %r15
// 1df: 5d                            popq    %rbp
// 1e0: c3                            retq
// 1e1: 41 8b 47 18                   movl    0x18(%r15), %eax
// 1e5: 48 89 04 24                   movq    %rax, (%rsp)
// 1e9: 41 8b 45 18                   movl    0x18(%r13), %eax
// 1ed: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1f2: 41 f6 47 03 80                testb   $-0x80, 0x3(%r15)
// 1f7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f9:  R_X86_64_64  PyInterpreterState_Get
// 201: 75 3b                         jne     0x23e <_JIT_ENTRY+0x23e>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  PyInterpreterState_Get
// 20d: ff d0                         callq   *%rax
// 20f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 216: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000218:  R_X86_64_64  PyInterpreterState_Get
// 220: 49 ff 0f                      decq    (%r15)
// 223: 75 19                         jne     0x23e <_JIT_ENTRY+0x23e>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  PyObject_Free
// 22f: 4c 89 ff                      movq    %r15, %rdi
// 232: ff d0                         callq   *%rax
// 234: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000236:  R_X86_64_64  PyInterpreterState_Get
// 23e: 4d 8d 7e f8                   leaq    -0x8(%r14), %r15
// 242: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 247: 75 1e                         jne     0x267 <_JIT_ENTRY+0x267>
// 249: ff d1                         callq   *%rcx
// 24b: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 252: 49 ff 4d 00                   decq    (%r13)
// 256: 75 0f                         jne     0x267 <_JIT_ENTRY+0x267>
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  PyObject_Free
// 262: 4c 89 ef                      movq    %r13, %rdi
// 265: ff d0                         callq   *%rax
// 267: 41 83 e4 03                   andl    $0x3, %r12d
// 26b: b8 01 00 00 00                movl    $0x1, %eax
// 270: b9 01 00 00 00                movl    $0x1, %ecx
// 275: 4c 29 e1                      subq    %r12, %rcx
// 278: 48 0f af 0c 24                imulq   (%rsp), %rcx
// 27d: 83 e5 03                      andl    $0x3, %ebp
// 280: 48 29 e8                      subq    %rbp, %rax
// 283: 48 0f af 44 24 08             imulq   0x8(%rsp), %rax
// 289: 31 d2                         xorl    %edx, %edx
// 28b: 31 f6                         xorl    %esi, %esi
// 28d: 48 39 c1                      cmpq    %rax, %rcx
// 290: 0f 9d c2                      setge   %dl
// 293: 40 0f 9e c6                   setle   %sil
// 297: 01 d2                         addl    %edx, %edx
// 299: 09 d6                         orl     %edx, %esi
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _JIT_OPARG
// 2a5: 0f a3 f0                      btl     %esi, %eax
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _Py_FalseStruct
// 2b2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002b4:  R_X86_64_64  _Py_TrueStruct
// 2bc: 48 0f 43 c8                   cmovaeq %rax, %rcx
// 2c0: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  _JIT_CONTINUE
// 2ce: 48 89 df                      movq    %rbx, %rdi
// 2d1: 4c 89 fe                      movq    %r15, %rsi
// 2d4: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2d9: 48 83 c4 18                   addq    $0x18, %rsp
// 2dd: 5b                            popq    %rbx
// 2de: 41 5c                         popq    %r12
// 2e0: 41 5d                         popq    %r13
// 2e2: 41 5e                         popq    %r14
// 2e4: 41 5f                         popq    %r15
// 2e6: 5d                            popq    %rbp
// 2e7: ff e0                         jmpq    *%rax
// 2e9: 
static const unsigned char _STORE_SUBSCRplus_COMPARE_OP_INT_code_body[746] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x2a, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x71, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xd6, 0x4d, 0x8b, 0x7e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x47, 0x08, 0x75, 0x1e, 0x4d, 0x8b, 0x6e, 0xf8, 0x49, 0x39, 0x45, 0x08, 0x75, 0x14, 0x4d, 0x8b, 0x67, 0x10, 0x49, 0x83, 0xfc, 0x0f, 0x77, 0x0a, 0x49, 0x8b, 0x6d, 0x10, 0x48, 0x83, 0xfd, 0x0f, 0x76, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x8b, 0x47, 0x18, 0x48, 0x89, 0x04, 0x24, 0x41, 0x8b, 0x45, 0x18, 0x48, 0x89, 0x44, 0x24, 0x08, 0x41, 0xf6, 0x47, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x0f, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x7e, 0xf8, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x41, 0x83, 0xe4, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x29, 0xe1, 0x48, 0x0f, 0xaf, 0x0c, 0x24, 0x83, 0xe5, 0x03, 0x48, 0x29, 0xe8, 0x48, 0x0f, 0xaf, 0x44, 0x24, 0x08, 0x31, 0xd2, 0x31, 0xf6, 0x48, 0x39, 0xc1, 0x0f, 0x9d, 0xc2, 0x40, 0x0f, 0x9e, 0xc6, 0x01, 0xd2, 0x09, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xa3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xc8, 0x49, 0x89, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_COMPARE_OP_INT_code_holes[26] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_COMPARE_OP_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_COMPARE_OP_INT_data_holes[1];

// _STORE_SUBSCRplus_COMPARE_OP_STR
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_COMPARE_OP_STR.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1b                         je      0x15d <_JIT_ENTRY+0x15d>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 2a                         je      0x174 <_JIT_ENTRY+0x174>
// 14a: 49 29 de                      subq    %rbx, %r14
// 14d: 49 83 c6 a0                   addq    $-0x60, %r14
// 151: 49 c1 ee 03                   shrq    $0x3, %r14
// 155: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: eb 5e                         jmp     0x1bb <_JIT_ENTRY+0x1bb>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 ed                         testl   %ebp, %ebp
// 16e: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 172: 75 d6                         jne     0x14a <_JIT_ENTRY+0x14a>
// 174: 4d 8b 7e f0                   movq    -0x10(%r14), %r15
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  PyUnicode_Type
// 182: 49 39 47 08                   cmpq    %rax, 0x8(%r15)
// 186: 75 0b                         jne     0x193 <_JIT_ENTRY+0x193>
// 188: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 18c: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 191: 74 37                         je      0x1ca <_JIT_ENTRY+0x1ca>
// 193: 49 29 de                      subq    %rbx, %r14
// 196: 49 83 c6 b8                   addq    $-0x48, %r14
// 19a: 49 c1 ee 03                   shrq    $0x3, %r14
// 19e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1a2: 48 8b 03                      movq    (%rbx), %rax
// 1a5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a7:  R_X86_64_64  _JIT_TARGET
// 1af: 89 c9                         movl    %ecx, %ecx
// 1b1: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b5: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1bb: 48 83 c4 08                   addq    $0x8, %rsp
// 1bf: 5b                            popq    %rbx
// 1c0: 41 5c                         popq    %r12
// 1c2: 41 5d                         popq    %r13
// 1c4: 41 5e                         popq    %r14
// 1c6: 41 5f                         popq    %r15
// 1c8: 5d                            popq    %rbp
// 1c9: c3                            retq
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _PyUnicode_Equal
// 1d4: 4c 89 ff                      movq    %r15, %rdi
// 1d7: 4c 89 e6                      movq    %r12, %rsi
// 1da: ff d0                         callq   *%rax
// 1dc: 89 c5                         movl    %eax, %ebp
// 1de: 41 f6 47 03 80                testb   $-0x80, 0x3(%r15)
// 1e3: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001e5:  R_X86_64_64  PyInterpreterState_Get
// 1ed: 75 1e                         jne     0x20d <_JIT_ENTRY+0x20d>
// 1ef: 41 ff d5                      callq   *%r13
// 1f2: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1f9: 49 ff 0f                      decq    (%r15)
// 1fc: 75 0f                         jne     0x20d <_JIT_ENTRY+0x20d>
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _PyUnicode_ExactDealloc
// 208: 4c 89 ff                      movq    %r15, %rdi
// 20b: ff d0                         callq   *%rax
// 20d: 4d 8d 7e f8                   leaq    -0x8(%r14), %r15
// 211: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 217: 75 1f                         jne     0x238 <_JIT_ENTRY+0x238>
// 219: 41 ff d5                      callq   *%r13
// 21c: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 223: 49 ff 0c 24                   decq    (%r12)
// 227: 75 0f                         jne     0x238 <_JIT_ENTRY+0x238>
// 229: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022b:  R_X86_64_64  _PyUnicode_ExactDealloc
// 233: 4c 89 e7                      movq    %r12, %rdi
// 236: ff d0                         callq   *%rax
// 238: 83 c5 07                      addl    $0x7, %ebp
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _JIT_OPARG
// 245: 66 85 e8                      testw   %bp, %ax
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _Py_FalseStruct
// 252: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000254:  R_X86_64_64  _Py_TrueStruct
// 25c: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 260: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _JIT_CONTINUE
// 26e: 48 89 df                      movq    %rbx, %rdi
// 271: 4c 89 fe                      movq    %r15, %rsi
// 274: 48 8b 14 24                   movq    (%rsp), %rdx
// 278: 48 83 c4 08                   addq    $0x8, %rsp
// 27c: 5b                            popq    %rbx
// 27d: 41 5c                         popq    %r12
// 27f: 41 5d                         popq    %r13
// 281: 41 5e                         popq    %r14
// 283: 41 5f                         popq    %r15
// 285: 5d                            popq    %rbp
// 286: ff e0                         jmpq    *%rax
// 288: 
static const unsigned char _STORE_SUBSCRplus_COMPARE_OP_STR_code_body[649] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x2a, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x5e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xd6, 0x4d, 0x8b, 0x7e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x47, 0x08, 0x75, 0x0b, 0x4d, 0x8b, 0x66, 0xf8, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x41, 0xf6, 0x47, 0x03, 0x80, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0x41, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x8d, 0x7e, 0xf8, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x1f, 0x41, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0xc5, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_COMPARE_OP_STR_code_holes[24] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_Equal, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_COMPARE_OP_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_COMPARE_OP_STR_data_holes[1];

// _STORE_SUBSCRplus_CONTAINS_OP
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CONTAINS_OP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 8b 5e f8                   movq    -0x8(%rsi), %rbx
// 1f: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 23: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  PyObject_SetItem
// 31: 4c 89 ef                      movq    %r13, %rdi
// 34: 48 89 de                      movq    %rbx, %rsi
// 37: 4c 89 f2                      movq    %r14, %rdx
// 3a: ff d0                         callq   *%rax
// 3c: 89 c5                         movl    %eax, %ebp
// 3e: 49 8b 06                      movq    (%r14), %rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 7e 06                         jle     0x4c <_JIT_ENTRY+0x4c>
// 46: 85 c0                         testl   %eax, %eax
// 48: 79 27                         jns     0x71 <_JIT_ENTRY+0x71>
// 4a: eb 36                         jmp     0x82 <_JIT_ENTRY+0x82>
// 4c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004e:  R_X86_64_64  .rodata.str1.1
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _Py_NegativeRefcount
// 60: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 65: 4c 89 f2                      movq    %r14, %rdx
// 68: ff d0                         callq   *%rax
// 6a: 49 8b 06                      movq    (%r14), %rax
// 6d: 85 c0                         testl   %eax, %eax
// 6f: 78 11                         js      0x82 <_JIT_ENTRY+0x82>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 7b: ff d0                         callq   *%rax
// 7d: 49 ff 0e                      decq    (%r14)
// 80: 74 0f                         je      0x91 <_JIT_ENTRY+0x91>
// 82: 49 8b 45 00                   movq    (%r13), %rax
// 86: 48 85 c0                      testq   %rax, %rax
// 89: 7e 1e                         jle     0xa9 <_JIT_ENTRY+0xa9>
// 8b: 85 c0                         testl   %eax, %eax
// 8d: 79 40                         jns     0xcf <_JIT_ENTRY+0xcf>
// 8f: eb 50                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_Dealloc
// 9b: 4c 89 f7                      movq    %r14, %rdi
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 45 00                   movq    (%r13), %rax
// a4: 48 85 c0                      testq   %rax, %rax
// a7: 7f e2                         jg      0x8b <_JIT_ENTRY+0x8b>
// a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ab:  R_X86_64_64  .rodata.str1.1
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_NegativeRefcount
// bd: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c2: 4c 89 ea                      movq    %r13, %rdx
// c5: ff d0                         callq   *%rax
// c7: 49 8b 45 00                   movq    (%r13), %rax
// cb: 85 c0                         testl   %eax, %eax
// cd: 78 12                         js      0xe1 <_JIT_ENTRY+0xe1>
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d9: ff d0                         callq   *%rax
// db: 49 ff 4d 00                   decq    (%r13)
// df: 74 12                         je      0xf3 <_JIT_ENTRY+0xf3>
// e1: 48 8b 03                      movq    (%rbx), %rax
// e4: 48 85 c0                      testq   %rax, %rax
// e7: 7e 21                         jle     0x10a <_JIT_ENTRY+0x10a>
// e9: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// ed: 85 c0                         testl   %eax, %eax
// ef: 79 42                         jns     0x133 <_JIT_ENTRY+0x133>
// f1: eb 60                         jmp     0x153 <_JIT_ENTRY+0x153>
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: 4c 89 ef                      movq    %r13, %rdi
// 100: ff d0                         callq   *%rax
// 102: 48 8b 03                      movq    (%rbx), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f df                         jg      0xe9 <_JIT_ENTRY+0xe9>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 48 89 da                      movq    %rbx, %rdx
// 126: ff d0                         callq   *%rax
// 128: 48 8b 03                      movq    (%rbx), %rax
// 12b: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// 12f: 85 c0                         testl   %eax, %eax
// 131: 78 20                         js      0x153 <_JIT_ENTRY+0x153>
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13d: ff d0                         callq   *%rax
// 13f: 48 ff 0b                      decq    (%rbx)
// 142: 75 0f                         jne     0x153 <_JIT_ENTRY+0x153>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_Dealloc
// 14e: 48 89 df                      movq    %rbx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 ed                         testl   %ebp, %ebp
// 155: 4d 0f 44 fc                   cmoveq  %r12, %r15
// 159: 49 8d 5f f8                   leaq    -0x8(%r15), %rbx
// 15d: 85 ed                         testl   %ebp, %ebp
// 15f: 74 28                         je      0x189 <_JIT_ENTRY+0x189>
// 161: 49 89 dc                      movq    %rbx, %r12
// 164: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 169: 49 29 c4                      subq    %rax, %r12
// 16c: 49 83 c4 a8                   addq    $-0x58, %r12
// 170: 49 c1 ec 03                   shrq    $0x3, %r12
// 174: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 178: 31 c0                         xorl    %eax, %eax
// 17a: 48 83 c4 18                   addq    $0x18, %rsp
// 17e: 5b                            popq    %rbx
// 17f: 41 5c                         popq    %r12
// 181: 41 5d                         popq    %r13
// 183: 41 5e                         popq    %r14
// 185: 41 5f                         popq    %r15
// 187: 5d                            popq    %rbp
// 188: c3                            retq
// 189: 4d 8b 77 f0                   movq    -0x10(%r15), %r14
// 18d: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  PySequence_Contains
// 19b: 4c 89 ef                      movq    %r13, %rdi
// 19e: 4c 89 f6                      movq    %r14, %rsi
// 1a1: ff d0                         callq   *%rax
// 1a3: 89 c5                         movl    %eax, %ebp
// 1a5: 49 8b 06                      movq    (%r14), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 7e 06                         jle     0x1b3 <_JIT_ENTRY+0x1b3>
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 79 27                         jns     0x1d8 <_JIT_ENTRY+0x1d8>
// 1b1: eb 36                         jmp     0x1e9 <_JIT_ENTRY+0x1e9>
// 1b3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b5:  R_X86_64_64  .rodata.str1.1
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _Py_NegativeRefcount
// 1c7: be a8 07 00 00                movl    $0x7a8, %esi            # imm = 0x7A8
// 1cc: 4c 89 f2                      movq    %r14, %rdx
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 8b 06                      movq    (%r14), %rax
// 1d4: 85 c0                         testl   %eax, %eax
// 1d6: 78 11                         js      0x1e9 <_JIT_ENTRY+0x1e9>
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e2: ff d0                         callq   *%rax
// 1e4: 49 ff 0e                      decq    (%r14)
// 1e7: 74 0f                         je      0x1f8 <_JIT_ENTRY+0x1f8>
// 1e9: 49 8b 45 00                   movq    (%r13), %rax
// 1ed: 48 85 c0                      testq   %rax, %rax
// 1f0: 7e 1e                         jle     0x210 <_JIT_ENTRY+0x210>
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 79 40                         jns     0x236 <_JIT_ENTRY+0x236>
// 1f6: eb 5f                         jmp     0x257 <_JIT_ENTRY+0x257>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_Dealloc
// 202: 4c 89 f7                      movq    %r14, %rdi
// 205: ff d0                         callq   *%rax
// 207: 49 8b 45 00                   movq    (%r13), %rax
// 20b: 48 85 c0                      testq   %rax, %rax
// 20e: 7f e2                         jg      0x1f2 <_JIT_ENTRY+0x1f2>
// 210: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000212:  R_X86_64_64  .rodata.str1.1
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_NegativeRefcount
// 224: be a9 07 00 00                movl    $0x7a9, %esi            # imm = 0x7A9
// 229: 4c 89 ea                      movq    %r13, %rdx
// 22c: ff d0                         callq   *%rax
// 22e: 49 8b 45 00                   movq    (%r13), %rax
// 232: 85 c0                         testl   %eax, %eax
// 234: 78 21                         js      0x257 <_JIT_ENTRY+0x257>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 240: ff d0                         callq   *%rax
// 242: 49 ff 4d 00                   decq    (%r13)
// 246: 75 0f                         jne     0x257 <_JIT_ENTRY+0x257>
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _Py_Dealloc
// 252: 4c 89 ef                      movq    %r13, %rdi
// 255: ff d0                         callq   *%rax
// 257: 85 ed                         testl   %ebp, %ebp
// 259: 0f 88 05 ff ff ff             js      0x164 <_JIT_ENTRY+0x164>
// 25f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000261:  R_X86_64_64  _JIT_OPARG
// 269: 0f b7 c0                      movzwl  %ax, %eax
// 26c: 39 c5                         cmpl    %eax, %ebp
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_FalseStruct
// 278: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000027a:  R_X86_64_64  _Py_TrueStruct
// 282: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 286: 49 89 4f f0                   movq    %rcx, -0x10(%r15)
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _JIT_CONTINUE
// 294: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 299: 48 89 de                      movq    %rbx, %rsi
// 29c: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2a1: 48 83 c4 18                   addq    $0x18, %rsp
// 2a5: 5b                            popq    %rbx
// 2a6: 41 5c                         popq    %r12
// 2a8: 41 5d                         popq    %r13
// 2aa: 41 5e                         popq    %r14
// 2ac: 41 5f                         popq    %r15
// 2ae: 5d                            popq    %rbp
// 2af: ff e0                         jmpq    *%rax
// 2b1: 
static const unsigned char _STORE_SUBSCRplus_CONTAINS_OP_code_body[690] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x5e, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x12, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x21, 0x4d, 0x8d, 0x67, 0xe8, 0x85, 0xc0, 0x79, 0x42, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xdf, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x4d, 0x8d, 0x67, 0xe8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfc, 0x49, 0x8d, 0x5f, 0xf8, 0x85, 0xed, 0x74, 0x28, 0x49, 0x89, 0xdc, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xa8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x77, 0xf0, 0x4d, 0x8b, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa8, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x88, 0x05, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x39, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x4f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_CONTAINS_OP_code_holes[27] = {
    {0x29, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Contains, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x261, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CONTAINS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CONTAINS_OP_data_holes[1];

// _STORE_SUBSCRplus_CONVERT_VALUE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_CONVERT_VALUE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c6 f0                   addq    $-0x10, %r14
// 14e: 4d 89 f7                      movq    %r14, %r15
// 151: 49 29 df                      subq    %rbx, %r15
// 154: 49 83 c7 b0                   addq    $-0x50, %r15
// 158: 49 c1 ef 03                   shrq    $0x3, %r15
// 15c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c0                      movzwl  %ax, %eax
// 199: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019b:  R_X86_64_64  .rodata
// 1a3: 4c 89 e7                      movq    %r12, %rdi
// 1a6: ff 14 c1                      callq   *(%rcx,%rax,8)
// 1a9: 49 89 c5                      movq    %rax, %r13
// 1ac: 49 8b 04 24                   movq    (%r12), %rax
// 1b0: 48 85 c0                      testq   %rax, %rax
// 1b3: 7e 06                         jle     0x1bb <_JIT_ENTRY+0x1bb>
// 1b5: 85 c0                         testl   %eax, %eax
// 1b7: 79 28                         jns     0x1e1 <_JIT_ENTRY+0x1e1>
// 1b9: eb 47                         jmp     0x202 <_JIT_ENTRY+0x202>
// 1bb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bd:  R_X86_64_64  .rodata.str1.1
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_NegativeRefcount
// 1cf: be 98 0c 00 00                movl    $0xc98, %esi            # imm = 0xC98
// 1d4: 4c 89 e2                      movq    %r12, %rdx
// 1d7: ff d0                         callq   *%rax
// 1d9: 49 8b 04 24                   movq    (%r12), %rax
// 1dd: 85 c0                         testl   %eax, %eax
// 1df: 78 21                         js      0x202 <_JIT_ENTRY+0x202>
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1eb: ff d0                         callq   *%rax
// 1ed: 49 ff 0c 24                   decq    (%r12)
// 1f1: 75 0f                         jne     0x202 <_JIT_ENTRY+0x202>
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _Py_Dealloc
// 1fd: 4c 89 e7                      movq    %r12, %rdi
// 200: ff d0                         callq   *%rax
// 202: 4d 85 ed                      testq   %r13, %r13
// 205: 0f 84 46 ff ff ff             je      0x151 <_JIT_ENTRY+0x151>
// 20b: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _JIT_CONTINUE
// 219: 48 89 df                      movq    %rbx, %rdi
// 21c: 4c 89 f6                      movq    %r14, %rsi
// 21f: 48 8b 14 24                   movq    (%rsp), %rdx
// 223: 48 83 c4 08                   addq    $0x8, %rsp
// 227: 5b                            popq    %rbx
// 228: 41 5c                         popq    %r12
// 22a: 41 5d                         popq    %r13
// 22c: 41 5e                         popq    %r14
// 22e: 41 5f                         popq    %r15
// 230: 5d                            popq    %rbp
// 231: ff e0                         jmpq    *%rax
// 233: 
static const unsigned char _STORE_SUBSCRplus_CONVERT_VALUE_code_body[564] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x3e, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb0, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xc2, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0x14, 0xc1, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x46, 0xff, 0xff, 0xff, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_CONVERT_VALUE_code_holes[21] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_CONVERT_VALUE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_CONVERT_VALUE_data_holes[4] = {
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Repr, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_ASCII, 0x0},
};

// _STORE_SUBSCRplus_COPY
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_COPY.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _JIT_OPARG
// 18b: 0f b7 c0                      movzwl  %ax, %eax
// 18e: 48 c1 e0 03                   shlq    $0x3, %rax
// 192: 48 89 d9                      movq    %rbx, %rcx
// 195: 48 29 c1                      subq    %rax, %rcx
// 198: 4c 8b 39                      movq    (%rcx), %r15
// 19b: 41 8b 07                      movl    (%r15), %eax
// 19e: ff c0                         incl    %eax
// 1a0: 74 0f                         je      0x1b1 <_JIT_ENTRY+0x1b1>
// 1a2: 41 89 07                      movl    %eax, (%r15)
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1af: ff d0                         callq   *%rax
// 1b1: 4c 89 3b                      movq    %r15, (%rbx)
// 1b4: 48 83 c3 08                   addq    $0x8, %rbx
// 1b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ba:  R_X86_64_64  _JIT_CONTINUE
// 1c2: 4c 89 f7                      movq    %r14, %rdi
// 1c5: 48 89 de                      movq    %rbx, %rsi
// 1c8: 48 8b 14 24                   movq    (%rsp), %rdx
// 1cc: 48 83 c4 08                   addq    $0x8, %rsp
// 1d0: 5b                            popq    %rbx
// 1d1: 41 5c                         popq    %r12
// 1d3: 41 5d                         popq    %r13
// 1d5: 41 5e                         popq    %r14
// 1d7: 41 5f                         popq    %r15
// 1d9: 5d                            popq    %rbp
// 1da: ff e0                         jmpq    *%rax
// 1dc: 
static const unsigned char _STORE_SUBSCRplus_COPY_code_body[477] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0xd9, 0x48, 0x29, 0xc1, 0x4c, 0x8b, 0x39, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_COPY_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_COPY_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_COPY_data_holes[1];

// _STORE_SUBSCRplus_COPY_FREE_VARS
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_COPY_FREE_VARS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 48 89 f3                      movq    %rsi, %rbx
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 23: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  PyObject_SetItem
// 31: 4c 89 ef                      movq    %r13, %rdi
// 34: 4c 89 e6                      movq    %r12, %rsi
// 37: 4c 89 fa                      movq    %r15, %rdx
// 3a: ff d0                         callq   *%rax
// 3c: 89 c5                         movl    %eax, %ebp
// 3e: 49 8b 07                      movq    (%r15), %rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 7e 10                         jle     0x56 <_JIT_ENTRY+0x56>
// 46: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000048:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 50: 85 c0                         testl   %eax, %eax
// 52: 79 31                         jns     0x85 <_JIT_ENTRY+0x85>
// 54: eb 37                         jmp     0x8d <_JIT_ENTRY+0x8d>
// 56: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000058:  R_X86_64_64  .rodata.str1.1
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _Py_NegativeRefcount
// 6a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 6f: 4c 89 fa                      movq    %r15, %rdx
// 72: ff d0                         callq   *%rax
// 74: 49 8b 07                      movq    (%r15), %rax
// 77: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 0000000000000079:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 81: 85 c0                         testl   %eax, %eax
// 83: 78 08                         js      0x8d <_JIT_ENTRY+0x8d>
// 85: 41 ff d6                      callq   *%r14
// 88: 49 ff 0f                      decq    (%r15)
// 8b: 74 0f                         je      0x9c <_JIT_ENTRY+0x9c>
// 8d: 49 8b 45 00                   movq    (%r13), %rax
// 91: 48 85 c0                      testq   %rax, %rax
// 94: 7e 1e                         jle     0xb4 <_JIT_ENTRY+0xb4>
// 96: 85 c0                         testl   %eax, %eax
// 98: 79 40                         jns     0xda <_JIT_ENTRY+0xda>
// 9a: eb 47                         jmp     0xe3 <_JIT_ENTRY+0xe3>
// 9c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009e:  R_X86_64_64  _Py_Dealloc
// a6: 4c 89 ff                      movq    %r15, %rdi
// a9: ff d0                         callq   *%rax
// ab: 49 8b 45 00                   movq    (%r13), %rax
// af: 48 85 c0                      testq   %rax, %rax
// b2: 7f e2                         jg      0x96 <_JIT_ENTRY+0x96>
// b4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b6:  R_X86_64_64  .rodata.str1.1
// be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c0:  R_X86_64_64  _Py_NegativeRefcount
// c8: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// cd: 4c 89 ea                      movq    %r13, %rdx
// d0: ff d0                         callq   *%rax
// d2: 49 8b 45 00                   movq    (%r13), %rax
// d6: 85 c0                         testl   %eax, %eax
// d8: 78 09                         js      0xe3 <_JIT_ENTRY+0xe3>
// da: 41 ff d6                      callq   *%r14
// dd: 49 ff 4d 00                   decq    (%r13)
// e1: 74 16                         je      0xf9 <_JIT_ENTRY+0xf9>
// e3: 4d 89 f7                      movq    %r14, %r15
// e6: 49 8b 04 24                   movq    (%r12), %rax
// ea: 48 85 c0                      testq   %rax, %rax
// ed: 7e 25                         jle     0x114 <_JIT_ENTRY+0x114>
// ef: 4c 8d 73 e8                   leaq    -0x18(%rbx), %r14
// f3: 85 c0                         testl   %eax, %eax
// f5: 79 47                         jns     0x13e <_JIT_ENTRY+0x13e>
// f7: eb 4e                         jmp     0x147 <_JIT_ENTRY+0x147>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_Dealloc
// 103: 4c 89 ef                      movq    %r13, %rdi
// 106: ff d0                         callq   *%rax
// 108: 4d 89 f7                      movq    %r14, %r15
// 10b: 49 8b 04 24                   movq    (%r12), %rax
// 10f: 48 85 c0                      testq   %rax, %rax
// 112: 7f db                         jg      0xef <_JIT_ENTRY+0xef>
// 114: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000116:  R_X86_64_64  .rodata.str1.1
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _Py_NegativeRefcount
// 128: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 12d: 4c 89 e2                      movq    %r12, %rdx
// 130: ff d0                         callq   *%rax
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 4c 8d 73 e8                   leaq    -0x18(%rbx), %r14
// 13a: 85 c0                         testl   %eax, %eax
// 13c: 78 09                         js      0x147 <_JIT_ENTRY+0x147>
// 13e: 41 ff d7                      callq   *%r15
// 141: 49 ff 0c 24                   decq    (%r12)
// 145: 74 2c                         je      0x173 <_JIT_ENTRY+0x173>
// 147: 85 ed                         testl   %ebp, %ebp
// 149: 49 0f 44 de                   cmoveq  %r14, %rbx
// 14d: 74 3b                         je      0x18a <_JIT_ENTRY+0x18a>
// 14f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 154: 48 29 c3                      subq    %rax, %rbx
// 157: 48 83 c3 a0                   addq    $-0x60, %rbx
// 15b: 48 c1 eb 03                   shrq    $0x3, %rbx
// 15f: 89 58 40                      movl    %ebx, 0x40(%rax)
// 162: 31 c0                         xorl    %eax, %eax
// 164: 48 83 c4 18                   addq    $0x18, %rsp
// 168: 5b                            popq    %rbx
// 169: 41 5c                         popq    %r12
// 16b: 41 5d                         popq    %r13
// 16d: 41 5e                         popq    %r14
// 16f: 41 5f                         popq    %r15
// 171: 5d                            popq    %rbp
// 172: c3                            retq
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: ff d0                         callq   *%rax
// 182: 85 ed                         testl   %ebp, %ebp
// 184: 49 0f 44 de                   cmoveq  %r14, %rbx
// 188: 75 c5                         jne     0x14f <_JIT_ENTRY+0x14f>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _JIT_OPARG
// 194: 66 85 c0                      testw   %ax, %ax
// 197: 74 71                         je      0x20a <_JIT_ENTRY+0x20a>
// 199: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 19e: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 1a2: 4c 8b 78 48                   movq    0x48(%rax), %r15
// 1a6: 48 8b 02                      movq    (%rdx), %rax
// 1a9: 8b 40 48                      movl    0x48(%rax), %eax
// 1ac: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ae:  R_X86_64_64  _JIT_OPARG
// 1b6: 0f b7 c9                      movzwl  %cx, %ecx
// 1b9: 29 c8                         subl    %ecx, %eax
// 1bb: 83 f9 02                      cmpl    $0x2, %ecx
// 1be: 41 bc 01 00 00 00             movl    $0x1, %r12d
// 1c4: 44 0f 43 e1                   cmovael %ecx, %r12d
// 1c8: 48 98                         cltq
// 1ca: 4c 8d 2c c2                   leaq    (%rdx,%rax,8), %r13
// 1ce: 49 83 c5 48                   addq    $0x48, %r13
// 1d2: 31 ed                         xorl    %ebp, %ebp
// 1d4: eb 17                         jmp     0x1ed <_JIT_ENTRY+0x1ed>
// 1d6: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 1e0: 4d 89 74 ed 00                movq    %r14, (%r13,%rbp,8)
// 1e5: 48 ff c5                      incq    %rbp
// 1e8: 49 39 ec                      cmpq    %rbp, %r12
// 1eb: 74 1d                         je      0x20a <_JIT_ENTRY+0x20a>
// 1ed: 4d 8b 74 ef 18                movq    0x18(%r15,%rbp,8), %r14
// 1f2: 41 8b 06                      movl    (%r14), %eax
// 1f5: ff c0                         incl    %eax
// 1f7: 74 e7                         je      0x1e0 <_JIT_ENTRY+0x1e0>
// 1f9: 41 89 06                      movl    %eax, (%r14)
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 206: ff d0                         callq   *%rax
// 208: eb d6                         jmp     0x1e0 <_JIT_ENTRY+0x1e0>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _JIT_CONTINUE
// 214: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 219: 48 89 de                      movq    %rbx, %rsi
// 21c: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 221: 48 83 c4 18                   addq    $0x18, %rsp
// 225: 5b                            popq    %rbx
// 226: 41 5c                         popq    %r12
// 228: 41 5d                         popq    %r13
// 22a: 41 5e                         popq    %r14
// 22c: 41 5f                         popq    %r15
// 22e: 5d                            popq    %rbp
// 22f: ff e0                         jmpq    *%rax
// 231: 
static const unsigned char _STORE_SUBSCRplus_COPY_FREE_VARS_code_body[562] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0xf3, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x10, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x31, 0xeb, 0x37, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x08, 0x41, 0xff, 0xd6, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x47, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x09, 0x41, 0xff, 0xd6, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x16, 0x4d, 0x89, 0xf7, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x25, 0x4c, 0x8d, 0x73, 0xe8, 0x85, 0xc0, 0x79, 0x47, 0xeb, 0x4e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0xf7, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xdb, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x73, 0xe8, 0x85, 0xc0, 0x78, 0x09, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2c, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xde, 0x74, 0x3b, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x29, 0xc3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x89, 0x58, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xde, 0x75, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x74, 0x71, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x8b, 0x42, 0x10, 0x4c, 0x8b, 0x78, 0x48, 0x48, 0x8b, 0x02, 0x8b, 0x40, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x83, 0xf9, 0x02, 0x41, 0xbc, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe1, 0x48, 0x98, 0x4c, 0x8d, 0x2c, 0xc2, 0x49, 0x83, 0xc5, 0x48, 0x31, 0xed, 0xeb, 0x17, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x74, 0xed, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xec, 0x74, 0x1d, 0x4d, 0x8b, 0x74, 0xef, 0x18, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0xe7, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_COPY_FREE_VARS_code_holes[17] = {
    {0x29, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_COPY_FREE_VARS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_COPY_FREE_VARS_data_holes[1];

// _STORE_SUBSCRplus_DELETE_ATTR
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_DELETE_ATTR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 14                         je      0x156 <_JIT_ENTRY+0x156>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 23                         je      0x16d <_JIT_ENTRY+0x16d>
// 14a: 49 83 c6 f0                   addq    $-0x10, %r14
// 14e: 4d 89 f7                      movq    %r14, %r15
// 151: e9 90 00 00 00                jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _Py_Dealloc
// 160: 4c 89 e7                      movq    %r12, %rdi
// 163: ff d0                         callq   *%rax
// 165: 85 ed                         testl   %ebp, %ebp
// 167: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 16b: 75 dd                         jne     0x14a <_JIT_ENTRY+0x14a>
// 16d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 171: 48 8b 03                      movq    (%rbx), %rax
// 174: 48 8b 40 20                   movq    0x20(%rax), %rax
// 178: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017a:  R_X86_64_64  _JIT_OPARG
// 182: 0f b7 c9                      movzwl  %cx, %ecx
// 185: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  PyObject_DelAttr
// 194: 4c 89 e7                      movq    %r12, %rdi
// 197: ff d0                         callq   *%rax
// 199: 89 c5                         movl    %eax, %ebp
// 19b: 49 8b 04 24                   movq    (%r12), %rax
// 19f: 48 85 c0                      testq   %rax, %rax
// 1a2: 7e 06                         jle     0x1aa <_JIT_ENTRY+0x1aa>
// 1a4: 85 c0                         testl   %eax, %eax
// 1a6: 79 28                         jns     0x1d0 <_JIT_ENTRY+0x1d0>
// 1a8: eb 38                         jmp     0x1e2 <_JIT_ENTRY+0x1e2>
// 1aa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ac:  R_X86_64_64  .rodata.str1.1
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_NegativeRefcount
// 1be: be d2 03 00 00                movl    $0x3d2, %esi            # imm = 0x3D2
// 1c3: 4c 89 e2                      movq    %r12, %rdx
// 1c6: ff d0                         callq   *%rax
// 1c8: 49 8b 04 24                   movq    (%r12), %rax
// 1cc: 85 c0                         testl   %eax, %eax
// 1ce: 78 12                         js      0x1e2 <_JIT_ENTRY+0x1e2>
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1da: ff d0                         callq   *%rax
// 1dc: 49 ff 0c 24                   decq    (%r12)
// 1e0: 74 24                         je      0x206 <_JIT_ENTRY+0x206>
// 1e2: 85 ed                         testl   %ebp, %ebp
// 1e4: 74 33                         je      0x219 <_JIT_ENTRY+0x219>
// 1e6: 49 29 df                      subq    %rbx, %r15
// 1e9: 49 83 c7 b0                   addq    $-0x50, %r15
// 1ed: 49 c1 ef 03                   shrq    $0x3, %r15
// 1f1: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 1f5: 31 c0                         xorl    %eax, %eax
// 1f7: 48 83 c4 08                   addq    $0x8, %rsp
// 1fb: 5b                            popq    %rbx
// 1fc: 41 5c                         popq    %r12
// 1fe: 41 5d                         popq    %r13
// 200: 41 5e                         popq    %r14
// 202: 41 5f                         popq    %r15
// 204: 5d                            popq    %rbp
// 205: c3                            retq
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_Dealloc
// 210: 4c 89 e7                      movq    %r12, %rdi
// 213: ff d0                         callq   *%rax
// 215: 85 ed                         testl   %ebp, %ebp
// 217: 75 cd                         jne     0x1e6 <_JIT_ENTRY+0x1e6>
// 219: 49 83 c6 f8                   addq    $-0x8, %r14
// 21d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021f:  R_X86_64_64  _JIT_CONTINUE
// 227: 48 89 df                      movq    %rbx, %rdi
// 22a: 4c 89 f6                      movq    %r14, %rsi
// 22d: 48 8b 14 24                   movq    (%rsp), %rdx
// 231: 48 83 c4 08                   addq    $0x8, %rsp
// 235: 5b                            popq    %rbx
// 236: 41 5c                         popq    %r12
// 238: 41 5d                         popq    %r13
// 23a: 41 5e                         popq    %r14
// 23c: 41 5f                         popq    %r15
// 23e: 5d                            popq    %rbp
// 23f: ff e0                         jmpq    *%rax
// 241: 
static const unsigned char _STORE_SUBSCRplus_DELETE_ATTR_code_body[578] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x14, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x23, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0xf7, 0xe9, 0x90, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xdd, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd2, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x24, 0x85, 0xed, 0x74, 0x33, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb0, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x75, 0xcd, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_DELETE_ATTR_code_holes[21] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelAttr, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_DELETE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_DELETE_ATTR_data_holes[1];

// _STORE_SUBSCRplus_DELETE_DEREF
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_DELETE_DEREF.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f7                      movq    %rsi, %r15
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 f2                      movq    %r14, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 06                      movq    (%r14), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 f2                      movq    %r14, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0e                      decq    (%r14)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 f7                      movq    %r14, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 fd                   cmoveq  %r13, %r15
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c7 e8                   addq    $-0x18, %r15
// 14e: 4d 89 fd                      movq    %r15, %r13
// 151: 49 29 dd                      subq    %rbx, %r13
// 154: 49 83 c5 b8                   addq    $-0x48, %r13
// 158: 49 c1 ed 03                   shrq    $0x3, %r13
// 15c: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 fd                   cmoveq  %r13, %r15
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  _JIT_OPARG
// 192: 0f b7 c0                      movzwl  %ax, %eax
// 195: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 19a: 4c 8b 70 10                   movq    0x10(%rax), %r14
// 19e: 4d 85 f6                      testq   %r14, %r14
// 1a1: 74 16                         je      0x1b9 <_JIT_ENTRY+0x1b9>
// 1a3: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 1ab: 49 8b 06                      movq    (%r14), %rax
// 1ae: 48 85 c0                      testq   %rax, %rax
// 1b1: 7e 2b                         jle     0x1de <_JIT_ENTRY+0x1de>
// 1b3: 85 c0                         testl   %eax, %eax
// 1b5: 79 4c                         jns     0x203 <_JIT_ENTRY+0x203>
// 1b7: eb 6a                         jmp     0x223 <_JIT_ENTRY+0x223>
// 1b9: 48 8b 33                      movq    (%rbx), %rsi
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _JIT_OPARG
// 1c6: 0f b7 d0                      movzwl  %ax, %edx
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _PyEval_FormatExcUnbound
// 1d3: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1d7: ff d0                         callq   *%rax
// 1d9: e9 73 ff ff ff                jmp     0x151 <_JIT_ENTRY+0x151>
// 1de: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e0:  R_X86_64_64  .rodata.str1.1
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _Py_NegativeRefcount
// 1f2: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 1f7: 4c 89 f2                      movq    %r14, %rdx
// 1fa: ff d0                         callq   *%rax
// 1fc: 49 8b 06                      movq    (%r14), %rax
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 78 20                         js      0x223 <_JIT_ENTRY+0x223>
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20d: ff d0                         callq   *%rax
// 20f: 49 ff 0e                      decq    (%r14)
// 212: 75 0f                         jne     0x223 <_JIT_ENTRY+0x223>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_Dealloc
// 21e: 4c 89 f7                      movq    %r14, %rdi
// 221: ff d0                         callq   *%rax
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _JIT_CONTINUE
// 22d: 48 89 df                      movq    %rbx, %rdi
// 230: 4c 89 fe                      movq    %r15, %rsi
// 233: 48 8b 14 24                   movq    (%rsp), %rdx
// 237: 48 83 c4 08                   addq    $0x8, %rsp
// 23b: 5b                            popq    %rbx
// 23c: 41 5c                         popq    %r12
// 23e: 41 5d                         popq    %r13
// 240: 41 5e                         popq    %r14
// 242: 41 5f                         popq    %r15
// 244: 5d                            popq    %rbp
// 245: ff e0                         jmpq    *%rax
// 247: 
static const unsigned char _STORE_SUBSCRplus_DELETE_DEREF_code_body[584] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x6f, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6f, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfd, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfd, 0x75, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x4c, 0x8b, 0x70, 0x10, 0x4d, 0x85, 0xf6, 0x74, 0x16, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x2b, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6a, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0xe9, 0x73, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_DELETE_DEREF_code_holes[22] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_DELETE_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_DELETE_DEREF_data_holes[1];

// _STORE_SUBSCRplus_DELETE_FAST
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_DELETE_FAST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f7                      movq    %rsi, %r15
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 f2                      movq    %r14, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 06                      movq    (%r14), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 f2                      movq    %r14, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0e                      decq    (%r14)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 f7                      movq    %r14, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 fd                   cmoveq  %r13, %r15
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c7 e8                   addq    $-0x18, %r15
// 14e: 4d 89 fd                      movq    %r15, %r13
// 151: 49 29 dd                      subq    %rbx, %r13
// 154: 49 83 c5 b8                   addq    $-0x48, %r13
// 158: 49 c1 ed 03                   shrq    $0x3, %r13
// 15c: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 fd                   cmoveq  %r13, %r15
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  _JIT_OPARG
// 192: 0f b7 c0                      movzwl  %ax, %eax
// 195: 4c 8b 74 c3 48                movq    0x48(%rbx,%rax,8), %r14
// 19a: 4d 85 f6                      testq   %r14, %r14
// 19d: 74 27                         je      0x1c6 <_JIT_ENTRY+0x1c6>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _JIT_OPARG
// 1a9: 0f b7 c0                      movzwl  %ax, %eax
// 1ac: 48 c7 44 c3 48 00 00 00 00    movq    $0x0, 0x48(%rbx,%rax,8)
// 1b5: 49 8b 06                      movq    (%r14), %rax
// 1b8: 48 85 c0                      testq   %rax, %rax
// 1bb: 7e 5c                         jle     0x219 <_JIT_ENTRY+0x219>
// 1bd: 85 c0                         testl   %eax, %eax
// 1bf: 79 7d                         jns     0x23e <_JIT_ENTRY+0x23e>
// 1c1: e9 98 00 00 00                jmp     0x25e <_JIT_ENTRY+0x25e>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  PyExc_UnboundLocalError
// 1d0: 4c 8b 30                      movq    (%rax), %r14
// 1d3: 48 8b 03                      movq    (%rbx), %rax
// 1d6: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _JIT_OPARG
// 1e4: 0f b7 f0                      movzwl  %ax, %esi
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  PyTuple_GetItem
// 1f1: ff d0                         callq   *%rax
// 1f3: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001f5:  R_X86_64_64  .rodata.str1.1+0x39
// 1fd: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000001ff:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 207: 48 8b 3c 24                   movq    (%rsp), %rdi
// 20b: 4c 89 f6                      movq    %r14, %rsi
// 20e: 48 89 c1                      movq    %rax, %rcx
// 211: 41 ff d0                      callq   *%r8
// 214: e9 38 ff ff ff                jmp     0x151 <_JIT_ENTRY+0x151>
// 219: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021b:  R_X86_64_64  .rodata.str1.1+0x83
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_NegativeRefcount
// 22d: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 232: 4c 89 f2                      movq    %r14, %rdx
// 235: ff d0                         callq   *%rax
// 237: 49 8b 06                      movq    (%r14), %rax
// 23a: 85 c0                         testl   %eax, %eax
// 23c: 78 20                         js      0x25e <_JIT_ENTRY+0x25e>
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 248: ff d0                         callq   *%rax
// 24a: 49 ff 0e                      decq    (%r14)
// 24d: 75 0f                         jne     0x25e <_JIT_ENTRY+0x25e>
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _Py_Dealloc
// 259: 4c 89 f7                      movq    %r14, %rdi
// 25c: ff d0                         callq   *%rax
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _JIT_CONTINUE
// 268: 48 89 df                      movq    %rbx, %rdi
// 26b: 4c 89 fe                      movq    %r15, %rsi
// 26e: 48 8b 14 24                   movq    (%rsp), %rdx
// 272: 48 83 c4 08                   addq    $0x8, %rsp
// 276: 5b                            popq    %rbx
// 277: 41 5c                         popq    %r12
// 279: 41 5d                         popq    %r13
// 27b: 41 5e                         popq    %r14
// 27d: 41 5f                         popq    %r15
// 27f: 5d                            popq    %rbp
// 280: ff e0                         jmpq    *%rax
// 282: 
static const unsigned char _STORE_SUBSCRplus_DELETE_FAST_code_body[643] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x6f, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6f, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfd, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfd, 0x75, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8b, 0x74, 0xc3, 0x48, 0x4d, 0x85, 0xf6, 0x74, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc7, 0x44, 0xc3, 0x48, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x5c, 0x85, 0xc0, 0x79, 0x7d, 0xe9, 0x98, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x30, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0xe9, 0x38, 0xff, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_DELETE_FAST_code_holes[26] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x83},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot access local variable '%s' where it is not associated with a value\x00/home/jglass/Documents/cpython/Include/object.h\x00"
// b3: 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_DELETE_FAST_data_body[185] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_DELETE_FAST_data_holes[1];

// _STORE_SUBSCRplus_DELETE_GLOBAL
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_DELETE_GLOBAL.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f7                      movq    %rsi, %r15
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 f2                      movq    %r14, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 06                      movq    (%r14), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 f2                      movq    %r14, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0e                      decq    (%r14)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 f7                      movq    %r14, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 fd                   cmoveq  %r13, %r15
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c7 e8                   addq    $-0x18, %r15
// 14e: 4d 89 fd                      movq    %r15, %r13
// 151: 49 29 dd                      subq    %rbx, %r13
// 154: 49 83 c5 b8                   addq    $-0x48, %r13
// 158: 49 c1 ed 03                   shrq    $0x3, %r13
// 15c: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 fd                   cmoveq  %r13, %r15
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 48 8b 03                      movq    (%rbx), %rax
// 18b: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 18f: 48 8b 40 20                   movq    0x20(%rax), %rax
// 193: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000195:  R_X86_64_64  _JIT_OPARG
// 19d: 0f b7 c9                      movzwl  %cx, %ecx
// 1a0: 4c 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %r14
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  PyDict_DelItem
// 1af: 4c 89 f6                      movq    %r14, %rsi
// 1b2: ff d0                         callq   *%rax
// 1b4: 85 c0                         testl   %eax, %eax
// 1b6: 74 56                         je      0x20e <_JIT_ENTRY+0x20e>
// 1b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ba:  R_X86_64_64  PyExc_KeyError
// 1c2: 48 8b 30                      movq    (%rax), %rsi
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _PyErr_ExceptionMatches
// 1cf: 4c 8b 3c 24                   movq    (%rsp), %r15
// 1d3: 4c 89 ff                      movq    %r15, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 85 c0                         testl   %eax, %eax
// 1da: 0f 84 71 ff ff ff             je      0x151 <_JIT_ENTRY+0x151>
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  PyExc_NameError
// 1ea: 48 8b 30                      movq    (%rax), %rsi
// 1ed: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001ef:  R_X86_64_64  .rodata.str1.1+0x39
// 1f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f9:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 201: 4c 89 ff                      movq    %r15, %rdi
// 204: 4c 89 f1                      movq    %r14, %rcx
// 207: ff d0                         callq   *%rax
// 209: e9 43 ff ff ff                jmp     0x151 <_JIT_ENTRY+0x151>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _JIT_CONTINUE
// 218: 48 89 df                      movq    %rbx, %rdi
// 21b: 4c 89 fe                      movq    %r15, %rsi
// 21e: 48 8b 14 24                   movq    (%rsp), %rdx
// 222: 48 83 c4 08                   addq    $0x8, %rsp
// 226: 5b                            popq    %rbx
// 227: 41 5c                         popq    %r12
// 229: 41 5d                         popq    %r13
// 22b: 41 5e                         popq    %r14
// 22d: 41 5f                         popq    %r15
// 22f: 5d                            popq    %rbp
// 230: ff e0                         jmpq    *%rax
// 232: 
static const unsigned char _STORE_SUBSCRplus_DELETE_GLOBAL_code_body[563] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x6f, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6f, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfd, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfd, 0x75, 0xc2, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x56, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x71, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf1, 0xff, 0xd0, 0xe9, 0x43, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_DELETE_GLOBAL_code_holes[22] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_DelItem, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_KeyError, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _STORE_SUBSCRplus_DELETE_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_DELETE_GLOBAL_data_holes[1];

// _STORE_SUBSCRplus_DELETE_NAME
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_DELETE_NAME.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f7                      movq    %rsi, %r15
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 f2                      movq    %r14, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 06                      movq    (%r14), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 f2                      movq    %r14, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0e                      decq    (%r14)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 f7                      movq    %r14, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 fd                   cmoveq  %r13, %r15
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c7 e8                   addq    $-0x18, %r15
// 14e: 4d 89 fd                      movq    %r15, %r13
// 151: 49 29 dd                      subq    %rbx, %r13
// 154: 49 83 c5 b8                   addq    $-0x48, %r13
// 158: 49 c1 ed 03                   shrq    $0x3, %r13
// 15c: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 fd                   cmoveq  %r13, %r15
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 48 8b 03                      movq    (%rbx), %rax
// 18b: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 18f: 48 8b 40 20                   movq    0x20(%rax), %rax
// 193: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000195:  R_X86_64_64  _JIT_OPARG
// 19d: 0f b7 c9                      movzwl  %cx, %ecx
// 1a0: 4c 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %r14
// 1a5: 48 85 ff                      testq   %rdi, %rdi
// 1a8: 74 42                         je      0x1ec <_JIT_ENTRY+0x1ec>
// 1aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ac:  R_X86_64_64  PyObject_DelItem
// 1b4: 4c 89 f6                      movq    %r14, %rsi
// 1b7: ff d0                         callq   *%rax
// 1b9: 85 c0                         testl   %eax, %eax
// 1bb: 74 61                         je      0x21e <_JIT_ENTRY+0x21e>
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  PyExc_NameError
// 1c7: 48 8b 30                      movq    (%rax), %rsi
// 1ca: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001cc:  R_X86_64_64  .rodata.str1.1+0x54
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 1de: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1e2: 4c 89 f1                      movq    %r14, %rcx
// 1e5: ff d0                         callq   *%rax
// 1e7: e9 65 ff ff ff                jmp     0x151 <_JIT_ENTRY+0x151>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  PyExc_SystemError
// 1f6: 48 8b 30                      movq    (%rax), %rsi
// 1f9: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001fb:  R_X86_64_64  .rodata.str1.1+0x39
// 203: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000205:  R_X86_64_64  _PyErr_Format
// 20d: 48 8b 3c 24                   movq    (%rsp), %rdi
// 211: 4c 89 f1                      movq    %r14, %rcx
// 214: 31 c0                         xorl    %eax, %eax
// 216: 41 ff d0                      callq   *%r8
// 219: e9 33 ff ff ff                jmp     0x151 <_JIT_ENTRY+0x151>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _JIT_CONTINUE
// 228: 48 89 df                      movq    %rbx, %rdi
// 22b: 4c 89 fe                      movq    %r15, %rsi
// 22e: 48 8b 14 24                   movq    (%rsp), %rdx
// 232: 48 83 c4 08                   addq    $0x8, %rsp
// 236: 5b                            popq    %rbx
// 237: 41 5c                         popq    %r12
// 239: 41 5d                         popq    %r13
// 23b: 41 5e                         popq    %r14
// 23d: 41 5f                         popq    %r15
// 23f: 5d                            popq    %rbp
// 240: ff e0                         jmpq    *%rax
// 242: 
static const unsigned char _STORE_SUBSCRplus_DELETE_NAME_code_body[579] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x6f, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6f, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfd, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfd, 0x75, 0xc2, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0x85, 0xff, 0x74, 0x42, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x61, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf1, 0xff, 0xd0, 0xe9, 0x65, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf1, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0x33, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_DELETE_NAME_code_holes[23] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x54},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals when deleting %R\x00name '%.200s' is not defined\x00"
// 71: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_DELETE_NAME_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_DELETE_NAME_data_holes[1];

// _STORE_SUBSCRplus_DELETE_SUBSCR
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_DELETE_SUBSCR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 14                         je      0x156 <_JIT_ENTRY+0x156>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 148: 74 23                         je      0x16d <_JIT_ENTRY+0x16d>
// 14a: 49 83 c6 f8                   addq    $-0x8, %r14
// 14e: 4d 89 f5                      movq    %r14, %r13
// 151: e9 da 00 00 00                jmp     0x230 <_JIT_ENTRY+0x230>
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _Py_Dealloc
// 160: 4c 89 e7                      movq    %r12, %rdi
// 163: ff d0                         callq   *%rax
// 165: 85 ed                         testl   %ebp, %ebp
// 167: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 16b: 75 dd                         jne     0x14a <_JIT_ENTRY+0x14a>
// 16d: 4d 8b 7e f0                   movq    -0x10(%r14), %r15
// 171: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  PyObject_DelItem
// 17f: 4c 89 ff                      movq    %r15, %rdi
// 182: 4c 89 e6                      movq    %r12, %rsi
// 185: ff d0                         callq   *%rax
// 187: 89 c5                         movl    %eax, %ebp
// 189: 49 8b 07                      movq    (%r15), %rax
// 18c: 48 85 c0                      testq   %rax, %rax
// 18f: 7e 06                         jle     0x197 <_JIT_ENTRY+0x197>
// 191: 85 c0                         testl   %eax, %eax
// 193: 79 27                         jns     0x1bc <_JIT_ENTRY+0x1bc>
// 195: eb 36                         jmp     0x1cd <_JIT_ENTRY+0x1cd>
// 197: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000199:  R_X86_64_64  .rodata.str1.1
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_NegativeRefcount
// 1ab: be 70 02 00 00                movl    $0x270, %esi            # imm = 0x270
// 1b0: 4c 89 fa                      movq    %r15, %rdx
// 1b3: ff d0                         callq   *%rax
// 1b5: 49 8b 07                      movq    (%r15), %rax
// 1b8: 85 c0                         testl   %eax, %eax
// 1ba: 78 11                         js      0x1cd <_JIT_ENTRY+0x1cd>
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c6: ff d0                         callq   *%rax
// 1c8: 49 ff 0f                      decq    (%r15)
// 1cb: 74 0f                         je      0x1dc <_JIT_ENTRY+0x1dc>
// 1cd: 49 8b 04 24                   movq    (%r12), %rax
// 1d1: 48 85 c0                      testq   %rax, %rax
// 1d4: 7e 1e                         jle     0x1f4 <_JIT_ENTRY+0x1f4>
// 1d6: 85 c0                         testl   %eax, %eax
// 1d8: 79 40                         jns     0x21a <_JIT_ENTRY+0x21a>
// 1da: eb 50                         jmp     0x22c <_JIT_ENTRY+0x22c>
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _Py_Dealloc
// 1e6: 4c 89 ff                      movq    %r15, %rdi
// 1e9: ff d0                         callq   *%rax
// 1eb: 49 8b 04 24                   movq    (%r12), %rax
// 1ef: 48 85 c0                      testq   %rax, %rax
// 1f2: 7f e2                         jg      0x1d6 <_JIT_ENTRY+0x1d6>
// 1f4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f6:  R_X86_64_64  .rodata.str1.1
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _Py_NegativeRefcount
// 208: be 71 02 00 00                movl    $0x271, %esi            # imm = 0x271
// 20d: 4c 89 e2                      movq    %r12, %rdx
// 210: ff d0                         callq   *%rax
// 212: 49 8b 04 24                   movq    (%r12), %rax
// 216: 85 c0                         testl   %eax, %eax
// 218: 78 12                         js      0x22c <_JIT_ENTRY+0x22c>
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 224: ff d0                         callq   *%rax
// 226: 49 ff 0c 24                   decq    (%r12)
// 22a: 74 24                         je      0x250 <_JIT_ENTRY+0x250>
// 22c: 85 ed                         testl   %ebp, %ebp
// 22e: 74 33                         je      0x263 <_JIT_ENTRY+0x263>
// 230: 49 29 dd                      subq    %rbx, %r13
// 233: 49 83 c5 a8                   addq    $-0x58, %r13
// 237: 49 c1 ed 03                   shrq    $0x3, %r13
// 23b: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 23f: 31 c0                         xorl    %eax, %eax
// 241: 48 83 c4 08                   addq    $0x8, %rsp
// 245: 5b                            popq    %rbx
// 246: 41 5c                         popq    %r12
// 248: 41 5d                         popq    %r13
// 24a: 41 5e                         popq    %r14
// 24c: 41 5f                         popq    %r15
// 24e: 5d                            popq    %rbp
// 24f: c3                            retq
// 250: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000252:  R_X86_64_64  _Py_Dealloc
// 25a: 4c 89 e7                      movq    %r12, %rdi
// 25d: ff d0                         callq   *%rax
// 25f: 85 ed                         testl   %ebp, %ebp
// 261: 75 cd                         jne     0x230 <_JIT_ENTRY+0x230>
// 263: 49 83 c6 f0                   addq    $-0x10, %r14
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _JIT_CONTINUE
// 271: 48 89 df                      movq    %rbx, %rdi
// 274: 4c 89 f6                      movq    %r14, %rsi
// 277: 48 8b 14 24                   movq    (%rsp), %rdx
// 27b: 48 83 c4 08                   addq    $0x8, %rsp
// 27f: 5b                            popq    %rbx
// 280: 41 5c                         popq    %r12
// 282: 41 5d                         popq    %r13
// 284: 41 5e                         popq    %r14
// 286: 41 5f                         popq    %r15
// 288: 5d                            popq    %rbp
// 289: ff e0                         jmpq    *%rax
// 28b: 
static const unsigned char _STORE_SUBSCRplus_DELETE_SUBSCR_code_body[652] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x6e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x14, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x74, 0x23, 0x49, 0x83, 0xc6, 0xf8, 0x4d, 0x89, 0xf5, 0xe9, 0xda, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x75, 0xdd, 0x4d, 0x8b, 0x7e, 0xf0, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x70, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x24, 0x85, 0xed, 0x74, 0x33, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xa8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x75, 0xcd, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_DELETE_SUBSCR_code_holes[24] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_DELETE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_DELETE_SUBSCR_data_holes[1];

// _STORE_SUBSCRplus_DICT_MERGE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_DICT_MERGE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f7                      movq    %rsi, %r15
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 f2                      movq    %r14, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 06                      movq    (%r14), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 f2                      movq    %r14, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0e                      decq    (%r14)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 f7                      movq    %r14, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 fd                   cmoveq  %r13, %r15
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c7 f0                   addq    $-0x10, %r15
// 14e: 4d 89 fd                      movq    %r15, %r13
// 151: 49 29 dd                      subq    %rbx, %r13
// 154: 49 83 c5 b0                   addq    $-0x50, %r13
// 158: 49 c1 ed 03                   shrq    $0x3, %r13
// 15c: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 fd                   cmoveq  %r13, %r15
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c0                      movzwl  %ax, %eax
// 199: b9 fc ff ff ff                movl    $0xfffffffc, %ecx       # imm = 0xFFFFFFFC
// 19e: 29 c1                         subl    %eax, %ecx
// 1a0: f7 d0                         notl    %eax
// 1a2: 48 98                         cltq
// 1a4: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 1a8: 48 63 c1                      movslq  %ecx, %rax
// 1ab: 4d 8b 34 c7                   movq    (%r15,%rax,8), %r14
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _PyDict_MergeEx
// 1b9: 4c 89 e6                      movq    %r12, %rsi
// 1bc: ba 02 00 00 00                movl    $0x2, %edx
// 1c1: ff d0                         callq   *%rax
// 1c3: 85 c0                         testl   %eax, %eax
// 1c5: 78 78                         js      0x23f <_JIT_ENTRY+0x23f>
// 1c7: 49 8b 04 24                   movq    (%r12), %rax
// 1cb: 48 85 c0                      testq   %rax, %rax
// 1ce: 7f 22                         jg      0x1f2 <_JIT_ENTRY+0x1f2>
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _Py_NegativeRefcount
// 1e4: be d6 05 00 00                movl    $0x5d6, %esi            # imm = 0x5D6
// 1e9: 4c 89 e2                      movq    %r12, %rdx
// 1ec: ff d0                         callq   *%rax
// 1ee: 49 8b 04 24                   movq    (%r12), %rax
// 1f2: 49 83 c7 f8                   addq    $-0x8, %r15
// 1f6: 85 c0                         testl   %eax, %eax
// 1f8: 78 21                         js      0x21b <_JIT_ENTRY+0x21b>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 204: ff d0                         callq   *%rax
// 206: 49 ff 0c 24                   decq    (%r12)
// 20a: 75 0f                         jne     0x21b <_JIT_ENTRY+0x21b>
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_Dealloc
// 216: 4c 89 e7                      movq    %r12, %rdi
// 219: ff d0                         callq   *%rax
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _JIT_CONTINUE
// 225: 48 89 df                      movq    %rbx, %rdi
// 228: 4c 89 fe                      movq    %r15, %rsi
// 22b: 48 8b 14 24                   movq    (%rsp), %rdx
// 22f: 48 83 c4 08                   addq    $0x8, %rsp
// 233: 5b                            popq    %rbx
// 234: 41 5c                         popq    %r12
// 236: 41 5d                         popq    %r13
// 238: 41 5e                         popq    %r14
// 23a: 41 5f                         popq    %r15
// 23c: 5d                            popq    %rbp
// 23d: ff e0                         jmpq    *%rax
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _PyEval_FormatKwargsError
// 249: 48 8b 3c 24                   movq    (%rsp), %rdi
// 24d: 4c 89 f6                      movq    %r14, %rsi
// 250: 4c 89 e2                      movq    %r12, %rdx
// 253: ff d0                         callq   *%rax
// 255: 49 8b 04 24                   movq    (%r12), %rax
// 259: 48 85 c0                      testq   %rax, %rax
// 25c: 7f 22                         jg      0x280 <_JIT_ENTRY+0x280>
// 25e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000260:  R_X86_64_64  .rodata.str1.1
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _Py_NegativeRefcount
// 272: be d3 05 00 00                movl    $0x5d3, %esi            # imm = 0x5D3
// 277: 4c 89 e2                      movq    %r12, %rdx
// 27a: ff d0                         callq   *%rax
// 27c: 49 8b 04 24                   movq    (%r12), %rax
// 280: 85 c0                         testl   %eax, %eax
// 282: 0f 88 c9 fe ff ff             js      0x151 <_JIT_ENTRY+0x151>
// 288: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 292: ff d0                         callq   *%rax
// 294: 49 ff 0c 24                   decq    (%r12)
// 298: 0f 85 b3 fe ff ff             jne     0x151 <_JIT_ENTRY+0x151>
// 29e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a0:  R_X86_64_64  _Py_Dealloc
// 2a8: 4c 89 e7                      movq    %r12, %rdi
// 2ab: ff d0                         callq   *%rax
// 2ad: e9 9f fe ff ff                jmp     0x151 <_JIT_ENTRY+0x151>
// 2b2: 
static const unsigned char _STORE_SUBSCRplus_DICT_MERGE_code_body[691] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x6f, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6f, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfd, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xf0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb0, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfd, 0x75, 0xc2, 0x4d, 0x8b, 0x67, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfc, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0x63, 0xc1, 0x4d, 0x8b, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xba, 0x02, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x78, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd3, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xc9, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xb3, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x9f, 0xfe, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_DICT_MERGE_code_holes[26] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_MergeEx, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatKwargsError, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_DICT_MERGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_DICT_MERGE_data_holes[1];

// _STORE_SUBSCRplus_DICT_UPDATE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_DICT_UPDATE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f7                      movq    %rsi, %r15
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 f2                      movq    %r14, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 06                      movq    (%r14), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 f2                      movq    %r14, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0e                      decq    (%r14)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 f7                      movq    %r14, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c7 f0                   addq    $-0x10, %r15
// 14e: 4d 89 fe                      movq    %r15, %r14
// 151: 49 29 de                      subq    %rbx, %r14
// 154: 49 83 c6 b0                   addq    $-0x50, %r14
// 158: 49 c1 ee 03                   shrq    $0x3, %r14
// 15c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: f7 d0                         notl    %eax
// 198: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 19d: 48 98                         cltq
// 19f: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyDict_Update
// 1ad: 4c 89 e6                      movq    %r12, %rsi
// 1b0: ff d0                         callq   *%rax
// 1b2: 85 c0                         testl   %eax, %eax
// 1b4: 78 78                         js      0x22e <_JIT_ENTRY+0x22e>
// 1b6: 49 8b 04 24                   movq    (%r12), %rax
// 1ba: 48 85 c0                      testq   %rax, %rax
// 1bd: 7f 22                         jg      0x1e1 <_JIT_ENTRY+0x1e1>
// 1bf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c1:  R_X86_64_64  .rodata.str1.1
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_NegativeRefcount
// 1d3: be c4 05 00 00                movl    $0x5c4, %esi            # imm = 0x5C4
// 1d8: 4c 89 e2                      movq    %r12, %rdx
// 1db: ff d0                         callq   *%rax
// 1dd: 49 8b 04 24                   movq    (%r12), %rax
// 1e1: 49 83 c7 f8                   addq    $-0x8, %r15
// 1e5: 85 c0                         testl   %eax, %eax
// 1e7: 78 21                         js      0x20a <_JIT_ENTRY+0x20a>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f3: ff d0                         callq   *%rax
// 1f5: 49 ff 0c 24                   decq    (%r12)
// 1f9: 75 0f                         jne     0x20a <_JIT_ENTRY+0x20a>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: 4c 89 e7                      movq    %r12, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _JIT_CONTINUE
// 214: 48 89 df                      movq    %rbx, %rdi
// 217: 4c 89 fe                      movq    %r15, %rsi
// 21a: 48 8b 14 24                   movq    (%rsp), %rdx
// 21e: 48 83 c4 08                   addq    $0x8, %rsp
// 222: 5b                            popq    %rbx
// 223: 41 5c                         popq    %r12
// 225: 41 5d                         popq    %r13
// 227: 41 5e                         popq    %r14
// 229: 41 5f                         popq    %r15
// 22b: 5d                            popq    %rbp
// 22c: ff e0                         jmpq    *%rax
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  PyExc_AttributeError
// 238: 48 8b 30                      movq    (%rax), %rsi
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _PyErr_ExceptionMatches
// 245: 4c 8b 3c 24                   movq    (%rsp), %r15
// 249: 4c 89 ff                      movq    %r15, %rdi
// 24c: ff d0                         callq   *%rax
// 24e: 85 c0                         testl   %eax, %eax
// 250: 74 32                         je      0x284 <_JIT_ENTRY+0x284>
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  PyExc_TypeError
// 25c: 48 8b 30                      movq    (%rax), %rsi
// 25f: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 264: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 268: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000026a:  R_X86_64_64  .rodata.str1.1+0x39
// 272: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000274:  R_X86_64_64  _PyErr_Format
// 27c: 4c 89 ff                      movq    %r15, %rdi
// 27f: 31 c0                         xorl    %eax, %eax
// 281: 41 ff d0                      callq   *%r8
// 284: 49 8b 04 24                   movq    (%r12), %rax
// 288: 48 85 c0                      testq   %rax, %rax
// 28b: 7f 22                         jg      0x2af <_JIT_ENTRY+0x2af>
// 28d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000028f:  R_X86_64_64  .rodata.str1.1
// 297: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000299:  R_X86_64_64  _Py_NegativeRefcount
// 2a1: be c1 05 00 00                movl    $0x5c1, %esi            # imm = 0x5C1
// 2a6: 4c 89 e2                      movq    %r12, %rdx
// 2a9: ff d0                         callq   *%rax
// 2ab: 49 8b 04 24                   movq    (%r12), %rax
// 2af: 85 c0                         testl   %eax, %eax
// 2b1: 0f 88 9a fe ff ff             js      0x151 <_JIT_ENTRY+0x151>
// 2b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c1: ff d0                         callq   *%rax
// 2c3: 49 ff 0c 24                   decq    (%r12)
// 2c7: 0f 85 84 fe ff ff             jne     0x151 <_JIT_ENTRY+0x151>
// 2cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cf:  R_X86_64_64  _Py_Dealloc
// 2d7: 4c 89 e7                      movq    %r12, %rdi
// 2da: ff d0                         callq   *%rax
// 2dc: e9 70 fe ff ff                jmp     0x151 <_JIT_ENTRY+0x151>
// 2e1: 
static const unsigned char _STORE_SUBSCRplus_DICT_UPDATE_code_body[738] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xf0, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xc2, 0x4d, 0x8b, 0x67, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x78, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x9a, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x84, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x70, 0xfe, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_DICT_UPDATE_code_holes[30] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Update, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AttributeError, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x274, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x299, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object is not a mapping\x00"
// 5a: 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_DICT_UPDATE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_DICT_UPDATE_data_holes[1];

// _STORE_SUBSCRplus_END_SEND
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_END_SEND.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 49 29 de                      subq    %rbx, %r14
// 14d: 49 83 c6 a0                   addq    $-0x60, %r14
// 151: 49 c1 ee 03                   shrq    $0x3, %r14
// 155: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 4d 8b 7e f0                   movq    -0x10(%r14), %r15
// 185: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 189: 49 8b 07                      movq    (%r15), %rax
// 18c: 48 85 c0                      testq   %rax, %rax
// 18f: 7e 0a                         jle     0x19b <_JIT_ENTRY+0x19b>
// 191: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 195: 85 c0                         testl   %eax, %eax
// 197: 79 2b                         jns     0x1c4 <_JIT_ENTRY+0x1c4>
// 199: eb 49                         jmp     0x1e4 <_JIT_ENTRY+0x1e4>
// 19b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019d:  R_X86_64_64  .rodata.str1.1
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_NegativeRefcount
// 1af: be 66 00 00 00                movl    $0x66, %esi
// 1b4: 4c 89 fa                      movq    %r15, %rdx
// 1b7: ff d0                         callq   *%rax
// 1b9: 49 8b 07                      movq    (%r15), %rax
// 1bc: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 1c0: 85 c0                         testl   %eax, %eax
// 1c2: 78 20                         js      0x1e4 <_JIT_ENTRY+0x1e4>
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ce: ff d0                         callq   *%rax
// 1d0: 49 ff 0f                      decq    (%r15)
// 1d3: 75 0f                         jne     0x1e4 <_JIT_ENTRY+0x1e4>
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_Dealloc
// 1df: 4c 89 ff                      movq    %r15, %rdi
// 1e2: ff d0                         callq   *%rax
// 1e4: 4d 89 6e f0                   movq    %r13, -0x10(%r14)
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _JIT_CONTINUE
// 1f2: 48 89 df                      movq    %rbx, %rdi
// 1f5: 4c 89 e6                      movq    %r12, %rsi
// 1f8: 48 8b 14 24                   movq    (%rsp), %rdx
// 1fc: 48 83 c4 08                   addq    $0x8, %rsp
// 200: 5b                            popq    %rbx
// 201: 41 5c                         popq    %r12
// 203: 41 5d                         popq    %r13
// 205: 41 5e                         popq    %r14
// 207: 41 5f                         popq    %r15
// 209: 5d                            popq    %rbp
// 20a: ff e0                         jmpq    *%rax
// 20c: 
static const unsigned char _STORE_SUBSCRplus_END_SEND_code_body[525] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xc9, 0x4d, 0x8b, 0x7e, 0xf0, 0x4d, 0x8b, 0x6e, 0xf8, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x4d, 0x8d, 0x66, 0xf8, 0x85, 0xc0, 0x79, 0x2b, 0xeb, 0x49, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x4d, 0x8d, 0x66, 0xf8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_END_SEND_code_holes[19] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_END_SEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_END_SEND_data_holes[1];

// _STORE_SUBSCRplus_EXIT_INIT_CHECK
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_EXIT_INIT_CHECK.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 11                         je      0x153 <_JIT_ENTRY+0x153>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 20                         je      0x16a <_JIT_ENTRY+0x16a>
// 14a: 49 83 c6 e8                   addq    $-0x18, %r14
// 14e: 4d 89 f7                      movq    %r14, %r15
// 151: eb 57                         jmp     0x1aa <_JIT_ENTRY+0x1aa>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_Dealloc
// 15d: 4c 89 e7                      movq    %r12, %rdi
// 160: ff d0                         callq   *%rax
// 162: 85 ed                         testl   %ebp, %ebp
// 164: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 168: 75 e0                         jne     0x14a <_JIT_ENTRY+0x14a>
// 16a: 49 8b 46 f8                   movq    -0x8(%r14), %rax
// 16e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000170:  R_X86_64_64  _Py_NoneStruct
// 178: 48 39 c8                      cmpq    %rcx, %rax
// 17b: 74 4d                         je      0x1ca <_JIT_ENTRY+0x1ca>
// 17d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017f:  R_X86_64_64  PyExc_TypeError
// 187: 48 8b 39                      movq    (%rcx), %rdi
// 18a: 48 8b 40 08                   movq    0x8(%rax), %rax
// 18e: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 192: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000194:  R_X86_64_64  .rodata.str1.1+0x39
// 19c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019e:  R_X86_64_64  PyErr_Format
// 1a6: 31 c0                         xorl    %eax, %eax
// 1a8: ff d1                         callq   *%rcx
// 1aa: 49 29 df                      subq    %rbx, %r15
// 1ad: 49 83 c7 b8                   addq    $-0x48, %r15
// 1b1: 49 c1 ef 03                   shrq    $0x3, %r15
// 1b5: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 1b9: 31 c0                         xorl    %eax, %eax
// 1bb: 48 83 c4 08                   addq    $0x8, %rsp
// 1bf: 5b                            popq    %rbx
// 1c0: 41 5c                         popq    %r12
// 1c2: 41 5d                         popq    %r13
// 1c4: 41 5e                         popq    %r14
// 1c6: 41 5f                         popq    %r15
// 1c8: 5d                            popq    %rbp
// 1c9: c3                            retq
// 1ca: 49 83 c6 f8                   addq    $-0x8, %r14
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _JIT_CONTINUE
// 1d8: 48 89 df                      movq    %rbx, %rdi
// 1db: 4c 89 f6                      movq    %r14, %rsi
// 1de: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e2: 48 83 c4 08                   addq    $0x8, %rsp
// 1e6: 5b                            popq    %rbx
// 1e7: 41 5c                         popq    %r12
// 1e9: 41 5d                         popq    %r13
// 1eb: 41 5e                         popq    %r14
// 1ed: 41 5f                         popq    %r15
// 1ef: 5d                            popq    %rbp
// 1f0: ff e0                         jmpq    *%rax
// 1f2: 
static const unsigned char _STORE_SUBSCRplus_EXIT_INIT_CHECK_code_body[499] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x11, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x20, 0x49, 0x83, 0xc6, 0xe8, 0x4d, 0x89, 0xf7, 0xeb, 0x57, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xe0, 0x49, 0x8b, 0x46, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x74, 0x4d, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x39, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_EXIT_INIT_CHECK_code_holes[19] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_Format, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__init__() should return None, not '%.200s'\x00"
// 65: 00 00 00
static const unsigned char _STORE_SUBSCRplus_EXIT_INIT_CHECK_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x5f, 0x28, 0x29, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x4e, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_EXIT_INIT_CHECK_data_holes[1];

// _STORE_SUBSCRplus_EXIT_TRACE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_EXIT_TRACE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 15: 4c 8b 6e e8                   movq    -0x18(%rsi), %r13
// 19: 4c 8b 66 f0                   movq    -0x10(%rsi), %r12
// 1d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000001f:  R_X86_64_64  PyObject_SetItem
// 27: 4c 89 e7                      movq    %r12, %rdi
// 2a: 4c 89 fe                      movq    %r15, %rsi
// 2d: 4c 89 ea                      movq    %r13, %rdx
// 30: ff d0                         callq   *%rax
// 32: 89 c5                         movl    %eax, %ebp
// 34: 49 8b 45 00                   movq    (%r13), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 06                         jle     0x43 <_JIT_ENTRY+0x43>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 28                         jns     0x69 <_JIT_ENTRY+0x69>
// 41: eb 38                         jmp     0x7b <_JIT_ENTRY+0x7b>
// 43: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000045:  R_X86_64_64  .rodata.str1.1
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _Py_NegativeRefcount
// 57: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5c: 4c 89 ea                      movq    %r13, %rdx
// 5f: ff d0                         callq   *%rax
// 61: 49 8b 45 00                   movq    (%r13), %rax
// 65: 85 c0                         testl   %eax, %eax
// 67: 78 12                         js      0x7b <_JIT_ENTRY+0x7b>
// 69: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 73: ff d0                         callq   *%rax
// 75: 49 ff 4d 00                   decq    (%r13)
// 79: 74 0f                         je      0x8a <_JIT_ENTRY+0x8a>
// 7b: 49 8b 04 24                   movq    (%r12), %rax
// 7f: 48 85 c0                      testq   %rax, %rax
// 82: 7e 1e                         jle     0xa2 <_JIT_ENTRY+0xa2>
// 84: 85 c0                         testl   %eax, %eax
// 86: 79 40                         jns     0xc8 <_JIT_ENTRY+0xc8>
// 88: eb 50                         jmp     0xda <_JIT_ENTRY+0xda>
// 8a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008c:  R_X86_64_64  _Py_Dealloc
// 94: 4c 89 ef                      movq    %r13, %rdi
// 97: ff d0                         callq   *%rax
// 99: 49 8b 04 24                   movq    (%r12), %rax
// 9d: 48 85 c0                      testq   %rax, %rax
// a0: 7f e2                         jg      0x84 <_JIT_ENTRY+0x84>
// a2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a4:  R_X86_64_64  .rodata.str1.1
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_NegativeRefcount
// b6: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bb: 4c 89 e2                      movq    %r12, %rdx
// be: ff d0                         callq   *%rax
// c0: 49 8b 04 24                   movq    (%r12), %rax
// c4: 85 c0                         testl   %eax, %eax
// c6: 78 12                         js      0xda <_JIT_ENTRY+0xda>
// c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ca:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d2: ff d0                         callq   *%rax
// d4: 49 ff 0c 24                   decq    (%r12)
// d8: 74 12                         je      0xec <_JIT_ENTRY+0xec>
// da: 49 8b 07                      movq    (%r15), %rax
// dd: 48 85 c0                      testq   %rax, %rax
// e0: 7e 21                         jle     0x103 <_JIT_ENTRY+0x103>
// e2: 4c 8d 63 e8                   leaq    -0x18(%rbx), %r12
// e6: 85 c0                         testl   %eax, %eax
// e8: 79 42                         jns     0x12c <_JIT_ENTRY+0x12c>
// ea: eb 51                         jmp     0x13d <_JIT_ENTRY+0x13d>
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _Py_Dealloc
// f6: 4c 89 e7                      movq    %r12, %rdi
// f9: ff d0                         callq   *%rax
// fb: 49 8b 07                      movq    (%r15), %rax
// fe: 48 85 c0                      testq   %rax, %rax
// 101: 7f df                         jg      0xe2 <_JIT_ENTRY+0xe2>
// 103: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000105:  R_X86_64_64  .rodata.str1.1
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_NegativeRefcount
// 117: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11c: 4c 89 fa                      movq    %r15, %rdx
// 11f: ff d0                         callq   *%rax
// 121: 49 8b 07                      movq    (%r15), %rax
// 124: 4c 8d 63 e8                   leaq    -0x18(%rbx), %r12
// 128: 85 c0                         testl   %eax, %eax
// 12a: 78 11                         js      0x13d <_JIT_ENTRY+0x13d>
// 12c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 136: ff d0                         callq   *%rax
// 138: 49 ff 0f                      decq    (%r15)
// 13b: 74 13                         je      0x150 <_JIT_ENTRY+0x150>
// 13d: 85 ed                         testl   %ebp, %ebp
// 13f: 49 0f 44 dc                   cmoveq  %r12, %rbx
// 143: 74 22                         je      0x167 <_JIT_ENTRY+0x167>
// 145: 4c 29 f3                      subq    %r14, %rbx
// 148: 48 83 c3 a0                   addq    $-0x60, %rbx
// 14c: 31 c0                         xorl    %eax, %eax
// 14e: eb 37                         jmp     0x187 <_JIT_ENTRY+0x187>
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  _Py_Dealloc
// 15a: 4c 89 ff                      movq    %r15, %rdi
// 15d: ff d0                         callq   *%rax
// 15f: 85 ed                         testl   %ebp, %ebp
// 161: 49 0f 44 dc                   cmoveq  %r12, %rbx
// 165: 75 de                         jne     0x145 <_JIT_ENTRY+0x145>
// 167: 4c 29 f3                      subq    %r14, %rbx
// 16a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 16e: 49 8b 06                      movq    (%r14), %rax
// 171: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000173:  R_X86_64_64  _JIT_TARGET
// 17b: 89 c9                         movl    %ecx, %ecx
// 17d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 181: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 187: 48 c1 eb 03                   shrq    $0x3, %rbx
// 18b: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 18f: 48 83 c4 08                   addq    $0x8, %rsp
// 193: 5b                            popq    %rbx
// 194: 41 5c                         popq    %r12
// 196: 41 5d                         popq    %r13
// 198: 41 5e                         popq    %r14
// 19a: 41 5f                         popq    %r15
// 19c: 5d                            popq    %rbp
// 19d: c3                            retq
// 19e: 
static const unsigned char _STORE_SUBSCRplus_EXIT_TRACE_code_body[415] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x7e, 0xf8, 0x4c, 0x8b, 0x6e, 0xe8, 0x4c, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x12, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x21, 0x4c, 0x8d, 0x63, 0xe8, 0x85, 0xc0, 0x79, 0x42, 0xeb, 0x51, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xdf, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x4c, 0x8d, 0x63, 0xe8, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x13, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdc, 0x74, 0x22, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x31, 0xc0, 0xeb, 0x37, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdc, 0x75, 0xde, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _STORE_SUBSCRplus_EXIT_TRACE_code_holes[15] = {
    {0x1f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x45, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_EXIT_TRACE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_EXIT_TRACE_data_holes[1];

// _STORE_SUBSCRplus_FORMAT_SIMPLE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_FORMAT_SIMPLE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c6 f0                   addq    $-0x10, %r14
// 14e: 4d 89 f5                      movq    %r14, %r13
// 151: 49 29 dd                      subq    %rbx, %r13
// 154: 49 83 c5 b0                   addq    $-0x50, %r13
// 158: 49 c1 ed 03                   shrq    $0x3, %r13
// 15c: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  PyUnicode_Type
// 196: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 19b: 74 76                         je      0x213 <_JIT_ENTRY+0x213>
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  PyObject_Format
// 1a7: 4c 89 e7                      movq    %r12, %rdi
// 1aa: 31 f6                         xorl    %esi, %esi
// 1ac: ff d0                         callq   *%rax
// 1ae: 49 89 c7                      movq    %rax, %r15
// 1b1: 49 8b 04 24                   movq    (%r12), %rax
// 1b5: 48 85 c0                      testq   %rax, %rax
// 1b8: 7e 06                         jle     0x1c0 <_JIT_ENTRY+0x1c0>
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 79 28                         jns     0x1e6 <_JIT_ENTRY+0x1e6>
// 1be: eb 47                         jmp     0x207 <_JIT_ENTRY+0x207>
// 1c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c2:  R_X86_64_64  .rodata.str1.1
// 1ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cc:  R_X86_64_64  _Py_NegativeRefcount
// 1d4: be a6 0c 00 00                movl    $0xca6, %esi            # imm = 0xCA6
// 1d9: 4c 89 e2                      movq    %r12, %rdx
// 1dc: ff d0                         callq   *%rax
// 1de: 49 8b 04 24                   movq    (%r12), %rax
// 1e2: 85 c0                         testl   %eax, %eax
// 1e4: 78 21                         js      0x207 <_JIT_ENTRY+0x207>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 0c 24                   decq    (%r12)
// 1f6: 75 0f                         jne     0x207 <_JIT_ENTRY+0x207>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_Dealloc
// 202: 4c 89 e7                      movq    %r12, %rdi
// 205: ff d0                         callq   *%rax
// 207: 4d 89 fc                      movq    %r15, %r12
// 20a: 4d 85 ff                      testq   %r15, %r15
// 20d: 0f 84 3e ff ff ff             je      0x151 <_JIT_ENTRY+0x151>
// 213: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 217: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000219:  R_X86_64_64  _JIT_CONTINUE
// 221: 48 89 df                      movq    %rbx, %rdi
// 224: 4c 89 f6                      movq    %r14, %rsi
// 227: 48 8b 14 24                   movq    (%rsp), %rdx
// 22b: 48 83 c4 08                   addq    $0x8, %rsp
// 22f: 5b                            popq    %rbx
// 230: 41 5c                         popq    %r12
// 232: 41 5d                         popq    %r13
// 234: 41 5e                         popq    %r14
// 236: 41 5f                         popq    %r15
// 238: 5d                            popq    %rbp
// 239: ff e0                         jmpq    *%rax
// 23b: 
static const unsigned char _STORE_SUBSCRplus_FORMAT_SIMPLE_code_body[572] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x6e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x74, 0x3e, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb0, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x75, 0xc2, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x76, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa6, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x3e, 0xff, 0xff, 0xff, 0x4d, 0x89, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_FORMAT_SIMPLE_code_holes[21] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x219, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_FORMAT_SIMPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_FORMAT_SIMPLE_data_holes[1];

// _STORE_SUBSCRplus_FORMAT_WITH_SPEC
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_FORMAT_WITH_SPEC.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 48 8b 5e f8                   movq    -0x8(%rsi), %rbx
// 1f: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 23: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  PyObject_SetItem
// 31: 4c 89 ef                      movq    %r13, %rdi
// 34: 48 89 de                      movq    %rbx, %rsi
// 37: 4c 89 f2                      movq    %r14, %rdx
// 3a: ff d0                         callq   *%rax
// 3c: 89 c5                         movl    %eax, %ebp
// 3e: 49 8b 06                      movq    (%r14), %rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 7e 06                         jle     0x4c <_JIT_ENTRY+0x4c>
// 46: 85 c0                         testl   %eax, %eax
// 48: 79 27                         jns     0x71 <_JIT_ENTRY+0x71>
// 4a: eb 36                         jmp     0x82 <_JIT_ENTRY+0x82>
// 4c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004e:  R_X86_64_64  .rodata.str1.1
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _Py_NegativeRefcount
// 60: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 65: 4c 89 f2                      movq    %r14, %rdx
// 68: ff d0                         callq   *%rax
// 6a: 49 8b 06                      movq    (%r14), %rax
// 6d: 85 c0                         testl   %eax, %eax
// 6f: 78 11                         js      0x82 <_JIT_ENTRY+0x82>
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 7b: ff d0                         callq   *%rax
// 7d: 49 ff 0e                      decq    (%r14)
// 80: 74 0f                         je      0x91 <_JIT_ENTRY+0x91>
// 82: 49 8b 45 00                   movq    (%r13), %rax
// 86: 48 85 c0                      testq   %rax, %rax
// 89: 7e 1e                         jle     0xa9 <_JIT_ENTRY+0xa9>
// 8b: 85 c0                         testl   %eax, %eax
// 8d: 79 40                         jns     0xcf <_JIT_ENTRY+0xcf>
// 8f: eb 50                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_Dealloc
// 9b: 4c 89 f7                      movq    %r14, %rdi
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 45 00                   movq    (%r13), %rax
// a4: 48 85 c0                      testq   %rax, %rax
// a7: 7f e2                         jg      0x8b <_JIT_ENTRY+0x8b>
// a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ab:  R_X86_64_64  .rodata.str1.1
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_NegativeRefcount
// bd: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c2: 4c 89 ea                      movq    %r13, %rdx
// c5: ff d0                         callq   *%rax
// c7: 49 8b 45 00                   movq    (%r13), %rax
// cb: 85 c0                         testl   %eax, %eax
// cd: 78 12                         js      0xe1 <_JIT_ENTRY+0xe1>
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d9: ff d0                         callq   *%rax
// db: 49 ff 4d 00                   decq    (%r13)
// df: 74 12                         je      0xf3 <_JIT_ENTRY+0xf3>
// e1: 48 8b 03                      movq    (%rbx), %rax
// e4: 48 85 c0                      testq   %rax, %rax
// e7: 7e 21                         jle     0x10a <_JIT_ENTRY+0x10a>
// e9: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// ed: 85 c0                         testl   %eax, %eax
// ef: 79 42                         jns     0x133 <_JIT_ENTRY+0x133>
// f1: eb 60                         jmp     0x153 <_JIT_ENTRY+0x153>
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: 4c 89 ef                      movq    %r13, %rdi
// 100: ff d0                         callq   *%rax
// 102: 48 8b 03                      movq    (%rbx), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f df                         jg      0xe9 <_JIT_ENTRY+0xe9>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 48 89 da                      movq    %rbx, %rdx
// 126: ff d0                         callq   *%rax
// 128: 48 8b 03                      movq    (%rbx), %rax
// 12b: 4d 8d 67 e8                   leaq    -0x18(%r15), %r12
// 12f: 85 c0                         testl   %eax, %eax
// 131: 78 20                         js      0x153 <_JIT_ENTRY+0x153>
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13d: ff d0                         callq   *%rax
// 13f: 48 ff 0b                      decq    (%rbx)
// 142: 75 0f                         jne     0x153 <_JIT_ENTRY+0x153>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_Dealloc
// 14e: 48 89 df                      movq    %rbx, %rdi
// 151: ff d0                         callq   *%rax
// 153: 85 ed                         testl   %ebp, %ebp
// 155: 4d 0f 44 fc                   cmoveq  %r12, %r15
// 159: 49 8d 5f f8                   leaq    -0x8(%r15), %rbx
// 15d: 85 ed                         testl   %ebp, %ebp
// 15f: 74 28                         je      0x189 <_JIT_ENTRY+0x189>
// 161: 49 89 dc                      movq    %rbx, %r12
// 164: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 169: 49 29 c4                      subq    %rax, %r12
// 16c: 49 83 c4 a8                   addq    $-0x58, %r12
// 170: 49 c1 ec 03                   shrq    $0x3, %r12
// 174: 44 89 60 40                   movl    %r12d, 0x40(%rax)
// 178: 31 c0                         xorl    %eax, %eax
// 17a: 48 83 c4 18                   addq    $0x18, %rsp
// 17e: 5b                            popq    %rbx
// 17f: 41 5c                         popq    %r12
// 181: 41 5d                         popq    %r13
// 183: 41 5e                         popq    %r14
// 185: 41 5f                         popq    %r15
// 187: 5d                            popq    %rbp
// 188: c3                            retq
// 189: 4d 8b 77 f0                   movq    -0x10(%r15), %r14
// 18d: 49 8b 6f f8                   movq    -0x8(%r15), %rbp
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  PyObject_Format
// 19b: 4c 89 f7                      movq    %r14, %rdi
// 19e: 48 89 ee                      movq    %rbp, %rsi
// 1a1: ff d0                         callq   *%rax
// 1a3: 49 89 c5                      movq    %rax, %r13
// 1a6: 49 8b 06                      movq    (%r14), %rax
// 1a9: 48 85 c0                      testq   %rax, %rax
// 1ac: 7e 06                         jle     0x1b4 <_JIT_ENTRY+0x1b4>
// 1ae: 85 c0                         testl   %eax, %eax
// 1b0: 79 27                         jns     0x1d9 <_JIT_ENTRY+0x1d9>
// 1b2: eb 36                         jmp     0x1ea <_JIT_ENTRY+0x1ea>
// 1b4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b6:  R_X86_64_64  .rodata.str1.1
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _Py_NegativeRefcount
// 1c8: be b7 0c 00 00                movl    $0xcb7, %esi            # imm = 0xCB7
// 1cd: 4c 89 f2                      movq    %r14, %rdx
// 1d0: ff d0                         callq   *%rax
// 1d2: 49 8b 06                      movq    (%r14), %rax
// 1d5: 85 c0                         testl   %eax, %eax
// 1d7: 78 11                         js      0x1ea <_JIT_ENTRY+0x1ea>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e3: ff d0                         callq   *%rax
// 1e5: 49 ff 0e                      decq    (%r14)
// 1e8: 74 0f                         je      0x1f9 <_JIT_ENTRY+0x1f9>
// 1ea: 48 8b 45 00                   movq    (%rbp), %rax
// 1ee: 48 85 c0                      testq   %rax, %rax
// 1f1: 7e 1e                         jle     0x211 <_JIT_ENTRY+0x211>
// 1f3: 85 c0                         testl   %eax, %eax
// 1f5: 79 40                         jns     0x237 <_JIT_ENTRY+0x237>
// 1f7: eb 5f                         jmp     0x258 <_JIT_ENTRY+0x258>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_Dealloc
// 203: 4c 89 f7                      movq    %r14, %rdi
// 206: ff d0                         callq   *%rax
// 208: 48 8b 45 00                   movq    (%rbp), %rax
// 20c: 48 85 c0                      testq   %rax, %rax
// 20f: 7f e2                         jg      0x1f3 <_JIT_ENTRY+0x1f3>
// 211: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000213:  R_X86_64_64  .rodata.str1.1
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_NegativeRefcount
// 225: be b8 0c 00 00                movl    $0xcb8, %esi            # imm = 0xCB8
// 22a: 48 89 ea                      movq    %rbp, %rdx
// 22d: ff d0                         callq   *%rax
// 22f: 48 8b 45 00                   movq    (%rbp), %rax
// 233: 85 c0                         testl   %eax, %eax
// 235: 78 21                         js      0x258 <_JIT_ENTRY+0x258>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 241: ff d0                         callq   *%rax
// 243: 48 ff 4d 00                   decq    (%rbp)
// 247: 75 0f                         jne     0x258 <_JIT_ENTRY+0x258>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_Dealloc
// 253: 48 89 ef                      movq    %rbp, %rdi
// 256: ff d0                         callq   *%rax
// 258: 4d 85 ed                      testq   %r13, %r13
// 25b: 0f 84 03 ff ff ff             je      0x164 <_JIT_ENTRY+0x164>
// 261: 4d 89 6f f0                   movq    %r13, -0x10(%r15)
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _JIT_CONTINUE
// 26f: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 274: 48 89 de                      movq    %rbx, %rsi
// 277: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 27c: 48 83 c4 18                   addq    $0x18, %rsp
// 280: 5b                            popq    %rbx
// 281: 41 5c                         popq    %r12
// 283: 41 5d                         popq    %r13
// 285: 41 5e                         popq    %r14
// 287: 41 5f                         popq    %r15
// 289: 5d                            popq    %rbp
// 28a: ff e0                         jmpq    *%rax
// 28c: 
static const unsigned char _STORE_SUBSCRplus_FORMAT_WITH_SPEC_code_body[653] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x8b, 0x5e, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x12, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x21, 0x4d, 0x8d, 0x67, 0xe8, 0x85, 0xc0, 0x79, 0x42, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7f, 0xdf, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x4d, 0x8d, 0x67, 0xe8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfc, 0x49, 0x8d, 0x5f, 0xf8, 0x85, 0xed, 0x74, 0x28, 0x49, 0x89, 0xdc, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc4, 0x49, 0x83, 0xc4, 0xa8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x60, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x77, 0xf0, 0x49, 0x8b, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb8, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x03, 0xff, 0xff, 0xff, 0x4d, 0x89, 0x6f, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_FORMAT_WITH_SPEC_code_holes[24] = {
    {0x29, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_FORMAT_WITH_SPEC_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_FORMAT_WITH_SPEC_data_holes[1];

// _STORE_SUBSCRplus_FOR_ITER_TIER_TWO
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_FOR_ITER_TIER_TWO.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c6 e8                   addq    $-0x18, %r14
// 14e: 4d 89 f7                      movq    %r14, %r15
// 151: 49 29 df                      subq    %rbx, %r15
// 154: 49 83 c7 b8                   addq    $-0x48, %r15
// 158: 49 c1 ef 03                   shrq    $0x3, %r15
// 15c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 18c: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 191: 4c 89 e7                      movq    %r12, %rdi
// 194: ff 90 e0 00 00 00             callq   *0xe0(%rax)
// 19a: 48 85 c0                      testq   %rax, %rax
// 19d: 74 2b                         je      0x1ca <_JIT_ENTRY+0x1ca>
// 19f: 49 89 06                      movq    %rax, (%r14)
// 1a2: 49 83 c6 08                   addq    $0x8, %r14
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _JIT_CONTINUE
// 1b0: 48 89 df                      movq    %rbx, %rdi
// 1b3: 4c 89 f6                      movq    %r14, %rsi
// 1b6: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ba: 48 83 c4 08                   addq    $0x8, %rsp
// 1be: 5b                            popq    %rbx
// 1bf: 41 5c                         popq    %r12
// 1c1: 41 5d                         popq    %r13
// 1c3: 41 5e                         popq    %r14
// 1c5: 41 5f                         popq    %r15
// 1c7: 5d                            popq    %rbp
// 1c8: ff e0                         jmpq    *%rax
// 1ca: 4c 8b 2c 24                   movq    (%rsp), %r13
// 1ce: 49 8b 45 68                   movq    0x68(%r13), %rax
// 1d2: 48 85 c0                      testq   %rax, %rax
// 1d5: 74 3a                         je      0x211 <_JIT_ENTRY+0x211>
// 1d7: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 1dc: 74 33                         je      0x211 <_JIT_ENTRY+0x211>
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  PyExc_StopIteration
// 1e8: 48 8b 30                      movq    (%rax), %rsi
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _PyErr_ExceptionMatches
// 1f5: 4c 89 ef                      movq    %r13, %rdi
// 1f8: ff d0                         callq   *%rax
// 1fa: 85 c0                         testl   %eax, %eax
// 1fc: 0f 84 4f ff ff ff             je      0x151 <_JIT_ENTRY+0x151>
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _PyErr_Clear
// 20c: 4c 89 ef                      movq    %r13, %rdi
// 20f: ff d0                         callq   *%rax
// 211: 49 8b 04 24                   movq    (%r12), %rax
// 215: 48 85 c0                      testq   %rax, %rax
// 218: 7f 22                         jg      0x23c <_JIT_ENTRY+0x23c>
// 21a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021c:  R_X86_64_64  .rodata.str1.1
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _Py_NegativeRefcount
// 22e: be 80 08 00 00                movl    $0x880, %esi            # imm = 0x880
// 233: 4c 89 e2                      movq    %r12, %rdx
// 236: ff d0                         callq   *%rax
// 238: 49 8b 04 24                   movq    (%r12), %rax
// 23c: 49 83 c6 f8                   addq    $-0x8, %r14
// 240: 85 c0                         testl   %eax, %eax
// 242: 78 21                         js      0x265 <_JIT_ENTRY+0x265>
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24e: ff d0                         callq   *%rax
// 250: 49 ff 0c 24                   decq    (%r12)
// 254: 75 0f                         jne     0x265 <_JIT_ENTRY+0x265>
// 256: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000258:  R_X86_64_64  _Py_Dealloc
// 260: 4c 89 e7                      movq    %r12, %rdi
// 263: ff d0                         callq   *%rax
// 265: 49 29 de                      subq    %rbx, %r14
// 268: 49 83 c6 b8                   addq    $-0x48, %r14
// 26c: 49 c1 ee 03                   shrq    $0x3, %r14
// 270: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 274: 48 8b 03                      movq    (%rbx), %rax
// 277: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000279:  R_X86_64_64  _JIT_TARGET
// 281: 89 c9                         movl    %ecx, %ecx
// 283: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 287: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 28d: e9 d0 fe ff ff                jmp     0x162 <_JIT_ENTRY+0x162>
// 292: 
static const unsigned char _STORE_SUBSCRplus_FOR_ITER_TIER_TWO_code_body[659] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x3e, 0x49, 0x83, 0xc6, 0xe8, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xc2, 0x4d, 0x8b, 0x66, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0x90, 0xe0, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x2b, 0x49, 0x89, 0x06, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x8b, 0x2c, 0x24, 0x49, 0x8b, 0x45, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x3a, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x4f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xd0, 0xfe, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_FOR_ITER_TIER_TWO_code_holes[23] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_StopIteration, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_FOR_ITER_TIER_TWO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_FOR_ITER_TIER_TWO_data_holes[1];

// _STORE_SUBSCRplus_GET_AITER
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_GET_AITER.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f7                      movq    %rsi, %r15
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 f2                      movq    %r14, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 06                      movq    (%r14), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 f2                      movq    %r14, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0e                      decq    (%r14)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 f7                      movq    %r14, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c7 f0                   addq    $-0x10, %r15
// 14e: 4d 89 fe                      movq    %r15, %r14
// 151: 49 29 de                      subq    %rbx, %r14
// 154: 49 83 c6 b0                   addq    $-0x50, %r14
// 158: 49 c1 ee 03                   shrq    $0x3, %r14
// 15c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// 18c: 49 8b 45 08                   movq    0x8(%r13), %rax
// 190: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 194: 48 85 c9                      testq   %rcx, %rcx
// 197: 0f 84 b3 00 00 00             je      0x250 <_JIT_ENTRY+0x250>
// 19d: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// 1a1: 48 85 c9                      testq   %rcx, %rcx
// 1a4: 0f 84 a6 00 00 00             je      0x250 <_JIT_ENTRY+0x250>
// 1aa: 4c 89 ef                      movq    %r13, %rdi
// 1ad: ff d1                         callq   *%rcx
// 1af: 49 89 c4                      movq    %rax, %r12
// 1b2: 49 8b 45 00                   movq    (%r13), %rax
// 1b6: 48 85 c0                      testq   %rax, %rax
// 1b9: 7f 22                         jg      0x1dd <_JIT_ENTRY+0x1dd>
// 1bb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bd:  R_X86_64_64  .rodata.str1.1
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_NegativeRefcount
// 1cf: be c5 02 00 00                movl    $0x2c5, %esi            # imm = 0x2C5
// 1d4: 4c 89 ea                      movq    %r13, %rdx
// 1d7: ff d0                         callq   *%rax
// 1d9: 49 8b 45 00                   movq    (%r13), %rax
// 1dd: 85 c0                         testl   %eax, %eax
// 1df: 78 21                         js      0x202 <_JIT_ENTRY+0x202>
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1eb: ff d0                         callq   *%rax
// 1ed: 49 ff 4d 00                   decq    (%r13)
// 1f1: 75 0f                         jne     0x202 <_JIT_ENTRY+0x202>
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _Py_Dealloc
// 1fd: 4c 89 ef                      movq    %r13, %rdi
// 200: ff d0                         callq   *%rax
// 202: 4d 85 e4                      testq   %r12, %r12
// 205: 0f 84 46 ff ff ff             je      0x151 <_JIT_ENTRY+0x151>
// 20b: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 210: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 214: 48 85 c9                      testq   %rcx, %rcx
// 217: 0f 84 be 00 00 00             je      0x2db <_JIT_ENTRY+0x2db>
// 21d: 48 83 79 10 00                cmpq    $0x0, 0x10(%rcx)
// 222: 0f 84 b3 00 00 00             je      0x2db <_JIT_ENTRY+0x2db>
// 228: 4d 89 67 f8                   movq    %r12, -0x8(%r15)
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _JIT_CONTINUE
// 236: 48 89 df                      movq    %rbx, %rdi
// 239: 4c 89 fe                      movq    %r15, %rsi
// 23c: 48 8b 14 24                   movq    (%rsp), %rdx
// 240: 48 83 c4 08                   addq    $0x8, %rsp
// 244: 5b                            popq    %rbx
// 245: 41 5c                         popq    %r12
// 247: 41 5d                         popq    %r13
// 249: 41 5e                         popq    %r14
// 24b: 41 5f                         popq    %r15
// 24d: 5d                            popq    %rbp
// 24e: ff e0                         jmpq    *%rax
// 250: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000252:  R_X86_64_64  PyExc_TypeError
// 25a: 48 8b 31                      movq    (%rcx), %rsi
// 25d: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 261: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000263:  R_X86_64_64  .rodata.str1.1+0x39
// 26b: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000026d:  R_X86_64_64  _PyErr_Format
// 275: 48 8b 3c 24                   movq    (%rsp), %rdi
// 279: 31 c0                         xorl    %eax, %eax
// 27b: 41 ff d0                      callq   *%r8
// 27e: 49 8b 45 00                   movq    (%r13), %rax
// 282: 48 85 c0                      testq   %rax, %rax
// 285: 7f 22                         jg      0x2a9 <_JIT_ENTRY+0x2a9>
// 287: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000289:  R_X86_64_64  .rodata.str1.1
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _Py_NegativeRefcount
// 29b: be c1 02 00 00                movl    $0x2c1, %esi            # imm = 0x2C1
// 2a0: 4c 89 ea                      movq    %r13, %rdx
// 2a3: ff d0                         callq   *%rax
// 2a5: 49 8b 45 00                   movq    (%r13), %rax
// 2a9: 85 c0                         testl   %eax, %eax
// 2ab: 0f 88 a0 fe ff ff             js      0x151 <_JIT_ENTRY+0x151>
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2bb: ff d0                         callq   *%rax
// 2bd: 49 ff 4d 00                   decq    (%r13)
// 2c1: 0f 85 8a fe ff ff             jne     0x151 <_JIT_ENTRY+0x151>
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _Py_Dealloc
// 2d1: 4c 89 ef                      movq    %r13, %rdi
// 2d4: ff d0                         callq   *%rax
// 2d6: e9 76 fe ff ff                jmp     0x151 <_JIT_ENTRY+0x151>
// 2db: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002dd:  R_X86_64_64  PyExc_TypeError
// 2e5: 48 8b 31                      movq    (%rcx), %rsi
// 2e8: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 2ec: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002ee:  R_X86_64_64  .rodata.str1.1+0x7a
// 2f6: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000002f8:  R_X86_64_64  _PyErr_Format
// 300: 48 8b 3c 24                   movq    (%rsp), %rdi
// 304: 31 c0                         xorl    %eax, %eax
// 306: 41 ff d0                      callq   *%r8
// 309: 49 8b 04 24                   movq    (%r12), %rax
// 30d: 48 85 c0                      testq   %rax, %rax
// 310: 7f 22                         jg      0x334 <_JIT_ENTRY+0x334>
// 312: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000314:  R_X86_64_64  .rodata.str1.1
// 31c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031e:  R_X86_64_64  _Py_NegativeRefcount
// 326: be cd 02 00 00                movl    $0x2cd, %esi            # imm = 0x2CD
// 32b: 4c 89 e2                      movq    %r12, %rdx
// 32e: ff d0                         callq   *%rax
// 330: 49 8b 04 24                   movq    (%r12), %rax
// 334: 85 c0                         testl   %eax, %eax
// 336: 0f 88 15 fe ff ff             js      0x151 <_JIT_ENTRY+0x151>
// 33c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000033e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 346: ff d0                         callq   *%rax
// 348: 49 ff 0c 24                   decq    (%r12)
// 34c: 0f 85 ff fd ff ff             jne     0x151 <_JIT_ENTRY+0x151>
// 352: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000354:  R_X86_64_64  _Py_Dealloc
// 35c: 4c 89 e7                      movq    %r12, %rdi
// 35f: ff d0                         callq   *%rax
// 361: e9 eb fd ff ff                jmp     0x151 <_JIT_ENTRY+0x151>
// 366: 
static const unsigned char _STORE_SUBSCRplus_GET_AITER_code_body[871] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xf0, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xc2, 0x4d, 0x8b, 0x6f, 0xf8, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa6, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd1, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x46, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xbe, 0x00, 0x00, 0x00, 0x48, 0x83, 0x79, 0x10, 0x00, 0x0f, 0x84, 0xb3, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x67, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xa0, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x8a, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xe9, 0x76, 0xfe, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcd, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x15, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0xff, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xeb, 0xfd, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_GET_AITER_code_holes[33] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x252, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x26d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2ee, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7a},
    {0x2f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x314, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x31e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x33e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x354, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an object with __aiter__ method, got %.100s\x00'async for' received an object from __aiter__ that does not implement __anext__: %.100s\x00"
// d2: 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_GET_AITER_data_body[217] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_GET_AITER_data_holes[1];

// _STORE_SUBSCRplus_GET_ANEXT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_GET_ANEXT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f7                      movq    %rsi, %r15
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 f2                      movq    %r14, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 06                      movq    (%r14), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 f2                      movq    %r14, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0e                      decq    (%r14)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 f7                      movq    %r14, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c7 e8                   addq    $-0x18, %r15
// 14e: 4d 89 fe                      movq    %r15, %r14
// 151: 49 29 de                      subq    %rbx, %r14
// 154: 49 83 c6 b8                   addq    $-0x48, %r14
// 158: 49 c1 ee 03                   shrq    $0x3, %r14
// 15c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 49 8b 7f f8                   movq    -0x8(%r15), %rdi
// 18c: 48 8b 47 08                   movq    0x8(%rdi), %rax
// 190: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000192:  R_X86_64_64  PyAsyncGen_Type
// 19a: 48 39 c8                      cmpq    %rcx, %rax
// 19d: 0f 84 c0 00 00 00             je      0x263 <_JIT_ENTRY+0x263>
// 1a3: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 1a7: 48 85 c9                      testq   %rcx, %rcx
// 1aa: 0f 84 80 00 00 00             je      0x230 <_JIT_ENTRY+0x230>
// 1b0: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// 1b4: 48 85 c9                      testq   %rcx, %rcx
// 1b7: 74 77                         je      0x230 <_JIT_ENTRY+0x230>
// 1b9: ff d1                         callq   *%rcx
// 1bb: 48 85 c0                      testq   %rax, %rax
// 1be: 74 91                         je      0x151 <_JIT_ENTRY+0x151>
// 1c0: 49 89 c4                      movq    %rax, %r12
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 1cd: 4c 89 e7                      movq    %r12, %rdi
// 1d0: ff d0                         callq   *%rax
// 1d2: 48 85 c0                      testq   %rax, %rax
// 1d5: 0f 84 c6 00 00 00             je      0x2a1 <_JIT_ENTRY+0x2a1>
// 1db: 49 89 c5                      movq    %rax, %r13
// 1de: 49 8b 04 24                   movq    (%r12), %rax
// 1e2: 48 85 c0                      testq   %rax, %rax
// 1e5: 7f 22                         jg      0x209 <_JIT_ENTRY+0x209>
// 1e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e9:  R_X86_64_64  .rodata.str1.1
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_NegativeRefcount
// 1fb: be fb 02 00 00                movl    $0x2fb, %esi            # imm = 0x2FB
// 200: 4c 89 e2                      movq    %r12, %rdx
// 203: ff d0                         callq   *%rax
// 205: 49 8b 04 24                   movq    (%r12), %rax
// 209: 85 c0                         testl   %eax, %eax
// 20b: 78 69                         js      0x276 <_JIT_ENTRY+0x276>
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 217: ff d0                         callq   *%rax
// 219: 49 ff 0c 24                   decq    (%r12)
// 21d: 75 57                         jne     0x276 <_JIT_ENTRY+0x276>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_Dealloc
// 229: 4c 89 e7                      movq    %r12, %rdi
// 22c: ff d0                         callq   *%rax
// 22e: eb 46                         jmp     0x276 <_JIT_ENTRY+0x276>
// 230: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000232:  R_X86_64_64  PyExc_TypeError
// 23a: 48 8b 31                      movq    (%rcx), %rsi
// 23d: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 241: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000243:  R_X86_64_64  .rodata.str1.1+0x39
// 24b: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000024d:  R_X86_64_64  _PyErr_Format
// 255: 48 8b 3c 24                   movq    (%rsp), %rdi
// 259: 31 c0                         xorl    %eax, %eax
// 25b: 41 ff d0                      callq   *%r8
// 25e: e9 ee fe ff ff                jmp     0x151 <_JIT_ENTRY+0x151>
// 263: 48 8b 41 50                   movq    0x50(%rcx), %rax
// 267: ff 50 10                      callq   *0x10(%rax)
// 26a: 49 89 c5                      movq    %rax, %r13
// 26d: 48 85 c0                      testq   %rax, %rax
// 270: 0f 84 db fe ff ff             je      0x151 <_JIT_ENTRY+0x151>
// 276: 4d 89 2f                      movq    %r13, (%r15)
// 279: 49 83 c7 08                   addq    $0x8, %r15
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _JIT_CONTINUE
// 287: 48 89 df                      movq    %rbx, %rdi
// 28a: 4c 89 fe                      movq    %r15, %rsi
// 28d: 48 8b 14 24                   movq    (%rsp), %rdx
// 291: 48 83 c4 08                   addq    $0x8, %rsp
// 295: 5b                            popq    %rbx
// 296: 41 5c                         popq    %r12
// 298: 41 5d                         popq    %r13
// 29a: 41 5e                         popq    %r14
// 29c: 41 5f                         popq    %r15
// 29e: 5d                            popq    %rbp
// 29f: ff e0                         jmpq    *%rax
// 2a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a3:  R_X86_64_64  PyExc_TypeError
// 2ab: 48 8b 38                      movq    (%rax), %rdi
// 2ae: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 2b3: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 2b7: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000002b9:  R_X86_64_64  .rodata.str1.1+0x7c
// 2c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002c3:  R_X86_64_64  _PyErr_FormatFromCause
// 2cb: 31 c0                         xorl    %eax, %eax
// 2cd: ff d1                         callq   *%rcx
// 2cf: 49 8b 04 24                   movq    (%r12), %rax
// 2d3: 48 85 c0                      testq   %rax, %rax
// 2d6: 7f 22                         jg      0x2fa <_JIT_ENTRY+0x2fa>
// 2d8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002da:  R_X86_64_64  .rodata.str1.1
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  _Py_NegativeRefcount
// 2ec: be f8 02 00 00                movl    $0x2f8, %esi            # imm = 0x2F8
// 2f1: 4c 89 e2                      movq    %r12, %rdx
// 2f4: ff d0                         callq   *%rax
// 2f6: 49 8b 04 24                   movq    (%r12), %rax
// 2fa: 85 c0                         testl   %eax, %eax
// 2fc: 0f 88 4f fe ff ff             js      0x151 <_JIT_ENTRY+0x151>
// 302: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000304:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 30c: ff d0                         callq   *%rax
// 30e: 49 ff 0c 24                   decq    (%r12)
// 312: 0f 85 39 fe ff ff             jne     0x151 <_JIT_ENTRY+0x151>
// 318: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031a:  R_X86_64_64  _Py_Dealloc
// 322: 4c 89 e7                      movq    %r12, %rdi
// 325: ff d0                         callq   *%rax
// 327: e9 25 fe ff ff                jmp     0x151 <_JIT_ENTRY+0x151>
// 32c: 
static const unsigned char _STORE_SUBSCRplus_GET_ANEXT_code_body[813] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xc2, 0x49, 0x8b, 0x7f, 0xf8, 0x48, 0x8b, 0x47, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0xc0, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x77, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x74, 0x91, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xc6, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfb, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x69, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x57, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x46, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0xee, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x41, 0x50, 0xff, 0x50, 0x10, 0x49, 0x89, 0xc5, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xdb, 0xfe, 0xff, 0xff, 0x4d, 0x89, 0x2f, 0x49, 0x83, 0xc7, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x38, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf8, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x4f, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x39, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x25, 0xfe, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_GET_ANEXT_code_holes[31] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyAsyncGen_Type, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x2b9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7c},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_FormatFromCause, 0x0},
    {0x2da, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x304, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an iterator with __anext__ method, got %.100s\x00'async for' received an invalid object from __anext__: %.100s\x00"
// ba: 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_GET_ANEXT_data_body[193] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_GET_ANEXT_data_holes[1];

// _STORE_SUBSCRplus_GET_AWAITABLE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_GET_AWAITABLE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f7                      movq    %rsi, %r15
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 f2                      movq    %r14, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 06                      movq    (%r14), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 f2                      movq    %r14, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0e                      decq    (%r14)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 f7                      movq    %r14, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c7 f0                   addq    $-0x10, %r15
// 14e: 4d 89 fe                      movq    %r15, %r14
// 151: 49 29 de                      subq    %rbx, %r14
// 154: 49 83 c6 b0                   addq    $-0x50, %r14
// 158: 49 c1 ee 03                   shrq    $0x3, %r14
// 15c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _PyCoro_GetAwaitableIter
// 196: 4c 89 ef                      movq    %r13, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 89 c4                      movq    %rax, %r12
// 19e: 48 85 c0                      testq   %rax, %rax
// 1a1: 74 0f                         je      0x1b2 <_JIT_ENTRY+0x1b2>
// 1a3: 49 8b 45 00                   movq    (%r13), %rax
// 1a7: 48 85 c0                      testq   %rax, %rax
// 1aa: 7e 30                         jle     0x1dc <_JIT_ENTRY+0x1dc>
// 1ac: 85 c0                         testl   %eax, %eax
// 1ae: 79 52                         jns     0x202 <_JIT_ENTRY+0x202>
// 1b0: eb 71                         jmp     0x223 <_JIT_ENTRY+0x223>
// 1b2: 49 8b 75 08                   movq    0x8(%r13), %rsi
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _JIT_OPARG
// 1c0: 0f b7 d0                      movzwl  %ax, %edx
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _PyEval_FormatAwaitableError
// 1cd: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1d1: ff d0                         callq   *%rax
// 1d3: 49 8b 45 00                   movq    (%r13), %rax
// 1d7: 48 85 c0                      testq   %rax, %rax
// 1da: 7f d0                         jg      0x1ac <_JIT_ENTRY+0x1ac>
// 1dc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001de:  R_X86_64_64  .rodata.str1.1
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_NegativeRefcount
// 1f0: be 0c 03 00 00                movl    $0x30c, %esi            # imm = 0x30C
// 1f5: 4c 89 ea                      movq    %r13, %rdx
// 1f8: ff d0                         callq   *%rax
// 1fa: 49 8b 45 00                   movq    (%r13), %rax
// 1fe: 85 c0                         testl   %eax, %eax
// 200: 78 21                         js      0x223 <_JIT_ENTRY+0x223>
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20c: ff d0                         callq   *%rax
// 20e: 49 ff 4d 00                   decq    (%r13)
// 212: 75 0f                         jne     0x223 <_JIT_ENTRY+0x223>
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_Dealloc
// 21e: 4c 89 ef                      movq    %r13, %rdi
// 221: ff d0                         callq   *%rax
// 223: 4d 85 e4                      testq   %r12, %r12
// 226: 0f 84 25 ff ff ff             je      0x151 <_JIT_ENTRY+0x151>
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  PyCoro_Type
// 236: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 23b: 74 28                         je      0x265 <_JIT_ENTRY+0x265>
// 23d: 4d 89 67 f8                   movq    %r12, -0x8(%r15)
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _JIT_CONTINUE
// 24b: 48 89 df                      movq    %rbx, %rdi
// 24e: 4c 89 fe                      movq    %r15, %rsi
// 251: 48 8b 14 24                   movq    (%rsp), %rdx
// 255: 48 83 c4 08                   addq    $0x8, %rsp
// 259: 5b                            popq    %rbx
// 25a: 41 5c                         popq    %r12
// 25c: 41 5d                         popq    %r13
// 25e: 41 5e                         popq    %r14
// 260: 41 5f                         popq    %r15
// 262: 5d                            popq    %rbp
// 263: ff e0                         jmpq    *%rax
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  _PyGen_yf
// 26f: 4c 89 e7                      movq    %r12, %rdi
// 272: ff d0                         callq   *%rax
// 274: 48 85 c0                      testq   %rax, %rax
// 277: 74 c4                         je      0x23d <_JIT_ENTRY+0x23d>
// 279: 49 89 c5                      movq    %rax, %r13
// 27c: 48 8b 00                      movq    (%rax), %rax
// 27f: 48 85 c0                      testq   %rax, %rax
// 282: 7f 22                         jg      0x2a6 <_JIT_ENTRY+0x2a6>
// 284: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000286:  R_X86_64_64  .rodata.str1.1
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _Py_NegativeRefcount
// 298: be 13 03 00 00                movl    $0x313, %esi            # imm = 0x313
// 29d: 4c 89 ea                      movq    %r13, %rdx
// 2a0: ff d0                         callq   *%rax
// 2a2: 49 8b 45 00                   movq    (%r13), %rax
// 2a6: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000002a8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2b0: 85 c0                         testl   %eax, %eax
// 2b2: 78 18                         js      0x2cc <_JIT_ENTRY+0x2cc>
// 2b4: 41 ff d7                      callq   *%r15
// 2b7: 49 ff 4d 00                   decq    (%r13)
// 2bb: 75 0f                         jne     0x2cc <_JIT_ENTRY+0x2cc>
// 2bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bf:  R_X86_64_64  _Py_Dealloc
// 2c7: 4c 89 ef                      movq    %r13, %rdi
// 2ca: ff d0                         callq   *%rax
// 2cc: 49 8b 04 24                   movq    (%r12), %rax
// 2d0: 48 85 c0                      testq   %rax, %rax
// 2d3: 7f 22                         jg      0x2f7 <_JIT_ENTRY+0x2f7>
// 2d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002d7:  R_X86_64_64  .rodata.str1.1
// 2df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e1:  R_X86_64_64  _Py_NegativeRefcount
// 2e9: be 14 03 00 00                movl    $0x314, %esi            # imm = 0x314
// 2ee: 4c 89 e2                      movq    %r12, %rdx
// 2f1: ff d0                         callq   *%rax
// 2f3: 49 8b 04 24                   movq    (%r12), %rax
// 2f7: 85 c0                         testl   %eax, %eax
// 2f9: 78 18                         js      0x313 <_JIT_ENTRY+0x313>
// 2fb: 41 ff d7                      callq   *%r15
// 2fe: 49 ff 0c 24                   decq    (%r12)
// 302: 75 0f                         jne     0x313 <_JIT_ENTRY+0x313>
// 304: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000306:  R_X86_64_64  _Py_Dealloc
// 30e: 4c 89 e7                      movq    %r12, %rdi
// 311: ff d0                         callq   *%rax
// 313: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000315:  R_X86_64_64  PyExc_RuntimeError
// 31d: 48 8b 30                      movq    (%rax), %rsi
// 320: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000322:  R_X86_64_64  .rodata.str1.1+0x39
// 32a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032c:  R_X86_64_64  _PyErr_SetString
// 334: 48 8b 3c 24                   movq    (%rsp), %rdi
// 338: ff d0                         callq   *%rax
// 33a: e9 12 fe ff ff                jmp     0x151 <_JIT_ENTRY+0x151>
// 33f: 
static const unsigned char _STORE_SUBSCRplus_GET_AWAITABLE_code_body[832] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xf0, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xc2, 0x4d, 0x8b, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x85, 0xc0, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x79, 0x52, 0xeb, 0x71, 0x49, 0x8b, 0x75, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xd0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x25, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x28, 0x4d, 0x89, 0x67, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xc4, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0xe9, 0x12, 0xfe, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_GET_AWAITABLE_code_holes[34] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatAwaitableError, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyGen_yf, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x306, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x315, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_RuntimeError, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00coroutine is being awaited already\x00'
// 5c: 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_GET_AWAITABLE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x77, 0x61, 0x69, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_GET_AWAITABLE_data_holes[1];

// _STORE_SUBSCRplus_GET_ITER
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_GET_ITER.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c6 f0                   addq    $-0x10, %r14
// 14e: 4d 89 f5                      movq    %r14, %r13
// 151: 49 29 dd                      subq    %rbx, %r13
// 154: 49 83 c5 b0                   addq    $-0x50, %r13
// 158: 49 c1 ed 03                   shrq    $0x3, %r13
// 15c: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 4d 8b 7e f8                   movq    -0x8(%r14), %r15
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  PyObject_GetIter
// 196: 4c 89 ff                      movq    %r15, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 89 c4                      movq    %rax, %r12
// 19e: 49 8b 07                      movq    (%r15), %rax
// 1a1: 48 85 c0                      testq   %rax, %rax
// 1a4: 7e 06                         jle     0x1ac <_JIT_ENTRY+0x1ac>
// 1a6: 85 c0                         testl   %eax, %eax
// 1a8: 79 27                         jns     0x1d1 <_JIT_ENTRY+0x1d1>
// 1aa: eb 45                         jmp     0x1f1 <_JIT_ENTRY+0x1f1>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 4a 08 00 00                movl    $0x84a, %esi            # imm = 0x84A
// 1c5: 4c 89 fa                      movq    %r15, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 49 8b 07                      movq    (%r15), %rax
// 1cd: 85 c0                         testl   %eax, %eax
// 1cf: 78 20                         js      0x1f1 <_JIT_ENTRY+0x1f1>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1db: ff d0                         callq   *%rax
// 1dd: 49 ff 0f                      decq    (%r15)
// 1e0: 75 0f                         jne     0x1f1 <_JIT_ENTRY+0x1f1>
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_Dealloc
// 1ec: 4c 89 ff                      movq    %r15, %rdi
// 1ef: ff d0                         callq   *%rax
// 1f1: 4d 85 e4                      testq   %r12, %r12
// 1f4: 0f 84 57 ff ff ff             je      0x151 <_JIT_ENTRY+0x151>
// 1fa: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _JIT_CONTINUE
// 208: 48 89 df                      movq    %rbx, %rdi
// 20b: 4c 89 f6                      movq    %r14, %rsi
// 20e: 48 8b 14 24                   movq    (%rsp), %rdx
// 212: 48 83 c4 08                   addq    $0x8, %rsp
// 216: 5b                            popq    %rbx
// 217: 41 5c                         popq    %r12
// 219: 41 5d                         popq    %r13
// 21b: 41 5e                         popq    %r14
// 21d: 41 5f                         popq    %r15
// 21f: 5d                            popq    %rbp
// 220: ff e0                         jmpq    *%rax
// 222: 
static const unsigned char _STORE_SUBSCRplus_GET_ITER_code_body[547] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x6e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x74, 0x3e, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb0, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x75, 0xc2, 0x4d, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x45, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x57, 0xff, 0xff, 0xff, 0x4d, 0x89, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_GET_ITER_code_holes[20] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_GET_ITER_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_GET_ITER_data_holes[1];

// _STORE_SUBSCRplus_GET_LEN
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_GET_LEN.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c6 e8                   addq    $-0x18, %r14
// 14e: 4d 89 f7                      movq    %r14, %r15
// 151: 49 29 df                      subq    %rbx, %r15
// 154: 49 83 c7 b8                   addq    $-0x48, %r15
// 158: 49 c1 ef 03                   shrq    $0x3, %r15
// 15c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 49 8b 7e f8                   movq    -0x8(%r14), %rdi
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  PyObject_Size
// 196: ff d0                         callq   *%rax
// 198: 48 85 c0                      testq   %rax, %rax
// 19b: 78 b4                         js      0x151 <_JIT_ENTRY+0x151>
// 19d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019f:  R_X86_64_64  PyLong_FromSsize_t
// 1a7: 48 89 c7                      movq    %rax, %rdi
// 1aa: ff d1                         callq   *%rcx
// 1ac: 48 85 c0                      testq   %rax, %rax
// 1af: 74 a0                         je      0x151 <_JIT_ENTRY+0x151>
// 1b1: 49 89 06                      movq    %rax, (%r14)
// 1b4: 49 83 c6 08                   addq    $0x8, %r14
// 1b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ba:  R_X86_64_64  _JIT_CONTINUE
// 1c2: 48 89 df                      movq    %rbx, %rdi
// 1c5: 4c 89 f6                      movq    %r14, %rsi
// 1c8: 48 8b 14 24                   movq    (%rsp), %rdx
// 1cc: 48 83 c4 08                   addq    $0x8, %rsp
// 1d0: 5b                            popq    %rbx
// 1d1: 41 5c                         popq    %r12
// 1d3: 41 5d                         popq    %r13
// 1d5: 41 5e                         popq    %r14
// 1d7: 41 5f                         popq    %r15
// 1d9: 5d                            popq    %rbp
// 1da: ff e0                         jmpq    *%rax
// 1dc: 
static const unsigned char _STORE_SUBSCRplus_GET_LEN_code_body[477] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x3e, 0x49, 0x83, 0xc6, 0xe8, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xc2, 0x49, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x78, 0xb4, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x74, 0xa0, 0x49, 0x89, 0x06, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_GET_LEN_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_GET_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_GET_LEN_data_holes[1];

// _STORE_SUBSCRplus_GET_YIELD_FROM_ITER
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_GET_YIELD_FROM_ITER.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f7                      movq    %rsi, %r15
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 f2                      movq    %r14, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 06                      movq    (%r14), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 f2                      movq    %r14, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0e                      decq    (%r14)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 f7                      movq    %r14, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c7 e8                   addq    $-0x18, %r15
// 14e: 4d 89 fe                      movq    %r15, %r14
// 151: 49 29 de                      subq    %rbx, %r14
// 154: 49 83 c6 b8                   addq    $-0x48, %r14
// 158: 49 c1 ee 03                   shrq    $0x3, %r14
// 15c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 18c: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 191: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000193:  R_X86_64_64  PyCoro_Type
// 19b: 48 39 c8                      cmpq    %rcx, %rax
// 19e: 74 7f                         je      0x21f <_JIT_ENTRY+0x21f>
// 1a0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a2:  R_X86_64_64  PyGen_Type
// 1aa: 48 39 c8                      cmpq    %rcx, %rax
// 1ad: 74 6a                         je      0x219 <_JIT_ENTRY+0x219>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  PyObject_GetIter
// 1b9: 4c 89 e7                      movq    %r12, %rdi
// 1bc: ff d0                         callq   *%rax
// 1be: 48 85 c0                      testq   %rax, %rax
// 1c1: 74 8e                         je      0x151 <_JIT_ENTRY+0x151>
// 1c3: 49 89 c5                      movq    %rax, %r13
// 1c6: 49 8b 04 24                   movq    (%r12), %rax
// 1ca: 48 85 c0                      testq   %rax, %rax
// 1cd: 7f 22                         jg      0x1f1 <_JIT_ENTRY+0x1f1>
// 1cf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d1:  R_X86_64_64  .rodata.str1.1
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_NegativeRefcount
// 1e3: be 6a 08 00 00                movl    $0x86a, %esi            # imm = 0x86A
// 1e8: 4c 89 e2                      movq    %r12, %rdx
// 1eb: ff d0                         callq   *%rax
// 1ed: 49 8b 04 24                   movq    (%r12), %rax
// 1f1: 85 c0                         testl   %eax, %eax
// 1f3: 78 21                         js      0x216 <_JIT_ENTRY+0x216>
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ff: ff d0                         callq   *%rax
// 201: 49 ff 0c 24                   decq    (%r12)
// 205: 75 0f                         jne     0x216 <_JIT_ENTRY+0x216>
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  _Py_Dealloc
// 211: 4c 89 e7                      movq    %r12, %rdi
// 214: ff d0                         callq   *%rax
// 216: 4d 89 ec                      movq    %r13, %r12
// 219: 48 8b 0c 24                   movq    (%rsp), %rcx
// 21d: eb 12                         jmp     0x231 <_JIT_ENTRY+0x231>
// 21f: 48 8b 03                      movq    (%rbx), %rax
// 222: 0f b7 40 30                   movzwl  0x30(%rax), %eax
// 226: a9 80 01 00 00                testl   $0x180, %eax            # imm = 0x180
// 22b: 48 8b 0c 24                   movq    (%rsp), %rcx
// 22f: 74 27                         je      0x258 <_JIT_ENTRY+0x258>
// 231: 4d 89 67 f8                   movq    %r12, -0x8(%r15)
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _JIT_CONTINUE
// 23f: 48 89 df                      movq    %rbx, %rdi
// 242: 4c 89 fe                      movq    %r15, %rsi
// 245: 48 89 ca                      movq    %rcx, %rdx
// 248: 48 83 c4 08                   addq    $0x8, %rsp
// 24c: 5b                            popq    %rbx
// 24d: 41 5c                         popq    %r12
// 24f: 41 5d                         popq    %r13
// 251: 41 5e                         popq    %r14
// 253: 41 5f                         popq    %r15
// 255: 5d                            popq    %rbp
// 256: ff e0                         jmpq    *%rax
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  PyExc_TypeError
// 262: 48 8b 30                      movq    (%rax), %rsi
// 265: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000267:  R_X86_64_64  .rodata.str1.1+0x39
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  _PyErr_SetString
// 279: 48 89 cf                      movq    %rcx, %rdi
// 27c: ff d0                         callq   *%rax
// 27e: e9 ce fe ff ff                jmp     0x151 <_JIT_ENTRY+0x151>
// 283: 
static const unsigned char _STORE_SUBSCRplus_GET_YIELD_FROM_ITER_code_body[644] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xc2, 0x4d, 0x8b, 0x67, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x74, 0x7f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x74, 0x6a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x8e, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x6a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0x48, 0x8b, 0x0c, 0x24, 0xeb, 0x12, 0x48, 0x8b, 0x03, 0x0f, 0xb7, 0x40, 0x30, 0xa9, 0x80, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x0c, 0x24, 0x74, 0x27, 0x4d, 0x89, 0x67, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xca, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0xe9, 0xce, 0xfe, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_GET_YIELD_FROM_ITER_code_holes[25] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyGen_Type, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot 'yield from' a coroutine object in a non-coroutine generator\x00"
// 7d: 00 00 00
static const unsigned char _STORE_SUBSCRplus_GET_YIELD_FROM_ITER_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x27, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_GET_YIELD_FROM_ITER_data_holes[1];

// _STORE_SUBSCRplus_GUARD_BOTH_FLOAT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_GUARD_BOTH_FLOAT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1b                         je      0x15d <_JIT_ENTRY+0x15d>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2a                         je      0x174 <_JIT_ENTRY+0x174>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: eb 5d                         jmp     0x1ba <_JIT_ENTRY+0x1ba>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 ed                         testl   %ebp, %ebp
// 16e: 49 0f 44 df                   cmoveq  %r15, %rbx
// 172: 75 d6                         jne     0x14a <_JIT_ENTRY+0x14a>
// 174: 48 8b 4b f0                   movq    -0x10(%rbx), %rcx
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  PyFloat_Type
// 182: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 186: 75 0a                         jne     0x192 <_JIT_ENTRY+0x192>
// 188: 48 8b 4b f8                   movq    -0x8(%rbx), %rcx
// 18c: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 190: 74 37                         je      0x1c9 <_JIT_ENTRY+0x1c9>
// 192: 4c 29 f3                      subq    %r14, %rbx
// 195: 48 83 c3 b8                   addq    $-0x48, %rbx
// 199: 48 c1 eb 03                   shrq    $0x3, %rbx
// 19d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1a1: 49 8b 06                      movq    (%r14), %rax
// 1a4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a6:  R_X86_64_64  _JIT_TARGET
// 1ae: 89 c9                         movl    %ecx, %ecx
// 1b0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ba: 48 83 c4 08                   addq    $0x8, %rsp
// 1be: 5b                            popq    %rbx
// 1bf: 41 5c                         popq    %r12
// 1c1: 41 5d                         popq    %r13
// 1c3: 41 5e                         popq    %r14
// 1c5: 41 5f                         popq    %r15
// 1c7: 5d                            popq    %rbp
// 1c8: c3                            retq
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _JIT_CONTINUE
// 1d3: 4c 89 f7                      movq    %r14, %rdi
// 1d6: 48 89 de                      movq    %rbx, %rsi
// 1d9: 48 8b 14 24                   movq    (%rsp), %rdx
// 1dd: 48 83 c4 08                   addq    $0x8, %rsp
// 1e1: 5b                            popq    %rbx
// 1e2: 41 5c                         popq    %r12
// 1e4: 41 5d                         popq    %r13
// 1e6: 41 5e                         popq    %r14
// 1e8: 41 5f                         popq    %r15
// 1ea: 5d                            popq    %rbp
// 1eb: ff e0                         jmpq    *%rax
// 1ed: 
static const unsigned char _STORE_SUBSCRplus_GUARD_BOTH_FLOAT_code_body[494] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2a, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x5d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd6, 0x48, 0x8b, 0x4b, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x0a, 0x48, 0x8b, 0x4b, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_GUARD_BOTH_FLOAT_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_GUARD_BOTH_FLOAT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_GUARD_BOTH_FLOAT_data_holes[1];

// _STORE_SUBSCRplus_GUARD_BOTH_INT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_GUARD_BOTH_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1b                         je      0x15d <_JIT_ENTRY+0x15d>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2a                         je      0x174 <_JIT_ENTRY+0x174>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: eb 5d                         jmp     0x1ba <_JIT_ENTRY+0x1ba>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 ed                         testl   %ebp, %ebp
// 16e: 49 0f 44 df                   cmoveq  %r15, %rbx
// 172: 75 d6                         jne     0x14a <_JIT_ENTRY+0x14a>
// 174: 48 8b 4b f0                   movq    -0x10(%rbx), %rcx
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  PyLong_Type
// 182: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 186: 75 0a                         jne     0x192 <_JIT_ENTRY+0x192>
// 188: 48 8b 4b f8                   movq    -0x8(%rbx), %rcx
// 18c: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 190: 74 37                         je      0x1c9 <_JIT_ENTRY+0x1c9>
// 192: 4c 29 f3                      subq    %r14, %rbx
// 195: 48 83 c3 b8                   addq    $-0x48, %rbx
// 199: 48 c1 eb 03                   shrq    $0x3, %rbx
// 19d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1a1: 49 8b 06                      movq    (%r14), %rax
// 1a4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a6:  R_X86_64_64  _JIT_TARGET
// 1ae: 89 c9                         movl    %ecx, %ecx
// 1b0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ba: 48 83 c4 08                   addq    $0x8, %rsp
// 1be: 5b                            popq    %rbx
// 1bf: 41 5c                         popq    %r12
// 1c1: 41 5d                         popq    %r13
// 1c3: 41 5e                         popq    %r14
// 1c5: 41 5f                         popq    %r15
// 1c7: 5d                            popq    %rbp
// 1c8: c3                            retq
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _JIT_CONTINUE
// 1d3: 4c 89 f7                      movq    %r14, %rdi
// 1d6: 48 89 de                      movq    %rbx, %rsi
// 1d9: 48 8b 14 24                   movq    (%rsp), %rdx
// 1dd: 48 83 c4 08                   addq    $0x8, %rsp
// 1e1: 5b                            popq    %rbx
// 1e2: 41 5c                         popq    %r12
// 1e4: 41 5d                         popq    %r13
// 1e6: 41 5e                         popq    %r14
// 1e8: 41 5f                         popq    %r15
// 1ea: 5d                            popq    %rbp
// 1eb: ff e0                         jmpq    *%rax
// 1ed: 
static const unsigned char _STORE_SUBSCRplus_GUARD_BOTH_INT_code_body[494] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2a, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x5d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd6, 0x48, 0x8b, 0x4b, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x0a, 0x48, 0x8b, 0x4b, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_GUARD_BOTH_INT_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_GUARD_BOTH_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_GUARD_BOTH_INT_data_holes[1];

// _STORE_SUBSCRplus_GUARD_BOTH_UNICODE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_GUARD_BOTH_UNICODE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1b                         je      0x15d <_JIT_ENTRY+0x15d>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2a                         je      0x174 <_JIT_ENTRY+0x174>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: eb 5d                         jmp     0x1ba <_JIT_ENTRY+0x1ba>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 ed                         testl   %ebp, %ebp
// 16e: 49 0f 44 df                   cmoveq  %r15, %rbx
// 172: 75 d6                         jne     0x14a <_JIT_ENTRY+0x14a>
// 174: 48 8b 4b f0                   movq    -0x10(%rbx), %rcx
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  PyUnicode_Type
// 182: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 186: 75 0a                         jne     0x192 <_JIT_ENTRY+0x192>
// 188: 48 8b 4b f8                   movq    -0x8(%rbx), %rcx
// 18c: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 190: 74 37                         je      0x1c9 <_JIT_ENTRY+0x1c9>
// 192: 4c 29 f3                      subq    %r14, %rbx
// 195: 48 83 c3 b8                   addq    $-0x48, %rbx
// 199: 48 c1 eb 03                   shrq    $0x3, %rbx
// 19d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1a1: 49 8b 06                      movq    (%r14), %rax
// 1a4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a6:  R_X86_64_64  _JIT_TARGET
// 1ae: 89 c9                         movl    %ecx, %ecx
// 1b0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ba: 48 83 c4 08                   addq    $0x8, %rsp
// 1be: 5b                            popq    %rbx
// 1bf: 41 5c                         popq    %r12
// 1c1: 41 5d                         popq    %r13
// 1c3: 41 5e                         popq    %r14
// 1c5: 41 5f                         popq    %r15
// 1c7: 5d                            popq    %rbp
// 1c8: c3                            retq
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _JIT_CONTINUE
// 1d3: 4c 89 f7                      movq    %r14, %rdi
// 1d6: 48 89 de                      movq    %rbx, %rsi
// 1d9: 48 8b 14 24                   movq    (%rsp), %rdx
// 1dd: 48 83 c4 08                   addq    $0x8, %rsp
// 1e1: 5b                            popq    %rbx
// 1e2: 41 5c                         popq    %r12
// 1e4: 41 5d                         popq    %r13
// 1e6: 41 5e                         popq    %r14
// 1e8: 41 5f                         popq    %r15
// 1ea: 5d                            popq    %rbp
// 1eb: ff e0                         jmpq    *%rax
// 1ed: 
static const unsigned char _STORE_SUBSCRplus_GUARD_BOTH_UNICODE_code_body[494] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2a, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x5d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd6, 0x48, 0x8b, 0x4b, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x0a, 0x48, 0x8b, 0x4b, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_GUARD_BOTH_UNICODE_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_GUARD_BOTH_UNICODE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_GUARD_BOTH_UNICODE_data_holes[1];

// _STORE_SUBSCRplus_GUARD_BUILTINS_VERSION
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_GUARD_BUILTINS_VERSION.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1e                         je      0x160 <_JIT_ENTRY+0x160>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2d                         je      0x177 <_JIT_ENTRY+0x177>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: e9 8d 00 00 00                jmp     0x1ed <_JIT_ENTRY+0x1ed>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_Dealloc
// 16a: 4c 89 e7                      movq    %r12, %rdi
// 16d: ff d0                         callq   *%rax
// 16f: 85 ed                         testl   %ebp, %ebp
// 171: 49 0f 44 df                   cmoveq  %r15, %rbx
// 175: 75 d3                         jne     0x14a <_JIT_ENTRY+0x14a>
// 177: 49 8b 46 20                   movq    0x20(%r14), %rax
// 17b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017d:  R_X86_64_64  PyDict_Type
// 185: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 189: 75 3a                         jne     0x1c5 <_JIT_ENTRY+0x1c5>
// 18b: 48 8b 40 20                   movq    0x20(%rax), %rax
// 18f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000191:  R_X86_64_64  _JIT_OPERAND
// 199: 0f b7 c9                      movzwl  %cx, %ecx
// 19c: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 19f: 75 24                         jne     0x1c5 <_JIT_ENTRY+0x1c5>
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_CONTINUE
// 1ab: 4c 89 f7                      movq    %r14, %rdi
// 1ae: 48 89 de                      movq    %rbx, %rsi
// 1b1: 48 8b 14 24                   movq    (%rsp), %rdx
// 1b5: 48 83 c4 08                   addq    $0x8, %rsp
// 1b9: 5b                            popq    %rbx
// 1ba: 41 5c                         popq    %r12
// 1bc: 41 5d                         popq    %r13
// 1be: 41 5e                         popq    %r14
// 1c0: 41 5f                         popq    %r15
// 1c2: 5d                            popq    %rbp
// 1c3: ff e0                         jmpq    *%rax
// 1c5: 4c 29 f3                      subq    %r14, %rbx
// 1c8: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1cc: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1d0: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1d4: 49 8b 06                      movq    (%r14), %rax
// 1d7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d9:  R_X86_64_64  _JIT_TARGET
// 1e1: 89 c9                         movl    %ecx, %ecx
// 1e3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1e7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ed: 48 83 c4 08                   addq    $0x8, %rsp
// 1f1: 5b                            popq    %rbx
// 1f2: 41 5c                         popq    %r12
// 1f4: 41 5d                         popq    %r13
// 1f6: 41 5e                         popq    %r14
// 1f8: 41 5f                         popq    %r15
// 1fa: 5d                            popq    %rbp
// 1fb: c3                            retq
// 1fc: 
static const unsigned char _STORE_SUBSCRplus_GUARD_BUILTINS_VERSION_code_body[509] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1e, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2d, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd3, 0x49, 0x8b, 0x46, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x3a, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _STORE_SUBSCRplus_GUARD_BUILTINS_VERSION_code_holes[18] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_GUARD_BUILTINS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_GUARD_BUILTINS_VERSION_data_holes[1];

// _STORE_SUBSCRplus_GUARD_DORV_VALUES
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_GUARD_DORV_VALUES.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1b                         je      0x15d <_JIT_ENTRY+0x15d>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2a                         je      0x174 <_JIT_ENTRY+0x174>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: eb 49                         jmp     0x1a6 <_JIT_ENTRY+0x1a6>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 ed                         testl   %ebp, %ebp
// 16e: 49 0f 44 df                   cmoveq  %r15, %rbx
// 172: 75 d6                         jne     0x14a <_JIT_ENTRY+0x14a>
// 174: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 178: f6 40 e8 01                   testb   $0x1, -0x18(%rax)
// 17c: 75 37                         jne     0x1b5 <_JIT_ENTRY+0x1b5>
// 17e: 4c 29 f3                      subq    %r14, %rbx
// 181: 48 83 c3 b8                   addq    $-0x48, %rbx
// 185: 48 c1 eb 03                   shrq    $0x3, %rbx
// 189: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 18d: 49 8b 06                      movq    (%r14), %rax
// 190: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000192:  R_X86_64_64  _JIT_TARGET
// 19a: 89 c9                         movl    %ecx, %ecx
// 19c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1a0: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1a6: 48 83 c4 08                   addq    $0x8, %rsp
// 1aa: 5b                            popq    %rbx
// 1ab: 41 5c                         popq    %r12
// 1ad: 41 5d                         popq    %r13
// 1af: 41 5e                         popq    %r14
// 1b1: 41 5f                         popq    %r15
// 1b3: 5d                            popq    %rbp
// 1b4: c3                            retq
// 1b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b7:  R_X86_64_64  _JIT_CONTINUE
// 1bf: 4c 89 f7                      movq    %r14, %rdi
// 1c2: 48 89 de                      movq    %rbx, %rsi
// 1c5: 48 8b 14 24                   movq    (%rsp), %rdx
// 1c9: 48 83 c4 08                   addq    $0x8, %rsp
// 1cd: 5b                            popq    %rbx
// 1ce: 41 5c                         popq    %r12
// 1d0: 41 5d                         popq    %r13
// 1d2: 41 5e                         popq    %r14
// 1d4: 41 5f                         popq    %r15
// 1d6: 5d                            popq    %rbp
// 1d7: ff e0                         jmpq    *%rax
// 1d9: 
static const unsigned char _STORE_SUBSCRplus_GUARD_DORV_VALUES_code_body[474] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2a, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x49, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd6, 0x48, 0x8b, 0x43, 0xf8, 0xf6, 0x40, 0xe8, 0x01, 0x75, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_GUARD_DORV_VALUES_code_holes[16] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_GUARD_DORV_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_GUARD_DORV_VALUES_data_holes[1];

// _STORE_SUBSCRplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 8b 7b f8                   movq    -0x8(%rbx), %rdi
// 185: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 189: 75 14                         jne     0x19f <_JIT_ENTRY+0x19f>
// 18b: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// 199: ff d0                         callq   *%rax
// 19b: 84 c0                         testb   %al, %al
// 19d: 74 24                         je      0x1c3 <_JIT_ENTRY+0x1c3>
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _JIT_CONTINUE
// 1a9: 4c 89 f7                      movq    %r14, %rdi
// 1ac: 48 89 de                      movq    %rbx, %rsi
// 1af: 48 8b 14 24                   movq    (%rsp), %rdx
// 1b3: 48 83 c4 08                   addq    $0x8, %rsp
// 1b7: 5b                            popq    %rbx
// 1b8: 41 5c                         popq    %r12
// 1ba: 41 5d                         popq    %r13
// 1bc: 41 5e                         popq    %r14
// 1be: 41 5f                         popq    %r15
// 1c0: 5d                            popq    %rbp
// 1c1: ff e0                         jmpq    *%rax
// 1c3: 4c 29 f3                      subq    %r14, %rbx
// 1c6: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1ca: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1ce: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1d2: 49 8b 06                      movq    (%r14), %rax
// 1d5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d7:  R_X86_64_64  _JIT_TARGET
// 1df: 89 c9                         movl    %ecx, %ecx
// 1e1: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1e5: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1eb: e9 6b ff ff ff                jmp     0x15b <_JIT_ENTRY+0x15b>
// 1f0: 
static const unsigned char _STORE_SUBSCRplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_body[497] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0x8b, 0x7b, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x14, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x74, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x6b, 0xff, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_holes[1];

// _STORE_SUBSCRplus_GUARD_GLOBALS_VERSION
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_GUARD_GLOBALS_VERSION.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1e                         je      0x160 <_JIT_ENTRY+0x160>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2d                         je      0x177 <_JIT_ENTRY+0x177>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: e9 8d 00 00 00                jmp     0x1ed <_JIT_ENTRY+0x1ed>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_Dealloc
// 16a: 4c 89 e7                      movq    %r12, %rdi
// 16d: ff d0                         callq   *%rax
// 16f: 85 ed                         testl   %ebp, %ebp
// 171: 49 0f 44 df                   cmoveq  %r15, %rbx
// 175: 75 d3                         jne     0x14a <_JIT_ENTRY+0x14a>
// 177: 49 8b 46 18                   movq    0x18(%r14), %rax
// 17b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017d:  R_X86_64_64  PyDict_Type
// 185: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 189: 75 3a                         jne     0x1c5 <_JIT_ENTRY+0x1c5>
// 18b: 48 8b 40 20                   movq    0x20(%rax), %rax
// 18f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000191:  R_X86_64_64  _JIT_OPERAND
// 199: 0f b7 c9                      movzwl  %cx, %ecx
// 19c: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 19f: 75 24                         jne     0x1c5 <_JIT_ENTRY+0x1c5>
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_CONTINUE
// 1ab: 4c 89 f7                      movq    %r14, %rdi
// 1ae: 48 89 de                      movq    %rbx, %rsi
// 1b1: 48 8b 14 24                   movq    (%rsp), %rdx
// 1b5: 48 83 c4 08                   addq    $0x8, %rsp
// 1b9: 5b                            popq    %rbx
// 1ba: 41 5c                         popq    %r12
// 1bc: 41 5d                         popq    %r13
// 1be: 41 5e                         popq    %r14
// 1c0: 41 5f                         popq    %r15
// 1c2: 5d                            popq    %rbp
// 1c3: ff e0                         jmpq    *%rax
// 1c5: 4c 29 f3                      subq    %r14, %rbx
// 1c8: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1cc: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1d0: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1d4: 49 8b 06                      movq    (%r14), %rax
// 1d7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001d9:  R_X86_64_64  _JIT_TARGET
// 1e1: 89 c9                         movl    %ecx, %ecx
// 1e3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1e7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ed: 48 83 c4 08                   addq    $0x8, %rsp
// 1f1: 5b                            popq    %rbx
// 1f2: 41 5c                         popq    %r12
// 1f4: 41 5d                         popq    %r13
// 1f6: 41 5e                         popq    %r14
// 1f8: 41 5f                         popq    %r15
// 1fa: 5d                            popq    %rbp
// 1fb: c3                            retq
// 1fc: 
static const unsigned char _STORE_SUBSCRplus_GUARD_GLOBALS_VERSION_code_body[509] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1e, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2d, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x8d, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd3, 0x49, 0x8b, 0x46, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x3a, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _STORE_SUBSCRplus_GUARD_GLOBALS_VERSION_code_holes[18] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_GUARD_GLOBALS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_GUARD_GLOBALS_VERSION_data_holes[1];

// _STORE_SUBSCRplus_GUARD_IS_FALSE_POP
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_GUARD_IS_FALSE_POP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 49 29 de                      subq    %rbx, %r14
// 14d: 49 83 c6 a0                   addq    $-0x60, %r14
// 151: 49 c1 ee 03                   shrq    $0x3, %r14
// 155: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_TrueStruct
// 18f: 49 39 46 f8                   cmpq    %rax, -0x8(%r14)
// 193: 49 0f 44 f6                   cmoveq  %r14, %rsi
// 197: 74 21                         je      0x1ba <_JIT_ENTRY+0x1ba>
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _JIT_CONTINUE
// 1a3: 48 89 df                      movq    %rbx, %rdi
// 1a6: 48 8b 14 24                   movq    (%rsp), %rdx
// 1aa: 48 83 c4 08                   addq    $0x8, %rsp
// 1ae: 5b                            popq    %rbx
// 1af: 41 5c                         popq    %r12
// 1b1: 41 5d                         popq    %r13
// 1b3: 41 5e                         popq    %r14
// 1b5: 41 5f                         popq    %r15
// 1b7: 5d                            popq    %rbp
// 1b8: ff e0                         jmpq    *%rax
// 1ba: 48 29 de                      subq    %rbx, %rsi
// 1bd: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1c1: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1c5: 89 73 40                      movl    %esi, 0x40(%rbx)
// 1c8: 48 8b 03                      movq    (%rbx), %rax
// 1cb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cd:  R_X86_64_64  _JIT_TARGET
// 1d5: 89 c9                         movl    %ecx, %ecx
// 1d7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1db: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1e1: e9 75 ff ff ff                jmp     0x15b <_JIT_ENTRY+0x15b>
// 1e6: 
static const unsigned char _STORE_SUBSCRplus_GUARD_IS_FALSE_POP_code_body[487] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xc9, 0x49, 0x8d, 0x76, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x46, 0xf8, 0x49, 0x0f, 0x44, 0xf6, 0x74, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x75, 0xff, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_GUARD_IS_FALSE_POP_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_GUARD_IS_FALSE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_GUARD_IS_FALSE_POP_data_holes[1];

// _STORE_SUBSCRplus_GUARD_IS_NONE_POP
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_GUARD_IS_NONE_POP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1b                         je      0x15d <_JIT_ENTRY+0x15d>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 2a                         je      0x174 <_JIT_ENTRY+0x174>
// 14a: 49 29 de                      subq    %rbx, %r14
// 14d: 49 83 c6 a0                   addq    $-0x60, %r14
// 151: 49 c1 ee 03                   shrq    $0x3, %r14
// 155: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: eb 56                         jmp     0x1b3 <_JIT_ENTRY+0x1b3>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 ed                         testl   %ebp, %ebp
// 16e: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 172: 75 d6                         jne     0x14a <_JIT_ENTRY+0x14a>
// 174: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  _Py_NoneStruct
// 182: 49 39 46 f8                   cmpq    %rax, -0x8(%r14)
// 186: 49 0f 45 f6                   cmovneq %r14, %rsi
// 18a: 74 36                         je      0x1c2 <_JIT_ENTRY+0x1c2>
// 18c: 48 29 de                      subq    %rbx, %rsi
// 18f: 48 83 c6 b8                   addq    $-0x48, %rsi
// 193: 48 c1 ee 03                   shrq    $0x3, %rsi
// 197: 89 73 40                      movl    %esi, 0x40(%rbx)
// 19a: 48 8b 03                      movq    (%rbx), %rax
// 19d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019f:  R_X86_64_64  _JIT_TARGET
// 1a7: 89 c9                         movl    %ecx, %ecx
// 1a9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1ad: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b3: 48 83 c4 08                   addq    $0x8, %rsp
// 1b7: 5b                            popq    %rbx
// 1b8: 41 5c                         popq    %r12
// 1ba: 41 5d                         popq    %r13
// 1bc: 41 5e                         popq    %r14
// 1be: 41 5f                         popq    %r15
// 1c0: 5d                            popq    %rbp
// 1c1: c3                            retq
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _JIT_CONTINUE
// 1cc: 48 89 df                      movq    %rbx, %rdi
// 1cf: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d3: 48 83 c4 08                   addq    $0x8, %rsp
// 1d7: 5b                            popq    %rbx
// 1d8: 41 5c                         popq    %r12
// 1da: 41 5d                         popq    %r13
// 1dc: 41 5e                         popq    %r14
// 1de: 41 5f                         popq    %r15
// 1e0: 5d                            popq    %rbp
// 1e1: ff e0                         jmpq    *%rax
// 1e3: 
static const unsigned char _STORE_SUBSCRplus_GUARD_IS_NONE_POP_code_body[484] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x2a, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x56, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xd6, 0x49, 0x8d, 0x76, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x46, 0xf8, 0x49, 0x0f, 0x45, 0xf6, 0x74, 0x36, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_GUARD_IS_NONE_POP_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_GUARD_IS_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_GUARD_IS_NONE_POP_data_holes[1];

// _STORE_SUBSCRplus_GUARD_IS_NOT_NONE_POP
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_GUARD_IS_NOT_NONE_POP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 49 29 de                      subq    %rbx, %r14
// 14d: 49 83 c6 a0                   addq    $-0x60, %r14
// 151: 49 c1 ee 03                   shrq    $0x3, %r14
// 155: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 4d 8b 7e f8                   movq    -0x8(%r14), %r15
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_NoneStruct
// 18f: 49 39 c7                      cmpq    %rax, %r15
// 192: 74 12                         je      0x1a6 <_JIT_ENTRY+0x1a6>
// 194: 49 8b 07                      movq    (%r15), %rax
// 197: 48 85 c0                      testq   %rax, %rax
// 19a: 7e 34                         jle     0x1d0 <_JIT_ENTRY+0x1d0>
// 19c: 49 83 c6 f8                   addq    $-0x8, %r14
// 1a0: 85 c0                         testl   %eax, %eax
// 1a2: 79 55                         jns     0x1f9 <_JIT_ENTRY+0x1f9>
// 1a4: eb 73                         jmp     0x219 <_JIT_ENTRY+0x219>
// 1a6: 49 29 dd                      subq    %rbx, %r13
// 1a9: 49 83 c5 b8                   addq    $-0x48, %r13
// 1ad: 49 c1 ed 03                   shrq    $0x3, %r13
// 1b1: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 1b5: 48 8b 03                      movq    (%rbx), %rax
// 1b8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ba:  R_X86_64_64  _JIT_TARGET
// 1c2: 89 c9                         movl    %ecx, %ecx
// 1c4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1c8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ce: eb 8b                         jmp     0x15b <_JIT_ENTRY+0x15b>
// 1d0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d2:  R_X86_64_64  .rodata.str1.1
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _Py_NegativeRefcount
// 1e4: be 14 0d 00 00                movl    $0xd14, %esi            # imm = 0xD14
// 1e9: 4c 89 fa                      movq    %r15, %rdx
// 1ec: ff d0                         callq   *%rax
// 1ee: 49 8b 07                      movq    (%r15), %rax
// 1f1: 49 83 c6 f8                   addq    $-0x8, %r14
// 1f5: 85 c0                         testl   %eax, %eax
// 1f7: 78 20                         js      0x219 <_JIT_ENTRY+0x219>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 203: ff d0                         callq   *%rax
// 205: 49 ff 0f                      decq    (%r15)
// 208: 75 0f                         jne     0x219 <_JIT_ENTRY+0x219>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _Py_Dealloc
// 214: 4c 89 ff                      movq    %r15, %rdi
// 217: ff d0                         callq   *%rax
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_CONTINUE
// 223: 48 89 df                      movq    %rbx, %rdi
// 226: 4c 89 f6                      movq    %r14, %rsi
// 229: 48 8b 14 24                   movq    (%rsp), %rdx
// 22d: 48 83 c4 08                   addq    $0x8, %rsp
// 231: 5b                            popq    %rbx
// 232: 41 5c                         popq    %r12
// 234: 41 5d                         popq    %r13
// 236: 41 5e                         popq    %r14
// 238: 41 5f                         popq    %r15
// 23a: 5d                            popq    %rbp
// 23b: ff e0                         jmpq    *%rax
// 23d: 
static const unsigned char _STORE_SUBSCRplus_GUARD_IS_NOT_NONE_POP_code_body[574] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x6e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x75, 0xc9, 0x4d, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc7, 0x74, 0x12, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x34, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x79, 0x55, 0xeb, 0x73, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x8b, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x0d, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x49, 0x83, 0xc6, 0xf8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_GUARD_IS_NOT_NONE_POP_code_holes[21] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_GUARD_IS_NOT_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_GUARD_IS_NOT_NONE_POP_data_holes[1];

// _STORE_SUBSCRplus_GUARD_IS_TRUE_POP
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_GUARD_IS_TRUE_POP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 49 29 de                      subq    %rbx, %r14
// 14d: 49 83 c6 a0                   addq    $-0x60, %r14
// 151: 49 c1 ee 03                   shrq    $0x3, %r14
// 155: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_FalseStruct
// 18f: 49 39 46 f8                   cmpq    %rax, -0x8(%r14)
// 193: 49 0f 44 f6                   cmoveq  %r14, %rsi
// 197: 74 21                         je      0x1ba <_JIT_ENTRY+0x1ba>
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _JIT_CONTINUE
// 1a3: 48 89 df                      movq    %rbx, %rdi
// 1a6: 48 8b 14 24                   movq    (%rsp), %rdx
// 1aa: 48 83 c4 08                   addq    $0x8, %rsp
// 1ae: 5b                            popq    %rbx
// 1af: 41 5c                         popq    %r12
// 1b1: 41 5d                         popq    %r13
// 1b3: 41 5e                         popq    %r14
// 1b5: 41 5f                         popq    %r15
// 1b7: 5d                            popq    %rbp
// 1b8: ff e0                         jmpq    *%rax
// 1ba: 48 29 de                      subq    %rbx, %rsi
// 1bd: 48 83 c6 b8                   addq    $-0x48, %rsi
// 1c1: 48 c1 ee 03                   shrq    $0x3, %rsi
// 1c5: 89 73 40                      movl    %esi, 0x40(%rbx)
// 1c8: 48 8b 03                      movq    (%rbx), %rax
// 1cb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cd:  R_X86_64_64  _JIT_TARGET
// 1d5: 89 c9                         movl    %ecx, %ecx
// 1d7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1db: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1e1: e9 75 ff ff ff                jmp     0x15b <_JIT_ENTRY+0x15b>
// 1e6: 
static const unsigned char _STORE_SUBSCRplus_GUARD_IS_TRUE_POP_code_body[487] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xc9, 0x49, 0x8d, 0x76, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x46, 0xf8, 0x49, 0x0f, 0x44, 0xf6, 0x74, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x75, 0xff, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_GUARD_IS_TRUE_POP_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_GUARD_IS_TRUE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_GUARD_IS_TRUE_POP_data_holes[1];

// _STORE_SUBSCRplus_GUARD_KEYS_VERSION
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_GUARD_KEYS_VERSION.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1e                         je      0x160 <_JIT_ENTRY+0x160>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2d                         je      0x177 <_JIT_ENTRY+0x177>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: e9 81 00 00 00                jmp     0x1e1 <_JIT_ENTRY+0x1e1>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_Dealloc
// 16a: 4c 89 e7                      movq    %r12, %rdi
// 16d: ff d0                         callq   *%rax
// 16f: 85 ed                         testl   %ebp, %ebp
// 171: 49 0f 44 df                   cmoveq  %r15, %rbx
// 175: 75 d3                         jne     0x14a <_JIT_ENTRY+0x14a>
// 177: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 17b: 48 8b 40 08                   movq    0x8(%rax), %rax
// 17f: 48 8b 80 70 03 00 00          movq    0x370(%rax), %rax
// 186: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000188:  R_X86_64_64  _JIT_OPERAND
// 190: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// 193: 75 24                         jne     0x1b9 <_JIT_ENTRY+0x1b9>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _JIT_CONTINUE
// 19f: 4c 89 f7                      movq    %r14, %rdi
// 1a2: 48 89 de                      movq    %rbx, %rsi
// 1a5: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a9: 48 83 c4 08                   addq    $0x8, %rsp
// 1ad: 5b                            popq    %rbx
// 1ae: 41 5c                         popq    %r12
// 1b0: 41 5d                         popq    %r13
// 1b2: 41 5e                         popq    %r14
// 1b4: 41 5f                         popq    %r15
// 1b6: 5d                            popq    %rbp
// 1b7: ff e0                         jmpq    *%rax
// 1b9: 4c 29 f3                      subq    %r14, %rbx
// 1bc: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1c0: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1c4: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1c8: 49 8b 06                      movq    (%r14), %rax
// 1cb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001cd:  R_X86_64_64  _JIT_TARGET
// 1d5: 89 c9                         movl    %ecx, %ecx
// 1d7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1db: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1e1: 48 83 c4 08                   addq    $0x8, %rsp
// 1e5: 5b                            popq    %rbx
// 1e6: 41 5c                         popq    %r12
// 1e8: 41 5d                         popq    %r13
// 1ea: 41 5e                         popq    %r14
// 1ec: 41 5f                         popq    %r15
// 1ee: 5d                            popq    %rbp
// 1ef: c3                            retq
// 1f0: 
static const unsigned char _STORE_SUBSCRplus_GUARD_KEYS_VERSION_code_body[497] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1e, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2d, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd3, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x80, 0x70, 0x03, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _STORE_SUBSCRplus_GUARD_KEYS_VERSION_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_GUARD_KEYS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_GUARD_KEYS_VERSION_data_holes[1];

// _STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_LIST
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_LIST.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1b                         je      0x15d <_JIT_ENTRY+0x15d>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2a                         je      0x174 <_JIT_ENTRY+0x174>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: eb 7a                         jmp     0x1d7 <_JIT_ENTRY+0x1d7>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 ed                         testl   %ebp, %ebp
// 16e: 49 0f 44 df                   cmoveq  %r15, %rbx
// 172: 75 d6                         jne     0x14a <_JIT_ENTRY+0x14a>
// 174: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 178: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 17c: 48 85 c9                      testq   %rcx, %rcx
// 17f: 74 2e                         je      0x1af <_JIT_ENTRY+0x1af>
// 181: 48 8b 40 10                   movq    0x10(%rax), %rax
// 185: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// 189: 7d 24                         jge     0x1af <_JIT_ENTRY+0x1af>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _JIT_CONTINUE
// 195: 4c 89 f7                      movq    %r14, %rdi
// 198: 48 89 de                      movq    %rbx, %rsi
// 19b: 48 8b 14 24                   movq    (%rsp), %rdx
// 19f: 48 83 c4 08                   addq    $0x8, %rsp
// 1a3: 5b                            popq    %rbx
// 1a4: 41 5c                         popq    %r12
// 1a6: 41 5d                         popq    %r13
// 1a8: 41 5e                         popq    %r14
// 1aa: 41 5f                         popq    %r15
// 1ac: 5d                            popq    %rbp
// 1ad: ff e0                         jmpq    *%rax
// 1af: 4c 29 f3                      subq    %r14, %rbx
// 1b2: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1b6: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1ba: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1be: 49 8b 06                      movq    (%r14), %rax
// 1c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c3:  R_X86_64_64  _JIT_TARGET
// 1cb: 89 c9                         movl    %ecx, %ecx
// 1cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1d7: 48 83 c4 08                   addq    $0x8, %rsp
// 1db: 5b                            popq    %rbx
// 1dc: 41 5c                         popq    %r12
// 1de: 41 5d                         popq    %r13
// 1e0: 41 5e                         popq    %r14
// 1e2: 41 5f                         popq    %r15
// 1e4: 5d                            popq    %rbp
// 1e5: c3                            retq
// 1e6: 
static const unsigned char _STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_LIST_code_body[487] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2a, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x7a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd6, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_LIST_code_holes[16] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_LIST_data_holes[1];

// _STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_RANGE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_RANGE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 185: 48 83 78 20 00                cmpq    $0x0, 0x20(%rax)
// 18a: 7e 24                         jle     0x1b0 <_JIT_ENTRY+0x1b0>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_CONTINUE
// 196: 4c 89 f7                      movq    %r14, %rdi
// 199: 48 89 de                      movq    %rbx, %rsi
// 19c: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a0: 48 83 c4 08                   addq    $0x8, %rsp
// 1a4: 5b                            popq    %rbx
// 1a5: 41 5c                         popq    %r12
// 1a7: 41 5d                         popq    %r13
// 1a9: 41 5e                         popq    %r14
// 1ab: 41 5f                         popq    %r15
// 1ad: 5d                            popq    %rbp
// 1ae: ff e0                         jmpq    *%rax
// 1b0: 4c 29 f3                      subq    %r14, %rbx
// 1b3: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1b7: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1bb: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1bf: 49 8b 06                      movq    (%r14), %rax
// 1c2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c4:  R_X86_64_64  _JIT_TARGET
// 1cc: 89 c9                         movl    %ecx, %ecx
// 1ce: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1d2: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1d8: eb 81                         jmp     0x15b <_JIT_ENTRY+0x15b>
// 1da: 
static const unsigned char _STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_RANGE_code_body[475] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x83, 0x78, 0x20, 0x00, 0x7e, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xeb, 0x81};
static const Hole _STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_RANGE_code_holes[16] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_RANGE_data_holes[1];

// _STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_TUPLE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_TUPLE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1b                         je      0x15d <_JIT_ENTRY+0x15d>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2a                         je      0x174 <_JIT_ENTRY+0x174>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: eb 7a                         jmp     0x1d7 <_JIT_ENTRY+0x1d7>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 ed                         testl   %ebp, %ebp
// 16e: 49 0f 44 df                   cmoveq  %r15, %rbx
// 172: 75 d6                         jne     0x14a <_JIT_ENTRY+0x14a>
// 174: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 178: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 17c: 48 85 c9                      testq   %rcx, %rcx
// 17f: 74 2e                         je      0x1af <_JIT_ENTRY+0x1af>
// 181: 48 8b 40 10                   movq    0x10(%rax), %rax
// 185: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// 189: 7d 24                         jge     0x1af <_JIT_ENTRY+0x1af>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _JIT_CONTINUE
// 195: 4c 89 f7                      movq    %r14, %rdi
// 198: 48 89 de                      movq    %rbx, %rsi
// 19b: 48 8b 14 24                   movq    (%rsp), %rdx
// 19f: 48 83 c4 08                   addq    $0x8, %rsp
// 1a3: 5b                            popq    %rbx
// 1a4: 41 5c                         popq    %r12
// 1a6: 41 5d                         popq    %r13
// 1a8: 41 5e                         popq    %r14
// 1aa: 41 5f                         popq    %r15
// 1ac: 5d                            popq    %rbp
// 1ad: ff e0                         jmpq    *%rax
// 1af: 4c 29 f3                      subq    %r14, %rbx
// 1b2: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1b6: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1ba: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1be: 49 8b 06                      movq    (%r14), %rax
// 1c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c3:  R_X86_64_64  _JIT_TARGET
// 1cb: 89 c9                         movl    %ecx, %ecx
// 1cd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1d1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1d7: 48 83 c4 08                   addq    $0x8, %rsp
// 1db: 5b                            popq    %rbx
// 1dc: 41 5c                         popq    %r12
// 1de: 41 5d                         popq    %r13
// 1e0: 41 5e                         popq    %r14
// 1e2: 41 5f                         popq    %r15
// 1e4: 5d                            popq    %rbp
// 1e5: c3                            retq
// 1e6: 
static const unsigned char _STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_TUPLE_code_body[487] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2a, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x7a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd6, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x2e, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_TUPLE_code_holes[16] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_TUPLE_data_holes[1];

// _STORE_SUBSCRplus_GUARD_TYPE_VERSION
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_GUARD_TYPE_VERSION.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1b                         je      0x15d <_JIT_ENTRY+0x15d>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2a                         je      0x174 <_JIT_ENTRY+0x174>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: eb 7d                         jmp     0x1da <_JIT_ENTRY+0x1da>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 ed                         testl   %ebp, %ebp
// 16e: 49 0f 44 df                   cmoveq  %r15, %rbx
// 172: 75 d6                         jne     0x14a <_JIT_ENTRY+0x14a>
// 174: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 178: 48 8b 40 08                   movq    0x8(%rax), %rax
// 17c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017e:  R_X86_64_64  _JIT_OPERAND
// 186: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 18c: 75 24                         jne     0x1b2 <_JIT_ENTRY+0x1b2>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _JIT_CONTINUE
// 198: 4c 89 f7                      movq    %r14, %rdi
// 19b: 48 89 de                      movq    %rbx, %rsi
// 19e: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a2: 48 83 c4 08                   addq    $0x8, %rsp
// 1a6: 5b                            popq    %rbx
// 1a7: 41 5c                         popq    %r12
// 1a9: 41 5d                         popq    %r13
// 1ab: 41 5e                         popq    %r14
// 1ad: 41 5f                         popq    %r15
// 1af: 5d                            popq    %rbp
// 1b0: ff e0                         jmpq    *%rax
// 1b2: 4c 29 f3                      subq    %r14, %rbx
// 1b5: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1b9: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1bd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1c1: 49 8b 06                      movq    (%r14), %rax
// 1c4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c6:  R_X86_64_64  _JIT_TARGET
// 1ce: 89 c9                         movl    %ecx, %ecx
// 1d0: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1d4: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1da: 48 83 c4 08                   addq    $0x8, %rsp
// 1de: 5b                            popq    %rbx
// 1df: 41 5c                         popq    %r12
// 1e1: 41 5d                         popq    %r13
// 1e3: 41 5e                         popq    %r14
// 1e5: 41 5f                         popq    %r15
// 1e7: 5d                            popq    %rbp
// 1e8: c3                            retq
// 1e9: 
static const unsigned char _STORE_SUBSCRplus_GUARD_TYPE_VERSION_code_body[490] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2a, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x7d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd6, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _STORE_SUBSCRplus_GUARD_TYPE_VERSION_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_GUARD_TYPE_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_GUARD_TYPE_VERSION_data_holes[1];

// _STORE_SUBSCRplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _JIT_OPARG
// 18b: 0f b7 c0                      movzwl  %ax, %eax
// 18e: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 193: 29 c1                         subl    %eax, %ecx
// 195: 48 63 c1                      movslq  %ecx, %rax
// 198: 4c 8b 24 c3                   movq    (%rbx,%rax,8), %r12
// 19c: 4d 8b 7c 24 18                movq    0x18(%r12), %r15
// 1a1: 41 8b 07                      movl    (%r15), %eax
// 1a4: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001a6:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ae: ff c0                         incl    %eax
// 1b0: 74 05                         je      0x1b7 <_JIT_ENTRY+0x1b7>
// 1b2: 41 89 07                      movl    %eax, (%r15)
// 1b5: ff d5                         callq   *%rbp
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _JIT_OPARG
// 1c1: f7 d0                         notl    %eax
// 1c3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 1c8: 48 98                         cltq
// 1ca: 4c 89 3c c3                   movq    %r15, (%rbx,%rax,8)
// 1ce: 4d 8b 6c 24 10                movq    0x10(%r12), %r13
// 1d3: 41 8b 45 00                   movl    (%r13), %eax
// 1d7: ff c0                         incl    %eax
// 1d9: 74 06                         je      0x1e1 <_JIT_ENTRY+0x1e1>
// 1db: 41 89 45 00                   movl    %eax, (%r13)
// 1df: ff d5                         callq   *%rbp
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _JIT_OPARG
// 1eb: 0f b7 c0                      movzwl  %ax, %eax
// 1ee: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1f3: 29 c1                         subl    %eax, %ecx
// 1f5: 48 63 c1                      movslq  %ecx, %rax
// 1f8: 4c 89 2c c3                   movq    %r13, (%rbx,%rax,8)
// 1fc: 49 8b 04 24                   movq    (%r12), %rax
// 200: 48 85 c0                      testq   %rax, %rax
// 203: 7e 06                         jle     0x20b <_JIT_ENTRY+0x20b>
// 205: 85 c0                         testl   %eax, %eax
// 207: 79 28                         jns     0x231 <_JIT_ENTRY+0x231>
// 209: eb 47                         jmp     0x252 <_JIT_ENTRY+0x252>
// 20b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020d:  R_X86_64_64  .rodata.str1.1
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _Py_NegativeRefcount
// 21f: be 18 0a 00 00                movl    $0xa18, %esi            # imm = 0xA18
// 224: 4c 89 e2                      movq    %r12, %rdx
// 227: ff d0                         callq   *%rax
// 229: 49 8b 04 24                   movq    (%r12), %rax
// 22d: 85 c0                         testl   %eax, %eax
// 22f: 78 21                         js      0x252 <_JIT_ENTRY+0x252>
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23b: ff d0                         callq   *%rax
// 23d: 49 ff 0c 24                   decq    (%r12)
// 241: 75 0f                         jne     0x252 <_JIT_ENTRY+0x252>
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _Py_Dealloc
// 24d: 4c 89 e7                      movq    %r12, %rdi
// 250: ff d0                         callq   *%rax
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _JIT_OPARG
// 25c: 0f b7 c0                      movzwl  %ax, %eax
// 25f: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 264: 29 c1                         subl    %eax, %ecx
// 266: 48 63 c9                      movslq  %ecx, %rcx
// 269: 4c 89 2c cb                   movq    %r13, (%rbx,%rcx,8)
// 26d: f7 d0                         notl    %eax
// 26f: 48 98                         cltq
// 271: 4c 89 3c c3                   movq    %r15, (%rbx,%rax,8)
// 275: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000277:  R_X86_64_64  _JIT_CONTINUE
// 27f: 4c 89 f7                      movq    %r14, %rdi
// 282: 48 89 de                      movq    %rbx, %rsi
// 285: 48 8b 14 24                   movq    (%rsp), %rdx
// 289: 48 83 c4 08                   addq    $0x8, %rsp
// 28d: 5b                            popq    %rbx
// 28e: 41 5c                         popq    %r12
// 290: 41 5d                         popq    %r13
// 292: 41 5e                         popq    %r14
// 294: 41 5f                         popq    %r15
// 296: 5d                            popq    %rbp
// 297: ff e0                         jmpq    *%rax
// 299: 
static const unsigned char _STORE_SUBSCRplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_body[666] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x8b, 0x24, 0xc3, 0x4d, 0x8b, 0x7c, 0x24, 0x18, 0x41, 0x8b, 0x07, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x05, 0x41, 0x89, 0x07, 0xff, 0xd5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4c, 0x89, 0x3c, 0xc3, 0x4d, 0x8b, 0x6c, 0x24, 0x10, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x06, 0x41, 0x89, 0x45, 0x00, 0xff, 0xd5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x89, 0x2c, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x4c, 0x89, 0x2c, 0xcb, 0xf7, 0xd0, 0x48, 0x98, 0x4c, 0x89, 0x3c, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[24] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x277, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _STORE_SUBSCRplus_INIT_CALL_PY_EXACT_ARGS
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_INIT_CALL_PY_EXACT_ARGS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f6                      movq    %rsi, %r14
// 16: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
// 1b: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1f: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 23: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 27: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000029:  R_X86_64_64  PyObject_SetItem
// 31: 4c 89 ef                      movq    %r13, %rdi
// 34: 4c 89 e6                      movq    %r12, %rsi
// 37: 4c 89 fa                      movq    %r15, %rdx
// 3a: ff d0                         callq   *%rax
// 3c: 89 c5                         movl    %eax, %ebp
// 3e: 49 8b 07                      movq    (%r15), %rax
// 41: 48 85 c0                      testq   %rax, %rax
// 44: 7e 10                         jle     0x56 <_JIT_ENTRY+0x56>
// 46: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000048:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 50: 85 c0                         testl   %eax, %eax
// 52: 79 31                         jns     0x85 <_JIT_ENTRY+0x85>
// 54: eb 36                         jmp     0x8c <_JIT_ENTRY+0x8c>
// 56: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000058:  R_X86_64_64  .rodata.str1.1
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _Py_NegativeRefcount
// 6a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 6f: 4c 89 fa                      movq    %r15, %rdx
// 72: ff d0                         callq   *%rax
// 74: 49 8b 07                      movq    (%r15), %rax
// 77: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000079:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 81: 85 c0                         testl   %eax, %eax
// 83: 78 07                         js      0x8c <_JIT_ENTRY+0x8c>
// 85: ff d3                         callq   *%rbx
// 87: 49 ff 0f                      decq    (%r15)
// 8a: 74 0f                         je      0x9b <_JIT_ENTRY+0x9b>
// 8c: 49 8b 45 00                   movq    (%r13), %rax
// 90: 48 85 c0                      testq   %rax, %rax
// 93: 7e 1e                         jle     0xb3 <_JIT_ENTRY+0xb3>
// 95: 85 c0                         testl   %eax, %eax
// 97: 79 40                         jns     0xd9 <_JIT_ENTRY+0xd9>
// 99: eb 46                         jmp     0xe1 <_JIT_ENTRY+0xe1>
// 9b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009d:  R_X86_64_64  _Py_Dealloc
// a5: 4c 89 ff                      movq    %r15, %rdi
// a8: ff d0                         callq   *%rax
// aa: 49 8b 45 00                   movq    (%r13), %rax
// ae: 48 85 c0                      testq   %rax, %rax
// b1: 7f e2                         jg      0x95 <_JIT_ENTRY+0x95>
// b3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000b5:  R_X86_64_64  .rodata.str1.1
// bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bf:  R_X86_64_64  _Py_NegativeRefcount
// c7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// cc: 4c 89 ea                      movq    %r13, %rdx
// cf: ff d0                         callq   *%rax
// d1: 49 8b 45 00                   movq    (%r13), %rax
// d5: 85 c0                         testl   %eax, %eax
// d7: 78 08                         js      0xe1 <_JIT_ENTRY+0xe1>
// d9: ff d3                         callq   *%rbx
// db: 49 ff 4d 00                   decq    (%r13)
// df: 74 13                         je      0xf4 <_JIT_ENTRY+0xf4>
// e1: 49 8b 04 24                   movq    (%r12), %rax
// e5: 48 85 c0                      testq   %rax, %rax
// e8: 7e 22                         jle     0x10c <_JIT_ENTRY+0x10c>
// ea: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// ee: 85 c0                         testl   %eax, %eax
// f0: 79 44                         jns     0x136 <_JIT_ENTRY+0x136>
// f2: eb 4a                         jmp     0x13e <_JIT_ENTRY+0x13e>
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  _Py_Dealloc
// fe: 4c 89 ef                      movq    %r13, %rdi
// 101: ff d0                         callq   *%rax
// 103: 49 8b 04 24                   movq    (%r12), %rax
// 107: 48 85 c0                      testq   %rax, %rax
// 10a: 7f de                         jg      0xea <_JIT_ENTRY+0xea>
// 10c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010e:  R_X86_64_64  .rodata.str1.1
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _Py_NegativeRefcount
// 120: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 125: 4c 89 e2                      movq    %r12, %rdx
// 128: ff d0                         callq   *%rax
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 132: 85 c0                         testl   %eax, %eax
// 134: 78 08                         js      0x13e <_JIT_ENTRY+0x13e>
// 136: ff d3                         callq   *%rbx
// 138: 49 ff 0c 24                   decq    (%r12)
// 13c: 74 2d                         je      0x16b <_JIT_ENTRY+0x16b>
// 13e: 85 ed                         testl   %ebp, %ebp
// 140: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 144: 74 3c                         je      0x182 <_JIT_ENTRY+0x182>
// 146: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 14b: 49 29 c6                      subq    %rax, %r14
// 14e: 49 83 c6 a0                   addq    $-0x60, %r14
// 152: 49 c1 ee 03                   shrq    $0x3, %r14
// 156: 44 89 70 40                   movl    %r14d, 0x40(%rax)
// 15a: 31 c0                         xorl    %eax, %eax
// 15c: 48 83 c4 18                   addq    $0x18, %rsp
// 160: 5b                            popq    %rbx
// 161: 41 5c                         popq    %r12
// 163: 41 5d                         popq    %r13
// 165: 41 5e                         popq    %r14
// 167: 41 5f                         popq    %r15
// 169: 5d                            popq    %rbp
// 16a: c3                            retq
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_Dealloc
// 175: 4c 89 e7                      movq    %r12, %rdi
// 178: ff d0                         callq   *%rax
// 17a: 85 ed                         testl   %ebp, %ebp
// 17c: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 180: 75 c4                         jne     0x146 <_JIT_ENTRY+0x146>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _JIT_OPARG
// 18c: 0f b7 c0                      movzwl  %ax, %eax
// 18f: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 194: 29 c1                         subl    %eax, %ecx
// 196: f7 d0                         notl    %eax
// 198: 48 63 d0                      movslq  %eax, %rdx
// 19b: 48 63 c1                      movslq  %ecx, %rax
// 19e: 4d 8b 2c c6                   movq    (%r14,%rax,8), %r13
// 1a2: 49 8b 0c d6                   movq    (%r14,%rdx,8), %rcx
// 1a6: 49 8b 5d 30                   movq    0x30(%r13), %rbx
// 1aa: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 1af: 4c 8b bd 00 01 00 00          movq    0x100(%rbp), %r15
// 1b6: 48 63 43 4c                   movslq  0x4c(%rbx), %rax
// 1ba: 49 8d 04 c7                   leaq    (%r15,%rax,8), %rax
// 1be: 48 89 85 00 01 00 00          movq    %rax, 0x100(%rbp)
// 1c5: 4d 89 6f 10                   movq    %r13, 0x10(%r15)
// 1c9: 8b 03                         movl    (%rbx), %eax
// 1cb: ff c0                         incl    %eax
// 1cd: 4d 8d 24 d6                   leaq    (%r14,%rdx,8), %r12
// 1d1: 48 85 c9                      testq   %rcx, %rcx
// 1d4: 0f 84 c2 00 00 00             je      0x29c <_JIT_ENTRY+0x29c>
// 1da: 85 c0                         testl   %eax, %eax
// 1dc: 74 0e                         je      0x1ec <_JIT_ENTRY+0x1ec>
// 1de: 89 03                         movl    %eax, (%rbx)
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ea: ff d0                         callq   *%rax
// 1ec: 49 89 1f                      movq    %rbx, (%r15)
// 1ef: 41 0f 10 45 10                movups  0x10(%r13), %xmm0
// 1f4: 41 0f 11 47 18                movups  %xmm0, 0x18(%r15)
// 1f9: 49 c7 47 28 00 00 00 00       movq    $0x0, 0x28(%r15)
// 201: 8b 4b 48                      movl    0x48(%rbx), %ecx
// 204: 41 89 4f 40                   movl    %ecx, 0x40(%r15)
// 208: 49 c7 47 30 00 00 00 00       movq    $0x0, 0x30(%r15)
// 210: 48 81 c3 c8 00 00 00          addq    $0xc8, %rbx
// 217: 49 89 5f 38                   movq    %rbx, 0x38(%r15)
// 21b: 66 41 c7 47 44 00 00          movw    $0x0, 0x44(%r15)
// 222: 41 c6 47 46 00                movb    $0x0, 0x46(%r15)
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _JIT_OPARG
// 231: 44 0f b7 e8                   movzwl  %ax, %r13d
// 235: 41 ff c5                      incl    %r13d
// 238: 45 85 ed                      testl   %r13d, %r13d
// 23b: 0f 9f c2                      setg    %dl
// 23e: 44 39 e9                      cmpl    %r13d, %ecx
// 241: 0f 8e fc 00 00 00             jle     0x343 <_JIT_ENTRY+0x343>
// 247: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000249:  R_X86_64_64  _JIT_OPARG
// 251: 44 0f b7 eb                   movzwl  %bx, %r13d
// 255: 41 ff c5                      incl    %r13d
// 258: 4b 8d 3c ef                   leaq    (%r15,%r13,8), %rdi
// 25c: 48 83 c7 48                   addq    $0x48, %rdi
// 260: 44 89 e8                      movl    %r13d, %eax
// 263: f7 d0                         notl    %eax
// 265: 01 c1                         addl    %eax, %ecx
// 267: 48 8d 14 cd 08 00 00 00       leaq    0x8(,%rcx,8), %rdx
// 26f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000271:  R_X86_64_64  memset
// 279: 31 f6                         xorl    %esi, %esi
// 27b: ff d0                         callq   *%rax
// 27d: 45 85 ed                      testl   %r13d, %r13d
// 280: 0f 8e a1 01 00 00             jle     0x427 <_JIT_ENTRY+0x427>
// 286: 0f b7 cb                      movzwl  %bx, %ecx
// 289: 48 c1 e1 03                   shlq    $0x3, %rcx
// 28d: 4c 89 f0                      movq    %r14, %rax
// 290: 48 29 c8                      subq    %rcx, %rax
// 293: 48 83 c0 f8                   addq    $-0x8, %rax
// 297: e9 cc 00 00 00                jmp     0x368 <_JIT_ENTRY+0x368>
// 29c: 85 c0                         testl   %eax, %eax
// 29e: 74 0e                         je      0x2ae <_JIT_ENTRY+0x2ae>
// 2a0: 89 03                         movl    %eax, (%rbx)
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 2ac: ff d0                         callq   *%rax
// 2ae: 49 89 1f                      movq    %rbx, (%r15)
// 2b1: 41 0f 10 45 10                movups  0x10(%r13), %xmm0
// 2b6: 41 0f 11 47 18                movups  %xmm0, 0x18(%r15)
// 2bb: 49 c7 47 28 00 00 00 00       movq    $0x0, 0x28(%r15)
// 2c3: 8b 43 48                      movl    0x48(%rbx), %eax
// 2c6: 41 89 47 40                   movl    %eax, 0x40(%r15)
// 2ca: 49 c7 47 30 00 00 00 00       movq    $0x0, 0x30(%r15)
// 2d2: 48 81 c3 c8 00 00 00          addq    $0xc8, %rbx
// 2d9: 49 89 5f 38                   movq    %rbx, 0x38(%r15)
// 2dd: 66 41 c7 47 44 00 00          movw    $0x0, 0x44(%r15)
// 2e4: 41 c6 47 46 00                movb    $0x0, 0x46(%r15)
// 2e9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002eb:  R_X86_64_64  _JIT_OPARG
// 2f3: 44 0f b7 e9                   movzwl  %cx, %r13d
// 2f7: 45 85 ed                      testl   %r13d, %r13d
// 2fa: 0f 9f c2                      setg    %dl
// 2fd: 44 39 e8                      cmpl    %r13d, %eax
// 300: 7e 53                         jle     0x355 <_JIT_ENTRY+0x355>
// 302: 0f b7 d9                      movzwl  %cx, %ebx
// 305: 49 8d 3c df                   leaq    (%r15,%rbx,8), %rdi
// 309: 48 83 c7 48                   addq    $0x48, %rdi
// 30d: 44 0f b7 e9                   movzwl  %cx, %r13d
// 311: 44 89 e9                      movl    %r13d, %ecx
// 314: f7 d1                         notl    %ecx
// 316: 01 c8                         addl    %ecx, %eax
// 318: 48 8d 14 c5 08 00 00 00       leaq    0x8(,%rax,8), %rdx
// 320: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000322:  R_X86_64_64  memset
// 32a: 31 f6                         xorl    %esi, %esi
// 32c: ff d0                         callq   *%rax
// 32e: 45 85 ed                      testl   %r13d, %r13d
// 331: 0f 8e f0 00 00 00             jle     0x427 <_JIT_ENTRY+0x427>
// 337: 48 c1 e3 03                   shlq    $0x3, %rbx
// 33b: 4c 89 f0                      movq    %r14, %rax
// 33e: 48 29 d8                      subq    %rbx, %rax
// 341: eb 25                         jmp     0x368 <_JIT_ENTRY+0x368>
// 343: f7 d0                         notl    %eax
// 345: 48 0d 00 00 ff ff             orq     $-0x10000, %rax         # imm = 0xFFFF0000
// 34b: f6 c2 01                      testb   $0x1, %dl
// 34e: 75 14                         jne     0x364 <_JIT_ENTRY+0x364>
// 350: e9 d2 00 00 00                jmp     0x427 <_JIT_ENTRY+0x427>
// 355: 0f b7 c1                      movzwl  %cx, %eax
// 358: 48 f7 d8                      negq    %rax
// 35b: f6 c2 01                      testb   $0x1, %dl
// 35e: 0f 84 c3 00 00 00             je      0x427 <_JIT_ENTRY+0x427>
// 364: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 368: 41 83 fd 02                   cmpl    $0x2, %r13d
// 36c: b9 01 00 00 00                movl    $0x1, %ecx
// 371: 41 0f 4d cd                   cmovgel %r13d, %ecx
// 375: 83 f9 08                      cmpl    $0x8, %ecx
// 378: 72 10                         jb      0x38a <_JIT_ENTRY+0x38a>
// 37a: 4c 89 fa                      movq    %r15, %rdx
// 37d: 48 29 c2                      subq    %rax, %rdx
// 380: 48 83 c2 48                   addq    $0x48, %rdx
// 384: 48 83 fa 20                   cmpq    $0x20, %rdx
// 388: 73 68                         jae     0x3f2 <_JIT_ENTRY+0x3f2>
// 38a: 31 d2                         xorl    %edx, %edx
// 38c: 48 89 d6                      movq    %rdx, %rsi
// 38f: 48 f7 d6                      notq    %rsi
// 392: 48 01 ce                      addq    %rcx, %rsi
// 395: 48 89 cf                      movq    %rcx, %rdi
// 398: 48 83 e7 03                   andq    $0x3, %rdi
// 39c: 74 13                         je      0x3b1 <_JIT_ENTRY+0x3b1>
// 39e: 66 90                         nop
// 3a0: 4c 8b 04 d0                   movq    (%rax,%rdx,8), %r8
// 3a4: 4d 89 44 d7 48                movq    %r8, 0x48(%r15,%rdx,8)
// 3a9: 48 ff c2                      incq    %rdx
// 3ac: 48 ff cf                      decq    %rdi
// 3af: 75 ef                         jne     0x3a0 <_JIT_ENTRY+0x3a0>
// 3b1: 48 83 fe 03                   cmpq    $0x3, %rsi
// 3b5: 72 70                         jb      0x427 <_JIT_ENTRY+0x427>
// 3b7: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 3c0: 48 8b 34 d0                   movq    (%rax,%rdx,8), %rsi
// 3c4: 49 89 74 d7 48                movq    %rsi, 0x48(%r15,%rdx,8)
// 3c9: 48 8b 74 d0 08                movq    0x8(%rax,%rdx,8), %rsi
// 3ce: 49 89 74 d7 50                movq    %rsi, 0x50(%r15,%rdx,8)
// 3d3: 48 8b 74 d0 10                movq    0x10(%rax,%rdx,8), %rsi
// 3d8: 49 89 74 d7 58                movq    %rsi, 0x58(%r15,%rdx,8)
// 3dd: 48 8b 74 d0 18                movq    0x18(%rax,%rdx,8), %rsi
// 3e2: 49 89 74 d7 60                movq    %rsi, 0x60(%r15,%rdx,8)
// 3e7: 48 83 c2 04                   addq    $0x4, %rdx
// 3eb: 48 39 d1                      cmpq    %rdx, %rcx
// 3ee: 75 d0                         jne     0x3c0 <_JIT_ENTRY+0x3c0>
// 3f0: eb 35                         jmp     0x427 <_JIT_ENTRY+0x427>
// 3f2: 89 ca                         movl    %ecx, %edx
// 3f4: 81 e2 fc ff ff 7f             andl    $0x7ffffffc, %edx       # imm = 0x7FFFFFFC
// 3fa: 31 f6                         xorl    %esi, %esi
// 3fc: 0f 1f 40 00                   nopl    (%rax)
// 400: 0f 10 04 f0                   movups  (%rax,%rsi,8), %xmm0
// 404: 0f 10 4c f0 10                movups  0x10(%rax,%rsi,8), %xmm1
// 409: 41 0f 11 44 f7 48             movups  %xmm0, 0x48(%r15,%rsi,8)
// 40f: 41 0f 11 4c f7 58             movups  %xmm1, 0x58(%r15,%rsi,8)
// 415: 48 83 c6 04                   addq    $0x4, %rsi
// 419: 48 39 f2                      cmpq    %rsi, %rdx
// 41c: 75 e2                         jne     0x400 <_JIT_ENTRY+0x400>
// 41e: 48 39 ca                      cmpq    %rcx, %rdx
// 421: 0f 85 65 ff ff ff             jne     0x38c <_JIT_ENTRY+0x38c>
// 427: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000429:  R_X86_64_64  _JIT_OPARG
// 431: 0f b7 c0                      movzwl  %ax, %eax
// 434: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 439: 29 c1                         subl    %eax, %ecx
// 43b: 48 63 c1                      movslq  %ecx, %rax
// 43e: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 442: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000444:  R_X86_64_64  _JIT_CONTINUE
// 44c: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 451: 4c 89 e6                      movq    %r12, %rsi
// 454: 48 89 ea                      movq    %rbp, %rdx
// 457: 48 83 c4 18                   addq    $0x18, %rsp
// 45b: 5b                            popq    %rbx
// 45c: 41 5c                         popq    %r12
// 45e: 41 5d                         popq    %r13
// 460: 41 5e                         popq    %r14
// 462: 41 5f                         popq    %r15
// 464: 5d                            popq    %rbp
// 465: ff e0                         jmpq    *%rax
// 467: 
static const unsigned char _STORE_SUBSCRplus_INIT_CALL_PY_EXACT_ARGS_code_body[1128] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf6, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x10, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x31, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x07, 0xff, 0xd3, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x46, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd3, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x4a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd3, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2d, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x3c, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x29, 0xc6, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x70, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x63, 0xd0, 0x48, 0x63, 0xc1, 0x4d, 0x8b, 0x2c, 0xc6, 0x49, 0x8b, 0x0c, 0xd6, 0x49, 0x8b, 0x5d, 0x30, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x4c, 0x8b, 0xbd, 0x00, 0x01, 0x00, 0x00, 0x48, 0x63, 0x43, 0x4c, 0x49, 0x8d, 0x04, 0xc7, 0x48, 0x89, 0x85, 0x00, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x6f, 0x10, 0x8b, 0x03, 0xff, 0xc0, 0x4d, 0x8d, 0x24, 0xd6, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xc2, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0x1f, 0x41, 0x0f, 0x10, 0x45, 0x10, 0x41, 0x0f, 0x11, 0x47, 0x18, 0x49, 0xc7, 0x47, 0x28, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x4b, 0x48, 0x41, 0x89, 0x4f, 0x40, 0x49, 0xc7, 0x47, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc3, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x5f, 0x38, 0x66, 0x41, 0xc7, 0x47, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x47, 0x46, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe8, 0x41, 0xff, 0xc5, 0x45, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x44, 0x39, 0xe9, 0x0f, 0x8e, 0xfc, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xeb, 0x41, 0xff, 0xc5, 0x4b, 0x8d, 0x3c, 0xef, 0x48, 0x83, 0xc7, 0x48, 0x44, 0x89, 0xe8, 0xf7, 0xd0, 0x01, 0xc1, 0x48, 0x8d, 0x14, 0xcd, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x45, 0x85, 0xed, 0x0f, 0x8e, 0xa1, 0x01, 0x00, 0x00, 0x0f, 0xb7, 0xcb, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xf8, 0xe9, 0xcc, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x0e, 0x89, 0x03, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0x1f, 0x41, 0x0f, 0x10, 0x45, 0x10, 0x41, 0x0f, 0x11, 0x47, 0x18, 0x49, 0xc7, 0x47, 0x28, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x43, 0x48, 0x41, 0x89, 0x47, 0x40, 0x49, 0xc7, 0x47, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc3, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x5f, 0x38, 0x66, 0x41, 0xc7, 0x47, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x47, 0x46, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe9, 0x45, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x44, 0x39, 0xe8, 0x7e, 0x53, 0x0f, 0xb7, 0xd9, 0x49, 0x8d, 0x3c, 0xdf, 0x48, 0x83, 0xc7, 0x48, 0x44, 0x0f, 0xb7, 0xe9, 0x44, 0x89, 0xe9, 0xf7, 0xd1, 0x01, 0xc8, 0x48, 0x8d, 0x14, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x45, 0x85, 0xed, 0x0f, 0x8e, 0xf0, 0x00, 0x00, 0x00, 0x48, 0xc1, 0xe3, 0x03, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xd8, 0xeb, 0x25, 0xf7, 0xd0, 0x48, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xc2, 0x01, 0x75, 0x14, 0xe9, 0xd2, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0xf7, 0xd8, 0xf6, 0xc2, 0x01, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xc6, 0x41, 0x83, 0xfd, 0x02, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x41, 0x0f, 0x4d, 0xcd, 0x83, 0xf9, 0x08, 0x72, 0x10, 0x4c, 0x89, 0xfa, 0x48, 0x29, 0xc2, 0x48, 0x83, 0xc2, 0x48, 0x48, 0x83, 0xfa, 0x20, 0x73, 0x68, 0x31, 0xd2, 0x48, 0x89, 0xd6, 0x48, 0xf7, 0xd6, 0x48, 0x01, 0xce, 0x48, 0x89, 0xcf, 0x48, 0x83, 0xe7, 0x03, 0x74, 0x13, 0x66, 0x90, 0x4c, 0x8b, 0x04, 0xd0, 0x4d, 0x89, 0x44, 0xd7, 0x48, 0x48, 0xff, 0xc2, 0x48, 0xff, 0xcf, 0x75, 0xef, 0x48, 0x83, 0xfe, 0x03, 0x72, 0x70, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x34, 0xd0, 0x49, 0x89, 0x74, 0xd7, 0x48, 0x48, 0x8b, 0x74, 0xd0, 0x08, 0x49, 0x89, 0x74, 0xd7, 0x50, 0x48, 0x8b, 0x74, 0xd0, 0x10, 0x49, 0x89, 0x74, 0xd7, 0x58, 0x48, 0x8b, 0x74, 0xd0, 0x18, 0x49, 0x89, 0x74, 0xd7, 0x60, 0x48, 0x83, 0xc2, 0x04, 0x48, 0x39, 0xd1, 0x75, 0xd0, 0xeb, 0x35, 0x89, 0xca, 0x81, 0xe2, 0xfc, 0xff, 0xff, 0x7f, 0x31, 0xf6, 0x0f, 0x1f, 0x40, 0x00, 0x0f, 0x10, 0x04, 0xf0, 0x0f, 0x10, 0x4c, 0xf0, 0x10, 0x41, 0x0f, 0x11, 0x44, 0xf7, 0x48, 0x41, 0x0f, 0x11, 0x4c, 0xf7, 0x58, 0x48, 0x83, 0xc6, 0x04, 0x48, 0x39, 0xf2, 0x75, 0xe2, 0x48, 0x39, 0xca, 0x0f, 0x85, 0x65, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_INIT_CALL_PY_EXACT_ARGS_code_holes[23] = {
    {0x29, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x322, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x429, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x444, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_INIT_CALL_PY_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_INIT_CALL_PY_EXACT_ARGS_data_holes[1];

// _STORE_SUBSCRplus_INSERT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_INSERT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 4c 8b 7b f8                   movq    -0x8(%rbx), %r15
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _JIT_OPARG
// 18f: 0f b7 d0                      movzwl  %ax, %edx
// 192: f7 d0                         notl    %eax
// 194: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 199: 4c 63 e0                      movslq  %eax, %r12
// 19c: 4a 8d 3c e3                   leaq    (%rbx,%r12,8), %rdi
// 1a0: 48 c1 e2 03                   shlq    $0x3, %rdx
// 1a4: 48 89 de                      movq    %rbx, %rsi
// 1a7: 48 29 d6                      subq    %rdx, %rsi
// 1aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ac:  R_X86_64_64  memmove
// 1b4: ff d0                         callq   *%rax
// 1b6: 4e 89 3c e3                   movq    %r15, (%rbx,%r12,8)
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _JIT_CONTINUE
// 1c4: 4c 89 f7                      movq    %r14, %rdi
// 1c7: 48 89 de                      movq    %rbx, %rsi
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 48 83 c4 08                   addq    $0x8, %rsp
// 1d2: 5b                            popq    %rbx
// 1d3: 41 5c                         popq    %r12
// 1d5: 41 5d                         popq    %r13
// 1d7: 41 5e                         popq    %r14
// 1d9: 41 5f                         popq    %r15
// 1db: 5d                            popq    %rbp
// 1dc: ff e0                         jmpq    *%rax
// 1de: 
static const unsigned char _STORE_SUBSCRplus_INSERT_code_body[479] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x4c, 0x8b, 0x7b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe0, 0x4a, 0x8d, 0x3c, 0xe3, 0x48, 0xc1, 0xe2, 0x03, 0x48, 0x89, 0xde, 0x48, 0x29, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4e, 0x89, 0x3c, 0xe3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_INSERT_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &memmove, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_INSERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_INSERT_data_holes[1];

// _STORE_SUBSCRplus_IS_NONE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_IS_NONE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 4c 8b 7b f8                   movq    -0x8(%rbx), %r15
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_NoneStruct
// 18f: 49 39 c7                      cmpq    %rax, %r15
// 192: 74 18                         je      0x1ac <_JIT_ENTRY+0x1ac>
// 194: 49 8b 07                      movq    (%r15), %rax
// 197: 48 85 c0                      testq   %rax, %rax
// 19a: 7e 1c                         jle     0x1b8 <_JIT_ENTRY+0x1b8>
// 19c: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000019e:  R_X86_64_64  _Py_FalseStruct
// 1a6: 85 c0                         testl   %eax, %eax
// 1a8: 79 3d                         jns     0x1e7 <_JIT_ENTRY+0x1e7>
// 1aa: eb 5b                         jmp     0x207 <_JIT_ENTRY+0x207>
// 1ac: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001ae:  R_X86_64_64  _Py_TrueStruct
// 1b6: eb 4f                         jmp     0x207 <_JIT_ENTRY+0x207>
// 1b8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ba:  R_X86_64_64  .rodata.str1.1
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_NegativeRefcount
// 1cc: be ef 07 00 00                movl    $0x7ef, %esi            # imm = 0x7EF
// 1d1: 4c 89 fa                      movq    %r15, %rdx
// 1d4: ff d0                         callq   *%rax
// 1d6: 49 8b 07                      movq    (%r15), %rax
// 1d9: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001db:  R_X86_64_64  _Py_FalseStruct
// 1e3: 85 c0                         testl   %eax, %eax
// 1e5: 78 20                         js      0x207 <_JIT_ENTRY+0x207>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f1: ff d0                         callq   *%rax
// 1f3: 49 ff 0f                      decq    (%r15)
// 1f6: 75 0f                         jne     0x207 <_JIT_ENTRY+0x207>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_Dealloc
// 202: 4c 89 ff                      movq    %r15, %rdi
// 205: ff d0                         callq   *%rax
// 207: 48 8b 14 24                   movq    (%rsp), %rdx
// 20b: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _JIT_CONTINUE
// 219: 4c 89 f7                      movq    %r14, %rdi
// 21c: 48 89 de                      movq    %rbx, %rsi
// 21f: 48 83 c4 08                   addq    $0x8, %rsp
// 223: 5b                            popq    %rbx
// 224: 41 5c                         popq    %r12
// 226: 41 5d                         popq    %r13
// 228: 41 5e                         popq    %r14
// 22a: 41 5f                         popq    %r15
// 22c: 5d                            popq    %rbp
// 22d: ff e0                         jmpq    *%rax
// 22f: 
static const unsigned char _STORE_SUBSCRplus_IS_NONE_code_body[560] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x4c, 0x8b, 0x7b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc7, 0x74, 0x18, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x1c, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x3d, 0xeb, 0x5b, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x4f, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xef, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_IS_NONE_code_holes[23] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_IS_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_IS_NONE_data_holes[1];

// _STORE_SUBSCRplus_IS_OP
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_IS_OP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 49 29 de                      subq    %rbx, %r14
// 14d: 49 83 c6 a0                   addq    $-0x60, %r14
// 151: 49 c1 ee 03                   shrq    $0x3, %r14
// 155: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 185: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 189: 49 8b 04 24                   movq    (%r12), %rax
// 18d: 48 85 c0                      testq   %rax, %rax
// 190: 7e 10                         jle     0x1a2 <_JIT_ENTRY+0x1a2>
// 192: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000194:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 19c: 85 c0                         testl   %eax, %eax
// 19e: 79 32                         jns     0x1d2 <_JIT_ENTRY+0x1d2>
// 1a0: eb 38                         jmp     0x1da <_JIT_ENTRY+0x1da>
// 1a2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a4:  R_X86_64_64  .rodata.str1.1
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _Py_NegativeRefcount
// 1b6: be 98 07 00 00                movl    $0x798, %esi            # imm = 0x798
// 1bb: 4c 89 e2                      movq    %r12, %rdx
// 1be: ff d0                         callq   *%rax
// 1c0: 49 8b 04 24                   movq    (%r12), %rax
// 1c4: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001c6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ce: 85 c0                         testl   %eax, %eax
// 1d0: 78 08                         js      0x1da <_JIT_ENTRY+0x1da>
// 1d2: ff d5                         callq   *%rbp
// 1d4: 49 ff 0c 24                   decq    (%r12)
// 1d8: 74 13                         je      0x1ed <_JIT_ENTRY+0x1ed>
// 1da: 49 8b 45 00                   movq    (%r13), %rax
// 1de: 48 85 c0                      testq   %rax, %rax
// 1e1: 7e 22                         jle     0x205 <_JIT_ENTRY+0x205>
// 1e3: 4d 8d 7e f8                   leaq    -0x8(%r14), %r15
// 1e7: 85 c0                         testl   %eax, %eax
// 1e9: 79 44                         jns     0x22f <_JIT_ENTRY+0x22f>
// 1eb: eb 59                         jmp     0x246 <_JIT_ENTRY+0x246>
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _Py_Dealloc
// 1f7: 4c 89 e7                      movq    %r12, %rdi
// 1fa: ff d0                         callq   *%rax
// 1fc: 49 8b 45 00                   movq    (%r13), %rax
// 200: 48 85 c0                      testq   %rax, %rax
// 203: 7f de                         jg      0x1e3 <_JIT_ENTRY+0x1e3>
// 205: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000207:  R_X86_64_64  .rodata.str1.1
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _Py_NegativeRefcount
// 219: be 99 07 00 00                movl    $0x799, %esi            # imm = 0x799
// 21e: 4c 89 ea                      movq    %r13, %rdx
// 221: ff d0                         callq   *%rax
// 223: 49 8b 45 00                   movq    (%r13), %rax
// 227: 4d 8d 7e f8                   leaq    -0x8(%r14), %r15
// 22b: 85 c0                         testl   %eax, %eax
// 22d: 78 17                         js      0x246 <_JIT_ENTRY+0x246>
// 22f: ff d5                         callq   *%rbp
// 231: 49 ff 4d 00                   decq    (%r13)
// 235: 75 0f                         jne     0x246 <_JIT_ENTRY+0x246>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _Py_Dealloc
// 241: 4c 89 ef                      movq    %r13, %rdi
// 244: ff d0                         callq   *%rax
// 246: 31 c0                         xorl    %eax, %eax
// 248: 4d 39 ec                      cmpq    %r13, %r12
// 24b: 0f 94 c0                      sete    %al
// 24e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000250:  R_X86_64_64  _JIT_OPARG
// 258: 66 39 c8                      cmpw    %cx, %ax
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_FalseStruct
// 265: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000267:  R_X86_64_64  _Py_TrueStruct
// 26f: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 273: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _JIT_CONTINUE
// 281: 48 89 df                      movq    %rbx, %rdi
// 284: 4c 89 fe                      movq    %r15, %rsi
// 287: 48 8b 14 24                   movq    (%rsp), %rdx
// 28b: 48 83 c4 08                   addq    $0x8, %rsp
// 28f: 5b                            popq    %rbx
// 290: 41 5c                         popq    %r12
// 292: 41 5d                         popq    %r13
// 294: 41 5e                         popq    %r14
// 296: 41 5f                         popq    %r15
// 298: 5d                            popq    %rbp
// 299: ff e0                         jmpq    *%rax
// 29b: 
static const unsigned char _STORE_SUBSCRplus_IS_OP_code_body[668] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xc9, 0x4d, 0x8b, 0x66, 0xf0, 0x4d, 0x8b, 0x6e, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x10, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x32, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x13, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xf8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x59, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4d, 0x8d, 0x7e, 0xf8, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x31, 0xc0, 0x4d, 0x39, 0xec, 0x0f, 0x94, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x39, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_IS_OP_code_holes[26] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_IS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_IS_OP_data_holes[1];

// _STORE_SUBSCRplus_ITER_CHECK_LIST
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_ITER_CHECK_LIST.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1b                         je      0x15d <_JIT_ENTRY+0x15d>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2a                         je      0x174 <_JIT_ENTRY+0x174>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: eb 53                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 ed                         testl   %ebp, %ebp
// 16e: 49 0f 44 df                   cmoveq  %r15, %rbx
// 172: 75 d6                         jne     0x14a <_JIT_ENTRY+0x14a>
// 174: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 178: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017a:  R_X86_64_64  PyListIter_Type
// 182: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 186: 74 37                         je      0x1bf <_JIT_ENTRY+0x1bf>
// 188: 4c 29 f3                      subq    %r14, %rbx
// 18b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 18f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 193: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 197: 49 8b 06                      movq    (%r14), %rax
// 19a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019c:  R_X86_64_64  _JIT_TARGET
// 1a4: 89 c9                         movl    %ecx, %ecx
// 1a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b0: 48 83 c4 08                   addq    $0x8, %rsp
// 1b4: 5b                            popq    %rbx
// 1b5: 41 5c                         popq    %r12
// 1b7: 41 5d                         popq    %r13
// 1b9: 41 5e                         popq    %r14
// 1bb: 41 5f                         popq    %r15
// 1bd: 5d                            popq    %rbp
// 1be: c3                            retq
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _JIT_CONTINUE
// 1c9: 4c 89 f7                      movq    %r14, %rdi
// 1cc: 48 89 de                      movq    %rbx, %rsi
// 1cf: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d3: 48 83 c4 08                   addq    $0x8, %rsp
// 1d7: 5b                            popq    %rbx
// 1d8: 41 5c                         popq    %r12
// 1da: 41 5d                         popq    %r13
// 1dc: 41 5e                         popq    %r14
// 1de: 41 5f                         popq    %r15
// 1e0: 5d                            popq    %rbp
// 1e1: ff e0                         jmpq    *%rax
// 1e3: 
static const unsigned char _STORE_SUBSCRplus_ITER_CHECK_LIST_code_body[484] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2a, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x53, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd6, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_ITER_CHECK_LIST_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyListIter_Type, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_ITER_CHECK_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_ITER_CHECK_LIST_data_holes[1];

// _STORE_SUBSCRplus_ITER_CHECK_RANGE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_ITER_CHECK_RANGE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1b                         je      0x15d <_JIT_ENTRY+0x15d>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2a                         je      0x174 <_JIT_ENTRY+0x174>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: eb 53                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 ed                         testl   %ebp, %ebp
// 16e: 49 0f 44 df                   cmoveq  %r15, %rbx
// 172: 75 d6                         jne     0x14a <_JIT_ENTRY+0x14a>
// 174: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 178: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017a:  R_X86_64_64  PyRangeIter_Type
// 182: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 186: 74 37                         je      0x1bf <_JIT_ENTRY+0x1bf>
// 188: 4c 29 f3                      subq    %r14, %rbx
// 18b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 18f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 193: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 197: 49 8b 06                      movq    (%r14), %rax
// 19a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019c:  R_X86_64_64  _JIT_TARGET
// 1a4: 89 c9                         movl    %ecx, %ecx
// 1a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b0: 48 83 c4 08                   addq    $0x8, %rsp
// 1b4: 5b                            popq    %rbx
// 1b5: 41 5c                         popq    %r12
// 1b7: 41 5d                         popq    %r13
// 1b9: 41 5e                         popq    %r14
// 1bb: 41 5f                         popq    %r15
// 1bd: 5d                            popq    %rbp
// 1be: c3                            retq
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _JIT_CONTINUE
// 1c9: 4c 89 f7                      movq    %r14, %rdi
// 1cc: 48 89 de                      movq    %rbx, %rsi
// 1cf: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d3: 48 83 c4 08                   addq    $0x8, %rsp
// 1d7: 5b                            popq    %rbx
// 1d8: 41 5c                         popq    %r12
// 1da: 41 5d                         popq    %r13
// 1dc: 41 5e                         popq    %r14
// 1de: 41 5f                         popq    %r15
// 1e0: 5d                            popq    %rbp
// 1e1: ff e0                         jmpq    *%rax
// 1e3: 
static const unsigned char _STORE_SUBSCRplus_ITER_CHECK_RANGE_code_body[484] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2a, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x53, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd6, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_ITER_CHECK_RANGE_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyRangeIter_Type, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_ITER_CHECK_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_ITER_CHECK_RANGE_data_holes[1];

// _STORE_SUBSCRplus_ITER_CHECK_TUPLE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_ITER_CHECK_TUPLE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1b                         je      0x15d <_JIT_ENTRY+0x15d>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2a                         je      0x174 <_JIT_ENTRY+0x174>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: eb 53                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 ed                         testl   %ebp, %ebp
// 16e: 49 0f 44 df                   cmoveq  %r15, %rbx
// 172: 75 d6                         jne     0x14a <_JIT_ENTRY+0x14a>
// 174: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 178: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017a:  R_X86_64_64  PyTupleIter_Type
// 182: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 186: 74 37                         je      0x1bf <_JIT_ENTRY+0x1bf>
// 188: 4c 29 f3                      subq    %r14, %rbx
// 18b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 18f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 193: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 197: 49 8b 06                      movq    (%r14), %rax
// 19a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019c:  R_X86_64_64  _JIT_TARGET
// 1a4: 89 c9                         movl    %ecx, %ecx
// 1a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b0: 48 83 c4 08                   addq    $0x8, %rsp
// 1b4: 5b                            popq    %rbx
// 1b5: 41 5c                         popq    %r12
// 1b7: 41 5d                         popq    %r13
// 1b9: 41 5e                         popq    %r14
// 1bb: 41 5f                         popq    %r15
// 1bd: 5d                            popq    %rbp
// 1be: c3                            retq
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _JIT_CONTINUE
// 1c9: 4c 89 f7                      movq    %r14, %rdi
// 1cc: 48 89 de                      movq    %rbx, %rsi
// 1cf: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d3: 48 83 c4 08                   addq    $0x8, %rsp
// 1d7: 5b                            popq    %rbx
// 1d8: 41 5c                         popq    %r12
// 1da: 41 5d                         popq    %r13
// 1dc: 41 5e                         popq    %r14
// 1de: 41 5f                         popq    %r15
// 1e0: 5d                            popq    %rbp
// 1e1: ff e0                         jmpq    *%rax
// 1e3: 
static const unsigned char _STORE_SUBSCRplus_ITER_CHECK_TUPLE_code_body[484] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2a, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x53, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd6, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_ITER_CHECK_TUPLE_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTupleIter_Type, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_ITER_CHECK_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_ITER_CHECK_TUPLE_data_holes[1];

// _STORE_SUBSCRplus_ITER_NEXT_LIST
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_ITER_NEXT_LIST.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 185: 48 8b 48 10                   movq    0x10(%rax), %rcx
// 189: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 18d: 48 8b 52 18                   movq    0x18(%rdx), %rdx
// 191: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// 195: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 199: 4c 8b 3c ca                   movq    (%rdx,%rcx,8), %r15
// 19d: 41 8b 07                      movl    (%r15), %eax
// 1a0: ff c0                         incl    %eax
// 1a2: 74 0f                         je      0x1b3 <_JIT_ENTRY+0x1b3>
// 1a4: 41 89 07                      movl    %eax, (%r15)
// 1a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a9:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1b1: ff d0                         callq   *%rax
// 1b3: 4c 89 3b                      movq    %r15, (%rbx)
// 1b6: 48 83 c3 08                   addq    $0x8, %rbx
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _JIT_CONTINUE
// 1c4: 4c 89 f7                      movq    %r14, %rdi
// 1c7: 48 89 de                      movq    %rbx, %rsi
// 1ca: 48 8b 14 24                   movq    (%rsp), %rdx
// 1ce: 48 83 c4 08                   addq    $0x8, %rsp
// 1d2: 5b                            popq    %rbx
// 1d3: 41 5c                         popq    %r12
// 1d5: 41 5d                         popq    %r13
// 1d7: 41 5e                         popq    %r14
// 1d9: 41 5f                         popq    %r15
// 1db: 5d                            popq    %rbp
// 1dc: ff e0                         jmpq    *%rax
// 1de: 
static const unsigned char _STORE_SUBSCRplus_ITER_NEXT_LIST_code_body[479] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x8b, 0x3c, 0xca, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_ITER_NEXT_LIST_code_holes[16] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_ITER_NEXT_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_ITER_NEXT_LIST_data_holes[1];

// _STORE_SUBSCRplus_ITER_NEXT_RANGE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_ITER_NEXT_RANGE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c6 e8                   addq    $-0x18, %r14
// 14e: 4d 89 f7                      movq    %r14, %r15
// 151: 49 29 df                      subq    %rbx, %r15
// 154: 49 83 c7 b8                   addq    $-0x48, %r15
// 158: 49 c1 ef 03                   shrq    $0x3, %r15
// 15c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 49 8b 46 f8                   movq    -0x8(%r14), %rax
// 18c: 48 8b 78 10                   movq    0x10(%rax), %rdi
// 190: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 194: 48 01 f9                      addq    %rdi, %rcx
// 197: 48 89 48 10                   movq    %rcx, 0x10(%rax)
// 19b: 48 ff 48 20                   decq    0x20(%rax)
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  PyLong_FromLong
// 1a9: ff d0                         callq   *%rax
// 1ab: 48 85 c0                      testq   %rax, %rax
// 1ae: 74 a1                         je      0x151 <_JIT_ENTRY+0x151>
// 1b0: 49 89 06                      movq    %rax, (%r14)
// 1b3: 49 83 c6 08                   addq    $0x8, %r14
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _JIT_CONTINUE
// 1c1: 48 89 df                      movq    %rbx, %rdi
// 1c4: 4c 89 f6                      movq    %r14, %rsi
// 1c7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1cb: 48 83 c4 08                   addq    $0x8, %rsp
// 1cf: 5b                            popq    %rbx
// 1d0: 41 5c                         popq    %r12
// 1d2: 41 5d                         popq    %r13
// 1d4: 41 5e                         popq    %r14
// 1d6: 41 5f                         popq    %r15
// 1d8: 5d                            popq    %rbp
// 1d9: ff e0                         jmpq    *%rax
// 1db: 
static const unsigned char _STORE_SUBSCRplus_ITER_NEXT_RANGE_code_body[476] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x3e, 0x49, 0x83, 0xc6, 0xe8, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xc2, 0x49, 0x8b, 0x46, 0xf8, 0x48, 0x8b, 0x78, 0x10, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x01, 0xf9, 0x48, 0x89, 0x48, 0x10, 0x48, 0xff, 0x48, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xa1, 0x49, 0x89, 0x06, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_ITER_NEXT_RANGE_code_holes[16] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromLong, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_ITER_NEXT_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_ITER_NEXT_RANGE_data_holes[1];

// _STORE_SUBSCRplus_ITER_NEXT_TUPLE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_ITER_NEXT_TUPLE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 185: 48 8b 48 10                   movq    0x10(%rax), %rcx
// 189: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 18d: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// 191: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// 195: 4c 8b 7c ca 18                movq    0x18(%rdx,%rcx,8), %r15
// 19a: 41 8b 07                      movl    (%r15), %eax
// 19d: ff c0                         incl    %eax
// 19f: 74 0f                         je      0x1b0 <_JIT_ENTRY+0x1b0>
// 1a1: 41 89 07                      movl    %eax, (%r15)
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ae: ff d0                         callq   *%rax
// 1b0: 4c 89 3b                      movq    %r15, (%rbx)
// 1b3: 48 83 c3 08                   addq    $0x8, %rbx
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _JIT_CONTINUE
// 1c1: 4c 89 f7                      movq    %r14, %rdi
// 1c4: 48 89 de                      movq    %rbx, %rsi
// 1c7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1cb: 48 83 c4 08                   addq    $0x8, %rsp
// 1cf: 5b                            popq    %rbx
// 1d0: 41 5c                         popq    %r12
// 1d2: 41 5d                         popq    %r13
// 1d4: 41 5e                         popq    %r14
// 1d6: 41 5f                         popq    %r15
// 1d8: 5d                            popq    %rbp
// 1d9: ff e0                         jmpq    *%rax
// 1db: 
static const unsigned char _STORE_SUBSCRplus_ITER_NEXT_TUPLE_code_body[476] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x8b, 0x7c, 0xca, 0x18, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_ITER_NEXT_TUPLE_code_holes[16] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_ITER_NEXT_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_ITER_NEXT_TUPLE_data_holes[1];

// _STORE_SUBSCRplus_JUMP_TO_TOP
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_JUMP_TO_TOP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c6 e8                   addq    $-0x18, %r14
// 14e: 4d 89 f7                      movq    %r14, %r15
// 151: 49 29 df                      subq    %rbx, %r15
// 154: 49 83 c7 b8                   addq    $-0x48, %r15
// 158: 49 c1 ef 03                   shrq    $0x3, %r15
// 15c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 4c 8b 24 24                   movq    (%rsp), %r12
// 18c: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 191: 48 8b 00                      movq    (%rax), %rax
// 194: 84 c0                         testb   %al, %al
// 196: 74 13                         je      0x1ab <_JIT_ENTRY+0x1ab>
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  _Py_HandlePending
// 1a2: 4c 89 e7                      movq    %r12, %rdi
// 1a5: ff d0                         callq   *%rax
// 1a7: 85 c0                         testl   %eax, %eax
// 1a9: 75 a6                         jne     0x151 <_JIT_ENTRY+0x151>
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _JIT_CONTINUE
// 1b5: 48 89 df                      movq    %rbx, %rdi
// 1b8: 4c 89 f6                      movq    %r14, %rsi
// 1bb: 4c 89 e2                      movq    %r12, %rdx
// 1be: 48 83 c4 08                   addq    $0x8, %rsp
// 1c2: 5b                            popq    %rbx
// 1c3: 41 5c                         popq    %r12
// 1c5: 41 5d                         popq    %r13
// 1c7: 41 5e                         popq    %r14
// 1c9: 41 5f                         popq    %r15
// 1cb: 5d                            popq    %rbp
// 1cc: ff e0                         jmpq    *%rax
// 1ce: 
static const unsigned char _STORE_SUBSCRplus_JUMP_TO_TOP_code_body[463] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x3e, 0x49, 0x83, 0xc6, 0xe8, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xc2, 0x4c, 0x8b, 0x24, 0x24, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0xa6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_JUMP_TO_TOP_code_holes[16] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_JUMP_TO_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_JUMP_TO_TOP_data_holes[1];

// _STORE_SUBSCRplus_LIST_APPEND
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LIST_APPEND.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c6 f0                   addq    $-0x10, %r14
// 14e: 4d 89 f7                      movq    %r14, %r15
// 151: 49 29 df                      subq    %rbx, %r15
// 154: 49 83 c7 b0                   addq    $-0x50, %r15
// 158: 49 c1 ef 03                   shrq    $0x3, %r15
// 15c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 49 8b 76 f8                   movq    -0x8(%r14), %rsi
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: f7 d0                         notl    %eax
// 198: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 19d: 48 98                         cltq
// 19f: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// 1a3: 48 8b 47 10                   movq    0x10(%rdi), %rax
// 1a7: 48 39 47 20                   cmpq    %rax, 0x20(%rdi)
// 1ab: 7e 11                         jle     0x1be <_JIT_ENTRY+0x1be>
// 1ad: 48 8b 4f 18                   movq    0x18(%rdi), %rcx
// 1b1: 48 89 34 c1                   movq    %rsi, (%rcx,%rax,8)
// 1b5: 48 ff c0                      incq    %rax
// 1b8: 48 89 47 10                   movq    %rax, 0x10(%rdi)
// 1bc: eb 10                         jmp     0x1ce <_JIT_ENTRY+0x1ce>
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _PyList_AppendTakeRefListResize
// 1c8: ff d0                         callq   *%rax
// 1ca: 85 c0                         testl   %eax, %eax
// 1cc: 78 83                         js      0x151 <_JIT_ENTRY+0x151>
// 1ce: 49 83 c6 f8                   addq    $-0x8, %r14
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _JIT_CONTINUE
// 1dc: 48 89 df                      movq    %rbx, %rdi
// 1df: 4c 89 f6                      movq    %r14, %rsi
// 1e2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e6: 48 83 c4 08                   addq    $0x8, %rsp
// 1ea: 5b                            popq    %rbx
// 1eb: 41 5c                         popq    %r12
// 1ed: 41 5d                         popq    %r13
// 1ef: 41 5e                         popq    %r14
// 1f1: 41 5f                         popq    %r15
// 1f3: 5d                            popq    %rbp
// 1f4: ff e0                         jmpq    *%rax
// 1f6: 
static const unsigned char _STORE_SUBSCRplus_LIST_APPEND_code_body[503] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x3e, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb0, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xc2, 0x49, 0x8b, 0x76, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x39, 0x47, 0x20, 0x7e, 0x11, 0x48, 0x8b, 0x4f, 0x18, 0x48, 0x89, 0x34, 0xc1, 0x48, 0xff, 0xc0, 0x48, 0x89, 0x47, 0x10, 0xeb, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x83, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_LIST_APPEND_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_AppendTakeRefListResize, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LIST_APPEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LIST_APPEND_data_holes[1];

// _STORE_SUBSCRplus_LIST_EXTEND
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LIST_EXTEND.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f7                      movq    %rsi, %r15
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 f2                      movq    %r14, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 06                      movq    (%r14), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 f2                      movq    %r14, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0e                      decq    (%r14)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 f7                      movq    %r14, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c7 f0                   addq    $-0x10, %r15
// 14e: 4d 89 fe                      movq    %r15, %r14
// 151: 49 29 de                      subq    %rbx, %r14
// 154: 49 83 c6 b0                   addq    $-0x50, %r14
// 158: 49 c1 ee 03                   shrq    $0x3, %r14
// 15c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: f7 d0                         notl    %eax
// 198: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 19d: 48 98                         cltq
// 19f: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _PyList_Extend
// 1ad: 4c 89 e6                      movq    %r12, %rsi
// 1b0: ff d0                         callq   *%rax
// 1b2: 48 85 c0                      testq   %rax, %rax
// 1b5: 74 7b                         je      0x232 <_JIT_ENTRY+0x232>
// 1b7: 49 8b 04 24                   movq    (%r12), %rax
// 1bb: 48 85 c0                      testq   %rax, %rax
// 1be: 4c 8b 34 24                   movq    (%rsp), %r14
// 1c2: 7f 22                         jg      0x1e6 <_JIT_ENTRY+0x1e6>
// 1c4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c6:  R_X86_64_64  .rodata.str1.1
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _Py_NegativeRefcount
// 1d8: be 47 05 00 00                movl    $0x547, %esi            # imm = 0x547
// 1dd: 4c 89 e2                      movq    %r12, %rdx
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 8b 04 24                   movq    (%r12), %rax
// 1e6: 49 83 c7 f8                   addq    $-0x8, %r15
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 21                         js      0x20f <_JIT_ENTRY+0x20f>
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f8: ff d0                         callq   *%rax
// 1fa: 49 ff 0c 24                   decq    (%r12)
// 1fe: 75 0f                         jne     0x20f <_JIT_ENTRY+0x20f>
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _Py_Dealloc
// 20a: 4c 89 e7                      movq    %r12, %rdi
// 20d: ff d0                         callq   *%rax
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _JIT_CONTINUE
// 219: 48 89 df                      movq    %rbx, %rdi
// 21c: 4c 89 fe                      movq    %r15, %rsi
// 21f: 4c 89 f2                      movq    %r14, %rdx
// 222: 48 83 c4 08                   addq    $0x8, %rsp
// 226: 5b                            popq    %rbx
// 227: 41 5c                         popq    %r12
// 229: 41 5d                         popq    %r13
// 22b: 41 5e                         popq    %r14
// 22d: 41 5f                         popq    %r15
// 22f: 5d                            popq    %rbp
// 230: ff e0                         jmpq    *%rax
// 232: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000234:  R_X86_64_64  PyExc_TypeError
// 23c: 49 8b 37                      movq    (%r15), %rsi
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _PyErr_ExceptionMatches
// 249: 4c 8b 2c 24                   movq    (%rsp), %r13
// 24d: 4c 89 ef                      movq    %r13, %rdi
// 250: ff d0                         callq   *%rax
// 252: 85 c0                         testl   %eax, %eax
// 254: 74 59                         je      0x2af <_JIT_ENTRY+0x2af>
// 256: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 25b: 48 83 b8 d8 00 00 00 00       cmpq    $0x0, 0xd8(%rax)
// 263: 75 4a                         jne     0x2af <_JIT_ENTRY+0x2af>
// 265: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000267:  R_X86_64_64  PySequence_Check
// 26f: 4c 89 e7                      movq    %r12, %rdi
// 272: ff d0                         callq   *%rax
// 274: 85 c0                         testl   %eax, %eax
// 276: 75 37                         jne     0x2af <_JIT_ENTRY+0x2af>
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _PyErr_Clear
// 282: 4c 89 ef                      movq    %r13, %rdi
// 285: ff d0                         callq   *%rax
// 287: 49 8b 37                      movq    (%r15), %rsi
// 28a: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 28f: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 293: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000295:  R_X86_64_64  .rodata.str1.1+0x39
// 29d: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000029f:  R_X86_64_64  _PyErr_Format
// 2a7: 4c 89 ef                      movq    %r13, %rdi
// 2aa: 31 c0                         xorl    %eax, %eax
// 2ac: 41 ff d0                      callq   *%r8
// 2af: 49 8b 04 24                   movq    (%r12), %rax
// 2b3: 48 85 c0                      testq   %rax, %rax
// 2b6: 7f 22                         jg      0x2da <_JIT_ENTRY+0x2da>
// 2b8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002ba:  R_X86_64_64  .rodata.str1.1
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_NegativeRefcount
// 2cc: be 43 05 00 00                movl    $0x543, %esi            # imm = 0x543
// 2d1: 4c 89 e2                      movq    %r12, %rdx
// 2d4: ff d0                         callq   *%rax
// 2d6: 49 8b 04 24                   movq    (%r12), %rax
// 2da: 85 c0                         testl   %eax, %eax
// 2dc: 0f 88 6f fe ff ff             js      0x151 <_JIT_ENTRY+0x151>
// 2e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ec: ff d0                         callq   *%rax
// 2ee: 49 ff 0c 24                   decq    (%r12)
// 2f2: 0f 85 59 fe ff ff             jne     0x151 <_JIT_ENTRY+0x151>
// 2f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fa:  R_X86_64_64  _Py_Dealloc
// 302: 4c 89 e7                      movq    %r12, %rdi
// 305: ff d0                         callq   *%rax
// 307: e9 45 fe ff ff                jmp     0x151 <_JIT_ENTRY+0x151>
// 30c: 
static const unsigned char _STORE_SUBSCRplus_LIST_EXTEND_code_body[781] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xf0, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xc2, 0x4d, 0x8b, 0x67, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x7b, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x34, 0x24, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x47, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x83, 0xc7, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x37, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x2c, 0x24, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x59, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x83, 0xb8, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x75, 0x4a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x37, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x37, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x6f, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x59, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x45, 0xfe, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_LIST_EXTEND_code_holes[31] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_Extend, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x267, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Check, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x29f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00Value after * must be an iterable, not %.200s\x00'
// 67: 00
static const unsigned char _STORE_SUBSCRplus_LIST_EXTEND_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x2a, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LIST_EXTEND_data_holes[1];

// _STORE_SUBSCRplus_LOAD_ASSERTION_ERROR
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_ASSERTION_ERROR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  PyExc_AssertionError
// 18b: 4c 8b 38                      movq    (%rax), %r15
// 18e: 41 8b 07                      movl    (%r15), %eax
// 191: ff c0                         incl    %eax
// 193: 74 0f                         je      0x1a4 <_JIT_ENTRY+0x1a4>
// 195: 41 89 07                      movl    %eax, (%r15)
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1a2: ff d0                         callq   *%rax
// 1a4: 4c 89 3b                      movq    %r15, (%rbx)
// 1a7: 48 83 c3 08                   addq    $0x8, %rbx
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _JIT_CONTINUE
// 1b5: 4c 89 f7                      movq    %r14, %rdi
// 1b8: 48 89 de                      movq    %rbx, %rsi
// 1bb: 48 8b 14 24                   movq    (%rsp), %rdx
// 1bf: 48 83 c4 08                   addq    $0x8, %rsp
// 1c3: 5b                            popq    %rbx
// 1c4: 41 5c                         popq    %r12
// 1c6: 41 5d                         popq    %r13
// 1c8: 41 5e                         popq    %r14
// 1ca: 41 5f                         popq    %r15
// 1cc: 5d                            popq    %rbp
// 1cd: ff e0                         jmpq    *%rax
// 1cf: 
static const unsigned char _STORE_SUBSCRplus_LOAD_ASSERTION_ERROR_code_body[464] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x38, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_LOAD_ASSERTION_ERROR_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AssertionError, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_ASSERTION_ERROR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_ASSERTION_ERROR_data_holes[1];

// _STORE_SUBSCRplus_LOAD_ATTR
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_ATTR.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 f2                      movq    %r14, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 06                      movq    (%r14), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 f2                      movq    %r14, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 06                      movq    (%r14), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0e                      decq    (%r14)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 f7                      movq    %r14, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 2f                         je      0x175 <_JIT_ENTRY+0x175>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 14c: 74 3e                         je      0x18c <_JIT_ENTRY+0x18c>
// 14e: 49 83 c7 f0                   addq    $-0x10, %r15
// 152: 4d 89 fe                      movq    %r15, %r14
// 155: 49 29 de                      subq    %rbx, %r14
// 158: 49 83 c6 b0                   addq    $-0x50, %r14
// 15c: 49 c1 ee 03                   shrq    $0x3, %r14
// 160: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 164: 31 c0                         xorl    %eax, %eax
// 166: 48 83 c4 18                   addq    $0x18, %rsp
// 16a: 5b                            popq    %rbx
// 16b: 41 5c                         popq    %r12
// 16d: 41 5d                         popq    %r13
// 16f: 41 5e                         popq    %r14
// 171: 41 5f                         popq    %r15
// 173: 5d                            popq    %rbp
// 174: c3                            retq
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 e7                      movq    %r12, %rdi
// 182: ff d0                         callq   *%rax
// 184: 85 ed                         testl   %ebp, %ebp
// 186: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 18a: 75 c2                         jne     0x14e <_JIT_ENTRY+0x14e>
// 18c: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 190: 48 8b 03                      movq    (%rbx), %rax
// 193: 48 8b 40 20                   movq    0x20(%rax), %rax
// 197: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000199:  R_X86_64_64  _JIT_OPARG
// 1a1: 89 ca                         movl    %ecx, %edx
// 1a3: 81 e2 fe ff 00 00             andl    $0xfffe, %edx           # imm = 0xFFFE
// 1a9: 48 8b 74 90 18                movq    0x18(%rax,%rdx,4), %rsi
// 1ae: f6 c1 01                      testb   $0x1, %cl
// 1b1: 74 41                         je      0x1f4 <_JIT_ENTRY+0x1f4>
// 1b3: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _PyObject_GetMethod
// 1c6: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 85 c0                         testl   %eax, %eax
// 1d2: 74 58                         je      0x22c <_JIT_ENTRY+0x22c>
// 1d4: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1d9: 49 89 47 f8                   movq    %rax, -0x8(%r15)
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _JIT_OPARG
// 1e7: a8 01                         testb   $0x1, %al
// 1e9: 0f 85 b0 00 00 00             jne     0x29f <_JIT_ENTRY+0x29f>
// 1ef: e9 ae 00 00 00                jmp     0x2a2 <_JIT_ENTRY+0x2a2>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  PyObject_GetAttr
// 1fe: 4c 89 e7                      movq    %r12, %rdi
// 201: ff d0                         callq   *%rax
// 203: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 208: 49 8b 04 24                   movq    (%r12), %rax
// 20c: 48 85 c0                      testq   %rax, %rax
// 20f: 7f 46                         jg      0x257 <_JIT_ENTRY+0x257>
// 211: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000213:  R_X86_64_64  .rodata.str1.1
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _Py_NegativeRefcount
// 225: be 4b 06 00 00                movl    $0x64b, %esi            # imm = 0x64B
// 22a: eb 22                         jmp     0x24e <_JIT_ENTRY+0x24e>
// 22c: 49 8b 04 24                   movq    (%r12), %rax
// 230: 48 85 c0                      testq   %rax, %rax
// 233: 7f 22                         jg      0x257 <_JIT_ENTRY+0x257>
// 235: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000237:  R_X86_64_64  .rodata.str1.1
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _Py_NegativeRefcount
// 249: be 43 06 00 00                movl    $0x643, %esi            # imm = 0x643
// 24e: 4c 89 e2                      movq    %r12, %rdx
// 251: ff d0                         callq   *%rax
// 253: 49 8b 04 24                   movq    (%r12), %rax
// 257: 85 c0                         testl   %eax, %eax
// 259: 78 21                         js      0x27c <_JIT_ENTRY+0x27c>
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 265: ff d0                         callq   *%rax
// 267: 49 ff 0c 24                   decq    (%r12)
// 26b: 75 0f                         jne     0x27c <_JIT_ENTRY+0x27c>
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_Dealloc
// 277: 4c 89 e7                      movq    %r12, %rdi
// 27a: ff d0                         callq   *%rax
// 27c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 281: 48 85 c0                      testq   %rax, %rax
// 284: 0f 84 cb fe ff ff             je      0x155 <_JIT_ENTRY+0x155>
// 28a: 45 31 e4                      xorl    %r12d, %r12d
// 28d: 49 89 47 f8                   movq    %rax, -0x8(%r15)
// 291: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000293:  R_X86_64_64  _JIT_OPARG
// 29b: a8 01                         testb   $0x1, %al
// 29d: 74 03                         je      0x2a2 <_JIT_ENTRY+0x2a2>
// 29f: 4d 89 27                      movq    %r12, (%r15)
// 2a2: 83 e0 01                      andl    $0x1, %eax
// 2a5: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 2a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ab:  R_X86_64_64  _JIT_CONTINUE
// 2b3: 48 89 df                      movq    %rbx, %rdi
// 2b6: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2bb: 48 83 c4 18                   addq    $0x18, %rsp
// 2bf: 5b                            popq    %rbx
// 2c0: 41 5c                         popq    %r12
// 2c2: 41 5d                         popq    %r13
// 2c4: 41 5e                         popq    %r14
// 2c6: 41 5f                         popq    %r15
// 2c8: 5d                            popq    %rbp
// 2c9: ff e0                         jmpq    *%rax
// 2cb: 
static const unsigned char _STORE_SUBSCRplus_LOAD_ATTR_code_body[716] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xf0, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xc2, 0x4d, 0x8b, 0x67, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xca, 0x81, 0xe2, 0xfe, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x90, 0x18, 0xf6, 0xc1, 0x01, 0x74, 0x41, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x58, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x89, 0x47, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0xb0, 0x00, 0x00, 0x00, 0xe9, 0xae, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x46, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4b, 0x06, 0x00, 0x00, 0xeb, 0x22, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xcb, 0xfe, 0xff, 0xff, 0x45, 0x31, 0xe4, 0x49, 0x89, 0x47, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x03, 0x4d, 0x89, 0x27, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_LOAD_ATTR_code_holes[26] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_GetMethod, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetAttr, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x293, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2ab, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_ATTR_data_holes[1];

// _STORE_SUBSCRplus_LOAD_ATTR_CLASS
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_ATTR_CLASS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 49 29 de                      subq    %rbx, %r14
// 14d: 49 83 c6 a0                   addq    $-0x60, %r14
// 151: 49 c1 ee 03                   shrq    $0x3, %r14
// 155: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 185: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000187:  R_X86_64_64  _JIT_OPERAND
// 18f: 41 8b 07                      movl    (%r15), %eax
// 192: ff c0                         incl    %eax
// 194: 75 0f                         jne     0x1a5 <_JIT_ENTRY+0x1a5>
// 196: 49 8b 04 24                   movq    (%r12), %rax
// 19a: 48 85 c0                      testq   %rax, %rax
// 19d: 7e 1e                         jle     0x1bd <_JIT_ENTRY+0x1bd>
// 19f: 85 c0                         testl   %eax, %eax
// 1a1: 79 40                         jns     0x1e3 <_JIT_ENTRY+0x1e3>
// 1a3: eb 5f                         jmp     0x204 <_JIT_ENTRY+0x204>
// 1a5: 41 89 07                      movl    %eax, (%r15)
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1b2: ff d0                         callq   *%rax
// 1b4: 49 8b 04 24                   movq    (%r12), %rax
// 1b8: 48 85 c0                      testq   %rax, %rax
// 1bb: 7f e2                         jg      0x19f <_JIT_ENTRY+0x19f>
// 1bd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bf:  R_X86_64_64  .rodata.str1.1
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _Py_NegativeRefcount
// 1d1: be f3 06 00 00                movl    $0x6f3, %esi            # imm = 0x6F3
// 1d6: 4c 89 e2                      movq    %r12, %rdx
// 1d9: ff d0                         callq   *%rax
// 1db: 49 8b 04 24                   movq    (%r12), %rax
// 1df: 85 c0                         testl   %eax, %eax
// 1e1: 78 21                         js      0x204 <_JIT_ENTRY+0x204>
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ed: ff d0                         callq   *%rax
// 1ef: 49 ff 0c 24                   decq    (%r12)
// 1f3: 75 0f                         jne     0x204 <_JIT_ENTRY+0x204>
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _Py_Dealloc
// 1ff: 4c 89 e7                      movq    %r12, %rdi
// 202: ff d0                         callq   *%rax
// 204: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _JIT_OPARG
// 212: a8 01                         testb   $0x1, %al
// 214: 74 07                         je      0x21d <_JIT_ENTRY+0x21d>
// 216: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 21d: 83 e0 01                      andl    $0x1, %eax
// 220: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _JIT_CONTINUE
// 22e: 48 89 df                      movq    %rbx, %rdi
// 231: 48 8b 14 24                   movq    (%rsp), %rdx
// 235: 48 83 c4 08                   addq    $0x8, %rsp
// 239: 5b                            popq    %rbx
// 23a: 41 5c                         popq    %r12
// 23c: 41 5d                         popq    %r13
// 23e: 41 5e                         popq    %r14
// 240: 41 5f                         popq    %r15
// 242: 5d                            popq    %rbp
// 243: ff e0                         jmpq    *%rax
// 245: 
static const unsigned char _STORE_SUBSCRplus_LOAD_ATTR_CLASS_code_body[582] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xc9, 0x4d, 0x8b, 0x66, 0xf8, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_LOAD_ATTR_CLASS_code_holes[22] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_ATTR_CLASS_data_holes[1];

// _STORE_SUBSCRplus_LOAD_ATTR_INSTANCE_VALUE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_ATTR_INSTANCE_VALUE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 49 29 de                      subq    %rbx, %r14
// 14d: 49 83 c6 a0                   addq    $-0x60, %r14
// 151: 49 c1 ee 03                   shrq    $0x3, %r14
// 155: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 185: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 18a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018c:  R_X86_64_64  _JIT_OPERAND
// 194: 0f b7 c9                      movzwl  %cx, %ecx
// 197: 4c 8b 7c c8 01                movq    0x1(%rax,%rcx,8), %r15
// 19c: 4d 85 ff                      testq   %r15, %r15
// 19f: 74 19                         je      0x1ba <_JIT_ENTRY+0x1ba>
// 1a1: 41 8b 07                      movl    (%r15), %eax
// 1a4: ff c0                         incl    %eax
// 1a6: 75 3f                         jne     0x1e7 <_JIT_ENTRY+0x1e7>
// 1a8: 49 8b 04 24                   movq    (%r12), %rax
// 1ac: 48 85 c0                      testq   %rax, %rax
// 1af: 7e 4e                         jle     0x1ff <_JIT_ENTRY+0x1ff>
// 1b1: 85 c0                         testl   %eax, %eax
// 1b3: 79 70                         jns     0x225 <_JIT_ENTRY+0x225>
// 1b5: e9 8c 00 00 00                jmp     0x246 <_JIT_ENTRY+0x246>
// 1ba: 49 29 dd                      subq    %rbx, %r13
// 1bd: 49 83 c5 b8                   addq    $-0x48, %r13
// 1c1: 49 c1 ed 03                   shrq    $0x3, %r13
// 1c5: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 1c9: 48 8b 03                      movq    (%rbx), %rax
// 1cc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ce:  R_X86_64_64  _JIT_TARGET
// 1d6: 89 c9                         movl    %ecx, %ecx
// 1d8: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1dc: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1e2: e9 74 ff ff ff                jmp     0x15b <_JIT_ENTRY+0x15b>
// 1e7: 41 89 07                      movl    %eax, (%r15)
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1f4: ff d0                         callq   *%rax
// 1f6: 49 8b 04 24                   movq    (%r12), %rax
// 1fa: 48 85 c0                      testq   %rax, %rax
// 1fd: 7f b2                         jg      0x1b1 <_JIT_ENTRY+0x1b1>
// 1ff: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000201:  R_X86_64_64  .rodata.str1.1
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _Py_NegativeRefcount
// 213: be 75 06 00 00                movl    $0x675, %esi            # imm = 0x675
// 218: 4c 89 e2                      movq    %r12, %rdx
// 21b: ff d0                         callq   *%rax
// 21d: 49 8b 04 24                   movq    (%r12), %rax
// 221: 85 c0                         testl   %eax, %eax
// 223: 78 21                         js      0x246 <_JIT_ENTRY+0x246>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22f: ff d0                         callq   *%rax
// 231: 49 ff 0c 24                   decq    (%r12)
// 235: 75 0f                         jne     0x246 <_JIT_ENTRY+0x246>
// 237: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000239:  R_X86_64_64  _Py_Dealloc
// 241: 4c 89 e7                      movq    %r12, %rdi
// 244: ff d0                         callq   *%rax
// 246: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _JIT_OPARG
// 254: a8 01                         testb   $0x1, %al
// 256: 74 07                         je      0x25f <_JIT_ENTRY+0x25f>
// 258: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 25f: 83 e0 01                      andl    $0x1, %eax
// 262: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 266: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000268:  R_X86_64_64  _JIT_CONTINUE
// 270: 48 89 df                      movq    %rbx, %rdi
// 273: 48 8b 14 24                   movq    (%rsp), %rdx
// 277: 48 83 c4 08                   addq    $0x8, %rsp
// 27b: 5b                            popq    %rbx
// 27c: 41 5c                         popq    %r12
// 27e: 41 5d                         popq    %r13
// 280: 41 5e                         popq    %r14
// 282: 41 5f                         popq    %r15
// 284: 5d                            popq    %rbp
// 285: ff e0                         jmpq    *%rax
// 287: 
static const unsigned char _STORE_SUBSCRplus_LOAD_ATTR_INSTANCE_VALUE_code_body[648] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x6e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x75, 0xc9, 0x4d, 0x8b, 0x66, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x7c, 0xc8, 0x01, 0x4d, 0x85, 0xff, 0x74, 0x19, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x8c, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x74, 0xff, 0xff, 0xff, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_LOAD_ATTR_INSTANCE_VALUE_code_holes[23] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x268, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_ATTR_INSTANCE_VALUE_data_holes[1];

// _STORE_SUBSCRplus_LOAD_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_ATTR_METHOD_LAZY_DICT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 4c 8b 7b f8                   movq    -0x8(%rbx), %r15
// 185: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000187:  R_X86_64_64  _JIT_OPERAND
// 18f: 41 8b 04 24                   movl    (%r12), %eax
// 193: ff c0                         incl    %eax
// 195: 74 10                         je      0x1a7 <_JIT_ENTRY+0x1a7>
// 197: 41 89 04 24                   movl    %eax, (%r12)
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1a5: ff d0                         callq   *%rax
// 1a7: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 1ab: 4c 89 3b                      movq    %r15, (%rbx)
// 1ae: 48 83 c3 08                   addq    $0x8, %rbx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _JIT_CONTINUE
// 1bc: 4c 89 f7                      movq    %r14, %rdi
// 1bf: 48 89 de                      movq    %rbx, %rsi
// 1c2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1c6: 48 83 c4 08                   addq    $0x8, %rsp
// 1ca: 5b                            popq    %rbx
// 1cb: 41 5c                         popq    %r12
// 1cd: 41 5d                         popq    %r13
// 1cf: 41 5e                         popq    %r14
// 1d1: 41 5f                         popq    %r15
// 1d3: 5d                            popq    %rbp
// 1d4: ff e0                         jmpq    *%rax
// 1d6: 
static const unsigned char _STORE_SUBSCRplus_LOAD_ATTR_METHOD_LAZY_DICT_code_body[471] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x4c, 0x8b, 0x7b, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x63, 0xf8, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_LOAD_ATTR_METHOD_LAZY_DICT_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_ATTR_METHOD_LAZY_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _STORE_SUBSCRplus_LOAD_ATTR_METHOD_NO_DICT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_ATTR_METHOD_NO_DICT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 4c 8b 7b f8                   movq    -0x8(%rbx), %r15
// 185: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000187:  R_X86_64_64  _JIT_OPERAND
// 18f: 41 8b 04 24                   movl    (%r12), %eax
// 193: ff c0                         incl    %eax
// 195: 74 10                         je      0x1a7 <_JIT_ENTRY+0x1a7>
// 197: 41 89 04 24                   movl    %eax, (%r12)
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1a5: ff d0                         callq   *%rax
// 1a7: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 1ab: 4c 89 3b                      movq    %r15, (%rbx)
// 1ae: 48 83 c3 08                   addq    $0x8, %rbx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _JIT_CONTINUE
// 1bc: 4c 89 f7                      movq    %r14, %rdi
// 1bf: 48 89 de                      movq    %rbx, %rsi
// 1c2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1c6: 48 83 c4 08                   addq    $0x8, %rsp
// 1ca: 5b                            popq    %rbx
// 1cb: 41 5c                         popq    %r12
// 1cd: 41 5d                         popq    %r13
// 1cf: 41 5e                         popq    %r14
// 1d1: 41 5f                         popq    %r15
// 1d3: 5d                            popq    %rbp
// 1d4: ff e0                         jmpq    *%rax
// 1d6: 
static const unsigned char _STORE_SUBSCRplus_LOAD_ATTR_METHOD_NO_DICT_code_body[471] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x4c, 0x8b, 0x7b, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x63, 0xf8, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_LOAD_ATTR_METHOD_NO_DICT_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_ATTR_METHOD_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_ATTR_METHOD_NO_DICT_data_holes[1];

// _STORE_SUBSCRplus_LOAD_ATTR_METHOD_WITH_VALUES
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_ATTR_METHOD_WITH_VALUES.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 4c 8b 7b f8                   movq    -0x8(%rbx), %r15
// 185: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000187:  R_X86_64_64  _JIT_OPERAND
// 18f: 41 8b 04 24                   movl    (%r12), %eax
// 193: ff c0                         incl    %eax
// 195: 74 10                         je      0x1a7 <_JIT_ENTRY+0x1a7>
// 197: 41 89 04 24                   movl    %eax, (%r12)
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1a5: ff d0                         callq   *%rax
// 1a7: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 1ab: 4c 89 3b                      movq    %r15, (%rbx)
// 1ae: 48 83 c3 08                   addq    $0x8, %rbx
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _JIT_CONTINUE
// 1bc: 4c 89 f7                      movq    %r14, %rdi
// 1bf: 48 89 de                      movq    %rbx, %rsi
// 1c2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1c6: 48 83 c4 08                   addq    $0x8, %rsp
// 1ca: 5b                            popq    %rbx
// 1cb: 41 5c                         popq    %r12
// 1cd: 41 5d                         popq    %r13
// 1cf: 41 5e                         popq    %r14
// 1d1: 41 5f                         popq    %r15
// 1d3: 5d                            popq    %rbp
// 1d4: ff e0                         jmpq    *%rax
// 1d6: 
static const unsigned char _STORE_SUBSCRplus_LOAD_ATTR_METHOD_WITH_VALUES_code_body[471] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x4c, 0x8b, 0x7b, 0xf8, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x63, 0xf8, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_LOAD_ATTR_METHOD_WITH_VALUES_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_ATTR_METHOD_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_ATTR_METHOD_WITH_VALUES_data_holes[1];

// _STORE_SUBSCRplus_LOAD_ATTR_MODULE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_ATTR_MODULE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 49 29 de                      subq    %rbx, %r14
// 14d: 49 83 c6 a0                   addq    $-0x60, %r14
// 151: 49 c1 ee 03                   shrq    $0x3, %r14
// 155: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 185: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 18a: 48 8b 40 20                   movq    0x20(%rax), %rax
// 18e: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 192: ba 01 00 00 00                movl    $0x1, %edx
// 197: 48 d3 e2                      shlq    %cl, %rdx
// 19a: 48 01 c2                      addq    %rax, %rdx
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _JIT_OPERAND
// 1a7: 0f b7 c0                      movzwl  %ax, %eax
// 1aa: 48 c1 e0 04                   shlq    $0x4, %rax
// 1ae: 4c 8b 7c 10 28                movq    0x28(%rax,%rdx), %r15
// 1b3: 4d 85 ff                      testq   %r15, %r15
// 1b6: 74 19                         je      0x1d1 <_JIT_ENTRY+0x1d1>
// 1b8: 41 8b 07                      movl    (%r15), %eax
// 1bb: ff c0                         incl    %eax
// 1bd: 75 3f                         jne     0x1fe <_JIT_ENTRY+0x1fe>
// 1bf: 49 8b 04 24                   movq    (%r12), %rax
// 1c3: 48 85 c0                      testq   %rax, %rax
// 1c6: 7e 4e                         jle     0x216 <_JIT_ENTRY+0x216>
// 1c8: 85 c0                         testl   %eax, %eax
// 1ca: 79 70                         jns     0x23c <_JIT_ENTRY+0x23c>
// 1cc: e9 8c 00 00 00                jmp     0x25d <_JIT_ENTRY+0x25d>
// 1d1: 49 29 dd                      subq    %rbx, %r13
// 1d4: 49 83 c5 b8                   addq    $-0x48, %r13
// 1d8: 49 c1 ed 03                   shrq    $0x3, %r13
// 1dc: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 1e0: 48 8b 03                      movq    (%rbx), %rax
// 1e3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e5:  R_X86_64_64  _JIT_TARGET
// 1ed: 89 c9                         movl    %ecx, %ecx
// 1ef: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1f3: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1f9: e9 5d ff ff ff                jmp     0x15b <_JIT_ENTRY+0x15b>
// 1fe: 41 89 07                      movl    %eax, (%r15)
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 20b: ff d0                         callq   *%rax
// 20d: 49 8b 04 24                   movq    (%r12), %rax
// 211: 48 85 c0                      testq   %rax, %rax
// 214: 7f b2                         jg      0x1c8 <_JIT_ENTRY+0x1c8>
// 216: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000218:  R_X86_64_64  .rodata.str1.1
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_NegativeRefcount
// 22a: be 97 06 00 00                movl    $0x697, %esi            # imm = 0x697
// 22f: 4c 89 e2                      movq    %r12, %rdx
// 232: ff d0                         callq   *%rax
// 234: 49 8b 04 24                   movq    (%r12), %rax
// 238: 85 c0                         testl   %eax, %eax
// 23a: 78 21                         js      0x25d <_JIT_ENTRY+0x25d>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 246: ff d0                         callq   *%rax
// 248: 49 ff 0c 24                   decq    (%r12)
// 24c: 75 0f                         jne     0x25d <_JIT_ENTRY+0x25d>
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _Py_Dealloc
// 258: 4c 89 e7                      movq    %r12, %rdi
// 25b: ff d0                         callq   *%rax
// 25d: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// 261: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000263:  R_X86_64_64  _JIT_OPARG
// 26b: a8 01                         testb   $0x1, %al
// 26d: 74 07                         je      0x276 <_JIT_ENTRY+0x276>
// 26f: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 276: 83 e0 01                      andl    $0x1, %eax
// 279: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _JIT_CONTINUE
// 287: 48 89 df                      movq    %rbx, %rdi
// 28a: 48 8b 14 24                   movq    (%rsp), %rdx
// 28e: 48 83 c4 08                   addq    $0x8, %rsp
// 292: 5b                            popq    %rbx
// 293: 41 5c                         popq    %r12
// 295: 41 5d                         popq    %r13
// 297: 41 5e                         popq    %r14
// 299: 41 5f                         popq    %r15
// 29b: 5d                            popq    %rbp
// 29c: ff e0                         jmpq    *%rax
// 29e: 
static const unsigned char _STORE_SUBSCRplus_LOAD_ATTR_MODULE_code_body[671] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x6e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x75, 0xc9, 0x4d, 0x8b, 0x66, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x7c, 0x10, 0x28, 0x4d, 0x85, 0xff, 0x74, 0x19, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x8c, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x5d, 0xff, 0xff, 0xff, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_LOAD_ATTR_MODULE_code_holes[23] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x263, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_ATTR_MODULE_data_holes[1];

// _STORE_SUBSCRplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 4c 8b 7b f8                   movq    -0x8(%rbx), %r15
// 185: 49 8b 07                      movq    (%r15), %rax
// 188: 48 85 c0                      testq   %rax, %rax
// 18b: 7e 06                         jle     0x193 <_JIT_ENTRY+0x193>
// 18d: 85 c0                         testl   %eax, %eax
// 18f: 79 27                         jns     0x1b8 <_JIT_ENTRY+0x1b8>
// 191: eb 45                         jmp     0x1d8 <_JIT_ENTRY+0x1d8>
// 193: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000195:  R_X86_64_64  .rodata.str1.1
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_NegativeRefcount
// 1a7: be d9 09 00 00                movl    $0x9d9, %esi            # imm = 0x9D9
// 1ac: 4c 89 fa                      movq    %r15, %rdx
// 1af: ff d0                         callq   *%rax
// 1b1: 49 8b 07                      movq    (%r15), %rax
// 1b4: 85 c0                         testl   %eax, %eax
// 1b6: 78 20                         js      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c2: ff d0                         callq   *%rax
// 1c4: 49 ff 0f                      decq    (%r15)
// 1c7: 75 0f                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_Dealloc
// 1d3: 4c 89 ff                      movq    %r15, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000001da:  R_X86_64_64  _JIT_OPERAND
// 1e2: 41 8b 07                      movl    (%r15), %eax
// 1e5: ff c0                         incl    %eax
// 1e7: 74 0f                         je      0x1f8 <_JIT_ENTRY+0x1f8>
// 1e9: 41 89 07                      movl    %eax, (%r15)
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1f6: ff d0                         callq   *%rax
// 1f8: 4c 89 7b f8                   movq    %r15, -0x8(%rbx)
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _JIT_CONTINUE
// 206: 4c 89 f7                      movq    %r14, %rdi
// 209: 48 89 de                      movq    %rbx, %rsi
// 20c: 48 8b 14 24                   movq    (%rsp), %rdx
// 210: 48 83 c4 08                   addq    $0x8, %rsp
// 214: 5b                            popq    %rbx
// 215: 41 5c                         popq    %r12
// 217: 41 5d                         popq    %r13
// 219: 41 5e                         popq    %r14
// 21b: 41 5f                         popq    %r15
// 21d: 5d                            popq    %rbp
// 21e: ff e0                         jmpq    *%rax
// 220: 
static const unsigned char _STORE_SUBSCRplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_body[545] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x4c, 0x8b, 0x7b, 0xf8, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x45, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd9, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x7b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_holes[21] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_holes[1];

// _STORE_SUBSCRplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 4c 8b 7b f8                   movq    -0x8(%rbx), %r15
// 185: 49 8b 07                      movq    (%r15), %rax
// 188: 48 85 c0                      testq   %rax, %rax
// 18b: 7e 06                         jle     0x193 <_JIT_ENTRY+0x193>
// 18d: 85 c0                         testl   %eax, %eax
// 18f: 79 27                         jns     0x1b8 <_JIT_ENTRY+0x1b8>
// 191: eb 45                         jmp     0x1d8 <_JIT_ENTRY+0x1d8>
// 193: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000195:  R_X86_64_64  .rodata.str1.1
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_NegativeRefcount
// 1a7: be c8 09 00 00                movl    $0x9c8, %esi            # imm = 0x9C8
// 1ac: 4c 89 fa                      movq    %r15, %rdx
// 1af: ff d0                         callq   *%rax
// 1b1: 49 8b 07                      movq    (%r15), %rax
// 1b4: 85 c0                         testl   %eax, %eax
// 1b6: 78 20                         js      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c2: ff d0                         callq   *%rax
// 1c4: 49 ff 0f                      decq    (%r15)
// 1c7: 75 0f                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_Dealloc
// 1d3: 4c 89 ff                      movq    %r15, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000001da:  R_X86_64_64  _JIT_OPERAND
// 1e2: 41 8b 07                      movl    (%r15), %eax
// 1e5: ff c0                         incl    %eax
// 1e7: 74 0f                         je      0x1f8 <_JIT_ENTRY+0x1f8>
// 1e9: 41 89 07                      movl    %eax, (%r15)
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1f6: ff d0                         callq   *%rax
// 1f8: 4c 89 7b f8                   movq    %r15, -0x8(%rbx)
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _JIT_CONTINUE
// 206: 4c 89 f7                      movq    %r14, %rdi
// 209: 48 89 de                      movq    %rbx, %rsi
// 20c: 48 8b 14 24                   movq    (%rsp), %rdx
// 210: 48 83 c4 08                   addq    $0x8, %rsp
// 214: 5b                            popq    %rbx
// 215: 41 5c                         popq    %r12
// 217: 41 5d                         popq    %r13
// 219: 41 5e                         popq    %r14
// 21b: 41 5f                         popq    %r15
// 21d: 5d                            popq    %rbp
// 21e: ff e0                         jmpq    *%rax
// 220: 
static const unsigned char _STORE_SUBSCRplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_body[545] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x4c, 0x8b, 0x7b, 0xf8, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x45, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc8, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x7b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_holes[21] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_holes[1];

// _STORE_SUBSCRplus_LOAD_ATTR_SLOT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_ATTR_SLOT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 49 29 de                      subq    %rbx, %r14
// 14d: 49 83 c6 a0                   addq    $-0x60, %r14
// 151: 49 c1 ee 03                   shrq    $0x3, %r14
// 155: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _JIT_OPERAND
// 18f: 0f b7 c0                      movzwl  %ax, %eax
// 192: 4d 8b 3c 04                   movq    (%r12,%rax), %r15
// 196: 4d 85 ff                      testq   %r15, %r15
// 199: 74 19                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 19b: 41 8b 07                      movl    (%r15), %eax
// 19e: ff c0                         incl    %eax
// 1a0: 75 3f                         jne     0x1e1 <_JIT_ENTRY+0x1e1>
// 1a2: 49 8b 04 24                   movq    (%r12), %rax
// 1a6: 48 85 c0                      testq   %rax, %rax
// 1a9: 7e 4e                         jle     0x1f9 <_JIT_ENTRY+0x1f9>
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 79 70                         jns     0x21f <_JIT_ENTRY+0x21f>
// 1af: e9 8c 00 00 00                jmp     0x240 <_JIT_ENTRY+0x240>
// 1b4: 49 29 dd                      subq    %rbx, %r13
// 1b7: 49 83 c5 b8                   addq    $-0x48, %r13
// 1bb: 49 c1 ed 03                   shrq    $0x3, %r13
// 1bf: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 1c3: 48 8b 03                      movq    (%rbx), %rax
// 1c6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c8:  R_X86_64_64  _JIT_TARGET
// 1d0: 89 c9                         movl    %ecx, %ecx
// 1d2: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1d6: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1dc: e9 7a ff ff ff                jmp     0x15b <_JIT_ENTRY+0x15b>
// 1e1: 41 89 07                      movl    %eax, (%r15)
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ee: ff d0                         callq   *%rax
// 1f0: 49 8b 04 24                   movq    (%r12), %rax
// 1f4: 48 85 c0                      testq   %rax, %rax
// 1f7: 7f b2                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 1f9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fb:  R_X86_64_64  .rodata.str1.1
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _Py_NegativeRefcount
// 20d: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 212: 4c 89 e2                      movq    %r12, %rdx
// 215: ff d0                         callq   *%rax
// 217: 49 8b 04 24                   movq    (%r12), %rax
// 21b: 85 c0                         testl   %eax, %eax
// 21d: 78 21                         js      0x240 <_JIT_ENTRY+0x240>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 229: ff d0                         callq   *%rax
// 22b: 49 ff 0c 24                   decq    (%r12)
// 22f: 75 0f                         jne     0x240 <_JIT_ENTRY+0x240>
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _Py_Dealloc
// 23b: 4c 89 e7                      movq    %r12, %rdi
// 23e: ff d0                         callq   *%rax
// 240: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _JIT_OPARG
// 24e: a8 01                         testb   $0x1, %al
// 250: 74 07                         je      0x259 <_JIT_ENTRY+0x259>
// 252: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 259: 83 e0 01                      andl    $0x1, %eax
// 25c: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _JIT_CONTINUE
// 26a: 48 89 df                      movq    %rbx, %rdi
// 26d: 48 8b 14 24                   movq    (%rsp), %rdx
// 271: 48 83 c4 08                   addq    $0x8, %rsp
// 275: 5b                            popq    %rbx
// 276: 41 5c                         popq    %r12
// 278: 41 5d                         popq    %r13
// 27a: 41 5e                         popq    %r14
// 27c: 41 5f                         popq    %r15
// 27e: 5d                            popq    %rbp
// 27f: ff e0                         jmpq    *%rax
// 281: 
static const unsigned char _STORE_SUBSCRplus_LOAD_ATTR_SLOT_code_body[642] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x6e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x75, 0xc9, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x3c, 0x04, 0x4d, 0x85, 0xff, 0x74, 0x19, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x3f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4e, 0x85, 0xc0, 0x79, 0x70, 0xe9, 0x8c, 0x00, 0x00, 0x00, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x7a, 0xff, 0xff, 0xff, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xb2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_LOAD_ATTR_SLOT_code_holes[23] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_ATTR_SLOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_ATTR_SLOT_data_holes[1];

// _STORE_SUBSCRplus_LOAD_ATTR_WITH_HINT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_ATTR_WITH_HINT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1e                         je      0x160 <_JIT_ENTRY+0x160>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 2d                         je      0x177 <_JIT_ENTRY+0x177>
// 14a: 49 29 de                      subq    %rbx, %r14
// 14d: 49 83 c6 a0                   addq    $-0x60, %r14
// 151: 49 c1 ee 03                   shrq    $0x3, %r14
// 155: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: e9 d4 00 00 00                jmp     0x234 <_JIT_ENTRY+0x234>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_Dealloc
// 16a: 4c 89 e7                      movq    %r12, %rdi
// 16d: ff d0                         callq   *%rax
// 16f: 85 ed                         testl   %ebp, %ebp
// 171: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 175: 75 d3                         jne     0x14a <_JIT_ENTRY+0x14a>
// 177: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 17b: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 180: 48 8b 50 20                   movq    0x20(%rax), %rdx
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _JIT_OPERAND
// 18e: 0f b7 c8                      movzwl  %ax, %ecx
// 191: 48 8b 03                      movq    (%rbx), %rax
// 194: 48 39 4a 18                   cmpq    %rcx, 0x18(%rdx)
// 198: 76 75                         jbe     0x20f <_JIT_ENTRY+0x20f>
// 19a: 48 8b 70 20                   movq    0x20(%rax), %rsi
// 19e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a0:  R_X86_64_64  _JIT_OPARG
// 1a8: 81 e7 fe ff 00 00             andl    $0xfffe, %edi           # imm = 0xFFFE
// 1ae: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
// 1b2: 41 b8 01 00 00 00             movl    $0x1, %r8d
// 1b8: 49 d3 e0                      shlq    %cl, %r8
// 1bb: 48 8b 74 be 18                movq    0x18(%rsi,%rdi,4), %rsi
// 1c0: 80 7a 0a 00                   cmpb    $0x0, 0xa(%rdx)
// 1c4: 4a 8d 4c 02 20                leaq    0x20(%rdx,%r8), %rcx
// 1c9: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001cb:  R_X86_64_64  _JIT_OPERAND
// 1d3: 0f b7 d2                      movzwl  %dx, %edx
// 1d6: 74 2c                         je      0x204 <_JIT_ENTRY+0x204>
// 1d8: 48 c1 e2 04                   shlq    $0x4, %rdx
// 1dc: 48 39 34 11                   cmpq    %rsi, (%rcx,%rdx)
// 1e0: 75 2d                         jne     0x20f <_JIT_ENTRY+0x20f>
// 1e2: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001e4:  R_X86_64_64  _JIT_OPERAND
// 1ec: 0f b7 d2                      movzwl  %dx, %edx
// 1ef: 48 c1 e2 04                   shlq    $0x4, %rdx
// 1f3: 48 01 d1                      addq    %rdx, %rcx
// 1f6: 48 83 c1 08                   addq    $0x8, %rcx
// 1fa: 4c 8b 39                      movq    (%rcx), %r15
// 1fd: 4d 85 ff                      testq   %r15, %r15
// 200: 75 62                         jne     0x264 <_JIT_ENTRY+0x264>
// 202: eb 0b                         jmp     0x20f <_JIT_ENTRY+0x20f>
// 204: 48 8d 14 52                   leaq    (%rdx,%rdx,2), %rdx
// 208: 48 39 74 d1 08                cmpq    %rsi, 0x8(%rcx,%rdx,8)
// 20d: 74 34                         je      0x243 <_JIT_ENTRY+0x243>
// 20f: 49 29 de                      subq    %rbx, %r14
// 212: 49 83 c6 b8                   addq    $-0x48, %r14
// 216: 49 c1 ee 03                   shrq    $0x3, %r14
// 21a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 21e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000220:  R_X86_64_64  _JIT_TARGET
// 228: 89 c9                         movl    %ecx, %ecx
// 22a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 22e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 234: 48 83 c4 08                   addq    $0x8, %rsp
// 238: 5b                            popq    %rbx
// 239: 41 5c                         popq    %r12
// 23b: 41 5d                         popq    %r13
// 23d: 41 5e                         popq    %r14
// 23f: 41 5f                         popq    %r15
// 241: 5d                            popq    %rbp
// 242: c3                            retq
// 243: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000245:  R_X86_64_64  _JIT_OPERAND
// 24d: 0f b7 d2                      movzwl  %dx, %edx
// 250: 48 8d 14 52                   leaq    (%rdx,%rdx,2), %rdx
// 254: 48 8d 0c d1                   leaq    (%rcx,%rdx,8), %rcx
// 258: 48 83 c1 10                   addq    $0x10, %rcx
// 25c: 4c 8b 39                      movq    (%rcx), %r15
// 25f: 4d 85 ff                      testq   %r15, %r15
// 262: 74 ab                         je      0x20f <_JIT_ENTRY+0x20f>
// 264: 41 8b 07                      movl    (%r15), %eax
// 267: ff c0                         incl    %eax
// 269: 75 0f                         jne     0x27a <_JIT_ENTRY+0x27a>
// 26b: 49 8b 04 24                   movq    (%r12), %rax
// 26f: 48 85 c0                      testq   %rax, %rax
// 272: 7e 1e                         jle     0x292 <_JIT_ENTRY+0x292>
// 274: 85 c0                         testl   %eax, %eax
// 276: 79 40                         jns     0x2b8 <_JIT_ENTRY+0x2b8>
// 278: eb 5f                         jmp     0x2d9 <_JIT_ENTRY+0x2d9>
// 27a: 41 89 07                      movl    %eax, (%r15)
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 287: ff d0                         callq   *%rax
// 289: 49 8b 04 24                   movq    (%r12), %rax
// 28d: 48 85 c0                      testq   %rax, %rax
// 290: 7f e2                         jg      0x274 <_JIT_ENTRY+0x274>
// 292: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000294:  R_X86_64_64  .rodata.str1.1
// 29c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029e:  R_X86_64_64  _Py_NegativeRefcount
// 2a6: be c3 06 00 00                movl    $0x6c3, %esi            # imm = 0x6C3
// 2ab: 4c 89 e2                      movq    %r12, %rdx
// 2ae: ff d0                         callq   *%rax
// 2b0: 49 8b 04 24                   movq    (%r12), %rax
// 2b4: 85 c0                         testl   %eax, %eax
// 2b6: 78 21                         js      0x2d9 <_JIT_ENTRY+0x2d9>
// 2b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c2: ff d0                         callq   *%rax
// 2c4: 49 ff 0c 24                   decq    (%r12)
// 2c8: 75 0f                         jne     0x2d9 <_JIT_ENTRY+0x2d9>
// 2ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cc:  R_X86_64_64  _Py_Dealloc
// 2d4: 4c 89 e7                      movq    %r12, %rdi
// 2d7: ff d0                         callq   *%rax
// 2d9: 4d 89 7e f8                   movq    %r15, -0x8(%r14)
// 2dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002df:  R_X86_64_64  _JIT_OPARG
// 2e7: a8 01                         testb   $0x1, %al
// 2e9: 74 07                         je      0x2f2 <_JIT_ENTRY+0x2f2>
// 2eb: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 2f2: 83 e0 01                      andl    $0x1, %eax
// 2f5: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fb:  R_X86_64_64  _JIT_CONTINUE
// 303: 48 89 df                      movq    %rbx, %rdi
// 306: 48 8b 14 24                   movq    (%rsp), %rdx
// 30a: 48 83 c4 08                   addq    $0x8, %rsp
// 30e: 5b                            popq    %rbx
// 30f: 41 5c                         popq    %r12
// 311: 41 5d                         popq    %r13
// 313: 41 5e                         popq    %r14
// 315: 41 5f                         popq    %r15
// 317: 5d                            popq    %rbp
// 318: ff e0                         jmpq    *%rax
// 31a: 
static const unsigned char _STORE_SUBSCRplus_LOAD_ATTR_WITH_HINT_code_body[795] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1e, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x2d, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xd3, 0x4d, 0x8b, 0x66, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0x8b, 0x50, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0x8b, 0x03, 0x48, 0x39, 0x4a, 0x18, 0x76, 0x75, 0x48, 0x8b, 0x70, 0x20, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe7, 0xfe, 0xff, 0x00, 0x00, 0x0f, 0xb6, 0x4a, 0x09, 0x41, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x49, 0xd3, 0xe0, 0x48, 0x8b, 0x74, 0xbe, 0x18, 0x80, 0x7a, 0x0a, 0x00, 0x4a, 0x8d, 0x4c, 0x02, 0x20, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x74, 0x2c, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0x39, 0x34, 0x11, 0x75, 0x2d, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0x01, 0xd1, 0x48, 0x83, 0xc1, 0x08, 0x4c, 0x8b, 0x39, 0x4d, 0x85, 0xff, 0x75, 0x62, 0xeb, 0x0b, 0x48, 0x8d, 0x14, 0x52, 0x48, 0x39, 0x74, 0xd1, 0x08, 0x74, 0x34, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x48, 0x8d, 0x14, 0x52, 0x48, 0x8d, 0x0c, 0xd1, 0x48, 0x83, 0xc1, 0x10, 0x4c, 0x8b, 0x39, 0x4d, 0x85, 0xff, 0x74, 0xab, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_LOAD_ATTR_WITH_HINT_code_holes[27] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x294, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2df, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2fb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_ATTR_WITH_HINT_data_holes[1];

// _STORE_SUBSCRplus_LOAD_BUILD_CLASS
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_BUILD_CLASS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 f2                      movq    %r14, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 06                      movq    (%r14), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 f2                      movq    %r14, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 06                      movq    (%r14), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0e                      decq    (%r14)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 f7                      movq    %r14, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 2f                         je      0x175 <_JIT_ENTRY+0x175>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 14c: 74 3e                         je      0x18c <_JIT_ENTRY+0x18c>
// 14e: 49 83 c7 e8                   addq    $-0x18, %r15
// 152: 4d 89 fe                      movq    %r15, %r14
// 155: 49 29 de                      subq    %rbx, %r14
// 158: 49 83 c6 b8                   addq    $-0x48, %r14
// 15c: 49 c1 ee 03                   shrq    $0x3, %r14
// 160: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 164: 31 c0                         xorl    %eax, %eax
// 166: 48 83 c4 18                   addq    $0x18, %rsp
// 16a: 5b                            popq    %rbx
// 16b: 41 5c                         popq    %r12
// 16d: 41 5d                         popq    %r13
// 16f: 41 5e                         popq    %r14
// 171: 41 5f                         popq    %r15
// 173: 5d                            popq    %rbp
// 174: c3                            retq
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 e7                      movq    %r12, %rdi
// 182: ff d0                         callq   *%rax
// 184: 85 ed                         testl   %ebp, %ebp
// 186: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 18a: 75 c2                         jne     0x14e <_JIT_ENTRY+0x14e>
// 18c: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  PyMapping_GetOptionalItem
// 19a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000019c:  R_X86_64_64  _PyRuntime
// 1a4: 48 81 c6 40 a9 00 00          addq    $0xa940, %rsi           # imm = 0xA940
// 1ab: 48 8d 54 24 10                leaq    0x10(%rsp), %rdx
// 1b0: ff d0                         callq   *%rax
// 1b2: 85 c0                         testl   %eax, %eax
// 1b4: 78 9f                         js      0x155 <_JIT_ENTRY+0x155>
// 1b6: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1bb: 48 85 c0                      testq   %rax, %rax
// 1be: 74 2c                         je      0x1ec <_JIT_ENTRY+0x1ec>
// 1c0: 49 89 07                      movq    %rax, (%r15)
// 1c3: 49 83 c7 08                   addq    $0x8, %r15
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _JIT_CONTINUE
// 1d1: 48 89 df                      movq    %rbx, %rdi
// 1d4: 4c 89 fe                      movq    %r15, %rsi
// 1d7: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1dc: 48 83 c4 18                   addq    $0x18, %rsp
// 1e0: 5b                            popq    %rbx
// 1e1: 41 5c                         popq    %r12
// 1e3: 41 5d                         popq    %r13
// 1e5: 41 5e                         popq    %r14
// 1e7: 41 5f                         popq    %r15
// 1e9: 5d                            popq    %rbp
// 1ea: ff e0                         jmpq    *%rax
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  PyExc_NameError
// 1f6: 48 8b 30                      movq    (%rax), %rsi
// 1f9: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001fb:  R_X86_64_64  .rodata.str1.1+0x39
// 203: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000205:  R_X86_64_64  _PyErr_SetString
// 20d: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 212: ff d0                         callq   *%rax
// 214: e9 3c ff ff ff                jmp     0x155 <_JIT_ENTRY+0x155>
// 219: 
static const unsigned char _STORE_SUBSCRplus_LOAD_BUILD_CLASS_code_body[538] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xc2, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc6, 0x40, 0xa9, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x10, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x9f, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x74, 0x2c, 0x49, 0x89, 0x07, 0x49, 0x83, 0xc7, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0xe9, 0x3c, 0xff, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_LOAD_BUILD_CLASS_code_holes[20] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x205, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__build_class__ not found\x00'
// 53: 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_BUILD_CLASS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x5f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_BUILD_CLASS_data_holes[1];

// _STORE_SUBSCRplus_LOAD_CONST
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_CONST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 49 8b 06                      movq    (%r14), %rax
// 184: 48 8b 40 18                   movq    0x18(%rax), %rax
// 188: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018a:  R_X86_64_64  _JIT_OPARG
// 192: 0f b7 c9                      movzwl  %cx, %ecx
// 195: 4c 8b 7c c8 18                movq    0x18(%rax,%rcx,8), %r15
// 19a: 41 8b 07                      movl    (%r15), %eax
// 19d: ff c0                         incl    %eax
// 19f: 74 0f                         je      0x1b0 <_JIT_ENTRY+0x1b0>
// 1a1: 41 89 07                      movl    %eax, (%r15)
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ae: ff d0                         callq   *%rax
// 1b0: 4c 89 3b                      movq    %r15, (%rbx)
// 1b3: 48 83 c3 08                   addq    $0x8, %rbx
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _JIT_CONTINUE
// 1c1: 4c 89 f7                      movq    %r14, %rdi
// 1c4: 48 89 de                      movq    %rbx, %rsi
// 1c7: 48 8b 14 24                   movq    (%rsp), %rdx
// 1cb: 48 83 c4 08                   addq    $0x8, %rsp
// 1cf: 5b                            popq    %rbx
// 1d0: 41 5c                         popq    %r12
// 1d2: 41 5d                         popq    %r13
// 1d4: 41 5e                         popq    %r14
// 1d6: 41 5f                         popq    %r15
// 1d8: 5d                            popq    %rbp
// 1d9: ff e0                         jmpq    *%rax
// 1db: 
static const unsigned char _STORE_SUBSCRplus_LOAD_CONST_code_body[476] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x7c, 0xc8, 0x18, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_LOAD_CONST_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_CONST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_CONST_data_holes[1];

// _STORE_SUBSCRplus_LOAD_DEREF
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_DEREF.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f7                      movq    %rsi, %r15
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 f2                      movq    %r14, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 06                      movq    (%r14), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 f2                      movq    %r14, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0e                      decq    (%r14)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 f7                      movq    %r14, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c7 e8                   addq    $-0x18, %r15
// 14e: 4d 89 fe                      movq    %r15, %r14
// 151: 49 29 de                      subq    %rbx, %r14
// 154: 49 83 c6 b8                   addq    $-0x48, %r14
// 158: 49 c1 ee 03                   shrq    $0x3, %r14
// 15c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  _JIT_OPARG
// 192: 0f b7 c0                      movzwl  %ax, %eax
// 195: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 19a: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 19e: 4d 85 e4                      testq   %r12, %r12
// 1a1: 74 43                         je      0x1e6 <_JIT_ENTRY+0x1e6>
// 1a3: 41 8b 04 24                   movl    (%r12), %eax
// 1a7: ff c0                         incl    %eax
// 1a9: 74 10                         je      0x1bb <_JIT_ENTRY+0x1bb>
// 1ab: 41 89 04 24                   movl    %eax, (%r12)
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 4d 89 27                      movq    %r12, (%r15)
// 1be: 49 83 c7 08                   addq    $0x8, %r15
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _JIT_CONTINUE
// 1cc: 48 89 df                      movq    %rbx, %rdi
// 1cf: 4c 89 fe                      movq    %r15, %rsi
// 1d2: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d6: 48 83 c4 08                   addq    $0x8, %rsp
// 1da: 5b                            popq    %rbx
// 1db: 41 5c                         popq    %r12
// 1dd: 41 5d                         popq    %r13
// 1df: 41 5e                         popq    %r14
// 1e1: 41 5f                         popq    %r15
// 1e3: 5d                            popq    %rbp
// 1e4: ff e0                         jmpq    *%rax
// 1e6: 48 8b 33                      movq    (%rbx), %rsi
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _JIT_OPARG
// 1f3: 0f b7 d0                      movzwl  %ax, %edx
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _PyEval_FormatExcUnbound
// 200: 48 8b 3c 24                   movq    (%rsp), %rdi
// 204: ff d0                         callq   *%rax
// 206: e9 46 ff ff ff                jmp     0x151 <_JIT_ENTRY+0x151>
// 20b: 
static const unsigned char _STORE_SUBSCRplus_LOAD_DEREF_code_body[524] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x43, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x27, 0x49, 0x83, 0xc7, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0xe9, 0x46, 0xff, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_LOAD_DEREF_code_holes[19] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_DEREF_data_holes[1];

// _STORE_SUBSCRplus_LOAD_FAST
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_FAST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _JIT_OPARG
// 18b: 0f b7 c0                      movzwl  %ax, %eax
// 18e: 4d 8b 7c c6 48                movq    0x48(%r14,%rax,8), %r15
// 193: 41 8b 07                      movl    (%r15), %eax
// 196: ff c0                         incl    %eax
// 198: 74 0f                         je      0x1a9 <_JIT_ENTRY+0x1a9>
// 19a: 41 89 07                      movl    %eax, (%r15)
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1a7: ff d0                         callq   *%rax
// 1a9: 4c 89 3b                      movq    %r15, (%rbx)
// 1ac: 48 83 c3 08                   addq    $0x8, %rbx
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _JIT_CONTINUE
// 1ba: 4c 89 f7                      movq    %r14, %rdi
// 1bd: 48 89 de                      movq    %rbx, %rsi
// 1c0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1c4: 48 83 c4 08                   addq    $0x8, %rsp
// 1c8: 5b                            popq    %rbx
// 1c9: 41 5c                         popq    %r12
// 1cb: 41 5d                         popq    %r13
// 1cd: 41 5e                         popq    %r14
// 1cf: 41 5f                         popq    %r15
// 1d1: 5d                            popq    %rbp
// 1d2: ff e0                         jmpq    *%rax
// 1d4: 
static const unsigned char _STORE_SUBSCRplus_LOAD_FAST_code_body[469] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x7c, 0xc6, 0x48, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_LOAD_FAST_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_FAST_data_holes[1];

// _STORE_SUBSCRplus_LOAD_FAST_AND_CLEAR
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_FAST_AND_CLEAR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _JIT_OPARG
// 18b: 0f b7 c0                      movzwl  %ax, %eax
// 18e: 49 8b 4c c6 48                movq    0x48(%r14,%rax,8), %rcx
// 193: 49 c7 44 c6 48 00 00 00 00    movq    $0x0, 0x48(%r14,%rax,8)
// 19c: 48 89 0b                      movq    %rcx, (%rbx)
// 19f: 48 83 c3 08                   addq    $0x8, %rbx
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _JIT_CONTINUE
// 1ad: 4c 89 f7                      movq    %r14, %rdi
// 1b0: 48 89 de                      movq    %rbx, %rsi
// 1b3: 48 8b 14 24                   movq    (%rsp), %rdx
// 1b7: 48 83 c4 08                   addq    $0x8, %rsp
// 1bb: 5b                            popq    %rbx
// 1bc: 41 5c                         popq    %r12
// 1be: 41 5d                         popq    %r13
// 1c0: 41 5e                         popq    %r14
// 1c2: 41 5f                         popq    %r15
// 1c4: 5d                            popq    %rbp
// 1c5: ff e0                         jmpq    *%rax
// 1c7: 
static const unsigned char _STORE_SUBSCRplus_LOAD_FAST_AND_CLEAR_code_body[456] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x4c, 0xc6, 0x48, 0x49, 0xc7, 0x44, 0xc6, 0x48, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_LOAD_FAST_AND_CLEAR_code_holes[16] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_FAST_AND_CLEAR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_FAST_AND_CLEAR_data_holes[1];

// _STORE_SUBSCRplus_LOAD_FAST_CHECK
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_FAST_CHECK.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f7                      movq    %rsi, %r15
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 f2                      movq    %r14, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 06                      movq    (%r14), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 f2                      movq    %r14, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0e                      decq    (%r14)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 f7                      movq    %r14, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 fd                   cmoveq  %r13, %r15
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c7 e8                   addq    $-0x18, %r15
// 14e: 4d 89 fd                      movq    %r15, %r13
// 151: 49 29 dd                      subq    %rbx, %r13
// 154: 49 83 c5 b8                   addq    $-0x48, %r13
// 158: 49 c1 ed 03                   shrq    $0x3, %r13
// 15c: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 fd                   cmoveq  %r13, %r15
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  _JIT_OPARG
// 192: 0f b7 c0                      movzwl  %ax, %eax
// 195: 4c 8b 74 c3 48                movq    0x48(%rbx,%rax,8), %r14
// 19a: 4d 85 f6                      testq   %r14, %r14
// 19d: 74 41                         je      0x1e0 <_JIT_ENTRY+0x1e0>
// 19f: 41 8b 06                      movl    (%r14), %eax
// 1a2: ff c0                         incl    %eax
// 1a4: 74 0f                         je      0x1b5 <_JIT_ENTRY+0x1b5>
// 1a6: 41 89 06                      movl    %eax, (%r14)
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1b3: ff d0                         callq   *%rax
// 1b5: 4d 89 37                      movq    %r14, (%r15)
// 1b8: 49 83 c7 08                   addq    $0x8, %r15
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _JIT_CONTINUE
// 1c6: 48 89 df                      movq    %rbx, %rdi
// 1c9: 4c 89 fe                      movq    %r15, %rsi
// 1cc: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d0: 48 83 c4 08                   addq    $0x8, %rsp
// 1d4: 5b                            popq    %rbx
// 1d5: 41 5c                         popq    %r12
// 1d7: 41 5d                         popq    %r13
// 1d9: 41 5e                         popq    %r14
// 1db: 41 5f                         popq    %r15
// 1dd: 5d                            popq    %rbp
// 1de: ff e0                         jmpq    *%rax
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  PyExc_UnboundLocalError
// 1ea: 4c 8b 30                      movq    (%rax), %r14
// 1ed: 48 8b 03                      movq    (%rbx), %rax
// 1f0: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _JIT_OPARG
// 1fe: 0f b7 f0                      movzwl  %ax, %esi
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  PyTuple_GetItem
// 20b: ff d0                         callq   *%rax
// 20d: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000020f:  R_X86_64_64  .rodata.str1.1+0x39
// 217: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000219:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 221: 48 8b 3c 24                   movq    (%rsp), %rdi
// 225: 4c 89 f6                      movq    %r14, %rsi
// 228: 48 89 c1                      movq    %rax, %rcx
// 22b: 41 ff d0                      callq   *%r8
// 22e: e9 1e ff ff ff                jmp     0x151 <_JIT_ENTRY+0x151>
// 233: 
static const unsigned char _STORE_SUBSCRplus_LOAD_FAST_CHECK_code_body[564] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x6f, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6f, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfd, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfd, 0x75, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8b, 0x74, 0xc3, 0x48, 0x4d, 0x85, 0xf6, 0x74, 0x41, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x37, 0x49, 0x83, 0xc7, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x30, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xf6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0xe9, 0x1e, 0xff, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_LOAD_FAST_CHECK_code_holes[22] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x219, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot access local variable '%s' where it is not associated with a value\x00"
// 83: 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_FAST_CHECK_data_body[137] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_FAST_CHECK_data_holes[1];

// _STORE_SUBSCRplus_LOAD_FROM_DICT_OR_DEREF
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_FROM_DICT_OR_DEREF.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 f2                      movq    %r14, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 06                      movq    (%r14), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 f2                      movq    %r14, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 06                      movq    (%r14), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0e                      decq    (%r14)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 f7                      movq    %r14, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 2f                         je      0x175 <_JIT_ENTRY+0x175>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 14c: 74 3e                         je      0x18c <_JIT_ENTRY+0x18c>
// 14e: 49 83 c7 e8                   addq    $-0x18, %r15
// 152: 4d 89 fe                      movq    %r15, %r14
// 155: 49 29 de                      subq    %rbx, %r14
// 158: 49 83 c6 b8                   addq    $-0x48, %r14
// 15c: 49 c1 ee 03                   shrq    $0x3, %r14
// 160: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 164: 31 c0                         xorl    %eax, %eax
// 166: 48 83 c4 18                   addq    $0x18, %rsp
// 16a: 5b                            popq    %rbx
// 16b: 41 5c                         popq    %r12
// 16d: 41 5d                         popq    %r13
// 16f: 41 5e                         popq    %r14
// 171: 41 5f                         popq    %r15
// 173: 5d                            popq    %rbp
// 174: c3                            retq
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 e7                      movq    %r12, %rdi
// 182: ff d0                         callq   *%rax
// 184: 85 ed                         testl   %ebp, %ebp
// 186: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 18a: 75 c2                         jne     0x14e <_JIT_ENTRY+0x14e>
// 18c: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 190: 48 8b 03                      movq    (%rbx), %rax
// 193: 48 8b 40 60                   movq    0x60(%rax), %rax
// 197: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000199:  R_X86_64_64  _JIT_OPARG
// 1a1: 0f b7 c9                      movzwl  %cx, %ecx
// 1a4: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  PyMapping_GetOptionalItem
// 1b3: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1b8: 4c 89 e7                      movq    %r12, %rdi
// 1bb: ff d0                         callq   *%rax
// 1bd: 85 c0                         testl   %eax, %eax
// 1bf: 78 94                         js      0x155 <_JIT_ENTRY+0x155>
// 1c1: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 1c7: 74 7e                         je      0x247 <_JIT_ENTRY+0x247>
// 1c9: 49 8b 04 24                   movq    (%r12), %rax
// 1cd: 48 85 c0                      testq   %rax, %rax
// 1d0: 7f 22                         jg      0x1f4 <_JIT_ENTRY+0x1f4>
// 1d2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d4:  R_X86_64_64  .rodata.str1.1
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _Py_NegativeRefcount
// 1e6: be dd 04 00 00                movl    $0x4dd, %esi            # imm = 0x4DD
// 1eb: 4c 89 e2                      movq    %r12, %rdx
// 1ee: ff d0                         callq   *%rax
// 1f0: 49 8b 04 24                   movq    (%r12), %rax
// 1f4: 85 c0                         testl   %eax, %eax
// 1f6: 78 21                         js      0x219 <_JIT_ENTRY+0x219>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 202: ff d0                         callq   *%rax
// 204: 49 ff 0c 24                   decq    (%r12)
// 208: 75 0f                         jne     0x219 <_JIT_ENTRY+0x219>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _Py_Dealloc
// 214: 4c 89 e7                      movq    %r12, %rdi
// 217: ff d0                         callq   *%rax
// 219: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 21e: 49 89 47 f8                   movq    %rax, -0x8(%r15)
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _JIT_CONTINUE
// 22c: 48 89 df                      movq    %rbx, %rdi
// 22f: 4c 89 fe                      movq    %r15, %rsi
// 232: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 237: 48 83 c4 18                   addq    $0x18, %rsp
// 23b: 5b                            popq    %rbx
// 23c: 41 5c                         popq    %r12
// 23e: 41 5d                         popq    %r13
// 240: 41 5e                         popq    %r14
// 242: 41 5f                         popq    %r15
// 244: 5d                            popq    %rbp
// 245: ff e0                         jmpq    *%rax
// 247: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000249:  R_X86_64_64  _JIT_OPARG
// 251: 0f b7 c0                      movzwl  %ax, %eax
// 254: 48 8b 44 c3 48                movq    0x48(%rbx,%rax,8), %rax
// 259: 48 8b 40 10                   movq    0x10(%rax), %rax
// 25d: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 262: 48 85 c0                      testq   %rax, %rax
// 265: 74 1d                         je      0x284 <_JIT_ENTRY+0x284>
// 267: 8b 08                         movl    (%rax), %ecx
// 269: ff c1                         incl    %ecx
// 26b: 0f 84 58 ff ff ff             je      0x1c9 <_JIT_ENTRY+0x1c9>
// 271: 89 08                         movl    %ecx, (%rax)
// 273: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000275:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 27d: ff d0                         callq   *%rax
// 27f: e9 45 ff ff ff                jmp     0x1c9 <_JIT_ENTRY+0x1c9>
// 284: 48 8b 33                      movq    (%rbx), %rsi
// 287: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000289:  R_X86_64_64  _JIT_OPARG
// 291: 0f b7 d0                      movzwl  %ax, %edx
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _PyEval_FormatExcUnbound
// 29e: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 2a3: ff d0                         callq   *%rax
// 2a5: e9 ab fe ff ff                jmp     0x155 <_JIT_ENTRY+0x155>
// 2aa: 
static const unsigned char _STORE_SUBSCRplus_LOAD_FROM_DICT_OR_DEREF_code_body[683] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xc2, 0x4d, 0x8b, 0x67, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x60, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x94, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x74, 0x7e, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x89, 0x47, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc3, 0x48, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x1d, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0x58, 0xff, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x45, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0xe9, 0xab, 0xfe, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_LOAD_FROM_DICT_OR_DEREF_code_holes[25] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x275, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x289, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_FROM_DICT_OR_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_FROM_DICT_OR_DEREF_data_holes[1];

// _STORE_SUBSCRplus_LOAD_FROM_DICT_OR_GLOBALS
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_FROM_DICT_OR_GLOBALS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 f2                      movq    %r14, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 06                      movq    (%r14), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 f2                      movq    %r14, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 06                      movq    (%r14), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0e                      decq    (%r14)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 f7                      movq    %r14, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 2f                         je      0x175 <_JIT_ENTRY+0x175>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 14c: 74 3e                         je      0x18c <_JIT_ENTRY+0x18c>
// 14e: 49 83 c7 e8                   addq    $-0x18, %r15
// 152: 4d 89 fe                      movq    %r15, %r14
// 155: 49 29 de                      subq    %rbx, %r14
// 158: 49 83 c6 b8                   addq    $-0x48, %r14
// 15c: 49 c1 ee 03                   shrq    $0x3, %r14
// 160: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 164: 31 c0                         xorl    %eax, %eax
// 166: 48 83 c4 18                   addq    $0x18, %rsp
// 16a: 5b                            popq    %rbx
// 16b: 41 5c                         popq    %r12
// 16d: 41 5d                         popq    %r13
// 16f: 41 5e                         popq    %r14
// 171: 41 5f                         popq    %r15
// 173: 5d                            popq    %rbp
// 174: c3                            retq
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 e7                      movq    %r12, %rdi
// 182: ff d0                         callq   *%rax
// 184: 85 ed                         testl   %ebp, %ebp
// 186: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 18a: 75 c2                         jne     0x14e <_JIT_ENTRY+0x14e>
// 18c: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 190: 48 8b 03                      movq    (%rbx), %rax
// 193: 48 8b 40 20                   movq    0x20(%rax), %rax
// 197: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000199:  R_X86_64_64  _JIT_OPARG
// 1a1: 0f b7 c9                      movzwl  %cx, %ecx
// 1a4: 4c 8b 6c c8 18                movq    0x18(%rax,%rcx,8), %r13
// 1a9: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001ab:  R_X86_64_64  PyMapping_GetOptionalItem
// 1b3: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1b8: 4c 89 e7                      movq    %r12, %rdi
// 1bb: 4c 89 ee                      movq    %r13, %rsi
// 1be: ff d5                         callq   *%rbp
// 1c0: 85 c0                         testl   %eax, %eax
// 1c2: 78 91                         js      0x155 <_JIT_ENTRY+0x155>
// 1c4: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 1ca: 74 7e                         je      0x24a <_JIT_ENTRY+0x24a>
// 1cc: 49 8b 04 24                   movq    (%r12), %rax
// 1d0: 48 85 c0                      testq   %rax, %rax
// 1d3: 7f 22                         jg      0x1f7 <_JIT_ENTRY+0x1f7>
// 1d5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d7:  R_X86_64_64  .rodata.str1.1
// 1df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e1:  R_X86_64_64  _Py_NegativeRefcount
// 1e9: be 1b 04 00 00                movl    $0x41b, %esi            # imm = 0x41B
// 1ee: 4c 89 e2                      movq    %r12, %rdx
// 1f1: ff d0                         callq   *%rax
// 1f3: 49 8b 04 24                   movq    (%r12), %rax
// 1f7: 85 c0                         testl   %eax, %eax
// 1f9: 78 21                         js      0x21c <_JIT_ENTRY+0x21c>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 205: ff d0                         callq   *%rax
// 207: 49 ff 0c 24                   decq    (%r12)
// 20b: 75 0f                         jne     0x21c <_JIT_ENTRY+0x21c>
// 20d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020f:  R_X86_64_64  _Py_Dealloc
// 217: 4c 89 e7                      movq    %r12, %rdi
// 21a: ff d0                         callq   *%rax
// 21c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 221: 49 89 47 f8                   movq    %rax, -0x8(%r15)
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _JIT_CONTINUE
// 22f: 48 89 df                      movq    %rbx, %rdi
// 232: 4c 89 fe                      movq    %r15, %rsi
// 235: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 23a: 48 83 c4 18                   addq    $0x18, %rsp
// 23e: 5b                            popq    %rbx
// 23f: 41 5c                         popq    %r12
// 241: 41 5d                         popq    %r13
// 243: 41 5e                         popq    %r14
// 245: 41 5f                         popq    %r15
// 247: 5d                            popq    %rbp
// 248: ff e0                         jmpq    *%rax
// 24a: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  PyDict_GetItemRef
// 258: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 25d: 4c 89 ee                      movq    %r13, %rsi
// 260: ff d0                         callq   *%rax
// 262: 85 c0                         testl   %eax, %eax
// 264: 0f 88 eb fe ff ff             js      0x155 <_JIT_ENTRY+0x155>
// 26a: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 270: 0f 85 56 ff ff ff             jne     0x1cc <_JIT_ENTRY+0x1cc>
// 276: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 27a: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 27f: 4c 89 ee                      movq    %r13, %rsi
// 282: ff d5                         callq   *%rbp
// 284: 85 c0                         testl   %eax, %eax
// 286: 0f 88 c9 fe ff ff             js      0x155 <_JIT_ENTRY+0x155>
// 28c: 48 83 7c 24 08 00             cmpq    $0x0, 0x8(%rsp)
// 292: 0f 85 34 ff ff ff             jne     0x1cc <_JIT_ENTRY+0x1cc>
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  PyExc_NameError
// 2a2: 48 8b 30                      movq    (%rax), %rsi
// 2a5: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002a7:  R_X86_64_64  .rodata.str1.1+0x39
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 2b9: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 2be: 4c 89 e9                      movq    %r13, %rcx
// 2c1: ff d0                         callq   *%rax
// 2c3: e9 8d fe ff ff                jmp     0x155 <_JIT_ENTRY+0x155>
// 2c8: 
static const unsigned char _STORE_SUBSCRplus_LOAD_FROM_DICT_OR_GLOBALS_code_body[713] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xc2, 0x4d, 0x8b, 0x67, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x6c, 0xc8, 0x18, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0x91, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x74, 0x7e, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x89, 0x47, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xeb, 0xfe, 0xff, 0xff, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x85, 0x56, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xee, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x88, 0xc9, 0xfe, 0xff, 0xff, 0x48, 0x83, 0x7c, 0x24, 0x08, 0x00, 0x0f, 0x85, 0x34, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0xe9, 0xff, 0xd0, 0xe9, 0x8d, 0xfe, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_LOAD_FROM_DICT_OR_GLOBALS_code_holes[25] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_FROM_DICT_OR_GLOBALS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_FROM_DICT_OR_GLOBALS_data_holes[1];

// _STORE_SUBSCRplus_LOAD_GLOBAL
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_GLOBAL.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 f2                      movq    %r14, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 06                      movq    (%r14), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 f2                      movq    %r14, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 06                      movq    (%r14), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0e                      decq    (%r14)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 f7                      movq    %r14, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 2f                         je      0x175 <_JIT_ENTRY+0x175>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 14c: 74 3e                         je      0x18c <_JIT_ENTRY+0x18c>
// 14e: 49 83 c7 e8                   addq    $-0x18, %r15
// 152: 4d 89 fe                      movq    %r15, %r14
// 155: 49 29 de                      subq    %rbx, %r14
// 158: 49 83 c6 b8                   addq    $-0x48, %r14
// 15c: 49 c1 ee 03                   shrq    $0x3, %r14
// 160: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 164: 31 c0                         xorl    %eax, %eax
// 166: 48 83 c4 18                   addq    $0x18, %rsp
// 16a: 5b                            popq    %rbx
// 16b: 41 5c                         popq    %r12
// 16d: 41 5d                         popq    %r13
// 16f: 41 5e                         popq    %r14
// 171: 41 5f                         popq    %r15
// 173: 5d                            popq    %rbp
// 174: c3                            retq
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 e7                      movq    %r12, %rdi
// 182: ff d0                         callq   *%rax
// 184: 85 ed                         testl   %ebp, %ebp
// 186: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 18a: 75 c2                         jne     0x14e <_JIT_ENTRY+0x14e>
// 18c: 48 8b 03                      movq    (%rbx), %rax
// 18f: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 193: 48 8b 40 20                   movq    0x20(%rax), %rax
// 197: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000199:  R_X86_64_64  _JIT_OPARG
// 1a1: 81 e1 fe ff 00 00             andl    $0xfffe, %ecx           # imm = 0xFFFE
// 1a7: 4c 8b 64 88 18                movq    0x18(%rax,%rcx,4), %r12
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  PyDict_Type
// 1b6: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 1ba: 75 0e                         jne     0x1ca <_JIT_ENTRY+0x1ca>
// 1bc: 48 8b 73 20                   movq    0x20(%rbx), %rsi
// 1c0: 48 39 46 08                   cmpq    %rax, 0x8(%rsi)
// 1c4: 0f 84 8e 00 00 00             je      0x258 <_JIT_ENTRY+0x258>
// 1ca: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001cc:  R_X86_64_64  PyMapping_GetOptionalItem
// 1d4: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1d9: 4c 89 e6                      movq    %r12, %rsi
// 1dc: 41 ff d5                      callq   *%r13
// 1df: 85 c0                         testl   %eax, %eax
// 1e1: 0f 88 6e ff ff ff             js      0x155 <_JIT_ENTRY+0x155>
// 1e7: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1ec: 48 85 c0                      testq   %rax, %rax
// 1ef: 74 44                         je      0x235 <_JIT_ENTRY+0x235>
// 1f1: 49 89 07                      movq    %rax, (%r15)
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _JIT_OPARG
// 1fe: a8 01                         testb   $0x1, %al
// 200: 74 08                         je      0x20a <_JIT_ENTRY+0x20a>
// 202: 49 c7 47 08 00 00 00 00       movq    $0x0, 0x8(%r15)
// 20a: 83 e0 01                      andl    $0x1, %eax
// 20d: ff c0                         incl    %eax
// 20f: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _JIT_CONTINUE
// 21d: 48 89 df                      movq    %rbx, %rdi
// 220: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 225: 48 83 c4 18                   addq    $0x18, %rsp
// 229: 5b                            popq    %rbx
// 22a: 41 5c                         popq    %r12
// 22c: 41 5d                         popq    %r13
// 22e: 41 5e                         popq    %r14
// 230: 41 5f                         popq    %r15
// 232: 5d                            popq    %rbp
// 233: ff e0                         jmpq    *%rax
// 235: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 239: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 23e: 4c 89 e6                      movq    %r12, %rsi
// 241: 41 ff d5                      callq   *%r13
// 244: 85 c0                         testl   %eax, %eax
// 246: 0f 88 09 ff ff ff             js      0x155 <_JIT_ENTRY+0x155>
// 24c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 251: 48 85 c0                      testq   %rax, %rax
// 254: 75 9b                         jne     0x1f1 <_JIT_ENTRY+0x1f1>
// 256: eb 54                         jmp     0x2ac <_JIT_ENTRY+0x2ac>
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _PyDict_LoadGlobal
// 262: 4c 89 e2                      movq    %r12, %rdx
// 265: ff d0                         callq   *%rax
// 267: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 26c: 48 85 c0                      testq   %rax, %rax
// 26f: 74 22                         je      0x293 <_JIT_ENTRY+0x293>
// 271: 8b 08                         movl    (%rax), %ecx
// 273: ff c1                         incl    %ecx
// 275: 0f 84 76 ff ff ff             je      0x1f1 <_JIT_ENTRY+0x1f1>
// 27b: 89 08                         movl    %ecx, (%rax)
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 287: ff d0                         callq   *%rax
// 289: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 28e: e9 5e ff ff ff                jmp     0x1f1 <_JIT_ENTRY+0x1f1>
// 293: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 298: 48 8b 40 68                   movq    0x68(%rax), %rax
// 29c: 48 85 c0                      testq   %rax, %rax
// 29f: 74 0b                         je      0x2ac <_JIT_ENTRY+0x2ac>
// 2a1: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 2a6: 0f 85 a9 fe ff ff             jne     0x155 <_JIT_ENTRY+0x155>
// 2ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ae:  R_X86_64_64  PyExc_NameError
// 2b6: 48 8b 30                      movq    (%rax), %rsi
// 2b9: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000002bb:  R_X86_64_64  .rodata.str1.1+0x39
// 2c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c5:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 2cd: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 2d2: 4c 89 e1                      movq    %r12, %rcx
// 2d5: ff d0                         callq   *%rax
// 2d7: e9 79 fe ff ff                jmp     0x155 <_JIT_ENTRY+0x155>
// 2dc: 
static const unsigned char _STORE_SUBSCRplus_LOAD_GLOBAL_code_body[733] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xc2, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfe, 0xff, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x88, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x75, 0x0e, 0x48, 0x8b, 0x73, 0x20, 0x48, 0x39, 0x46, 0x08, 0x0f, 0x84, 0x8e, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x88, 0x6e, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x44, 0x49, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x47, 0x08, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x88, 0x09, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x75, 0x9b, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x22, 0x8b, 0x08, 0xff, 0xc1, 0x0f, 0x84, 0x76, 0xff, 0xff, 0xff, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xe9, 0x5e, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x40, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x0b, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0xa9, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x79, 0xfe, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_LOAD_GLOBAL_code_holes[24] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_LoadGlobal, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x2ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x2bb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x2c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_GLOBAL_data_holes[1];

// _STORE_SUBSCRplus_LOAD_GLOBAL_BUILTINS
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_GLOBAL_BUILTINS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 49 29 de                      subq    %rbx, %r14
// 14d: 49 83 c6 a0                   addq    $-0x60, %r14
// 151: 49 c1 ee 03                   shrq    $0x3, %r14
// 155: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 8b 43 20                   movq    0x20(%rbx), %rax
// 185: 48 8b 40 20                   movq    0x20(%rax), %rax
// 189: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 18d: ba 01 00 00 00                movl    $0x1, %edx
// 192: 48 d3 e2                      shlq    %cl, %rdx
// 195: 48 01 c2                      addq    %rax, %rdx
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  _JIT_OPERAND
// 1a2: 0f b7 c0                      movzwl  %ax, %eax
// 1a5: 48 c1 e0 04                   shlq    $0x4, %rax
// 1a9: 4c 8b 64 10 28                movq    0x28(%rax,%rdx), %r12
// 1ae: 4d 85 e4                      testq   %r12, %r12
// 1b1: 74 5b                         je      0x20e <_JIT_ENTRY+0x20e>
// 1b3: 41 8b 04 24                   movl    (%r12), %eax
// 1b7: ff c0                         incl    %eax
// 1b9: 74 10                         je      0x1cb <_JIT_ENTRY+0x1cb>
// 1bb: 41 89 04 24                   movl    %eax, (%r12)
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 4d 89 26                      movq    %r12, (%r14)
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _JIT_OPARG
// 1d8: a8 01                         testb   $0x1, %al
// 1da: 74 08                         je      0x1e4 <_JIT_ENTRY+0x1e4>
// 1dc: 49 c7 46 08 00 00 00 00       movq    $0x0, 0x8(%r14)
// 1e4: 83 e0 01                      andl    $0x1, %eax
// 1e7: ff c0                         incl    %eax
// 1e9: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _JIT_CONTINUE
// 1f7: 48 89 df                      movq    %rbx, %rdi
// 1fa: 48 8b 14 24                   movq    (%rsp), %rdx
// 1fe: 48 83 c4 08                   addq    $0x8, %rsp
// 202: 5b                            popq    %rbx
// 203: 41 5c                         popq    %r12
// 205: 41 5d                         popq    %r13
// 207: 41 5e                         popq    %r14
// 209: 41 5f                         popq    %r15
// 20b: 5d                            popq    %rbp
// 20c: ff e0                         jmpq    *%rax
// 20e: 49 29 df                      subq    %rbx, %r15
// 211: 49 83 c7 b8                   addq    $-0x48, %r15
// 215: 49 c1 ef 03                   shrq    $0x3, %r15
// 219: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 21d: 48 8b 03                      movq    (%rbx), %rax
// 220: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000222:  R_X86_64_64  _JIT_TARGET
// 22a: 89 c9                         movl    %ecx, %ecx
// 22c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 230: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 236: e9 20 ff ff ff                jmp     0x15b <_JIT_ENTRY+0x15b>
// 23b: 
static const unsigned char _STORE_SUBSCRplus_LOAD_GLOBAL_BUILTINS_code_body[572] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xc9, 0x48, 0x8b, 0x43, 0x20, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x64, 0x10, 0x28, 0x4d, 0x85, 0xe4, 0x74, 0x5b, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x46, 0x08, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x20, 0xff, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_LOAD_GLOBAL_BUILTINS_code_holes[19] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_GLOBAL_BUILTINS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_GLOBAL_BUILTINS_data_holes[1];

// _STORE_SUBSCRplus_LOAD_GLOBAL_MODULE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_GLOBAL_MODULE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 49 29 de                      subq    %rbx, %r14
// 14d: 49 83 c6 a0                   addq    $-0x60, %r14
// 151: 49 c1 ee 03                   shrq    $0x3, %r14
// 155: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 8b 43 18                   movq    0x18(%rbx), %rax
// 185: 48 8b 40 20                   movq    0x20(%rax), %rax
// 189: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// 18d: ba 01 00 00 00                movl    $0x1, %edx
// 192: 48 d3 e2                      shlq    %cl, %rdx
// 195: 48 01 c2                      addq    %rax, %rdx
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  _JIT_OPERAND
// 1a2: 0f b7 c0                      movzwl  %ax, %eax
// 1a5: 48 c1 e0 04                   shlq    $0x4, %rax
// 1a9: 4c 8b 64 10 28                movq    0x28(%rax,%rdx), %r12
// 1ae: 4d 85 e4                      testq   %r12, %r12
// 1b1: 74 5b                         je      0x20e <_JIT_ENTRY+0x20e>
// 1b3: 41 8b 04 24                   movl    (%r12), %eax
// 1b7: ff c0                         incl    %eax
// 1b9: 74 10                         je      0x1cb <_JIT_ENTRY+0x1cb>
// 1bb: 41 89 04 24                   movl    %eax, (%r12)
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 4d 89 26                      movq    %r12, (%r14)
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _JIT_OPARG
// 1d8: a8 01                         testb   $0x1, %al
// 1da: 74 08                         je      0x1e4 <_JIT_ENTRY+0x1e4>
// 1dc: 49 c7 46 08 00 00 00 00       movq    $0x0, 0x8(%r14)
// 1e4: 83 e0 01                      andl    $0x1, %eax
// 1e7: ff c0                         incl    %eax
// 1e9: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _JIT_CONTINUE
// 1f7: 48 89 df                      movq    %rbx, %rdi
// 1fa: 48 8b 14 24                   movq    (%rsp), %rdx
// 1fe: 48 83 c4 08                   addq    $0x8, %rsp
// 202: 5b                            popq    %rbx
// 203: 41 5c                         popq    %r12
// 205: 41 5d                         popq    %r13
// 207: 41 5e                         popq    %r14
// 209: 41 5f                         popq    %r15
// 20b: 5d                            popq    %rbp
// 20c: ff e0                         jmpq    *%rax
// 20e: 49 29 df                      subq    %rbx, %r15
// 211: 49 83 c7 b8                   addq    $-0x48, %r15
// 215: 49 c1 ef 03                   shrq    $0x3, %r15
// 219: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 21d: 48 8b 03                      movq    (%rbx), %rax
// 220: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000222:  R_X86_64_64  _JIT_TARGET
// 22a: 89 c9                         movl    %ecx, %ecx
// 22c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 230: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 236: e9 20 ff ff ff                jmp     0x15b <_JIT_ENTRY+0x15b>
// 23b: 
static const unsigned char _STORE_SUBSCRplus_LOAD_GLOBAL_MODULE_code_body[572] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xc9, 0x48, 0x8b, 0x43, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x64, 0x10, 0x28, 0x4d, 0x85, 0xe4, 0x74, 0x5b, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x46, 0x08, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0x20, 0xff, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_LOAD_GLOBAL_MODULE_code_holes[19] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_GLOBAL_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_GLOBAL_MODULE_data_holes[1];

// _STORE_SUBSCRplus_LOAD_LOCALS
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_LOCALS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f7                      movq    %rsi, %r15
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 f2                      movq    %r14, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 06                      movq    (%r14), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 f2                      movq    %r14, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0e                      decq    (%r14)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 f7                      movq    %r14, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c7 e8                   addq    $-0x18, %r15
// 14e: 4d 89 fe                      movq    %r15, %r14
// 151: 49 29 de                      subq    %rbx, %r14
// 154: 49 83 c6 b8                   addq    $-0x48, %r14
// 158: 49 c1 ee 03                   shrq    $0x3, %r14
// 15c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 4c 8b 63 28                   movq    0x28(%rbx), %r12
// 18c: 4d 85 e4                      testq   %r12, %r12
// 18f: 74 43                         je      0x1d4 <_JIT_ENTRY+0x1d4>
// 191: 41 8b 04 24                   movl    (%r12), %eax
// 195: ff c0                         incl    %eax
// 197: 74 10                         je      0x1a9 <_JIT_ENTRY+0x1a9>
// 199: 41 89 04 24                   movl    %eax, (%r12)
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1a7: ff d0                         callq   *%rax
// 1a9: 4d 89 27                      movq    %r12, (%r15)
// 1ac: 49 83 c7 08                   addq    $0x8, %r15
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _JIT_CONTINUE
// 1ba: 48 89 df                      movq    %rbx, %rdi
// 1bd: 4c 89 fe                      movq    %r15, %rsi
// 1c0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1c4: 48 83 c4 08                   addq    $0x8, %rsp
// 1c8: 5b                            popq    %rbx
// 1c9: 41 5c                         popq    %r12
// 1cb: 41 5d                         popq    %r13
// 1cd: 41 5e                         popq    %r14
// 1cf: 41 5f                         popq    %r15
// 1d1: 5d                            popq    %rbp
// 1d2: ff e0                         jmpq    *%rax
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  PyExc_SystemError
// 1de: 48 8b 30                      movq    (%rax), %rsi
// 1e1: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001e3:  R_X86_64_64  .rodata.str1.1+0x39
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _PyErr_SetString
// 1f5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: e9 51 ff ff ff                jmp     0x151 <_JIT_ENTRY+0x151>
// 200: 
static const unsigned char _STORE_SUBSCRplus_LOAD_LOCALS_code_body[513] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xc2, 0x4c, 0x8b, 0x63, 0x28, 0x4d, 0x85, 0xe4, 0x74, 0x43, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x27, 0x49, 0x83, 0xc7, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0xe9, 0x51, 0xff, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_LOAD_LOCALS_code_holes[19] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found\x00'
// 49: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_LOCALS_data_body[81] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_LOCALS_data_holes[1];

// _STORE_SUBSCRplus_LOAD_NAME
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_NAME.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 f2                      movq    %r14, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 06                      movq    (%r14), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 f2                      movq    %r14, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 06                      movq    (%r14), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0e                      decq    (%r14)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 f7                      movq    %r14, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 2f                         je      0x175 <_JIT_ENTRY+0x175>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 14c: 74 3e                         je      0x18c <_JIT_ENTRY+0x18c>
// 14e: 49 83 c7 e8                   addq    $-0x18, %r15
// 152: 4d 89 fe                      movq    %r15, %r14
// 155: 49 29 de                      subq    %rbx, %r14
// 158: 49 83 c6 b8                   addq    $-0x48, %r14
// 15c: 49 c1 ee 03                   shrq    $0x3, %r14
// 160: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 164: 31 c0                         xorl    %eax, %eax
// 166: 48 83 c4 18                   addq    $0x18, %rsp
// 16a: 5b                            popq    %rbx
// 16b: 41 5c                         popq    %r12
// 16d: 41 5d                         popq    %r13
// 16f: 41 5e                         popq    %r14
// 171: 41 5f                         popq    %r15
// 173: 5d                            popq    %rbp
// 174: c3                            retq
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 e7                      movq    %r12, %rdi
// 182: ff d0                         callq   *%rax
// 184: 85 ed                         testl   %ebp, %ebp
// 186: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 18a: 75 c2                         jne     0x14e <_JIT_ENTRY+0x14e>
// 18c: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 190: 48 85 ff                      testq   %rdi, %rdi
// 193: 74 68                         je      0x1fd <_JIT_ENTRY+0x1fd>
// 195: 48 8b 03                      movq    (%rbx), %rax
// 198: 48 8b 40 20                   movq    0x20(%rax), %rax
// 19c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019e:  R_X86_64_64  _JIT_OPARG
// 1a6: 0f b7 c9                      movzwl  %cx, %ecx
// 1a9: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// 1ae: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000001b0:  R_X86_64_64  PyMapping_GetOptionalItem
// 1b8: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1bd: 4c 89 e6                      movq    %r12, %rsi
// 1c0: 41 ff d5                      callq   *%r13
// 1c3: 85 c0                         testl   %eax, %eax
// 1c5: 78 8e                         js      0x155 <_JIT_ENTRY+0x155>
// 1c7: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1cc: 48 85 c0                      testq   %rax, %rax
// 1cf: 74 59                         je      0x22a <_JIT_ENTRY+0x22a>
// 1d1: 49 89 07                      movq    %rax, (%r15)
// 1d4: 49 83 c7 08                   addq    $0x8, %r15
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  _JIT_CONTINUE
// 1e2: 48 89 df                      movq    %rbx, %rdi
// 1e5: 4c 89 fe                      movq    %r15, %rsi
// 1e8: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1ed: 48 83 c4 18                   addq    $0x18, %rsp
// 1f1: 5b                            popq    %rbx
// 1f2: 41 5c                         popq    %r12
// 1f4: 41 5d                         popq    %r13
// 1f6: 41 5e                         popq    %r14
// 1f8: 41 5f                         popq    %r15
// 1fa: 5d                            popq    %rbp
// 1fb: ff e0                         jmpq    *%rax
// 1fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ff:  R_X86_64_64  PyExc_SystemError
// 207: 48 8b 30                      movq    (%rax), %rsi
// 20a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000020c:  R_X86_64_64  .rodata.str1.1+0x56
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _PyErr_SetString
// 21e: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 223: ff d0                         callq   *%rax
// 225: e9 2b ff ff ff                jmp     0x155 <_JIT_ENTRY+0x155>
// 22a: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  PyDict_GetItemRef
// 238: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 23d: 4c 89 e6                      movq    %r12, %rsi
// 240: ff d0                         callq   *%rax
// 242: 85 c0                         testl   %eax, %eax
// 244: 0f 88 0b ff ff ff             js      0x155 <_JIT_ENTRY+0x155>
// 24a: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 24f: 48 85 c0                      testq   %rax, %rax
// 252: 0f 85 79 ff ff ff             jne     0x1d1 <_JIT_ENTRY+0x1d1>
// 258: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 25c: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 261: 4c 89 e6                      movq    %r12, %rsi
// 264: 41 ff d5                      callq   *%r13
// 267: 85 c0                         testl   %eax, %eax
// 269: 0f 88 e6 fe ff ff             js      0x155 <_JIT_ENTRY+0x155>
// 26f: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 274: 48 85 c0                      testq   %rax, %rax
// 277: 0f 85 54 ff ff ff             jne     0x1d1 <_JIT_ENTRY+0x1d1>
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  PyExc_NameError
// 287: 48 8b 30                      movq    (%rax), %rsi
// 28a: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000028c:  R_X86_64_64  .rodata.str1.1+0x39
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 29e: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 2a3: 4c 89 e1                      movq    %r12, %rcx
// 2a6: ff d0                         callq   *%rax
// 2a8: e9 a8 fe ff ff                jmp     0x155 <_JIT_ENTRY+0x155>
// 2ad: 
static const unsigned char _STORE_SUBSCRplus_LOAD_NAME_code_body[686] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xc2, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x85, 0xff, 0x74, 0x68, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0x8e, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x59, 0x49, 0x89, 0x07, 0x49, 0x83, 0xc7, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0xe9, 0x2b, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0x0b, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x79, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x88, 0xe6, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x54, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0xa8, 0xfe, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_LOAD_NAME_code_holes[24] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x56},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x296, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00no locals found\x00"
// 66: 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_NAME_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_NAME_data_holes[1];

// _STORE_SUBSCRplus_LOAD_SUPER_ATTR_ATTR
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_SUPER_ATTR_ATTR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f4                      movq    %rsi, %r12
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 7e f8                   movq    -0x8(%rsi), %r15
// 1d: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 fe                      movq    %r15, %rsi
// 35: 4c 89 f2                      movq    %r14, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 06                      movq    (%r14), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 f2                      movq    %r14, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 06                      movq    (%r14), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0e                      decq    (%r14)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 f7                      movq    %r14, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 07                      movq    (%r15), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7e 22                         jle     0x109 <_JIT_ENTRY+0x109>
// e7: 4d 8d 74 24 e8                leaq    -0x18(%r12), %r14
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 43                         jns     0x133 <_JIT_ENTRY+0x133>
// f0: eb 52                         jmp     0x144 <_JIT_ENTRY+0x144>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 07                      movq    (%r15), %rax
// 104: 48 85 c0                      testq   %rax, %rax
// 107: 7f de                         jg      0xe7 <_JIT_ENTRY+0xe7>
// 109: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010b:  R_X86_64_64  .rodata.str1.1
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_NegativeRefcount
// 11d: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 122: 4c 89 fa                      movq    %r15, %rdx
// 125: ff d0                         callq   *%rax
// 127: 49 8b 07                      movq    (%r15), %rax
// 12a: 4d 8d 74 24 e8                leaq    -0x18(%r12), %r14
// 12f: 85 c0                         testl   %eax, %eax
// 131: 78 11                         js      0x144 <_JIT_ENTRY+0x144>
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13d: ff d0                         callq   *%rax
// 13f: 49 ff 0f                      decq    (%r15)
// 142: 74 1e                         je      0x162 <_JIT_ENTRY+0x162>
// 144: 4d 89 e7                      movq    %r12, %r15
// 147: 85 ed                         testl   %ebp, %ebp
// 149: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 14d: 74 2d                         je      0x17c <_JIT_ENTRY+0x17c>
// 14f: 49 29 dc                      subq    %rbx, %r12
// 152: 49 83 c4 a0                   addq    $-0x60, %r12
// 156: 49 c1 ec 03                   shrq    $0x3, %r12
// 15a: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 15e: 31 c0                         xorl    %eax, %eax
// 160: eb 63                         jmp     0x1c5 <_JIT_ENTRY+0x1c5>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_Dealloc
// 16c: 4c 89 ff                      movq    %r15, %rdi
// 16f: ff d0                         callq   *%rax
// 171: 4d 89 e7                      movq    %r12, %r15
// 174: 85 ed                         testl   %ebp, %ebp
// 176: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 17a: 75 d3                         jne     0x14f <_JIT_ENTRY+0x14f>
// 17c: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000017e:  R_X86_64_64  PySuper_Type
// 186: 4d 39 6f e8                   cmpq    %r13, -0x18(%r15)
// 18a: 75 11                         jne     0x19d <_JIT_ENTRY+0x19d>
// 18c: 49 8b 6f f0                   movq    -0x10(%r15), %rbp
// 190: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 194: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 19b: 75 37                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 19d: 49 29 df                      subq    %rbx, %r15
// 1a0: 49 83 c7 b8                   addq    $-0x48, %r15
// 1a4: 49 c1 ef 03                   shrq    $0x3, %r15
// 1a8: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 1ac: 48 8b 03                      movq    (%rbx), %rax
// 1af: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b1:  R_X86_64_64  _JIT_TARGET
// 1b9: 89 c9                         movl    %ecx, %ecx
// 1bb: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1bf: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1c5: 48 83 c4 18                   addq    $0x18, %rsp
// 1c9: 5b                            popq    %rbx
// 1ca: 41 5c                         popq    %r12
// 1cc: 41 5d                         popq    %r13
// 1ce: 41 5e                         popq    %r14
// 1d0: 41 5f                         popq    %r15
// 1d2: 5d                            popq    %rbp
// 1d3: c3                            retq
// 1d4: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 1d8: 48 8b 03                      movq    (%rbx), %rax
// 1db: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1df: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e1:  R_X86_64_64  _JIT_OPARG
// 1e9: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 1ef: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _PySuper_Lookup
// 1fe: 48 89 ef                      movq    %rbp, %rdi
// 201: 4c 89 e6                      movq    %r12, %rsi
// 204: 31 c9                         xorl    %ecx, %ecx
// 206: ff d0                         callq   *%rax
// 208: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 20d: 49 8b 45 00                   movq    (%r13), %rax
// 211: 48 85 c0                      testq   %rax, %rax
// 214: 7f 22                         jg      0x238 <_JIT_ENTRY+0x238>
// 216: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000218:  R_X86_64_64  .rodata.str1.1
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_NegativeRefcount
// 22a: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 22f: 4c 89 ea                      movq    %r13, %rdx
// 232: ff d0                         callq   *%rax
// 234: 49 8b 45 00                   movq    (%r13), %rax
// 238: 85 c0                         testl   %eax, %eax
// 23a: 78 28                         js      0x264 <_JIT_ENTRY+0x264>
// 23c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 246: ff d0                         callq   *%rax
// 248: 49 ff 4d 00                   decq    (%r13)
// 24c: 75 16                         jne     0x264 <_JIT_ENTRY+0x264>
// 24e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000250:  R_X86_64_64  PySuper_Type
// 258: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025a:  R_X86_64_64  _Py_Dealloc
// 262: ff d0                         callq   *%rax
// 264: 48 8b 45 00                   movq    (%rbp), %rax
// 268: 48 85 c0                      testq   %rax, %rax
// 26b: 7f 22                         jg      0x28f <_JIT_ENTRY+0x28f>
// 26d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000026f:  R_X86_64_64  .rodata.str1.1
// 277: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000279:  R_X86_64_64  _Py_NegativeRefcount
// 281: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 286: 48 89 ea                      movq    %rbp, %rdx
// 289: ff d0                         callq   *%rax
// 28b: 48 8b 45 00                   movq    (%rbp), %rax
// 28f: 85 c0                         testl   %eax, %eax
// 291: 78 21                         js      0x2b4 <_JIT_ENTRY+0x2b4>
// 293: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000295:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 29d: ff d0                         callq   *%rax
// 29f: 48 ff 4d 00                   decq    (%rbp)
// 2a3: 75 0f                         jne     0x2b4 <_JIT_ENTRY+0x2b4>
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _Py_Dealloc
// 2af: 48 89 ef                      movq    %rbp, %rdi
// 2b2: ff d0                         callq   *%rax
// 2b4: 49 8b 04 24                   movq    (%r12), %rax
// 2b8: 48 85 c0                      testq   %rax, %rax
// 2bb: 7f 22                         jg      0x2df <_JIT_ENTRY+0x2df>
// 2bd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002bf:  R_X86_64_64  .rodata.str1.1
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _Py_NegativeRefcount
// 2d1: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 2d6: 4c 89 e2                      movq    %r12, %rdx
// 2d9: ff d0                         callq   *%rax
// 2db: 49 8b 04 24                   movq    (%r12), %rax
// 2df: 85 c0                         testl   %eax, %eax
// 2e1: 78 21                         js      0x304 <_JIT_ENTRY+0x304>
// 2e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ed: ff d0                         callq   *%rax
// 2ef: 49 ff 0c 24                   decq    (%r12)
// 2f3: 75 0f                         jne     0x304 <_JIT_ENTRY+0x304>
// 2f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f7:  R_X86_64_64  _Py_Dealloc
// 2ff: 4c 89 e7                      movq    %r12, %rdi
// 302: ff d0                         callq   *%rax
// 304: 4d 89 f4                      movq    %r14, %r12
// 307: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 30c: 48 85 c0                      testq   %rax, %rax
// 30f: 0f 84 3a fe ff ff             je      0x14f <_JIT_ENTRY+0x14f>
// 315: 49 89 47 e8                   movq    %rax, -0x18(%r15)
// 319: 49 83 c7 f0                   addq    $-0x10, %r15
// 31d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031f:  R_X86_64_64  _JIT_CONTINUE
// 327: 48 89 df                      movq    %rbx, %rdi
// 32a: 4c 89 fe                      movq    %r15, %rsi
// 32d: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 332: 48 83 c4 18                   addq    $0x18, %rsp
// 336: 5b                            popq    %rbx
// 337: 41 5c                         popq    %r12
// 339: 41 5d                         popq    %r13
// 33b: 41 5e                         popq    %r14
// 33d: 41 5f                         popq    %r15
// 33f: 5d                            popq    %rbp
// 340: ff e0                         jmpq    *%rax
// 342: 
static const unsigned char _STORE_SUBSCRplus_LOAD_SUPER_ATTR_ATTR_code_body[835] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x7e, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x74, 0x24, 0xe8, 0x85, 0xc0, 0x79, 0x43, 0xeb, 0x52, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x4d, 0x8d, 0x74, 0x24, 0xe8, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x1e, 0x4d, 0x89, 0xe7, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x2d, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xa0, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x89, 0xe7, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xd3, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x6f, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6f, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x67, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x3a, 0xfe, 0xff, 0xff, 0x49, 0x89, 0x47, 0xe8, 0x49, 0x83, 0xc7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_LOAD_SUPER_ATTR_ATTR_code_holes[32] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1e1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x295, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x31f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_SUPER_ATTR_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_SUPER_ATTR_ATTR_data_holes[1];

// _STORE_SUBSCRplus_LOAD_SUPER_ATTR_METHOD
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_LOAD_SUPER_ATTR_METHOD.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f6                      movq    %rsi, %r14
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 fa                      movq    %r15, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 07                      movq    (%r15), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 fa                      movq    %r15, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 07                      movq    (%r15), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0f                      decq    (%r15)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 ff                      movq    %r15, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 1b                         je      0x161 <_JIT_ENTRY+0x161>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 14c: 74 2a                         je      0x178 <_JIT_ENTRY+0x178>
// 14e: 49 29 de                      subq    %rbx, %r14
// 151: 49 83 c6 a0                   addq    $-0x60, %r14
// 155: 49 c1 ee 03                   shrq    $0x3, %r14
// 159: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 15d: 31 c0                         xorl    %eax, %eax
// 15f: eb 60                         jmp     0x1c1 <_JIT_ENTRY+0x1c1>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_Dealloc
// 16b: 4c 89 e7                      movq    %r12, %rdi
// 16e: ff d0                         callq   *%rax
// 170: 85 ed                         testl   %ebp, %ebp
// 172: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 176: 75 d6                         jne     0x14e <_JIT_ENTRY+0x14e>
// 178: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000017a:  R_X86_64_64  PySuper_Type
// 182: 4d 39 6e e8                   cmpq    %r13, -0x18(%r14)
// 186: 75 11                         jne     0x199 <_JIT_ENTRY+0x199>
// 188: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// 18c: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 190: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// 197: 75 37                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 199: 49 29 de                      subq    %rbx, %r14
// 19c: 49 83 c6 b8                   addq    $-0x48, %r14
// 1a0: 49 c1 ee 03                   shrq    $0x3, %r14
// 1a4: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1a8: 48 8b 03                      movq    (%rbx), %rax
// 1ab: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ad:  R_X86_64_64  _JIT_TARGET
// 1b5: 89 c9                         movl    %ecx, %ecx
// 1b7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1bb: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1c1: 48 83 c4 18                   addq    $0x18, %rsp
// 1c5: 5b                            popq    %rbx
// 1c6: 41 5c                         popq    %r12
// 1c8: 41 5d                         popq    %r13
// 1ca: 41 5e                         popq    %r14
// 1cc: 41 5f                         popq    %r15
// 1ce: 5d                            popq    %rbp
// 1cf: c3                            retq
// 1d0: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 1d4: 48 8b 03                      movq    (%rbx), %rax
// 1d7: 48 8b 40 20                   movq    0x20(%rax), %rax
// 1db: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001dd:  R_X86_64_64  _JIT_OPARG
// 1e5: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// 1eb: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 1f0: c7 44 24 0c 00 00 00 00       movl    $0x0, 0xc(%rsp)
// 1f8: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 1fd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ff:  R_X86_64_64  PyObject_GenericGetAttr
// 207: 31 f6                         xorl    %esi, %esi
// 209: 48 39 88 90 00 00 00          cmpq    %rcx, 0x90(%rax)
// 210: 48 8d 4c 24 0c                leaq    0xc(%rsp), %rcx
// 215: 48 0f 45 ce                   cmovneq %rsi, %rcx
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _PySuper_Lookup
// 223: 48 89 ef                      movq    %rbp, %rdi
// 226: 4c 89 e6                      movq    %r12, %rsi
// 229: ff d0                         callq   *%rax
// 22b: 49 89 c7                      movq    %rax, %r15
// 22e: 49 8b 45 00                   movq    (%r13), %rax
// 232: 48 85 c0                      testq   %rax, %rax
// 235: 7f 22                         jg      0x259 <_JIT_ENTRY+0x259>
// 237: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000239:  R_X86_64_64  .rodata.str1.1
// 241: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000243:  R_X86_64_64  _Py_NegativeRefcount
// 24b: be 18 06 00 00                movl    $0x618, %esi            # imm = 0x618
// 250: 4c 89 ea                      movq    %r13, %rdx
// 253: ff d0                         callq   *%rax
// 255: 49 8b 45 00                   movq    (%r13), %rax
// 259: 85 c0                         testl   %eax, %eax
// 25b: 78 28                         js      0x285 <_JIT_ENTRY+0x285>
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 267: ff d0                         callq   *%rax
// 269: 49 ff 4d 00                   decq    (%r13)
// 26d: 75 16                         jne     0x285 <_JIT_ENTRY+0x285>
// 26f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000271:  R_X86_64_64  PySuper_Type
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_Dealloc
// 283: ff d0                         callq   *%rax
// 285: 48 8b 45 00                   movq    (%rbp), %rax
// 289: 48 85 c0                      testq   %rax, %rax
// 28c: 7f 22                         jg      0x2b0 <_JIT_ENTRY+0x2b0>
// 28e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000290:  R_X86_64_64  .rodata.str1.1
// 298: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029a:  R_X86_64_64  _Py_NegativeRefcount
// 2a2: be 19 06 00 00                movl    $0x619, %esi            # imm = 0x619
// 2a7: 48 89 ea                      movq    %rbp, %rdx
// 2aa: ff d0                         callq   *%rax
// 2ac: 48 8b 45 00                   movq    (%rbp), %rax
// 2b0: 85 c0                         testl   %eax, %eax
// 2b2: 78 21                         js      0x2d5 <_JIT_ENTRY+0x2d5>
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2be: ff d0                         callq   *%rax
// 2c0: 48 ff 4d 00                   decq    (%rbp)
// 2c4: 75 0f                         jne     0x2d5 <_JIT_ENTRY+0x2d5>
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _Py_Dealloc
// 2d0: 48 89 ef                      movq    %rbp, %rdi
// 2d3: ff d0                         callq   *%rax
// 2d5: 4d 85 ff                      testq   %r15, %r15
// 2d8: 0f 84 8b 00 00 00             je      0x369 <_JIT_ENTRY+0x369>
// 2de: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 2e2: 83 7c 24 0c 00                cmpl    $0x0, 0xc(%rsp)
// 2e7: 75 53                         jne     0x33c <_JIT_ENTRY+0x33c>
// 2e9: 49 8b 04 24                   movq    (%r12), %rax
// 2ed: 48 85 c0                      testq   %rax, %rax
// 2f0: 7f 22                         jg      0x314 <_JIT_ENTRY+0x314>
// 2f2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002f4:  R_X86_64_64  .rodata.str1.1
// 2fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fe:  R_X86_64_64  _Py_NegativeRefcount
// 306: be 21 06 00 00                movl    $0x621, %esi            # imm = 0x621
// 30b: 4c 89 e2                      movq    %r12, %rdx
// 30e: ff d0                         callq   *%rax
// 310: 49 8b 04 24                   movq    (%r12), %rax
// 314: 85 c0                         testl   %eax, %eax
// 316: 78 21                         js      0x339 <_JIT_ENTRY+0x339>
// 318: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 322: ff d0                         callq   *%rax
// 324: 49 ff 0c 24                   decq    (%r12)
// 328: 75 0f                         jne     0x339 <_JIT_ENTRY+0x339>
// 32a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000032c:  R_X86_64_64  _Py_Dealloc
// 334: 4c 89 e7                      movq    %r12, %rdi
// 337: ff d0                         callq   *%rax
// 339: 45 31 e4                      xorl    %r12d, %r12d
// 33c: 4d 89 7e e8                   movq    %r15, -0x18(%r14)
// 340: 4d 89 66 f0                   movq    %r12, -0x10(%r14)
// 344: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000346:  R_X86_64_64  _JIT_CONTINUE
// 34e: 48 89 df                      movq    %rbx, %rdi
// 351: 4c 89 ee                      movq    %r13, %rsi
// 354: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 359: 48 83 c4 18                   addq    $0x18, %rsp
// 35d: 5b                            popq    %rbx
// 35e: 41 5c                         popq    %r12
// 360: 41 5d                         popq    %r13
// 362: 41 5e                         popq    %r14
// 364: 41 5f                         popq    %r15
// 366: 5d                            popq    %rbp
// 367: ff e0                         jmpq    *%rax
// 369: 49 8b 04 24                   movq    (%r12), %rax
// 36d: 48 85 c0                      testq   %rax, %rax
// 370: 7f 22                         jg      0x394 <_JIT_ENTRY+0x394>
// 372: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000374:  R_X86_64_64  .rodata.str1.1
// 37c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000037e:  R_X86_64_64  _Py_NegativeRefcount
// 386: be 1b 06 00 00                movl    $0x61b, %esi            # imm = 0x61B
// 38b: 4c 89 e2                      movq    %r12, %rdx
// 38e: ff d0                         callq   *%rax
// 390: 49 8b 04 24                   movq    (%r12), %rax
// 394: 85 c0                         testl   %eax, %eax
// 396: 0f 88 b2 fd ff ff             js      0x14e <_JIT_ENTRY+0x14e>
// 39c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3a6: ff d0                         callq   *%rax
// 3a8: 49 ff 0c 24                   decq    (%r12)
// 3ac: 0f 85 9c fd ff ff             jne     0x14e <_JIT_ENTRY+0x14e>
// 3b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003b4:  R_X86_64_64  _Py_Dealloc
// 3bc: 4c 89 e7                      movq    %r12, %rdi
// 3bf: ff d0                         callq   *%rax
// 3c1: e9 88 fd ff ff                jmp     0x14e <_JIT_ENTRY+0x14e>
// 3c6: 
static const unsigned char _STORE_SUBSCRplus_LOAD_SUPER_ATTR_METHOD_code_body[967] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x2a, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xd6, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x6e, 0xe8, 0x75, 0x11, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0xc7, 0x44, 0x24, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x48, 0x39, 0x88, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x4c, 0x24, 0x0c, 0x48, 0x0f, 0x45, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x49, 0x89, 0xc7, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x19, 0x06, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x0f, 0x84, 0x8b, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x6e, 0xf8, 0x83, 0x7c, 0x24, 0x0c, 0x00, 0x75, 0x53, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x21, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x45, 0x31, 0xe4, 0x4d, 0x89, 0x7e, 0xe8, 0x4d, 0x89, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0xb2, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x9c, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x88, 0xfd, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_LOAD_SUPER_ATTR_METHOD_code_holes[37] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ff, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GenericGetAttr, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2f4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x32c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x346, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x374, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x37e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x39e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_LOAD_SUPER_ATTR_METHOD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_LOAD_SUPER_ATTR_METHOD_data_holes[1];

// _STORE_SUBSCRplus_MAKE_CELL
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_MAKE_CELL.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c6 e8                   addq    $-0x18, %r14
// 14e: 4d 89 f7                      movq    %r14, %r15
// 151: 49 29 df                      subq    %rbx, %r15
// 154: 49 83 c7 b8                   addq    $-0x48, %r15
// 158: 49 c1 ef 03                   shrq    $0x3, %r15
// 15c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  _JIT_OPARG
// 192: 0f b7 c0                      movzwl  %ax, %eax
// 195: 48 8b 7c c3 48                movq    0x48(%rbx,%rax,8), %rdi
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  PyCell_New
// 1a4: ff d0                         callq   *%rax
// 1a6: 48 85 c0                      testq   %rax, %rax
// 1a9: 74 a6                         je      0x151 <_JIT_ENTRY+0x151>
// 1ab: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ad:  R_X86_64_64  _JIT_OPARG
// 1b5: 0f b7 c9                      movzwl  %cx, %ecx
// 1b8: 4c 8b 7c cb 48                movq    0x48(%rbx,%rcx,8), %r15
// 1bd: 48 89 44 cb 48                movq    %rax, 0x48(%rbx,%rcx,8)
// 1c2: 4d 85 ff                      testq   %r15, %r15
// 1c5: 74 4d                         je      0x214 <_JIT_ENTRY+0x214>
// 1c7: 49 8b 07                      movq    (%r15), %rax
// 1ca: 48 85 c0                      testq   %rax, %rax
// 1cd: 7f 21                         jg      0x1f0 <_JIT_ENTRY+0x1f0>
// 1cf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d1:  R_X86_64_64  .rodata.str1.1+0x39
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_NegativeRefcount
// 1e3: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 1e8: 4c 89 fa                      movq    %r15, %rdx
// 1eb: ff d0                         callq   *%rax
// 1ed: 49 8b 07                      movq    (%r15), %rax
// 1f0: 85 c0                         testl   %eax, %eax
// 1f2: 78 20                         js      0x214 <_JIT_ENTRY+0x214>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fe: ff d0                         callq   *%rax
// 200: 49 ff 0f                      decq    (%r15)
// 203: 75 0f                         jne     0x214 <_JIT_ENTRY+0x214>
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_Dealloc
// 20f: 4c 89 ff                      movq    %r15, %rdi
// 212: ff d0                         callq   *%rax
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _JIT_CONTINUE
// 21e: 48 89 df                      movq    %rbx, %rdi
// 221: 4c 89 f6                      movq    %r14, %rsi
// 224: 48 8b 14 24                   movq    (%rsp), %rdx
// 228: 48 83 c4 08                   addq    $0x8, %rsp
// 22c: 5b                            popq    %rbx
// 22d: 41 5c                         popq    %r12
// 22f: 41 5d                         popq    %r13
// 231: 41 5e                         popq    %r14
// 233: 41 5f                         popq    %r15
// 235: 5d                            popq    %rbp
// 236: ff e0                         jmpq    *%rax
// 238: 
static const unsigned char _STORE_SUBSCRplus_MAKE_CELL_code_body[569] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x3e, 0x49, 0x83, 0xc6, 0xe8, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x7c, 0xc3, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xa6, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x7c, 0xcb, 0x48, 0x48, 0x89, 0x44, 0xcb, 0x48, 0x4d, 0x85, 0xff, 0x74, 0x4d, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_MAKE_CELL_code_holes[22] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCell_New, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_MAKE_CELL_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_MAKE_CELL_data_holes[1];

// _STORE_SUBSCRplus_MAKE_FUNCTION
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_MAKE_FUNCTION.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c6 e8                   addq    $-0x18, %r14
// 14e: 4d 89 f7                      movq    %r14, %r15
// 151: 49 29 df                      subq    %rbx, %r15
// 154: 49 83 c7 b8                   addq    $-0x48, %r15
// 158: 49 c1 ef 03                   shrq    $0x3, %r15
// 15c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 18c: 48 8b 73 18                   movq    0x18(%rbx), %rsi
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  PyFunction_New
// 19a: 4c 89 e7                      movq    %r12, %rdi
// 19d: ff d0                         callq   *%rax
// 19f: 49 89 c5                      movq    %rax, %r13
// 1a2: 49 8b 04 24                   movq    (%r12), %rax
// 1a6: 48 85 c0                      testq   %rax, %rax
// 1a9: 7e 06                         jle     0x1b1 <_JIT_ENTRY+0x1b1>
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 79 28                         jns     0x1d7 <_JIT_ENTRY+0x1d7>
// 1af: eb 47                         jmp     0x1f8 <_JIT_ENTRY+0x1f8>
// 1b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b3:  R_X86_64_64  .rodata.str1.1
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_NegativeRefcount
// 1c5: be 4e 0c 00 00                movl    $0xc4e, %esi            # imm = 0xC4E
// 1ca: 4c 89 e2                      movq    %r12, %rdx
// 1cd: ff d0                         callq   *%rax
// 1cf: 49 8b 04 24                   movq    (%r12), %rax
// 1d3: 85 c0                         testl   %eax, %eax
// 1d5: 78 21                         js      0x1f8 <_JIT_ENTRY+0x1f8>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e1: ff d0                         callq   *%rax
// 1e3: 49 ff 0c 24                   decq    (%r12)
// 1e7: 75 0f                         jne     0x1f8 <_JIT_ENTRY+0x1f8>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _Py_Dealloc
// 1f3: 4c 89 e7                      movq    %r12, %rdi
// 1f6: ff d0                         callq   *%rax
// 1f8: 4d 85 ed                      testq   %r13, %r13
// 1fb: 0f 84 50 ff ff ff             je      0x151 <_JIT_ENTRY+0x151>
// 201: 41 8b 74 24 5c                movl    0x5c(%r12), %esi
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _PyFunction_SetVersion
// 210: 4c 89 ef                      movq    %r13, %rdi
// 213: ff d0                         callq   *%rax
// 215: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_CONTINUE
// 223: 48 89 df                      movq    %rbx, %rdi
// 226: 4c 89 f6                      movq    %r14, %rsi
// 229: 48 8b 14 24                   movq    (%rsp), %rdx
// 22d: 48 83 c4 08                   addq    $0x8, %rsp
// 231: 5b                            popq    %rbx
// 232: 41 5c                         popq    %r12
// 234: 41 5d                         popq    %r13
// 236: 41 5e                         popq    %r14
// 238: 41 5f                         popq    %r15
// 23a: 5d                            popq    %rbp
// 23b: ff e0                         jmpq    *%rax
// 23d: 
static const unsigned char _STORE_SUBSCRplus_MAKE_FUNCTION_code_body[574] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x3e, 0x49, 0x83, 0xc6, 0xe8, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xc2, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x73, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4e, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x50, 0xff, 0xff, 0xff, 0x41, 0x8b, 0x74, 0x24, 0x5c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_MAKE_FUNCTION_code_holes[21] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_New, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFunction_SetVersion, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_MAKE_FUNCTION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_MAKE_FUNCTION_data_holes[1];

// _STORE_SUBSCRplus_MAP_ADD
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_MAP_ADD.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 11                         je      0x153 <_JIT_ENTRY+0x153>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 20                         je      0x16a <_JIT_ENTRY+0x16a>
// 14a: 49 83 c6 f8                   addq    $-0x8, %r14
// 14e: 4d 89 f7                      movq    %r14, %r15
// 151: eb 4a                         jmp     0x19d <_JIT_ENTRY+0x19d>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_Dealloc
// 15d: 4c 89 e7                      movq    %r12, %rdi
// 160: ff d0                         callq   *%rax
// 162: 85 ed                         testl   %ebp, %ebp
// 164: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 168: 75 e0                         jne     0x14a <_JIT_ENTRY+0x14a>
// 16a: 49 8b 76 f0                   movq    -0x10(%r14), %rsi
// 16e: 49 8b 56 f8                   movq    -0x8(%r14), %rdx
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _JIT_OPARG
// 17c: 0f b7 c0                      movzwl  %ax, %eax
// 17f: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 184: 29 c1                         subl    %eax, %ecx
// 186: 48 63 c1                      movslq  %ecx, %rax
// 189: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// 18d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018f:  R_X86_64_64  _PyDict_SetItem_Take2
// 197: ff d0                         callq   *%rax
// 199: 85 c0                         testl   %eax, %eax
// 19b: 74 20                         je      0x1bd <_JIT_ENTRY+0x1bd>
// 19d: 49 29 df                      subq    %rbx, %r15
// 1a0: 49 83 c7 a8                   addq    $-0x58, %r15
// 1a4: 49 c1 ef 03                   shrq    $0x3, %r15
// 1a8: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 1ac: 31 c0                         xorl    %eax, %eax
// 1ae: 48 83 c4 08                   addq    $0x8, %rsp
// 1b2: 5b                            popq    %rbx
// 1b3: 41 5c                         popq    %r12
// 1b5: 41 5d                         popq    %r13
// 1b7: 41 5e                         popq    %r14
// 1b9: 41 5f                         popq    %r15
// 1bb: 5d                            popq    %rbp
// 1bc: c3                            retq
// 1bd: 49 83 c6 f0                   addq    $-0x10, %r14
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _JIT_CONTINUE
// 1cb: 48 89 df                      movq    %rbx, %rdi
// 1ce: 4c 89 f6                      movq    %r14, %rsi
// 1d1: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d5: 48 83 c4 08                   addq    $0x8, %rsp
// 1d9: 5b                            popq    %rbx
// 1da: 41 5c                         popq    %r12
// 1dc: 41 5d                         popq    %r13
// 1de: 41 5e                         popq    %r14
// 1e0: 41 5f                         popq    %r15
// 1e2: 5d                            popq    %rbp
// 1e3: ff e0                         jmpq    *%rax
// 1e5: 
static const unsigned char _STORE_SUBSCRplus_MAP_ADD_code_body[486] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x11, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x20, 0x49, 0x83, 0xc6, 0xf8, 0x4d, 0x89, 0xf7, 0xeb, 0x4a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xe0, 0x49, 0x8b, 0x76, 0xf0, 0x49, 0x8b, 0x56, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x20, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xa8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_MAP_ADD_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_MAP_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_MAP_ADD_data_holes[1];

// _STORE_SUBSCRplus_MATCH_CLASS
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_MATCH_CLASS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 0f                         je      0xea <_JIT_ENTRY+0xea>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 1e                         jle     0x102 <_JIT_ENTRY+0x102>
// e4: 85 c0                         testl   %eax, %eax
// e6: 79 40                         jns     0x128 <_JIT_ENTRY+0x128>
// e8: eb 50                         jmp     0x13a <_JIT_ENTRY+0x13a>
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_Dealloc
// f4: 4c 89 ef                      movq    %r13, %rdi
// f7: ff d0                         callq   *%rax
// f9: 49 8b 04 24                   movq    (%r12), %rax
// fd: 48 85 c0                      testq   %rax, %rax
// 100: 7f e2                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 102: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000104:  R_X86_64_64  .rodata.str1.1
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_NegativeRefcount
// 116: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11b: 4c 89 e2                      movq    %r12, %rdx
// 11e: ff d0                         callq   *%rax
// 120: 49 8b 04 24                   movq    (%r12), %rax
// 124: 85 c0                         testl   %eax, %eax
// 126: 78 12                         js      0x13a <_JIT_ENTRY+0x13a>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 132: ff d0                         callq   *%rax
// 134: 49 ff 0c 24                   decq    (%r12)
// 138: 74 24                         je      0x15e <_JIT_ENTRY+0x15e>
// 13a: 85 ed                         testl   %ebp, %ebp
// 13c: 74 33                         je      0x171 <_JIT_ENTRY+0x171>
// 13e: 4c 29 f3                      subq    %r14, %rbx
// 141: 48 83 c3 a0                   addq    $-0x60, %rbx
// 145: 48 c1 eb 03                   shrq    $0x3, %rbx
// 149: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 14d: 31 c0                         xorl    %eax, %eax
// 14f: 48 83 c4 08                   addq    $0x8, %rsp
// 153: 5b                            popq    %rbx
// 154: 41 5c                         popq    %r12
// 156: 41 5d                         popq    %r13
// 158: 41 5e                         popq    %r14
// 15a: 41 5f                         popq    %r15
// 15c: 5d                            popq    %rbp
// 15d: c3                            retq
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_Dealloc
// 168: 4c 89 e7                      movq    %r12, %rdi
// 16b: ff d0                         callq   *%rax
// 16d: 85 ed                         testl   %ebp, %ebp
// 16f: 75 cd                         jne     0x13e <_JIT_ENTRY+0x13e>
// 171: 4c 8b 6b e0                   movq    -0x20(%rbx), %r13
// 175: 4c 8b 7b d0                   movq    -0x30(%rbx), %r15
// 179: 48 8b 6b d8                   movq    -0x28(%rbx), %rbp
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _JIT_OPARG
// 187: 0f b7 c8                      movzwl  %ax, %ecx
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _PyEval_MatchClass
// 194: 48 8b 3c 24                   movq    (%rsp), %rdi
// 198: 4c 89 fe                      movq    %r15, %rsi
// 19b: 48 89 ea                      movq    %rbp, %rdx
// 19e: 4d 89 e8                      movq    %r13, %r8
// 1a1: ff d0                         callq   *%rax
// 1a3: 49 89 c4                      movq    %rax, %r12
// 1a6: 49 8b 07                      movq    (%r15), %rax
// 1a9: 48 85 c0                      testq   %rax, %rax
// 1ac: 7e 06                         jle     0x1b4 <_JIT_ENTRY+0x1b4>
// 1ae: 85 c0                         testl   %eax, %eax
// 1b0: 79 27                         jns     0x1d9 <_JIT_ENTRY+0x1d9>
// 1b2: eb 45                         jmp     0x1f9 <_JIT_ENTRY+0x1f9>
// 1b4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b6:  R_X86_64_64  .rodata.str1.1
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _Py_NegativeRefcount
// 1c8: be 10 08 00 00                movl    $0x810, %esi            # imm = 0x810
// 1cd: 4c 89 fa                      movq    %r15, %rdx
// 1d0: ff d0                         callq   *%rax
// 1d2: 49 8b 07                      movq    (%r15), %rax
// 1d5: 85 c0                         testl   %eax, %eax
// 1d7: 78 20                         js      0x1f9 <_JIT_ENTRY+0x1f9>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e3: ff d0                         callq   *%rax
// 1e5: 49 ff 0f                      decq    (%r15)
// 1e8: 75 0f                         jne     0x1f9 <_JIT_ENTRY+0x1f9>
// 1ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ec:  R_X86_64_64  _Py_Dealloc
// 1f4: 4c 89 ff                      movq    %r15, %rdi
// 1f7: ff d0                         callq   *%rax
// 1f9: 48 8b 45 00                   movq    (%rbp), %rax
// 1fd: 48 85 c0                      testq   %rax, %rax
// 200: 7e 06                         jle     0x208 <_JIT_ENTRY+0x208>
// 202: 85 c0                         testl   %eax, %eax
// 204: 79 28                         jns     0x22e <_JIT_ENTRY+0x22e>
// 206: eb 47                         jmp     0x24f <_JIT_ENTRY+0x24f>
// 208: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020a:  R_X86_64_64  .rodata.str1.1
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_NegativeRefcount
// 21c: be 11 08 00 00                movl    $0x811, %esi            # imm = 0x811
// 221: 48 89 ea                      movq    %rbp, %rdx
// 224: ff d0                         callq   *%rax
// 226: 48 8b 45 00                   movq    (%rbp), %rax
// 22a: 85 c0                         testl   %eax, %eax
// 22c: 78 21                         js      0x24f <_JIT_ENTRY+0x24f>
// 22e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000230:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 238: ff d0                         callq   *%rax
// 23a: 48 ff 4d 00                   decq    (%rbp)
// 23e: 75 0f                         jne     0x24f <_JIT_ENTRY+0x24f>
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _Py_Dealloc
// 24a: 48 89 ef                      movq    %rbp, %rdi
// 24d: ff d0                         callq   *%rax
// 24f: 49 8b 45 00                   movq    (%r13), %rax
// 253: 48 85 c0                      testq   %rax, %rax
// 256: 7e 06                         jle     0x25e <_JIT_ENTRY+0x25e>
// 258: 85 c0                         testl   %eax, %eax
// 25a: 79 28                         jns     0x284 <_JIT_ENTRY+0x284>
// 25c: eb 38                         jmp     0x296 <_JIT_ENTRY+0x296>
// 25e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000260:  R_X86_64_64  .rodata.str1.1
// 268: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026a:  R_X86_64_64  _Py_NegativeRefcount
// 272: be 12 08 00 00                movl    $0x812, %esi            # imm = 0x812
// 277: 4c 89 ea                      movq    %r13, %rdx
// 27a: ff d0                         callq   *%rax
// 27c: 49 8b 45 00                   movq    (%r13), %rax
// 280: 85 c0                         testl   %eax, %eax
// 282: 78 12                         js      0x296 <_JIT_ENTRY+0x296>
// 284: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000286:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 28e: ff d0                         callq   *%rax
// 290: 49 ff 4d 00                   decq    (%r13)
// 294: 74 31                         je      0x2c7 <_JIT_ENTRY+0x2c7>
// 296: 4d 85 e4                      testq   %r12, %r12
// 299: 74 40                         je      0x2db <_JIT_ENTRY+0x2db>
// 29b: 4c 89 63 d0                   movq    %r12, -0x30(%rbx)
// 29f: 48 83 c3 d8                   addq    $-0x28, %rbx
// 2a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a5:  R_X86_64_64  _JIT_CONTINUE
// 2ad: 4c 89 f7                      movq    %r14, %rdi
// 2b0: 48 89 de                      movq    %rbx, %rsi
// 2b3: 48 8b 14 24                   movq    (%rsp), %rdx
// 2b7: 48 83 c4 08                   addq    $0x8, %rsp
// 2bb: 5b                            popq    %rbx
// 2bc: 41 5c                         popq    %r12
// 2be: 41 5d                         popq    %r13
// 2c0: 41 5e                         popq    %r14
// 2c2: 41 5f                         popq    %r15
// 2c4: 5d                            popq    %rbp
// 2c5: ff e0                         jmpq    *%rax
// 2c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c9:  R_X86_64_64  _Py_Dealloc
// 2d1: 4c 89 ef                      movq    %r13, %rdi
// 2d4: ff d0                         callq   *%rax
// 2d6: 4d 85 e4                      testq   %r12, %r12
// 2d9: 75 c0                         jne     0x29b <_JIT_ENTRY+0x29b>
// 2db: 48 8b 04 24                   movq    (%rsp), %rax
// 2df: 48 8b 40 68                   movq    0x68(%rax), %rax
// 2e3: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000002e5:  R_X86_64_64  _Py_NoneStruct
// 2ed: 48 85 c0                      testq   %rax, %rax
// 2f0: 74 a9                         je      0x29b <_JIT_ENTRY+0x29b>
// 2f2: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 2f7: 74 a2                         je      0x29b <_JIT_ENTRY+0x29b>
// 2f9: 48 83 c3 e8                   addq    $-0x18, %rbx
// 2fd: e9 3c fe ff ff                jmp     0x13e <_JIT_ENTRY+0x13e>
// 302: 
static const unsigned char _STORE_SUBSCRplus_MATCH_CLASS_code_body[771] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x24, 0x85, 0xed, 0x74, 0x33, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x75, 0xcd, 0x4c, 0x8b, 0x6b, 0xe0, 0x4c, 0x8b, 0x7b, 0xd0, 0x48, 0x8b, 0x6b, 0xd8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xea, 0x4d, 0x89, 0xe8, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x45, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x10, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x08, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x12, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x31, 0x4d, 0x85, 0xe4, 0x74, 0x40, 0x4c, 0x89, 0x63, 0xd0, 0x48, 0x83, 0xc3, 0xd8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xc0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x40, 0x68, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0xa9, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0xa2, 0x48, 0x83, 0xc3, 0xe8, 0xe9, 0x3c, 0xfe, 0xff, 0xff};
static const Hole _STORE_SUBSCRplus_MATCH_CLASS_code_holes[30] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchClass, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x230, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x26a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x286, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2a5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_MATCH_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_MATCH_CLASS_data_holes[1];

// _STORE_SUBSCRplus_MATCH_KEYS
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_MATCH_KEYS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c6 e8                   addq    $-0x18, %r14
// 14e: 4d 89 f7                      movq    %r14, %r15
// 151: 49 29 df                      subq    %rbx, %r15
// 154: 49 83 c7 b8                   addq    $-0x48, %r15
// 158: 49 c1 ef 03                   shrq    $0x3, %r15
// 15c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 49 8b 76 f0                   movq    -0x10(%r14), %rsi
// 18c: 49 8b 56 f8                   movq    -0x8(%r14), %rdx
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _PyEval_MatchKeys
// 19a: 4c 8b 24 24                   movq    (%rsp), %r12
// 19e: 4c 89 e7                      movq    %r12, %rdi
// 1a1: ff d0                         callq   *%rax
// 1a3: 48 85 c0                      testq   %rax, %rax
// 1a6: 74 a9                         je      0x151 <_JIT_ENTRY+0x151>
// 1a8: 49 89 06                      movq    %rax, (%r14)
// 1ab: 49 83 c6 08                   addq    $0x8, %r14
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _JIT_CONTINUE
// 1b9: 48 89 df                      movq    %rbx, %rdi
// 1bc: 4c 89 f6                      movq    %r14, %rsi
// 1bf: 4c 89 e2                      movq    %r12, %rdx
// 1c2: 48 83 c4 08                   addq    $0x8, %rsp
// 1c6: 5b                            popq    %rbx
// 1c7: 41 5c                         popq    %r12
// 1c9: 41 5d                         popq    %r13
// 1cb: 41 5e                         popq    %r14
// 1cd: 41 5f                         popq    %r15
// 1cf: 5d                            popq    %rbp
// 1d0: ff e0                         jmpq    *%rax
// 1d2: 
static const unsigned char _STORE_SUBSCRplus_MATCH_KEYS_code_body[467] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x3e, 0x49, 0x83, 0xc6, 0xe8, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xc2, 0x49, 0x8b, 0x76, 0xf0, 0x49, 0x8b, 0x56, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x24, 0x24, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xa9, 0x49, 0x89, 0x06, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_MATCH_KEYS_code_holes[16] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchKeys, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_MATCH_KEYS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_MATCH_KEYS_data_holes[1];

// _STORE_SUBSCRplus_MATCH_MAPPING
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_MATCH_MAPPING.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 185: 48 8b 40 08                   movq    0x8(%rax), %rax
// 189: f6 80 a8 00 00 00 40          testb   $0x40, 0xa8(%rax)
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_FalseStruct
// 19a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019c:  R_X86_64_64  _Py_TrueStruct
// 1a4: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 1a8: 48 89 0b                      movq    %rcx, (%rbx)
// 1ab: 48 83 c3 08                   addq    $0x8, %rbx
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _JIT_CONTINUE
// 1b9: 4c 89 f7                      movq    %r14, %rdi
// 1bc: 48 89 de                      movq    %rbx, %rsi
// 1bf: 48 8b 14 24                   movq    (%rsp), %rdx
// 1c3: 48 83 c4 08                   addq    $0x8, %rsp
// 1c7: 5b                            popq    %rbx
// 1c8: 41 5c                         popq    %r12
// 1ca: 41 5d                         popq    %r13
// 1cc: 41 5e                         popq    %r14
// 1ce: 41 5f                         popq    %r15
// 1d0: 5d                            popq    %rbp
// 1d1: ff e0                         jmpq    *%rax
// 1d3: 
static const unsigned char _STORE_SUBSCRplus_MATCH_MAPPING_code_body[468] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x0b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_MATCH_MAPPING_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_MATCH_MAPPING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_MATCH_MAPPING_data_holes[1];

// _STORE_SUBSCRplus_MATCH_SEQUENCE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_MATCH_SEQUENCE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 185: 48 8b 40 08                   movq    0x8(%rax), %rax
// 189: f6 80 a8 00 00 00 20          testb   $0x20, 0xa8(%rax)
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _Py_FalseStruct
// 19a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019c:  R_X86_64_64  _Py_TrueStruct
// 1a4: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 1a8: 48 89 0b                      movq    %rcx, (%rbx)
// 1ab: 48 83 c3 08                   addq    $0x8, %rbx
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _JIT_CONTINUE
// 1b9: 4c 89 f7                      movq    %r14, %rdi
// 1bc: 48 89 de                      movq    %rbx, %rsi
// 1bf: 48 8b 14 24                   movq    (%rsp), %rdx
// 1c3: 48 83 c4 08                   addq    $0x8, %rsp
// 1c7: 5b                            popq    %rbx
// 1c8: 41 5c                         popq    %r12
// 1ca: 41 5d                         popq    %r13
// 1cc: 41 5e                         popq    %r14
// 1ce: 41 5f                         popq    %r15
// 1d0: 5d                            popq    %rbp
// 1d1: ff e0                         jmpq    *%rax
// 1d3: 
static const unsigned char _STORE_SUBSCRplus_MATCH_SEQUENCE_code_body[468] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x0b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_MATCH_SEQUENCE_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_MATCH_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_MATCH_SEQUENCE_data_holes[1];

// _STORE_SUBSCRplus_NOP
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_NOP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _JIT_CONTINUE
// 18b: 4c 89 f7                      movq    %r14, %rdi
// 18e: 48 89 de                      movq    %rbx, %rsi
// 191: 48 8b 14 24                   movq    (%rsp), %rdx
// 195: 48 83 c4 08                   addq    $0x8, %rsp
// 199: 5b                            popq    %rbx
// 19a: 41 5c                         popq    %r12
// 19c: 41 5d                         popq    %r13
// 19e: 41 5e                         popq    %r14
// 1a0: 41 5f                         popq    %r15
// 1a2: 5d                            popq    %rbp
// 1a3: ff e0                         jmpq    *%rax
// 1a5: 
static const unsigned char _STORE_SUBSCRplus_NOP_code_body[422] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_NOP_code_holes[15] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_NOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_NOP_data_holes[1];

// _STORE_SUBSCRplus_POP_EXCEPT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_POP_EXCEPT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 185: 48 83 c3 f8                   addq    $-0x8, %rbx
// 189: 4c 8b 3c 24                   movq    (%rsp), %r15
// 18d: 49 8b 4f 70                   movq    0x70(%r15), %rcx
// 191: 4c 8b 21                      movq    (%rcx), %r12
// 194: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000196:  R_X86_64_64  _Py_NoneStruct
// 19e: 31 f6                         xorl    %esi, %esi
// 1a0: 48 39 d0                      cmpq    %rdx, %rax
// 1a3: 48 0f 45 f0                   cmovneq %rax, %rsi
// 1a7: 48 89 31                      movq    %rsi, (%rcx)
// 1aa: 4d 85 e4                      testq   %r12, %r12
// 1ad: 74 56                         je      0x205 <_JIT_ENTRY+0x205>
// 1af: 49 8b 04 24                   movq    (%r12), %rax
// 1b3: 48 85 c0                      testq   %rax, %rax
// 1b6: 7e 06                         jle     0x1be <_JIT_ENTRY+0x1be>
// 1b8: 85 c0                         testl   %eax, %eax
// 1ba: 79 28                         jns     0x1e4 <_JIT_ENTRY+0x1e4>
// 1bc: eb 47                         jmp     0x205 <_JIT_ENTRY+0x205>
// 1be: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c0:  R_X86_64_64  .rodata.str1.1+0x39
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_NegativeRefcount
// 1d2: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 1d7: 4c 89 e2                      movq    %r12, %rdx
// 1da: ff d0                         callq   *%rax
// 1dc: 49 8b 04 24                   movq    (%r12), %rax
// 1e0: 85 c0                         testl   %eax, %eax
// 1e2: 78 21                         js      0x205 <_JIT_ENTRY+0x205>
// 1e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ee: ff d0                         callq   *%rax
// 1f0: 49 ff 0c 24                   decq    (%r12)
// 1f4: 75 0f                         jne     0x205 <_JIT_ENTRY+0x205>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_Dealloc
// 200: 4c 89 e7                      movq    %r12, %rdi
// 203: ff d0                         callq   *%rax
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _JIT_CONTINUE
// 20f: 4c 89 f7                      movq    %r14, %rdi
// 212: 48 89 de                      movq    %rbx, %rsi
// 215: 4c 89 fa                      movq    %r15, %rdx
// 218: 48 83 c4 08                   addq    $0x8, %rsp
// 21c: 5b                            popq    %rbx
// 21d: 41 5c                         popq    %r12
// 21f: 41 5d                         popq    %r13
// 221: 41 5e                         popq    %r14
// 223: 41 5f                         popq    %r15
// 225: 5d                            popq    %rbp
// 226: ff e0                         jmpq    *%rax
// 228: 
static const unsigned char _STORE_SUBSCRplus_POP_EXCEPT_code_body[553] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x8b, 0x3c, 0x24, 0x49, 0x8b, 0x4f, 0x70, 0x4c, 0x8b, 0x21, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x48, 0x39, 0xd0, 0x48, 0x0f, 0x45, 0xf0, 0x48, 0x89, 0x31, 0x4d, 0x85, 0xe4, 0x74, 0x56, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_POP_EXCEPT_code_holes[20] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_POP_EXCEPT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_POP_EXCEPT_data_holes[1];

// _STORE_SUBSCRplus_POP_FRAME
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_POP_FRAME.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f7                      movq    %rsi, %r15
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 48 8b 5e e8                   movq    -0x18(%rsi), %rbx
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 48 89 da                      movq    %rbx, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 48 8b 03                      movq    (%rbx), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 48 89 da                      movq    %rbx, %rdx
// 62: ff d0                         callq   *%rax
// 64: 48 8b 03                      movq    (%rbx), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 48 ff 0b                      decq    (%rbx)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 48 89 df                      movq    %rbx, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 49 8d 5f e8                   leaq    -0x18(%r15), %rbx
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 49 8d 5f e8                   leaq    -0x18(%r15), %rbx
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4c 0f 44 fb                   cmoveq  %rbx, %r15
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4d 29 f7                      subq    %r14, %r15
// 14d: 49 83 c7 a0                   addq    $-0x60, %r15
// 151: 49 c1 ef 03                   shrq    $0x3, %r15
// 155: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 4c 0f 44 fb                   cmoveq  %rbx, %r15
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 185: 49 83 c7 f8                   addq    $-0x8, %r15
// 189: 4d 29 f7                      subq    %r14, %r15
// 18c: 49 83 c7 b8                   addq    $-0x48, %r15
// 190: 49 c1 ef 03                   shrq    $0x3, %r15
// 194: 45 89 7e 40                   movl    %r15d, 0x40(%r14)
// 198: 4c 8b 3c 24                   movq    (%rsp), %r15
// 19c: 41 ff 47 24                   incl    0x24(%r15)
// 1a0: 49 8b 5e 08                   movq    0x8(%r14), %rbx
// 1a4: 49 89 5f 40                   movq    %rbx, 0x40(%r15)
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _PyEval_FrameClearAndPop
// 1b2: 4c 89 ff                      movq    %r15, %rdi
// 1b5: 4c 89 f6                      movq    %r14, %rsi
// 1b8: ff d0                         callq   *%rax
// 1ba: 48 63 43 40                   movslq  0x40(%rbx), %rax
// 1be: 4c 89 64 c3 48                movq    %r12, 0x48(%rbx,%rax,8)
// 1c3: 48 8d 34 c3                   leaq    (%rbx,%rax,8), %rsi
// 1c7: 48 83 c6 50                   addq    $0x50, %rsi
// 1cb: c7 43 40 ff ff ff ff          movl    $0xffffffff, 0x40(%rbx) # imm = 0xFFFFFFFF
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _JIT_CONTINUE
// 1dc: 48 89 df                      movq    %rbx, %rdi
// 1df: 4c 89 fa                      movq    %r15, %rdx
// 1e2: 48 83 c4 08                   addq    $0x8, %rsp
// 1e6: 5b                            popq    %rbx
// 1e7: 41 5c                         popq    %r12
// 1e9: 41 5d                         popq    %r13
// 1eb: 41 5e                         popq    %r14
// 1ed: 41 5f                         popq    %r15
// 1ef: 5d                            popq    %rbp
// 1f0: ff e0                         jmpq    *%rax
// 1f2: 
static const unsigned char _STORE_SUBSCRplus_POP_FRAME_code_body[499] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x5e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x89, 0xc5, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x49, 0x8d, 0x5f, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x5f, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xfb, 0x74, 0x37, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xa0, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xfb, 0x75, 0xc9, 0x4d, 0x8b, 0x67, 0xf8, 0x49, 0x83, 0xc7, 0xf8, 0x4d, 0x29, 0xf7, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x45, 0x89, 0x7e, 0x40, 0x4c, 0x8b, 0x3c, 0x24, 0x41, 0xff, 0x47, 0x24, 0x49, 0x8b, 0x5e, 0x08, 0x49, 0x89, 0x5f, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0xff, 0xd0, 0x48, 0x63, 0x43, 0x40, 0x4c, 0x89, 0x64, 0xc3, 0x48, 0x48, 0x8d, 0x34, 0xc3, 0x48, 0x83, 0xc6, 0x50, 0xc7, 0x43, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_POP_FRAME_code_holes[16] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FrameClearAndPop, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_POP_FRAME_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_POP_FRAME_data_holes[1];

// _STORE_SUBSCRplus_POP_TOP
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_POP_TOP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 4c 8b 7b f8                   movq    -0x8(%rbx), %r15
// 185: 49 8b 07                      movq    (%r15), %rax
// 188: 48 85 c0                      testq   %rax, %rax
// 18b: 7e 0a                         jle     0x197 <_JIT_ENTRY+0x197>
// 18d: 48 83 c3 f8                   addq    $-0x8, %rbx
// 191: 85 c0                         testl   %eax, %eax
// 193: 79 2b                         jns     0x1c0 <_JIT_ENTRY+0x1c0>
// 195: eb 49                         jmp     0x1e0 <_JIT_ENTRY+0x1e0>
// 197: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000199:  R_X86_64_64  .rodata.str1.1
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_NegativeRefcount
// 1ab: be 54 00 00 00                movl    $0x54, %esi
// 1b0: 4c 89 fa                      movq    %r15, %rdx
// 1b3: ff d0                         callq   *%rax
// 1b5: 49 8b 07                      movq    (%r15), %rax
// 1b8: 48 83 c3 f8                   addq    $-0x8, %rbx
// 1bc: 85 c0                         testl   %eax, %eax
// 1be: 78 20                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ca: ff d0                         callq   *%rax
// 1cc: 49 ff 0f                      decq    (%r15)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 ff                      movq    %r15, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _JIT_CONTINUE
// 1ea: 4c 89 f7                      movq    %r14, %rdi
// 1ed: 48 89 de                      movq    %rbx, %rsi
// 1f0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1f4: 48 83 c4 08                   addq    $0x8, %rsp
// 1f8: 5b                            popq    %rbx
// 1f9: 41 5c                         popq    %r12
// 1fb: 41 5d                         popq    %r13
// 1fd: 41 5e                         popq    %r14
// 1ff: 41 5f                         popq    %r15
// 201: 5d                            popq    %rbp
// 202: ff e0                         jmpq    *%rax
// 204: 
static const unsigned char _STORE_SUBSCRplus_POP_TOP_code_body[517] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x4c, 0x8b, 0x7b, 0xf8, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x79, 0x2b, 0xeb, 0x49, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_POP_TOP_code_holes[19] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_POP_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_POP_TOP_data_holes[1];

// _STORE_SUBSCRplus_PUSH_EXC_INFO
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_PUSH_EXC_INFO.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 4c 8b 7b f8                   movq    -0x8(%rbx), %r15
// 185: 48 8b 2c 24                   movq    (%rsp), %rbp
// 189: 4c 8b 65 70                   movq    0x70(%rbp), %r12
// 18d: 4d 8b 2c 24                   movq    (%r12), %r13
// 191: 41 8b 07                      movl    (%r15), %eax
// 194: ff c0                         incl    %eax
// 196: 74 0f                         je      0x1a7 <_JIT_ENTRY+0x1a7>
// 198: 41 89 07                      movl    %eax, (%r15)
// 19b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019d:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1a5: ff d0                         callq   *%rax
// 1a7: 4d 85 ed                      testq   %r13, %r13
// 1aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ac:  R_X86_64_64  _Py_NoneStruct
// 1b4: 49 0f 45 c5                   cmovneq %r13, %rax
// 1b8: 4d 89 3c 24                   movq    %r15, (%r12)
// 1bc: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1c0: 4c 89 3b                      movq    %r15, (%rbx)
// 1c3: 48 83 c3 08                   addq    $0x8, %rbx
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _JIT_CONTINUE
// 1d1: 4c 89 f7                      movq    %r14, %rdi
// 1d4: 48 89 de                      movq    %rbx, %rsi
// 1d7: 48 89 ea                      movq    %rbp, %rdx
// 1da: 48 83 c4 08                   addq    $0x8, %rsp
// 1de: 5b                            popq    %rbx
// 1df: 41 5c                         popq    %r12
// 1e1: 41 5d                         popq    %r13
// 1e3: 41 5e                         popq    %r14
// 1e5: 41 5f                         popq    %r15
// 1e7: 5d                            popq    %rbp
// 1e8: ff e0                         jmpq    *%rax
// 1ea: 
static const unsigned char _STORE_SUBSCRplus_PUSH_EXC_INFO_code_body[491] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x4c, 0x8b, 0x7b, 0xf8, 0x48, 0x8b, 0x2c, 0x24, 0x4c, 0x8b, 0x65, 0x70, 0x4d, 0x8b, 0x2c, 0x24, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x0f, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x0f, 0x45, 0xc5, 0x4d, 0x89, 0x3c, 0x24, 0x48, 0x89, 0x43, 0xf8, 0x4c, 0x89, 0x3b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_PUSH_EXC_INFO_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_PUSH_EXC_INFO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_PUSH_EXC_INFO_data_holes[1];

// _STORE_SUBSCRplus_PUSH_FRAME
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_PUSH_FRAME.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 49 89 ff                      movq    %rdi, %r15
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 48 8b 5e e8                   movq    -0x18(%rsi), %rbx
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 48 89 da                      movq    %rbx, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 48 8b 03                      movq    (%rbx), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 48 89 da                      movq    %rbx, %rdx
// 62: ff d0                         callq   *%rax
// 64: 48 8b 03                      movq    (%rbx), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 48 ff 0b                      decq    (%rbx)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 48 89 df                      movq    %rbx, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 49 8d 5e e8                   leaq    -0x18(%r14), %rbx
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 49 8d 5e e8                   leaq    -0x18(%r14), %rbx
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4c 0f 44 f3                   cmoveq  %rbx, %r14
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4d 29 fe                      subq    %r15, %r14
// 14d: 49 83 c6 a0                   addq    $-0x60, %r14
// 151: 49 c1 ee 03                   shrq    $0x3, %r14
// 155: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 4c 0f 44 f3                   cmoveq  %rbx, %r14
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 49 8b 7e f8                   movq    -0x8(%r14), %rdi
// 185: 49 83 c6 f8                   addq    $-0x8, %r14
// 189: 4d 29 fe                      subq    %r15, %r14
// 18c: 49 83 c6 b8                   addq    $-0x48, %r14
// 190: 49 c1 ee 03                   shrq    $0x3, %r14
// 194: 45 89 77 40                   movl    %r14d, 0x40(%r15)
// 198: 4c 89 7f 08                   movq    %r15, 0x8(%rdi)
// 19c: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a0: 48 89 7a 40                   movq    %rdi, 0x40(%rdx)
// 1a4: ff 4a 24                      decl    0x24(%rdx)
// 1a7: 48 63 47 40                   movslq  0x40(%rdi), %rax
// 1ab: 48 8d 34 c7                   leaq    (%rdi,%rax,8), %rsi
// 1af: 48 83 c6 48                   addq    $0x48, %rsi
// 1b3: c7 47 40 ff ff ff ff          movl    $0xffffffff, 0x40(%rdi) # imm = 0xFFFFFFFF
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _JIT_CONTINUE
// 1c4: 48 83 c4 08                   addq    $0x8, %rsp
// 1c8: 5b                            popq    %rbx
// 1c9: 41 5c                         popq    %r12
// 1cb: 41 5d                         popq    %r13
// 1cd: 41 5e                         popq    %r14
// 1cf: 41 5f                         popq    %r15
// 1d1: 5d                            popq    %rbp
// 1d2: ff e0                         jmpq    *%rax
// 1d4: 
static const unsigned char _STORE_SUBSCRplus_PUSH_FRAME_code_body[469] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x49, 0x89, 0xff, 0x4c, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x5e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x89, 0xc5, 0x48, 0x8b, 0x03, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x49, 0x8d, 0x5e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0x8d, 0x5e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xf3, 0x74, 0x37, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xf3, 0x75, 0xc9, 0x49, 0x8b, 0x7e, 0xf8, 0x49, 0x83, 0xc6, 0xf8, 0x4d, 0x29, 0xfe, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x45, 0x89, 0x77, 0x40, 0x4c, 0x89, 0x7f, 0x08, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x89, 0x7a, 0x40, 0xff, 0x4a, 0x24, 0x48, 0x63, 0x47, 0x40, 0x48, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x48, 0xc7, 0x47, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_PUSH_FRAME_code_holes[15] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_PUSH_FRAME_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_PUSH_FRAME_data_holes[1];

// _STORE_SUBSCRplus_PUSH_NULL
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_PUSH_NULL.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 c7 03 00 00 00 00          movq    $0x0, (%rbx)
// 188: 48 83 c3 08                   addq    $0x8, %rbx
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_CONTINUE
// 196: 4c 89 f7                      movq    %r14, %rdi
// 199: 48 89 de                      movq    %rbx, %rsi
// 19c: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a0: 48 83 c4 08                   addq    $0x8, %rsp
// 1a4: 5b                            popq    %rbx
// 1a5: 41 5c                         popq    %r12
// 1a7: 41 5d                         popq    %r13
// 1a9: 41 5e                         popq    %r14
// 1ab: 41 5f                         popq    %r15
// 1ad: 5d                            popq    %rbp
// 1ae: ff e0                         jmpq    *%rax
// 1b0: 
static const unsigned char _STORE_SUBSCRplus_PUSH_NULL_code_body[433] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0xc7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_PUSH_NULL_code_holes[15] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_PUSH_NULL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_PUSH_NULL_data_holes[1];

// _STORE_SUBSCRplus_RESUME_CHECK
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_RESUME_CHECK.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1b                         je      0x15d <_JIT_ENTRY+0x15d>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2a                         je      0x174 <_JIT_ENTRY+0x174>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: eb 73                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 ed                         testl   %ebp, %ebp
// 16e: 49 0f 44 df                   cmoveq  %r15, %rbx
// 172: 75 d6                         jne     0x14a <_JIT_ENTRY+0x14a>
// 174: 48 8b 14 24                   movq    (%rsp), %rdx
// 178: 48 8b 42 10                   movq    0x10(%rdx), %rax
// 17c: 48 8b 08                      movq    (%rax), %rcx
// 17f: 49 8b 06                      movq    (%r14), %rax
// 182: 48 3b 88 a8 00 00 00          cmpq    0xa8(%rax), %rcx
// 189: 75 20                         jne     0x1ab <_JIT_ENTRY+0x1ab>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _JIT_CONTINUE
// 195: 4c 89 f7                      movq    %r14, %rdi
// 198: 48 89 de                      movq    %rbx, %rsi
// 19b: 48 83 c4 08                   addq    $0x8, %rsp
// 19f: 5b                            popq    %rbx
// 1a0: 41 5c                         popq    %r12
// 1a2: 41 5d                         popq    %r13
// 1a4: 41 5e                         popq    %r14
// 1a6: 41 5f                         popq    %r15
// 1a8: 5d                            popq    %rbp
// 1a9: ff e0                         jmpq    *%rax
// 1ab: 4c 29 f3                      subq    %r14, %rbx
// 1ae: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1b2: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1b6: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1ba: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001bc:  R_X86_64_64  _JIT_TARGET
// 1c4: 89 c9                         movl    %ecx, %ecx
// 1c6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1ca: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1d0: 48 83 c4 08                   addq    $0x8, %rsp
// 1d4: 5b                            popq    %rbx
// 1d5: 41 5c                         popq    %r12
// 1d7: 41 5d                         popq    %r13
// 1d9: 41 5e                         popq    %r14
// 1db: 41 5f                         popq    %r15
// 1dd: 5d                            popq    %rbp
// 1de: c3                            retq
// 1df: 
static const unsigned char _STORE_SUBSCRplus_RESUME_CHECK_code_body[480] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2a, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x73, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x42, 0x10, 0x48, 0x8b, 0x08, 0x49, 0x8b, 0x06, 0x48, 0x3b, 0x88, 0xa8, 0x00, 0x00, 0x00, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _STORE_SUBSCRplus_RESUME_CHECK_code_holes[16] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_RESUME_CHECK_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_RESUME_CHECK_data_holes[1];

// _STORE_SUBSCRplus_SAVE_RETURN_OFFSET
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_SAVE_RETURN_OFFSET.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _JIT_OPARG
// 18b: 66 41 89 46 44                movw    %ax, 0x44(%r14)
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _JIT_CONTINUE
// 19a: 4c 89 f7                      movq    %r14, %rdi
// 19d: 48 89 de                      movq    %rbx, %rsi
// 1a0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1a4: 48 83 c4 08                   addq    $0x8, %rsp
// 1a8: 5b                            popq    %rbx
// 1a9: 41 5c                         popq    %r12
// 1ab: 41 5d                         popq    %r13
// 1ad: 41 5e                         popq    %r14
// 1af: 41 5f                         popq    %r15
// 1b1: 5d                            popq    %rbp
// 1b2: ff e0                         jmpq    *%rax
// 1b4: 
static const unsigned char _STORE_SUBSCRplus_SAVE_RETURN_OFFSET_code_body[437] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x41, 0x89, 0x46, 0x44, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_SAVE_RETURN_OFFSET_code_holes[16] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_SAVE_RETURN_OFFSET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_SAVE_RETURN_OFFSET_data_holes[1];

// _STORE_SUBSCRplus_SETUP_ANNOTATIONS
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_SETUP_ANNOTATIONS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f7                      movq    %rsi, %r15
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 f2                      movq    %r14, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 06                      movq    (%r14), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 f2                      movq    %r14, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 06                      movq    (%r14), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0e                      decq    (%r14)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 f7                      movq    %r14, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 6f e8                   leaq    -0x18(%r15), %r13
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 2f                         je      0x175 <_JIT_ENTRY+0x175>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 fd                   cmoveq  %r13, %r15
// 14c: 74 3e                         je      0x18c <_JIT_ENTRY+0x18c>
// 14e: 49 83 c7 e8                   addq    $-0x18, %r15
// 152: 4d 89 fd                      movq    %r15, %r13
// 155: 49 29 dd                      subq    %rbx, %r13
// 158: 49 83 c5 b8                   addq    $-0x48, %r13
// 15c: 49 c1 ed 03                   shrq    $0x3, %r13
// 160: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 164: 31 c0                         xorl    %eax, %eax
// 166: 48 83 c4 18                   addq    $0x18, %rsp
// 16a: 5b                            popq    %rbx
// 16b: 41 5c                         popq    %r12
// 16d: 41 5d                         popq    %r13
// 16f: 41 5e                         popq    %r14
// 171: 41 5f                         popq    %r15
// 173: 5d                            popq    %rbp
// 174: c3                            retq
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 e7                      movq    %r12, %rdi
// 182: ff d0                         callq   *%rax
// 184: 85 ed                         testl   %ebp, %ebp
// 186: 4d 0f 44 fd                   cmoveq  %r13, %r15
// 18a: 75 c2                         jne     0x14e <_JIT_ENTRY+0x14e>
// 18c: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 190: 48 85 ff                      testq   %rdi, %rdi
// 193: 0f 84 91 00 00 00             je      0x22a <_JIT_ENTRY+0x22a>
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  PyMapping_GetOptionalItem
// 1a3: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000001a5:  R_X86_64_64  _PyRuntime
// 1ad: 49 81 c4 a8 a7 00 00          addq    $0xa7a8, %r12           # imm = 0xA7A8
// 1b4: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1b9: 4c 89 e6                      movq    %r12, %rsi
// 1bc: ff d0                         callq   *%rax
// 1be: 85 c0                         testl   %eax, %eax
// 1c0: 78 93                         js      0x155 <_JIT_ENTRY+0x155>
// 1c2: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 1c7: 4d 85 f6                      testq   %r14, %r14
// 1ca: 0f 84 89 00 00 00             je      0x259 <_JIT_ENTRY+0x259>
// 1d0: 49 8b 06                      movq    (%r14), %rax
// 1d3: 48 85 c0                      testq   %rax, %rax
// 1d6: 7f 21                         jg      0x1f9 <_JIT_ENTRY+0x1f9>
// 1d8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001da:  R_X86_64_64  .rodata.str1.1
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: be 96 05 00 00                movl    $0x596, %esi            # imm = 0x596
// 1f1: 4c 89 f2                      movq    %r14, %rdx
// 1f4: ff d0                         callq   *%rax
// 1f6: 49 8b 06                      movq    (%r14), %rax
// 1f9: 85 c0                         testl   %eax, %eax
// 1fb: 0f 88 e4 00 00 00             js      0x2e5 <_JIT_ENTRY+0x2e5>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 20b: ff d0                         callq   *%rax
// 20d: 49 ff 0e                      decq    (%r14)
// 210: 0f 85 cf 00 00 00             jne     0x2e5 <_JIT_ENTRY+0x2e5>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_Dealloc
// 220: 4c 89 f7                      movq    %r14, %rdi
// 223: ff d0                         callq   *%rax
// 225: e9 bb 00 00 00                jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 22a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022c:  R_X86_64_64  PyExc_SystemError
// 234: 48 8b 30                      movq    (%rax), %rsi
// 237: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000239:  R_X86_64_64  .rodata.str1.1+0x39
// 241: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000243:  R_X86_64_64  _PyErr_Format
// 24b: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
// 250: 31 c0                         xorl    %eax, %eax
// 252: ff d1                         callq   *%rcx
// 254: e9 fc fe ff ff                jmp     0x155 <_JIT_ENTRY+0x155>
// 259: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025b:  R_X86_64_64  PyDict_New
// 263: ff d0                         callq   *%rax
// 265: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 26a: 48 85 c0                      testq   %rax, %rax
// 26d: 0f 84 e2 fe ff ff             je      0x155 <_JIT_ENTRY+0x155>
// 273: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 277: 4c 89 e6                      movq    %r12, %rsi
// 27a: 48 89 c2                      movq    %rax, %rdx
// 27d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027f:  R_X86_64_64  PyObject_SetItem
// 287: ff d0                         callq   *%rax
// 289: 89 c5                         movl    %eax, %ebp
// 28b: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 290: 49 8b 06                      movq    (%r14), %rax
// 293: 48 85 c0                      testq   %rax, %rax
// 296: 7f 21                         jg      0x2b9 <_JIT_ENTRY+0x2b9>
// 298: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000029a:  R_X86_64_64  .rodata.str1.1
// 2a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a4:  R_X86_64_64  _Py_NegativeRefcount
// 2ac: be 92 05 00 00                movl    $0x592, %esi            # imm = 0x592
// 2b1: 4c 89 f2                      movq    %r14, %rdx
// 2b4: ff d0                         callq   *%rax
// 2b6: 49 8b 06                      movq    (%r14), %rax
// 2b9: 85 c0                         testl   %eax, %eax
// 2bb: 78 20                         js      0x2dd <_JIT_ENTRY+0x2dd>
// 2bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002bf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2c7: ff d0                         callq   *%rax
// 2c9: 49 ff 0e                      decq    (%r14)
// 2cc: 75 0f                         jne     0x2dd <_JIT_ENTRY+0x2dd>
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _Py_Dealloc
// 2d8: 4c 89 f7                      movq    %r14, %rdi
// 2db: ff d0                         callq   *%rax
// 2dd: 85 ed                         testl   %ebp, %ebp
// 2df: 0f 85 70 fe ff ff             jne     0x155 <_JIT_ENTRY+0x155>
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _JIT_CONTINUE
// 2ef: 48 89 df                      movq    %rbx, %rdi
// 2f2: 4c 89 fe                      movq    %r15, %rsi
// 2f5: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2fa: 48 83 c4 18                   addq    $0x18, %rsp
// 2fe: 5b                            popq    %rbx
// 2ff: 41 5c                         popq    %r12
// 301: 41 5d                         popq    %r13
// 303: 41 5e                         popq    %r14
// 305: 41 5f                         popq    %r15
// 307: 5d                            popq    %rbp
// 308: ff e0                         jmpq    *%rax
// 30a: 
static const unsigned char _STORE_SUBSCRplus_SETUP_ANNOTATIONS_code_body[779] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x6f, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6f, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfd, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xe8, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfd, 0x75, 0xc2, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x91, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc4, 0xa8, 0xa7, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x93, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x4d, 0x85, 0xf6, 0x0f, 0x84, 0x89, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x0f, 0x88, 0xe4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x0f, 0x85, 0xcf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xe9, 0xbb, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0x31, 0xc0, 0xff, 0xd1, 0xe9, 0xfc, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xe2, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x7b, 0x28, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x92, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x85, 0x70, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_SETUP_ANNOTATIONS_code_holes[30] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x239, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x243, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_New, 0x0},
    {0x27f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x29a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when setting up annotations\x00'
// 65: 00 00 00
static const unsigned char _STORE_SUBSCRplus_SETUP_ANNOTATIONS_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_SETUP_ANNOTATIONS_data_holes[1];

// _STORE_SUBSCRplus_SET_ADD
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_SET_ADD.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 14                         je      0x156 <_JIT_ENTRY+0x156>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 23                         je      0x16d <_JIT_ENTRY+0x16d>
// 14a: 49 83 c6 f0                   addq    $-0x10, %r14
// 14e: 4d 89 f7                      movq    %r14, %r15
// 151: e9 8e 00 00 00                jmp     0x1e4 <_JIT_ENTRY+0x1e4>
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _Py_Dealloc
// 160: 4c 89 e7                      movq    %r12, %rdi
// 163: ff d0                         callq   *%rax
// 165: 85 ed                         testl   %ebp, %ebp
// 167: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 16b: 75 dd                         jne     0x14a <_JIT_ENTRY+0x14a>
// 16d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _JIT_OPARG
// 17b: f7 d0                         notl    %eax
// 17d: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 182: 48 98                         cltq
// 184: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  PySet_Add
// 192: 4c 89 e6                      movq    %r12, %rsi
// 195: ff d0                         callq   *%rax
// 197: 89 c5                         movl    %eax, %ebp
// 199: 49 8b 04 24                   movq    (%r12), %rax
// 19d: 48 85 c0                      testq   %rax, %rax
// 1a0: 7e 06                         jle     0x1a8 <_JIT_ENTRY+0x1a8>
// 1a2: 85 c0                         testl   %eax, %eax
// 1a4: 79 28                         jns     0x1ce <_JIT_ENTRY+0x1ce>
// 1a6: eb 38                         jmp     0x1e0 <_JIT_ENTRY+0x1e0>
// 1a8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001aa:  R_X86_64_64  .rodata.str1.1
// 1b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b4:  R_X86_64_64  _Py_NegativeRefcount
// 1bc: be 29 02 00 00                movl    $0x229, %esi            # imm = 0x229
// 1c1: 4c 89 e2                      movq    %r12, %rdx
// 1c4: ff d0                         callq   *%rax
// 1c6: 49 8b 04 24                   movq    (%r12), %rax
// 1ca: 85 c0                         testl   %eax, %eax
// 1cc: 78 12                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d8: ff d0                         callq   *%rax
// 1da: 49 ff 0c 24                   decq    (%r12)
// 1de: 74 24                         je      0x204 <_JIT_ENTRY+0x204>
// 1e0: 85 ed                         testl   %ebp, %ebp
// 1e2: 74 33                         je      0x217 <_JIT_ENTRY+0x217>
// 1e4: 49 29 df                      subq    %rbx, %r15
// 1e7: 49 83 c7 b0                   addq    $-0x50, %r15
// 1eb: 49 c1 ef 03                   shrq    $0x3, %r15
// 1ef: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 1f3: 31 c0                         xorl    %eax, %eax
// 1f5: 48 83 c4 08                   addq    $0x8, %rsp
// 1f9: 5b                            popq    %rbx
// 1fa: 41 5c                         popq    %r12
// 1fc: 41 5d                         popq    %r13
// 1fe: 41 5e                         popq    %r14
// 200: 41 5f                         popq    %r15
// 202: 5d                            popq    %rbp
// 203: c3                            retq
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _Py_Dealloc
// 20e: 4c 89 e7                      movq    %r12, %rdi
// 211: ff d0                         callq   *%rax
// 213: 85 ed                         testl   %ebp, %ebp
// 215: 75 cd                         jne     0x1e4 <_JIT_ENTRY+0x1e4>
// 217: 49 83 c6 f8                   addq    $-0x8, %r14
// 21b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021d:  R_X86_64_64  _JIT_CONTINUE
// 225: 48 89 df                      movq    %rbx, %rdi
// 228: 4c 89 f6                      movq    %r14, %rsi
// 22b: 48 8b 14 24                   movq    (%rsp), %rdx
// 22f: 48 83 c4 08                   addq    $0x8, %rsp
// 233: 5b                            popq    %rbx
// 234: 41 5c                         popq    %r12
// 236: 41 5d                         popq    %r13
// 238: 41 5e                         popq    %r14
// 23a: 41 5f                         popq    %r15
// 23c: 5d                            popq    %rbp
// 23d: ff e0                         jmpq    *%rax
// 23f: 
static const unsigned char _STORE_SUBSCRplus_SET_ADD_code_body[576] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x14, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x23, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0xf7, 0xe9, 0x8e, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xdd, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x29, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x24, 0x85, 0xed, 0x74, 0x33, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb0, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x75, 0xcd, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_SET_ADD_code_holes[21] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_SET_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_SET_ADD_data_holes[1];

// _STORE_SUBSCRplus_SET_FUNCTION_ATTRIBUTE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_SET_FUNCTION_ATTRIBUTE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 8b 4b f0                   movq    -0x10(%rbx), %rcx
// 185: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 189: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000018b:  R_X86_64_64  _JIT_OPARG
// 193: 0f b7 d2                      movzwl  %dx, %edx
// 196: 83 fa 03                      cmpl    $0x3, %edx
// 199: 7f 10                         jg      0x1ab <_JIT_ENTRY+0x1ab>
// 19b: 83 fa 01                      cmpl    $0x1, %edx
// 19e: 74 1b                         je      0x1bb <_JIT_ENTRY+0x1bb>
// 1a0: 83 fa 02                      cmpl    $0x2, %edx
// 1a3: 75 4f                         jne     0x1f4 <_JIT_ENTRY+0x1f4>
// 1a5: 48 8d 50 40                   leaq    0x40(%rax), %rdx
// 1a9: eb 1a                         jmp     0x1c5 <_JIT_ENTRY+0x1c5>
// 1ab: 83 fa 04                      cmpl    $0x4, %edx
// 1ae: 74 11                         je      0x1c1 <_JIT_ENTRY+0x1c1>
// 1b0: 83 fa 08                      cmpl    $0x8, %edx
// 1b3: 75 3f                         jne     0x1f4 <_JIT_ENTRY+0x1f4>
// 1b5: 48 8d 50 48                   leaq    0x48(%rax), %rdx
// 1b9: eb 0a                         jmp     0x1c5 <_JIT_ENTRY+0x1c5>
// 1bb: 48 8d 50 38                   leaq    0x38(%rax), %rdx
// 1bf: eb 04                         jmp     0x1c5 <_JIT_ENTRY+0x1c5>
// 1c1: 48 8d 50 70                   leaq    0x70(%rax), %rdx
// 1c5: 48 89 0a                      movq    %rcx, (%rdx)
// 1c8: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 1cc: 48 83 c3 f8                   addq    $-0x8, %rbx
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _JIT_CONTINUE
// 1da: 4c 89 f7                      movq    %r14, %rdi
// 1dd: 48 89 de                      movq    %rbx, %rsi
// 1e0: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e4: 48 83 c4 08                   addq    $0x8, %rsp
// 1e8: 5b                            popq    %rbx
// 1e9: 41 5c                         popq    %r12
// 1eb: 41 5d                         popq    %r13
// 1ed: 41 5e                         popq    %r14
// 1ef: 41 5f                         popq    %r15
// 1f1: 5d                            popq    %rbp
// 1f2: ff e0                         jmpq    *%rax
// 1f4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f6:  R_X86_64_64  .rodata.str1.1+0x39
// 1fe: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000200:  R_X86_64_64  .rodata.str1.1+0x44
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _Py_FatalErrorFunc
// 212: ff d0                         callq   *%rax
// 214: 
static const unsigned char _STORE_SUBSCRplus_SET_FUNCTION_ATTRIBUTE_code_body[533] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0x8b, 0x4b, 0xf0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x83, 0xfa, 0x03, 0x7f, 0x10, 0x83, 0xfa, 0x01, 0x74, 0x1b, 0x83, 0xfa, 0x02, 0x75, 0x4f, 0x48, 0x8d, 0x50, 0x40, 0xeb, 0x1a, 0x83, 0xfa, 0x04, 0x74, 0x11, 0x83, 0xfa, 0x08, 0x75, 0x3f, 0x48, 0x8d, 0x50, 0x48, 0xeb, 0x0a, 0x48, 0x8d, 0x50, 0x38, 0xeb, 0x04, 0x48, 0x8d, 0x50, 0x70, 0x48, 0x89, 0x0a, 0x48, 0x89, 0x43, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _STORE_SUBSCRplus_SET_FUNCTION_ATTRIBUTE_code_holes[19] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x200, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x44},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalErrorFunc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_JIT_ENTRY\x00We've reached an unreachable state. Anything is possible.\nThe limits were in our heads all along. Follow your dreams.\nhttps://xkcd.com/2200\x00"
// d0: 
static const unsigned char _STORE_SUBSCRplus_SET_FUNCTION_ATTRIBUTE_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x00, 0x57, 0x65, 0x27, 0x76, 0x65, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x41, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x2e, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x75, 0x72, 0x20, 0x68, 0x65, 0x61, 0x64, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x20, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x78, 0x6b, 0x63, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x32, 0x32, 0x30, 0x30, 0x00};
static const Hole _STORE_SUBSCRplus_SET_FUNCTION_ATTRIBUTE_data_holes[1];

// _STORE_SUBSCRplus_SET_IP
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_SET_IP.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 49 8b 06                      movq    (%r14), %rax
// 184: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000186:  R_X86_64_64  _JIT_OPARG
// 18e: 0f b7 c9                      movzwl  %cx, %ecx
// 191: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 195: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 19b: 49 89 46 38                   movq    %rax, 0x38(%r14)
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _JIT_CONTINUE
// 1a9: 4c 89 f7                      movq    %r14, %rdi
// 1ac: 48 89 de                      movq    %rbx, %rsi
// 1af: 48 8b 14 24                   movq    (%rsp), %rdx
// 1b3: 48 83 c4 08                   addq    $0x8, %rsp
// 1b7: 5b                            popq    %rbx
// 1b8: 41 5c                         popq    %r12
// 1ba: 41 5d                         popq    %r13
// 1bc: 41 5e                         popq    %r14
// 1be: 41 5f                         popq    %r15
// 1c0: 5d                            popq    %rbp
// 1c1: ff e0                         jmpq    *%rax
// 1c3: 
static const unsigned char _STORE_SUBSCRplus_SET_IP_code_body[452] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x46, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_SET_IP_code_holes[16] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_SET_IP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_SET_IP_data_holes[1];

// _STORE_SUBSCRplus_SET_UPDATE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_SET_UPDATE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c6 f0                   addq    $-0x10, %r14
// 14e: 4d 89 f7                      movq    %r14, %r15
// 151: 49 29 df                      subq    %rbx, %r15
// 154: 49 83 c7 b0                   addq    $-0x50, %r15
// 158: 49 c1 ef 03                   shrq    $0x3, %r15
// 15c: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: f7 d0                         notl    %eax
// 198: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 19d: 48 98                         cltq
// 19f: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _PySet_Update
// 1ad: 4c 89 e6                      movq    %r12, %rsi
// 1b0: ff d0                         callq   *%rax
// 1b2: 89 c5                         movl    %eax, %ebp
// 1b4: 49 8b 04 24                   movq    (%r12), %rax
// 1b8: 48 85 c0                      testq   %rax, %rax
// 1bb: 7e 06                         jle     0x1c3 <_JIT_ENTRY+0x1c3>
// 1bd: 85 c0                         testl   %eax, %eax
// 1bf: 79 28                         jns     0x1e9 <_JIT_ENTRY+0x1e9>
// 1c1: eb 47                         jmp     0x20a <_JIT_ENTRY+0x20a>
// 1c3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c5:  R_X86_64_64  .rodata.str1.1
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _Py_NegativeRefcount
// 1d7: be 53 05 00 00                movl    $0x553, %esi            # imm = 0x553
// 1dc: 4c 89 e2                      movq    %r12, %rdx
// 1df: ff d0                         callq   *%rax
// 1e1: 49 8b 04 24                   movq    (%r12), %rax
// 1e5: 85 c0                         testl   %eax, %eax
// 1e7: 78 21                         js      0x20a <_JIT_ENTRY+0x20a>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f3: ff d0                         callq   *%rax
// 1f5: 49 ff 0c 24                   decq    (%r12)
// 1f9: 75 0f                         jne     0x20a <_JIT_ENTRY+0x20a>
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _Py_Dealloc
// 205: 4c 89 e7                      movq    %r12, %rdi
// 208: ff d0                         callq   *%rax
// 20a: 85 ed                         testl   %ebp, %ebp
// 20c: 0f 88 3f ff ff ff             js      0x151 <_JIT_ENTRY+0x151>
// 212: 49 83 c6 f8                   addq    $-0x8, %r14
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _JIT_CONTINUE
// 220: 48 89 df                      movq    %rbx, %rdi
// 223: 4c 89 f6                      movq    %r14, %rsi
// 226: 48 8b 14 24                   movq    (%rsp), %rdx
// 22a: 48 83 c4 08                   addq    $0x8, %rsp
// 22e: 5b                            popq    %rbx
// 22f: 41 5c                         popq    %r12
// 231: 41 5d                         popq    %r13
// 233: 41 5e                         popq    %r14
// 235: 41 5f                         popq    %r15
// 237: 5d                            popq    %rbp
// 238: ff e0                         jmpq    *%rax
// 23a: 
static const unsigned char _STORE_SUBSCRplus_SET_UPDATE_code_body[571] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x3e, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb0, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xc2, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x53, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x88, 0x3f, 0xff, 0xff, 0xff, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_SET_UPDATE_code_holes[21] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySet_Update, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_SET_UPDATE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_SET_UPDATE_data_holes[1];

// _STORE_SUBSCRplus_STORE_ATTR
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_STORE_ATTR.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 14                         je      0x156 <_JIT_ENTRY+0x156>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 23                         je      0x16d <_JIT_ENTRY+0x16d>
// 14a: 49 83 c6 f8                   addq    $-0x8, %r14
// 14e: 4d 89 f7                      movq    %r14, %r15
// 151: e9 f6 00 00 00                jmp     0x24c <_JIT_ENTRY+0x24c>
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _Py_Dealloc
// 160: 4c 89 e7                      movq    %r12, %rdi
// 163: ff d0                         callq   *%rax
// 165: 85 ed                         testl   %ebp, %ebp
// 167: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 16b: 75 dd                         jne     0x14a <_JIT_ENTRY+0x14a>
// 16d: 4d 8b 6e f0                   movq    -0x10(%r14), %r13
// 171: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 175: 48 8b 03                      movq    (%rbx), %rax
// 178: 48 8b 40 20                   movq    0x20(%rax), %rax
// 17c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017e:  R_X86_64_64  _JIT_OPARG
// 186: 0f b7 c9                      movzwl  %cx, %ecx
// 189: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  PyObject_SetAttr
// 198: 4c 89 e7                      movq    %r12, %rdi
// 19b: 4c 89 ea                      movq    %r13, %rdx
// 19e: ff d0                         callq   *%rax
// 1a0: 89 c5                         movl    %eax, %ebp
// 1a2: 49 8b 45 00                   movq    (%r13), %rax
// 1a6: 48 85 c0                      testq   %rax, %rax
// 1a9: 7e 06                         jle     0x1b1 <_JIT_ENTRY+0x1b1>
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 79 28                         jns     0x1d7 <_JIT_ENTRY+0x1d7>
// 1af: eb 38                         jmp     0x1e9 <_JIT_ENTRY+0x1e9>
// 1b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b3:  R_X86_64_64  .rodata.str1.1
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_NegativeRefcount
// 1c5: be c5 03 00 00                movl    $0x3c5, %esi            # imm = 0x3C5
// 1ca: 4c 89 ea                      movq    %r13, %rdx
// 1cd: ff d0                         callq   *%rax
// 1cf: 49 8b 45 00                   movq    (%r13), %rax
// 1d3: 85 c0                         testl   %eax, %eax
// 1d5: 78 12                         js      0x1e9 <_JIT_ENTRY+0x1e9>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e1: ff d0                         callq   *%rax
// 1e3: 49 ff 4d 00                   decq    (%r13)
// 1e7: 74 0f                         je      0x1f8 <_JIT_ENTRY+0x1f8>
// 1e9: 49 8b 04 24                   movq    (%r12), %rax
// 1ed: 48 85 c0                      testq   %rax, %rax
// 1f0: 7e 1e                         jle     0x210 <_JIT_ENTRY+0x210>
// 1f2: 85 c0                         testl   %eax, %eax
// 1f4: 79 40                         jns     0x236 <_JIT_ENTRY+0x236>
// 1f6: eb 50                         jmp     0x248 <_JIT_ENTRY+0x248>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_Dealloc
// 202: 4c 89 ef                      movq    %r13, %rdi
// 205: ff d0                         callq   *%rax
// 207: 49 8b 04 24                   movq    (%r12), %rax
// 20b: 48 85 c0                      testq   %rax, %rax
// 20e: 7f e2                         jg      0x1f2 <_JIT_ENTRY+0x1f2>
// 210: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000212:  R_X86_64_64  .rodata.str1.1
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_NegativeRefcount
// 224: be c6 03 00 00                movl    $0x3c6, %esi            # imm = 0x3C6
// 229: 4c 89 e2                      movq    %r12, %rdx
// 22c: ff d0                         callq   *%rax
// 22e: 49 8b 04 24                   movq    (%r12), %rax
// 232: 85 c0                         testl   %eax, %eax
// 234: 78 12                         js      0x248 <_JIT_ENTRY+0x248>
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 240: ff d0                         callq   *%rax
// 242: 49 ff 0c 24                   decq    (%r12)
// 246: 74 24                         je      0x26c <_JIT_ENTRY+0x26c>
// 248: 85 ed                         testl   %ebp, %ebp
// 24a: 74 33                         je      0x27f <_JIT_ENTRY+0x27f>
// 24c: 49 29 df                      subq    %rbx, %r15
// 24f: 49 83 c7 a8                   addq    $-0x58, %r15
// 253: 49 c1 ef 03                   shrq    $0x3, %r15
// 257: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 25b: 31 c0                         xorl    %eax, %eax
// 25d: 48 83 c4 08                   addq    $0x8, %rsp
// 261: 5b                            popq    %rbx
// 262: 41 5c                         popq    %r12
// 264: 41 5d                         popq    %r13
// 266: 41 5e                         popq    %r14
// 268: 41 5f                         popq    %r15
// 26a: 5d                            popq    %rbp
// 26b: c3                            retq
// 26c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026e:  R_X86_64_64  _Py_Dealloc
// 276: 4c 89 e7                      movq    %r12, %rdi
// 279: ff d0                         callq   *%rax
// 27b: 85 ed                         testl   %ebp, %ebp
// 27d: 75 cd                         jne     0x24c <_JIT_ENTRY+0x24c>
// 27f: 49 83 c6 f0                   addq    $-0x10, %r14
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _JIT_CONTINUE
// 28d: 48 89 df                      movq    %rbx, %rdi
// 290: 4c 89 f6                      movq    %r14, %rsi
// 293: 48 8b 14 24                   movq    (%rsp), %rdx
// 297: 48 83 c4 08                   addq    $0x8, %rsp
// 29b: 5b                            popq    %rbx
// 29c: 41 5c                         popq    %r12
// 29e: 41 5d                         popq    %r13
// 2a0: 41 5e                         popq    %r14
// 2a2: 41 5f                         popq    %r15
// 2a4: 5d                            popq    %rbp
// 2a5: ff e0                         jmpq    *%rax
// 2a7: 
static const unsigned char _STORE_SUBSCRplus_STORE_ATTR_code_body[680] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x14, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x23, 0x49, 0x83, 0xc6, 0xf8, 0x4d, 0x89, 0xf7, 0xe9, 0xf6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xdd, 0x4d, 0x8b, 0x6e, 0xf0, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc6, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x24, 0x85, 0xed, 0x74, 0x33, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xa8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x75, 0xcd, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_STORE_ATTR_code_holes[25] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetAttr, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_STORE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_STORE_ATTR_data_holes[1];

// _STORE_SUBSCRplus_STORE_ATTR_INSTANCE_VALUE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_STORE_ATTR_INSTANCE_VALUE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 8b 4b f0                   movq    -0x10(%rbx), %rcx
// 185: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 189: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// 18e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000190:  R_X86_64_64  _JIT_OPERAND
// 198: 0f b7 d2                      movzwl  %dx, %edx
// 19b: 4c 8b 7c d0 01                movq    0x1(%rax,%rdx,8), %r15
// 1a0: 48 89 4c d0 01                movq    %rcx, 0x1(%rax,%rdx,8)
// 1a5: 4d 85 ff                      testq   %r15, %r15
// 1a8: 74 12                         je      0x1bc <_JIT_ENTRY+0x1bc>
// 1aa: 49 8b 07                      movq    (%r15), %rax
// 1ad: 48 85 c0                      testq   %rax, %rax
// 1b0: 7e 2c                         jle     0x1de <_JIT_ENTRY+0x1de>
// 1b2: 85 c0                         testl   %eax, %eax
// 1b4: 4c 8b 2c 24                   movq    (%rsp), %r13
// 1b8: 79 4d                         jns     0x207 <_JIT_ENTRY+0x207>
// 1ba: eb 6b                         jmp     0x227 <_JIT_ENTRY+0x227>
// 1bc: 0f b6 48 ff                   movzbl  -0x1(%rax), %ecx
// 1c0: 8d 51 01                      leal    0x1(%rcx), %edx
// 1c3: 48 f7 d1                      notq    %rcx
// 1c6: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001c8:  R_X86_64_64  _JIT_OPERAND
// 1d0: 40 88 74 08 ff                movb    %sil, -0x1(%rax,%rcx)
// 1d5: 88 50 ff                      movb    %dl, -0x1(%rax)
// 1d8: 4c 8b 2c 24                   movq    (%rsp), %r13
// 1dc: eb 49                         jmp     0x227 <_JIT_ENTRY+0x227>
// 1de: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e0:  R_X86_64_64  .rodata.str1.1
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _Py_NegativeRefcount
// 1f2: be 16 07 00 00                movl    $0x716, %esi            # imm = 0x716
// 1f7: 4c 89 fa                      movq    %r15, %rdx
// 1fa: ff d0                         callq   *%rax
// 1fc: 49 8b 07                      movq    (%r15), %rax
// 1ff: 85 c0                         testl   %eax, %eax
// 201: 4c 8b 2c 24                   movq    (%rsp), %r13
// 205: 78 20                         js      0x227 <_JIT_ENTRY+0x227>
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 211: ff d0                         callq   *%rax
// 213: 49 ff 0f                      decq    (%r15)
// 216: 75 0f                         jne     0x227 <_JIT_ENTRY+0x227>
// 218: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021a:  R_X86_64_64  _Py_Dealloc
// 222: 4c 89 ff                      movq    %r15, %rdi
// 225: ff d0                         callq   *%rax
// 227: 49 8b 04 24                   movq    (%r12), %rax
// 22b: 48 85 c0                      testq   %rax, %rax
// 22e: 7e 0a                         jle     0x23a <_JIT_ENTRY+0x23a>
// 230: 48 83 c3 f0                   addq    $-0x10, %rbx
// 234: 85 c0                         testl   %eax, %eax
// 236: 79 2c                         jns     0x264 <_JIT_ENTRY+0x264>
// 238: eb 4b                         jmp     0x285 <_JIT_ENTRY+0x285>
// 23a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000023c:  R_X86_64_64  .rodata.str1.1
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _Py_NegativeRefcount
// 24e: be 18 07 00 00                movl    $0x718, %esi            # imm = 0x718
// 253: 4c 89 e2                      movq    %r12, %rdx
// 256: ff d0                         callq   *%rax
// 258: 49 8b 04 24                   movq    (%r12), %rax
// 25c: 48 83 c3 f0                   addq    $-0x10, %rbx
// 260: 85 c0                         testl   %eax, %eax
// 262: 78 21                         js      0x285 <_JIT_ENTRY+0x285>
// 264: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000266:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 26e: ff d0                         callq   *%rax
// 270: 49 ff 0c 24                   decq    (%r12)
// 274: 75 0f                         jne     0x285 <_JIT_ENTRY+0x285>
// 276: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000278:  R_X86_64_64  _Py_Dealloc
// 280: 4c 89 e7                      movq    %r12, %rdi
// 283: ff d0                         callq   *%rax
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _JIT_CONTINUE
// 28f: 4c 89 f7                      movq    %r14, %rdi
// 292: 48 89 de                      movq    %rbx, %rsi
// 295: 4c 89 ea                      movq    %r13, %rdx
// 298: 48 83 c4 08                   addq    $0x8, %rsp
// 29c: 5b                            popq    %rbx
// 29d: 41 5c                         popq    %r12
// 29f: 41 5d                         popq    %r13
// 2a1: 41 5e                         popq    %r14
// 2a3: 41 5f                         popq    %r15
// 2a5: 5d                            popq    %rbp
// 2a6: ff e0                         jmpq    *%rax
// 2a8: 
static const unsigned char _STORE_SUBSCRplus_STORE_ATTR_INSTANCE_VALUE_code_body[681] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0x8b, 0x4b, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x4c, 0x8b, 0x7c, 0xd0, 0x01, 0x48, 0x89, 0x4c, 0xd0, 0x01, 0x4d, 0x85, 0xff, 0x74, 0x12, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x2c, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x79, 0x4d, 0xeb, 0x6b, 0x0f, 0xb6, 0x48, 0xff, 0x8d, 0x51, 0x01, 0x48, 0xf7, 0xd1, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x88, 0x74, 0x08, 0xff, 0x88, 0x50, 0xff, 0x4c, 0x8b, 0x2c, 0x24, 0xeb, 0x49, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x4c, 0x8b, 0x2c, 0x24, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x48, 0x83, 0xc3, 0xf0, 0x85, 0xc0, 0x79, 0x2c, 0xeb, 0x4b, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xea, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_STORE_ATTR_INSTANCE_VALUE_code_holes[25] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x266, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x278, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_STORE_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_STORE_ATTR_INSTANCE_VALUE_data_holes[1];

// _STORE_SUBSCRplus_STORE_ATTR_SLOT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_STORE_ATTR_SLOT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 8b 43 f0                   movq    -0x10(%rbx), %rax
// 185: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 189: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018b:  R_X86_64_64  _JIT_OPERAND
// 193: 0f b7 c9                      movzwl  %cx, %ecx
// 196: 4d 8b 3c 0c                   movq    (%r12,%rcx), %r15
// 19a: 49 89 04 0c                   movq    %rax, (%r12,%rcx)
// 19e: 4d 85 ff                      testq   %r15, %r15
// 1a1: 74 53                         je      0x1f6 <_JIT_ENTRY+0x1f6>
// 1a3: 49 8b 07                      movq    (%r15), %rax
// 1a6: 48 85 c0                      testq   %rax, %rax
// 1a9: 7e 06                         jle     0x1b1 <_JIT_ENTRY+0x1b1>
// 1ab: 85 c0                         testl   %eax, %eax
// 1ad: 79 27                         jns     0x1d6 <_JIT_ENTRY+0x1d6>
// 1af: eb 45                         jmp     0x1f6 <_JIT_ENTRY+0x1f6>
// 1b1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b3:  R_X86_64_64  .rodata.str1.1+0x39
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_NegativeRefcount
// 1c5: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 1ca: 4c 89 fa                      movq    %r15, %rdx
// 1cd: ff d0                         callq   *%rax
// 1cf: 49 8b 07                      movq    (%r15), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 20                         js      0x1f6 <_JIT_ENTRY+0x1f6>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 ff 0f                      decq    (%r15)
// 1e5: 75 0f                         jne     0x1f6 <_JIT_ENTRY+0x1f6>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _Py_Dealloc
// 1f1: 4c 89 ff                      movq    %r15, %rdi
// 1f4: ff d0                         callq   *%rax
// 1f6: 49 8b 04 24                   movq    (%r12), %rax
// 1fa: 48 85 c0                      testq   %rax, %rax
// 1fd: 7e 0a                         jle     0x209 <_JIT_ENTRY+0x209>
// 1ff: 48 83 c3 f0                   addq    $-0x10, %rbx
// 203: 85 c0                         testl   %eax, %eax
// 205: 79 2c                         jns     0x233 <_JIT_ENTRY+0x233>
// 207: eb 4b                         jmp     0x254 <_JIT_ENTRY+0x254>
// 209: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020b:  R_X86_64_64  .rodata.str1.1
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_NegativeRefcount
// 21d: be 2a 07 00 00                movl    $0x72a, %esi            # imm = 0x72A
// 222: 4c 89 e2                      movq    %r12, %rdx
// 225: ff d0                         callq   *%rax
// 227: 49 8b 04 24                   movq    (%r12), %rax
// 22b: 48 83 c3 f0                   addq    $-0x10, %rbx
// 22f: 85 c0                         testl   %eax, %eax
// 231: 78 21                         js      0x254 <_JIT_ENTRY+0x254>
// 233: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000235:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23d: ff d0                         callq   *%rax
// 23f: 49 ff 0c 24                   decq    (%r12)
// 243: 75 0f                         jne     0x254 <_JIT_ENTRY+0x254>
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _Py_Dealloc
// 24f: 4c 89 e7                      movq    %r12, %rdi
// 252: ff d0                         callq   *%rax
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _JIT_CONTINUE
// 25e: 4c 89 f7                      movq    %r14, %rdi
// 261: 48 89 de                      movq    %rbx, %rsi
// 264: 48 8b 14 24                   movq    (%rsp), %rdx
// 268: 48 83 c4 08                   addq    $0x8, %rsp
// 26c: 5b                            popq    %rbx
// 26d: 41 5c                         popq    %r12
// 26f: 41 5d                         popq    %r13
// 271: 41 5e                         popq    %r14
// 273: 41 5f                         popq    %r15
// 275: 5d                            popq    %rbp
// 276: ff e0                         jmpq    *%rax
// 278: 
static const unsigned char _STORE_SUBSCRplus_STORE_ATTR_SLOT_code_body[633] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0x8b, 0x43, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4d, 0x8b, 0x3c, 0x0c, 0x49, 0x89, 0x04, 0x0c, 0x4d, 0x85, 0xff, 0x74, 0x53, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x45, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x48, 0x83, 0xc3, 0xf0, 0x85, 0xc0, 0x79, 0x2c, 0xeb, 0x4b, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x2a, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_STORE_ATTR_SLOT_code_holes[24] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x235, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_STORE_ATTR_SLOT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_STORE_ATTR_SLOT_data_holes[1];

// _STORE_SUBSCRplus_STORE_DEREF
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_STORE_DEREF.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 185: 48 83 c3 f8                   addq    $-0x8, %rbx
// 189: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018b:  R_X86_64_64  _JIT_OPARG
// 193: 0f b7 c9                      movzwl  %cx, %ecx
// 196: 49 8b 4c ce 48                movq    0x48(%r14,%rcx,8), %rcx
// 19b: 4c 8b 79 10                   movq    0x10(%rcx), %r15
// 19f: 48 89 41 10                   movq    %rax, 0x10(%rcx)
// 1a3: 4d 85 ff                      testq   %r15, %r15
// 1a6: 74 53                         je      0x1fb <_JIT_ENTRY+0x1fb>
// 1a8: 49 8b 07                      movq    (%r15), %rax
// 1ab: 48 85 c0                      testq   %rax, %rax
// 1ae: 7e 06                         jle     0x1b6 <_JIT_ENTRY+0x1b6>
// 1b0: 85 c0                         testl   %eax, %eax
// 1b2: 79 27                         jns     0x1db <_JIT_ENTRY+0x1db>
// 1b4: eb 45                         jmp     0x1fb <_JIT_ENTRY+0x1fb>
// 1b6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b8:  R_X86_64_64  .rodata.str1.1+0x39
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_NegativeRefcount
// 1ca: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 1cf: 4c 89 fa                      movq    %r15, %rdx
// 1d2: ff d0                         callq   *%rax
// 1d4: 49 8b 07                      movq    (%r15), %rax
// 1d7: 85 c0                         testl   %eax, %eax
// 1d9: 78 20                         js      0x1fb <_JIT_ENTRY+0x1fb>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e5: ff d0                         callq   *%rax
// 1e7: 49 ff 0f                      decq    (%r15)
// 1ea: 75 0f                         jne     0x1fb <_JIT_ENTRY+0x1fb>
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_Dealloc
// 1f6: 4c 89 ff                      movq    %r15, %rdi
// 1f9: ff d0                         callq   *%rax
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _JIT_CONTINUE
// 205: 4c 89 f7                      movq    %r14, %rdi
// 208: 48 89 de                      movq    %rbx, %rsi
// 20b: 48 8b 14 24                   movq    (%rsp), %rdx
// 20f: 48 83 c4 08                   addq    $0x8, %rsp
// 213: 5b                            popq    %rbx
// 214: 41 5c                         popq    %r12
// 216: 41 5d                         popq    %r13
// 218: 41 5e                         popq    %r14
// 21a: 41 5f                         popq    %r15
// 21c: 5d                            popq    %rbp
// 21d: ff e0                         jmpq    *%rax
// 21f: 
static const unsigned char _STORE_SUBSCRplus_STORE_DEREF_code_body[544] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x49, 0x8b, 0x4c, 0xce, 0x48, 0x4c, 0x8b, 0x79, 0x10, 0x48, 0x89, 0x41, 0x10, 0x4d, 0x85, 0xff, 0x74, 0x53, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x45, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_STORE_DEREF_code_holes[20] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_STORE_DEREF_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_STORE_DEREF_data_holes[1];

// _STORE_SUBSCRplus_STORE_FAST
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_STORE_FAST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 185: 48 83 c3 f8                   addq    $-0x8, %rbx
// 189: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018b:  R_X86_64_64  _JIT_OPARG
// 193: 0f b7 c9                      movzwl  %cx, %ecx
// 196: 4d 8b 7c ce 48                movq    0x48(%r14,%rcx,8), %r15
// 19b: 49 89 44 ce 48                movq    %rax, 0x48(%r14,%rcx,8)
// 1a0: 4d 85 ff                      testq   %r15, %r15
// 1a3: 74 53                         je      0x1f8 <_JIT_ENTRY+0x1f8>
// 1a5: 49 8b 07                      movq    (%r15), %rax
// 1a8: 48 85 c0                      testq   %rax, %rax
// 1ab: 7e 06                         jle     0x1b3 <_JIT_ENTRY+0x1b3>
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 79 27                         jns     0x1d8 <_JIT_ENTRY+0x1d8>
// 1b1: eb 45                         jmp     0x1f8 <_JIT_ENTRY+0x1f8>
// 1b3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b5:  R_X86_64_64  .rodata.str1.1+0x39
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _Py_NegativeRefcount
// 1c7: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 1cc: 4c 89 fa                      movq    %r15, %rdx
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 8b 07                      movq    (%r15), %rax
// 1d4: 85 c0                         testl   %eax, %eax
// 1d6: 78 20                         js      0x1f8 <_JIT_ENTRY+0x1f8>
// 1d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001da:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e2: ff d0                         callq   *%rax
// 1e4: 49 ff 0f                      decq    (%r15)
// 1e7: 75 0f                         jne     0x1f8 <_JIT_ENTRY+0x1f8>
// 1e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001eb:  R_X86_64_64  _Py_Dealloc
// 1f3: 4c 89 ff                      movq    %r15, %rdi
// 1f6: ff d0                         callq   *%rax
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _JIT_CONTINUE
// 202: 4c 89 f7                      movq    %r14, %rdi
// 205: 48 89 de                      movq    %rbx, %rsi
// 208: 48 8b 14 24                   movq    (%rsp), %rdx
// 20c: 48 83 c4 08                   addq    $0x8, %rsp
// 210: 5b                            popq    %rbx
// 211: 41 5c                         popq    %r12
// 213: 41 5d                         popq    %r13
// 215: 41 5e                         popq    %r14
// 217: 41 5f                         popq    %r15
// 219: 5d                            popq    %rbp
// 21a: ff e0                         jmpq    *%rax
// 21c: 
static const unsigned char _STORE_SUBSCRplus_STORE_FAST_code_body[541] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4d, 0x8b, 0x7c, 0xce, 0x48, 0x49, 0x89, 0x44, 0xce, 0x48, 0x4d, 0x85, 0xff, 0x74, 0x53, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x45, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_STORE_FAST_code_holes[20] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_STORE_FAST_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_STORE_FAST_data_holes[1];

// _STORE_SUBSCRplus_STORE_GLOBAL
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_STORE_GLOBAL.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 14                         je      0x156 <_JIT_ENTRY+0x156>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 23                         je      0x16d <_JIT_ENTRY+0x16d>
// 14a: 49 83 c6 f0                   addq    $-0x10, %r14
// 14e: 4d 89 f7                      movq    %r14, %r15
// 151: e9 94 00 00 00                jmp     0x1ea <_JIT_ENTRY+0x1ea>
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _Py_Dealloc
// 160: 4c 89 e7                      movq    %r12, %rdi
// 163: ff d0                         callq   *%rax
// 165: 85 ed                         testl   %ebp, %ebp
// 167: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 16b: 75 dd                         jne     0x14a <_JIT_ENTRY+0x14a>
// 16d: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 171: 48 8b 03                      movq    (%rbx), %rax
// 174: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// 178: 48 8b 40 20                   movq    0x20(%rax), %rax
// 17c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017e:  R_X86_64_64  _JIT_OPARG
// 186: 0f b7 c9                      movzwl  %cx, %ecx
// 189: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  PyDict_SetItem
// 198: 4c 89 e2                      movq    %r12, %rdx
// 19b: ff d0                         callq   *%rax
// 19d: 89 c5                         movl    %eax, %ebp
// 19f: 49 8b 04 24                   movq    (%r12), %rax
// 1a3: 48 85 c0                      testq   %rax, %rax
// 1a6: 7e 06                         jle     0x1ae <_JIT_ENTRY+0x1ae>
// 1a8: 85 c0                         testl   %eax, %eax
// 1aa: 79 28                         jns     0x1d4 <_JIT_ENTRY+0x1d4>
// 1ac: eb 38                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1ae: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b0:  R_X86_64_64  .rodata.str1.1
// 1b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ba:  R_X86_64_64  _Py_NegativeRefcount
// 1c2: be de 03 00 00                movl    $0x3de, %esi            # imm = 0x3DE
// 1c7: 4c 89 e2                      movq    %r12, %rdx
// 1ca: ff d0                         callq   *%rax
// 1cc: 49 8b 04 24                   movq    (%r12), %rax
// 1d0: 85 c0                         testl   %eax, %eax
// 1d2: 78 12                         js      0x1e6 <_JIT_ENTRY+0x1e6>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1de: ff d0                         callq   *%rax
// 1e0: 49 ff 0c 24                   decq    (%r12)
// 1e4: 74 24                         je      0x20a <_JIT_ENTRY+0x20a>
// 1e6: 85 ed                         testl   %ebp, %ebp
// 1e8: 74 33                         je      0x21d <_JIT_ENTRY+0x21d>
// 1ea: 49 29 df                      subq    %rbx, %r15
// 1ed: 49 83 c7 b0                   addq    $-0x50, %r15
// 1f1: 49 c1 ef 03                   shrq    $0x3, %r15
// 1f5: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 1f9: 31 c0                         xorl    %eax, %eax
// 1fb: 48 83 c4 08                   addq    $0x8, %rsp
// 1ff: 5b                            popq    %rbx
// 200: 41 5c                         popq    %r12
// 202: 41 5d                         popq    %r13
// 204: 41 5e                         popq    %r14
// 206: 41 5f                         popq    %r15
// 208: 5d                            popq    %rbp
// 209: c3                            retq
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  _Py_Dealloc
// 214: 4c 89 e7                      movq    %r12, %rdi
// 217: ff d0                         callq   *%rax
// 219: 85 ed                         testl   %ebp, %ebp
// 21b: 75 cd                         jne     0x1ea <_JIT_ENTRY+0x1ea>
// 21d: 49 83 c6 f8                   addq    $-0x8, %r14
// 221: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000223:  R_X86_64_64  _JIT_CONTINUE
// 22b: 48 89 df                      movq    %rbx, %rdi
// 22e: 4c 89 f6                      movq    %r14, %rsi
// 231: 48 8b 14 24                   movq    (%rsp), %rdx
// 235: 48 83 c4 08                   addq    $0x8, %rsp
// 239: 5b                            popq    %rbx
// 23a: 41 5c                         popq    %r12
// 23c: 41 5d                         popq    %r13
// 23e: 41 5e                         popq    %r14
// 240: 41 5f                         popq    %r15
// 242: 5d                            popq    %rbp
// 243: ff e0                         jmpq    *%rax
// 245: 
static const unsigned char _STORE_SUBSCRplus_STORE_GLOBAL_code_body[582] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x14, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x23, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0xf7, 0xe9, 0x94, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xdd, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xde, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x24, 0x85, 0xed, 0x74, 0x33, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb0, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x75, 0xcd, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_STORE_GLOBAL_code_holes[21] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x223, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_STORE_GLOBAL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_STORE_GLOBAL_data_holes[1];

// _STORE_SUBSCRplus_STORE_NAME
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_STORE_NAME.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f7                      movq    %rsi, %r15
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 f2                      movq    %r14, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 06                      movq    (%r14), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 f2                      movq    %r14, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0e                      decq    (%r14)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 f7                      movq    %r14, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c7 f0                   addq    $-0x10, %r15
// 14e: 4d 89 fe                      movq    %r15, %r14
// 151: 49 29 de                      subq    %rbx, %r14
// 154: 49 83 c6 b0                   addq    $-0x50, %r14
// 158: 49 c1 ee 03                   shrq    $0x3, %r14
// 15c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 18c: 48 8b 03                      movq    (%rbx), %rax
// 18f: 48 8b 7b 28                   movq    0x28(%rbx), %rdi
// 193: 48 8b 40 20                   movq    0x20(%rax), %rax
// 197: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000199:  R_X86_64_64  _JIT_OPARG
// 1a1: 0f b7 c9                      movzwl  %cx, %ecx
// 1a4: 48 8b 4c c8 18                movq    0x18(%rax,%rcx,8), %rcx
// 1a9: 48 85 ff                      testq   %rdi, %rdi
// 1ac: 74 29                         je      0x1d7 <_JIT_ENTRY+0x1d7>
// 1ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b0:  R_X86_64_64  PyDict_Type
// 1b8: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// 1bc: 0f 84 9c 00 00 00             je      0x25e <_JIT_ENTRY+0x25e>
// 1c2: 48 89 ce                      movq    %rcx, %rsi
// 1c5: 4c 89 e2                      movq    %r12, %rdx
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  PyObject_SetItem
// 1d2: e9 97 00 00 00                jmp     0x26e <_JIT_ENTRY+0x26e>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  PyExc_SystemError
// 1e1: 48 8b 30                      movq    (%rax), %rsi
// 1e4: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001e6:  R_X86_64_64  .rodata.str1.1+0x39
// 1ee: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 00000000000001f0:  R_X86_64_64  _PyErr_Format
// 1f8: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1fc: 31 c0                         xorl    %eax, %eax
// 1fe: 41 ff d0                      callq   *%r8
// 201: 49 8b 04 24                   movq    (%r12), %rax
// 205: 48 85 c0                      testq   %rax, %rax
// 208: 7f 22                         jg      0x22c <_JIT_ENTRY+0x22c>
// 20a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020c:  R_X86_64_64  .rodata.str1.1
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _Py_NegativeRefcount
// 21e: be 4d 03 00 00                movl    $0x34d, %esi            # imm = 0x34D
// 223: 4c 89 e2                      movq    %r12, %rdx
// 226: ff d0                         callq   *%rax
// 228: 49 8b 04 24                   movq    (%r12), %rax
// 22c: 85 c0                         testl   %eax, %eax
// 22e: 0f 88 1d ff ff ff             js      0x151 <_JIT_ENTRY+0x151>
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23e: ff d0                         callq   *%rax
// 240: 49 ff 0c 24                   decq    (%r12)
// 244: 0f 85 07 ff ff ff             jne     0x151 <_JIT_ENTRY+0x151>
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_Dealloc
// 254: 4c 89 e7                      movq    %r12, %rdi
// 257: ff d0                         callq   *%rax
// 259: e9 f3 fe ff ff                jmp     0x151 <_JIT_ENTRY+0x151>
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  PyDict_SetItem
// 268: 48 89 ce                      movq    %rcx, %rsi
// 26b: 4c 89 e2                      movq    %r12, %rdx
// 26e: ff d0                         callq   *%rax
// 270: 89 c5                         movl    %eax, %ebp
// 272: 49 8b 04 24                   movq    (%r12), %rax
// 276: 48 85 c0                      testq   %rax, %rax
// 279: 7f 22                         jg      0x29d <_JIT_ENTRY+0x29d>
// 27b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027d:  R_X86_64_64  .rodata.str1.1
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _Py_NegativeRefcount
// 28f: be 54 03 00 00                movl    $0x354, %esi            # imm = 0x354
// 294: 4c 89 e2                      movq    %r12, %rdx
// 297: ff d0                         callq   *%rax
// 299: 49 8b 04 24                   movq    (%r12), %rax
// 29d: 85 c0                         testl   %eax, %eax
// 29f: 78 21                         js      0x2c2 <_JIT_ENTRY+0x2c2>
// 2a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ab: ff d0                         callq   *%rax
// 2ad: 49 ff 0c 24                   decq    (%r12)
// 2b1: 75 0f                         jne     0x2c2 <_JIT_ENTRY+0x2c2>
// 2b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b5:  R_X86_64_64  _Py_Dealloc
// 2bd: 4c 89 e7                      movq    %r12, %rdi
// 2c0: ff d0                         callq   *%rax
// 2c2: 85 ed                         testl   %ebp, %ebp
// 2c4: 0f 85 87 fe ff ff             jne     0x151 <_JIT_ENTRY+0x151>
// 2ca: 49 83 c7 f8                   addq    $-0x8, %r15
// 2ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d0:  R_X86_64_64  _JIT_CONTINUE
// 2d8: 48 89 df                      movq    %rbx, %rdi
// 2db: 4c 89 fe                      movq    %r15, %rsi
// 2de: 48 8b 14 24                   movq    (%rsp), %rdx
// 2e2: 48 83 c4 08                   addq    $0x8, %rsp
// 2e6: 5b                            popq    %rbx
// 2e7: 41 5c                         popq    %r12
// 2e9: 41 5d                         popq    %r13
// 2eb: 41 5e                         popq    %r14
// 2ed: 41 5f                         popq    %r15
// 2ef: 5d                            popq    %rbp
// 2f0: ff e0                         jmpq    *%rax
// 2f2: 
static const unsigned char _STORE_SUBSCRplus_STORE_NAME_code_body[755] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xf0, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xc2, 0x4d, 0x8b, 0x67, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x28, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x4c, 0xc8, 0x18, 0x48, 0x85, 0xff, 0x74, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x0f, 0x84, 0x9c, 0x00, 0x00, 0x00, 0x48, 0x89, 0xce, 0x4c, 0x89, 0xe2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x97, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4d, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x1d, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x07, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xf3, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xce, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x85, 0x87, 0xfe, 0xff, 0xff, 0x49, 0x83, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_STORE_NAME_code_holes[30] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x1e6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2d0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when storing %R\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_STORE_NAME_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_STORE_NAME_data_holes[1];

// _STORE_SUBSCRplus_STORE_SLICE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_STORE_SLICE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f4                      movq    %rsi, %r12
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 6e f8                   movq    -0x8(%rsi), %r13
// 19: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 1d: 4c 8b 7e f0                   movq    -0x10(%rsi), %r15
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ff                      movq    %r15, %rdi
// 2e: 4c 89 ee                      movq    %r13, %rsi
// 31: 4c 89 f2                      movq    %r14, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 06                      movq    (%r14), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 f2                      movq    %r14, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0e                      decq    (%r14)
// 7a: 74 0e                         je      0x8a <_JIT_ENTRY+0x8a>
// 7c: 49 8b 07                      movq    (%r15), %rax
// 7f: 48 85 c0                      testq   %rax, %rax
// 82: 7e 1d                         jle     0xa1 <_JIT_ENTRY+0xa1>
// 84: 85 c0                         testl   %eax, %eax
// 86: 79 3e                         jns     0xc6 <_JIT_ENTRY+0xc6>
// 88: eb 4d                         jmp     0xd7 <_JIT_ENTRY+0xd7>
// 8a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008c:  R_X86_64_64  _Py_Dealloc
// 94: 4c 89 f7                      movq    %r14, %rdi
// 97: ff d0                         callq   *%rax
// 99: 49 8b 07                      movq    (%r15), %rax
// 9c: 48 85 c0                      testq   %rax, %rax
// 9f: 7f e3                         jg      0x84 <_JIT_ENTRY+0x84>
// a1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a3:  R_X86_64_64  .rodata.str1.1
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  _Py_NegativeRefcount
// b5: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// ba: 4c 89 fa                      movq    %r15, %rdx
// bd: ff d0                         callq   *%rax
// bf: 49 8b 07                      movq    (%r15), %rax
// c2: 85 c0                         testl   %eax, %eax
// c4: 78 11                         js      0xd7 <_JIT_ENTRY+0xd7>
// c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d0: ff d0                         callq   *%rax
// d2: 49 ff 0f                      decq    (%r15)
// d5: 74 14                         je      0xeb <_JIT_ENTRY+0xeb>
// d7: 49 8b 45 00                   movq    (%r13), %rax
// db: 48 85 c0                      testq   %rax, %rax
// de: 7e 23                         jle     0x103 <_JIT_ENTRY+0x103>
// e0: 4d 8d 7c 24 e8                leaq    -0x18(%r12), %r15
// e5: 85 c0                         testl   %eax, %eax
// e7: 79 45                         jns     0x12e <_JIT_ENTRY+0x12e>
// e9: eb 55                         jmp     0x140 <_JIT_ENTRY+0x140>
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _Py_Dealloc
// f5: 4c 89 ff                      movq    %r15, %rdi
// f8: ff d0                         callq   *%rax
// fa: 49 8b 45 00                   movq    (%r13), %rax
// fe: 48 85 c0                      testq   %rax, %rax
// 101: 7f dd                         jg      0xe0 <_JIT_ENTRY+0xe0>
// 103: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000105:  R_X86_64_64  .rodata.str1.1
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_NegativeRefcount
// 117: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11c: 4c 89 ea                      movq    %r13, %rdx
// 11f: ff d0                         callq   *%rax
// 121: 49 8b 45 00                   movq    (%r13), %rax
// 125: 4d 8d 7c 24 e8                leaq    -0x18(%r12), %r15
// 12a: 85 c0                         testl   %eax, %eax
// 12c: 78 12                         js      0x140 <_JIT_ENTRY+0x140>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 138: ff d0                         callq   *%rax
// 13a: 49 ff 4d 00                   decq    (%r13)
// 13e: 74 57                         je      0x197 <_JIT_ENTRY+0x197>
// 140: 85 ed                         testl   %ebp, %ebp
// 142: 4d 0f 45 fc                   cmovneq %r12, %r15
// 146: 0f 85 b7 01 00 00             jne     0x303 <_JIT_ENTRY+0x303>
// 14c: 49 8b 77 f8                   movq    -0x8(%r15), %rsi
// 150: 49 8b 7f f0                   movq    -0x10(%r15), %rdi
// 154: 4d 8b 6f e0                   movq    -0x20(%r15), %r13
// 158: 4d 8b 67 e8                   movq    -0x18(%r15), %r12
// 15c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015e:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// 166: ff d0                         callq   *%rax
// 168: 48 85 c0                      testq   %rax, %rax
// 16b: 74 47                         je      0x1b4 <_JIT_ENTRY+0x1b4>
// 16d: 48 89 c5                      movq    %rax, %rbp
// 170: 4c 89 e7                      movq    %r12, %rdi
// 173: 48 89 c6                      movq    %rax, %rsi
// 176: 4c 89 ea                      movq    %r13, %rdx
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  PyObject_SetItem
// 183: ff d0                         callq   *%rax
// 185: 41 89 c6                      movl    %eax, %r14d
// 188: 48 8b 45 00                   movq    (%rbp), %rax
// 18c: 48 85 c0                      testq   %rax, %rax
// 18f: 7e 30                         jle     0x1c1 <_JIT_ENTRY+0x1c1>
// 191: 85 c0                         testl   %eax, %eax
// 193: 79 52                         jns     0x1e7 <_JIT_ENTRY+0x1e7>
// 195: eb 71                         jmp     0x208 <_JIT_ENTRY+0x208>
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _Py_Dealloc
// 1a1: 4c 89 ef                      movq    %r13, %rdi
// 1a4: ff d0                         callq   *%rax
// 1a6: 85 ed                         testl   %ebp, %ebp
// 1a8: 4d 0f 45 fc                   cmovneq %r12, %r15
// 1ac: 0f 85 51 01 00 00             jne     0x303 <_JIT_ENTRY+0x303>
// 1b2: eb 98                         jmp     0x14c <_JIT_ENTRY+0x14c>
// 1b4: 31 ed                         xorl    %ebp, %ebp
// 1b6: 49 8b 45 00                   movq    (%r13), %rax
// 1ba: 48 85 c0                      testq   %rax, %rax
// 1bd: 7f 7b                         jg      0x23a <_JIT_ENTRY+0x23a>
// 1bf: eb 57                         jmp     0x218 <_JIT_ENTRY+0x218>
// 1c1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c3:  R_X86_64_64  .rodata.str1.1
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_NegativeRefcount
// 1d5: be b2 01 00 00                movl    $0x1b2, %esi            # imm = 0x1B2
// 1da: 48 89 ea                      movq    %rbp, %rdx
// 1dd: ff d0                         callq   *%rax
// 1df: 48 8b 45 00                   movq    (%rbp), %rax
// 1e3: 85 c0                         testl   %eax, %eax
// 1e5: 78 21                         js      0x208 <_JIT_ENTRY+0x208>
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f1: ff d0                         callq   *%rax
// 1f3: 48 ff 4d 00                   decq    (%rbp)
// 1f7: 75 0f                         jne     0x208 <_JIT_ENTRY+0x208>
// 1f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fb:  R_X86_64_64  _Py_Dealloc
// 203: 48 89 ef                      movq    %rbp, %rdi
// 206: ff d0                         callq   *%rax
// 208: 45 85 f6                      testl   %r14d, %r14d
// 20b: 40 0f 94 c5                   sete    %bpl
// 20f: 49 8b 45 00                   movq    (%r13), %rax
// 213: 48 85 c0                      testq   %rax, %rax
// 216: 7f 22                         jg      0x23a <_JIT_ENTRY+0x23a>
// 218: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021a:  R_X86_64_64  .rodata.str1.1
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_NegativeRefcount
// 22c: be b4 01 00 00                movl    $0x1b4, %esi            # imm = 0x1B4
// 231: 4c 89 ea                      movq    %r13, %rdx
// 234: ff d0                         callq   *%rax
// 236: 49 8b 45 00                   movq    (%r13), %rax
// 23a: 85 c0                         testl   %eax, %eax
// 23c: 78 12                         js      0x250 <_JIT_ENTRY+0x250>
// 23e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000240:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 248: ff d0                         callq   *%rax
// 24a: 49 ff 4d 00                   decq    (%r13)
// 24e: 74 13                         je      0x263 <_JIT_ENTRY+0x263>
// 250: 49 8b 04 24                   movq    (%r12), %rax
// 254: 48 85 c0                      testq   %rax, %rax
// 257: 7e 22                         jle     0x27b <_JIT_ENTRY+0x27b>
// 259: 4d 8d 77 e0                   leaq    -0x20(%r15), %r14
// 25d: 85 c0                         testl   %eax, %eax
// 25f: 79 44                         jns     0x2a5 <_JIT_ENTRY+0x2a5>
// 261: eb 54                         jmp     0x2b7 <_JIT_ENTRY+0x2b7>
// 263: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000265:  R_X86_64_64  _Py_Dealloc
// 26d: 4c 89 ef                      movq    %r13, %rdi
// 270: ff d0                         callq   *%rax
// 272: 49 8b 04 24                   movq    (%r12), %rax
// 276: 48 85 c0                      testq   %rax, %rax
// 279: 7f de                         jg      0x259 <_JIT_ENTRY+0x259>
// 27b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027d:  R_X86_64_64  .rodata.str1.1
// 285: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000287:  R_X86_64_64  _Py_NegativeRefcount
// 28f: be b5 01 00 00                movl    $0x1b5, %esi            # imm = 0x1B5
// 294: 4c 89 e2                      movq    %r12, %rdx
// 297: ff d0                         callq   *%rax
// 299: 49 8b 04 24                   movq    (%r12), %rax
// 29d: 4d 8d 77 e0                   leaq    -0x20(%r15), %r14
// 2a1: 85 c0                         testl   %eax, %eax
// 2a3: 78 12                         js      0x2b7 <_JIT_ENTRY+0x2b7>
// 2a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2af: ff d0                         callq   *%rax
// 2b1: 49 ff 0c 24                   decq    (%r12)
// 2b5: 74 2d                         je      0x2e4 <_JIT_ENTRY+0x2e4>
// 2b7: 40 84 ed                      testb   %bpl, %bpl
// 2ba: 4d 0f 45 fe                   cmovneq %r14, %r15
// 2be: 74 3c                         je      0x2fc <_JIT_ENTRY+0x2fc>
// 2c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c2:  R_X86_64_64  _JIT_CONTINUE
// 2ca: 48 89 df                      movq    %rbx, %rdi
// 2cd: 4c 89 fe                      movq    %r15, %rsi
// 2d0: 48 8b 14 24                   movq    (%rsp), %rdx
// 2d4: 48 83 c4 08                   addq    $0x8, %rsp
// 2d8: 5b                            popq    %rbx
// 2d9: 41 5c                         popq    %r12
// 2db: 41 5d                         popq    %r13
// 2dd: 41 5e                         popq    %r14
// 2df: 41 5f                         popq    %r15
// 2e1: 5d                            popq    %rbp
// 2e2: ff e0                         jmpq    *%rax
// 2e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e6:  R_X86_64_64  _Py_Dealloc
// 2ee: 4c 89 e7                      movq    %r12, %rdi
// 2f1: ff d0                         callq   *%rax
// 2f3: 40 84 ed                      testb   %bpl, %bpl
// 2f6: 4d 0f 45 fe                   cmovneq %r14, %r15
// 2fa: 75 c4                         jne     0x2c0 <_JIT_ENTRY+0x2c0>
// 2fc: 49 83 c7 f8                   addq    $-0x8, %r15
// 300: 4d 89 fc                      movq    %r15, %r12
// 303: 49 29 dc                      subq    %rbx, %r12
// 306: 49 83 c4 a0                   addq    $-0x60, %r12
// 30a: 49 c1 ec 03                   shrq    $0x3, %r12
// 30e: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 312: 31 c0                         xorl    %eax, %eax
// 314: 48 83 c4 08                   addq    $0x8, %rsp
// 318: 5b                            popq    %rbx
// 319: 41 5c                         popq    %r12
// 31b: 41 5d                         popq    %r13
// 31d: 41 5e                         popq    %r14
// 31f: 41 5f                         popq    %r15
// 321: 5d                            popq    %rbp
// 322: c3                            retq
// 323: 
static const unsigned char _STORE_SUBSCRplus_STORE_SLICE_code_body[804] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf4, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x6e, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x7e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0e, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x1d, 0x85, 0xc0, 0x79, 0x3e, 0xeb, 0x4d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xe3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x14, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x23, 0x4d, 0x8d, 0x7c, 0x24, 0xe8, 0x85, 0xc0, 0x79, 0x45, 0xeb, 0x55, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xdd, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x4d, 0x8d, 0x7c, 0x24, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x57, 0x85, 0xed, 0x4d, 0x0f, 0x45, 0xfc, 0x0f, 0x85, 0xb7, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x77, 0xf8, 0x49, 0x8b, 0x7f, 0xf0, 0x4d, 0x8b, 0x6f, 0xe0, 0x4d, 0x8b, 0x67, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x47, 0x48, 0x89, 0xc5, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xc6, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0x89, 0xc6, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x30, 0x85, 0xc0, 0x79, 0x52, 0xeb, 0x71, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x45, 0xfc, 0x0f, 0x85, 0x51, 0x01, 0x00, 0x00, 0xeb, 0x98, 0x31, 0xed, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x7b, 0xeb, 0x57, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb2, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x45, 0x85, 0xf6, 0x40, 0x0f, 0x94, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb4, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe0, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb5, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe0, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2d, 0x40, 0x84, 0xed, 0x4d, 0x0f, 0x45, 0xfe, 0x74, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x40, 0x84, 0xed, 0x4d, 0x0f, 0x45, 0xfe, 0x75, 0xc4, 0x49, 0x83, 0xc7, 0xf8, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xa0, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _STORE_SUBSCRplus_STORE_SLICE_code_holes[29] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x240, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x265, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x287, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_STORE_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_STORE_SLICE_data_holes[1];

// _STORE_SUBSCRplus_STORE_SUBSCR
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_STORE_SUBSCR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 0f                         je      0xea <_JIT_ENTRY+0xea>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 1e                         jle     0x102 <_JIT_ENTRY+0x102>
// e4: 85 c0                         testl   %eax, %eax
// e6: 79 40                         jns     0x128 <_JIT_ENTRY+0x128>
// e8: eb 50                         jmp     0x13a <_JIT_ENTRY+0x13a>
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_Dealloc
// f4: 4c 89 ef                      movq    %r13, %rdi
// f7: ff d0                         callq   *%rax
// f9: 49 8b 04 24                   movq    (%r12), %rax
// fd: 48 85 c0                      testq   %rax, %rax
// 100: 7f e2                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 102: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000104:  R_X86_64_64  .rodata.str1.1
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_NegativeRefcount
// 116: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11b: 4c 89 e2                      movq    %r12, %rdx
// 11e: ff d0                         callq   *%rax
// 120: 49 8b 04 24                   movq    (%r12), %rax
// 124: 85 c0                         testl   %eax, %eax
// 126: 78 12                         js      0x13a <_JIT_ENTRY+0x13a>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 132: ff d0                         callq   *%rax
// 134: 49 ff 0c 24                   decq    (%r12)
// 138: 74 39                         je      0x173 <_JIT_ENTRY+0x173>
// 13a: 85 ed                         testl   %ebp, %ebp
// 13c: 0f 85 46 01 00 00             jne     0x288 <_JIT_ENTRY+0x288>
// 142: 4c 8b 63 e0                   movq    -0x20(%rbx), %r12
// 146: 4c 8b 7b d0                   movq    -0x30(%rbx), %r15
// 14a: 4c 8b 6b d8                   movq    -0x28(%rbx), %r13
// 14e: 4c 89 ef                      movq    %r13, %rdi
// 151: 4c 89 e6                      movq    %r12, %rsi
// 154: 4c 89 fa                      movq    %r15, %rdx
// 157: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000159:  R_X86_64_64  PyObject_SetItem
// 161: ff d0                         callq   *%rax
// 163: 89 c5                         movl    %eax, %ebp
// 165: 49 8b 07                      movq    (%r15), %rax
// 168: 48 85 c0                      testq   %rax, %rax
// 16b: 7e 1f                         jle     0x18c <_JIT_ENTRY+0x18c>
// 16d: 85 c0                         testl   %eax, %eax
// 16f: 79 40                         jns     0x1b1 <_JIT_ENTRY+0x1b1>
// 171: eb 4f                         jmp     0x1c2 <_JIT_ENTRY+0x1c2>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_Dealloc
// 17d: 4c 89 e7                      movq    %r12, %rdi
// 180: ff d0                         callq   *%rax
// 182: 85 ed                         testl   %ebp, %ebp
// 184: 0f 85 fe 00 00 00             jne     0x288 <_JIT_ENTRY+0x288>
// 18a: eb b6                         jmp     0x142 <_JIT_ENTRY+0x142>
// 18c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018e:  R_X86_64_64  .rodata.str1.1
// 196: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000198:  R_X86_64_64  _Py_NegativeRefcount
// 1a0: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 1a5: 4c 89 fa                      movq    %r15, %rdx
// 1a8: ff d0                         callq   *%rax
// 1aa: 49 8b 07                      movq    (%r15), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 78 11                         js      0x1c2 <_JIT_ENTRY+0x1c2>
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1bb: ff d0                         callq   *%rax
// 1bd: 49 ff 0f                      decq    (%r15)
// 1c0: 74 0f                         je      0x1d1 <_JIT_ENTRY+0x1d1>
// 1c2: 49 8b 45 00                   movq    (%r13), %rax
// 1c6: 48 85 c0                      testq   %rax, %rax
// 1c9: 7e 1e                         jle     0x1e9 <_JIT_ENTRY+0x1e9>
// 1cb: 85 c0                         testl   %eax, %eax
// 1cd: 79 40                         jns     0x20f <_JIT_ENTRY+0x20f>
// 1cf: eb 50                         jmp     0x221 <_JIT_ENTRY+0x221>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 4c 89 ff                      movq    %r15, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 49 8b 45 00                   movq    (%r13), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7f e2                         jg      0x1cb <_JIT_ENTRY+0x1cb>
// 1e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001eb:  R_X86_64_64  .rodata.str1.1
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _Py_NegativeRefcount
// 1fd: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// 202: 4c 89 ea                      movq    %r13, %rdx
// 205: ff d0                         callq   *%rax
// 207: 49 8b 45 00                   movq    (%r13), %rax
// 20b: 85 c0                         testl   %eax, %eax
// 20d: 78 12                         js      0x221 <_JIT_ENTRY+0x221>
// 20f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000211:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 219: ff d0                         callq   *%rax
// 21b: 49 ff 4d 00                   decq    (%r13)
// 21f: 74 0f                         je      0x230 <_JIT_ENTRY+0x230>
// 221: 49 8b 04 24                   movq    (%r12), %rax
// 225: 48 85 c0                      testq   %rax, %rax
// 228: 7e 1e                         jle     0x248 <_JIT_ENTRY+0x248>
// 22a: 85 c0                         testl   %eax, %eax
// 22c: 79 40                         jns     0x26e <_JIT_ENTRY+0x26e>
// 22e: eb 50                         jmp     0x280 <_JIT_ENTRY+0x280>
// 230: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000232:  R_X86_64_64  _Py_Dealloc
// 23a: 4c 89 ef                      movq    %r13, %rdi
// 23d: ff d0                         callq   *%rax
// 23f: 49 8b 04 24                   movq    (%r12), %rax
// 243: 48 85 c0                      testq   %rax, %rax
// 246: 7f e2                         jg      0x22a <_JIT_ENTRY+0x22a>
// 248: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024a:  R_X86_64_64  .rodata.str1.1
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_NegativeRefcount
// 25c: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 261: 4c 89 e2                      movq    %r12, %rdx
// 264: ff d0                         callq   *%rax
// 266: 49 8b 04 24                   movq    (%r12), %rax
// 26a: 85 c0                         testl   %eax, %eax
// 26c: 78 12                         js      0x280 <_JIT_ENTRY+0x280>
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 278: ff d0                         callq   *%rax
// 27a: 49 ff 0c 24                   decq    (%r12)
// 27e: 74 28                         je      0x2a8 <_JIT_ENTRY+0x2a8>
// 280: 85 ed                         testl   %ebp, %ebp
// 282: 74 37                         je      0x2bb <_JIT_ENTRY+0x2bb>
// 284: 48 83 c3 e8                   addq    $-0x18, %rbx
// 288: 4c 29 f3                      subq    %r14, %rbx
// 28b: 48 83 c3 a0                   addq    $-0x60, %rbx
// 28f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 293: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 297: 31 c0                         xorl    %eax, %eax
// 299: 48 83 c4 08                   addq    $0x8, %rsp
// 29d: 5b                            popq    %rbx
// 29e: 41 5c                         popq    %r12
// 2a0: 41 5d                         popq    %r13
// 2a2: 41 5e                         popq    %r14
// 2a4: 41 5f                         popq    %r15
// 2a6: 5d                            popq    %rbp
// 2a7: c3                            retq
// 2a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002aa:  R_X86_64_64  _Py_Dealloc
// 2b2: 4c 89 e7                      movq    %r12, %rdi
// 2b5: ff d0                         callq   *%rax
// 2b7: 85 ed                         testl   %ebp, %ebp
// 2b9: 75 c9                         jne     0x284 <_JIT_ENTRY+0x284>
// 2bb: 48 83 c3 d0                   addq    $-0x30, %rbx
// 2bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c1:  R_X86_64_64  _JIT_CONTINUE
// 2c9: 4c 89 f7                      movq    %r14, %rdi
// 2cc: 48 89 de                      movq    %rbx, %rsi
// 2cf: 48 8b 14 24                   movq    (%rsp), %rdx
// 2d3: 48 83 c4 08                   addq    $0x8, %rsp
// 2d7: 5b                            popq    %rbx
// 2d8: 41 5c                         popq    %r12
// 2da: 41 5d                         popq    %r13
// 2dc: 41 5e                         popq    %r14
// 2de: 41 5f                         popq    %r15
// 2e0: 5d                            popq    %rbp
// 2e1: ff e0                         jmpq    *%rax
// 2e3: 
static const unsigned char _STORE_SUBSCRplus_STORE_SUBSCR_code_body[740] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x39, 0x85, 0xed, 0x0f, 0x85, 0x46, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xe0, 0x4c, 0x8b, 0x7b, 0xd0, 0x4c, 0x8b, 0x6b, 0xd8, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x4f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00, 0xeb, 0xb6, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x74, 0x37, 0x48, 0x83, 0xc3, 0xe8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x75, 0xc9, 0x48, 0x83, 0xc3, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_STORE_SUBSCR_code_holes[28] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x211, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x232, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_STORE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_STORE_SUBSCR_data_holes[1];

// _STORE_SUBSCRplus_STORE_SUBSCR_DICT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_STORE_SUBSCR_DICT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f7                      movq    %rsi, %r15
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 f2                      movq    %r14, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 06                      movq    (%r14), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 f2                      movq    %r14, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0e                      decq    (%r14)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 f7                      movq    %r14, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1e                         je      0x160 <_JIT_ENTRY+0x160>
// 142: 4d 89 fc                      movq    %r15, %r12
// 145: 85 ed                         testl   %ebp, %ebp
// 147: 4d 0f 44 e6                   cmoveq  %r14, %r12
// 14b: 74 2d                         je      0x17a <_JIT_ENTRY+0x17a>
// 14d: 49 29 df                      subq    %rbx, %r15
// 150: 49 83 c7 a0                   addq    $-0x60, %r15
// 154: 49 c1 ef 03                   shrq    $0x3, %r15
// 158: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 15c: 31 c0                         xorl    %eax, %eax
// 15e: eb 57                         jmp     0x1b7 <_JIT_ENTRY+0x1b7>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_Dealloc
// 16a: 4c 89 e7                      movq    %r12, %rdi
// 16d: ff d0                         callq   *%rax
// 16f: 4d 89 fc                      movq    %r15, %r12
// 172: 85 ed                         testl   %ebp, %ebp
// 174: 4d 0f 44 e6                   cmoveq  %r14, %r12
// 178: 75 d3                         jne     0x14d <_JIT_ENTRY+0x14d>
// 17a: 4d 8b 7c 24 f0                movq    -0x10(%r12), %r15
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  PyDict_Type
// 189: 49 39 47 08                   cmpq    %rax, 0x8(%r15)
// 18d: 74 37                         je      0x1c6 <_JIT_ENTRY+0x1c6>
// 18f: 49 29 de                      subq    %rbx, %r14
// 192: 49 83 c6 b8                   addq    $-0x48, %r14
// 196: 49 c1 ee 03                   shrq    $0x3, %r14
// 19a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 19e: 48 8b 03                      movq    (%rbx), %rax
// 1a1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a3:  R_X86_64_64  _JIT_TARGET
// 1ab: 89 c9                         movl    %ecx, %ecx
// 1ad: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b7: 48 83 c4 08                   addq    $0x8, %rsp
// 1bb: 5b                            popq    %rbx
// 1bc: 41 5c                         popq    %r12
// 1be: 41 5d                         popq    %r13
// 1c0: 41 5e                         popq    %r14
// 1c2: 41 5f                         popq    %r15
// 1c4: 5d                            popq    %rbp
// 1c5: c3                            retq
// 1c6: 49 8b 54 24 e8                movq    -0x18(%r12), %rdx
// 1cb: 49 8b 74 24 f8                movq    -0x8(%r12), %rsi
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _PyDict_SetItem_Take2
// 1da: 4c 89 ff                      movq    %r15, %rdi
// 1dd: ff d0                         callq   *%rax
// 1df: 89 c5                         movl    %eax, %ebp
// 1e1: 49 8b 07                      movq    (%r15), %rax
// 1e4: 48 85 c0                      testq   %rax, %rax
// 1e7: 7f 21                         jg      0x20a <_JIT_ENTRY+0x20a>
// 1e9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001eb:  R_X86_64_64  .rodata.str1.1
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _Py_NegativeRefcount
// 1fd: be 63 02 00 00                movl    $0x263, %esi            # imm = 0x263
// 202: 4c 89 fa                      movq    %r15, %rdx
// 205: ff d0                         callq   *%rax
// 207: 49 8b 07                      movq    (%r15), %rax
// 20a: 85 c0                         testl   %eax, %eax
// 20c: 78 20                         js      0x22e <_JIT_ENTRY+0x22e>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 218: ff d0                         callq   *%rax
// 21a: 49 ff 0f                      decq    (%r15)
// 21d: 75 0f                         jne     0x22e <_JIT_ENTRY+0x22e>
// 21f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000221:  R_X86_64_64  _Py_Dealloc
// 229: 4c 89 ff                      movq    %r15, %rdi
// 22c: ff d0                         callq   *%rax
// 22e: 4d 89 f7                      movq    %r14, %r15
// 231: 85 ed                         testl   %ebp, %ebp
// 233: 0f 85 14 ff ff ff             jne     0x14d <_JIT_ENTRY+0x14d>
// 239: 49 83 c4 e8                   addq    $-0x18, %r12
// 23d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023f:  R_X86_64_64  _JIT_CONTINUE
// 247: 48 89 df                      movq    %rbx, %rdi
// 24a: 4c 89 e6                      movq    %r12, %rsi
// 24d: 48 8b 14 24                   movq    (%rsp), %rdx
// 251: 48 83 c4 08                   addq    $0x8, %rsp
// 255: 5b                            popq    %rbx
// 256: 41 5c                         popq    %r12
// 258: 41 5d                         popq    %r13
// 25a: 41 5e                         popq    %r14
// 25c: 41 5f                         popq    %r15
// 25e: 5d                            popq    %rbp
// 25f: ff e0                         jmpq    *%rax
// 261: 
static const unsigned char _STORE_SUBSCRplus_STORE_SUBSCR_DICT_code_body[610] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1e, 0x4d, 0x89, 0xfc, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xe6, 0x74, 0x2d, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xa0, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0xeb, 0x57, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xe6, 0x75, 0xd3, 0x4d, 0x8b, 0x7c, 0x24, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x47, 0x08, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x54, 0x24, 0xe8, 0x49, 0x8b, 0x74, 0x24, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x63, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x89, 0xf7, 0x85, 0xed, 0x0f, 0x85, 0x14, 0xff, 0xff, 0xff, 0x49, 0x83, 0xc4, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_STORE_SUBSCR_DICT_code_holes[22] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x1eb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_STORE_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_STORE_SUBSCR_DICT_data_holes[1];

// _STORE_SUBSCRplus_STORE_SUBSCR_LIST_INT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_STORE_SUBSCR_LIST_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1e                         je      0x160 <_JIT_ENTRY+0x160>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2d                         je      0x177 <_JIT_ENTRY+0x177>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: e9 85 01 00 00                jmp     0x2e5 <_JIT_ENTRY+0x2e5>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_Dealloc
// 16a: 4c 89 e7                      movq    %r12, %rdi
// 16d: ff d0                         callq   *%rax
// 16f: 85 ed                         testl   %ebp, %ebp
// 171: 49 0f 44 df                   cmoveq  %r15, %rbx
// 175: 75 d3                         jne     0x14a <_JIT_ENTRY+0x14a>
// 177: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  PyLong_Type
// 185: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 189: 0f 85 2e 01 00 00             jne     0x2bd <_JIT_ENTRY+0x2bd>
// 18f: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  PyList_Type
// 19d: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1a2: 0f 85 15 01 00 00             jne     0x2bd <_JIT_ENTRY+0x2bd>
// 1a8: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// 1ad: 0f 87 0a 01 00 00             ja      0x2bd <_JIT_ENTRY+0x2bd>
// 1b3: 41 8b 45 18                   movl    0x18(%r13), %eax
// 1b7: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 1bc: 0f 8e fb 00 00 00             jle     0x2bd <_JIT_ENTRY+0x2bd>
// 1c2: 48 8b 4b e8                   movq    -0x18(%rbx), %rcx
// 1c6: 49 8b 54 24 18                movq    0x18(%r12), %rdx
// 1cb: 4c 8b 3c c2                   movq    (%rdx,%rax,8), %r15
// 1cf: 48 89 0c c2                   movq    %rcx, (%rdx,%rax,8)
// 1d3: 49 8b 07                      movq    (%r15), %rax
// 1d6: 48 85 c0                      testq   %rax, %rax
// 1d9: 7f 21                         jg      0x1fc <_JIT_ENTRY+0x1fc>
// 1db: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001dd:  R_X86_64_64  .rodata.str1.1
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_NegativeRefcount
// 1ef: be 52 02 00 00                movl    $0x252, %esi            # imm = 0x252
// 1f4: 4c 89 fa                      movq    %r15, %rdx
// 1f7: ff d0                         callq   *%rax
// 1f9: 49 8b 07                      movq    (%r15), %rax
// 1fc: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001fe:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 206: 85 c0                         testl   %eax, %eax
// 208: 78 16                         js      0x220 <_JIT_ENTRY+0x220>
// 20a: ff d5                         callq   *%rbp
// 20c: 49 ff 0f                      decq    (%r15)
// 20f: 75 0f                         jne     0x220 <_JIT_ENTRY+0x220>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_Dealloc
// 21b: 4c 89 ff                      movq    %r15, %rdi
// 21e: ff d0                         callq   *%rax
// 220: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 225: 75 28                         jne     0x24f <_JIT_ENTRY+0x24f>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  PyInterpreterState_Get
// 231: ff d0                         callq   *%rax
// 233: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 23a: 49 ff 4d 00                   decq    (%r13)
// 23e: 75 0f                         jne     0x24f <_JIT_ENTRY+0x24f>
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  PyObject_Free
// 24a: 4c 89 ef                      movq    %r13, %rdi
// 24d: ff d0                         callq   *%rax
// 24f: 49 8b 04 24                   movq    (%r12), %rax
// 253: 48 85 c0                      testq   %rax, %rax
// 256: 7f 22                         jg      0x27a <_JIT_ENTRY+0x27a>
// 258: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000025a:  R_X86_64_64  .rodata.str1.1
// 262: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000264:  R_X86_64_64  _Py_NegativeRefcount
// 26c: be 54 02 00 00                movl    $0x254, %esi            # imm = 0x254
// 271: 4c 89 e2                      movq    %r12, %rdx
// 274: ff d0                         callq   *%rax
// 276: 49 8b 04 24                   movq    (%r12), %rax
// 27a: 48 83 c3 e8                   addq    $-0x18, %rbx
// 27e: 85 c0                         testl   %eax, %eax
// 280: 78 17                         js      0x299 <_JIT_ENTRY+0x299>
// 282: ff d5                         callq   *%rbp
// 284: 49 ff 0c 24                   decq    (%r12)
// 288: 75 0f                         jne     0x299 <_JIT_ENTRY+0x299>
// 28a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028c:  R_X86_64_64  _Py_Dealloc
// 294: 4c 89 e7                      movq    %r12, %rdi
// 297: ff d0                         callq   *%rax
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _JIT_CONTINUE
// 2a3: 4c 89 f7                      movq    %r14, %rdi
// 2a6: 48 89 de                      movq    %rbx, %rsi
// 2a9: 48 8b 14 24                   movq    (%rsp), %rdx
// 2ad: 48 83 c4 08                   addq    $0x8, %rsp
// 2b1: 5b                            popq    %rbx
// 2b2: 41 5c                         popq    %r12
// 2b4: 41 5d                         popq    %r13
// 2b6: 41 5e                         popq    %r14
// 2b8: 41 5f                         popq    %r15
// 2ba: 5d                            popq    %rbp
// 2bb: ff e0                         jmpq    *%rax
// 2bd: 4c 29 f3                      subq    %r14, %rbx
// 2c0: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2c4: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2c8: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2cc: 49 8b 06                      movq    (%r14), %rax
// 2cf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002d1:  R_X86_64_64  _JIT_TARGET
// 2d9: 89 c9                         movl    %ecx, %ecx
// 2db: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2df: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2e5: 48 83 c4 08                   addq    $0x8, %rsp
// 2e9: 5b                            popq    %rbx
// 2ea: 41 5c                         popq    %r12
// 2ec: 41 5d                         popq    %r13
// 2ee: 41 5e                         popq    %r14
// 2f0: 41 5f                         popq    %r15
// 2f2: 5d                            popq    %rbp
// 2f3: c3                            retq
// 2f4: 
static const unsigned char _STORE_SUBSCRplus_STORE_SUBSCR_LIST_INT_code_body[757] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1e, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2d, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x85, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd3, 0x4c, 0x8b, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x2e, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x15, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x0a, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xfb, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4b, 0xe8, 0x49, 0x8b, 0x54, 0x24, 0x18, 0x4c, 0x8b, 0x3c, 0xc2, 0x48, 0x89, 0x0c, 0xc2, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x52, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x16, 0xff, 0xd5, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xe8, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _STORE_SUBSCRplus_STORE_SUBSCR_LIST_INT_code_holes[27] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x25a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x264, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x28c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2d1, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_STORE_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_STORE_SUBSCR_LIST_INT_data_holes[1];

// _STORE_SUBSCRplus_SWAP
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_SWAP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 185: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000187:  R_X86_64_64  _JIT_OPARG
// 18f: 0f b7 c9                      movzwl  %cx, %ecx
// 192: 48 c1 e1 03                   shlq    $0x3, %rcx
// 196: 48 89 da                      movq    %rbx, %rdx
// 199: 48 29 ca                      subq    %rcx, %rdx
// 19c: 48 f7 d9                      negq    %rcx
// 19f: 48 8b 12                      movq    (%rdx), %rdx
// 1a2: 48 89 04 0b                   movq    %rax, (%rbx,%rcx)
// 1a6: 48 89 53 f8                   movq    %rdx, -0x8(%rbx)
// 1aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ac:  R_X86_64_64  _JIT_CONTINUE
// 1b4: 4c 89 f7                      movq    %r14, %rdi
// 1b7: 48 89 de                      movq    %rbx, %rsi
// 1ba: 48 8b 14 24                   movq    (%rsp), %rdx
// 1be: 48 83 c4 08                   addq    $0x8, %rsp
// 1c2: 5b                            popq    %rbx
// 1c3: 41 5c                         popq    %r12
// 1c5: 41 5d                         popq    %r13
// 1c7: 41 5e                         popq    %r14
// 1c9: 41 5f                         popq    %r15
// 1cb: 5d                            popq    %rbp
// 1cc: ff e0                         jmpq    *%rax
// 1ce: 
static const unsigned char _STORE_SUBSCRplus_SWAP_code_body[463] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0x89, 0xda, 0x48, 0x29, 0xca, 0x48, 0xf7, 0xd9, 0x48, 0x8b, 0x12, 0x48, 0x89, 0x04, 0x0b, 0x48, 0x89, 0x53, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_SWAP_code_holes[16] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_SWAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_SWAP_data_holes[1];

// _STORE_SUBSCRplus_TO_BOOL
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_TO_BOOL.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c6 f0                   addq    $-0x10, %r14
// 14e: 4d 89 f5                      movq    %r14, %r13
// 151: 49 29 dd                      subq    %rbx, %r13
// 154: 49 83 c5 b0                   addq    $-0x50, %r13
// 158: 49 c1 ed 03                   shrq    $0x3, %r13
// 15c: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 4d 8b 7e f8                   movq    -0x8(%r14), %r15
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  PyObject_IsTrue
// 196: 4c 89 ff                      movq    %r15, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 89 c5                         movl    %eax, %ebp
// 19d: 49 8b 07                      movq    (%r15), %rax
// 1a0: 48 85 c0                      testq   %rax, %rax
// 1a3: 7e 06                         jle     0x1ab <_JIT_ENTRY+0x1ab>
// 1a5: 85 c0                         testl   %eax, %eax
// 1a7: 79 27                         jns     0x1d0 <_JIT_ENTRY+0x1d0>
// 1a9: eb 45                         jmp     0x1f0 <_JIT_ENTRY+0x1f0>
// 1ab: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ad:  R_X86_64_64  .rodata.str1.1
// 1b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b7:  R_X86_64_64  _Py_NegativeRefcount
// 1bf: be 86 00 00 00                movl    $0x86, %esi
// 1c4: 4c 89 fa                      movq    %r15, %rdx
// 1c7: ff d0                         callq   *%rax
// 1c9: 49 8b 07                      movq    (%r15), %rax
// 1cc: 85 c0                         testl   %eax, %eax
// 1ce: 78 20                         js      0x1f0 <_JIT_ENTRY+0x1f0>
// 1d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1da: ff d0                         callq   *%rax
// 1dc: 49 ff 0f                      decq    (%r15)
// 1df: 75 0f                         jne     0x1f0 <_JIT_ENTRY+0x1f0>
// 1e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e3:  R_X86_64_64  _Py_Dealloc
// 1eb: 4c 89 ff                      movq    %r15, %rdi
// 1ee: ff d0                         callq   *%rax
// 1f0: 85 ed                         testl   %ebp, %ebp
// 1f2: 0f 88 59 ff ff ff             js      0x151 <_JIT_ENTRY+0x151>
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _Py_FalseStruct
// 202: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000204:  R_X86_64_64  _Py_TrueStruct
// 20c: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 210: 49 89 4e f8                   movq    %rcx, -0x8(%r14)
// 214: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000216:  R_X86_64_64  _JIT_CONTINUE
// 21e: 48 89 df                      movq    %rbx, %rdi
// 221: 4c 89 f6                      movq    %r14, %rsi
// 224: 48 8b 14 24                   movq    (%rsp), %rdx
// 228: 48 83 c4 08                   addq    $0x8, %rsp
// 22c: 5b                            popq    %rbx
// 22d: 41 5c                         popq    %r12
// 22f: 41 5d                         popq    %r13
// 231: 41 5e                         popq    %r14
// 233: 41 5f                         popq    %r15
// 235: 5d                            popq    %rbp
// 236: ff e0                         jmpq    *%rax
// 238: 
static const unsigned char _STORE_SUBSCRplus_TO_BOOL_code_body[569] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x6e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x74, 0x3e, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb0, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x75, 0xc2, 0x4d, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x45, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x88, 0x59, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x4e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_TO_BOOL_code_holes[22] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x216, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_TO_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_TO_BOOL_data_holes[1];

// _STORE_SUBSCRplus_TO_BOOL_ALWAYS_TRUE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_TO_BOOL_ALWAYS_TRUE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1e                         je      0x160 <_JIT_ENTRY+0x160>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2d                         je      0x177 <_JIT_ENTRY+0x177>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: e9 d8 00 00 00                jmp     0x238 <_JIT_ENTRY+0x238>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_Dealloc
// 16a: 4c 89 e7                      movq    %r12, %rdi
// 16d: ff d0                         callq   *%rax
// 16f: 85 ed                         testl   %ebp, %ebp
// 171: 49 0f 44 df                   cmoveq  %r15, %rbx
// 175: 75 d3                         jne     0x14a <_JIT_ENTRY+0x14a>
// 177: 4c 8b 7b f8                   movq    -0x8(%rbx), %r15
// 17b: 49 8b 47 08                   movq    0x8(%r15), %rax
// 17f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000181:  R_X86_64_64  _JIT_OPERAND
// 189: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// 18f: 75 7f                         jne     0x210 <_JIT_ENTRY+0x210>
// 191: 49 8b 07                      movq    (%r15), %rax
// 194: 48 85 c0                      testq   %rax, %rax
// 197: 7f 21                         jg      0x1ba <_JIT_ENTRY+0x1ba>
// 199: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019b:  R_X86_64_64  .rodata.str1.1
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _Py_NegativeRefcount
// 1ad: be db 00 00 00                movl    $0xdb, %esi
// 1b2: 4c 89 fa                      movq    %r15, %rdx
// 1b5: ff d0                         callq   *%rax
// 1b7: 49 8b 07                      movq    (%r15), %rax
// 1ba: 85 c0                         testl   %eax, %eax
// 1bc: 78 20                         js      0x1de <_JIT_ENTRY+0x1de>
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c8: ff d0                         callq   *%rax
// 1ca: 49 ff 0f                      decq    (%r15)
// 1cd: 75 0f                         jne     0x1de <_JIT_ENTRY+0x1de>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_Dealloc
// 1d9: 4c 89 ff                      movq    %r15, %rdi
// 1dc: ff d0                         callq   *%rax
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _Py_TrueStruct
// 1e8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _JIT_CONTINUE
// 1f6: 4c 89 f7                      movq    %r14, %rdi
// 1f9: 48 89 de                      movq    %rbx, %rsi
// 1fc: 48 8b 14 24                   movq    (%rsp), %rdx
// 200: 48 83 c4 08                   addq    $0x8, %rsp
// 204: 5b                            popq    %rbx
// 205: 41 5c                         popq    %r12
// 207: 41 5d                         popq    %r13
// 209: 41 5e                         popq    %r14
// 20b: 41 5f                         popq    %r15
// 20d: 5d                            popq    %rbp
// 20e: ff e0                         jmpq    *%rax
// 210: 4c 29 f3                      subq    %r14, %rbx
// 213: 48 83 c3 b8                   addq    $-0x48, %rbx
// 217: 48 c1 eb 03                   shrq    $0x3, %rbx
// 21b: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 21f: 49 8b 06                      movq    (%r14), %rax
// 222: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000224:  R_X86_64_64  _JIT_TARGET
// 22c: 89 c9                         movl    %ecx, %ecx
// 22e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 232: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 238: 48 83 c4 08                   addq    $0x8, %rsp
// 23c: 5b                            popq    %rbx
// 23d: 41 5c                         popq    %r12
// 23f: 41 5d                         popq    %r13
// 241: 41 5e                         popq    %r14
// 243: 41 5f                         popq    %r15
// 245: 5d                            popq    %rbp
// 246: c3                            retq
// 247: 
static const unsigned char _STORE_SUBSCRplus_TO_BOOL_ALWAYS_TRUE_code_body[584] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1e, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2d, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xd8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd3, 0x4c, 0x8b, 0x7b, 0xf8, 0x49, 0x8b, 0x47, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x7f, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _STORE_SUBSCRplus_TO_BOOL_ALWAYS_TRUE_code_holes[22] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_TO_BOOL_ALWAYS_TRUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_TO_BOOL_ALWAYS_TRUE_data_holes[1];

// _STORE_SUBSCRplus_TO_BOOL_BOOL
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_TO_BOOL_BOOL.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1b                         je      0x15d <_JIT_ENTRY+0x15d>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2a                         je      0x174 <_JIT_ENTRY+0x174>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: eb 53                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 ed                         testl   %ebp, %ebp
// 16e: 49 0f 44 df                   cmoveq  %r15, %rbx
// 172: 75 d6                         jne     0x14a <_JIT_ENTRY+0x14a>
// 174: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 178: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017a:  R_X86_64_64  PyBool_Type
// 182: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 186: 74 37                         je      0x1bf <_JIT_ENTRY+0x1bf>
// 188: 4c 29 f3                      subq    %r14, %rbx
// 18b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 18f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 193: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 197: 49 8b 06                      movq    (%r14), %rax
// 19a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019c:  R_X86_64_64  _JIT_TARGET
// 1a4: 89 c9                         movl    %ecx, %ecx
// 1a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b0: 48 83 c4 08                   addq    $0x8, %rsp
// 1b4: 5b                            popq    %rbx
// 1b5: 41 5c                         popq    %r12
// 1b7: 41 5d                         popq    %r13
// 1b9: 41 5e                         popq    %r14
// 1bb: 41 5f                         popq    %r15
// 1bd: 5d                            popq    %rbp
// 1be: c3                            retq
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _JIT_CONTINUE
// 1c9: 4c 89 f7                      movq    %r14, %rdi
// 1cc: 48 89 de                      movq    %rbx, %rsi
// 1cf: 48 8b 14 24                   movq    (%rsp), %rdx
// 1d3: 48 83 c4 08                   addq    $0x8, %rsp
// 1d7: 5b                            popq    %rbx
// 1d8: 41 5c                         popq    %r12
// 1da: 41 5d                         popq    %r13
// 1dc: 41 5e                         popq    %r14
// 1de: 41 5f                         popq    %r15
// 1e0: 5d                            popq    %rbp
// 1e1: ff e0                         jmpq    *%rax
// 1e3: 
static const unsigned char _STORE_SUBSCRplus_TO_BOOL_BOOL_code_body[484] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2a, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x53, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd6, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_TO_BOOL_BOOL_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_TO_BOOL_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_TO_BOOL_BOOL_data_holes[1];

// _STORE_SUBSCRplus_TO_BOOL_INT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_TO_BOOL_INT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1b                         je      0x15d <_JIT_ENTRY+0x15d>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2a                         je      0x174 <_JIT_ENTRY+0x174>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: eb 54                         jmp     0x1b1 <_JIT_ENTRY+0x1b1>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 ed                         testl   %ebp, %ebp
// 16e: 49 0f 44 df                   cmoveq  %r15, %rbx
// 172: 75 d6                         jne     0x14a <_JIT_ENTRY+0x14a>
// 174: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  PyLong_Type
// 182: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 187: 74 37                         je      0x1c0 <_JIT_ENTRY+0x1c0>
// 189: 4c 29 f3                      subq    %r14, %rbx
// 18c: 48 83 c3 b8                   addq    $-0x48, %rbx
// 190: 48 c1 eb 03                   shrq    $0x3, %rbx
// 194: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 198: 49 8b 06                      movq    (%r14), %rax
// 19b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019d:  R_X86_64_64  _JIT_TARGET
// 1a5: 89 c9                         movl    %ecx, %ecx
// 1a7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1ab: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b1: 48 83 c4 08                   addq    $0x8, %rsp
// 1b5: 5b                            popq    %rbx
// 1b6: 41 5c                         popq    %r12
// 1b8: 41 5d                         popq    %r13
// 1ba: 41 5e                         popq    %r14
// 1bc: 41 5f                         popq    %r15
// 1be: 5d                            popq    %rbp
// 1bf: c3                            retq
// 1c0: 41 8b 44 24 10                movl    0x10(%r12), %eax
// 1c5: 83 e0 03                      andl    $0x3, %eax
// 1c8: 83 f8 01                      cmpl    $0x1, %eax
// 1cb: 75 0c                         jne     0x1d9 <_JIT_ENTRY+0x1d9>
// 1cd: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000001cf:  R_X86_64_64  _Py_FalseStruct
// 1d7: eb 5a                         jmp     0x233 <_JIT_ENTRY+0x233>
// 1d9: 49 8b 04 24                   movq    (%r12), %rax
// 1dd: 48 85 c0                      testq   %rax, %rax
// 1e0: 7f 22                         jg      0x204 <_JIT_ENTRY+0x204>
// 1e2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e4:  R_X86_64_64  .rodata.str1.1
// 1ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ee:  R_X86_64_64  _Py_NegativeRefcount
// 1f6: be a0 00 00 00                movl    $0xa0, %esi
// 1fb: 4c 89 e2                      movq    %r12, %rdx
// 1fe: ff d0                         callq   *%rax
// 200: 49 8b 04 24                   movq    (%r12), %rax
// 204: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000206:  R_X86_64_64  _Py_TrueStruct
// 20e: 85 c0                         testl   %eax, %eax
// 210: 78 21                         js      0x233 <_JIT_ENTRY+0x233>
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21c: ff d0                         callq   *%rax
// 21e: 49 ff 0c 24                   decq    (%r12)
// 222: 75 0f                         jne     0x233 <_JIT_ENTRY+0x233>
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _Py_Dealloc
// 22e: 4c 89 e7                      movq    %r12, %rdi
// 231: ff d0                         callq   *%rax
// 233: 48 8b 14 24                   movq    (%rsp), %rdx
// 237: 4c 89 7b f8                   movq    %r15, -0x8(%rbx)
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _JIT_CONTINUE
// 245: 4c 89 f7                      movq    %r14, %rdi
// 248: 48 89 de                      movq    %rbx, %rsi
// 24b: 48 83 c4 08                   addq    $0x8, %rsp
// 24f: 5b                            popq    %rbx
// 250: 41 5c                         popq    %r12
// 252: 41 5d                         popq    %r13
// 254: 41 5e                         popq    %r14
// 256: 41 5f                         popq    %r15
// 258: 5d                            popq    %rbp
// 259: ff e0                         jmpq    *%rax
// 25b: 
static const unsigned char _STORE_SUBSCRplus_TO_BOOL_INT_code_body[604] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2a, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd6, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x8b, 0x44, 0x24, 0x10, 0x83, 0xe0, 0x03, 0x83, 0xf8, 0x01, 0x75, 0x0c, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x5a, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x14, 0x24, 0x4c, 0x89, 0x7b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_TO_BOOL_INT_code_holes[23] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_TO_BOOL_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_TO_BOOL_INT_data_holes[1];

// _STORE_SUBSCRplus_TO_BOOL_LIST
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_TO_BOOL_LIST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1b                         je      0x15d <_JIT_ENTRY+0x15d>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2a                         je      0x174 <_JIT_ENTRY+0x174>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: eb 53                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 ed                         testl   %ebp, %ebp
// 16e: 49 0f 44 df                   cmoveq  %r15, %rbx
// 172: 75 d6                         jne     0x14a <_JIT_ENTRY+0x14a>
// 174: 4c 8b 7b f8                   movq    -0x8(%rbx), %r15
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  PyList_Type
// 182: 49 39 47 08                   cmpq    %rax, 0x8(%r15)
// 186: 74 37                         je      0x1bf <_JIT_ENTRY+0x1bf>
// 188: 4c 29 f3                      subq    %r14, %rbx
// 18b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 18f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 193: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 197: 49 8b 06                      movq    (%r14), %rax
// 19a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019c:  R_X86_64_64  _JIT_TARGET
// 1a4: 89 c9                         movl    %ecx, %ecx
// 1a6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1aa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b0: 48 83 c4 08                   addq    $0x8, %rsp
// 1b4: 5b                            popq    %rbx
// 1b5: 41 5c                         popq    %r12
// 1b7: 41 5d                         popq    %r13
// 1b9: 41 5e                         popq    %r14
// 1bb: 41 5f                         popq    %r15
// 1bd: 5d                            popq    %rbp
// 1be: c3                            retq
// 1bf: 49 8b 07                      movq    (%r15), %rax
// 1c2: 4d 8b 67 10                   movq    0x10(%r15), %r12
// 1c6: 48 85 c0                      testq   %rax, %rax
// 1c9: 7f 21                         jg      0x1ec <_JIT_ENTRY+0x1ec>
// 1cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001cd:  R_X86_64_64  .rodata.str1.1
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_NegativeRefcount
// 1df: be ae 00 00 00                movl    $0xae, %esi
// 1e4: 4c 89 fa                      movq    %r15, %rdx
// 1e7: ff d0                         callq   *%rax
// 1e9: 49 8b 07                      movq    (%r15), %rax
// 1ec: 85 c0                         testl   %eax, %eax
// 1ee: 78 20                         js      0x210 <_JIT_ENTRY+0x210>
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fa: ff d0                         callq   *%rax
// 1fc: 49 ff 0f                      decq    (%r15)
// 1ff: 75 0f                         jne     0x210 <_JIT_ENTRY+0x210>
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_Dealloc
// 20b: 4c 89 ff                      movq    %r15, %rdi
// 20e: ff d0                         callq   *%rax
// 210: 4d 85 e4                      testq   %r12, %r12
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _Py_FalseStruct
// 21d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000021f:  R_X86_64_64  _Py_TrueStruct
// 227: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 22b: 48 89 4b f8                   movq    %rcx, -0x8(%rbx)
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _JIT_CONTINUE
// 239: 4c 89 f7                      movq    %r14, %rdi
// 23c: 48 89 de                      movq    %rbx, %rsi
// 23f: 48 8b 14 24                   movq    (%rsp), %rdx
// 243: 48 83 c4 08                   addq    $0x8, %rsp
// 247: 5b                            popq    %rbx
// 248: 41 5c                         popq    %r12
// 24a: 41 5d                         popq    %r13
// 24c: 41 5e                         popq    %r14
// 24e: 41 5f                         popq    %r15
// 250: 5d                            popq    %rbp
// 251: ff e0                         jmpq    *%rax
// 253: 
static const unsigned char _STORE_SUBSCRplus_TO_BOOL_LIST_code_body[596] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2a, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x53, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd6, 0x4c, 0x8b, 0x7b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x47, 0x08, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x07, 0x4d, 0x8b, 0x67, 0x10, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x4b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_TO_BOOL_LIST_code_holes[23] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_TO_BOOL_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_TO_BOOL_LIST_data_holes[1];

// _STORE_SUBSCRplus_TO_BOOL_NONE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_TO_BOOL_NONE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1b                         je      0x15d <_JIT_ENTRY+0x15d>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2a                         je      0x174 <_JIT_ENTRY+0x174>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: eb 4f                         jmp     0x1ac <_JIT_ENTRY+0x1ac>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 ed                         testl   %ebp, %ebp
// 16e: 49 0f 44 df                   cmoveq  %r15, %rbx
// 172: 75 d6                         jne     0x14a <_JIT_ENTRY+0x14a>
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _Py_NoneStruct
// 17e: 48 39 43 f8                   cmpq    %rax, -0x8(%rbx)
// 182: 74 37                         je      0x1bb <_JIT_ENTRY+0x1bb>
// 184: 4c 29 f3                      subq    %r14, %rbx
// 187: 48 83 c3 b8                   addq    $-0x48, %rbx
// 18b: 48 c1 eb 03                   shrq    $0x3, %rbx
// 18f: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 193: 49 8b 06                      movq    (%r14), %rax
// 196: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000198:  R_X86_64_64  _JIT_TARGET
// 1a0: 89 c9                         movl    %ecx, %ecx
// 1a2: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1a6: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1ac: 48 83 c4 08                   addq    $0x8, %rsp
// 1b0: 5b                            popq    %rbx
// 1b1: 41 5c                         popq    %r12
// 1b3: 41 5d                         popq    %r13
// 1b5: 41 5e                         popq    %r14
// 1b7: 41 5f                         popq    %r15
// 1b9: 5d                            popq    %rbp
// 1ba: c3                            retq
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_FalseStruct
// 1c5: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _JIT_CONTINUE
// 1d3: 4c 89 f7                      movq    %r14, %rdi
// 1d6: 48 89 de                      movq    %rbx, %rsi
// 1d9: 48 8b 14 24                   movq    (%rsp), %rdx
// 1dd: 48 83 c4 08                   addq    $0x8, %rsp
// 1e1: 5b                            popq    %rbx
// 1e2: 41 5c                         popq    %r12
// 1e4: 41 5d                         popq    %r13
// 1e6: 41 5e                         popq    %r14
// 1e8: 41 5f                         popq    %r15
// 1ea: 5d                            popq    %rbp
// 1eb: ff e0                         jmpq    *%rax
// 1ed: 
static const unsigned char _STORE_SUBSCRplus_TO_BOOL_NONE_code_body[494] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2a, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x4f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x43, 0xf8, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_TO_BOOL_NONE_code_holes[18] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_TO_BOOL_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_TO_BOOL_NONE_data_holes[1];

// _STORE_SUBSCRplus_TO_BOOL_STR
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_TO_BOOL_STR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1b                         je      0x15d <_JIT_ENTRY+0x15d>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 2a                         je      0x174 <_JIT_ENTRY+0x174>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: eb 54                         jmp     0x1b1 <_JIT_ENTRY+0x1b1>
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _Py_Dealloc
// 167: 4c 89 e7                      movq    %r12, %rdi
// 16a: ff d0                         callq   *%rax
// 16c: 85 ed                         testl   %ebp, %ebp
// 16e: 49 0f 44 df                   cmoveq  %r15, %rbx
// 172: 75 d6                         jne     0x14a <_JIT_ENTRY+0x14a>
// 174: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  PyUnicode_Type
// 182: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 187: 74 37                         je      0x1c0 <_JIT_ENTRY+0x1c0>
// 189: 4c 29 f3                      subq    %r14, %rbx
// 18c: 48 83 c3 b8                   addq    $-0x48, %rbx
// 190: 48 c1 eb 03                   shrq    $0x3, %rbx
// 194: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 198: 49 8b 06                      movq    (%r14), %rax
// 19b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019d:  R_X86_64_64  _JIT_TARGET
// 1a5: 89 c9                         movl    %ecx, %ecx
// 1a7: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1ab: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b1: 48 83 c4 08                   addq    $0x8, %rsp
// 1b5: 5b                            popq    %rbx
// 1b6: 41 5c                         popq    %r12
// 1b8: 41 5d                         popq    %r13
// 1ba: 41 5e                         popq    %r14
// 1bc: 41 5f                         popq    %r15
// 1be: 5d                            popq    %rbp
// 1bf: c3                            retq
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _PyRuntime
// 1ca: 48 05 00 a1 00 00             addq    $0xa100, %rax           # imm = 0xA100
// 1d0: 49 39 c4                      cmpq    %rax, %r12
// 1d3: 74 5c                         je      0x231 <_JIT_ENTRY+0x231>
// 1d5: 49 8b 04 24                   movq    (%r12), %rax
// 1d9: 48 85 c0                      testq   %rax, %rax
// 1dc: 7f 22                         jg      0x200 <_JIT_ENTRY+0x200>
// 1de: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e0:  R_X86_64_64  .rodata.str1.1
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _Py_NegativeRefcount
// 1f2: be cb 00 00 00                movl    $0xcb, %esi
// 1f7: 4c 89 e2                      movq    %r12, %rdx
// 1fa: ff d0                         callq   *%rax
// 1fc: 49 8b 04 24                   movq    (%r12), %rax
// 200: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000202:  R_X86_64_64  _Py_TrueStruct
// 20a: 85 c0                         testl   %eax, %eax
// 20c: 78 2d                         js      0x23b <_JIT_ENTRY+0x23b>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 218: ff d0                         callq   *%rax
// 21a: 49 ff 0c 24                   decq    (%r12)
// 21e: 75 1b                         jne     0x23b <_JIT_ENTRY+0x23b>
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _Py_Dealloc
// 22a: 4c 89 e7                      movq    %r12, %rdi
// 22d: ff d0                         callq   *%rax
// 22f: eb 0a                         jmp     0x23b <_JIT_ENTRY+0x23b>
// 231: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000233:  R_X86_64_64  _Py_FalseStruct
// 23b: 48 8b 14 24                   movq    (%rsp), %rdx
// 23f: 4c 89 7b f8                   movq    %r15, -0x8(%rbx)
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _JIT_CONTINUE
// 24d: 4c 89 f7                      movq    %r14, %rdi
// 250: 48 89 de                      movq    %rbx, %rsi
// 253: 48 83 c4 08                   addq    $0x8, %rsp
// 257: 5b                            popq    %rbx
// 258: 41 5c                         popq    %r12
// 25a: 41 5d                         popq    %r13
// 25c: 41 5e                         popq    %r14
// 25e: 41 5f                         popq    %r15
// 260: 5d                            popq    %rbp
// 261: ff e0                         jmpq    *%rax
// 263: 
static const unsigned char _STORE_SUBSCRplus_TO_BOOL_STR_code_body[612] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1b, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x2a, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xd6, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x05, 0x00, 0xa1, 0x00, 0x00, 0x49, 0x39, 0xc4, 0x74, 0x5c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x0a, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x14, 0x24, 0x4c, 0x89, 0x7b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_TO_BOOL_STR_code_holes[24] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_TO_BOOL_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_TO_BOOL_STR_data_holes[1];

// _STORE_SUBSCRplus_UNARY_INVERT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_UNARY_INVERT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c6 f0                   addq    $-0x10, %r14
// 14e: 4d 89 f5                      movq    %r14, %r13
// 151: 49 29 dd                      subq    %rbx, %r13
// 154: 49 83 c5 b0                   addq    $-0x50, %r13
// 158: 49 c1 ed 03                   shrq    $0x3, %r13
// 15c: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 4d 8b 7e f8                   movq    -0x8(%r14), %r15
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  PyNumber_Invert
// 196: 4c 89 ff                      movq    %r15, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 89 c4                      movq    %rax, %r12
// 19e: 49 8b 07                      movq    (%r15), %rax
// 1a1: 48 85 c0                      testq   %rax, %rax
// 1a4: 7e 06                         jle     0x1ac <_JIT_ENTRY+0x1ac>
// 1a6: 85 c0                         testl   %eax, %eax
// 1a8: 79 27                         jns     0x1d1 <_JIT_ENTRY+0x1d1>
// 1aa: eb 45                         jmp     0x1f1 <_JIT_ENTRY+0x1f1>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be e6 00 00 00                movl    $0xe6, %esi
// 1c5: 4c 89 fa                      movq    %r15, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 49 8b 07                      movq    (%r15), %rax
// 1cd: 85 c0                         testl   %eax, %eax
// 1cf: 78 20                         js      0x1f1 <_JIT_ENTRY+0x1f1>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1db: ff d0                         callq   *%rax
// 1dd: 49 ff 0f                      decq    (%r15)
// 1e0: 75 0f                         jne     0x1f1 <_JIT_ENTRY+0x1f1>
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_Dealloc
// 1ec: 4c 89 ff                      movq    %r15, %rdi
// 1ef: ff d0                         callq   *%rax
// 1f1: 4d 85 e4                      testq   %r12, %r12
// 1f4: 0f 84 57 ff ff ff             je      0x151 <_JIT_ENTRY+0x151>
// 1fa: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _JIT_CONTINUE
// 208: 48 89 df                      movq    %rbx, %rdi
// 20b: 4c 89 f6                      movq    %r14, %rsi
// 20e: 48 8b 14 24                   movq    (%rsp), %rdx
// 212: 48 83 c4 08                   addq    $0x8, %rsp
// 216: 5b                            popq    %rbx
// 217: 41 5c                         popq    %r12
// 219: 41 5d                         popq    %r13
// 21b: 41 5e                         popq    %r14
// 21d: 41 5f                         popq    %r15
// 21f: 5d                            popq    %rbp
// 220: ff e0                         jmpq    *%rax
// 222: 
static const unsigned char _STORE_SUBSCRplus_UNARY_INVERT_code_body[547] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x6e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x74, 0x3e, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb0, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x75, 0xc2, 0x4d, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x45, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x57, 0xff, 0xff, 0xff, 0x4d, 0x89, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_UNARY_INVERT_code_holes[20] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Invert, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_UNARY_INVERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_UNARY_INVERT_data_holes[1];

// _STORE_SUBSCRplus_UNARY_NEGATIVE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_UNARY_NEGATIVE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 6e e8                   leaq    -0x18(%r14), %r13
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c6 f0                   addq    $-0x10, %r14
// 14e: 4d 89 f5                      movq    %r14, %r13
// 151: 49 29 dd                      subq    %rbx, %r13
// 154: 49 83 c5 b0                   addq    $-0x50, %r13
// 158: 49 c1 ed 03                   shrq    $0x3, %r13
// 15c: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 f5                   cmoveq  %r13, %r14
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 4d 8b 7e f8                   movq    -0x8(%r14), %r15
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  PyNumber_Negative
// 196: 4c 89 ff                      movq    %r15, %rdi
// 199: ff d0                         callq   *%rax
// 19b: 49 89 c4                      movq    %rax, %r12
// 19e: 49 8b 07                      movq    (%r15), %rax
// 1a1: 48 85 c0                      testq   %rax, %rax
// 1a4: 7e 06                         jle     0x1ac <_JIT_ENTRY+0x1ac>
// 1a6: 85 c0                         testl   %eax, %eax
// 1a8: 79 27                         jns     0x1d1 <_JIT_ENTRY+0x1d1>
// 1aa: eb 45                         jmp     0x1f1 <_JIT_ENTRY+0x1f1>
// 1ac: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ae:  R_X86_64_64  .rodata.str1.1
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_NegativeRefcount
// 1c0: be 71 00 00 00                movl    $0x71, %esi
// 1c5: 4c 89 fa                      movq    %r15, %rdx
// 1c8: ff d0                         callq   *%rax
// 1ca: 49 8b 07                      movq    (%r15), %rax
// 1cd: 85 c0                         testl   %eax, %eax
// 1cf: 78 20                         js      0x1f1 <_JIT_ENTRY+0x1f1>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1db: ff d0                         callq   *%rax
// 1dd: 49 ff 0f                      decq    (%r15)
// 1e0: 75 0f                         jne     0x1f1 <_JIT_ENTRY+0x1f1>
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_Dealloc
// 1ec: 4c 89 ff                      movq    %r15, %rdi
// 1ef: ff d0                         callq   *%rax
// 1f1: 4d 85 e4                      testq   %r12, %r12
// 1f4: 0f 84 57 ff ff ff             je      0x151 <_JIT_ENTRY+0x151>
// 1fa: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _JIT_CONTINUE
// 208: 48 89 df                      movq    %rbx, %rdi
// 20b: 4c 89 f6                      movq    %r14, %rsi
// 20e: 48 8b 14 24                   movq    (%rsp), %rdx
// 212: 48 83 c4 08                   addq    $0x8, %rsp
// 216: 5b                            popq    %rbx
// 217: 41 5c                         popq    %r12
// 219: 41 5d                         popq    %r13
// 21b: 41 5e                         popq    %r14
// 21d: 41 5f                         popq    %r15
// 21f: 5d                            popq    %rbp
// 220: ff e0                         jmpq    *%rax
// 222: 
static const unsigned char _STORE_SUBSCRplus_UNARY_NEGATIVE_code_body[547] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x6e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x74, 0x3e, 0x49, 0x83, 0xc6, 0xf0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb0, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf5, 0x75, 0xc2, 0x4d, 0x8b, 0x7e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x45, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x57, 0xff, 0xff, 0xff, 0x4d, 0x89, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_UNARY_NEGATIVE_code_holes[20] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Negative, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_UNARY_NEGATIVE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_UNARY_NEGATIVE_data_holes[1];

// _STORE_SUBSCRplus_UNARY_NOT
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_UNARY_NOT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 48 89 f3                      movq    %rsi, %rbx
// 12: 49 89 fe                      movq    %rdi, %r14
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 28                         je      0x16a <_JIT_ENTRY+0x16a>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 49 0f 44 df                   cmoveq  %r15, %rbx
// 148: 74 37                         je      0x181 <_JIT_ENTRY+0x181>
// 14a: 4c 29 f3                      subq    %r14, %rbx
// 14d: 48 83 c3 a0                   addq    $-0x60, %rbx
// 151: 48 c1 eb 03                   shrq    $0x3, %rbx
// 155: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: 48 83 c4 08                   addq    $0x8, %rsp
// 15f: 5b                            popq    %rbx
// 160: 41 5c                         popq    %r12
// 162: 41 5d                         popq    %r13
// 164: 41 5e                         popq    %r14
// 166: 41 5f                         popq    %r15
// 168: 5d                            popq    %rbp
// 169: c3                            retq
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  _Py_Dealloc
// 174: 4c 89 e7                      movq    %r12, %rdi
// 177: ff d0                         callq   *%rax
// 179: 85 ed                         testl   %ebp, %ebp
// 17b: 49 0f 44 df                   cmoveq  %r15, %rbx
// 17f: 75 c9                         jne     0x14a <_JIT_ENTRY+0x14a>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_FalseStruct
// 18b: 48 39 43 f8                   cmpq    %rax, -0x8(%rbx)
// 18f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000191:  R_X86_64_64  _Py_TrueStruct
// 199: 48 0f 45 c8                   cmovneq %rax, %rcx
// 19d: 48 89 4b f8                   movq    %rcx, -0x8(%rbx)
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _JIT_CONTINUE
// 1ab: 4c 89 f7                      movq    %r14, %rdi
// 1ae: 48 89 de                      movq    %rbx, %rsi
// 1b1: 48 8b 14 24                   movq    (%rsp), %rdx
// 1b5: 48 83 c4 08                   addq    $0x8, %rsp
// 1b9: 5b                            popq    %rbx
// 1ba: 41 5c                         popq    %r12
// 1bc: 41 5d                         popq    %r13
// 1be: 41 5e                         popq    %r14
// 1c0: 41 5f                         popq    %r15
// 1c2: 5d                            popq    %rbp
// 1c3: ff e0                         jmpq    *%rax
// 1c5: 
static const unsigned char _STORE_SUBSCRplus_UNARY_NOT_code_body[454] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x28, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xa0, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45, 0xc8, 0x48, 0x89, 0x4b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_UNARY_NOT_code_holes[17] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_UNARY_NOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_UNARY_NOT_data_holes[1];

// _STORE_SUBSCRplus_UNPACK_EX
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_UNPACK_EX.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f7                      movq    %rsi, %r15
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 f2                      movq    %r14, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 06                      movq    (%r14), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 f2                      movq    %r14, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0e                      decq    (%r14)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 f7                      movq    %r14, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c7 f0                   addq    $-0x10, %r15
// 14e: 4d 89 fe                      movq    %r15, %r14
// 151: 49 29 de                      subq    %rbx, %r14
// 154: 49 83 c6 b0                   addq    $-0x50, %r14
// 158: 49 c1 ee 03                   shrq    $0x3, %r14
// 15c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b6 cc                      movzbl  %ah, %ecx
// 199: 0f b6 d0                      movzbl  %al, %edx
// 19c: 8d 04 0a                      leal    (%rdx,%rcx), %eax
// 19f: ff c0                         incl    %eax
// 1a1: 4d 8d 44 c7 f8                leaq    -0x8(%r15,%rax,8), %r8
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _PyEval_UnpackIterable
// 1b0: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b4: 4c 89 e6                      movq    %r12, %rsi
// 1b7: ff d0                         callq   *%rax
// 1b9: 89 c5                         movl    %eax, %ebp
// 1bb: 49 8b 04 24                   movq    (%r12), %rax
// 1bf: 48 85 c0                      testq   %rax, %rax
// 1c2: 7e 06                         jle     0x1ca <_JIT_ENTRY+0x1ca>
// 1c4: 85 c0                         testl   %eax, %eax
// 1c6: 79 28                         jns     0x1f0 <_JIT_ENTRY+0x1f0>
// 1c8: eb 47                         jmp     0x211 <_JIT_ENTRY+0x211>
// 1ca: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001cc:  R_X86_64_64  .rodata.str1.1
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_NegativeRefcount
// 1de: be b7 03 00 00                movl    $0x3b7, %esi            # imm = 0x3B7
// 1e3: 4c 89 e2                      movq    %r12, %rdx
// 1e6: ff d0                         callq   *%rax
// 1e8: 49 8b 04 24                   movq    (%r12), %rax
// 1ec: 85 c0                         testl   %eax, %eax
// 1ee: 78 21                         js      0x211 <_JIT_ENTRY+0x211>
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fa: ff d0                         callq   *%rax
// 1fc: 49 ff 0c 24                   decq    (%r12)
// 200: 75 0f                         jne     0x211 <_JIT_ENTRY+0x211>
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_Dealloc
// 20c: 4c 89 e7                      movq    %r12, %rdi
// 20f: ff d0                         callq   *%rax
// 211: 85 ed                         testl   %ebp, %ebp
// 213: 0f 84 38 ff ff ff             je      0x151 <_JIT_ENTRY+0x151>
// 219: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021b:  R_X86_64_64  _JIT_OPARG
// 223: 0f b6 c8                      movzbl  %al, %ecx
// 226: 0f b6 c4                      movzbl  %ah, %eax
// 229: 01 c8                         addl    %ecx, %eax
// 22b: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _JIT_CONTINUE
// 239: 48 89 df                      movq    %rbx, %rdi
// 23c: 48 8b 14 24                   movq    (%rsp), %rdx
// 240: 48 83 c4 08                   addq    $0x8, %rsp
// 244: 5b                            popq    %rbx
// 245: 41 5c                         popq    %r12
// 247: 41 5d                         popq    %r13
// 249: 41 5e                         popq    %r14
// 24b: 41 5f                         popq    %r15
// 24d: 5d                            popq    %rbp
// 24e: ff e0                         jmpq    *%rax
// 250: 
static const unsigned char _STORE_SUBSCRplus_UNPACK_EX_code_body[593] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xf0, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xc2, 0x4d, 0x8b, 0x67, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0xcc, 0x0f, 0xb6, 0xd0, 0x8d, 0x04, 0x0a, 0xff, 0xc0, 0x4d, 0x8d, 0x44, 0xc7, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x84, 0x38, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0xc8, 0x0f, 0xb6, 0xc4, 0x01, 0xc8, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_UNPACK_EX_code_holes[22] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x1cc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_UNPACK_EX_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_UNPACK_EX_data_holes[1];

// _STORE_SUBSCRplus_UNPACK_SEQUENCE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_UNPACK_SEQUENCE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f7                      movq    %rsi, %r15
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 76 e8                   movq    -0x18(%rsi), %r14
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 f2                      movq    %r14, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 06                      movq    (%r14), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 f2                      movq    %r14, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 06                      movq    (%r14), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0e                      decq    (%r14)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 f7                      movq    %r14, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 77 e8                   leaq    -0x18(%r15), %r14
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 2f                         je      0x171 <_JIT_ENTRY+0x171>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 148: 74 3e                         je      0x188 <_JIT_ENTRY+0x188>
// 14a: 49 83 c7 f0                   addq    $-0x10, %r15
// 14e: 4d 89 fe                      movq    %r15, %r14
// 151: 49 29 de                      subq    %rbx, %r14
// 154: 49 83 c6 b0                   addq    $-0x50, %r14
// 158: 49 c1 ee 03                   shrq    $0x3, %r14
// 15c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5d                         popq    %r13
// 16b: 41 5e                         popq    %r14
// 16d: 41 5f                         popq    %r15
// 16f: 5d                            popq    %rbp
// 170: c3                            retq
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _Py_Dealloc
// 17b: 4c 89 e7                      movq    %r12, %rdi
// 17e: ff d0                         callq   *%rax
// 180: 85 ed                         testl   %ebp, %ebp
// 182: 4d 0f 44 fe                   cmoveq  %r14, %r15
// 186: 75 c2                         jne     0x14a <_JIT_ENTRY+0x14a>
// 188: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c8                      movzwl  %ax, %ecx
// 199: 4d 8d 04 cf                   leaq    (%r15,%rcx,8), %r8
// 19d: 49 83 c0 f8                   addq    $-0x8, %r8
// 1a1: 0f b7 d0                      movzwl  %ax, %edx
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _PyEval_UnpackIterable
// 1ae: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1b2: 4c 89 e6                      movq    %r12, %rsi
// 1b5: b9 ff ff ff ff                movl    $0xffffffff, %ecx       # imm = 0xFFFFFFFF
// 1ba: ff d0                         callq   *%rax
// 1bc: 89 c5                         movl    %eax, %ebp
// 1be: 49 8b 04 24                   movq    (%r12), %rax
// 1c2: 48 85 c0                      testq   %rax, %rax
// 1c5: 7e 06                         jle     0x1cd <_JIT_ENTRY+0x1cd>
// 1c7: 85 c0                         testl   %eax, %eax
// 1c9: 79 28                         jns     0x1f3 <_JIT_ENTRY+0x1f3>
// 1cb: eb 47                         jmp     0x214 <_JIT_ENTRY+0x214>
// 1cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001cf:  R_X86_64_64  .rodata.str1.1
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_NegativeRefcount
// 1e1: be 75 03 00 00                movl    $0x375, %esi            # imm = 0x375
// 1e6: 4c 89 e2                      movq    %r12, %rdx
// 1e9: ff d0                         callq   *%rax
// 1eb: 49 8b 04 24                   movq    (%r12), %rax
// 1ef: 85 c0                         testl   %eax, %eax
// 1f1: 78 21                         js      0x214 <_JIT_ENTRY+0x214>
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fd: ff d0                         callq   *%rax
// 1ff: 49 ff 0c 24                   decq    (%r12)
// 203: 75 0f                         jne     0x214 <_JIT_ENTRY+0x214>
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_Dealloc
// 20f: 4c 89 e7                      movq    %r12, %rdi
// 212: ff d0                         callq   *%rax
// 214: 85 ed                         testl   %ebp, %ebp
// 216: 0f 84 35 ff ff ff             je      0x151 <_JIT_ENTRY+0x151>
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _JIT_OPARG
// 226: 0f b7 c0                      movzwl  %ax, %eax
// 229: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 22d: 48 83 c6 f8                   addq    $-0x8, %rsi
// 231: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000233:  R_X86_64_64  _JIT_CONTINUE
// 23b: 48 89 df                      movq    %rbx, %rdi
// 23e: 48 8b 14 24                   movq    (%rsp), %rdx
// 242: 48 83 c4 08                   addq    $0x8, %rsp
// 246: 5b                            popq    %rbx
// 247: 41 5c                         popq    %r12
// 249: 41 5d                         popq    %r13
// 24b: 41 5e                         popq    %r14
// 24d: 41 5f                         popq    %r15
// 24f: 5d                            popq    %rbp
// 250: ff e0                         jmpq    *%rax
// 252: 
static const unsigned char _STORE_SUBSCRplus_UNPACK_SEQUENCE_code_body[595] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x76, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xf2, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0e, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x77, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x74, 0x3e, 0x49, 0x83, 0xc7, 0xf0, 0x4d, 0x89, 0xfe, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xfe, 0x75, 0xc2, 0x4d, 0x8b, 0x67, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x4d, 0x8d, 0x04, 0xcf, 0x49, 0x83, 0xc0, 0xf8, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xe6, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x84, 0x35, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_UNPACK_SEQUENCE_code_holes[22] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_UNPACK_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_UNPACK_SEQUENCE_data_holes[1];

// _STORE_SUBSCRplus_UNPACK_SEQUENCE_LIST
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_UNPACK_SEQUENCE_LIST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 13: 49 89 f6                      movq    %rsi, %r14
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 fa                      movq    %r15, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 07                      movq    (%r15), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 fa                      movq    %r15, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 07                      movq    (%r15), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0f                      decq    (%r15)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 ff                      movq    %r15, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 1e                         je      0x164 <_JIT_ENTRY+0x164>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 14c: 74 2d                         je      0x17b <_JIT_ENTRY+0x17b>
// 14e: 49 29 de                      subq    %rbx, %r14
// 151: 49 83 c6 a0                   addq    $-0x60, %r14
// 155: 49 c1 ee 03                   shrq    $0x3, %r14
// 159: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 15d: 31 c0                         xorl    %eax, %eax
// 15f: e9 d6 00 00 00                jmp     0x23a <_JIT_ENTRY+0x23a>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_Dealloc
// 16e: 4c 89 e7                      movq    %r12, %rdi
// 171: ff d0                         callq   *%rax
// 173: 85 ed                         testl   %ebp, %ebp
// 175: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 179: 75 d3                         jne     0x14e <_JIT_ENTRY+0x14e>
// 17b: 49 8b 4e f8                   movq    -0x8(%r14), %rcx
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  PyList_Type
// 189: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 18d: 0f 85 7f 00 00 00             jne     0x212 <_JIT_ENTRY+0x212>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _JIT_OPARG
// 19d: 0f b7 c0                      movzwl  %ax, %eax
// 1a0: 48 39 41 10                   cmpq    %rax, 0x10(%rcx)
// 1a4: 75 6c                         jne     0x212 <_JIT_ENTRY+0x212>
// 1a6: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 1ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ad:  R_X86_64_64  _JIT_OPARG
// 1b5: a9 ff ff 00 00                testl   $0xffff, %eax           # imm = 0xFFFF
// 1ba: 0f 8e 89 00 00 00             jle     0x249 <_JIT_ENTRY+0x249>
// 1c0: 4d 8d 7e f8                   leaq    -0x8(%r14), %r15
// 1c4: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1c9: 4c 8b 68 18                   movq    0x18(%rax), %r13
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _JIT_OPARG
// 1d7: 0f b7 e8                      movzwl  %ax, %ebp
// 1da: 48 ff c5                      incq    %rbp
// 1dd: eb 11                         jmp     0x1f0 <_JIT_ENTRY+0x1f0>
// 1df: 90                            nop
// 1e0: 4d 89 27                      movq    %r12, (%r15)
// 1e3: 49 83 c7 08                   addq    $0x8, %r15
// 1e7: 48 ff cd                      decq    %rbp
// 1ea: 48 83 fd 01                   cmpq    $0x1, %rbp
// 1ee: 7e 59                         jle     0x249 <_JIT_ENTRY+0x249>
// 1f0: 8d 45 fe                      leal    -0x2(%rbp), %eax
// 1f3: 4d 8b 64 c5 00                movq    (%r13,%rax,8), %r12
// 1f8: 41 8b 04 24                   movl    (%r12), %eax
// 1fc: ff c0                         incl    %eax
// 1fe: 74 e0                         je      0x1e0 <_JIT_ENTRY+0x1e0>
// 200: 41 89 04 24                   movl    %eax, (%r12)
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 20e: ff d0                         callq   *%rax
// 210: eb ce                         jmp     0x1e0 <_JIT_ENTRY+0x1e0>
// 212: 49 29 de                      subq    %rbx, %r14
// 215: 49 83 c6 b8                   addq    $-0x48, %r14
// 219: 49 c1 ee 03                   shrq    $0x3, %r14
// 21d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 221: 48 8b 03                      movq    (%rbx), %rax
// 224: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000226:  R_X86_64_64  _JIT_TARGET
// 22e: 89 c9                         movl    %ecx, %ecx
// 230: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 234: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 23a: 48 83 c4 18                   addq    $0x18, %rsp
// 23e: 5b                            popq    %rbx
// 23f: 41 5c                         popq    %r12
// 241: 41 5d                         popq    %r13
// 243: 41 5e                         popq    %r14
// 245: 41 5f                         popq    %r15
// 247: 5d                            popq    %rbp
// 248: c3                            retq
// 249: 4c 8b 7c 24 08                movq    0x8(%rsp), %r15
// 24e: 49 8b 07                      movq    (%r15), %rax
// 251: 48 85 c0                      testq   %rax, %rax
// 254: 7f 21                         jg      0x277 <_JIT_ENTRY+0x277>
// 256: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000258:  R_X86_64_64  .rodata.str1.1
// 260: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000262:  R_X86_64_64  _Py_NegativeRefcount
// 26a: be ab 03 00 00                movl    $0x3ab, %esi            # imm = 0x3AB
// 26f: 4c 89 fa                      movq    %r15, %rdx
// 272: ff d0                         callq   *%rax
// 274: 49 8b 07                      movq    (%r15), %rax
// 277: 85 c0                         testl   %eax, %eax
// 279: 78 20                         js      0x29b <_JIT_ENTRY+0x29b>
// 27b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 285: ff d0                         callq   *%rax
// 287: 49 ff 0f                      decq    (%r15)
// 28a: 75 0f                         jne     0x29b <_JIT_ENTRY+0x29b>
// 28c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028e:  R_X86_64_64  _Py_Dealloc
// 296: 4c 89 ff                      movq    %r15, %rdi
// 299: ff d0                         callq   *%rax
// 29b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029d:  R_X86_64_64  _JIT_OPARG
// 2a5: 0f b7 c0                      movzwl  %ax, %eax
// 2a8: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 2ac: 48 83 c6 f8                   addq    $-0x8, %rsi
// 2b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b2:  R_X86_64_64  _JIT_CONTINUE
// 2ba: 48 89 df                      movq    %rbx, %rdi
// 2bd: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 2c2: 48 83 c4 18                   addq    $0x18, %rsp
// 2c6: 5b                            popq    %rbx
// 2c7: 41 5c                         popq    %r12
// 2c9: 41 5d                         popq    %r13
// 2cb: 41 5e                         popq    %r14
// 2cd: 41 5f                         popq    %r15
// 2cf: 5d                            popq    %rbp
// 2d0: ff e0                         jmpq    *%rax
// 2d2: 
static const unsigned char _STORE_SUBSCRplus_UNPACK_SEQUENCE_LIST_code_body[723] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x48, 0x89, 0x54, 0x24, 0x10, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1e, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x2d, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xd6, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xd3, 0x49, 0x8b, 0x4e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x0f, 0x85, 0x7f, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x39, 0x41, 0x10, 0x75, 0x6c, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x89, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x7e, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x4c, 0x8b, 0x68, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x11, 0x90, 0x4d, 0x89, 0x27, 0x49, 0x83, 0xc7, 0x08, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x7e, 0x59, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x64, 0xc5, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0xe0, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xce, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x8b, 0x7c, 0x24, 0x08, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0x21, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xab, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_UNPACK_SEQUENCE_LIST_code_holes[26] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ad, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x258, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x262, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x27d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x28e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x29d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_UNPACK_SEQUENCE_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_UNPACK_SEQUENCE_LIST_data_holes[1];

// _STORE_SUBSCRplus_UNPACK_SEQUENCE_TUPLE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_UNPACK_SEQUENCE_TUPLE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1e                         je      0x160 <_JIT_ENTRY+0x160>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 2d                         je      0x177 <_JIT_ENTRY+0x177>
// 14a: 49 29 de                      subq    %rbx, %r14
// 14d: 49 83 c6 a0                   addq    $-0x60, %r14
// 151: 49 c1 ee 03                   shrq    $0x3, %r14
// 155: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: e9 b9 00 00 00                jmp     0x219 <_JIT_ENTRY+0x219>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_Dealloc
// 16a: 4c 89 e7                      movq    %r12, %rdi
// 16d: ff d0                         callq   *%rax
// 16f: 85 ed                         testl   %ebp, %ebp
// 171: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 175: 75 d3                         jne     0x14a <_JIT_ENTRY+0x14a>
// 177: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  PyTuple_Type
// 185: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 18a: 75 65                         jne     0x1f1 <_JIT_ENTRY+0x1f1>
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _JIT_OPARG
// 196: 0f b7 c0                      movzwl  %ax, %eax
// 199: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// 19e: 75 51                         jne     0x1f1 <_JIT_ENTRY+0x1f1>
// 1a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a2:  R_X86_64_64  _JIT_OPARG
// 1aa: a9 ff ff 00 00                testl   $0xffff, %eax           # imm = 0xFFFF
// 1af: 7e 77                         jle     0x228 <_JIT_ENTRY+0x228>
// 1b1: 4d 8d 7e f8                   leaq    -0x8(%r14), %r15
// 1b5: 44 0f b7 e8                   movzwl  %ax, %r13d
// 1b9: 49 ff c5                      incq    %r13
// 1bc: eb 12                         jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 1be: 66 90                         nop
// 1c0: 49 89 2f                      movq    %rbp, (%r15)
// 1c3: 49 83 c7 08                   addq    $0x8, %r15
// 1c7: 49 ff cd                      decq    %r13
// 1ca: 49 83 fd 01                   cmpq    $0x1, %r13
// 1ce: 7e 58                         jle     0x228 <_JIT_ENTRY+0x228>
// 1d0: 41 8d 45 fe                   leal    -0x2(%r13), %eax
// 1d4: 49 8b 6c c4 18                movq    0x18(%r12,%rax,8), %rbp
// 1d9: 8b 45 00                      movl    (%rbp), %eax
// 1dc: ff c0                         incl    %eax
// 1de: 74 e0                         je      0x1c0 <_JIT_ENTRY+0x1c0>
// 1e0: 89 45 00                      movl    %eax, (%rbp)
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1ed: ff d0                         callq   *%rax
// 1ef: eb cf                         jmp     0x1c0 <_JIT_ENTRY+0x1c0>
// 1f1: 49 29 de                      subq    %rbx, %r14
// 1f4: 49 83 c6 b8                   addq    $-0x48, %r14
// 1f8: 49 c1 ee 03                   shrq    $0x3, %r14
// 1fc: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 200: 48 8b 03                      movq    (%rbx), %rax
// 203: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000205:  R_X86_64_64  _JIT_TARGET
// 20d: 89 c9                         movl    %ecx, %ecx
// 20f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 213: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 219: 48 83 c4 08                   addq    $0x8, %rsp
// 21d: 5b                            popq    %rbx
// 21e: 41 5c                         popq    %r12
// 220: 41 5d                         popq    %r13
// 222: 41 5e                         popq    %r14
// 224: 41 5f                         popq    %r15
// 226: 5d                            popq    %rbp
// 227: c3                            retq
// 228: 49 8b 04 24                   movq    (%r12), %rax
// 22c: 48 85 c0                      testq   %rax, %rax
// 22f: 7f 22                         jg      0x253 <_JIT_ENTRY+0x253>
// 231: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000233:  R_X86_64_64  .rodata.str1.1
// 23b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023d:  R_X86_64_64  _Py_NegativeRefcount
// 245: be 99 03 00 00                movl    $0x399, %esi            # imm = 0x399
// 24a: 4c 89 e2                      movq    %r12, %rdx
// 24d: ff d0                         callq   *%rax
// 24f: 49 8b 04 24                   movq    (%r12), %rax
// 253: 85 c0                         testl   %eax, %eax
// 255: 78 21                         js      0x278 <_JIT_ENTRY+0x278>
// 257: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000259:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 261: ff d0                         callq   *%rax
// 263: 49 ff 0c 24                   decq    (%r12)
// 267: 75 0f                         jne     0x278 <_JIT_ENTRY+0x278>
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _Py_Dealloc
// 273: 4c 89 e7                      movq    %r12, %rdi
// 276: ff d0                         callq   *%rax
// 278: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027a:  R_X86_64_64  _JIT_OPARG
// 282: 0f b7 c0                      movzwl  %ax, %eax
// 285: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 289: 48 83 c6 f8                   addq    $-0x8, %rsi
// 28d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000028f:  R_X86_64_64  _JIT_CONTINUE
// 297: 48 89 df                      movq    %rbx, %rdi
// 29a: 48 8b 14 24                   movq    (%rsp), %rdx
// 29e: 48 83 c4 08                   addq    $0x8, %rsp
// 2a2: 5b                            popq    %rbx
// 2a3: 41 5c                         popq    %r12
// 2a5: 41 5d                         popq    %r13
// 2a7: 41 5e                         popq    %r14
// 2a9: 41 5f                         popq    %r15
// 2ab: 5d                            popq    %rbp
// 2ac: ff e0                         jmpq    *%rax
// 2ae: 
static const unsigned char _STORE_SUBSCRplus_UNPACK_SEQUENCE_TUPLE_code_body[687] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1e, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x2d, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xb9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xd3, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x65, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x75, 0x51, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x77, 0x4d, 0x8d, 0x7e, 0xf8, 0x44, 0x0f, 0xb7, 0xe8, 0x49, 0xff, 0xc5, 0xeb, 0x12, 0x66, 0x90, 0x49, 0x89, 0x2f, 0x49, 0x83, 0xc7, 0x08, 0x49, 0xff, 0xcd, 0x49, 0x83, 0xfd, 0x01, 0x7e, 0x58, 0x41, 0x8d, 0x45, 0xfe, 0x49, 0x8b, 0x6c, 0xc4, 0x18, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0xe0, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xcf, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_UNPACK_SEQUENCE_TUPLE_code_holes[25] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x205, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x233, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x259, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x28f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_UNPACK_SEQUENCE_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_UNPACK_SEQUENCE_TUPLE_data_holes[1];

// _STORE_SUBSCRplus_UNPACK_SEQUENCE_TWO_TUPLE
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_UNPACK_SEQUENCE_TWO_TUPLE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 14 24                   movq    %rdx, (%rsp)
// f: 49 89 f6                      movq    %rsi, %r14
// 12: 48 89 fb                      movq    %rdi, %rbx
// 15: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 19: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 1d: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 21: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000023:  R_X86_64_64  PyObject_SetItem
// 2b: 4c 89 ef                      movq    %r13, %rdi
// 2e: 4c 89 e6                      movq    %r12, %rsi
// 31: 4c 89 fa                      movq    %r15, %rdx
// 34: ff d0                         callq   *%rax
// 36: 89 c5                         movl    %eax, %ebp
// 38: 49 8b 07                      movq    (%r15), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 06                         jle     0x46 <_JIT_ENTRY+0x46>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 27                         jns     0x6b <_JIT_ENTRY+0x6b>
// 44: eb 36                         jmp     0x7c <_JIT_ENTRY+0x7c>
// 46: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000048:  R_X86_64_64  .rodata.str1.1
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _Py_NegativeRefcount
// 5a: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 5f: 4c 89 fa                      movq    %r15, %rdx
// 62: ff d0                         callq   *%rax
// 64: 49 8b 07                      movq    (%r15), %rax
// 67: 85 c0                         testl   %eax, %eax
// 69: 78 11                         js      0x7c <_JIT_ENTRY+0x7c>
// 6b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 75: ff d0                         callq   *%rax
// 77: 49 ff 0f                      decq    (%r15)
// 7a: 74 0f                         je      0x8b <_JIT_ENTRY+0x8b>
// 7c: 49 8b 45 00                   movq    (%r13), %rax
// 80: 48 85 c0                      testq   %rax, %rax
// 83: 7e 1e                         jle     0xa3 <_JIT_ENTRY+0xa3>
// 85: 85 c0                         testl   %eax, %eax
// 87: 79 40                         jns     0xc9 <_JIT_ENTRY+0xc9>
// 89: eb 50                         jmp     0xdb <_JIT_ENTRY+0xdb>
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_Dealloc
// 95: 4c 89 ff                      movq    %r15, %rdi
// 98: ff d0                         callq   *%rax
// 9a: 49 8b 45 00                   movq    (%r13), %rax
// 9e: 48 85 c0                      testq   %rax, %rax
// a1: 7f e2                         jg      0x85 <_JIT_ENTRY+0x85>
// a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a5:  R_X86_64_64  .rodata.str1.1
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NegativeRefcount
// b7: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// bc: 4c 89 ea                      movq    %r13, %rdx
// bf: ff d0                         callq   *%rax
// c1: 49 8b 45 00                   movq    (%r13), %rax
// c5: 85 c0                         testl   %eax, %eax
// c7: 78 12                         js      0xdb <_JIT_ENTRY+0xdb>
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d3: ff d0                         callq   *%rax
// d5: 49 ff 4d 00                   decq    (%r13)
// d9: 74 13                         je      0xee <_JIT_ENTRY+0xee>
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 22                         jle     0x106 <_JIT_ENTRY+0x106>
// e4: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 44                         jns     0x130 <_JIT_ENTRY+0x130>
// ec: eb 54                         jmp     0x142 <_JIT_ENTRY+0x142>
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: ff d0                         callq   *%rax
// fd: 49 8b 04 24                   movq    (%r12), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 7f de                         jg      0xe4 <_JIT_ENTRY+0xe4>
// 106: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000108:  R_X86_64_64  .rodata.str1.1
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_NegativeRefcount
// 11a: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 11f: 4c 89 e2                      movq    %r12, %rdx
// 122: ff d0                         callq   *%rax
// 124: 49 8b 04 24                   movq    (%r12), %rax
// 128: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 78 12                         js      0x142 <_JIT_ENTRY+0x142>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 ff 0c 24                   decq    (%r12)
// 140: 74 1e                         je      0x160 <_JIT_ENTRY+0x160>
// 142: 85 ed                         testl   %ebp, %ebp
// 144: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 148: 74 2d                         je      0x177 <_JIT_ENTRY+0x177>
// 14a: 49 29 de                      subq    %rbx, %r14
// 14d: 49 83 c6 a0                   addq    $-0x60, %r14
// 151: 49 c1 ee 03                   shrq    $0x3, %r14
// 155: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 159: 31 c0                         xorl    %eax, %eax
// 15b: e9 a0 00 00 00                jmp     0x200 <_JIT_ENTRY+0x200>
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  _Py_Dealloc
// 16a: 4c 89 e7                      movq    %r12, %rdi
// 16d: ff d0                         callq   *%rax
// 16f: 85 ed                         testl   %ebp, %ebp
// 171: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 175: 75 d3                         jne     0x14a <_JIT_ENTRY+0x14a>
// 177: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  PyTuple_Type
// 185: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 18a: 75 4c                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 18c: 49 83 7c 24 10 02             cmpq    $0x2, 0x10(%r12)
// 192: 75 44                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 194: 4d 8b 6c 24 20                movq    0x20(%r12), %r13
// 199: 41 8b 45 00                   movl    (%r13), %eax
// 19d: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 000000000000019f:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1a7: ff c0                         incl    %eax
// 1a9: 74 07                         je      0x1b2 <_JIT_ENTRY+0x1b2>
// 1ab: 41 89 45 00                   movl    %eax, (%r13)
// 1af: 41 ff d7                      callq   *%r15
// 1b2: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 1b6: 4d 8b 6c 24 18                movq    0x18(%r12), %r13
// 1bb: 41 8b 45 00                   movl    (%r13), %eax
// 1bf: ff c0                         incl    %eax
// 1c1: 75 4c                         jne     0x20f <_JIT_ENTRY+0x20f>
// 1c3: 4d 89 2e                      movq    %r13, (%r14)
// 1c6: 49 8b 04 24                   movq    (%r12), %rax
// 1ca: 48 85 c0                      testq   %rax, %rax
// 1cd: 7e 53                         jle     0x222 <_JIT_ENTRY+0x222>
// 1cf: 85 c0                         testl   %eax, %eax
// 1d1: 79 75                         jns     0x248 <_JIT_ENTRY+0x248>
// 1d3: e9 91 00 00 00                jmp     0x269 <_JIT_ENTRY+0x269>
// 1d8: 49 29 de                      subq    %rbx, %r14
// 1db: 49 83 c6 b8                   addq    $-0x48, %r14
// 1df: 49 c1 ee 03                   shrq    $0x3, %r14
// 1e3: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1e7: 48 8b 03                      movq    (%rbx), %rax
// 1ea: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001ec:  R_X86_64_64  _JIT_TARGET
// 1f4: 89 c9                         movl    %ecx, %ecx
// 1f6: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1fa: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 200: 48 83 c4 08                   addq    $0x8, %rsp
// 204: 5b                            popq    %rbx
// 205: 41 5c                         popq    %r12
// 207: 41 5d                         popq    %r13
// 209: 41 5e                         popq    %r14
// 20b: 41 5f                         popq    %r15
// 20d: 5d                            popq    %rbp
// 20e: c3                            retq
// 20f: 41 89 45 00                   movl    %eax, (%r13)
// 213: 41 ff d7                      callq   *%r15
// 216: 4d 89 2e                      movq    %r13, (%r14)
// 219: 49 8b 04 24                   movq    (%r12), %rax
// 21d: 48 85 c0                      testq   %rax, %rax
// 220: 7f ad                         jg      0x1cf <_JIT_ENTRY+0x1cf>
// 222: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000224:  R_X86_64_64  .rodata.str1.1
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _Py_NegativeRefcount
// 236: be 87 03 00 00                movl    $0x387, %esi            # imm = 0x387
// 23b: 4c 89 e2                      movq    %r12, %rdx
// 23e: ff d0                         callq   *%rax
// 240: 49 8b 04 24                   movq    (%r12), %rax
// 244: 85 c0                         testl   %eax, %eax
// 246: 78 21                         js      0x269 <_JIT_ENTRY+0x269>
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 252: ff d0                         callq   *%rax
// 254: 49 ff 0c 24                   decq    (%r12)
// 258: 75 0f                         jne     0x269 <_JIT_ENTRY+0x269>
// 25a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025c:  R_X86_64_64  _Py_Dealloc
// 264: 4c 89 e7                      movq    %r12, %rdi
// 267: ff d0                         callq   *%rax
// 269: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026b:  R_X86_64_64  _JIT_OPARG
// 273: 0f b7 c0                      movzwl  %ax, %eax
// 276: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 27a: 48 83 c6 f8                   addq    $-0x8, %rsi
// 27e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000280:  R_X86_64_64  _JIT_CONTINUE
// 288: 48 89 df                      movq    %rbx, %rdi
// 28b: 48 8b 14 24                   movq    (%rsp), %rdx
// 28f: 48 83 c4 08                   addq    $0x8, %rsp
// 293: 5b                            popq    %rbx
// 294: 41 5c                         popq    %r12
// 296: 41 5d                         popq    %r13
// 298: 41 5e                         popq    %r14
// 29a: 41 5f                         popq    %r15
// 29c: 5d                            popq    %rbp
// 29d: ff e0                         jmpq    *%rax
// 29f: 
static const unsigned char _STORE_SUBSCRplus_UNPACK_SEQUENCE_TWO_TUPLE_code_body[672] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0x14, 0x24, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x1e, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x2d, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xa0, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xa0, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xd3, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x4c, 0x49, 0x83, 0x7c, 0x24, 0x10, 0x02, 0x75, 0x44, 0x4d, 0x8b, 0x6c, 0x24, 0x20, 0x41, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x07, 0x41, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd7, 0x4d, 0x89, 0x6e, 0xf8, 0x4d, 0x8b, 0x6c, 0x24, 0x18, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x4c, 0x4d, 0x89, 0x2e, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x53, 0x85, 0xc0, 0x79, 0x75, 0xe9, 0x91, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd7, 0x4d, 0x89, 0x2e, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xad, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_UNPACK_SEQUENCE_TWO_TUPLE_code_holes[23] = {
    {0x23, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1ec, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x26b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x280, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_UNPACK_SEQUENCE_TWO_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_UNPACK_SEQUENCE_TWO_TUPLE_data_holes[1];

// _STORE_SUBSCRplus_WITH_EXCEPT_START
// 
// /tmp/tmp6uzrht0y/_STORE_SUBSCRplus_WITH_EXCEPT_START.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 13: 49 89 f6                      movq    %rsi, %r14
// 16: 48 89 fb                      movq    %rdi, %rbx
// 19: 4c 8b 66 f8                   movq    -0x8(%rsi), %r12
// 1d: 4c 8b 7e e8                   movq    -0x18(%rsi), %r15
// 21: 4c 8b 6e f0                   movq    -0x10(%rsi), %r13
// 25: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000027:  R_X86_64_64  PyObject_SetItem
// 2f: 4c 89 ef                      movq    %r13, %rdi
// 32: 4c 89 e6                      movq    %r12, %rsi
// 35: 4c 89 fa                      movq    %r15, %rdx
// 38: ff d0                         callq   *%rax
// 3a: 89 c5                         movl    %eax, %ebp
// 3c: 49 8b 07                      movq    (%r15), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 06                         jle     0x4a <_JIT_ENTRY+0x4a>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 27                         jns     0x6f <_JIT_ENTRY+0x6f>
// 48: eb 36                         jmp     0x80 <_JIT_ENTRY+0x80>
// 4a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000004c:  R_X86_64_64  .rodata.str1.1
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _Py_NegativeRefcount
// 5e: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// 63: 4c 89 fa                      movq    %r15, %rdx
// 66: ff d0                         callq   *%rax
// 68: 49 8b 07                      movq    (%r15), %rax
// 6b: 85 c0                         testl   %eax, %eax
// 6d: 78 11                         js      0x80 <_JIT_ENTRY+0x80>
// 6f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000071:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 79: ff d0                         callq   *%rax
// 7b: 49 ff 0f                      decq    (%r15)
// 7e: 74 0f                         je      0x8f <_JIT_ENTRY+0x8f>
// 80: 49 8b 45 00                   movq    (%r13), %rax
// 84: 48 85 c0                      testq   %rax, %rax
// 87: 7e 1e                         jle     0xa7 <_JIT_ENTRY+0xa7>
// 89: 85 c0                         testl   %eax, %eax
// 8b: 79 40                         jns     0xcd <_JIT_ENTRY+0xcd>
// 8d: eb 50                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 8f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000091:  R_X86_64_64  _Py_Dealloc
// 99: 4c 89 ff                      movq    %r15, %rdi
// 9c: ff d0                         callq   *%rax
// 9e: 49 8b 45 00                   movq    (%r13), %rax
// a2: 48 85 c0                      testq   %rax, %rax
// a5: 7f e2                         jg      0x89 <_JIT_ENTRY+0x89>
// a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000a9:  R_X86_64_64  .rodata.str1.1
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_NegativeRefcount
// bb: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// c0: 4c 89 ea                      movq    %r13, %rdx
// c3: ff d0                         callq   *%rax
// c5: 49 8b 45 00                   movq    (%r13), %rax
// c9: 85 c0                         testl   %eax, %eax
// cb: 78 12                         js      0xdf <_JIT_ENTRY+0xdf>
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// d7: ff d0                         callq   *%rax
// d9: 49 ff 4d 00                   decq    (%r13)
// dd: 74 13                         je      0xf2 <_JIT_ENTRY+0xf2>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 22                         jle     0x10a <_JIT_ENTRY+0x10a>
// e8: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 44                         jns     0x134 <_JIT_ENTRY+0x134>
// f0: eb 54                         jmp     0x146 <_JIT_ENTRY+0x146>
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_Dealloc
// fc: 4c 89 ef                      movq    %r13, %rdi
// ff: ff d0                         callq   *%rax
// 101: 49 8b 04 24                   movq    (%r12), %rax
// 105: 48 85 c0                      testq   %rax, %rax
// 108: 7f de                         jg      0xe8 <_JIT_ENTRY+0xe8>
// 10a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000010c:  R_X86_64_64  .rodata.str1.1
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _Py_NegativeRefcount
// 11e: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 123: 4c 89 e2                      movq    %r12, %rdx
// 126: ff d0                         callq   *%rax
// 128: 49 8b 04 24                   movq    (%r12), %rax
// 12c: 4d 8d 7e e8                   leaq    -0x18(%r14), %r15
// 130: 85 c0                         testl   %eax, %eax
// 132: 78 12                         js      0x146 <_JIT_ENTRY+0x146>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 13e: ff d0                         callq   *%rax
// 140: 49 ff 0c 24                   decq    (%r12)
// 144: 74 2f                         je      0x175 <_JIT_ENTRY+0x175>
// 146: 85 ed                         testl   %ebp, %ebp
// 148: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 14c: 74 3e                         je      0x18c <_JIT_ENTRY+0x18c>
// 14e: 49 83 c6 e8                   addq    $-0x18, %r14
// 152: 4d 89 f7                      movq    %r14, %r15
// 155: 49 29 df                      subq    %rbx, %r15
// 158: 49 83 c7 b8                   addq    $-0x48, %r15
// 15c: 49 c1 ef 03                   shrq    $0x3, %r15
// 160: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 164: 31 c0                         xorl    %eax, %eax
// 166: 48 83 c4 38                   addq    $0x38, %rsp
// 16a: 5b                            popq    %rbx
// 16b: 41 5c                         popq    %r12
// 16d: 41 5d                         popq    %r13
// 16f: 41 5e                         popq    %r14
// 171: 41 5f                         popq    %r15
// 173: 5d                            popq    %rbp
// 174: c3                            retq
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_Dealloc
// 17f: 4c 89 e7                      movq    %r12, %rdi
// 182: ff d0                         callq   *%rax
// 184: 85 ed                         testl   %ebp, %ebp
// 186: 4d 0f 44 f7                   cmoveq  %r15, %r14
// 18a: 75 c2                         jne     0x14e <_JIT_ENTRY+0x14e>
// 18c: 49 8b 46 e0                   movq    -0x20(%r14), %rax
// 190: 48 89 04 24                   movq    %rax, (%rsp)
// 194: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 198: 4d 8b 65 08                   movq    0x8(%r13), %r12
// 19c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019e:  R_X86_64_64  PyException_GetTraceback
// 1a6: 4c 89 ef                      movq    %r13, %rdi
// 1a9: ff d0                         callq   *%rax
// 1ab: 48 85 c0                      testq   %rax, %rax
// 1ae: 74 11                         je      0x1c1 <_JIT_ENTRY+0x1c1>
// 1b0: 48 89 c5                      movq    %rax, %rbp
// 1b3: 48 8b 00                      movq    (%rax), %rax
// 1b6: 48 85 c0                      testq   %rax, %rax
// 1b9: 7e 12                         jle     0x1cd <_JIT_ENTRY+0x1cd>
// 1bb: 85 c0                         testl   %eax, %eax
// 1bd: 79 34                         jns     0x1f3 <_JIT_ENTRY+0x1f3>
// 1bf: eb 53                         jmp     0x214 <_JIT_ENTRY+0x214>
// 1c1: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001c3:  R_X86_64_64  _Py_NoneStruct
// 1cb: eb 47                         jmp     0x214 <_JIT_ENTRY+0x214>
// 1cd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001cf:  R_X86_64_64  .rodata.str1.1
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_NegativeRefcount
// 1e1: be 64 09 00 00                movl    $0x964, %esi            # imm = 0x964
// 1e6: 48 89 ea                      movq    %rbp, %rdx
// 1e9: ff d0                         callq   *%rax
// 1eb: 48 8b 45 00                   movq    (%rbp), %rax
// 1ef: 85 c0                         testl   %eax, %eax
// 1f1: 78 21                         js      0x214 <_JIT_ENTRY+0x214>
// 1f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fd: ff d0                         callq   *%rax
// 1ff: 48 ff 4d 00                   decq    (%rbp)
// 203: 75 0f                         jne     0x214 <_JIT_ENTRY+0x214>
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _Py_Dealloc
// 20f: 48 89 ef                      movq    %rbp, %rdi
// 212: ff d0                         callq   *%rax
// 214: 48 8b 3c 24                   movq    (%rsp), %rdi
// 218: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 221: 48 8d 74 24 18                leaq    0x18(%rsp), %rsi
// 226: 4c 89 64 24 18                movq    %r12, 0x18(%rsp)
// 22b: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 230: 48 89 6c 24 28                movq    %rbp, 0x28(%rsp)
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  PyObject_Vectorcall
// 23f: 48 ba 03 00 00 00 00 00 00 80 movabsq $-0x7ffffffffffffffd, %rdx # imm = 0x8000000000000003
// 249: 31 c9                         xorl    %ecx, %ecx
// 24b: ff d0                         callq   *%rax
// 24d: 48 85 c0                      testq   %rax, %rax
// 250: 0f 84 ff fe ff ff             je      0x155 <_JIT_ENTRY+0x155>
// 256: 49 89 06                      movq    %rax, (%r14)
// 259: 49 83 c6 08                   addq    $0x8, %r14
// 25d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025f:  R_X86_64_64  _JIT_CONTINUE
// 267: 48 89 df                      movq    %rbx, %rdi
// 26a: 4c 89 f6                      movq    %r14, %rsi
// 26d: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 272: 48 83 c4 38                   addq    $0x38, %rsp
// 276: 5b                            popq    %rbx
// 277: 41 5c                         popq    %r12
// 279: 41 5d                         popq    %r13
// 27b: 41 5e                         popq    %r14
// 27d: 41 5f                         popq    %r15
// 27f: 5d                            popq    %rbp
// 280: ff e0                         jmpq    *%rax
// 282: 
static const unsigned char _STORE_SUBSCRplus_WITH_EXCEPT_START_code_body[643] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x48, 0x89, 0x54, 0x24, 0x08, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x4c, 0x8b, 0x66, 0xf8, 0x4c, 0x8b, 0x7e, 0xe8, 0x4c, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x7e, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2f, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x74, 0x3e, 0x49, 0x83, 0xc6, 0xe8, 0x4d, 0x89, 0xf7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x44, 0xf7, 0x75, 0xc2, 0x49, 0x8b, 0x46, 0xe0, 0x48, 0x89, 0x04, 0x24, 0x4d, 0x8b, 0x6e, 0xf8, 0x4d, 0x8b, 0x65, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x11, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x79, 0x34, 0xeb, 0x53, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x64, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x74, 0x24, 0x18, 0x4c, 0x89, 0x64, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x48, 0x89, 0x6c, 0x24, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xff, 0xfe, 0xff, 0xff, 0x49, 0x89, 0x06, 0x49, 0x83, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _STORE_SUBSCRplus_WITH_EXCEPT_START_code_holes[22] = {
    {0x27, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x91, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyException_GetTraceback, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Vectorcall, 0x0},
    {0x25f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _STORE_SUBSCRplus_WITH_EXCEPT_START_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _STORE_SUBSCRplus_WITH_EXCEPT_START_data_holes[1];

#define INIT_STENCIL(STENCIL) {                         \
    .body_size = Py_ARRAY_LENGTH(STENCIL##_body) - 1,   \
    .body = STENCIL##_body,                             \
    .holes_size = Py_ARRAY_LENGTH(STENCIL##_holes) - 1, \
    .holes = STENCIL##_holes,                           \
}

#define INIT_STENCIL_GROUP(OP) {     \
    .code = INIT_STENCIL(OP##_code), \
    .data = INIT_STENCIL(OP##_data), \
}

static const StencilGroup stencil_groups[512] = {
    [_STORE_SUBSCRplus_BEFORE_ASYNC_WITH] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BEFORE_ASYNC_WITH),
    [_STORE_SUBSCRplus_BEFORE_WITH] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BEFORE_WITH),
    [_STORE_SUBSCRplus_BINARY_OP] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BINARY_OP),
    [_STORE_SUBSCRplus_BINARY_OP_ADD_FLOAT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BINARY_OP_ADD_FLOAT),
    [_STORE_SUBSCRplus_BINARY_OP_ADD_INT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BINARY_OP_ADD_INT),
    [_STORE_SUBSCRplus_BINARY_OP_ADD_UNICODE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BINARY_OP_ADD_UNICODE),
    [_STORE_SUBSCRplus_BINARY_OP_MULTIPLY_FLOAT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BINARY_OP_MULTIPLY_FLOAT),
    [_STORE_SUBSCRplus_BINARY_OP_MULTIPLY_INT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BINARY_OP_MULTIPLY_INT),
    [_STORE_SUBSCRplus_BINARY_OP_SUBTRACT_FLOAT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BINARY_OP_SUBTRACT_FLOAT),
    [_STORE_SUBSCRplus_BINARY_OP_SUBTRACT_INT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BINARY_OP_SUBTRACT_INT),
    [_STORE_SUBSCRplus_BINARY_SLICE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BINARY_SLICE),
    [_STORE_SUBSCRplus_BINARY_SUBSCR] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BINARY_SUBSCR),
    [_STORE_SUBSCRplus_BINARY_SUBSCR_DICT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BINARY_SUBSCR_DICT),
    [_STORE_SUBSCRplus_BINARY_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BINARY_SUBSCR_LIST_INT),
    [_STORE_SUBSCRplus_BINARY_SUBSCR_STR_INT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BINARY_SUBSCR_STR_INT),
    [_STORE_SUBSCRplus_BINARY_SUBSCR_TUPLE_INT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BINARY_SUBSCR_TUPLE_INT),
    [_STORE_SUBSCRplus_BUILD_CONST_KEY_MAP] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BUILD_CONST_KEY_MAP),
    [_STORE_SUBSCRplus_BUILD_LIST] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BUILD_LIST),
    [_STORE_SUBSCRplus_BUILD_MAP] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BUILD_MAP),
    [_STORE_SUBSCRplus_BUILD_SET] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BUILD_SET),
    [_STORE_SUBSCRplus_BUILD_SLICE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BUILD_SLICE),
    [_STORE_SUBSCRplus_BUILD_STRING] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BUILD_STRING),
    [_STORE_SUBSCRplus_BUILD_TUPLE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_BUILD_TUPLE),
    [_STORE_SUBSCRplus_CALL_BUILTIN_CLASS] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CALL_BUILTIN_CLASS),
    [_STORE_SUBSCRplus_CALL_BUILTIN_FAST] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CALL_BUILTIN_FAST),
    [_STORE_SUBSCRplus_CALL_BUILTIN_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CALL_BUILTIN_FAST_WITH_KEYWORDS),
    [_STORE_SUBSCRplus_CALL_BUILTIN_O] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CALL_BUILTIN_O),
    [_STORE_SUBSCRplus_CALL_INTRINSIC_1] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CALL_INTRINSIC_1),
    [_STORE_SUBSCRplus_CALL_INTRINSIC_2] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CALL_INTRINSIC_2),
    [_STORE_SUBSCRplus_CALL_ISINSTANCE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CALL_ISINSTANCE),
    [_STORE_SUBSCRplus_CALL_LEN] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CALL_LEN),
    [_STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_FAST] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_FAST),
    [_STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS),
    [_STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_NOARGS] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_NOARGS),
    [_STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_O] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CALL_METHOD_DESCRIPTOR_O),
    [_STORE_SUBSCRplus_CALL_STR_1] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CALL_STR_1),
    [_STORE_SUBSCRplus_CALL_TUPLE_1] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CALL_TUPLE_1),
    [_STORE_SUBSCRplus_CALL_TYPE_1] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CALL_TYPE_1),
    [_STORE_SUBSCRplus_CHECK_ATTR_CLASS] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CHECK_ATTR_CLASS),
    [_STORE_SUBSCRplus_CHECK_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CHECK_ATTR_METHOD_LAZY_DICT),
    [_STORE_SUBSCRplus_CHECK_ATTR_MODULE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CHECK_ATTR_MODULE),
    [_STORE_SUBSCRplus_CHECK_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CHECK_ATTR_WITH_HINT),
    [_STORE_SUBSCRplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS),
    [_STORE_SUBSCRplus_CHECK_EG_MATCH] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CHECK_EG_MATCH),
    [_STORE_SUBSCRplus_CHECK_EXC_MATCH] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CHECK_EXC_MATCH),
    [_STORE_SUBSCRplus_CHECK_FUNCTION_EXACT_ARGS] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CHECK_FUNCTION_EXACT_ARGS),
    [_STORE_SUBSCRplus_CHECK_MANAGED_OBJECT_HAS_VALUES] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CHECK_MANAGED_OBJECT_HAS_VALUES),
    [_STORE_SUBSCRplus_CHECK_PEP_523] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CHECK_PEP_523),
    [_STORE_SUBSCRplus_CHECK_STACK_SPACE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CHECK_STACK_SPACE),
    [_STORE_SUBSCRplus_CHECK_VALIDITY] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CHECK_VALIDITY),
    [_STORE_SUBSCRplus_COMPARE_OP] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_COMPARE_OP),
    [_STORE_SUBSCRplus_COMPARE_OP_FLOAT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_COMPARE_OP_FLOAT),
    [_STORE_SUBSCRplus_COMPARE_OP_INT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_COMPARE_OP_INT),
    [_STORE_SUBSCRplus_COMPARE_OP_STR] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_COMPARE_OP_STR),
    [_STORE_SUBSCRplus_CONTAINS_OP] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CONTAINS_OP),
    [_STORE_SUBSCRplus_CONVERT_VALUE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_CONVERT_VALUE),
    [_STORE_SUBSCRplus_COPY] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_COPY),
    [_STORE_SUBSCRplus_COPY_FREE_VARS] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_COPY_FREE_VARS),
    [_STORE_SUBSCRplus_DELETE_ATTR] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_DELETE_ATTR),
    [_STORE_SUBSCRplus_DELETE_DEREF] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_DELETE_DEREF),
    [_STORE_SUBSCRplus_DELETE_FAST] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_DELETE_FAST),
    [_STORE_SUBSCRplus_DELETE_GLOBAL] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_DELETE_GLOBAL),
    [_STORE_SUBSCRplus_DELETE_NAME] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_DELETE_NAME),
    [_STORE_SUBSCRplus_DELETE_SUBSCR] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_DELETE_SUBSCR),
    [_STORE_SUBSCRplus_DICT_MERGE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_DICT_MERGE),
    [_STORE_SUBSCRplus_DICT_UPDATE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_DICT_UPDATE),
    [_STORE_SUBSCRplus_END_SEND] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_END_SEND),
    [_STORE_SUBSCRplus_EXIT_INIT_CHECK] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_EXIT_INIT_CHECK),
    [_STORE_SUBSCRplus_EXIT_TRACE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_EXIT_TRACE),
    [_STORE_SUBSCRplus_FORMAT_SIMPLE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_FORMAT_SIMPLE),
    [_STORE_SUBSCRplus_FORMAT_WITH_SPEC] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_FORMAT_WITH_SPEC),
    [_STORE_SUBSCRplus_FOR_ITER_TIER_TWO] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_FOR_ITER_TIER_TWO),
    [_STORE_SUBSCRplus_GET_AITER] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_GET_AITER),
    [_STORE_SUBSCRplus_GET_ANEXT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_GET_ANEXT),
    [_STORE_SUBSCRplus_GET_AWAITABLE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_GET_AWAITABLE),
    [_STORE_SUBSCRplus_GET_ITER] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_GET_ITER),
    [_STORE_SUBSCRplus_GET_LEN] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_GET_LEN),
    [_STORE_SUBSCRplus_GET_YIELD_FROM_ITER] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_GET_YIELD_FROM_ITER),
    [_STORE_SUBSCRplus_GUARD_BOTH_FLOAT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_GUARD_BOTH_FLOAT),
    [_STORE_SUBSCRplus_GUARD_BOTH_INT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_GUARD_BOTH_INT),
    [_STORE_SUBSCRplus_GUARD_BOTH_UNICODE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_GUARD_BOTH_UNICODE),
    [_STORE_SUBSCRplus_GUARD_BUILTINS_VERSION] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_GUARD_BUILTINS_VERSION),
    [_STORE_SUBSCRplus_GUARD_DORV_VALUES] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_GUARD_DORV_VALUES),
    [_STORE_SUBSCRplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT),
    [_STORE_SUBSCRplus_GUARD_GLOBALS_VERSION] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_GUARD_GLOBALS_VERSION),
    [_STORE_SUBSCRplus_GUARD_IS_FALSE_POP] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_GUARD_IS_FALSE_POP),
    [_STORE_SUBSCRplus_GUARD_IS_NONE_POP] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_GUARD_IS_NONE_POP),
    [_STORE_SUBSCRplus_GUARD_IS_NOT_NONE_POP] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_GUARD_IS_NOT_NONE_POP),
    [_STORE_SUBSCRplus_GUARD_IS_TRUE_POP] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_GUARD_IS_TRUE_POP),
    [_STORE_SUBSCRplus_GUARD_KEYS_VERSION] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_GUARD_KEYS_VERSION),
    [_STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_LIST] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_LIST),
    [_STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_RANGE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_RANGE),
    [_STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_TUPLE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_GUARD_NOT_EXHAUSTED_TUPLE),
    [_STORE_SUBSCRplus_GUARD_TYPE_VERSION] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_GUARD_TYPE_VERSION),
    [_STORE_SUBSCRplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS),
    [_STORE_SUBSCRplus_INIT_CALL_PY_EXACT_ARGS] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_INIT_CALL_PY_EXACT_ARGS),
    [_STORE_SUBSCRplus_INSERT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_INSERT),
    [_STORE_SUBSCRplus_IS_NONE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_IS_NONE),
    [_STORE_SUBSCRplus_IS_OP] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_IS_OP),
    [_STORE_SUBSCRplus_ITER_CHECK_LIST] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_ITER_CHECK_LIST),
    [_STORE_SUBSCRplus_ITER_CHECK_RANGE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_ITER_CHECK_RANGE),
    [_STORE_SUBSCRplus_ITER_CHECK_TUPLE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_ITER_CHECK_TUPLE),
    [_STORE_SUBSCRplus_ITER_NEXT_LIST] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_ITER_NEXT_LIST),
    [_STORE_SUBSCRplus_ITER_NEXT_RANGE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_ITER_NEXT_RANGE),
    [_STORE_SUBSCRplus_ITER_NEXT_TUPLE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_ITER_NEXT_TUPLE),
    [_STORE_SUBSCRplus_JUMP_TO_TOP] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_JUMP_TO_TOP),
    [_STORE_SUBSCRplus_LIST_APPEND] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LIST_APPEND),
    [_STORE_SUBSCRplus_LIST_EXTEND] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LIST_EXTEND),
    [_STORE_SUBSCRplus_LOAD_ASSERTION_ERROR] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_ASSERTION_ERROR),
    [_STORE_SUBSCRplus_LOAD_ATTR] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_ATTR),
    [_STORE_SUBSCRplus_LOAD_ATTR_CLASS] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_ATTR_CLASS),
    [_STORE_SUBSCRplus_LOAD_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_ATTR_INSTANCE_VALUE),
    [_STORE_SUBSCRplus_LOAD_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_ATTR_METHOD_LAZY_DICT),
    [_STORE_SUBSCRplus_LOAD_ATTR_METHOD_NO_DICT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_ATTR_METHOD_NO_DICT),
    [_STORE_SUBSCRplus_LOAD_ATTR_METHOD_WITH_VALUES] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_ATTR_METHOD_WITH_VALUES),
    [_STORE_SUBSCRplus_LOAD_ATTR_MODULE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_ATTR_MODULE),
    [_STORE_SUBSCRplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT),
    [_STORE_SUBSCRplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES),
    [_STORE_SUBSCRplus_LOAD_ATTR_SLOT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_ATTR_SLOT),
    [_STORE_SUBSCRplus_LOAD_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_ATTR_WITH_HINT),
    [_STORE_SUBSCRplus_LOAD_BUILD_CLASS] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_BUILD_CLASS),
    [_STORE_SUBSCRplus_LOAD_CONST] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_CONST),
    [_STORE_SUBSCRplus_LOAD_DEREF] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_DEREF),
    [_STORE_SUBSCRplus_LOAD_FAST] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_FAST),
    [_STORE_SUBSCRplus_LOAD_FAST_AND_CLEAR] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_FAST_AND_CLEAR),
    [_STORE_SUBSCRplus_LOAD_FAST_CHECK] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_FAST_CHECK),
    [_STORE_SUBSCRplus_LOAD_FROM_DICT_OR_DEREF] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_FROM_DICT_OR_DEREF),
    [_STORE_SUBSCRplus_LOAD_FROM_DICT_OR_GLOBALS] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_FROM_DICT_OR_GLOBALS),
    [_STORE_SUBSCRplus_LOAD_GLOBAL] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_GLOBAL),
    [_STORE_SUBSCRplus_LOAD_GLOBAL_BUILTINS] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_GLOBAL_BUILTINS),
    [_STORE_SUBSCRplus_LOAD_GLOBAL_MODULE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_GLOBAL_MODULE),
    [_STORE_SUBSCRplus_LOAD_LOCALS] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_LOCALS),
    [_STORE_SUBSCRplus_LOAD_NAME] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_NAME),
    [_STORE_SUBSCRplus_LOAD_SUPER_ATTR_ATTR] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_SUPER_ATTR_ATTR),
    [_STORE_SUBSCRplus_LOAD_SUPER_ATTR_METHOD] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_LOAD_SUPER_ATTR_METHOD),
    [_STORE_SUBSCRplus_MAKE_CELL] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_MAKE_CELL),
    [_STORE_SUBSCRplus_MAKE_FUNCTION] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_MAKE_FUNCTION),
    [_STORE_SUBSCRplus_MAP_ADD] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_MAP_ADD),
    [_STORE_SUBSCRplus_MATCH_CLASS] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_MATCH_CLASS),
    [_STORE_SUBSCRplus_MATCH_KEYS] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_MATCH_KEYS),
    [_STORE_SUBSCRplus_MATCH_MAPPING] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_MATCH_MAPPING),
    [_STORE_SUBSCRplus_MATCH_SEQUENCE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_MATCH_SEQUENCE),
    [_STORE_SUBSCRplus_NOP] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_NOP),
    [_STORE_SUBSCRplus_POP_EXCEPT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_POP_EXCEPT),
    [_STORE_SUBSCRplus_POP_FRAME] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_POP_FRAME),
    [_STORE_SUBSCRplus_POP_TOP] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_POP_TOP),
    [_STORE_SUBSCRplus_PUSH_EXC_INFO] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_PUSH_EXC_INFO),
    [_STORE_SUBSCRplus_PUSH_FRAME] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_PUSH_FRAME),
    [_STORE_SUBSCRplus_PUSH_NULL] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_PUSH_NULL),
    [_STORE_SUBSCRplus_RESUME_CHECK] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_RESUME_CHECK),
    [_STORE_SUBSCRplus_SAVE_RETURN_OFFSET] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_SAVE_RETURN_OFFSET),
    [_STORE_SUBSCRplus_SETUP_ANNOTATIONS] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_SETUP_ANNOTATIONS),
    [_STORE_SUBSCRplus_SET_ADD] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_SET_ADD),
    [_STORE_SUBSCRplus_SET_FUNCTION_ATTRIBUTE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_SET_FUNCTION_ATTRIBUTE),
    [_STORE_SUBSCRplus_SET_IP] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_SET_IP),
    [_STORE_SUBSCRplus_SET_UPDATE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_SET_UPDATE),
    [_STORE_SUBSCRplus_STORE_ATTR] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_STORE_ATTR),
    [_STORE_SUBSCRplus_STORE_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_STORE_ATTR_INSTANCE_VALUE),
    [_STORE_SUBSCRplus_STORE_ATTR_SLOT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_STORE_ATTR_SLOT),
    [_STORE_SUBSCRplus_STORE_DEREF] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_STORE_DEREF),
    [_STORE_SUBSCRplus_STORE_FAST] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_STORE_FAST),
    [_STORE_SUBSCRplus_STORE_GLOBAL] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_STORE_GLOBAL),
    [_STORE_SUBSCRplus_STORE_NAME] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_STORE_NAME),
    [_STORE_SUBSCRplus_STORE_SLICE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_STORE_SLICE),
    [_STORE_SUBSCRplus_STORE_SUBSCR] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_STORE_SUBSCR),
    [_STORE_SUBSCRplus_STORE_SUBSCR_DICT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_STORE_SUBSCR_DICT),
    [_STORE_SUBSCRplus_STORE_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_STORE_SUBSCR_LIST_INT),
    [_STORE_SUBSCRplus_SWAP] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_SWAP),
    [_STORE_SUBSCRplus_TO_BOOL] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_TO_BOOL),
    [_STORE_SUBSCRplus_TO_BOOL_ALWAYS_TRUE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_TO_BOOL_ALWAYS_TRUE),
    [_STORE_SUBSCRplus_TO_BOOL_BOOL] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_TO_BOOL_BOOL),
    [_STORE_SUBSCRplus_TO_BOOL_INT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_TO_BOOL_INT),
    [_STORE_SUBSCRplus_TO_BOOL_LIST] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_TO_BOOL_LIST),
    [_STORE_SUBSCRplus_TO_BOOL_NONE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_TO_BOOL_NONE),
    [_STORE_SUBSCRplus_TO_BOOL_STR] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_TO_BOOL_STR),
    [_STORE_SUBSCRplus_UNARY_INVERT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_UNARY_INVERT),
    [_STORE_SUBSCRplus_UNARY_NEGATIVE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_UNARY_NEGATIVE),
    [_STORE_SUBSCRplus_UNARY_NOT] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_UNARY_NOT),
    [_STORE_SUBSCRplus_UNPACK_EX] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_UNPACK_EX),
    [_STORE_SUBSCRplus_UNPACK_SEQUENCE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_UNPACK_SEQUENCE),
    [_STORE_SUBSCRplus_UNPACK_SEQUENCE_LIST] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_UNPACK_SEQUENCE_LIST),
    [_STORE_SUBSCRplus_UNPACK_SEQUENCE_TUPLE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_UNPACK_SEQUENCE_TUPLE),
    [_STORE_SUBSCRplus_UNPACK_SEQUENCE_TWO_TUPLE] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_UNPACK_SEQUENCE_TWO_TUPLE),
    [_STORE_SUBSCRplus_WITH_EXCEPT_START] = INIT_STENCIL_GROUP(_STORE_SUBSCRplus_WITH_EXCEPT_START),
};

#define GET_PATCHES() { \
    [HoleValue_CODE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_CONTINUE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_DATA] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_EXECUTOR] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_GOT] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPARG] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPERAND] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TARGET] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TOP] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_ZERO] = (uint64_t)0xBADBADBADBADBADB, \
}
