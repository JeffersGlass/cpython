// $ /home/jglass/.pyenv/versions/3.12.1/bin/python Tools/jit/build_two_reuse.py x86_64-unknown-linux-gnu --all_ops

typedef enum {
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGE21,
    HoleKind_ARM64_RELOC_GOT_LOAD_PAGEOFF12,
    HoleKind_ARM64_RELOC_UNSIGNED,
    HoleKind_IMAGE_REL_AMD64_ADDR64,
    HoleKind_IMAGE_REL_I386_DIR32,
    HoleKind_R_AARCH64_ABS64,
    HoleKind_R_AARCH64_CALL26,
    HoleKind_R_AARCH64_JUMP26,
    HoleKind_R_AARCH64_MOVW_UABS_G0_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G1_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G2_NC,
    HoleKind_R_AARCH64_MOVW_UABS_G3,
    HoleKind_R_X86_64_64,
    HoleKind_X86_64_RELOC_UNSIGNED,
} HoleKind;

typedef enum {
    HoleValue_CODE,
    HoleValue_CONTINUE,
    HoleValue_DATA,
    HoleValue_EXECUTOR,
    HoleValue_GOT,
    HoleValue_OPARG,
    HoleValue_OPERAND,
    HoleValue_TARGET,
    HoleValue_TOP,
    HoleValue_ZERO,
} HoleValue;

typedef struct {
    const uint64_t offset;
    const HoleKind kind;
    const HoleValue value;
    const void *symbol;
    const uint64_t addend;
} Hole;

typedef struct {
    const size_t body_size;
    const unsigned char * const body;
    const size_t holes_size;
    const Hole * const holes;
} Stencil;

typedef struct {
    const Stencil code;
    const Stencil data;
} StencilGroup;

// _DELETE_DEREFplus_BEFORE_ASYNC_WITH
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BEFORE_ASYNC_WITH.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 1e                         je      0x4d <_JIT_ENTRY+0x4d>
// 2f: 4c 89 34 24                   movq    %r14, (%rsp)
// 33: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3b: 49 8b 04 24                   movq    (%r12), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 2d                         jle     0x71 <_JIT_ENTRY+0x71>
// 44: 4d 89 fe                      movq    %r15, %r14
// 47: 85 c0                         testl   %eax, %eax
// 49: 79 4f                         jns     0x9a <_JIT_ENTRY+0x9a>
// 4b: eb 6e                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 4d: 49 8b 36                      movq    (%r14), %rsi
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: 0f b7 d0                      movzwl  %ax, %edx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PyEval_FormatExcUnbound
// 67: 4c 89 ff                      movq    %r15, %rdi
// 6a: ff d0                         callq   *%rax
// 6c: e9 6b 03 00 00                jmp     0x3dc <_JIT_ENTRY+0x3dc>
// 71: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000073:  R_X86_64_64  .rodata.str1.1
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _Py_NegativeRefcount
// 85: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8a: 4c 89 e2                      movq    %r12, %rdx
// 8d: ff d0                         callq   *%rax
// 8f: 49 8b 04 24                   movq    (%r12), %rax
// 93: 4d 89 fe                      movq    %r15, %r14
// 96: 85 c0                         testl   %eax, %eax
// 98: 78 21                         js      0xbb <_JIT_ENTRY+0xbb>
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a4: ff d0                         callq   *%rax
// a6: 49 ff 0c 24                   decq    (%r12)
// aa: 75 0f                         jne     0xbb <_JIT_ENTRY+0xbb>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_Dealloc
// b6: 4c 89 e7                      movq    %r12, %rdi
// b9: ff d0                         callq   *%rax
// bb: 48 8b 6b f8                   movq    -0x8(%rbx), %rbp
// bf: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000c1:  R_X86_64_64  _PyObject_LookupSpecial
// c9: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000cb:  R_X86_64_64  _PyRuntime
// d3: 49 8d b5 68 a6 00 00          leaq    0xa668(%r13), %rsi
// da: 48 89 ef                      movq    %rbp, %rdi
// dd: 41 ff d7                      callq   *%r15
// e0: 48 85 c0                      testq   %rax, %rax
// e3: 74 35                         je      0x11a <_JIT_ENTRY+0x11a>
// e5: 49 89 c4                      movq    %rax, %r12
// e8: 49 81 c5 a0 a6 00 00          addq    $0xa6a0, %r13           # imm = 0xA6A0
// ef: 48 89 ef                      movq    %rbp, %rdi
// f2: 4c 89 ee                      movq    %r13, %rsi
// f5: 41 ff d7                      callq   *%r15
// f8: 48 85 c0                      testq   %rax, %rax
// fb: 74 36                         je      0x133 <_JIT_ENTRY+0x133>
// fd: 49 89 c5                      movq    %rax, %r13
// 100: 48 8b 45 00                   movq    (%rbp), %rax
// 104: 48 85 c0                      testq   %rax, %rax
// 107: 0f 8e 96 00 00 00             jle     0x1a3 <_JIT_ENTRY+0x1a3>
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 0f 88 ca 00 00 00             js      0x1df <_JIT_ENTRY+0x1df>
// 115: e9 af 00 00 00                jmp     0x1c9 <_JIT_ENTRY+0x1c9>
// 11a: 49 8b 46 68                   movq    0x68(%r14), %rax
// 11e: 48 85 c0                      testq   %rax, %rax
// 121: 74 46                         je      0x169 <_JIT_ENTRY+0x169>
// 123: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 128: 74 3f                         je      0x169 <_JIT_ENTRY+0x169>
// 12a: 4c 8b 34 24                   movq    (%rsp), %r14
// 12e: e9 a9 02 00 00                jmp     0x3dc <_JIT_ENTRY+0x3dc>
// 133: 49 8b 46 68                   movq    0x68(%r14), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 0f 84 ed 00 00 00             je      0x22d <_JIT_ENTRY+0x22d>
// 140: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 145: 0f 84 e2 00 00 00             je      0x22d <_JIT_ENTRY+0x22d>
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 4c 8b 34 24                   movq    (%rsp), %r14
// 156: 0f 8e 13 01 00 00             jle     0x26f <_JIT_ENTRY+0x26f>
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 0f 89 35 01 00 00             jns     0x299 <_JIT_ENTRY+0x299>
// 164: e9 73 02 00 00                jmp     0x3dc <_JIT_ENTRY+0x3dc>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  PyExc_TypeError
// 173: 48 8b 30                      movq    (%rax), %rsi
// 176: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 17a: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 17e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000180:  R_X86_64_64  .rodata.str1.1+0x39
// 188: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000018a:  R_X86_64_64  _PyErr_Format
// 192: 4c 89 f7                      movq    %r14, %rdi
// 195: 31 c0                         xorl    %eax, %eax
// 197: 41 ff d0                      callq   *%r8
// 19a: 4c 8b 34 24                   movq    (%rsp), %r14
// 19e: e9 39 02 00 00                jmp     0x3dc <_JIT_ENTRY+0x3dc>
// 1a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a5:  R_X86_64_64  .rodata.str1.1
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  _Py_NegativeRefcount
// 1b7: be 14 09 00 00                movl    $0x914, %esi            # imm = 0x914
// 1bc: 48 89 ea                      movq    %rbp, %rdx
// 1bf: ff d0                         callq   *%rax
// 1c1: 48 8b 45 00                   movq    (%rbp), %rax
// 1c5: 85 c0                         testl   %eax, %eax
// 1c7: 78 16                         js      0x1df <_JIT_ENTRY+0x1df>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d3: ff d0                         callq   *%rax
// 1d5: 48 ff 4d 00                   decq    (%rbp)
// 1d9: 0f 84 e2 00 00 00             je      0x2c1 <_JIT_ENTRY+0x2c1>
// 1df: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 1e4: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 1eb: 4d 89 f7                      movq    %r14, %r15
// 1ee: 0f 84 f1 00 00 00             je      0x2e5 <_JIT_ENTRY+0x2e5>
// 1f4: 48 8b 40 38                   movq    0x38(%rax), %rax
// 1f8: 49 8b 04 04                   movq    (%r12,%rax), %rax
// 1fc: 48 85 c0                      testq   %rax, %rax
// 1ff: 0f 84 e0 00 00 00             je      0x2e5 <_JIT_ENTRY+0x2e5>
// 205: 4c 89 e7                      movq    %r12, %rdi
// 208: 31 f6                         xorl    %esi, %esi
// 20a: 31 d2                         xorl    %edx, %edx
// 20c: 31 c9                         xorl    %ecx, %ecx
// 20e: ff d0                         callq   *%rax
// 210: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000212:  R_X86_64_64  _Py_CheckFunctionResult
// 21a: 4c 89 ff                      movq    %r15, %rdi
// 21d: 4c 89 e6                      movq    %r12, %rsi
// 220: 48 89 c2                      movq    %rax, %rdx
// 223: 31 c9                         xorl    %ecx, %ecx
// 225: 41 ff d0                      callq   *%r8
// 228: e9 d1 00 00 00                jmp     0x2fe <_JIT_ENTRY+0x2fe>
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  PyExc_TypeError
// 237: 48 8b 30                      movq    (%rax), %rsi
// 23a: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 23e: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 242: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000244:  R_X86_64_64  .rodata.str1.1+0x84
// 24c: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000024e:  R_X86_64_64  _PyErr_Format
// 256: 4c 89 f7                      movq    %r14, %rdi
// 259: 31 c0                         xorl    %eax, %eax
// 25b: 41 ff d0                      callq   *%r8
// 25e: 49 8b 04 24                   movq    (%r12), %rax
// 262: 48 85 c0                      testq   %rax, %rax
// 265: 4c 8b 34 24                   movq    (%rsp), %r14
// 269: 0f 8f ed fe ff ff             jg      0x15c <_JIT_ENTRY+0x15c>
// 26f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000271:  R_X86_64_64  .rodata.str1.1
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_NegativeRefcount
// 283: be 11 09 00 00                movl    $0x911, %esi            # imm = 0x911
// 288: 4c 89 e2                      movq    %r12, %rdx
// 28b: ff d0                         callq   *%rax
// 28d: 49 8b 04 24                   movq    (%r12), %rax
// 291: 85 c0                         testl   %eax, %eax
// 293: 0f 88 43 01 00 00             js      0x3dc <_JIT_ENTRY+0x3dc>
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a3: ff d0                         callq   *%rax
// 2a5: 49 ff 0c 24                   decq    (%r12)
// 2a9: 0f 85 2d 01 00 00             jne     0x3dc <_JIT_ENTRY+0x3dc>
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _Py_Dealloc
// 2b9: 4c 89 e7                      movq    %r12, %rdi
// 2bc: e9 19 01 00 00                jmp     0x3da <_JIT_ENTRY+0x3da>
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  _Py_Dealloc
// 2cb: 48 89 ef                      movq    %rbp, %rdi
// 2ce: ff d0                         callq   *%rax
// 2d0: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 2d5: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 2dc: 4d 89 f7                      movq    %r14, %r15
// 2df: 0f 85 0f ff ff ff             jne     0x1f4 <_JIT_ENTRY+0x1f4>
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _PyObject_MakeTpCall
// 2ef: 4c 89 ff                      movq    %r15, %rdi
// 2f2: 4c 89 e6                      movq    %r12, %rsi
// 2f5: 31 d2                         xorl    %edx, %edx
// 2f7: 31 c9                         xorl    %ecx, %ecx
// 2f9: 45 31 c0                      xorl    %r8d, %r8d
// 2fc: ff d0                         callq   *%rax
// 2fe: 48 89 c5                      movq    %rax, %rbp
// 301: 4c 8b 34 24                   movq    (%rsp), %r14
// 305: 49 8b 04 24                   movq    (%r12), %rax
// 309: 48 85 c0                      testq   %rax, %rax
// 30c: 7f 22                         jg      0x330 <_JIT_ENTRY+0x330>
// 30e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000310:  R_X86_64_64  .rodata.str1.1
// 318: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031a:  R_X86_64_64  _Py_NegativeRefcount
// 322: be 16 09 00 00                movl    $0x916, %esi            # imm = 0x916
// 327: 4c 89 e2                      movq    %r12, %rdx
// 32a: ff d0                         callq   *%rax
// 32c: 49 8b 04 24                   movq    (%r12), %rax
// 330: 85 c0                         testl   %eax, %eax
// 332: 78 21                         js      0x355 <_JIT_ENTRY+0x355>
// 334: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000336:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 33e: ff d0                         callq   *%rax
// 340: 49 ff 0c 24                   decq    (%r12)
// 344: 75 0f                         jne     0x355 <_JIT_ENTRY+0x355>
// 346: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000348:  R_X86_64_64  _Py_Dealloc
// 350: 4c 89 e7                      movq    %r12, %rdi
// 353: ff d0                         callq   *%rax
// 355: 48 85 ed                      testq   %rbp, %rbp
// 358: 74 2e                         je      0x388 <_JIT_ENTRY+0x388>
// 35a: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 35e: 48 89 2b                      movq    %rbp, (%rbx)
// 361: 48 83 c3 08                   addq    $0x8, %rbx
// 365: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000367:  R_X86_64_64  _JIT_CONTINUE
// 36f: 4c 89 f7                      movq    %r14, %rdi
// 372: 48 89 de                      movq    %rbx, %rsi
// 375: 4c 89 fa                      movq    %r15, %rdx
// 378: 48 83 c4 08                   addq    $0x8, %rsp
// 37c: 5b                            popq    %rbx
// 37d: 41 5c                         popq    %r12
// 37f: 41 5d                         popq    %r13
// 381: 41 5e                         popq    %r14
// 383: 41 5f                         popq    %r15
// 385: 5d                            popq    %rbp
// 386: ff e0                         jmpq    *%rax
// 388: 49 8b 45 00                   movq    (%r13), %rax
// 38c: 48 85 c0                      testq   %rax, %rax
// 38f: 7f 22                         jg      0x3b3 <_JIT_ENTRY+0x3b3>
// 391: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000393:  R_X86_64_64  .rodata.str1.1
// 39b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039d:  R_X86_64_64  _Py_NegativeRefcount
// 3a5: be 18 09 00 00                movl    $0x918, %esi            # imm = 0x918
// 3aa: 4c 89 ea                      movq    %r13, %rdx
// 3ad: ff d0                         callq   *%rax
// 3af: 49 8b 45 00                   movq    (%r13), %rax
// 3b3: 48 83 c3 f8                   addq    $-0x8, %rbx
// 3b7: 85 c0                         testl   %eax, %eax
// 3b9: 78 21                         js      0x3dc <_JIT_ENTRY+0x3dc>
// 3bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3c5: ff d0                         callq   *%rax
// 3c7: 49 ff 4d 00                   decq    (%r13)
// 3cb: 75 0f                         jne     0x3dc <_JIT_ENTRY+0x3dc>
// 3cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003cf:  R_X86_64_64  _Py_Dealloc
// 3d7: 4c 89 ef                      movq    %r13, %rdi
// 3da: ff d0                         callq   *%rax
// 3dc: 4c 29 f3                      subq    %r14, %rbx
// 3df: 48 83 c3 b8                   addq    $-0x48, %rbx
// 3e3: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3e7: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 3eb: 31 c0                         xorl    %eax, %eax
// 3ed: 48 83 c4 08                   addq    $0x8, %rsp
// 3f1: 5b                            popq    %rbx
// 3f2: 41 5c                         popq    %r12
// 3f4: 41 5d                         popq    %r13
// 3f6: 41 5e                         popq    %r14
// 3f8: 41 5f                         popq    %r15
// 3fa: 5d                            popq    %rbp
// 3fb: c3                            retq
// 3fc: 
static const unsigned char _DELETE_DEREFplus_BEFORE_ASYNC_WITH_code_body[1021] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1e, 0x4c, 0x89, 0x34, 0x24, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2d, 0x4d, 0x89, 0xfe, 0x85, 0xc0, 0x79, 0x4f, 0xeb, 0x6e, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x6b, 0x03, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x89, 0xfe, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x6b, 0xf8, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb5, 0x68, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0x41, 0xff, 0xd7, 0x48, 0x85, 0xc0, 0x74, 0x35, 0x49, 0x89, 0xc4, 0x49, 0x81, 0xc5, 0xa0, 0xa6, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x41, 0xff, 0xd7, 0x48, 0x85, 0xc0, 0x74, 0x36, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xca, 0x00, 0x00, 0x00, 0xe9, 0xaf, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x46, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x46, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x3f, 0x4c, 0x8b, 0x34, 0x24, 0xe9, 0xa9, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x46, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x84, 0xe2, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x34, 0x24, 0x0f, 0x8e, 0x13, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x35, 0x01, 0x00, 0x00, 0xe9, 0x73, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x34, 0x24, 0xe9, 0x39, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xe2, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x4d, 0x89, 0xf7, 0x0f, 0x84, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x04, 0x04, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xe0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0xe9, 0xd1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x34, 0x24, 0x0f, 0x8f, 0xed, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x43, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x2d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xe9, 0x19, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x4d, 0x89, 0xf7, 0x0f, 0x85, 0x0f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x4c, 0x8b, 0x34, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x2e, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0x89, 0x2b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_BEFORE_ASYNC_WITH_code_holes[35] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x84},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x336, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x348, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x367, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x393, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x39d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the asynchronous context manager protocol\x00'%.200s' object does not support the asynchronous context manager protocol (missed __aexit__ method)\x00"
// e9: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_BEFORE_ASYNC_WITH_data_body[241] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x61, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BEFORE_ASYNC_WITH_data_holes[1];

// _DELETE_DEREFplus_BEFORE_WITH
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BEFORE_WITH.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 1e                         je      0x4d <_JIT_ENTRY+0x4d>
// 2f: 4c 89 34 24                   movq    %r14, (%rsp)
// 33: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3b: 49 8b 04 24                   movq    (%r12), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 2d                         jle     0x71 <_JIT_ENTRY+0x71>
// 44: 4d 89 fe                      movq    %r15, %r14
// 47: 85 c0                         testl   %eax, %eax
// 49: 79 4f                         jns     0x9a <_JIT_ENTRY+0x9a>
// 4b: eb 6e                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 4d: 49 8b 36                      movq    (%r14), %rsi
// 50: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000052:  R_X86_64_64  _JIT_OPARG
// 5a: 0f b7 d0                      movzwl  %ax, %edx
// 5d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005f:  R_X86_64_64  _PyEval_FormatExcUnbound
// 67: 4c 89 ff                      movq    %r15, %rdi
// 6a: ff d0                         callq   *%rax
// 6c: e9 6b 03 00 00                jmp     0x3dc <_JIT_ENTRY+0x3dc>
// 71: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000073:  R_X86_64_64  .rodata.str1.1
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _Py_NegativeRefcount
// 85: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8a: 4c 89 e2                      movq    %r12, %rdx
// 8d: ff d0                         callq   *%rax
// 8f: 49 8b 04 24                   movq    (%r12), %rax
// 93: 4d 89 fe                      movq    %r15, %r14
// 96: 85 c0                         testl   %eax, %eax
// 98: 78 21                         js      0xbb <_JIT_ENTRY+0xbb>
// 9a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a4: ff d0                         callq   *%rax
// a6: 49 ff 0c 24                   decq    (%r12)
// aa: 75 0f                         jne     0xbb <_JIT_ENTRY+0xbb>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_Dealloc
// b6: 4c 89 e7                      movq    %r12, %rdi
// b9: ff d0                         callq   *%rax
// bb: 48 8b 6b f8                   movq    -0x8(%rbx), %rbp
// bf: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000c1:  R_X86_64_64  _PyObject_LookupSpecial
// c9: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000cb:  R_X86_64_64  _PyRuntime
// d3: 49 8d b5 50 ae 00 00          leaq    0xae50(%r13), %rsi
// da: 48 89 ef                      movq    %rbp, %rdi
// dd: 41 ff d7                      callq   *%r15
// e0: 48 85 c0                      testq   %rax, %rax
// e3: 74 35                         je      0x11a <_JIT_ENTRY+0x11a>
// e5: 49 89 c4                      movq    %rax, %r12
// e8: 49 81 c5 b8 ae 00 00          addq    $0xaeb8, %r13           # imm = 0xAEB8
// ef: 48 89 ef                      movq    %rbp, %rdi
// f2: 4c 89 ee                      movq    %r13, %rsi
// f5: 41 ff d7                      callq   *%r15
// f8: 48 85 c0                      testq   %rax, %rax
// fb: 74 36                         je      0x133 <_JIT_ENTRY+0x133>
// fd: 49 89 c5                      movq    %rax, %r13
// 100: 48 8b 45 00                   movq    (%rbp), %rax
// 104: 48 85 c0                      testq   %rax, %rax
// 107: 0f 8e 96 00 00 00             jle     0x1a3 <_JIT_ENTRY+0x1a3>
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 0f 88 ca 00 00 00             js      0x1df <_JIT_ENTRY+0x1df>
// 115: e9 af 00 00 00                jmp     0x1c9 <_JIT_ENTRY+0x1c9>
// 11a: 49 8b 46 68                   movq    0x68(%r14), %rax
// 11e: 48 85 c0                      testq   %rax, %rax
// 121: 74 46                         je      0x169 <_JIT_ENTRY+0x169>
// 123: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 128: 74 3f                         je      0x169 <_JIT_ENTRY+0x169>
// 12a: 4c 8b 34 24                   movq    (%rsp), %r14
// 12e: e9 a9 02 00 00                jmp     0x3dc <_JIT_ENTRY+0x3dc>
// 133: 49 8b 46 68                   movq    0x68(%r14), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 0f 84 ed 00 00 00             je      0x22d <_JIT_ENTRY+0x22d>
// 140: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 145: 0f 84 e2 00 00 00             je      0x22d <_JIT_ENTRY+0x22d>
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 4c 8b 34 24                   movq    (%rsp), %r14
// 156: 0f 8e 13 01 00 00             jle     0x26f <_JIT_ENTRY+0x26f>
// 15c: 85 c0                         testl   %eax, %eax
// 15e: 0f 89 35 01 00 00             jns     0x299 <_JIT_ENTRY+0x299>
// 164: e9 73 02 00 00                jmp     0x3dc <_JIT_ENTRY+0x3dc>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  PyExc_TypeError
// 173: 48 8b 30                      movq    (%rax), %rsi
// 176: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 17a: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 17e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000180:  R_X86_64_64  .rodata.str1.1+0x39
// 188: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000018a:  R_X86_64_64  _PyErr_Format
// 192: 4c 89 f7                      movq    %r14, %rdi
// 195: 31 c0                         xorl    %eax, %eax
// 197: 41 ff d0                      callq   *%r8
// 19a: 4c 8b 34 24                   movq    (%rsp), %r14
// 19e: e9 39 02 00 00                jmp     0x3dc <_JIT_ENTRY+0x3dc>
// 1a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a5:  R_X86_64_64  .rodata.str1.1
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  _Py_NegativeRefcount
// 1b7: be 3f 09 00 00                movl    $0x93f, %esi            # imm = 0x93F
// 1bc: 48 89 ea                      movq    %rbp, %rdx
// 1bf: ff d0                         callq   *%rax
// 1c1: 48 8b 45 00                   movq    (%rbp), %rax
// 1c5: 85 c0                         testl   %eax, %eax
// 1c7: 78 16                         js      0x1df <_JIT_ENTRY+0x1df>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d3: ff d0                         callq   *%rax
// 1d5: 48 ff 4d 00                   decq    (%rbp)
// 1d9: 0f 84 e2 00 00 00             je      0x2c1 <_JIT_ENTRY+0x2c1>
// 1df: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 1e4: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 1eb: 4d 89 f7                      movq    %r14, %r15
// 1ee: 0f 84 f1 00 00 00             je      0x2e5 <_JIT_ENTRY+0x2e5>
// 1f4: 48 8b 40 38                   movq    0x38(%rax), %rax
// 1f8: 49 8b 04 04                   movq    (%r12,%rax), %rax
// 1fc: 48 85 c0                      testq   %rax, %rax
// 1ff: 0f 84 e0 00 00 00             je      0x2e5 <_JIT_ENTRY+0x2e5>
// 205: 4c 89 e7                      movq    %r12, %rdi
// 208: 31 f6                         xorl    %esi, %esi
// 20a: 31 d2                         xorl    %edx, %edx
// 20c: 31 c9                         xorl    %ecx, %ecx
// 20e: ff d0                         callq   *%rax
// 210: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000212:  R_X86_64_64  _Py_CheckFunctionResult
// 21a: 4c 89 ff                      movq    %r15, %rdi
// 21d: 4c 89 e6                      movq    %r12, %rsi
// 220: 48 89 c2                      movq    %rax, %rdx
// 223: 31 c9                         xorl    %ecx, %ecx
// 225: 41 ff d0                      callq   *%r8
// 228: e9 d1 00 00 00                jmp     0x2fe <_JIT_ENTRY+0x2fe>
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  PyExc_TypeError
// 237: 48 8b 30                      movq    (%rax), %rsi
// 23a: 48 8b 45 08                   movq    0x8(%rbp), %rax
// 23e: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 242: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000244:  R_X86_64_64  .rodata.str1.1+0x77
// 24c: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000024e:  R_X86_64_64  _PyErr_Format
// 256: 4c 89 f7                      movq    %r14, %rdi
// 259: 31 c0                         xorl    %eax, %eax
// 25b: 41 ff d0                      callq   *%r8
// 25e: 49 8b 04 24                   movq    (%r12), %rax
// 262: 48 85 c0                      testq   %rax, %rax
// 265: 4c 8b 34 24                   movq    (%rsp), %r14
// 269: 0f 8f ed fe ff ff             jg      0x15c <_JIT_ENTRY+0x15c>
// 26f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000271:  R_X86_64_64  .rodata.str1.1
// 279: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000027b:  R_X86_64_64  _Py_NegativeRefcount
// 283: be 3c 09 00 00                movl    $0x93c, %esi            # imm = 0x93C
// 288: 4c 89 e2                      movq    %r12, %rdx
// 28b: ff d0                         callq   *%rax
// 28d: 49 8b 04 24                   movq    (%r12), %rax
// 291: 85 c0                         testl   %eax, %eax
// 293: 0f 88 43 01 00 00             js      0x3dc <_JIT_ENTRY+0x3dc>
// 299: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000029b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a3: ff d0                         callq   *%rax
// 2a5: 49 ff 0c 24                   decq    (%r12)
// 2a9: 0f 85 2d 01 00 00             jne     0x3dc <_JIT_ENTRY+0x3dc>
// 2af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b1:  R_X86_64_64  _Py_Dealloc
// 2b9: 4c 89 e7                      movq    %r12, %rdi
// 2bc: e9 19 01 00 00                jmp     0x3da <_JIT_ENTRY+0x3da>
// 2c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c3:  R_X86_64_64  _Py_Dealloc
// 2cb: 48 89 ef                      movq    %rbp, %rdi
// 2ce: ff d0                         callq   *%rax
// 2d0: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 2d5: f6 80 a9 00 00 00 08          testb   $0x8, 0xa9(%rax)
// 2dc: 4d 89 f7                      movq    %r14, %r15
// 2df: 0f 85 0f ff ff ff             jne     0x1f4 <_JIT_ENTRY+0x1f4>
// 2e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e7:  R_X86_64_64  _PyObject_MakeTpCall
// 2ef: 4c 89 ff                      movq    %r15, %rdi
// 2f2: 4c 89 e6                      movq    %r12, %rsi
// 2f5: 31 d2                         xorl    %edx, %edx
// 2f7: 31 c9                         xorl    %ecx, %ecx
// 2f9: 45 31 c0                      xorl    %r8d, %r8d
// 2fc: ff d0                         callq   *%rax
// 2fe: 48 89 c5                      movq    %rax, %rbp
// 301: 4c 8b 34 24                   movq    (%rsp), %r14
// 305: 49 8b 04 24                   movq    (%r12), %rax
// 309: 48 85 c0                      testq   %rax, %rax
// 30c: 7f 22                         jg      0x330 <_JIT_ENTRY+0x330>
// 30e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000310:  R_X86_64_64  .rodata.str1.1
// 318: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031a:  R_X86_64_64  _Py_NegativeRefcount
// 322: be 41 09 00 00                movl    $0x941, %esi            # imm = 0x941
// 327: 4c 89 e2                      movq    %r12, %rdx
// 32a: ff d0                         callq   *%rax
// 32c: 49 8b 04 24                   movq    (%r12), %rax
// 330: 85 c0                         testl   %eax, %eax
// 332: 78 21                         js      0x355 <_JIT_ENTRY+0x355>
// 334: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000336:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 33e: ff d0                         callq   *%rax
// 340: 49 ff 0c 24                   decq    (%r12)
// 344: 75 0f                         jne     0x355 <_JIT_ENTRY+0x355>
// 346: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000348:  R_X86_64_64  _Py_Dealloc
// 350: 4c 89 e7                      movq    %r12, %rdi
// 353: ff d0                         callq   *%rax
// 355: 48 85 ed                      testq   %rbp, %rbp
// 358: 74 2e                         je      0x388 <_JIT_ENTRY+0x388>
// 35a: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 35e: 48 89 2b                      movq    %rbp, (%rbx)
// 361: 48 83 c3 08                   addq    $0x8, %rbx
// 365: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000367:  R_X86_64_64  _JIT_CONTINUE
// 36f: 4c 89 f7                      movq    %r14, %rdi
// 372: 48 89 de                      movq    %rbx, %rsi
// 375: 4c 89 fa                      movq    %r15, %rdx
// 378: 48 83 c4 08                   addq    $0x8, %rsp
// 37c: 5b                            popq    %rbx
// 37d: 41 5c                         popq    %r12
// 37f: 41 5d                         popq    %r13
// 381: 41 5e                         popq    %r14
// 383: 41 5f                         popq    %r15
// 385: 5d                            popq    %rbp
// 386: ff e0                         jmpq    *%rax
// 388: 49 8b 45 00                   movq    (%r13), %rax
// 38c: 48 85 c0                      testq   %rax, %rax
// 38f: 7f 22                         jg      0x3b3 <_JIT_ENTRY+0x3b3>
// 391: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000393:  R_X86_64_64  .rodata.str1.1
// 39b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000039d:  R_X86_64_64  _Py_NegativeRefcount
// 3a5: be 43 09 00 00                movl    $0x943, %esi            # imm = 0x943
// 3aa: 4c 89 ea                      movq    %r13, %rdx
// 3ad: ff d0                         callq   *%rax
// 3af: 49 8b 45 00                   movq    (%r13), %rax
// 3b3: 48 83 c3 f8                   addq    $-0x8, %rbx
// 3b7: 85 c0                         testl   %eax, %eax
// 3b9: 78 21                         js      0x3dc <_JIT_ENTRY+0x3dc>
// 3bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003bd:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 3c5: ff d0                         callq   *%rax
// 3c7: 49 ff 4d 00                   decq    (%r13)
// 3cb: 75 0f                         jne     0x3dc <_JIT_ENTRY+0x3dc>
// 3cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000003cf:  R_X86_64_64  _Py_Dealloc
// 3d7: 4c 89 ef                      movq    %r13, %rdi
// 3da: ff d0                         callq   *%rax
// 3dc: 4c 29 f3                      subq    %r14, %rbx
// 3df: 48 83 c3 b8                   addq    $-0x48, %rbx
// 3e3: 48 c1 eb 03                   shrq    $0x3, %rbx
// 3e7: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 3eb: 31 c0                         xorl    %eax, %eax
// 3ed: 48 83 c4 08                   addq    $0x8, %rsp
// 3f1: 5b                            popq    %rbx
// 3f2: 41 5c                         popq    %r12
// 3f4: 41 5d                         popq    %r13
// 3f6: 41 5e                         popq    %r14
// 3f8: 41 5f                         popq    %r15
// 3fa: 5d                            popq    %rbp
// 3fb: c3                            retq
// 3fc: 
static const unsigned char _DELETE_DEREFplus_BEFORE_WITH_code_body[1021] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1e, 0x4c, 0x89, 0x34, 0x24, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2d, 0x4d, 0x89, 0xfe, 0x85, 0xc0, 0x79, 0x4f, 0xeb, 0x6e, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x6b, 0x03, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x89, 0xfe, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x6b, 0xf8, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb5, 0x50, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0x41, 0xff, 0xd7, 0x48, 0x85, 0xc0, 0x74, 0x35, 0x49, 0x89, 0xc4, 0x49, 0x81, 0xc5, 0xb8, 0xae, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0x41, 0xff, 0xd7, 0x48, 0x85, 0xc0, 0x74, 0x36, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x96, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xca, 0x00, 0x00, 0x00, 0xe9, 0xaf, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x46, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x46, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x3f, 0x4c, 0x8b, 0x34, 0x24, 0xe9, 0xa9, 0x02, 0x00, 0x00, 0x49, 0x8b, 0x46, 0x68, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x84, 0xe2, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x34, 0x24, 0x0f, 0x8e, 0x13, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x35, 0x01, 0x00, 0x00, 0xe9, 0x73, 0x02, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x4c, 0x8b, 0x34, 0x24, 0xe9, 0x39, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3f, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xe2, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x4d, 0x89, 0xf7, 0x0f, 0x84, 0xf1, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x38, 0x49, 0x8b, 0x04, 0x04, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xe0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0x31, 0xd2, 0x31, 0xc9, 0xff, 0xd0, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc2, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0xe9, 0xd1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x4c, 0x8b, 0x34, 0x24, 0x0f, 0x8f, 0xed, 0xfe, 0xff, 0xff, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3c, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x43, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x2d, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xe9, 0x19, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x44, 0x24, 0x08, 0xf6, 0x80, 0xa9, 0x00, 0x00, 0x00, 0x08, 0x4d, 0x89, 0xf7, 0x0f, 0x85, 0x0f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x31, 0xd2, 0x31, 0xc9, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x48, 0x89, 0xc5, 0x4c, 0x8b, 0x34, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x41, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x74, 0x2e, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0x89, 0x2b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_BEFORE_WITH_code_holes[35] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x52, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_LookupSpecial, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x180, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckFunctionResult, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x77},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x271, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x29b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeTpCall, 0x0},
    {0x310, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x31a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x336, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x348, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x367, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x393, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x39d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x3bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x3cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object does not support the context manager protocol\x00'%.200s' object does not support the context manager protocol (missed __exit__ method)\x00"
// ce: 00 00
static const unsigned char _DELETE_DEREFplus_BEFORE_WITH_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x5f, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x29, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BEFORE_WITH_data_holes[1];

// _DELETE_DEREFplus_BINARY_OP
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BINARY_OP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 2a                         jle     0x6a <_JIT_ENTRY+0x6a>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 4c                         jns     0x90 <_JIT_ENTRY+0x90>
// 44: eb 6b                         jmp     0xb1 <_JIT_ENTRY+0xb1>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: e9 66 01 00 00                jmp     0x1d0 <_JIT_ENTRY+0x1d0>
// 6a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006c:  R_X86_64_64  .rodata.str1.1
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _Py_NegativeRefcount
// 7e: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 83: 4c 89 e2                      movq    %r12, %rdx
// 86: ff d0                         callq   *%rax
// 88: 49 8b 04 24                   movq    (%r12), %rax
// 8c: 85 c0                         testl   %eax, %eax
// 8e: 78 21                         js      0xb1 <_JIT_ENTRY+0xb1>
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9a: ff d0                         callq   *%rax
// 9c: 49 ff 0c 24                   decq    (%r12)
// a0: 75 0f                         jne     0xb1 <_JIT_ENTRY+0xb1>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_Dealloc
// ac: 4c 89 e7                      movq    %r12, %rdi
// af: ff d0                         callq   *%rax
// b1: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// b5: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  _JIT_OPARG
// c3: 0f b7 c0                      movzwl  %ax, %eax
// c6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c8:  R_X86_64_64  _PyEval_BinaryOps
// d0: 48 89 ef                      movq    %rbp, %rdi
// d3: 4c 89 e6                      movq    %r12, %rsi
// d6: ff 14 c1                      callq   *(%rcx,%rax,8)
// d9: 49 89 c5                      movq    %rax, %r13
// dc: 48 8b 45 00                   movq    (%rbp), %rax
// e0: 48 85 c0                      testq   %rax, %rax
// e3: 7e 06                         jle     0xeb <_JIT_ENTRY+0xeb>
// e5: 85 c0                         testl   %eax, %eax
// e7: 79 28                         jns     0x111 <_JIT_ENTRY+0x111>
// e9: eb 38                         jmp     0x123 <_JIT_ENTRY+0x123>
// eb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ed:  R_X86_64_64  .rodata.str1.1
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_NegativeRefcount
// ff: be d4 0c 00 00                movl    $0xcd4, %esi            # imm = 0xCD4
// 104: 48 89 ea                      movq    %rbp, %rdx
// 107: ff d0                         callq   *%rax
// 109: 48 8b 45 00                   movq    (%rbp), %rax
// 10d: 85 c0                         testl   %eax, %eax
// 10f: 78 12                         js      0x123 <_JIT_ENTRY+0x123>
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 48 ff 4d 00                   decq    (%rbp)
// 121: 74 0f                         je      0x132 <_JIT_ENTRY+0x132>
// 123: 49 8b 04 24                   movq    (%r12), %rax
// 127: 48 85 c0                      testq   %rax, %rax
// 12a: 7e 1e                         jle     0x14a <_JIT_ENTRY+0x14a>
// 12c: 85 c0                         testl   %eax, %eax
// 12e: 79 40                         jns     0x170 <_JIT_ENTRY+0x170>
// 130: eb 50                         jmp     0x182 <_JIT_ENTRY+0x182>
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _Py_Dealloc
// 13c: 48 89 ef                      movq    %rbp, %rdi
// 13f: ff d0                         callq   *%rax
// 141: 49 8b 04 24                   movq    (%r12), %rax
// 145: 48 85 c0                      testq   %rax, %rax
// 148: 7f e2                         jg      0x12c <_JIT_ENTRY+0x12c>
// 14a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014c:  R_X86_64_64  .rodata.str1.1
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _Py_NegativeRefcount
// 15e: be d5 0c 00 00                movl    $0xcd5, %esi            # imm = 0xCD5
// 163: 4c 89 e2                      movq    %r12, %rdx
// 166: ff d0                         callq   *%rax
// 168: 49 8b 04 24                   movq    (%r12), %rax
// 16c: 85 c0                         testl   %eax, %eax
// 16e: 78 12                         js      0x182 <_JIT_ENTRY+0x182>
// 170: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000172:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17a: ff d0                         callq   *%rax
// 17c: 49 ff 0c 24                   decq    (%r12)
// 180: 74 33                         je      0x1b5 <_JIT_ENTRY+0x1b5>
// 182: 48 8d 43 f0                   leaq    -0x10(%rbx), %rax
// 186: 4d 85 ed                      testq   %r13, %r13
// 189: 74 42                         je      0x1cd <_JIT_ENTRY+0x1cd>
// 18b: 48 83 c3 f8                   addq    $-0x8, %rbx
// 18f: 4c 89 28                      movq    %r13, (%rax)
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _JIT_CONTINUE
// 19c: 4c 89 f7                      movq    %r14, %rdi
// 19f: 48 89 de                      movq    %rbx, %rsi
// 1a2: 4c 89 fa                      movq    %r15, %rdx
// 1a5: 48 83 c4 08                   addq    $0x8, %rsp
// 1a9: 5b                            popq    %rbx
// 1aa: 41 5c                         popq    %r12
// 1ac: 41 5d                         popq    %r13
// 1ae: 41 5e                         popq    %r14
// 1b0: 41 5f                         popq    %r15
// 1b2: 5d                            popq    %rbp
// 1b3: ff e0                         jmpq    *%rax
// 1b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b7:  R_X86_64_64  _Py_Dealloc
// 1bf: 4c 89 e7                      movq    %r12, %rdi
// 1c2: ff d0                         callq   *%rax
// 1c4: 48 8d 43 f0                   leaq    -0x10(%rbx), %rax
// 1c8: 4d 85 ed                      testq   %r13, %r13
// 1cb: 75 be                         jne     0x18b <_JIT_ENTRY+0x18b>
// 1cd: 48 89 c3                      movq    %rax, %rbx
// 1d0: 4c 29 f3                      subq    %r14, %rbx
// 1d3: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1d7: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1db: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1df: 31 c0                         xorl    %eax, %eax
// 1e1: 48 83 c4 08                   addq    $0x8, %rsp
// 1e5: 5b                            popq    %rbx
// 1e6: 41 5c                         popq    %r12
// 1e8: 41 5d                         popq    %r13
// 1ea: 41 5e                         popq    %r14
// 1ec: 41 5f                         popq    %r15
// 1ee: 5d                            popq    %rbp
// 1ef: c3                            retq
// 1f0: 
static const unsigned char _DELETE_DEREFplus_BINARY_OP_code_body[497] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x66, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0x14, 0xc1, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd4, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd5, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x33, 0x48, 0x8d, 0x43, 0xf0, 0x4d, 0x85, 0xed, 0x74, 0x42, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8d, 0x43, 0xf0, 0x4d, 0x85, 0xed, 0x75, 0xbe, 0x48, 0x89, 0xc3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_BINARY_OP_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_BinaryOps, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x172, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_BINARY_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BINARY_OP_data_holes[1];

// _DELETE_DEREFplus_BINARY_OP_ADD_FLOAT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BINARY_OP_ADD_FLOAT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 1a                         je      0x49 <_JIT_ENTRY+0x49>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 48                         jle     0x88 <_JIT_ENTRY+0x88>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 6a                         jns     0xae <_JIT_ENTRY+0xae>
// 44: e9 86 00 00 00                jmp     0xcf <_JIT_ENTRY+0xcf>
// 49: 49 8b 36                      movq    (%r14), %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 d0                      movzwl  %ax, %edx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _PyEval_FormatExcUnbound
// 63: 4c 89 ff                      movq    %r15, %rdi
// 66: ff d0                         callq   *%rax
// 68: 4c 29 f3                      subq    %r14, %rbx
// 6b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 73: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 77: 31 c0                         xorl    %eax, %eax
// 79: 48 83 c4 08                   addq    $0x8, %rsp
// 7d: 5b                            popq    %rbx
// 7e: 41 5c                         popq    %r12
// 80: 41 5d                         popq    %r13
// 82: 41 5e                         popq    %r14
// 84: 41 5f                         popq    %r15
// 86: 5d                            popq    %rbp
// 87: c3                            retq
// 88: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008a:  R_X86_64_64  .rodata.str1.1
// 92: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000094:  R_X86_64_64  _Py_NegativeRefcount
// 9c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// a1: 4c 89 e2                      movq    %r12, %rdx
// a4: ff d0                         callq   *%rax
// a6: 49 8b 04 24                   movq    (%r12), %rax
// aa: 85 c0                         testl   %eax, %eax
// ac: 78 21                         js      0xcf <_JIT_ENTRY+0xcf>
// ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b8: ff d0                         callq   *%rax
// ba: 49 ff 0c 24                   decq    (%r12)
// be: 75 0f                         jne     0xcf <_JIT_ENTRY+0xcf>
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: 4c 89 e7                      movq    %r12, %rdi
// cd: ff d0                         callq   *%rax
// cf: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// d3: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// d7: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// dc: f2 41 0f 58 44 24 10          addsd   0x10(%r12), %xmm0
// e3: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// e8: 75 3d                         jne     0x127 <_JIT_ENTRY+0x127>
// ea: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// ef: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// f5: 75 28                         jne     0x11f <_JIT_ENTRY+0x11f>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  PyInterpreterState_Get
// 101: ff d0                         callq   *%rax
// 103: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 10a: 49 ff 0c 24                   decq    (%r12)
// 10e: 75 0f                         jne     0x11f <_JIT_ENTRY+0x11f>
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _PyFloat_ExactDealloc
// 11a: 4c 89 e7                      movq    %r12, %rdi
// 11d: ff d0                         callq   *%rax
// 11f: 49 89 ec                      movq    %rbp, %r12
// 122: e9 d9 00 00 00                jmp     0x200 <_JIT_ENTRY+0x200>
// 127: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 12c: 75 3c                         jne     0x16a <_JIT_ENTRY+0x16a>
// 12e: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 135: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 139: 0f 85 c1 00 00 00             jne     0x200 <_JIT_ENTRY+0x200>
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  PyInterpreterState_Get
// 149: ff d0                         callq   *%rax
// 14b: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 152: 48 8b 45 00                   movq    (%rbp), %rax
// 156: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 15a: 48 89 4d 00                   movq    %rcx, (%rbp)
// 15e: 48 83 f8 01                   cmpq    $0x1, %rax
// 162: 0f 8f 98 00 00 00             jg      0x200 <_JIT_ENTRY+0x200>
// 168: eb 73                         jmp     0x1dd <_JIT_ENTRY+0x1dd>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  PyFloat_FromDouble
// 174: ff d0                         callq   *%rax
// 176: 48 85 c0                      testq   %rax, %rax
// 179: 0f 84 e9 fe ff ff             je      0x68 <_JIT_ENTRY+0x68>
// 17f: 49 89 c5                      movq    %rax, %r13
// 182: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 186: 75 25                         jne     0x1ad <_JIT_ENTRY+0x1ad>
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  PyInterpreterState_Get
// 192: ff d0                         callq   *%rax
// 194: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 19b: 48 8b 45 00                   movq    (%rbp), %rax
// 19f: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 1a3: 48 89 4d 00                   movq    %rcx, (%rbp)
// 1a7: 48 83 f8 01                   cmpq    $0x1, %rax
// 1ab: 7e 30                         jle     0x1dd <_JIT_ENTRY+0x1dd>
// 1ad: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1b3: 75 48                         jne     0x1fd <_JIT_ENTRY+0x1fd>
// 1b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b7:  R_X86_64_64  PyInterpreterState_Get
// 1bf: ff d0                         callq   *%rax
// 1c1: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1c8: 49 8b 04 24                   movq    (%r12), %rax
// 1cc: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 1d0: 49 89 0c 24                   movq    %rcx, (%r12)
// 1d4: 4d 89 ec                      movq    %r13, %r12
// 1d7: 48 83 f8 01                   cmpq    $0x1, %rax
// 1db: 7f 23                         jg      0x200 <_JIT_ENTRY+0x200>
// 1dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001df:  R_X86_64_64  .rodata.str1.1+0x39
// 1e7: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001e9:  R_X86_64_64  .rodata.str1.1+0x4f
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 1fb: ff d0                         callq   *%rax
// 1fd: 4d 89 ec                      movq    %r13, %r12
// 200: 4c 89 63 f0                   movq    %r12, -0x10(%rbx)
// 204: 48 83 c3 f8                   addq    $-0x8, %rbx
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _JIT_CONTINUE
// 212: 4c 89 f7                      movq    %r14, %rdi
// 215: 48 89 de                      movq    %rbx, %rsi
// 218: 4c 89 fa                      movq    %r15, %rdx
// 21b: 48 83 c4 08                   addq    $0x8, %rsp
// 21f: 5b                            popq    %rbx
// 220: 41 5c                         popq    %r12
// 222: 41 5d                         popq    %r13
// 224: 41 5e                         popq    %r14
// 226: 41 5f                         popq    %r15
// 228: 5d                            popq    %rbp
// 229: ff e0                         jmpq    *%rax
// 22b: 
static const unsigned char _DELETE_DEREFplus_BINARY_OP_ADD_FLOAT_code_body[556] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x48, 0x85, 0xc0, 0x79, 0x6a, 0xe9, 0x86, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x58, 0x44, 0x24, 0x10, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x3d, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xec, 0xe9, 0xd9, 0x00, 0x00, 0x00, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x3c, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xc1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0x98, 0x00, 0x00, 0x00, 0xeb, 0x73, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xe9, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xc5, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xec, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x23, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0x4c, 0x89, 0x63, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_BINARY_OP_ADD_FLOAT_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _DELETE_DEREFplus_BINARY_OP_ADD_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BINARY_OP_ADD_FLOAT_data_holes[1];

// _DELETE_DEREFplus_BINARY_OP_ADD_INT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BINARY_OP_ADD_INT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 d1                      movq    %rdx, %rcx
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 1b                         je      0x4a <_JIT_ENTRY+0x4a>
// 2f: 48 89 0c 24                   movq    %rcx, (%rsp)
// 33: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3b: 49 8b 04 24                   movq    (%r12), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 2a                         jle     0x6e <_JIT_ENTRY+0x6e>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 4c                         jns     0x94 <_JIT_ENTRY+0x94>
// 48: eb 6b                         jmp     0xb5 <_JIT_ENTRY+0xb5>
// 4a: 49 8b 36                      movq    (%r14), %rsi
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: 0f b7 d0                      movzwl  %ax, %edx
// 5a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005c:  R_X86_64_64  _PyEval_FormatExcUnbound
// 64: 48 89 cf                      movq    %rcx, %rdi
// 67: ff d0                         callq   *%rax
// 69: e9 f9 00 00 00                jmp     0x167 <_JIT_ENTRY+0x167>
// 6e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000070:  R_X86_64_64  .rodata.str1.1
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _Py_NegativeRefcount
// 82: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 87: 4c 89 e2                      movq    %r12, %rdx
// 8a: ff d0                         callq   *%rax
// 8c: 49 8b 04 24                   movq    (%r12), %rax
// 90: 85 c0                         testl   %eax, %eax
// 92: 78 21                         js      0xb5 <_JIT_ENTRY+0xb5>
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9e: ff d0                         callq   *%rax
// a0: 49 ff 0c 24                   decq    (%r12)
// a4: 75 0f                         jne     0xb5 <_JIT_ENTRY+0xb5>
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  _Py_Dealloc
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: ff d0                         callq   *%rax
// b5: 4c 8b 6b f0                   movq    -0x10(%rbx), %r13
// b9: 48 8b 6b f8                   movq    -0x8(%rbx), %rbp
// bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bf:  R_X86_64_64  _PyLong_Add
// c7: 4c 89 ef                      movq    %r13, %rdi
// ca: 48 89 ee                      movq    %rbp, %rsi
// cd: ff d0                         callq   *%rax
// cf: 49 89 c4                      movq    %rax, %r12
// d2: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// d6: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000d8:  R_X86_64_64  PyInterpreterState_Get
// e0: 75 10                         jne     0xf2 <_JIT_ENTRY+0xf2>
// e2: 41 ff d7                      callq   *%r15
// e5: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// ec: 48 ff 4d 00                   decq    (%rbp)
// f0: 74 28                         je      0x11a <_JIT_ENTRY+0x11a>
// f2: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// f7: 75 37                         jne     0x130 <_JIT_ENTRY+0x130>
// f9: 41 ff d7                      callq   *%r15
// fc: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 103: 49 ff 4d 00                   decq    (%r13)
// 107: 75 27                         jne     0x130 <_JIT_ENTRY+0x130>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  PyObject_Free
// 113: 4c 89 ef                      movq    %r13, %rdi
// 116: ff d0                         callq   *%rax
// 118: eb 16                         jmp     0x130 <_JIT_ENTRY+0x130>
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  PyObject_Free
// 124: 48 89 ef                      movq    %rbp, %rdi
// 127: ff d0                         callq   *%rax
// 129: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 12e: 74 c9                         je      0xf9 <_JIT_ENTRY+0xf9>
// 130: 48 8d 43 f0                   leaq    -0x10(%rbx), %rax
// 134: 4d 85 e4                      testq   %r12, %r12
// 137: 74 2b                         je      0x164 <_JIT_ENTRY+0x164>
// 139: 48 83 c3 f8                   addq    $-0x8, %rbx
// 13d: 4c 89 20                      movq    %r12, (%rax)
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _JIT_CONTINUE
// 14a: 4c 89 f7                      movq    %r14, %rdi
// 14d: 48 89 de                      movq    %rbx, %rsi
// 150: 48 8b 14 24                   movq    (%rsp), %rdx
// 154: 48 83 c4 08                   addq    $0x8, %rsp
// 158: 5b                            popq    %rbx
// 159: 41 5c                         popq    %r12
// 15b: 41 5d                         popq    %r13
// 15d: 41 5e                         popq    %r14
// 15f: 41 5f                         popq    %r15
// 161: 5d                            popq    %rbp
// 162: ff e0                         jmpq    *%rax
// 164: 48 89 c3                      movq    %rax, %rbx
// 167: 4c 29 f3                      subq    %r14, %rbx
// 16a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 16e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 172: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 176: 31 c0                         xorl    %eax, %eax
// 178: 48 83 c4 08                   addq    $0x8, %rsp
// 17c: 5b                            popq    %rbx
// 17d: 41 5c                         popq    %r12
// 17f: 41 5d                         popq    %r13
// 181: 41 5e                         popq    %r14
// 183: 41 5f                         popq    %r15
// 185: 5d                            popq    %rbp
// 186: c3                            retq
// 187: 
static const unsigned char _DELETE_DEREFplus_BINARY_OP_ADD_INT_code_body[392] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xd1, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1b, 0x48, 0x89, 0x0c, 0x24, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0xe9, 0xf9, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x6b, 0xf0, 0x48, 0x8b, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x10, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x28, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x37, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x74, 0xc9, 0x48, 0x8d, 0x43, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x2b, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x89, 0xc3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_BINARY_OP_ADD_INT_code_holes[13] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x70, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Add, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_BINARY_OP_ADD_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BINARY_OP_ADD_INT_data_holes[1];

// _DELETE_DEREFplus_BINARY_OP_ADD_UNICODE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BINARY_OP_ADD_UNICODE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 d1                      movq    %rdx, %rcx
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 1b                         je      0x4a <_JIT_ENTRY+0x4a>
// 2f: 48 89 0c 24                   movq    %rcx, (%rsp)
// 33: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3b: 49 8b 04 24                   movq    (%r12), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 2a                         jle     0x6e <_JIT_ENTRY+0x6e>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 4c                         jns     0x94 <_JIT_ENTRY+0x94>
// 48: eb 6b                         jmp     0xb5 <_JIT_ENTRY+0xb5>
// 4a: 49 8b 36                      movq    (%r14), %rsi
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: 0f b7 d0                      movzwl  %ax, %edx
// 5a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005c:  R_X86_64_64  _PyEval_FormatExcUnbound
// 64: 48 89 cf                      movq    %rcx, %rdi
// 67: ff d0                         callq   *%rax
// 69: e9 f9 00 00 00                jmp     0x167 <_JIT_ENTRY+0x167>
// 6e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000070:  R_X86_64_64  .rodata.str1.1
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _Py_NegativeRefcount
// 82: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 87: 4c 89 e2                      movq    %r12, %rdx
// 8a: ff d0                         callq   *%rax
// 8c: 49 8b 04 24                   movq    (%r12), %rax
// 90: 85 c0                         testl   %eax, %eax
// 92: 78 21                         js      0xb5 <_JIT_ENTRY+0xb5>
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9e: ff d0                         callq   *%rax
// a0: 49 ff 0c 24                   decq    (%r12)
// a4: 75 0f                         jne     0xb5 <_JIT_ENTRY+0xb5>
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  _Py_Dealloc
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: ff d0                         callq   *%rax
// b5: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// b9: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bf:  R_X86_64_64  PyUnicode_Concat
// c7: 48 89 ef                      movq    %rbp, %rdi
// ca: 4c 89 ee                      movq    %r13, %rsi
// cd: ff d0                         callq   *%rax
// cf: 49 89 c4                      movq    %rax, %r12
// d2: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// d6: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000d8:  R_X86_64_64  PyInterpreterState_Get
// e0: 75 10                         jne     0xf2 <_JIT_ENTRY+0xf2>
// e2: 41 ff d7                      callq   *%r15
// e5: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// ec: 48 ff 4d 00                   decq    (%rbp)
// f0: 74 28                         je      0x11a <_JIT_ENTRY+0x11a>
// f2: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// f7: 75 37                         jne     0x130 <_JIT_ENTRY+0x130>
// f9: 41 ff d7                      callq   *%r15
// fc: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 103: 49 ff 4d 00                   decq    (%r13)
// 107: 75 27                         jne     0x130 <_JIT_ENTRY+0x130>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _PyUnicode_ExactDealloc
// 113: 4c 89 ef                      movq    %r13, %rdi
// 116: ff d0                         callq   *%rax
// 118: eb 16                         jmp     0x130 <_JIT_ENTRY+0x130>
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  _PyUnicode_ExactDealloc
// 124: 48 89 ef                      movq    %rbp, %rdi
// 127: ff d0                         callq   *%rax
// 129: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 12e: 74 c9                         je      0xf9 <_JIT_ENTRY+0xf9>
// 130: 48 8d 43 f0                   leaq    -0x10(%rbx), %rax
// 134: 4d 85 e4                      testq   %r12, %r12
// 137: 74 2b                         je      0x164 <_JIT_ENTRY+0x164>
// 139: 48 83 c3 f8                   addq    $-0x8, %rbx
// 13d: 4c 89 20                      movq    %r12, (%rax)
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _JIT_CONTINUE
// 14a: 4c 89 f7                      movq    %r14, %rdi
// 14d: 48 89 de                      movq    %rbx, %rsi
// 150: 48 8b 14 24                   movq    (%rsp), %rdx
// 154: 48 83 c4 08                   addq    $0x8, %rsp
// 158: 5b                            popq    %rbx
// 159: 41 5c                         popq    %r12
// 15b: 41 5d                         popq    %r13
// 15d: 41 5e                         popq    %r14
// 15f: 41 5f                         popq    %r15
// 161: 5d                            popq    %rbp
// 162: ff e0                         jmpq    *%rax
// 164: 48 89 c3                      movq    %rax, %rbx
// 167: 4c 29 f3                      subq    %r14, %rbx
// 16a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 16e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 172: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 176: 31 c0                         xorl    %eax, %eax
// 178: 48 83 c4 08                   addq    $0x8, %rsp
// 17c: 5b                            popq    %rbx
// 17d: 41 5c                         popq    %r12
// 17f: 41 5d                         popq    %r13
// 181: 41 5e                         popq    %r14
// 183: 41 5f                         popq    %r15
// 185: 5d                            popq    %rbp
// 186: c3                            retq
// 187: 
static const unsigned char _DELETE_DEREFplus_BINARY_OP_ADD_UNICODE_code_body[392] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xd1, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1b, 0x48, 0x89, 0x0c, 0x24, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0xe9, 0xf9, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x10, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x28, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x37, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x74, 0xc9, 0x48, 0x8d, 0x43, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x2b, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x89, 0xc3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_BINARY_OP_ADD_UNICODE_code_holes[13] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x70, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Concat, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_BINARY_OP_ADD_UNICODE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BINARY_OP_ADD_UNICODE_data_holes[1];

// _DELETE_DEREFplus_BINARY_OP_MULTIPLY_FLOAT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BINARY_OP_MULTIPLY_FLOAT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 1a                         je      0x49 <_JIT_ENTRY+0x49>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 48                         jle     0x88 <_JIT_ENTRY+0x88>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 6a                         jns     0xae <_JIT_ENTRY+0xae>
// 44: e9 86 00 00 00                jmp     0xcf <_JIT_ENTRY+0xcf>
// 49: 49 8b 36                      movq    (%r14), %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 d0                      movzwl  %ax, %edx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _PyEval_FormatExcUnbound
// 63: 4c 89 ff                      movq    %r15, %rdi
// 66: ff d0                         callq   *%rax
// 68: 4c 29 f3                      subq    %r14, %rbx
// 6b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 73: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 77: 31 c0                         xorl    %eax, %eax
// 79: 48 83 c4 08                   addq    $0x8, %rsp
// 7d: 5b                            popq    %rbx
// 7e: 41 5c                         popq    %r12
// 80: 41 5d                         popq    %r13
// 82: 41 5e                         popq    %r14
// 84: 41 5f                         popq    %r15
// 86: 5d                            popq    %rbp
// 87: c3                            retq
// 88: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008a:  R_X86_64_64  .rodata.str1.1
// 92: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000094:  R_X86_64_64  _Py_NegativeRefcount
// 9c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// a1: 4c 89 e2                      movq    %r12, %rdx
// a4: ff d0                         callq   *%rax
// a6: 49 8b 04 24                   movq    (%r12), %rax
// aa: 85 c0                         testl   %eax, %eax
// ac: 78 21                         js      0xcf <_JIT_ENTRY+0xcf>
// ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b8: ff d0                         callq   *%rax
// ba: 49 ff 0c 24                   decq    (%r12)
// be: 75 0f                         jne     0xcf <_JIT_ENTRY+0xcf>
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: 4c 89 e7                      movq    %r12, %rdi
// cd: ff d0                         callq   *%rax
// cf: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// d3: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// d7: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// dc: f2 41 0f 59 44 24 10          mulsd   0x10(%r12), %xmm0
// e3: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// e8: 75 3d                         jne     0x127 <_JIT_ENTRY+0x127>
// ea: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// ef: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// f5: 75 28                         jne     0x11f <_JIT_ENTRY+0x11f>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  PyInterpreterState_Get
// 101: ff d0                         callq   *%rax
// 103: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 10a: 49 ff 0c 24                   decq    (%r12)
// 10e: 75 0f                         jne     0x11f <_JIT_ENTRY+0x11f>
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _PyFloat_ExactDealloc
// 11a: 4c 89 e7                      movq    %r12, %rdi
// 11d: ff d0                         callq   *%rax
// 11f: 49 89 ec                      movq    %rbp, %r12
// 122: e9 d9 00 00 00                jmp     0x200 <_JIT_ENTRY+0x200>
// 127: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 12c: 75 3c                         jne     0x16a <_JIT_ENTRY+0x16a>
// 12e: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 135: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 139: 0f 85 c1 00 00 00             jne     0x200 <_JIT_ENTRY+0x200>
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  PyInterpreterState_Get
// 149: ff d0                         callq   *%rax
// 14b: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 152: 48 8b 45 00                   movq    (%rbp), %rax
// 156: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 15a: 48 89 4d 00                   movq    %rcx, (%rbp)
// 15e: 48 83 f8 01                   cmpq    $0x1, %rax
// 162: 0f 8f 98 00 00 00             jg      0x200 <_JIT_ENTRY+0x200>
// 168: eb 73                         jmp     0x1dd <_JIT_ENTRY+0x1dd>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  PyFloat_FromDouble
// 174: ff d0                         callq   *%rax
// 176: 48 85 c0                      testq   %rax, %rax
// 179: 0f 84 e9 fe ff ff             je      0x68 <_JIT_ENTRY+0x68>
// 17f: 49 89 c5                      movq    %rax, %r13
// 182: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 186: 75 25                         jne     0x1ad <_JIT_ENTRY+0x1ad>
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  PyInterpreterState_Get
// 192: ff d0                         callq   *%rax
// 194: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 19b: 48 8b 45 00                   movq    (%rbp), %rax
// 19f: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 1a3: 48 89 4d 00                   movq    %rcx, (%rbp)
// 1a7: 48 83 f8 01                   cmpq    $0x1, %rax
// 1ab: 7e 30                         jle     0x1dd <_JIT_ENTRY+0x1dd>
// 1ad: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1b3: 75 48                         jne     0x1fd <_JIT_ENTRY+0x1fd>
// 1b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b7:  R_X86_64_64  PyInterpreterState_Get
// 1bf: ff d0                         callq   *%rax
// 1c1: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1c8: 49 8b 04 24                   movq    (%r12), %rax
// 1cc: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 1d0: 49 89 0c 24                   movq    %rcx, (%r12)
// 1d4: 4d 89 ec                      movq    %r13, %r12
// 1d7: 48 83 f8 01                   cmpq    $0x1, %rax
// 1db: 7f 23                         jg      0x200 <_JIT_ENTRY+0x200>
// 1dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001df:  R_X86_64_64  .rodata.str1.1+0x39
// 1e7: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001e9:  R_X86_64_64  .rodata.str1.1+0x4f
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 1fb: ff d0                         callq   *%rax
// 1fd: 4d 89 ec                      movq    %r13, %r12
// 200: 4c 89 63 f0                   movq    %r12, -0x10(%rbx)
// 204: 48 83 c3 f8                   addq    $-0x8, %rbx
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _JIT_CONTINUE
// 212: 4c 89 f7                      movq    %r14, %rdi
// 215: 48 89 de                      movq    %rbx, %rsi
// 218: 4c 89 fa                      movq    %r15, %rdx
// 21b: 48 83 c4 08                   addq    $0x8, %rsp
// 21f: 5b                            popq    %rbx
// 220: 41 5c                         popq    %r12
// 222: 41 5d                         popq    %r13
// 224: 41 5e                         popq    %r14
// 226: 41 5f                         popq    %r15
// 228: 5d                            popq    %rbp
// 229: ff e0                         jmpq    *%rax
// 22b: 
static const unsigned char _DELETE_DEREFplus_BINARY_OP_MULTIPLY_FLOAT_code_body[556] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x48, 0x85, 0xc0, 0x79, 0x6a, 0xe9, 0x86, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x59, 0x44, 0x24, 0x10, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x3d, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xec, 0xe9, 0xd9, 0x00, 0x00, 0x00, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x3c, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xc1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0x98, 0x00, 0x00, 0x00, 0xeb, 0x73, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xe9, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xc5, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xec, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x23, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0x4c, 0x89, 0x63, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_BINARY_OP_MULTIPLY_FLOAT_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _DELETE_DEREFplus_BINARY_OP_MULTIPLY_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BINARY_OP_MULTIPLY_FLOAT_data_holes[1];

// _DELETE_DEREFplus_BINARY_OP_MULTIPLY_INT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BINARY_OP_MULTIPLY_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 d1                      movq    %rdx, %rcx
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 1b                         je      0x4a <_JIT_ENTRY+0x4a>
// 2f: 48 89 0c 24                   movq    %rcx, (%rsp)
// 33: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3b: 49 8b 04 24                   movq    (%r12), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 2a                         jle     0x6e <_JIT_ENTRY+0x6e>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 4c                         jns     0x94 <_JIT_ENTRY+0x94>
// 48: eb 6b                         jmp     0xb5 <_JIT_ENTRY+0xb5>
// 4a: 49 8b 36                      movq    (%r14), %rsi
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: 0f b7 d0                      movzwl  %ax, %edx
// 5a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005c:  R_X86_64_64  _PyEval_FormatExcUnbound
// 64: 48 89 cf                      movq    %rcx, %rdi
// 67: ff d0                         callq   *%rax
// 69: e9 f9 00 00 00                jmp     0x167 <_JIT_ENTRY+0x167>
// 6e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000070:  R_X86_64_64  .rodata.str1.1
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _Py_NegativeRefcount
// 82: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 87: 4c 89 e2                      movq    %r12, %rdx
// 8a: ff d0                         callq   *%rax
// 8c: 49 8b 04 24                   movq    (%r12), %rax
// 90: 85 c0                         testl   %eax, %eax
// 92: 78 21                         js      0xb5 <_JIT_ENTRY+0xb5>
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9e: ff d0                         callq   *%rax
// a0: 49 ff 0c 24                   decq    (%r12)
// a4: 75 0f                         jne     0xb5 <_JIT_ENTRY+0xb5>
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  _Py_Dealloc
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: ff d0                         callq   *%rax
// b5: 4c 8b 6b f0                   movq    -0x10(%rbx), %r13
// b9: 48 8b 6b f8                   movq    -0x8(%rbx), %rbp
// bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bf:  R_X86_64_64  _PyLong_Multiply
// c7: 4c 89 ef                      movq    %r13, %rdi
// ca: 48 89 ee                      movq    %rbp, %rsi
// cd: ff d0                         callq   *%rax
// cf: 49 89 c4                      movq    %rax, %r12
// d2: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// d6: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000d8:  R_X86_64_64  PyInterpreterState_Get
// e0: 75 10                         jne     0xf2 <_JIT_ENTRY+0xf2>
// e2: 41 ff d7                      callq   *%r15
// e5: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// ec: 48 ff 4d 00                   decq    (%rbp)
// f0: 74 28                         je      0x11a <_JIT_ENTRY+0x11a>
// f2: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// f7: 75 37                         jne     0x130 <_JIT_ENTRY+0x130>
// f9: 41 ff d7                      callq   *%r15
// fc: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 103: 49 ff 4d 00                   decq    (%r13)
// 107: 75 27                         jne     0x130 <_JIT_ENTRY+0x130>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  PyObject_Free
// 113: 4c 89 ef                      movq    %r13, %rdi
// 116: ff d0                         callq   *%rax
// 118: eb 16                         jmp     0x130 <_JIT_ENTRY+0x130>
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  PyObject_Free
// 124: 48 89 ef                      movq    %rbp, %rdi
// 127: ff d0                         callq   *%rax
// 129: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 12e: 74 c9                         je      0xf9 <_JIT_ENTRY+0xf9>
// 130: 48 8d 43 f0                   leaq    -0x10(%rbx), %rax
// 134: 4d 85 e4                      testq   %r12, %r12
// 137: 74 2b                         je      0x164 <_JIT_ENTRY+0x164>
// 139: 48 83 c3 f8                   addq    $-0x8, %rbx
// 13d: 4c 89 20                      movq    %r12, (%rax)
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _JIT_CONTINUE
// 14a: 4c 89 f7                      movq    %r14, %rdi
// 14d: 48 89 de                      movq    %rbx, %rsi
// 150: 48 8b 14 24                   movq    (%rsp), %rdx
// 154: 48 83 c4 08                   addq    $0x8, %rsp
// 158: 5b                            popq    %rbx
// 159: 41 5c                         popq    %r12
// 15b: 41 5d                         popq    %r13
// 15d: 41 5e                         popq    %r14
// 15f: 41 5f                         popq    %r15
// 161: 5d                            popq    %rbp
// 162: ff e0                         jmpq    *%rax
// 164: 48 89 c3                      movq    %rax, %rbx
// 167: 4c 29 f3                      subq    %r14, %rbx
// 16a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 16e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 172: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 176: 31 c0                         xorl    %eax, %eax
// 178: 48 83 c4 08                   addq    $0x8, %rsp
// 17c: 5b                            popq    %rbx
// 17d: 41 5c                         popq    %r12
// 17f: 41 5d                         popq    %r13
// 181: 41 5e                         popq    %r14
// 183: 41 5f                         popq    %r15
// 185: 5d                            popq    %rbp
// 186: c3                            retq
// 187: 
static const unsigned char _DELETE_DEREFplus_BINARY_OP_MULTIPLY_INT_code_body[392] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xd1, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1b, 0x48, 0x89, 0x0c, 0x24, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0xe9, 0xf9, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x6b, 0xf0, 0x48, 0x8b, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x10, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x28, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x37, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x74, 0xc9, 0x48, 0x8d, 0x43, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x2b, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x89, 0xc3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_BINARY_OP_MULTIPLY_INT_code_holes[13] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x70, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Multiply, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_BINARY_OP_MULTIPLY_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BINARY_OP_MULTIPLY_INT_data_holes[1];

// _DELETE_DEREFplus_BINARY_OP_SUBTRACT_FLOAT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BINARY_OP_SUBTRACT_FLOAT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 1a                         je      0x49 <_JIT_ENTRY+0x49>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 48                         jle     0x88 <_JIT_ENTRY+0x88>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 6a                         jns     0xae <_JIT_ENTRY+0xae>
// 44: e9 86 00 00 00                jmp     0xcf <_JIT_ENTRY+0xcf>
// 49: 49 8b 36                      movq    (%r14), %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 d0                      movzwl  %ax, %edx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _PyEval_FormatExcUnbound
// 63: 4c 89 ff                      movq    %r15, %rdi
// 66: ff d0                         callq   *%rax
// 68: 4c 29 f3                      subq    %r14, %rbx
// 6b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 73: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 77: 31 c0                         xorl    %eax, %eax
// 79: 48 83 c4 08                   addq    $0x8, %rsp
// 7d: 5b                            popq    %rbx
// 7e: 41 5c                         popq    %r12
// 80: 41 5d                         popq    %r13
// 82: 41 5e                         popq    %r14
// 84: 41 5f                         popq    %r15
// 86: 5d                            popq    %rbp
// 87: c3                            retq
// 88: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008a:  R_X86_64_64  .rodata.str1.1
// 92: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000094:  R_X86_64_64  _Py_NegativeRefcount
// 9c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// a1: 4c 89 e2                      movq    %r12, %rdx
// a4: ff d0                         callq   *%rax
// a6: 49 8b 04 24                   movq    (%r12), %rax
// aa: 85 c0                         testl   %eax, %eax
// ac: 78 21                         js      0xcf <_JIT_ENTRY+0xcf>
// ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b8: ff d0                         callq   *%rax
// ba: 49 ff 0c 24                   decq    (%r12)
// be: 75 0f                         jne     0xcf <_JIT_ENTRY+0xcf>
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: 4c 89 e7                      movq    %r12, %rdi
// cd: ff d0                         callq   *%rax
// cf: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// d3: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// d7: f2 0f 10 45 10                movsd   0x10(%rbp), %xmm0       # xmm0 = mem[0],zero
// dc: f2 41 0f 5c 44 24 10          subsd   0x10(%r12), %xmm0
// e3: 48 83 7d 00 01                cmpq    $0x1, (%rbp)
// e8: 75 3d                         jne     0x127 <_JIT_ENTRY+0x127>
// ea: f2 0f 11 45 10                movsd   %xmm0, 0x10(%rbp)
// ef: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// f5: 75 28                         jne     0x11f <_JIT_ENTRY+0x11f>
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  PyInterpreterState_Get
// 101: ff d0                         callq   *%rax
// 103: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 10a: 49 ff 0c 24                   decq    (%r12)
// 10e: 75 0f                         jne     0x11f <_JIT_ENTRY+0x11f>
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _PyFloat_ExactDealloc
// 11a: 4c 89 e7                      movq    %r12, %rdi
// 11d: ff d0                         callq   *%rax
// 11f: 49 89 ec                      movq    %rbp, %r12
// 122: e9 d9 00 00 00                jmp     0x200 <_JIT_ENTRY+0x200>
// 127: 49 83 3c 24 01                cmpq    $0x1, (%r12)
// 12c: 75 3c                         jne     0x16a <_JIT_ENTRY+0x16a>
// 12e: f2 41 0f 11 44 24 10          movsd   %xmm0, 0x10(%r12)
// 135: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 139: 0f 85 c1 00 00 00             jne     0x200 <_JIT_ENTRY+0x200>
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  PyInterpreterState_Get
// 149: ff d0                         callq   *%rax
// 14b: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 152: 48 8b 45 00                   movq    (%rbp), %rax
// 156: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 15a: 48 89 4d 00                   movq    %rcx, (%rbp)
// 15e: 48 83 f8 01                   cmpq    $0x1, %rax
// 162: 0f 8f 98 00 00 00             jg      0x200 <_JIT_ENTRY+0x200>
// 168: eb 73                         jmp     0x1dd <_JIT_ENTRY+0x1dd>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  PyFloat_FromDouble
// 174: ff d0                         callq   *%rax
// 176: 48 85 c0                      testq   %rax, %rax
// 179: 0f 84 e9 fe ff ff             je      0x68 <_JIT_ENTRY+0x68>
// 17f: 49 89 c5                      movq    %rax, %r13
// 182: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// 186: 75 25                         jne     0x1ad <_JIT_ENTRY+0x1ad>
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  PyInterpreterState_Get
// 192: ff d0                         callq   *%rax
// 194: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 19b: 48 8b 45 00                   movq    (%rbp), %rax
// 19f: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 1a3: 48 89 4d 00                   movq    %rcx, (%rbp)
// 1a7: 48 83 f8 01                   cmpq    $0x1, %rax
// 1ab: 7e 30                         jle     0x1dd <_JIT_ENTRY+0x1dd>
// 1ad: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 1b3: 75 48                         jne     0x1fd <_JIT_ENTRY+0x1fd>
// 1b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b7:  R_X86_64_64  PyInterpreterState_Get
// 1bf: ff d0                         callq   *%rax
// 1c1: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 1c8: 49 8b 04 24                   movq    (%r12), %rax
// 1cc: 48 8d 48 ff                   leaq    -0x1(%rax), %rcx
// 1d0: 49 89 0c 24                   movq    %rcx, (%r12)
// 1d4: 4d 89 ec                      movq    %r13, %r12
// 1d7: 48 83 f8 01                   cmpq    $0x1, %rax
// 1db: 7f 23                         jg      0x200 <_JIT_ENTRY+0x200>
// 1dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001df:  R_X86_64_64  .rodata.str1.1+0x39
// 1e7: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001e9:  R_X86_64_64  .rodata.str1.1+0x4f
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  _Py_FatalRefcountErrorFunc
// 1fb: ff d0                         callq   *%rax
// 1fd: 4d 89 ec                      movq    %r13, %r12
// 200: 4c 89 63 f0                   movq    %r12, -0x10(%rbx)
// 204: 48 83 c3 f8                   addq    $-0x8, %rbx
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _JIT_CONTINUE
// 212: 4c 89 f7                      movq    %r14, %rdi
// 215: 48 89 de                      movq    %rbx, %rsi
// 218: 4c 89 fa                      movq    %r15, %rdx
// 21b: 48 83 c4 08                   addq    $0x8, %rsp
// 21f: 5b                            popq    %rbx
// 220: 41 5c                         popq    %r12
// 222: 41 5d                         popq    %r13
// 224: 41 5e                         popq    %r14
// 226: 41 5f                         popq    %r15
// 228: 5d                            popq    %rbp
// 229: ff e0                         jmpq    *%rax
// 22b: 
static const unsigned char _DELETE_DEREFplus_BINARY_OP_SUBTRACT_FLOAT_code_body[556] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x48, 0x85, 0xc0, 0x79, 0x6a, 0xe9, 0x86, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0xf2, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x41, 0x0f, 0x5c, 0x44, 0x24, 0x10, 0x48, 0x83, 0x7d, 0x00, 0x01, 0x75, 0x3d, 0xf2, 0x0f, 0x11, 0x45, 0x10, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xec, 0xe9, 0xd9, 0x00, 0x00, 0x00, 0x49, 0x83, 0x3c, 0x24, 0x01, 0x75, 0x3c, 0xf2, 0x41, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf6, 0x45, 0x03, 0x80, 0x0f, 0x85, 0xc1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x0f, 0x8f, 0x98, 0x00, 0x00, 0x00, 0xeb, 0x73, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xe9, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xc5, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x8d, 0x48, 0xff, 0x48, 0x89, 0x4d, 0x00, 0x48, 0x83, 0xf8, 0x01, 0x7e, 0x30, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x48, 0xff, 0x49, 0x89, 0x0c, 0x24, 0x4d, 0x89, 0xec, 0x48, 0x83, 0xf8, 0x01, 0x7f, 0x23, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0x4c, 0x89, 0x63, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_BINARY_OP_SUBTRACT_FLOAT_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_FromDouble, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1b7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x4f},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalRefcountErrorFunc, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_Py_DECREF_NO_DEALLOC\x00Expected a positive remaining refcount\x00'
// 76: 00 00
static const unsigned char _DELETE_DEREFplus_BINARY_OP_SUBTRACT_FLOAT_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x50, 0x79, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x00, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BINARY_OP_SUBTRACT_FLOAT_data_holes[1];

// _DELETE_DEREFplus_BINARY_OP_SUBTRACT_INT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BINARY_OP_SUBTRACT_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 d1                      movq    %rdx, %rcx
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 1b                         je      0x4a <_JIT_ENTRY+0x4a>
// 2f: 48 89 0c 24                   movq    %rcx, (%rsp)
// 33: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3b: 49 8b 04 24                   movq    (%r12), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 2a                         jle     0x6e <_JIT_ENTRY+0x6e>
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 4c                         jns     0x94 <_JIT_ENTRY+0x94>
// 48: eb 6b                         jmp     0xb5 <_JIT_ENTRY+0xb5>
// 4a: 49 8b 36                      movq    (%r14), %rsi
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: 0f b7 d0                      movzwl  %ax, %edx
// 5a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005c:  R_X86_64_64  _PyEval_FormatExcUnbound
// 64: 48 89 cf                      movq    %rcx, %rdi
// 67: ff d0                         callq   *%rax
// 69: e9 f9 00 00 00                jmp     0x167 <_JIT_ENTRY+0x167>
// 6e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000070:  R_X86_64_64  .rodata.str1.1
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _Py_NegativeRefcount
// 82: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 87: 4c 89 e2                      movq    %r12, %rdx
// 8a: ff d0                         callq   *%rax
// 8c: 49 8b 04 24                   movq    (%r12), %rax
// 90: 85 c0                         testl   %eax, %eax
// 92: 78 21                         js      0xb5 <_JIT_ENTRY+0xb5>
// 94: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000096:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9e: ff d0                         callq   *%rax
// a0: 49 ff 0c 24                   decq    (%r12)
// a4: 75 0f                         jne     0xb5 <_JIT_ENTRY+0xb5>
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  _Py_Dealloc
// b0: 4c 89 e7                      movq    %r12, %rdi
// b3: ff d0                         callq   *%rax
// b5: 4c 8b 6b f0                   movq    -0x10(%rbx), %r13
// b9: 48 8b 6b f8                   movq    -0x8(%rbx), %rbp
// bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bf:  R_X86_64_64  _PyLong_Subtract
// c7: 4c 89 ef                      movq    %r13, %rdi
// ca: 48 89 ee                      movq    %rbp, %rsi
// cd: ff d0                         callq   *%rax
// cf: 49 89 c4                      movq    %rax, %r12
// d2: f6 45 03 80                   testb   $-0x80, 0x3(%rbp)
// d6: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000d8:  R_X86_64_64  PyInterpreterState_Get
// e0: 75 10                         jne     0xf2 <_JIT_ENTRY+0xf2>
// e2: 41 ff d7                      callq   *%r15
// e5: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// ec: 48 ff 4d 00                   decq    (%rbp)
// f0: 74 28                         je      0x11a <_JIT_ENTRY+0x11a>
// f2: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// f7: 75 37                         jne     0x130 <_JIT_ENTRY+0x130>
// f9: 41 ff d7                      callq   *%r15
// fc: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 103: 49 ff 4d 00                   decq    (%r13)
// 107: 75 27                         jne     0x130 <_JIT_ENTRY+0x130>
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  PyObject_Free
// 113: 4c 89 ef                      movq    %r13, %rdi
// 116: ff d0                         callq   *%rax
// 118: eb 16                         jmp     0x130 <_JIT_ENTRY+0x130>
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  PyObject_Free
// 124: 48 89 ef                      movq    %rbp, %rdi
// 127: ff d0                         callq   *%rax
// 129: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 12e: 74 c9                         je      0xf9 <_JIT_ENTRY+0xf9>
// 130: 48 8d 43 f0                   leaq    -0x10(%rbx), %rax
// 134: 4d 85 e4                      testq   %r12, %r12
// 137: 74 2b                         je      0x164 <_JIT_ENTRY+0x164>
// 139: 48 83 c3 f8                   addq    $-0x8, %rbx
// 13d: 4c 89 20                      movq    %r12, (%rax)
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _JIT_CONTINUE
// 14a: 4c 89 f7                      movq    %r14, %rdi
// 14d: 48 89 de                      movq    %rbx, %rsi
// 150: 48 8b 14 24                   movq    (%rsp), %rdx
// 154: 48 83 c4 08                   addq    $0x8, %rsp
// 158: 5b                            popq    %rbx
// 159: 41 5c                         popq    %r12
// 15b: 41 5d                         popq    %r13
// 15d: 41 5e                         popq    %r14
// 15f: 41 5f                         popq    %r15
// 161: 5d                            popq    %rbp
// 162: ff e0                         jmpq    *%rax
// 164: 48 89 c3                      movq    %rax, %rbx
// 167: 4c 29 f3                      subq    %r14, %rbx
// 16a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 16e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 172: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 176: 31 c0                         xorl    %eax, %eax
// 178: 48 83 c4 08                   addq    $0x8, %rsp
// 17c: 5b                            popq    %rbx
// 17d: 41 5c                         popq    %r12
// 17f: 41 5d                         popq    %r13
// 181: 41 5e                         popq    %r14
// 183: 41 5f                         popq    %r15
// 185: 5d                            popq    %rbp
// 186: c3                            retq
// 187: 
static const unsigned char _DELETE_DEREFplus_BINARY_OP_SUBTRACT_INT_code_body[392] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xd1, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1b, 0x48, 0x89, 0x0c, 0x24, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0xe9, 0xf9, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x6b, 0xf0, 0x48, 0x8b, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0xf6, 0x45, 0x03, 0x80, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x10, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x28, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x37, 0x41, 0xff, 0xd7, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0xeb, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x74, 0xc9, 0x48, 0x8d, 0x43, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x2b, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x89, 0xc3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_BINARY_OP_SUBTRACT_INT_code_holes[13] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x70, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x96, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyLong_Subtract, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_BINARY_OP_SUBTRACT_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BINARY_OP_SUBTRACT_INT_data_holes[1];

// _DELETE_DEREFplus_BINARY_SLICE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BINARY_SLICE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 2a                         jle     0x6a <_JIT_ENTRY+0x6a>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 4c                         jns     0x90 <_JIT_ENTRY+0x90>
// 44: eb 6b                         jmp     0xb1 <_JIT_ENTRY+0xb1>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: e9 7e 01 00 00                jmp     0x1e8 <_JIT_ENTRY+0x1e8>
// 6a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006c:  R_X86_64_64  .rodata.str1.1
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _Py_NegativeRefcount
// 7e: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 83: 4c 89 e2                      movq    %r12, %rdx
// 86: ff d0                         callq   *%rax
// 88: 49 8b 04 24                   movq    (%r12), %rax
// 8c: 85 c0                         testl   %eax, %eax
// 8e: 78 21                         js      0xb1 <_JIT_ENTRY+0xb1>
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9a: ff d0                         callq   *%rax
// 9c: 49 ff 0c 24                   decq    (%r12)
// a0: 75 0f                         jne     0xb1 <_JIT_ENTRY+0xb1>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_Dealloc
// ac: 4c 89 e7                      movq    %r12, %rdi
// af: ff d0                         callq   *%rax
// b1: 48 8b 73 f8                   movq    -0x8(%rbx), %rsi
// b5: 4c 8b 63 e8                   movq    -0x18(%rbx), %r12
// b9: 48 8b 7b f0                   movq    -0x10(%rbx), %rdi
// bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bf:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// c7: ff d0                         callq   *%rax
// c9: 48 85 c0                      testq   %rax, %rax
// cc: 74 27                         je      0xf5 <_JIT_ENTRY+0xf5>
// ce: 48 89 c5                      movq    %rax, %rbp
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  PyObject_GetItem
// db: 4c 89 e7                      movq    %r12, %rdi
// de: 48 89 ee                      movq    %rbp, %rsi
// e1: ff d0                         callq   *%rax
// e3: 49 89 c5                      movq    %rax, %r13
// e6: 48 8b 45 00                   movq    (%rbp), %rax
// ea: 48 85 c0                      testq   %rax, %rax
// ed: 7e 14                         jle     0x103 <_JIT_ENTRY+0x103>
// ef: 85 c0                         testl   %eax, %eax
// f1: 79 36                         jns     0x129 <_JIT_ENTRY+0x129>
// f3: eb 46                         jmp     0x13b <_JIT_ENTRY+0x13b>
// f5: 45 31 ed                      xorl    %r13d, %r13d
// f8: 49 8b 04 24                   movq    (%r12), %rax
// fc: 48 85 c0                      testq   %rax, %rax
// ff: 7f 43                         jg      0x144 <_JIT_ENTRY+0x144>
// 101: eb 5f                         jmp     0x162 <_JIT_ENTRY+0x162>
// 103: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000105:  R_X86_64_64  .rodata.str1.1
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _Py_NegativeRefcount
// 117: be 99 01 00 00                movl    $0x199, %esi            # imm = 0x199
// 11c: 48 89 ea                      movq    %rbp, %rdx
// 11f: ff d0                         callq   *%rax
// 121: 48 8b 45 00                   movq    (%rbp), %rax
// 125: 85 c0                         testl   %eax, %eax
// 127: 78 12                         js      0x13b <_JIT_ENTRY+0x13b>
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 133: ff d0                         callq   *%rax
// 135: 48 ff 4d 00                   decq    (%rbp)
// 139: 74 0f                         je      0x14a <_JIT_ENTRY+0x14a>
// 13b: 49 8b 04 24                   movq    (%r12), %rax
// 13f: 48 85 c0                      testq   %rax, %rax
// 142: 7e 1e                         jle     0x162 <_JIT_ENTRY+0x162>
// 144: 85 c0                         testl   %eax, %eax
// 146: 79 40                         jns     0x188 <_JIT_ENTRY+0x188>
// 148: eb 50                         jmp     0x19a <_JIT_ENTRY+0x19a>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 48 89 ef                      movq    %rbp, %rdi
// 157: ff d0                         callq   *%rax
// 159: 49 8b 04 24                   movq    (%r12), %rax
// 15d: 48 85 c0                      testq   %rax, %rax
// 160: 7f e2                         jg      0x144 <_JIT_ENTRY+0x144>
// 162: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000164:  R_X86_64_64  .rodata.str1.1
// 16c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016e:  R_X86_64_64  _Py_NegativeRefcount
// 176: be 9b 01 00 00                movl    $0x19b, %esi            # imm = 0x19B
// 17b: 4c 89 e2                      movq    %r12, %rdx
// 17e: ff d0                         callq   *%rax
// 180: 49 8b 04 24                   movq    (%r12), %rax
// 184: 85 c0                         testl   %eax, %eax
// 186: 78 12                         js      0x19a <_JIT_ENTRY+0x19a>
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 192: ff d0                         callq   *%rax
// 194: 49 ff 0c 24                   decq    (%r12)
// 198: 74 33                         je      0x1cd <_JIT_ENTRY+0x1cd>
// 19a: 48 8d 43 e8                   leaq    -0x18(%rbx), %rax
// 19e: 4d 85 ed                      testq   %r13, %r13
// 1a1: 74 42                         je      0x1e5 <_JIT_ENTRY+0x1e5>
// 1a3: 48 83 c3 f0                   addq    $-0x10, %rbx
// 1a7: 4c 89 28                      movq    %r13, (%rax)
// 1aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ac:  R_X86_64_64  _JIT_CONTINUE
// 1b4: 4c 89 f7                      movq    %r14, %rdi
// 1b7: 48 89 de                      movq    %rbx, %rsi
// 1ba: 4c 89 fa                      movq    %r15, %rdx
// 1bd: 48 83 c4 08                   addq    $0x8, %rsp
// 1c1: 5b                            popq    %rbx
// 1c2: 41 5c                         popq    %r12
// 1c4: 41 5d                         popq    %r13
// 1c6: 41 5e                         popq    %r14
// 1c8: 41 5f                         popq    %r15
// 1ca: 5d                            popq    %rbp
// 1cb: ff e0                         jmpq    *%rax
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _Py_Dealloc
// 1d7: 4c 89 e7                      movq    %r12, %rdi
// 1da: ff d0                         callq   *%rax
// 1dc: 48 8d 43 e8                   leaq    -0x18(%rbx), %rax
// 1e0: 4d 85 ed                      testq   %r13, %r13
// 1e3: 75 be                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 1e5: 48 89 c3                      movq    %rax, %rbx
// 1e8: 4c 29 f3                      subq    %r14, %rbx
// 1eb: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1ef: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1f3: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1f7: 31 c0                         xorl    %eax, %eax
// 1f9: 48 83 c4 08                   addq    $0x8, %rsp
// 1fd: 5b                            popq    %rbx
// 1fe: 41 5c                         popq    %r12
// 200: 41 5d                         popq    %r13
// 202: 41 5e                         popq    %r14
// 204: 41 5f                         popq    %r15
// 206: 5d                            popq    %rbp
// 207: c3                            retq
// 208: 
static const unsigned char _DELETE_DEREFplus_BINARY_SLICE_code_body[521] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x7e, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x73, 0xf8, 0x4c, 0x8b, 0x63, 0xe8, 0x48, 0x8b, 0x7b, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x27, 0x48, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x14, 0x85, 0xc0, 0x79, 0x36, 0xeb, 0x46, 0x45, 0x31, 0xed, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x43, 0xeb, 0x5f, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x9b, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x33, 0x48, 0x8d, 0x43, 0xe8, 0x4d, 0x85, 0xed, 0x74, 0x42, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8d, 0x43, 0xe8, 0x4d, 0x85, 0xed, 0x75, 0xbe, 0x48, 0x89, 0xc3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_BINARY_SLICE_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ac, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_BINARY_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BINARY_SLICE_data_holes[1];

// _DELETE_DEREFplus_BINARY_SUBSCR
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BINARY_SUBSCR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 2a                         jle     0x6a <_JIT_ENTRY+0x6a>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 4c                         jns     0x90 <_JIT_ENTRY+0x90>
// 44: eb 6b                         jmp     0xb1 <_JIT_ENTRY+0xb1>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: e9 58 01 00 00                jmp     0x1c2 <_JIT_ENTRY+0x1c2>
// 6a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006c:  R_X86_64_64  .rodata.str1.1
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _Py_NegativeRefcount
// 7e: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 83: 4c 89 e2                      movq    %r12, %rdx
// 86: ff d0                         callq   *%rax
// 88: 49 8b 04 24                   movq    (%r12), %rax
// 8c: 85 c0                         testl   %eax, %eax
// 8e: 78 21                         js      0xb1 <_JIT_ENTRY+0xb1>
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9a: ff d0                         callq   *%rax
// 9c: 49 ff 0c 24                   decq    (%r12)
// a0: 75 0f                         jne     0xb1 <_JIT_ENTRY+0xb1>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_Dealloc
// ac: 4c 89 e7                      movq    %r12, %rdi
// af: ff d0                         callq   *%rax
// b1: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// b5: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  PyObject_GetItem
// c3: 48 89 ef                      movq    %rbp, %rdi
// c6: 4c 89 ee                      movq    %r13, %rsi
// c9: ff d0                         callq   *%rax
// cb: 49 89 c4                      movq    %rax, %r12
// ce: 48 8b 45 00                   movq    (%rbp), %rax
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 7e 06                         jle     0xdd <_JIT_ENTRY+0xdd>
// d7: 85 c0                         testl   %eax, %eax
// d9: 79 28                         jns     0x103 <_JIT_ENTRY+0x103>
// db: eb 38                         jmp     0x115 <_JIT_ENTRY+0x115>
// dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000df:  R_X86_64_64  .rodata.str1.1
// e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e9:  R_X86_64_64  _Py_NegativeRefcount
// f1: be 81 01 00 00                movl    $0x181, %esi            # imm = 0x181
// f6: 48 89 ea                      movq    %rbp, %rdx
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 85 c0                         testl   %eax, %eax
// 101: 78 12                         js      0x115 <_JIT_ENTRY+0x115>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 4d 00                   decq    (%rbp)
// 113: 74 0f                         je      0x124 <_JIT_ENTRY+0x124>
// 115: 49 8b 45 00                   movq    (%r13), %rax
// 119: 48 85 c0                      testq   %rax, %rax
// 11c: 7e 1e                         jle     0x13c <_JIT_ENTRY+0x13c>
// 11e: 85 c0                         testl   %eax, %eax
// 120: 79 40                         jns     0x162 <_JIT_ENTRY+0x162>
// 122: eb 50                         jmp     0x174 <_JIT_ENTRY+0x174>
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  _Py_Dealloc
// 12e: 48 89 ef                      movq    %rbp, %rdi
// 131: ff d0                         callq   *%rax
// 133: 49 8b 45 00                   movq    (%r13), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f e2                         jg      0x11e <_JIT_ENTRY+0x11e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 82 01 00 00                movl    $0x182, %esi            # imm = 0x182
// 155: 4c 89 ea                      movq    %r13, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 49 8b 45 00                   movq    (%r13), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 12                         js      0x174 <_JIT_ENTRY+0x174>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 4d 00                   decq    (%r13)
// 172: 74 33                         je      0x1a7 <_JIT_ENTRY+0x1a7>
// 174: 48 8d 43 f0                   leaq    -0x10(%rbx), %rax
// 178: 4d 85 e4                      testq   %r12, %r12
// 17b: 74 42                         je      0x1bf <_JIT_ENTRY+0x1bf>
// 17d: 48 83 c3 f8                   addq    $-0x8, %rbx
// 181: 4c 89 20                      movq    %r12, (%rax)
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _JIT_CONTINUE
// 18e: 4c 89 f7                      movq    %r14, %rdi
// 191: 48 89 de                      movq    %rbx, %rsi
// 194: 4c 89 fa                      movq    %r15, %rdx
// 197: 48 83 c4 08                   addq    $0x8, %rsp
// 19b: 5b                            popq    %rbx
// 19c: 41 5c                         popq    %r12
// 19e: 41 5d                         popq    %r13
// 1a0: 41 5e                         popq    %r14
// 1a2: 41 5f                         popq    %r15
// 1a4: 5d                            popq    %rbp
// 1a5: ff e0                         jmpq    *%rax
// 1a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a9:  R_X86_64_64  _Py_Dealloc
// 1b1: 4c 89 ef                      movq    %r13, %rdi
// 1b4: ff d0                         callq   *%rax
// 1b6: 48 8d 43 f0                   leaq    -0x10(%rbx), %rax
// 1ba: 4d 85 e4                      testq   %r12, %r12
// 1bd: 75 be                         jne     0x17d <_JIT_ENTRY+0x17d>
// 1bf: 48 89 c3                      movq    %rax, %rbx
// 1c2: 4c 29 f3                      subq    %r14, %rbx
// 1c5: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1c9: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1cd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1d1: 31 c0                         xorl    %eax, %eax
// 1d3: 48 83 c4 08                   addq    $0x8, %rsp
// 1d7: 5b                            popq    %rbx
// 1d8: 41 5c                         popq    %r12
// 1da: 41 5d                         popq    %r13
// 1dc: 41 5e                         popq    %r14
// 1de: 41 5f                         popq    %r15
// 1e0: 5d                            popq    %rbp
// 1e1: c3                            retq
// 1e2: 
static const unsigned char _DELETE_DEREFplus_BINARY_SUBSCR_code_body[483] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x58, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x81, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x82, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x33, 0x48, 0x8d, 0x43, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x42, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8d, 0x43, 0xf0, 0x4d, 0x85, 0xe4, 0x75, 0xbe, 0x48, 0x89, 0xc3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_BINARY_SUBSCR_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetItem, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_BINARY_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BINARY_SUBSCR_data_holes[1];

// _DELETE_DEREFplus_BINARY_SUBSCR_DICT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BINARY_SUBSCR_DICT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 38                         jle     0x78 <_JIT_ENTRY+0x78>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 5a                         jns     0x9e <_JIT_ENTRY+0x9e>
// 44: eb 6a                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 46: 48 8b 33                      movq    (%rbx), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 49 29 de                      subq    %rbx, %r14
// 68: 49 83 c6 b8                   addq    $-0x48, %r14
// 6c: 49 c1 ee 03                   shrq    $0x3, %r14
// 70: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 74: 31 c0                         xorl    %eax, %eax
// 76: eb 74                         jmp     0xec <_JIT_ENTRY+0xec>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 12                         js      0xb0 <_JIT_ENTRY+0xb0>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 74 4b                         je      0xfb <_JIT_ENTRY+0xfb>
// b0: 4d 8b 6e f0                   movq    -0x10(%r14), %r13
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  PyDict_Type
// be: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// c2: 74 5a                         je      0x11e <_JIT_ENTRY+0x11e>
// c4: 49 29 de                      subq    %rbx, %r14
// c7: 49 83 c6 b8                   addq    $-0x48, %r14
// cb: 49 c1 ee 03                   shrq    $0x3, %r14
// cf: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// d3: 48 8b 03                      movq    (%rbx), %rax
// d6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d8:  R_X86_64_64  _JIT_TARGET
// e0: 89 c9                         movl    %ecx, %ecx
// e2: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// e6: 48 05 c8 00 00 00             addq    $0xc8, %rax
// ec: 48 83 c4 08                   addq    $0x8, %rsp
// f0: 5b                            popq    %rbx
// f1: 41 5c                         popq    %r12
// f3: 41 5d                         popq    %r13
// f5: 41 5e                         popq    %r14
// f7: 41 5f                         popq    %r15
// f9: 5d                            popq    %rbp
// fa: c3                            retq
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_Dealloc
// 105: 4c 89 e7                      movq    %r12, %rdi
// 108: ff d0                         callq   *%rax
// 10a: 4d 8b 6e f0                   movq    -0x10(%r14), %r13
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  PyDict_Type
// 118: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 11c: 75 a6                         jne     0xc4 <_JIT_ENTRY+0xc4>
// 11e: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  PyDict_GetItemRef
// 12c: 48 89 e2                      movq    %rsp, %rdx
// 12f: 4c 89 ef                      movq    %r13, %rdi
// 132: 4c 89 e6                      movq    %r12, %rsi
// 135: ff d0                         callq   *%rax
// 137: 89 c5                         movl    %eax, %ebp
// 139: 85 c0                         testl   %eax, %eax
// 13b: 74 0f                         je      0x14c <_JIT_ENTRY+0x14c>
// 13d: 49 8b 45 00                   movq    (%r13), %rax
// 141: 48 85 c0                      testq   %rax, %rax
// 144: 7e 1e                         jle     0x164 <_JIT_ENTRY+0x164>
// 146: 85 c0                         testl   %eax, %eax
// 148: 79 40                         jns     0x18a <_JIT_ENTRY+0x18a>
// 14a: eb 5f                         jmp     0x1ab <_JIT_ENTRY+0x1ab>
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _PyErr_SetKeyError
// 156: 4c 89 e7                      movq    %r12, %rdi
// 159: ff d0                         callq   *%rax
// 15b: 49 8b 45 00                   movq    (%r13), %rax
// 15f: 48 85 c0                      testq   %rax, %rax
// 162: 7f e2                         jg      0x146 <_JIT_ENTRY+0x146>
// 164: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000166:  R_X86_64_64  .rodata.str1.1
// 16e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000170:  R_X86_64_64  _Py_NegativeRefcount
// 178: be 0c 02 00 00                movl    $0x20c, %esi            # imm = 0x20C
// 17d: 4c 89 ea                      movq    %r13, %rdx
// 180: ff d0                         callq   *%rax
// 182: 49 8b 45 00                   movq    (%r13), %rax
// 186: 85 c0                         testl   %eax, %eax
// 188: 78 21                         js      0x1ab <_JIT_ENTRY+0x1ab>
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 194: ff d0                         callq   *%rax
// 196: 49 ff 4d 00                   decq    (%r13)
// 19a: 75 0f                         jne     0x1ab <_JIT_ENTRY+0x1ab>
// 19c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019e:  R_X86_64_64  _Py_Dealloc
// 1a6: 4c 89 ef                      movq    %r13, %rdi
// 1a9: ff d0                         callq   *%rax
// 1ab: 49 8b 04 24                   movq    (%r12), %rax
// 1af: 48 85 c0                      testq   %rax, %rax
// 1b2: 7e 06                         jle     0x1ba <_JIT_ENTRY+0x1ba>
// 1b4: 85 c0                         testl   %eax, %eax
// 1b6: 79 28                         jns     0x1e0 <_JIT_ENTRY+0x1e0>
// 1b8: eb 38                         jmp     0x1f2 <_JIT_ENTRY+0x1f2>
// 1ba: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bc:  R_X86_64_64  .rodata.str1.1
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _Py_NegativeRefcount
// 1ce: be 0d 02 00 00                movl    $0x20d, %esi            # imm = 0x20D
// 1d3: 4c 89 e2                      movq    %r12, %rdx
// 1d6: ff d0                         callq   *%rax
// 1d8: 49 8b 04 24                   movq    (%r12), %rax
// 1dc: 85 c0                         testl   %eax, %eax
// 1de: 78 12                         js      0x1f2 <_JIT_ENTRY+0x1f2>
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ea: ff d0                         callq   *%rax
// 1ec: 49 ff 0c 24                   decq    (%r12)
// 1f0: 74 36                         je      0x228 <_JIT_ENTRY+0x228>
// 1f2: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 1f6: 85 ed                         testl   %ebp, %ebp
// 1f8: 7e 45                         jle     0x23f <_JIT_ENTRY+0x23f>
// 1fa: 49 83 c6 f8                   addq    $-0x8, %r14
// 1fe: 48 8b 0c 24                   movq    (%rsp), %rcx
// 202: 48 89 08                      movq    %rcx, (%rax)
// 205: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000207:  R_X86_64_64  _JIT_CONTINUE
// 20f: 48 89 df                      movq    %rbx, %rdi
// 212: 4c 89 f6                      movq    %r14, %rsi
// 215: 4c 89 fa                      movq    %r15, %rdx
// 218: 48 83 c4 08                   addq    $0x8, %rsp
// 21c: 5b                            popq    %rbx
// 21d: 41 5c                         popq    %r12
// 21f: 41 5d                         popq    %r13
// 221: 41 5e                         popq    %r14
// 223: 41 5f                         popq    %r15
// 225: 5d                            popq    %rbp
// 226: ff e0                         jmpq    *%rax
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _Py_Dealloc
// 232: 4c 89 e7                      movq    %r12, %rdi
// 235: ff d0                         callq   *%rax
// 237: 49 8d 46 f0                   leaq    -0x10(%r14), %rax
// 23b: 85 ed                         testl   %ebp, %ebp
// 23d: 7f bb                         jg      0x1fa <_JIT_ENTRY+0x1fa>
// 23f: 49 89 c6                      movq    %rax, %r14
// 242: e9 1e fe ff ff                jmp     0x65 <_JIT_ENTRY+0x65>
// 247: 
static const unsigned char _DELETE_DEREFplus_BINARY_SUBSCR_DICT_code_body[584] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x38, 0x85, 0xc0, 0x79, 0x5a, 0xeb, 0x6a, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xeb, 0x74, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x4b, 0x4d, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x5a, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x75, 0xa6, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x85, 0xc0, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0d, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x36, 0x49, 0x8d, 0x46, 0xf0, 0x85, 0xed, 0x7e, 0x45, 0x49, 0x83, 0xc6, 0xf8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xf0, 0x85, 0xed, 0x7f, 0xbb, 0x49, 0x89, 0xc6, 0xe9, 0x1e, 0xfe, 0xff, 0xff};
static const Hole _DELETE_DEREFplus_BINARY_SUBSCR_DICT_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetKeyError, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x170, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x207, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_BINARY_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BINARY_SUBSCR_DICT_data_holes[1];

// _DELETE_DEREFplus_BINARY_SUBSCR_LIST_INT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BINARY_SUBSCR_LIST_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 3b                         jle     0x7b <_JIT_ENTRY+0x7b>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 5d                         jns     0xa1 <_JIT_ENTRY+0xa1>
// 44: eb 71                         jmp     0xb7 <_JIT_ENTRY+0xb7>
// 46: 48 8b 33                      movq    (%rbx), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 49 29 de                      subq    %rbx, %r14
// 68: 49 83 c6 b8                   addq    $-0x48, %r14
// 6c: 49 c1 ee 03                   shrq    $0x3, %r14
// 70: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 74: 31 c0                         xorl    %eax, %eax
// 76: e9 9f 01 00 00                jmp     0x21a <_JIT_ENTRY+0x21a>
// 7b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007d:  R_X86_64_64  .rodata.str1.1
// 85: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000087:  R_X86_64_64  _Py_NegativeRefcount
// 8f: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 94: 4c 89 e2                      movq    %r12, %rdx
// 97: ff d0                         callq   *%rax
// 99: 49 8b 04 24                   movq    (%r12), %rax
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 16                         js      0xb7 <_JIT_ENTRY+0xb7>
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ab: ff d0                         callq   *%rax
// ad: 49 ff 0c 24                   decq    (%r12)
// b1: 0f 84 14 01 00 00             je      0x1cb <_JIT_ENTRY+0x1cb>
// b7: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  PyLong_Type
// c5: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// c9: 0f 85 23 01 00 00             jne     0x1f2 <_JIT_ENTRY+0x1f2>
// cf: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  PyList_Type
// dd: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// e2: 0f 85 0a 01 00 00             jne     0x1f2 <_JIT_ENTRY+0x1f2>
// e8: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// ed: 0f 87 ff 00 00 00             ja      0x1f2 <_JIT_ENTRY+0x1f2>
// f3: 41 8b 45 18                   movl    0x18(%r13), %eax
// f7: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// fc: 0f 8e f0 00 00 00             jle     0x1f2 <_JIT_ENTRY+0x1f2>
// 102: 49 8b 4c 24 18                movq    0x18(%r12), %rcx
// 107: 48 8b 2c c1                   movq    (%rcx,%rax,8), %rbp
// 10b: 8b 45 00                      movl    (%rbp), %eax
// 10e: ff c0                         incl    %eax
// 110: 74 0f                         je      0x121 <_JIT_ENTRY+0x121>
// 112: 89 45 00                      movl    %eax, (%rbp)
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 11f: ff d0                         callq   *%rax
// 121: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 126: 75 28                         jne     0x150 <_JIT_ENTRY+0x150>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  PyInterpreterState_Get
// 132: ff d0                         callq   *%rax
// 134: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 13b: 49 ff 4d 00                   decq    (%r13)
// 13f: 75 0f                         jne     0x150 <_JIT_ENTRY+0x150>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  PyObject_Free
// 14b: 4c 89 ef                      movq    %r13, %rdi
// 14e: ff d0                         callq   *%rax
// 150: 49 8b 04 24                   movq    (%r12), %rax
// 154: 48 85 c0                      testq   %rax, %rax
// 157: 7f 22                         jg      0x17b <_JIT_ENTRY+0x17b>
// 159: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015b:  R_X86_64_64  .rodata.str1.1
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_NegativeRefcount
// 16d: be cc 01 00 00                movl    $0x1cc, %esi            # imm = 0x1CC
// 172: 4c 89 e2                      movq    %r12, %rdx
// 175: ff d0                         callq   *%rax
// 177: 49 8b 04 24                   movq    (%r12), %rax
// 17b: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 17f: 85 c0                         testl   %eax, %eax
// 181: 78 21                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 49 ff 0c 24                   decq    (%r12)
// 193: 75 0f                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_Dealloc
// 19f: 4c 89 e7                      movq    %r12, %rdi
// 1a2: ff d0                         callq   *%rax
// 1a4: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _JIT_CONTINUE
// 1b2: 48 89 df                      movq    %rbx, %rdi
// 1b5: 4c 89 ee                      movq    %r13, %rsi
// 1b8: 4c 89 fa                      movq    %r15, %rdx
// 1bb: 48 83 c4 08                   addq    $0x8, %rsp
// 1bf: 5b                            popq    %rbx
// 1c0: 41 5c                         popq    %r12
// 1c2: 41 5d                         popq    %r13
// 1c4: 41 5e                         popq    %r14
// 1c6: 41 5f                         popq    %r15
// 1c8: 5d                            popq    %rbp
// 1c9: ff e0                         jmpq    *%rax
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_Dealloc
// 1d5: 4c 89 e7                      movq    %r12, %rdi
// 1d8: ff d0                         callq   *%rax
// 1da: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  PyLong_Type
// 1e8: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1ec: 0f 84 dd fe ff ff             je      0xcf <_JIT_ENTRY+0xcf>
// 1f2: 49 29 de                      subq    %rbx, %r14
// 1f5: 49 83 c6 b8                   addq    $-0x48, %r14
// 1f9: 49 c1 ee 03                   shrq    $0x3, %r14
// 1fd: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 201: 48 8b 03                      movq    (%rbx), %rax
// 204: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000206:  R_X86_64_64  _JIT_TARGET
// 20e: 89 c9                         movl    %ecx, %ecx
// 210: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 214: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 21a: 48 83 c4 08                   addq    $0x8, %rsp
// 21e: 5b                            popq    %rbx
// 21f: 41 5c                         popq    %r12
// 221: 41 5d                         popq    %r13
// 223: 41 5e                         popq    %r14
// 225: 41 5f                         popq    %r15
// 227: 5d                            popq    %rbp
// 228: c3                            retq
// 229: 
static const unsigned char _DELETE_DEREFplus_BINARY_SUBSCR_LIST_INT_code_body[554] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x71, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x9f, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x14, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x23, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x0a, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xff, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xf0, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x4c, 0x24, 0x18, 0x48, 0x8b, 0x2c, 0xc1, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x0f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcc, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x84, 0xdd, 0xfe, 0xff, 0xff, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_BINARY_SUBSCR_LIST_INT_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x87, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_BINARY_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BINARY_SUBSCR_LIST_INT_data_holes[1];

// _DELETE_DEREFplus_BINARY_SUBSCR_STR_INT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BINARY_SUBSCR_STR_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 3b                         jle     0x7b <_JIT_ENTRY+0x7b>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 5d                         jns     0xa1 <_JIT_ENTRY+0xa1>
// 44: eb 6d                         jmp     0xb3 <_JIT_ENTRY+0xb3>
// 46: 48 8b 33                      movq    (%rbx), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 49 29 de                      subq    %rbx, %r14
// 68: 49 83 c6 b8                   addq    $-0x48, %r14
// 6c: 49 c1 ee 03                   shrq    $0x3, %r14
// 70: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 74: 31 c0                         xorl    %eax, %eax
// 76: e9 f0 00 00 00                jmp     0x16b <_JIT_ENTRY+0x16b>
// 7b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007d:  R_X86_64_64  .rodata.str1.1
// 85: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000087:  R_X86_64_64  _Py_NegativeRefcount
// 8f: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 94: 4c 89 e2                      movq    %r12, %rdx
// 97: ff d0                         callq   *%rax
// 99: 49 8b 04 24                   movq    (%r12), %rax
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 12                         js      0xb3 <_JIT_ENTRY+0xb3>
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ab: ff d0                         callq   *%rax
// ad: 49 ff 0c 24                   decq    (%r12)
// b1: 74 6d                         je      0x120 <_JIT_ENTRY+0x120>
// b3: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  PyLong_Type
// c1: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// c5: 75 7c                         jne     0x143 <_JIT_ENTRY+0x143>
// c7: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  PyUnicode_Type
// d5: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// da: 75 67                         jne     0x143 <_JIT_ENTRY+0x143>
// dc: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// e1: 77 60                         ja      0x143 <_JIT_ENTRY+0x143>
// e3: 41 8b 45 18                   movl    0x18(%r13), %eax
// e7: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// ec: 7e 55                         jle     0x143 <_JIT_ENTRY+0x143>
// ee: 41 8b 4c 24 20                movl    0x20(%r12), %ecx
// f3: 89 ca                         movl    %ecx, %edx
// f5: c1 ea 02                      shrl    $0x2, %edx
// f8: 83 e2 07                      andl    $0x7, %edx
// fb: 83 fa 02                      cmpl    $0x2, %edx
// fe: 74 7a                         je      0x17a <_JIT_ENTRY+0x17a>
// 100: 83 fa 01                      cmpl    $0x1, %edx
// 103: 0f 85 81 00 00 00             jne     0x18a <_JIT_ENTRY+0x18a>
// 109: f6 c1 20                      testb   $0x20, %cl
// 10c: 0f 85 84 00 00 00             jne     0x196 <_JIT_ENTRY+0x196>
// 112: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 117: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// 11b: e9 c1 00 00 00                jmp     0x1e1 <_JIT_ENTRY+0x1e1>
// 120: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000122:  R_X86_64_64  _Py_Dealloc
// 12a: 4c 89 e7                      movq    %r12, %rdi
// 12d: ff d0                         callq   *%rax
// 12f: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  PyLong_Type
// 13d: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 141: 74 84                         je      0xc7 <_JIT_ENTRY+0xc7>
// 143: 49 29 de                      subq    %rbx, %r14
// 146: 49 83 c6 b8                   addq    $-0x48, %r14
// 14a: 49 c1 ee 03                   shrq    $0x3, %r14
// 14e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 152: 48 8b 03                      movq    (%rbx), %rax
// 155: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000157:  R_X86_64_64  _JIT_TARGET
// 15f: 89 c9                         movl    %ecx, %ecx
// 161: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 165: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 16b: 48 83 c4 08                   addq    $0x8, %rsp
// 16f: 5b                            popq    %rbx
// 170: 41 5c                         popq    %r12
// 172: 41 5d                         popq    %r13
// 174: 41 5e                         popq    %r14
// 176: 41 5f                         popq    %r15
// 178: 5d                            popq    %rbp
// 179: c3                            retq
// 17a: f6 c1 20                      testb   $0x20, %cl
// 17d: 75 31                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 17f: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 184: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// 188: eb 57                         jmp     0x1e1 <_JIT_ENTRY+0x1e1>
// 18a: f6 c1 20                      testb   $0x20, %cl
// 18d: 75 3b                         jne     0x1ca <_JIT_ENTRY+0x1ca>
// 18f: 49 8b 4c 24 38                movq    0x38(%r12), %rcx
// 194: eb 48                         jmp     0x1de <_JIT_ENTRY+0x1de>
// 196: 31 d2                         xorl    %edx, %edx
// 198: f6 c1 40                      testb   $0x40, %cl
// 19b: 0f 94 c2                      sete    %dl
// 19e: 48 c1 e2 04                   shlq    $0x4, %rdx
// 1a2: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// 1a6: 48 83 c1 28                   addq    $0x28, %rcx
// 1aa: 0f b6 2c 01                   movzbl  (%rcx,%rax), %ebp
// 1ae: eb 31                         jmp     0x1e1 <_JIT_ENTRY+0x1e1>
// 1b0: 31 d2                         xorl    %edx, %edx
// 1b2: f6 c1 40                      testb   $0x40, %cl
// 1b5: 0f 94 c2                      sete    %dl
// 1b8: 48 c1 e2 04                   shlq    $0x4, %rdx
// 1bc: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// 1c0: 48 83 c1 28                   addq    $0x28, %rcx
// 1c4: 0f b7 2c 41                   movzwl  (%rcx,%rax,2), %ebp
// 1c8: eb 17                         jmp     0x1e1 <_JIT_ENTRY+0x1e1>
// 1ca: 31 d2                         xorl    %edx, %edx
// 1cc: f6 c1 40                      testb   $0x40, %cl
// 1cf: 0f 94 c2                      sete    %dl
// 1d2: 48 c1 e2 04                   shlq    $0x4, %rdx
// 1d6: 4a 8d 0c 22                   leaq    (%rdx,%r12), %rcx
// 1da: 48 83 c1 28                   addq    $0x28, %rcx
// 1de: 8b 2c 81                      movl    (%rcx,%rax,4), %ebp
// 1e1: 83 fd 7f                      cmpl    $0x7f, %ebp
// 1e4: 0f 87 59 ff ff ff             ja      0x143 <_JIT_ENTRY+0x143>
// 1ea: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 1ef: 75 28                         jne     0x219 <_JIT_ENTRY+0x219>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  PyInterpreterState_Get
// 1fb: ff d0                         callq   *%rax
// 1fd: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 204: 49 ff 4d 00                   decq    (%r13)
// 208: 75 0f                         jne     0x219 <_JIT_ENTRY+0x219>
// 20a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020c:  R_X86_64_64  PyObject_Free
// 214: 4c 89 ef                      movq    %r13, %rdi
// 217: ff d0                         callq   *%rax
// 219: 49 8b 04 24                   movq    (%r12), %rax
// 21d: 48 85 c0                      testq   %rax, %rax
// 220: 7f 22                         jg      0x244 <_JIT_ENTRY+0x244>
// 222: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000224:  R_X86_64_64  .rodata.str1.1
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _Py_NegativeRefcount
// 236: be e3 01 00 00                movl    $0x1e3, %esi            # imm = 0x1E3
// 23b: 4c 89 e2                      movq    %r12, %rdx
// 23e: ff d0                         callq   *%rax
// 240: 49 8b 04 24                   movq    (%r12), %rax
// 244: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 248: 85 c0                         testl   %eax, %eax
// 24a: 78 21                         js      0x26d <_JIT_ENTRY+0x26d>
// 24c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 256: ff d0                         callq   *%rax
// 258: 49 ff 0c 24                   decq    (%r12)
// 25c: 75 0f                         jne     0x26d <_JIT_ENTRY+0x26d>
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _Py_Dealloc
// 268: 4c 89 e7                      movq    %r12, %rdi
// 26b: ff d0                         callq   *%rax
// 26d: 89 e8                         movl    %ebp, %eax
// 26f: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
// 273: 48 c1 e0 04                   shlq    $0x4, %rax
// 277: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000279:  R_X86_64_64  _PyRuntime
// 281: 48 01 c8                      addq    %rcx, %rax
// 284: 48 05 a0 32 01 00             addq    $0x132a0, %rax          # imm = 0x132A0
// 28a: 49 89 46 f0                   movq    %rax, -0x10(%r14)
// 28e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000290:  R_X86_64_64  _JIT_CONTINUE
// 298: 48 89 df                      movq    %rbx, %rdi
// 29b: 4c 89 ee                      movq    %r13, %rsi
// 29e: 4c 89 fa                      movq    %r15, %rdx
// 2a1: 48 83 c4 08                   addq    $0x8, %rsp
// 2a5: 5b                            popq    %rbx
// 2a6: 41 5c                         popq    %r12
// 2a8: 41 5d                         popq    %r13
// 2aa: 41 5e                         popq    %r14
// 2ac: 41 5f                         popq    %r15
// 2ae: 5d                            popq    %rbp
// 2af: ff e0                         jmpq    *%rax
// 2b1: 
static const unsigned char _DELETE_DEREFplus_BINARY_SUBSCR_STR_INT_code_body[690] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x6d, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xf0, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x6d, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x75, 0x7c, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x67, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x77, 0x60, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x7e, 0x55, 0x41, 0x8b, 0x4c, 0x24, 0x20, 0x89, 0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83, 0xfa, 0x02, 0x74, 0x7a, 0x83, 0xfa, 0x01, 0x0f, 0x85, 0x81, 0x00, 0x00, 0x00, 0xf6, 0xc1, 0x20, 0x0f, 0x85, 0x84, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb6, 0x2c, 0x01, 0xe9, 0xc1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x74, 0x84, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0xf6, 0xc1, 0x20, 0x75, 0x31, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x57, 0xf6, 0xc1, 0x20, 0x75, 0x3b, 0x49, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0x48, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb6, 0x2c, 0x01, 0xeb, 0x31, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x0f, 0xb7, 0x2c, 0x41, 0xeb, 0x17, 0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0x48, 0xc1, 0xe2, 0x04, 0x4a, 0x8d, 0x0c, 0x22, 0x48, 0x83, 0xc1, 0x28, 0x8b, 0x2c, 0x81, 0x83, 0xfd, 0x7f, 0x0f, 0x87, 0x59, 0xff, 0xff, 0xff, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe3, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xe8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xc8, 0x48, 0x05, 0xa0, 0x32, 0x01, 0x00, 0x49, 0x89, 0x46, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_BINARY_SUBSCR_STR_INT_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x87, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x20c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x279, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x290, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_BINARY_SUBSCR_STR_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BINARY_SUBSCR_STR_INT_data_holes[1];

// _DELETE_DEREFplus_BINARY_SUBSCR_TUPLE_INT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BINARY_SUBSCR_TUPLE_INT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 3b                         jle     0x7b <_JIT_ENTRY+0x7b>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 5d                         jns     0xa1 <_JIT_ENTRY+0xa1>
// 44: eb 71                         jmp     0xb7 <_JIT_ENTRY+0xb7>
// 46: 48 8b 33                      movq    (%rbx), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 49 29 de                      subq    %rbx, %r14
// 68: 49 83 c6 b8                   addq    $-0x48, %r14
// 6c: 49 c1 ee 03                   shrq    $0x3, %r14
// 70: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 74: 31 c0                         xorl    %eax, %eax
// 76: e9 9b 01 00 00                jmp     0x216 <_JIT_ENTRY+0x216>
// 7b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007d:  R_X86_64_64  .rodata.str1.1
// 85: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000087:  R_X86_64_64  _Py_NegativeRefcount
// 8f: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 94: 4c 89 e2                      movq    %r12, %rdx
// 97: ff d0                         callq   *%rax
// 99: 49 8b 04 24                   movq    (%r12), %rax
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 16                         js      0xb7 <_JIT_ENTRY+0xb7>
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ab: ff d0                         callq   *%rax
// ad: 49 ff 0c 24                   decq    (%r12)
// b1: 0f 84 10 01 00 00             je      0x1c7 <_JIT_ENTRY+0x1c7>
// b7: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  PyLong_Type
// c5: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// c9: 0f 85 1f 01 00 00             jne     0x1ee <_JIT_ENTRY+0x1ee>
// cf: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  PyTuple_Type
// dd: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// e2: 0f 85 06 01 00 00             jne     0x1ee <_JIT_ENTRY+0x1ee>
// e8: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// ed: 0f 87 fb 00 00 00             ja      0x1ee <_JIT_ENTRY+0x1ee>
// f3: 41 8b 45 18                   movl    0x18(%r13), %eax
// f7: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// fc: 0f 8e ec 00 00 00             jle     0x1ee <_JIT_ENTRY+0x1ee>
// 102: 49 8b 6c c4 18                movq    0x18(%r12,%rax,8), %rbp
// 107: 8b 45 00                      movl    (%rbp), %eax
// 10a: ff c0                         incl    %eax
// 10c: 74 0f                         je      0x11d <_JIT_ENTRY+0x11d>
// 10e: 89 45 00                      movl    %eax, (%rbp)
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 11b: ff d0                         callq   *%rax
// 11d: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 122: 75 28                         jne     0x14c <_JIT_ENTRY+0x14c>
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  PyInterpreterState_Get
// 12e: ff d0                         callq   *%rax
// 130: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 137: 49 ff 4d 00                   decq    (%r13)
// 13b: 75 0f                         jne     0x14c <_JIT_ENTRY+0x14c>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  PyObject_Free
// 147: 4c 89 ef                      movq    %r13, %rdi
// 14a: ff d0                         callq   *%rax
// 14c: 49 8b 04 24                   movq    (%r12), %rax
// 150: 48 85 c0                      testq   %rax, %rax
// 153: 7f 22                         jg      0x177 <_JIT_ENTRY+0x177>
// 155: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000157:  R_X86_64_64  .rodata.str1.1
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _Py_NegativeRefcount
// 169: be fa 01 00 00                movl    $0x1fa, %esi            # imm = 0x1FA
// 16e: 4c 89 e2                      movq    %r12, %rdx
// 171: ff d0                         callq   *%rax
// 173: 49 8b 04 24                   movq    (%r12), %rax
// 177: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 17b: 85 c0                         testl   %eax, %eax
// 17d: 78 21                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 189: ff d0                         callq   *%rax
// 18b: 49 ff 0c 24                   decq    (%r12)
// 18f: 75 0f                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 191: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000193:  R_X86_64_64  _Py_Dealloc
// 19b: 4c 89 e7                      movq    %r12, %rdi
// 19e: ff d0                         callq   *%rax
// 1a0: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _JIT_CONTINUE
// 1ae: 48 89 df                      movq    %rbx, %rdi
// 1b1: 4c 89 ee                      movq    %r13, %rsi
// 1b4: 4c 89 fa                      movq    %r15, %rdx
// 1b7: 48 83 c4 08                   addq    $0x8, %rsp
// 1bb: 5b                            popq    %rbx
// 1bc: 41 5c                         popq    %r12
// 1be: 41 5d                         popq    %r13
// 1c0: 41 5e                         popq    %r14
// 1c2: 41 5f                         popq    %r15
// 1c4: 5d                            popq    %rbp
// 1c5: ff e0                         jmpq    *%rax
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _Py_Dealloc
// 1d1: 4c 89 e7                      movq    %r12, %rdi
// 1d4: ff d0                         callq   *%rax
// 1d6: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  PyLong_Type
// 1e4: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1e8: 0f 84 e1 fe ff ff             je      0xcf <_JIT_ENTRY+0xcf>
// 1ee: 49 29 de                      subq    %rbx, %r14
// 1f1: 49 83 c6 b8                   addq    $-0x48, %r14
// 1f5: 49 c1 ee 03                   shrq    $0x3, %r14
// 1f9: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1fd: 48 8b 03                      movq    (%rbx), %rax
// 200: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000202:  R_X86_64_64  _JIT_TARGET
// 20a: 89 c9                         movl    %ecx, %ecx
// 20c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 210: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 216: 48 83 c4 08                   addq    $0x8, %rsp
// 21a: 5b                            popq    %rbx
// 21b: 41 5c                         popq    %r12
// 21d: 41 5d                         popq    %r13
// 21f: 41 5e                         popq    %r14
// 221: 41 5f                         popq    %r15
// 223: 5d                            popq    %rbp
// 224: c3                            retq
// 225: 
static const unsigned char _DELETE_DEREFplus_BINARY_SUBSCR_TUPLE_INT_code_body[550] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x71, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x9b, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x10, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x1f, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x06, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0xfb, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0xec, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x6c, 0xc4, 0x18, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x0f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfa, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x84, 0xe1, 0xfe, 0xff, 0xff, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_BINARY_SUBSCR_TUPLE_INT_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x87, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x193, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_BINARY_SUBSCR_TUPLE_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BINARY_SUBSCR_TUPLE_INT_data_holes[1];

// _DELETE_DEREFplus_BUILD_CONST_KEY_MAP
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BUILD_CONST_KEY_MAP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 29: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2d: 4d 85 e4                      testq   %r12, %r12
// 30: 74 17                         je      0x49 <_JIT_ENTRY+0x49>
// 32: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 2a                         jle     0x6d <_JIT_ENTRY+0x6d>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 4c                         jns     0x93 <_JIT_ENTRY+0x93>
// 47: eb 60                         jmp     0xa9 <_JIT_ENTRY+0xa9>
// 49: 48 8b 33                      movq    (%rbx), %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 d0                      movzwl  %ax, %edx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _PyEval_FormatExcUnbound
// 63: 4c 89 ff                      movq    %r15, %rdi
// 66: ff d0                         callq   *%rax
// 68: e9 aa 01 00 00                jmp     0x217 <_JIT_ENTRY+0x217>
// 6d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006f:  R_X86_64_64  .rodata.str1.1
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_NegativeRefcount
// 81: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 86: 4c 89 e2                      movq    %r12, %rdx
// 89: ff d0                         callq   *%rax
// 8b: 49 8b 04 24                   movq    (%r12), %rax
// 8f: 85 c0                         testl   %eax, %eax
// 91: 78 16                         js      0xa9 <_JIT_ENTRY+0xa9>
// 93: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000095:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9d: ff d0                         callq   *%rax
// 9f: 49 ff 0c 24                   decq    (%r12)
// a3: 0f 84 20 01 00 00             je      0x1c9 <_JIT_ENTRY+0x1c9>
// a9: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  PyTuple_Type
// b7: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// bc: 0f 85 2f 01 00 00             jne     0x1f1 <_JIT_ENTRY+0x1f1>
// c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c4:  R_X86_64_64  _JIT_OPARG
// cc: 0f b7 c0                      movzwl  %ax, %eax
// cf: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// d4: 0f 85 17 01 00 00             jne     0x1f1 <_JIT_ENTRY+0x1f1>
// da: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// df: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e1:  R_X86_64_64  _JIT_OPARG
// e9: f7 d0                         notl    %eax
// eb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// f0: 48 98                         cltq
// f2: 4d 8d 2c c6                   leaq    (%r14,%rax,8), %r13
// f6: 49 8d 7c 24 18                leaq    0x18(%r12), %rdi
// fb: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000000fd:  R_X86_64_64  _JIT_OPARG
// 105: 45 0f b7 c7                   movzwl  %r15w, %r8d
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _PyDict_FromItems
// 113: be 01 00 00 00                movl    $0x1, %esi
// 118: b9 01 00 00 00                movl    $0x1, %ecx
// 11d: 4c 89 ea                      movq    %r13, %rdx
// 120: ff d0                         callq   *%rax
// 122: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 127: 41 f7 c7 ff ff 00 00          testl   $0xffff, %r15d          # imm = 0xFFFF
// 12e: 0f 8e 06 01 00 00             jle     0x23a <_JIT_ENTRY+0x23a>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _JIT_OPARG
// 13e: 44 0f b7 f8                   movzwl  %ax, %r15d
// 142: 49 ff c7                      incq    %r15
// 145: eb 16                         jmp     0x15d <_JIT_ENTRY+0x15d>
// 147: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 150: 49 ff cf                      decq    %r15
// 153: 49 83 ff 01                   cmpq    $0x1, %r15
// 157: 0f 8e dd 00 00 00             jle     0x23a <_JIT_ENTRY+0x23a>
// 15d: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// 161: 49 8b 6c c5 00                movq    (%r13,%rax,8), %rbp
// 166: 48 8b 45 00                   movq    (%rbp), %rax
// 16a: 48 85 c0                      testq   %rax, %rax
// 16d: 7e 11                         jle     0x180 <_JIT_ENTRY+0x180>
// 16f: 85 c0                         testl   %eax, %eax
// 171: 78 dd                         js      0x150 <_JIT_ENTRY+0x150>
// 173: eb 31                         jmp     0x1a6 <_JIT_ENTRY+0x1a6>
// 175: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
// 180: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000182:  R_X86_64_64  .rodata.str1.1
// 18a: be ac 05 00 00                movl    $0x5ac, %esi            # imm = 0x5AC
// 18f: 48 89 ea                      movq    %rbp, %rdx
// 192: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000194:  R_X86_64_64  _Py_NegativeRefcount
// 19c: ff d0                         callq   *%rax
// 19e: 48 8b 45 00                   movq    (%rbp), %rax
// 1a2: 85 c0                         testl   %eax, %eax
// 1a4: 78 aa                         js      0x150 <_JIT_ENTRY+0x150>
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b0: ff d0                         callq   *%rax
// 1b2: 48 ff 4d 00                   decq    (%rbp)
// 1b6: 75 98                         jne     0x150 <_JIT_ENTRY+0x150>
// 1b8: 48 89 ef                      movq    %rbp, %rdi
// 1bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bd:  R_X86_64_64  _Py_Dealloc
// 1c5: ff d0                         callq   *%rax
// 1c7: eb 87                         jmp     0x150 <_JIT_ENTRY+0x150>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_Dealloc
// 1d3: 4c 89 e7                      movq    %r12, %rdi
// 1d6: ff d0                         callq   *%rax
// 1d8: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  PyTuple_Type
// 1e6: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1eb: 0f 84 d1 fe ff ff             je      0xc2 <_JIT_ENTRY+0xc2>
// 1f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f3:  R_X86_64_64  PyExc_SystemError
// 1fb: 48 8b 30                      movq    (%rax), %rsi
// 1fe: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000200:  R_X86_64_64  .rodata.str1.1+0x39
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _PyErr_SetString
// 212: 4c 89 ff                      movq    %r15, %rdi
// 215: ff d0                         callq   *%rax
// 217: 4d 89 f5                      movq    %r14, %r13
// 21a: 49 29 dd                      subq    %rbx, %r13
// 21d: 49 83 c5 b8                   addq    $-0x48, %r13
// 221: 49 c1 ed 03                   shrq    $0x3, %r13
// 225: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 229: 31 c0                         xorl    %eax, %eax
// 22b: 48 83 c4 18                   addq    $0x18, %rsp
// 22f: 5b                            popq    %rbx
// 230: 41 5c                         popq    %r12
// 232: 41 5d                         popq    %r13
// 234: 41 5e                         popq    %r14
// 236: 41 5f                         popq    %r15
// 238: 5d                            popq    %rbp
// 239: c3                            retq
// 23a: 49 8b 04 24                   movq    (%r12), %rax
// 23e: 48 85 c0                      testq   %rax, %rax
// 241: 7f 22                         jg      0x265 <_JIT_ENTRY+0x265>
// 243: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000245:  R_X86_64_64  .rodata.str1.1
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _Py_NegativeRefcount
// 257: be ae 05 00 00                movl    $0x5ae, %esi            # imm = 0x5AE
// 25c: 4c 89 e2                      movq    %r12, %rdx
// 25f: ff d0                         callq   *%rax
// 261: 49 8b 04 24                   movq    (%r12), %rax
// 265: 85 c0                         testl   %eax, %eax
// 267: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 26c: 78 21                         js      0x28f <_JIT_ENTRY+0x28f>
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 278: ff d0                         callq   *%rax
// 27a: 49 ff 0c 24                   decq    (%r12)
// 27e: 75 0f                         jne     0x28f <_JIT_ENTRY+0x28f>
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_Dealloc
// 28a: 4c 89 e7                      movq    %r12, %rdi
// 28d: ff d0                         callq   *%rax
// 28f: 4d 85 ff                      testq   %r15, %r15
// 292: 74 86                         je      0x21a <_JIT_ENTRY+0x21a>
// 294: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000296:  R_X86_64_64  _JIT_OPARG
// 29e: 0f b7 c8                      movzwl  %ax, %ecx
// 2a1: f7 d0                         notl    %eax
// 2a3: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 2a8: 48 98                         cltq
// 2aa: 4d 89 3c c6                   movq    %r15, (%r14,%rax,8)
// 2ae: 48 c1 e1 03                   shlq    $0x3, %rcx
// 2b2: 49 29 ce                      subq    %rcx, %r14
// 2b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b7:  R_X86_64_64  _JIT_CONTINUE
// 2bf: 48 89 df                      movq    %rbx, %rdi
// 2c2: 4c 89 f6                      movq    %r14, %rsi
// 2c5: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 2ca: 48 83 c4 18                   addq    $0x18, %rsp
// 2ce: 5b                            popq    %rbx
// 2cf: 41 5c                         popq    %r12
// 2d1: 41 5d                         popq    %r13
// 2d3: 41 5e                         popq    %r14
// 2d5: 41 5f                         popq    %r15
// 2d7: 5d                            popq    %rbp
// 2d8: ff e0                         jmpq    *%rax
// 2da: 
static const unsigned char _DELETE_DEREFplus_BUILD_CONST_KEY_MAP_code_body[731] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x60, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xaa, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x20, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x2f, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0x17, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x8d, 0x2c, 0xc6, 0x49, 0x8d, 0x7c, 0x24, 0x18, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0f, 0xb7, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xf7, 0xc7, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x06, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x16, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0xdd, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x49, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x11, 0x85, 0xc0, 0x78, 0xdd, 0xeb, 0x31, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xac, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x48, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x84, 0xd1, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xff, 0x74, 0x86, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x4d, 0x89, 0x3c, 0xc6, 0x48, 0xc1, 0xe1, 0x03, 0x49, 0x29, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_BUILD_CONST_KEY_MAP_code_holes[28] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x194, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1bd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x296, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x2b7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00bad BUILD_CONST_KEY_MAP keys argument\x00'
// 5f: 00
static const unsigned char _DELETE_DEREFplus_BUILD_CONST_KEY_MAP_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x62, 0x61, 0x64, 0x20, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BUILD_CONST_KEY_MAP_data_holes[1];

// _DELETE_DEREFplus_BUILD_LIST
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BUILD_LIST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 2d                         jle     0x6a <_JIT_ENTRY+0x6a>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 4f                         jns     0x90 <_JIT_ENTRY+0x90>
// 41: eb 6e                         jmp     0xb1 <_JIT_ENTRY+0xb1>
// 43: 48 8b 33                      movq    (%rbx), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4d 89 f4                      movq    %r14, %r12
// 65: e9 bb 00 00 00                jmp     0x125 <_JIT_ENTRY+0x125>
// 6a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006c:  R_X86_64_64  .rodata.str1.1
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _Py_NegativeRefcount
// 7e: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 83: 4c 89 e2                      movq    %r12, %rdx
// 86: ff d0                         callq   *%rax
// 88: 49 8b 04 24                   movq    (%r12), %rax
// 8c: 85 c0                         testl   %eax, %eax
// 8e: 78 21                         js      0xb1 <_JIT_ENTRY+0xb1>
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9a: ff d0                         callq   *%rax
// 9c: 49 ff 0c 24                   decq    (%r12)
// a0: 75 0f                         jne     0xb1 <_JIT_ENTRY+0xb1>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_Dealloc
// ac: 4c 89 e7                      movq    %r12, %rdi
// af: ff d0                         callq   *%rax
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _JIT_OPARG
// bb: 0f b7 f0                      movzwl  %ax, %esi
// be: 48 8d 04 f5 00 00 00 00       leaq    (,%rsi,8), %rax
// c6: 4d 89 f4                      movq    %r14, %r12
// c9: 49 29 c4                      subq    %rax, %r12
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  _PyList_FromArraySteal
// d6: 4c 89 e7                      movq    %r12, %rdi
// d9: ff d0                         callq   *%rax
// db: 48 85 c0                      testq   %rax, %rax
// de: 74 45                         je      0x125 <_JIT_ENTRY+0x125>
// e0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e2:  R_X86_64_64  _JIT_OPARG
// ea: 0f b7 d1                      movzwl  %cx, %edx
// ed: 0f b7 c9                      movzwl  %cx, %ecx
// f0: 48 c1 e1 03                   shlq    $0x3, %rcx
// f4: 48 f7 d9                      negq    %rcx
// f7: 49 89 04 0e                   movq    %rax, (%r14,%rcx)
// fb: b8 01 00 00 00                movl    $0x1, %eax
// 100: 29 d0                         subl    %edx, %eax
// 102: 48 98                         cltq
// 104: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 108: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010a:  R_X86_64_64  _JIT_CONTINUE
// 112: 48 89 df                      movq    %rbx, %rdi
// 115: 4c 89 fa                      movq    %r15, %rdx
// 118: 48 83 c4 08                   addq    $0x8, %rsp
// 11c: 5b                            popq    %rbx
// 11d: 41 5c                         popq    %r12
// 11f: 41 5e                         popq    %r14
// 121: 41 5f                         popq    %r15
// 123: ff e0                         jmpq    *%rax
// 125: 49 29 dc                      subq    %rbx, %r12
// 128: 49 83 c4 b8                   addq    $-0x48, %r12
// 12c: 49 c1 ec 03                   shrq    $0x3, %r12
// 130: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 134: 31 c0                         xorl    %eax, %eax
// 136: 48 83 c4 08                   addq    $0x8, %rsp
// 13a: 5b                            popq    %rbx
// 13b: 41 5c                         popq    %r12
// 13d: 41 5e                         popq    %r14
// 13f: 41 5f                         popq    %r15
// 141: c3                            retq
// 142: 
static const unsigned char _DELETE_DEREFplus_BUILD_LIST_code_body[323] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2d, 0x85, 0xc0, 0x79, 0x4f, 0xeb, 0x6e, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0xe9, 0xbb, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0x8d, 0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x45, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x49, 0x89, 0x04, 0x0e, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x98, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_BUILD_LIST_code_holes[12] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_FromArraySteal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_BUILD_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BUILD_LIST_data_holes[1];

// _DELETE_DEREFplus_BUILD_MAP
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BUILD_MAP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 29: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2d: 4d 85 e4                      testq   %r12, %r12
// 30: 74 2b                         je      0x5d <_JIT_ENTRY+0x5d>
// 32: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 37: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3f: 49 8b 04 24                   movq    (%r12), %rax
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 7e 3c                         jle     0x84 <_JIT_ENTRY+0x84>
// 48: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 4d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000004f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 57: 85 c0                         testl   %eax, %eax
// 59: 79 5e                         jns     0xb9 <_JIT_ENTRY+0xb9>
// 5b: eb 74                         jmp     0xd1 <_JIT_ENTRY+0xd1>
// 5d: 48 8b 33                      movq    (%rbx), %rsi
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 d0                      movzwl  %ax, %edx
// 6d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006f:  R_X86_64_64  _PyEval_FormatExcUnbound
// 77: 48 89 cf                      movq    %rcx, %rdi
// 7a: ff d0                         callq   *%rax
// 7c: 4d 89 f4                      movq    %r14, %r12
// 7f: e9 79 01 00 00                jmp     0x1fd <_JIT_ENTRY+0x1fd>
// 84: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000086:  R_X86_64_64  .rodata.str1.1
// 8e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000090:  R_X86_64_64  _Py_NegativeRefcount
// 98: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9d: 4c 89 e2                      movq    %r12, %rdx
// a0: ff d0                         callq   *%rax
// a2: 49 8b 04 24                   movq    (%r12), %rax
// a6: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// ab: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b5: 85 c0                         testl   %eax, %eax
// b7: 78 18                         js      0xd1 <_JIT_ENTRY+0xd1>
// b9: 41 ff d5                      callq   *%r13
// bc: 49 ff 0c 24                   decq    (%r12)
// c0: 75 0f                         jne     0xd1 <_JIT_ENTRY+0xd1>
// c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c4:  R_X86_64_64  _Py_Dealloc
// cc: 4c 89 e7                      movq    %r12, %rdi
// cf: ff d0                         callq   *%rax
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _JIT_OPARG
// db: 0f b7 d8                      movzwl  %ax, %ebx
// de: 89 d9                         movl    %ebx, %ecx
// e0: f7 d9                         negl    %ecx
// e2: 01 c9                         addl    %ecx, %ecx
// e4: 48 63 c9                      movslq  %ecx, %rcx
// e7: 4d 8d 24 ce                   leaq    (%r14,%rcx,8), %r12
// eb: 4c 89 74 24 10                movq    %r14, 0x10(%rsp)
// f0: 49 8d 14 ce                   leaq    (%r14,%rcx,8), %rdx
// f4: 48 83 c2 08                   addq    $0x8, %rdx
// f8: 44 0f b7 c0                   movzwl  %ax, %r8d
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _PyDict_FromItems
// 106: be 02 00 00 00                movl    $0x2, %esi
// 10b: b9 02 00 00 00                movl    $0x2, %ecx
// 110: 4c 89 e7                      movq    %r12, %rdi
// 113: ff d0                         callq   *%rax
// 115: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 11a: 01 db                         addl    %ebx, %ebx
// 11c: 85 db                         testl   %ebx, %ebx
// 11e: 0f 8e 79 00 00 00             jle     0x19d <_JIT_ENTRY+0x19d>
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  _JIT_OPARG
// 12e: 0f b7 c0                      movzwl  %ax, %eax
// 131: 4c 8d 34 00                   leaq    (%rax,%rax), %r14
// 135: 49 ff c6                      incq    %r14
// 138: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 000000000000013a:  R_X86_64_64  .rodata.str1.1
// 142: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 0000000000000144:  R_X86_64_64  _Py_NegativeRefcount
// 14c: eb 0b                         jmp     0x159 <_JIT_ENTRY+0x159>
// 14e: 66 90                         nop
// 150: 49 ff ce                      decq    %r14
// 153: 49 83 fe 01                   cmpq    $0x1, %r14
// 157: 7e 44                         jle     0x19d <_JIT_ENTRY+0x19d>
// 159: 41 8d 46 fe                   leal    -0x2(%r14), %eax
// 15d: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// 161: 49 8b 07                      movq    (%r15), %rax
// 164: 48 85 c0                      testq   %rax, %rax
// 167: 7e 07                         jle     0x170 <_JIT_ENTRY+0x170>
// 169: 85 c0                         testl   %eax, %eax
// 16b: 78 e3                         js      0x150 <_JIT_ENTRY+0x150>
// 16d: eb 15                         jmp     0x184 <_JIT_ENTRY+0x184>
// 16f: 90                            nop
// 170: 48 89 ef                      movq    %rbp, %rdi
// 173: be 7b 05 00 00                movl    $0x57b, %esi            # imm = 0x57B
// 178: 4c 89 fa                      movq    %r15, %rdx
// 17b: ff d3                         callq   *%rbx
// 17d: 49 8b 07                      movq    (%r15), %rax
// 180: 85 c0                         testl   %eax, %eax
// 182: 78 cc                         js      0x150 <_JIT_ENTRY+0x150>
// 184: 41 ff d5                      callq   *%r13
// 187: 49 ff 0f                      decq    (%r15)
// 18a: 75 c4                         jne     0x150 <_JIT_ENTRY+0x150>
// 18c: 4c 89 ff                      movq    %r15, %rdi
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: ff d0                         callq   *%rax
// 19b: eb b3                         jmp     0x150 <_JIT_ENTRY+0x150>
// 19d: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// 1a2: 48 85 f6                      testq   %rsi, %rsi
// 1a5: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 1aa: 74 51                         je      0x1fd <_JIT_ENTRY+0x1fd>
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _JIT_OPARG
// 1b6: 0f b7 c0                      movzwl  %ax, %eax
// 1b9: 89 c1                         movl    %eax, %ecx
// 1bb: f7 d9                         negl    %ecx
// 1bd: 01 c9                         addl    %ecx, %ecx
// 1bf: 48 63 c9                      movslq  %ecx, %rcx
// 1c2: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1c7: 48 89 34 ca                   movq    %rsi, (%rdx,%rcx,8)
// 1cb: 01 c0                         addl    %eax, %eax
// 1cd: b9 01 00 00 00                movl    $0x1, %ecx
// 1d2: 29 c1                         subl    %eax, %ecx
// 1d4: 48 63 c1                      movslq  %ecx, %rax
// 1d7: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _JIT_CONTINUE
// 1e5: 48 89 df                      movq    %rbx, %rdi
// 1e8: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1ed: 48 83 c4 28                   addq    $0x28, %rsp
// 1f1: 5b                            popq    %rbx
// 1f2: 41 5c                         popq    %r12
// 1f4: 41 5d                         popq    %r13
// 1f6: 41 5e                         popq    %r14
// 1f8: 41 5f                         popq    %r15
// 1fa: 5d                            popq    %rbp
// 1fb: ff e0                         jmpq    *%rax
// 1fd: 49 29 dc                      subq    %rbx, %r12
// 200: 49 83 c4 b8                   addq    $-0x48, %r12
// 204: 49 c1 ec 03                   shrq    $0x3, %r12
// 208: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 20c: 31 c0                         xorl    %eax, %eax
// 20e: 48 83 c4 28                   addq    $0x28, %rsp
// 212: 5b                            popq    %rbx
// 213: 41 5c                         popq    %r12
// 215: 41 5d                         popq    %r13
// 217: 41 5e                         popq    %r14
// 219: 41 5f                         popq    %r15
// 21b: 5d                            popq    %rbp
// 21c: c3                            retq
// 21d: 
static const unsigned char _DELETE_DEREFplus_BUILD_MAP_code_body[542] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x2b, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3c, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x5e, 0xeb, 0x74, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0xe9, 0x79, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd8, 0x89, 0xd9, 0xf7, 0xd9, 0x01, 0xc9, 0x48, 0x63, 0xc9, 0x4d, 0x8d, 0x24, 0xce, 0x4c, 0x89, 0x74, 0x24, 0x10, 0x49, 0x8d, 0x14, 0xce, 0x48, 0x83, 0xc2, 0x08, 0x44, 0x0f, 0xb7, 0xc0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0x01, 0xdb, 0x85, 0xdb, 0x0f, 0x8e, 0x79, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4c, 0x8d, 0x34, 0x00, 0x49, 0xff, 0xc6, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x0b, 0x66, 0x90, 0x49, 0xff, 0xce, 0x49, 0x83, 0xfe, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x46, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x15, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x7b, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd3, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xcc, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0f, 0x75, 0xc4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x85, 0xf6, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x74, 0x51, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd9, 0x01, 0xc9, 0x48, 0x63, 0xc9, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x89, 0x34, 0xca, 0x01, 0xc0, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_BUILD_MAP_code_holes[17] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_FromItems, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_BUILD_MAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BUILD_MAP_data_holes[1];

// _DELETE_DEREFplus_BUILD_SET
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BUILD_SET.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 49 89 f5                      movq    %rsi, %r13
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 29: 4c 8b 78 10                   movq    0x10(%rax), %r15
// 2d: 4d 85 ff                      testq   %r15, %r15
// 30: 74 16                         je      0x48 <_JIT_ENTRY+0x48>
// 32: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3a: 49 8b 07                      movq    (%r15), %rax
// 3d: 48 85 c0                      testq   %rax, %rax
// 40: 7e 2a                         jle     0x6c <_JIT_ENTRY+0x6c>
// 42: 85 c0                         testl   %eax, %eax
// 44: 79 4b                         jns     0x91 <_JIT_ENTRY+0x91>
// 46: eb 69                         jmp     0xb1 <_JIT_ENTRY+0xb1>
// 48: 48 8b 33                      movq    (%rbx), %rsi
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: 0f b7 d0                      movzwl  %ax, %edx
// 58: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005a:  R_X86_64_64  _PyEval_FormatExcUnbound
// 62: 4c 89 e7                      movq    %r12, %rdi
// 65: ff d0                         callq   *%rax
// 67: e9 f7 01 00 00                jmp     0x263 <_JIT_ENTRY+0x263>
// 6c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006e:  R_X86_64_64  .rodata.str1.1
// 76: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000078:  R_X86_64_64  _Py_NegativeRefcount
// 80: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 85: 4c 89 fa                      movq    %r15, %rdx
// 88: ff d0                         callq   *%rax
// 8a: 49 8b 07                      movq    (%r15), %rax
// 8d: 85 c0                         testl   %eax, %eax
// 8f: 78 20                         js      0xb1 <_JIT_ENTRY+0xb1>
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9b: ff d0                         callq   *%rax
// 9d: 49 ff 0f                      decq    (%r15)
// a0: 75 0f                         jne     0xb1 <_JIT_ENTRY+0xb1>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_Dealloc
// ac: 4c 89 ff                      movq    %r15, %rdi
// af: ff d0                         callq   *%rax
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  PySet_New
// bb: 31 ff                         xorl    %edi, %edi
// bd: ff d0                         callq   *%rax
// bf: 48 85 c0                      testq   %rax, %rax
// c2: 0f 84 9b 01 00 00             je      0x263 <_JIT_ENTRY+0x263>
// c8: 49 89 c7                      movq    %rax, %r15
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  _JIT_OPARG
// d5: 66 85 c0                      testw   %ax, %ax
// d8: 0f 84 ed 00 00 00             je      0x1cb <_JIT_ENTRY+0x1cb>
// de: 4c 89 3c 24                   movq    %r15, (%rsp)
// e2: 4c 89 64 24 08                movq    %r12, 0x8(%rsp)
// e7: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// ec: 0f b7 c0                      movzwl  %ax, %eax
// ef: 48 c1 e0 03                   shlq    $0x3, %rax
// f3: 4d 89 ee                      movq    %r13, %r14
// f6: 49 29 c6                      subq    %rax, %r14
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _JIT_OPARG
// 103: 0f b7 c0                      movzwl  %ax, %eax
// 106: 83 f8 02                      cmpl    $0x2, %eax
// 109: bb 01 00 00 00                movl    $0x1, %ebx
// 10e: 0f 43 d8                      cmovael %eax, %ebx
// 111: 45 31 e4                      xorl    %r12d, %r12d
// 114: 31 ed                         xorl    %ebp, %ebp
// 116: eb 10                         jmp     0x128 <_JIT_ENTRY+0x128>
// 118: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 120: 49 ff c4                      incq    %r12
// 123: 4c 39 e3                      cmpq    %r12, %rbx
// 126: 74 7f                         je      0x1a7 <_JIT_ENTRY+0x1a7>
// 128: 4f 8b 3c e6                   movq    (%r14,%r12,8), %r15
// 12c: 85 ed                         testl   %ebp, %ebp
// 12e: 74 10                         je      0x140 <_JIT_ENTRY+0x140>
// 130: 49 8b 07                      movq    (%r15), %rax
// 133: 48 85 c0                      testq   %rax, %rax
// 136: 7e 25                         jle     0x15d <_JIT_ENTRY+0x15d>
// 138: 85 c0                         testl   %eax, %eax
// 13a: 78 e4                         js      0x120 <_JIT_ENTRY+0x120>
// 13c: eb 44                         jmp     0x182 <_JIT_ENTRY+0x182>
// 13e: 66 90                         nop
// 140: 48 8b 3c 24                   movq    (%rsp), %rdi
// 144: 4c 89 fe                      movq    %r15, %rsi
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  PySet_Add
// 151: ff d0                         callq   *%rax
// 153: 89 c5                         movl    %eax, %ebp
// 155: 49 8b 07                      movq    (%r15), %rax
// 158: 48 85 c0                      testq   %rax, %rax
// 15b: 7f db                         jg      0x138 <_JIT_ENTRY+0x138>
// 15d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015f:  R_X86_64_64  .rodata.str1.1
// 167: be 66 05 00 00                movl    $0x566, %esi            # imm = 0x566
// 16c: 4c 89 fa                      movq    %r15, %rdx
// 16f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000171:  R_X86_64_64  _Py_NegativeRefcount
// 179: ff d0                         callq   *%rax
// 17b: 49 8b 07                      movq    (%r15), %rax
// 17e: 85 c0                         testl   %eax, %eax
// 180: 78 9e                         js      0x120 <_JIT_ENTRY+0x120>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18c: ff d0                         callq   *%rax
// 18e: 49 ff 0f                      decq    (%r15)
// 191: 75 8d                         jne     0x120 <_JIT_ENTRY+0x120>
// 193: 4c 89 ff                      movq    %r15, %rdi
// 196: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000198:  R_X86_64_64  _Py_Dealloc
// 1a0: ff d0                         callq   *%rax
// 1a2: e9 79 ff ff ff                jmp     0x120 <_JIT_ENTRY+0x120>
// 1a7: 85 ed                         testl   %ebp, %ebp
// 1a9: 48 8b 5c 24 10                movq    0x10(%rsp), %rbx
// 1ae: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 1b3: 4c 8b 3c 24                   movq    (%rsp), %r15
// 1b7: 74 12                         je      0x1cb <_JIT_ENTRY+0x1cb>
// 1b9: 49 8b 07                      movq    (%r15), %rax
// 1bc: 48 85 c0                      testq   %rax, %rax
// 1bf: 7e 5a                         jle     0x21b <_JIT_ENTRY+0x21b>
// 1c1: 85 c0                         testl   %eax, %eax
// 1c3: 0f 88 97 00 00 00             js      0x260 <_JIT_ENTRY+0x260>
// 1c9: eb 75                         jmp     0x240 <_JIT_ENTRY+0x240>
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _JIT_OPARG
// 1d5: 0f b7 c8                      movzwl  %ax, %ecx
// 1d8: 0f b7 c0                      movzwl  %ax, %eax
// 1db: 48 c1 e0 03                   shlq    $0x3, %rax
// 1df: 48 f7 d8                      negq    %rax
// 1e2: 4d 89 7c 05 00                movq    %r15, (%r13,%rax)
// 1e7: b8 01 00 00 00                movl    $0x1, %eax
// 1ec: 29 c8                         subl    %ecx, %eax
// 1ee: 48 98                         cltq
// 1f0: 48 8d 34 c5 00 00 00 00       leaq    (,%rax,8), %rsi
// 1f8: 4c 01 ee                      addq    %r13, %rsi
// 1fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fd:  R_X86_64_64  _JIT_CONTINUE
// 205: 48 89 df                      movq    %rbx, %rdi
// 208: 4c 89 e2                      movq    %r12, %rdx
// 20b: 48 83 c4 18                   addq    $0x18, %rsp
// 20f: 5b                            popq    %rbx
// 210: 41 5c                         popq    %r12
// 212: 41 5d                         popq    %r13
// 214: 41 5e                         popq    %r14
// 216: 41 5f                         popq    %r15
// 218: 5d                            popq    %rbp
// 219: ff e0                         jmpq    *%rax
// 21b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021d:  R_X86_64_64  .rodata.str1.1
// 225: be 69 05 00 00                movl    $0x569, %esi            # imm = 0x569
// 22a: 4c 89 fa                      movq    %r15, %rdx
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_NegativeRefcount
// 237: ff d0                         callq   *%rax
// 239: 49 8b 07                      movq    (%r15), %rax
// 23c: 85 c0                         testl   %eax, %eax
// 23e: 78 20                         js      0x260 <_JIT_ENTRY+0x260>
// 240: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000242:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 24a: ff d0                         callq   *%rax
// 24c: 49 ff 0f                      decq    (%r15)
// 24f: 75 0f                         jne     0x260 <_JIT_ENTRY+0x260>
// 251: 4c 89 ff                      movq    %r15, %rdi
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _Py_Dealloc
// 25e: ff d0                         callq   *%rax
// 260: 4d 89 f5                      movq    %r14, %r13
// 263: 49 29 dd                      subq    %rbx, %r13
// 266: 49 83 c5 b8                   addq    $-0x48, %r13
// 26a: 49 c1 ed 03                   shrq    $0x3, %r13
// 26e: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 272: 31 c0                         xorl    %eax, %eax
// 274: 48 83 c4 18                   addq    $0x18, %rsp
// 278: 5b                            popq    %rbx
// 279: 41 5c                         popq    %r12
// 27b: 41 5d                         popq    %r13
// 27d: 41 5e                         popq    %r14
// 27f: 41 5f                         popq    %r15
// 281: 5d                            popq    %rbp
// 282: c3                            retq
// 283: 
static const unsigned char _DELETE_DEREFplus_BUILD_SET_code_body[644] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x78, 0x10, 0x4d, 0x85, 0xff, 0x74, 0x16, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4b, 0xeb, 0x69, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xf7, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x9b, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0xed, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x3c, 0x24, 0x4c, 0x89, 0x64, 0x24, 0x08, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x83, 0xf8, 0x02, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x43, 0xd8, 0x45, 0x31, 0xe4, 0x31, 0xed, 0xeb, 0x10, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc4, 0x4c, 0x39, 0xe3, 0x74, 0x7f, 0x4f, 0x8b, 0x3c, 0xe6, 0x85, 0xed, 0x74, 0x10, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x25, 0x85, 0xc0, 0x78, 0xe4, 0xeb, 0x44, 0x66, 0x90, 0x48, 0x8b, 0x3c, 0x24, 0x4c, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7f, 0xdb, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x9e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x8d, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xe9, 0x79, 0xff, 0xff, 0xff, 0x85, 0xed, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x4c, 0x8b, 0x3c, 0x24, 0x74, 0x12, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x5a, 0x85, 0xc0, 0x0f, 0x88, 0x97, 0x00, 0x00, 0x00, 0xeb, 0x75, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x4d, 0x89, 0x7c, 0x05, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe2, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x69, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_BUILD_SET_code_holes[22] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x78, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_New, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x171, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x21d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_BUILD_SET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BUILD_SET_data_holes[1];

// _DELETE_DEREFplus_BUILD_SLICE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BUILD_SLICE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d4                      movq    %rdx, %r12
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 29: 4c 8b 78 10                   movq    0x10(%rax), %r15
// 2d: 4d 85 ff                      testq   %r15, %r15
// 30: 74 16                         je      0x48 <_JIT_ENTRY+0x48>
// 32: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3a: 49 8b 07                      movq    (%r15), %rax
// 3d: 48 85 c0                      testq   %rax, %rax
// 40: 7e 2a                         jle     0x6c <_JIT_ENTRY+0x6c>
// 42: 85 c0                         testl   %eax, %eax
// 44: 79 4b                         jns     0x91 <_JIT_ENTRY+0x91>
// 46: eb 5a                         jmp     0xa2 <_JIT_ENTRY+0xa2>
// 48: 48 8b 33                      movq    (%rbx), %rsi
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: 0f b7 d0                      movzwl  %ax, %edx
// 58: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005a:  R_X86_64_64  _PyEval_FormatExcUnbound
// 62: 4c 89 e7                      movq    %r12, %rdi
// 65: ff d0                         callq   *%rax
// 67: e9 1b 02 00 00                jmp     0x287 <_JIT_ENTRY+0x287>
// 6c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006e:  R_X86_64_64  .rodata.str1.1
// 76: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000078:  R_X86_64_64  _Py_NegativeRefcount
// 80: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 85: 4c 89 fa                      movq    %r15, %rdx
// 88: ff d0                         callq   *%rax
// 8a: 49 8b 07                      movq    (%r15), %rax
// 8d: 85 c0                         testl   %eax, %eax
// 8f: 78 11                         js      0xa2 <_JIT_ENTRY+0xa2>
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9b: ff d0                         callq   *%rax
// 9d: 49 ff 0f                      decq    (%r15)
// a0: 74 25                         je      0xc7 <_JIT_ENTRY+0xc7>
// a2: 4c 89 64 24 08                movq    %r12, 0x8(%rsp)
// a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a9:  R_X86_64_64  _JIT_OPARG
// b1: 66 83 f8 03                   cmpw    $0x3, %ax
// b5: 75 34                         jne     0xeb <_JIT_ENTRY+0xeb>
// b7: 31 c9                         xorl    %ecx, %ecx
// b9: 66 83 f8 03                   cmpw    $0x3, %ax
// bd: 0f 95 c1                      setne   %cl
// c0: 4d 8b 64 ce f8                movq    -0x8(%r14,%rcx,8), %r12
// c5: eb 27                         jmp     0xee <_JIT_ENTRY+0xee>
// c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c9:  R_X86_64_64  _Py_Dealloc
// d1: 4c 89 ff                      movq    %r15, %rdi
// d4: ff d0                         callq   *%rax
// d6: 4c 89 64 24 08                movq    %r12, 0x8(%rsp)
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _JIT_OPARG
// e5: 66 83 f8 03                   cmpw    $0x3, %ax
// e9: 74 cc                         je      0xb7 <_JIT_ENTRY+0xb7>
// eb: 45 31 e4                      xorl    %r12d, %r12d
// ee: 31 c9                         xorl    %ecx, %ecx
// f0: 66 83 f8 03                   cmpw    $0x3, %ax
// f4: 0f 94 c1                      sete    %cl
// f7: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
// fc: 29 c8                         subl    %ecx, %eax
// fe: f7 d1                         notl    %ecx
// 100: 48 63 c9                      movslq  %ecx, %rcx
// 103: 48 89 0c 24                   movq    %rcx, (%rsp)
// 107: 49 8b 2c ce                   movq    (%r14,%rcx,8), %rbp
// 10b: 48 98                         cltq
// 10d: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 112: 4d 8b 3c c6                   movq    (%r14,%rax,8), %r15
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  PySlice_New
// 120: 4c 89 ff                      movq    %r15, %rdi
// 123: 48 89 ee                      movq    %rbp, %rsi
// 126: 4c 89 e2                      movq    %r12, %rdx
// 129: ff d0                         callq   *%rax
// 12b: 49 89 c5                      movq    %rax, %r13
// 12e: 49 8b 07                      movq    (%r15), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 06                         jle     0x13c <_JIT_ENTRY+0x13c>
// 136: 85 c0                         testl   %eax, %eax
// 138: 79 27                         jns     0x161 <_JIT_ENTRY+0x161>
// 13a: eb 36                         jmp     0x172 <_JIT_ENTRY+0x172>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be 86 0c 00 00                movl    $0xc86, %esi            # imm = 0xC86
// 155: 4c 89 fa                      movq    %r15, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 49 8b 07                      movq    (%r15), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 11                         js      0x172 <_JIT_ENTRY+0x172>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 0f                      decq    (%r15)
// 170: 74 0f                         je      0x181 <_JIT_ENTRY+0x181>
// 172: 48 8b 45 00                   movq    (%rbp), %rax
// 176: 48 85 c0                      testq   %rax, %rax
// 179: 7e 1e                         jle     0x199 <_JIT_ENTRY+0x199>
// 17b: 85 c0                         testl   %eax, %eax
// 17d: 79 40                         jns     0x1bf <_JIT_ENTRY+0x1bf>
// 17f: eb 5f                         jmp     0x1e0 <_JIT_ENTRY+0x1e0>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_Dealloc
// 18b: 4c 89 ff                      movq    %r15, %rdi
// 18e: ff d0                         callq   *%rax
// 190: 48 8b 45 00                   movq    (%rbp), %rax
// 194: 48 85 c0                      testq   %rax, %rax
// 197: 7f e2                         jg      0x17b <_JIT_ENTRY+0x17b>
// 199: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019b:  R_X86_64_64  .rodata.str1.1
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  _Py_NegativeRefcount
// 1ad: be 87 0c 00 00                movl    $0xc87, %esi            # imm = 0xC87
// 1b2: 48 89 ea                      movq    %rbp, %rdx
// 1b5: ff d0                         callq   *%rax
// 1b7: 48 8b 45 00                   movq    (%rbp), %rax
// 1bb: 85 c0                         testl   %eax, %eax
// 1bd: 78 21                         js      0x1e0 <_JIT_ENTRY+0x1e0>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c9: ff d0                         callq   *%rax
// 1cb: 48 ff 4d 00                   decq    (%rbp)
// 1cf: 75 0f                         jne     0x1e0 <_JIT_ENTRY+0x1e0>
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_Dealloc
// 1db: 48 89 ef                      movq    %rbp, %rdi
// 1de: ff d0                         callq   *%rax
// 1e0: 4d 85 e4                      testq   %r12, %r12
// 1e3: 74 47                         je      0x22c <_JIT_ENTRY+0x22c>
// 1e5: 49 8b 04 24                   movq    (%r12), %rax
// 1e9: 48 85 c0                      testq   %rax, %rax
// 1ec: 7e 06                         jle     0x1f4 <_JIT_ENTRY+0x1f4>
// 1ee: 85 c0                         testl   %eax, %eax
// 1f0: 79 28                         jns     0x21a <_JIT_ENTRY+0x21a>
// 1f2: eb 38                         jmp     0x22c <_JIT_ENTRY+0x22c>
// 1f4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f6:  R_X86_64_64  .rodata.str1.1+0x39
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _Py_NegativeRefcount
// 208: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 20d: 4c 89 e2                      movq    %r12, %rdx
// 210: ff d0                         callq   *%rax
// 212: 49 8b 04 24                   movq    (%r12), %rax
// 216: 85 c0                         testl   %eax, %eax
// 218: 78 12                         js      0x22c <_JIT_ENTRY+0x22c>
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 224: ff d0                         callq   *%rax
// 226: 49 ff 0c 24                   decq    (%r12)
// 22a: 74 3b                         je      0x267 <_JIT_ENTRY+0x267>
// 22c: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 231: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 235: 4d 85 ed                      testq   %r13, %r13
// 238: 74 4a                         je      0x284 <_JIT_ENTRY+0x284>
// 23a: 48 8b 0c 24                   movq    (%rsp), %rcx
// 23e: 49 8d 34 ce                   leaq    (%r14,%rcx,8), %rsi
// 242: 4c 89 28                      movq    %r13, (%rax)
// 245: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000247:  R_X86_64_64  _JIT_CONTINUE
// 24f: 48 89 df                      movq    %rbx, %rdi
// 252: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 257: 48 83 c4 18                   addq    $0x18, %rsp
// 25b: 5b                            popq    %rbx
// 25c: 41 5c                         popq    %r12
// 25e: 41 5d                         popq    %r13
// 260: 41 5e                         popq    %r14
// 262: 41 5f                         popq    %r15
// 264: 5d                            popq    %rbp
// 265: ff e0                         jmpq    *%rax
// 267: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000269:  R_X86_64_64  _Py_Dealloc
// 271: 4c 89 e7                      movq    %r12, %rdi
// 274: ff d0                         callq   *%rax
// 276: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 27b: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 27f: 4d 85 ed                      testq   %r13, %r13
// 282: 75 b6                         jne     0x23a <_JIT_ENTRY+0x23a>
// 284: 49 89 c6                      movq    %rax, %r14
// 287: 49 29 de                      subq    %rbx, %r14
// 28a: 49 83 c6 b8                   addq    $-0x48, %r14
// 28e: 49 c1 ee 03                   shrq    $0x3, %r14
// 292: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 296: 31 c0                         xorl    %eax, %eax
// 298: 48 83 c4 18                   addq    $0x18, %rsp
// 29c: 5b                            popq    %rbx
// 29d: 41 5c                         popq    %r12
// 29f: 41 5d                         popq    %r13
// 2a1: 41 5e                         popq    %r14
// 2a3: 41 5f                         popq    %r15
// 2a5: 5d                            popq    %rbp
// 2a6: c3                            retq
// 2a7: 
static const unsigned char _DELETE_DEREFplus_BUILD_SLICE_code_body[680] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd4, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x78, 0x10, 0x4d, 0x85, 0xff, 0x74, 0x16, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4b, 0xeb, 0x5a, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0x1b, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x25, 0x4c, 0x89, 0x64, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xf8, 0x03, 0x75, 0x34, 0x31, 0xc9, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x95, 0xc1, 0x4d, 0x8b, 0x64, 0xce, 0xf8, 0xeb, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x89, 0x64, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xf8, 0x03, 0x74, 0xcc, 0x45, 0x31, 0xe4, 0x31, 0xc9, 0x66, 0x83, 0xf8, 0x03, 0x0f, 0x94, 0xc1, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc8, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x89, 0x0c, 0x24, 0x49, 0x8b, 0x2c, 0xce, 0x48, 0x98, 0x48, 0x89, 0x44, 0x24, 0x10, 0x4d, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x5f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x74, 0x47, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x3b, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x74, 0x4a, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x8d, 0x34, 0xce, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x75, 0xb6, 0x49, 0x89, 0xc6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_BUILD_SLICE_code_holes[24] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x78, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySlice_New, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x200, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x269, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_BUILD_SLICE_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BUILD_SLICE_data_holes[1];

// _DELETE_DEREFplus_BUILD_STRING
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BUILD_STRING.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 49 89 f7                      movq    %rsi, %r15
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 29: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2d: 4d 85 e4                      testq   %r12, %r12
// 30: 74 2b                         je      0x5d <_JIT_ENTRY+0x5d>
// 32: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 37: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3f: 49 8b 04 24                   movq    (%r12), %rax
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 7e 3c                         jle     0x84 <_JIT_ENTRY+0x84>
// 48: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// 4d: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 000000000000004f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 57: 85 c0                         testl   %eax, %eax
// 59: 79 5e                         jns     0xb9 <_JIT_ENTRY+0xb9>
// 5b: eb 74                         jmp     0xd1 <_JIT_ENTRY+0xd1>
// 5d: 48 8b 33                      movq    (%rbx), %rsi
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _JIT_OPARG
// 6a: 0f b7 d0                      movzwl  %ax, %edx
// 6d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006f:  R_X86_64_64  _PyEval_FormatExcUnbound
// 77: 48 89 cf                      movq    %rcx, %rdi
// 7a: ff d0                         callq   *%rax
// 7c: 4d 89 fc                      movq    %r15, %r12
// 7f: e9 77 01 00 00                jmp     0x1fb <_JIT_ENTRY+0x1fb>
// 84: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000086:  R_X86_64_64  .rodata.str1.1
// 8e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000090:  R_X86_64_64  _Py_NegativeRefcount
// 98: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9d: 4c 89 e2                      movq    %r12, %rdx
// a0: ff d0                         callq   *%rax
// a2: 49 8b 04 24                   movq    (%r12), %rax
// a6: 48 89 5c 24 20                movq    %rbx, 0x20(%rsp)
// ab: 49 be 00 00 00 00 00 00 00 00 movabsq $0x0, %r14
// 00000000000000ad:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b5: 85 c0                         testl   %eax, %eax
// b7: 78 18                         js      0xd1 <_JIT_ENTRY+0xd1>
// b9: 41 ff d6                      callq   *%r14
// bc: 49 ff 0c 24                   decq    (%r12)
// c0: 75 0f                         jne     0xd1 <_JIT_ENTRY+0xd1>
// c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c4:  R_X86_64_64  _Py_Dealloc
// cc: 4c 89 e7                      movq    %r12, %rdi
// cf: ff d0                         callq   *%rax
// d1: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000d3:  R_X86_64_64  _JIT_OPARG
// db: 0f b7 d3                      movzwl  %bx, %edx
// de: 48 8d 04 d5 00 00 00 00       leaq    (,%rdx,8), %rax
// e6: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// eb: 4d 89 fc                      movq    %r15, %r12
// ee: 49 29 c4                      subq    %rax, %r12
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _PyUnicode_JoinArray
// fb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000fd:  R_X86_64_64  _PyRuntime
// 105: 48 81 c7 00 a1 00 00          addq    $0xa100, %rdi           # imm = 0xA100
// 10c: 4c 89 e6                      movq    %r12, %rsi
// 10f: ff d0                         callq   *%rax
// 111: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
// 116: f7 c3 ff ff 00 00             testl   $0xffff, %ebx           # imm = 0xFFFF
// 11c: 0f 8e 7b 00 00 00             jle     0x19d <_JIT_ENTRY+0x19d>
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _JIT_OPARG
// 12c: 44 0f b7 e8                   movzwl  %ax, %r13d
// 130: 49 ff c5                      incq    %r13
// 133: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000135:  R_X86_64_64  .rodata.str1.1
// 13d: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 000000000000013f:  R_X86_64_64  _Py_NegativeRefcount
// 147: eb 10                         jmp     0x159 <_JIT_ENTRY+0x159>
// 149: 0f 1f 80 00 00 00 00          nopl    (%rax)
// 150: 49 ff cd                      decq    %r13
// 153: 49 83 fd 01                   cmpq    $0x1, %r13
// 157: 7e 44                         jle     0x19d <_JIT_ENTRY+0x19d>
// 159: 41 8d 45 fe                   leal    -0x2(%r13), %eax
// 15d: 4d 8b 3c c4                   movq    (%r12,%rax,8), %r15
// 161: 49 8b 07                      movq    (%r15), %rax
// 164: 48 85 c0                      testq   %rax, %rax
// 167: 7e 07                         jle     0x170 <_JIT_ENTRY+0x170>
// 169: 85 c0                         testl   %eax, %eax
// 16b: 78 e3                         js      0x150 <_JIT_ENTRY+0x150>
// 16d: eb 15                         jmp     0x184 <_JIT_ENTRY+0x184>
// 16f: 90                            nop
// 170: 48 89 ef                      movq    %rbp, %rdi
// 173: be 13 05 00 00                movl    $0x513, %esi            # imm = 0x513
// 178: 4c 89 fa                      movq    %r15, %rdx
// 17b: ff d3                         callq   *%rbx
// 17d: 49 8b 07                      movq    (%r15), %rax
// 180: 85 c0                         testl   %eax, %eax
// 182: 78 cc                         js      0x150 <_JIT_ENTRY+0x150>
// 184: 41 ff d6                      callq   *%r14
// 187: 49 ff 0f                      decq    (%r15)
// 18a: 75 c4                         jne     0x150 <_JIT_ENTRY+0x150>
// 18c: 4c 89 ff                      movq    %r15, %rdi
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_Dealloc
// 199: ff d0                         callq   *%rax
// 19b: eb b3                         jmp     0x150 <_JIT_ENTRY+0x150>
// 19d: 48 8b 74 24 18                movq    0x18(%rsp), %rsi
// 1a2: 48 85 f6                      testq   %rsi, %rsi
// 1a5: 48 8b 5c 24 20                movq    0x20(%rsp), %rbx
// 1aa: 74 4f                         je      0x1fb <_JIT_ENTRY+0x1fb>
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _JIT_OPARG
// 1b6: 0f b7 c8                      movzwl  %ax, %ecx
// 1b9: 0f b7 c0                      movzwl  %ax, %eax
// 1bc: 48 c1 e0 03                   shlq    $0x3, %rax
// 1c0: 48 f7 d8                      negq    %rax
// 1c3: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1c8: 48 89 34 02                   movq    %rsi, (%rdx,%rax)
// 1cc: b8 01 00 00 00                movl    $0x1, %eax
// 1d1: 29 c8                         subl    %ecx, %eax
// 1d3: 48 98                         cltq
// 1d5: 48 8d 34 c2                   leaq    (%rdx,%rax,8), %rsi
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _JIT_CONTINUE
// 1e3: 48 89 df                      movq    %rbx, %rdi
// 1e6: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 1eb: 48 83 c4 28                   addq    $0x28, %rsp
// 1ef: 5b                            popq    %rbx
// 1f0: 41 5c                         popq    %r12
// 1f2: 41 5d                         popq    %r13
// 1f4: 41 5e                         popq    %r14
// 1f6: 41 5f                         popq    %r15
// 1f8: 5d                            popq    %rbp
// 1f9: ff e0                         jmpq    *%rax
// 1fb: 49 29 dc                      subq    %rbx, %r12
// 1fe: 49 83 c4 b8                   addq    $-0x48, %r12
// 202: 49 c1 ec 03                   shrq    $0x3, %r12
// 206: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 20a: 31 c0                         xorl    %eax, %eax
// 20c: 48 83 c4 28                   addq    $0x28, %rsp
// 210: 5b                            popq    %rbx
// 211: 41 5c                         popq    %r12
// 213: 41 5d                         popq    %r13
// 215: 41 5e                         popq    %r14
// 217: 41 5f                         popq    %r15
// 219: 5d                            popq    %rbp
// 21a: c3                            retq
// 21b: 
static const unsigned char _DELETE_DEREFplus_BUILD_STRING_code_body[540] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0xd1, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x2b, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3c, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x5e, 0xeb, 0x74, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4d, 0x89, 0xfc, 0xe9, 0x77, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x49, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd6, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd3, 0x48, 0x8d, 0x04, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x4d, 0x89, 0xfc, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc7, 0x00, 0xa1, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x18, 0xf7, 0xc3, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x7b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe8, 0x49, 0xff, 0xc5, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xcd, 0x49, 0x83, 0xfd, 0x01, 0x7e, 0x44, 0x41, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x3c, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x15, 0x90, 0x48, 0x89, 0xef, 0xbe, 0x13, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd3, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xcc, 0x41, 0xff, 0xd6, 0x49, 0xff, 0x0f, 0x75, 0xc4, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb3, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x48, 0x85, 0xf6, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x74, 0x4f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0xf7, 0xd8, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x48, 0x89, 0x34, 0x02, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48, 0x8d, 0x34, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_BUILD_STRING_code_holes[18] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x86, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_JoinArray, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_BUILD_STRING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BUILD_STRING_data_holes[1];

// _DELETE_DEREFplus_BUILD_TUPLE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_BUILD_TUPLE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 2d                         jle     0x6a <_JIT_ENTRY+0x6a>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 4f                         jns     0x90 <_JIT_ENTRY+0x90>
// 41: eb 6e                         jmp     0xb1 <_JIT_ENTRY+0xb1>
// 43: 48 8b 33                      movq    (%rbx), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4d 89 f4                      movq    %r14, %r12
// 65: e9 bb 00 00 00                jmp     0x125 <_JIT_ENTRY+0x125>
// 6a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006c:  R_X86_64_64  .rodata.str1.1
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _Py_NegativeRefcount
// 7e: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 83: 4c 89 e2                      movq    %r12, %rdx
// 86: ff d0                         callq   *%rax
// 88: 49 8b 04 24                   movq    (%r12), %rax
// 8c: 85 c0                         testl   %eax, %eax
// 8e: 78 21                         js      0xb1 <_JIT_ENTRY+0xb1>
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9a: ff d0                         callq   *%rax
// 9c: 49 ff 0c 24                   decq    (%r12)
// a0: 75 0f                         jne     0xb1 <_JIT_ENTRY+0xb1>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_Dealloc
// ac: 4c 89 e7                      movq    %r12, %rdi
// af: ff d0                         callq   *%rax
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _JIT_OPARG
// bb: 0f b7 f0                      movzwl  %ax, %esi
// be: 48 8d 04 f5 00 00 00 00       leaq    (,%rsi,8), %rax
// c6: 4d 89 f4                      movq    %r14, %r12
// c9: 49 29 c4                      subq    %rax, %r12
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  _PyTuple_FromArraySteal
// d6: 4c 89 e7                      movq    %r12, %rdi
// d9: ff d0                         callq   *%rax
// db: 48 85 c0                      testq   %rax, %rax
// de: 74 45                         je      0x125 <_JIT_ENTRY+0x125>
// e0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e2:  R_X86_64_64  _JIT_OPARG
// ea: 0f b7 d1                      movzwl  %cx, %edx
// ed: 0f b7 c9                      movzwl  %cx, %ecx
// f0: 48 c1 e1 03                   shlq    $0x3, %rcx
// f4: 48 f7 d9                      negq    %rcx
// f7: 49 89 04 0e                   movq    %rax, (%r14,%rcx)
// fb: b8 01 00 00 00                movl    $0x1, %eax
// 100: 29 d0                         subl    %edx, %eax
// 102: 48 98                         cltq
// 104: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 108: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010a:  R_X86_64_64  _JIT_CONTINUE
// 112: 48 89 df                      movq    %rbx, %rdi
// 115: 4c 89 fa                      movq    %r15, %rdx
// 118: 48 83 c4 08                   addq    $0x8, %rsp
// 11c: 5b                            popq    %rbx
// 11d: 41 5c                         popq    %r12
// 11f: 41 5e                         popq    %r14
// 121: 41 5f                         popq    %r15
// 123: ff e0                         jmpq    *%rax
// 125: 49 29 dc                      subq    %rbx, %r12
// 128: 49 83 c4 b8                   addq    $-0x48, %r12
// 12c: 49 c1 ec 03                   shrq    $0x3, %r12
// 130: 44 89 63 40                   movl    %r12d, 0x40(%rbx)
// 134: 31 c0                         xorl    %eax, %eax
// 136: 48 83 c4 08                   addq    $0x8, %rsp
// 13a: 5b                            popq    %rbx
// 13b: 41 5c                         popq    %r12
// 13d: 41 5e                         popq    %r14
// 13f: 41 5f                         popq    %r15
// 141: c3                            retq
// 142: 
static const unsigned char _DELETE_DEREFplus_BUILD_TUPLE_code_body[323] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2d, 0x85, 0xc0, 0x79, 0x4f, 0xeb, 0x6e, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x89, 0xf4, 0xe9, 0xbb, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0x8d, 0x04, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0xf4, 0x49, 0x29, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x45, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0xf7, 0xd9, 0x49, 0x89, 0x04, 0x0e, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x29, 0xd0, 0x48, 0x98, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x29, 0xdc, 0x49, 0x83, 0xc4, 0xb8, 0x49, 0xc1, 0xec, 0x03, 0x44, 0x89, 0x63, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_BUILD_TUPLE_code_holes[12] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyTuple_FromArraySteal, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_BUILD_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_BUILD_TUPLE_data_holes[1];

// _DELETE_DEREFplus_CALL_BUILTIN_CLASS
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CALL_BUILTIN_CLASS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d5                      movq    %rdx, %r13
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 29: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2d: 4d 85 e4                      testq   %r12, %r12
// 30: 74 17                         je      0x49 <_JIT_ENTRY+0x49>
// 32: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 3b                         jle     0x7e <_JIT_ENTRY+0x7e>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 5d                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 47: eb 7c                         jmp     0xc5 <_JIT_ENTRY+0xc5>
// 49: 48 8b 33                      movq    (%rbx), %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 d0                      movzwl  %ax, %edx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _PyEval_FormatExcUnbound
// 63: 4c 89 ef                      movq    %r13, %rdi
// 66: ff d0                         callq   *%rax
// 68: 49 29 de                      subq    %rbx, %r14
// 6b: 49 83 c6 b8                   addq    $-0x48, %r14
// 6f: 49 c1 ee 03                   shrq    $0x3, %r14
// 73: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 77: 31 c0                         xorl    %eax, %eax
// 79: e9 d8 01 00 00                jmp     0x256 <_JIT_ENTRY+0x256>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 21                         js      0xc5 <_JIT_ENTRY+0xc5>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 75 0f                         jne     0xc5 <_JIT_ENTRY+0xc5>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_Dealloc
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c7:  R_X86_64_64  _JIT_OPARG
// cf: 0f b7 d1                      movzwl  %cx, %edx
// d2: 89 d0                         movl    %edx, %eax
// d4: f7 d0                         notl    %eax
// d6: 4c 63 d0                      movslq  %eax, %r10
// d9: 4b 8b 04 d6                   movq    (%r14,%r10,8), %rax
// dd: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// e2: 29 d6                         subl    %edx, %esi
// e4: 4c 63 ce                      movslq  %esi, %r9
// e7: 0f b7 c9                      movzwl  %cx, %ecx
// ea: 48 89 ce                      movq    %rcx, %rsi
// ed: 48 f7 de                      negq    %rsi
// f0: 44 8d 7a 01                   leal    0x1(%rdx), %r15d
// f4: 48 85 c0                      testq   %rax, %rax
// f7: 48 f7 d1                      notq    %rcx
// fa: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// fe: 44 0f 44 fa                   cmovel  %edx, %r15d
// 102: 4b 8b 3c ce                   movq    (%r14,%r9,8), %rdi
// 106: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 10a: f6 82 ab 00 00 00 80          testb   $-0x80, 0xab(%rdx)
// 111: 0f 84 17 01 00 00             je      0x22e <_JIT_ENTRY+0x22e>
// 117: 4c 8b 87 90 01 00 00          movq    0x190(%rdi), %r8
// 11e: 4d 85 c0                      testq   %r8, %r8
// 121: 0f 84 07 01 00 00             je      0x22e <_JIT_ENTRY+0x22e>
// 127: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 12c: 4c 89 54 24 18                movq    %r10, 0x18(%rsp)
// 131: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 136: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 41 0f 94 c4                   sete    %r12b
// 141: 44 89 fa                      movl    %r15d, %edx
// 144: 48 89 3c 24                   movq    %rdi, (%rsp)
// 148: 48 89 ee                      movq    %rbp, %rsi
// 14b: 31 c9                         xorl    %ecx, %ecx
// 14d: 41 ff d0                      callq   *%r8
// 150: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  _JIT_OPARG
// 15f: 66 85 c0                      testw   %ax, %ax
// 162: 0f 94 c0                      sete    %al
// 165: 41 84 c4                      testb   %al, %r12b
// 168: 0f 84 f7 00 00 00             je      0x265 <_JIT_ENTRY+0x265>
// 16e: 48 8b 14 24                   movq    (%rsp), %rdx
// 172: 48 8b 02                      movq    (%rdx), %rax
// 175: 48 85 c0                      testq   %rax, %rax
// 178: 7f 22                         jg      0x19c <_JIT_ENTRY+0x19c>
// 17a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017c:  R_X86_64_64  .rodata.str1.1
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _Py_NegativeRefcount
// 18e: be dd 0a 00 00                movl    $0xadd, %esi            # imm = 0xADD
// 193: ff d0                         callq   *%rax
// 195: 48 8b 04 24                   movq    (%rsp), %rax
// 199: 48 8b 00                      movq    (%rax), %rax
// 19c: 85 c0                         testl   %eax, %eax
// 19e: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 1a3: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 1a8: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 1ad: 78 21                         js      0x1d0 <_JIT_ENTRY+0x1d0>
// 1af: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b9: ff d0                         callq   *%rax
// 1bb: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1bf: 48 ff 0f                      decq    (%rdi)
// 1c2: 75 0c                         jne     0x1d0 <_JIT_ENTRY+0x1d0>
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _Py_Dealloc
// 1ce: ff d0                         callq   *%rax
// 1d0: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 1d5: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 1d9: 4d 85 ed                      testq   %r13, %r13
// 1dc: 0f 84 05 01 00 00             je      0x2e7 <_JIT_ENTRY+0x2e7>
// 1e2: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 1e6: 4c 89 28                      movq    %r13, (%rax)
// 1e9: 49 8b 47 10                   movq    0x10(%r15), %rax
// 1ed: 48 8b 00                      movq    (%rax), %rax
// 1f0: 84 c0                         testb   %al, %al
// 1f2: 74 17                         je      0x20b <_JIT_ENTRY+0x20b>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_HandlePending
// 1fe: 4c 89 ff                      movq    %r15, %rdi
// 201: ff d0                         callq   *%rax
// 203: 85 c0                         testl   %eax, %eax
// 205: 0f 85 5d fe ff ff             jne     0x68 <_JIT_ENTRY+0x68>
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _JIT_CONTINUE
// 215: 48 89 df                      movq    %rbx, %rdi
// 218: 4c 89 f6                      movq    %r14, %rsi
// 21b: 4c 89 fa                      movq    %r15, %rdx
// 21e: 48 83 c4 28                   addq    $0x28, %rsp
// 222: 5b                            popq    %rbx
// 223: 41 5c                         popq    %r12
// 225: 41 5d                         popq    %r13
// 227: 41 5e                         popq    %r14
// 229: 41 5f                         popq    %r15
// 22b: 5d                            popq    %rbp
// 22c: ff e0                         jmpq    *%rax
// 22e: 49 29 de                      subq    %rbx, %r14
// 231: 49 83 c6 b8                   addq    $-0x48, %r14
// 235: 49 c1 ee 03                   shrq    $0x3, %r14
// 239: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 23d: 48 8b 03                      movq    (%rbx), %rax
// 240: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000242:  R_X86_64_64  _JIT_TARGET
// 24a: 89 c9                         movl    %ecx, %ecx
// 24c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 250: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 256: 48 83 c4 28                   addq    $0x28, %rsp
// 25a: 5b                            popq    %rbx
// 25b: 41 5c                         popq    %r12
// 25d: 41 5d                         popq    %r13
// 25f: 41 5e                         popq    %r14
// 261: 41 5f                         popq    %r15
// 263: 5d                            popq    %rbp
// 264: c3                            retq
// 265: 41 83 ff 02                   cmpl    $0x2, %r15d
// 269: 41 bd 01 00 00 00             movl    $0x1, %r13d
// 26f: 45 0f 43 ef                   cmovael %r15d, %r13d
// 273: 45 31 e4                      xorl    %r12d, %r12d
// 276: eb 14                         jmp     0x28c <_JIT_ENTRY+0x28c>
// 278: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 280: 49 ff c4                      incq    %r12
// 283: 4d 39 e5                      cmpq    %r12, %r13
// 286: 0f 84 e2 fe ff ff             je      0x16e <_JIT_ENTRY+0x16e>
// 28c: 4e 8b 7c e5 00                movq    (%rbp,%r12,8), %r15
// 291: 49 8b 07                      movq    (%r15), %rax
// 294: 48 85 c0                      testq   %rax, %rax
// 297: 7e 07                         jle     0x2a0 <_JIT_ENTRY+0x2a0>
// 299: 85 c0                         testl   %eax, %eax
// 29b: 78 e3                         js      0x280 <_JIT_ENTRY+0x280>
// 29d: eb 26                         jmp     0x2c5 <_JIT_ENTRY+0x2c5>
// 29f: 90                            nop
// 2a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a2:  R_X86_64_64  .rodata.str1.1
// 2aa: be db 0a 00 00                movl    $0xadb, %esi            # imm = 0xADB
// 2af: 4c 89 fa                      movq    %r15, %rdx
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_NegativeRefcount
// 2bc: ff d0                         callq   *%rax
// 2be: 49 8b 07                      movq    (%r15), %rax
// 2c1: 85 c0                         testl   %eax, %eax
// 2c3: 78 bb                         js      0x280 <_JIT_ENTRY+0x280>
// 2c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2cf: ff d0                         callq   *%rax
// 2d1: 49 ff 0f                      decq    (%r15)
// 2d4: 75 aa                         jne     0x280 <_JIT_ENTRY+0x280>
// 2d6: 4c 89 ff                      movq    %r15, %rdi
// 2d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002db:  R_X86_64_64  _Py_Dealloc
// 2e3: ff d0                         callq   *%rax
// 2e5: eb 99                         jmp     0x280 <_JIT_ENTRY+0x280>
// 2e7: 49 89 c6                      movq    %rax, %r14
// 2ea: e9 79 fd ff ff                jmp     0x68 <_JIT_ENTRY+0x68>
// 2ef: 
static const unsigned char _DELETE_DEREFplus_CALL_BUILTIN_CLASS_code_body[752] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd5, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xd8, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x4c, 0x63, 0xd0, 0x4b, 0x8b, 0x04, 0xd6, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd6, 0x4c, 0x63, 0xce, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x7a, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xfa, 0x4b, 0x8b, 0x3c, 0xce, 0x48, 0x8b, 0x57, 0x08, 0xf6, 0x82, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x17, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x87, 0x90, 0x01, 0x00, 0x00, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x07, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x54, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc4, 0x44, 0x89, 0xfa, 0x48, 0x89, 0x3c, 0x24, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc4, 0x0f, 0x84, 0xf7, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x02, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x0a, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x4d, 0x85, 0xed, 0x0f, 0x84, 0x05, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xe6, 0x4c, 0x89, 0x28, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x5d, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xff, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xef, 0x45, 0x31, 0xe4, 0xeb, 0x14, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe5, 0x0f, 0x84, 0xe2, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x7c, 0xe5, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x07, 0x85, 0xc0, 0x78, 0xe3, 0xeb, 0x26, 0x90, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xbb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0xaa, 0x4c, 0x89, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x99, 0x49, 0x89, 0xc6, 0xe9, 0x79, 0xfd, 0xff, 0xff};
static const Hole _DELETE_DEREFplus_CALL_BUILTIN_CLASS_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x242, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CALL_BUILTIN_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CALL_BUILTIN_CLASS_data_holes[1];

// _DELETE_DEREFplus_CALL_BUILTIN_FAST
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CALL_BUILTIN_FAST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 29: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2d: 4d 85 e4                      testq   %r12, %r12
// 30: 74 17                         je      0x49 <_JIT_ENTRY+0x49>
// 32: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 3b                         jle     0x7e <_JIT_ENTRY+0x7e>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 5d                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 47: eb 7c                         jmp     0xc5 <_JIT_ENTRY+0xc5>
// 49: 48 8b 33                      movq    (%rbx), %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 d0                      movzwl  %ax, %edx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _PyEval_FormatExcUnbound
// 63: 4c 89 ff                      movq    %r15, %rdi
// 66: ff d0                         callq   *%rax
// 68: 49 29 de                      subq    %rbx, %r14
// 6b: 49 83 c6 b8                   addq    $-0x48, %r14
// 6f: 49 c1 ee 03                   shrq    $0x3, %r14
// 73: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 77: 31 c0                         xorl    %eax, %eax
// 79: e9 e0 01 00 00                jmp     0x25e <_JIT_ENTRY+0x25e>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 21                         js      0xc5 <_JIT_ENTRY+0xc5>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 75 0f                         jne     0xc5 <_JIT_ENTRY+0xc5>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_Dealloc
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c7:  R_X86_64_64  _JIT_OPARG
// cf: 0f b7 d1                      movzwl  %cx, %edx
// d2: 89 d0                         movl    %edx, %eax
// d4: f7 d0                         notl    %eax
// d6: 48 63 f8                      movslq  %eax, %rdi
// d9: 49 8b 04 fe                   movq    (%r14,%rdi,8), %rax
// dd: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// e2: 29 d6                         subl    %edx, %esi
// e4: 4c 63 ce                      movslq  %esi, %r9
// e7: 0f b7 c9                      movzwl  %cx, %ecx
// ea: 48 89 ce                      movq    %rcx, %rsi
// ed: 48 f7 de                      negq    %rsi
// f0: 44 8d 62 01                   leal    0x1(%rdx), %r12d
// f4: 48 85 c0                      testq   %rax, %rax
// f7: 48 f7 d1                      notq    %rcx
// fa: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// fe: 44 0f 44 e2                   cmovel  %edx, %r12d
// 102: 4b 8b 34 ce                   movq    (%r14,%r9,8), %rsi
// 106: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000108:  R_X86_64_64  PyCFunction_Type
// 110: 48 39 56 08                   cmpq    %rdx, 0x8(%rsi)
// 114: 0f 85 1c 01 00 00             jne     0x236 <_JIT_ENTRY+0x236>
// 11a: 4c 8b 46 10                   movq    0x10(%rsi), %r8
// 11e: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 126: 0f 85 0a 01 00 00             jne     0x236 <_JIT_ENTRY+0x236>
// 12c: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 131: 48 89 7c 24 18                movq    %rdi, 0x18(%rsp)
// 136: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// 13b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 13f: 48 85 c0                      testq   %rax, %rax
// 142: 41 0f 94 c7                   sete    %r15b
// 146: 48 89 34 24                   movq    %rsi, (%rsp)
// 14a: 48 8b 7e 18                   movq    0x18(%rsi), %rdi
// 14e: 44 89 e2                      movl    %r12d, %edx
// 151: 48 89 ee                      movq    %rbp, %rsi
// 154: 41 ff 50 08                   callq   *0x8(%r8)
// 158: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 15d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015f:  R_X86_64_64  _JIT_OPARG
// 167: 66 85 c0                      testw   %ax, %ax
// 16a: 0f 94 c0                      sete    %al
// 16d: 41 84 c7                      testb   %al, %r15b
// 170: 0f 84 f7 00 00 00             je      0x26d <_JIT_ENTRY+0x26d>
// 176: 48 8b 14 24                   movq    (%rsp), %rdx
// 17a: 48 8b 02                      movq    (%rdx), %rax
// 17d: 48 85 c0                      testq   %rax, %rax
// 180: 7f 22                         jg      0x1a4 <_JIT_ENTRY+0x1a4>
// 182: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000184:  R_X86_64_64  .rodata.str1.1
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_NegativeRefcount
// 196: be 28 0b 00 00                movl    $0xb28, %esi            # imm = 0xB28
// 19b: ff d0                         callq   *%rax
// 19d: 48 8b 04 24                   movq    (%rsp), %rax
// 1a1: 48 8b 00                      movq    (%rax), %rax
// 1a4: 85 c0                         testl   %eax, %eax
// 1a6: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 1ab: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 1b0: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 1b5: 78 21                         js      0x1d8 <_JIT_ENTRY+0x1d8>
// 1b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c1: ff d0                         callq   *%rax
// 1c3: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1c7: 48 ff 0f                      decq    (%rdi)
// 1ca: 75 0c                         jne     0x1d8 <_JIT_ENTRY+0x1d8>
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _Py_Dealloc
// 1d6: ff d0                         callq   *%rax
// 1d8: 4b 8d 04 ee                   leaq    (%r14,%r13,8), %rax
// 1dc: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1e1: 48 85 c9                      testq   %rcx, %rcx
// 1e4: 0f 84 ff 00 00 00             je      0x2e9 <_JIT_ENTRY+0x2e9>
// 1ea: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 1ee: 48 89 08                      movq    %rcx, (%rax)
// 1f1: 49 8b 47 10                   movq    0x10(%r15), %rax
// 1f5: 48 8b 00                      movq    (%rax), %rax
// 1f8: 84 c0                         testb   %al, %al
// 1fa: 74 17                         je      0x213 <_JIT_ENTRY+0x213>
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_HandlePending
// 206: 4c 89 ff                      movq    %r15, %rdi
// 209: ff d0                         callq   *%rax
// 20b: 85 c0                         testl   %eax, %eax
// 20d: 0f 85 55 fe ff ff             jne     0x68 <_JIT_ENTRY+0x68>
// 213: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000215:  R_X86_64_64  _JIT_CONTINUE
// 21d: 48 89 df                      movq    %rbx, %rdi
// 220: 4c 89 f6                      movq    %r14, %rsi
// 223: 4c 89 fa                      movq    %r15, %rdx
// 226: 48 83 c4 28                   addq    $0x28, %rsp
// 22a: 5b                            popq    %rbx
// 22b: 41 5c                         popq    %r12
// 22d: 41 5d                         popq    %r13
// 22f: 41 5e                         popq    %r14
// 231: 41 5f                         popq    %r15
// 233: 5d                            popq    %rbp
// 234: ff e0                         jmpq    *%rax
// 236: 49 29 de                      subq    %rbx, %r14
// 239: 49 83 c6 b8                   addq    $-0x48, %r14
// 23d: 49 c1 ee 03                   shrq    $0x3, %r14
// 241: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 245: 48 8b 03                      movq    (%rbx), %rax
// 248: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024a:  R_X86_64_64  _JIT_TARGET
// 252: 89 c9                         movl    %ecx, %ecx
// 254: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 258: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 25e: 48 83 c4 28                   addq    $0x28, %rsp
// 262: 5b                            popq    %rbx
// 263: 41 5c                         popq    %r12
// 265: 41 5d                         popq    %r13
// 267: 41 5e                         popq    %r14
// 269: 41 5f                         popq    %r15
// 26b: 5d                            popq    %rbp
// 26c: c3                            retq
// 26d: 41 83 fc 02                   cmpl    $0x2, %r12d
// 271: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 277: 45 0f 43 fc                   cmovael %r12d, %r15d
// 27b: 45 31 e4                      xorl    %r12d, %r12d
// 27e: eb 0c                         jmp     0x28c <_JIT_ENTRY+0x28c>
// 280: 49 ff c4                      incq    %r12
// 283: 4d 39 e7                      cmpq    %r12, %r15
// 286: 0f 84 ea fe ff ff             je      0x176 <_JIT_ENTRY+0x176>
// 28c: 4e 8b 6c e5 00                movq    (%rbp,%r12,8), %r13
// 291: 49 8b 45 00                   movq    (%r13), %rax
// 295: 48 85 c0                      testq   %rax, %rax
// 298: 7e 06                         jle     0x2a0 <_JIT_ENTRY+0x2a0>
// 29a: 85 c0                         testl   %eax, %eax
// 29c: 78 e2                         js      0x280 <_JIT_ENTRY+0x280>
// 29e: eb 26                         jmp     0x2c6 <_JIT_ENTRY+0x2c6>
// 2a0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a2:  R_X86_64_64  .rodata.str1.1
// 2aa: be 26 0b 00 00                movl    $0xb26, %esi            # imm = 0xB26
// 2af: 4c 89 ea                      movq    %r13, %rdx
// 2b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b4:  R_X86_64_64  _Py_NegativeRefcount
// 2bc: ff d0                         callq   *%rax
// 2be: 49 8b 45 00                   movq    (%r13), %rax
// 2c2: 85 c0                         testl   %eax, %eax
// 2c4: 78 ba                         js      0x280 <_JIT_ENTRY+0x280>
// 2c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2d0: ff d0                         callq   *%rax
// 2d2: 49 ff 4d 00                   decq    (%r13)
// 2d6: 75 a8                         jne     0x280 <_JIT_ENTRY+0x280>
// 2d8: 4c 89 ef                      movq    %r13, %rdi
// 2db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002dd:  R_X86_64_64  _Py_Dealloc
// 2e5: ff d0                         callq   *%rax
// 2e7: eb 97                         jmp     0x280 <_JIT_ENTRY+0x280>
// 2e9: 49 89 c6                      movq    %rax, %r14
// 2ec: e9 77 fd ff ff                jmp     0x68 <_JIT_ENTRY+0x68>
// 2f1: 
static const unsigned char _DELETE_DEREFplus_CALL_BUILTIN_FAST_code_body[754] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xe0, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x48, 0x63, 0xf8, 0x49, 0x8b, 0x04, 0xfe, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd6, 0x4c, 0x63, 0xce, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x62, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xe2, 0x4b, 0x8b, 0x34, 0xce, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x56, 0x08, 0x0f, 0x85, 0x1c, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x46, 0x10, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x0a, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x48, 0x89, 0x34, 0x24, 0x48, 0x8b, 0x7e, 0x18, 0x44, 0x89, 0xe2, 0x48, 0x89, 0xee, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xf7, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x02, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x28, 0x0b, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xff, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xe6, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x55, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfc, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfc, 0x45, 0x31, 0xe4, 0xeb, 0x0c, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe7, 0x0f, 0x84, 0xea, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xe5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x26, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc6, 0xe9, 0x77, 0xfd, 0xff, 0xff};
static const Hole _DELETE_DEREFplus_CALL_BUILTIN_FAST_code_holes[22] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x215, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2a2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CALL_BUILTIN_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CALL_BUILTIN_FAST_data_holes[1];

// _DELETE_DEREFplus_CALL_BUILTIN_FAST_WITH_KEYWORDS
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CALL_BUILTIN_FAST_WITH_KEYWORDS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 29: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2d: 4d 85 e4                      testq   %r12, %r12
// 30: 74 17                         je      0x49 <_JIT_ENTRY+0x49>
// 32: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 3b                         jle     0x7e <_JIT_ENTRY+0x7e>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 5d                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 47: eb 7c                         jmp     0xc5 <_JIT_ENTRY+0xc5>
// 49: 48 8b 33                      movq    (%rbx), %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 d0                      movzwl  %ax, %edx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _PyEval_FormatExcUnbound
// 63: 4c 89 ff                      movq    %r15, %rdi
// 66: ff d0                         callq   *%rax
// 68: 49 29 de                      subq    %rbx, %r14
// 6b: 49 83 c6 b8                   addq    $-0x48, %r14
// 6f: 49 c1 ee 03                   shrq    $0x3, %r14
// 73: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 77: 31 c0                         xorl    %eax, %eax
// 79: e9 e2 01 00 00                jmp     0x260 <_JIT_ENTRY+0x260>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 21                         js      0xc5 <_JIT_ENTRY+0xc5>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 75 0f                         jne     0xc5 <_JIT_ENTRY+0xc5>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_Dealloc
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c7:  R_X86_64_64  _JIT_OPARG
// cf: 0f b7 d1                      movzwl  %cx, %edx
// d2: 89 d0                         movl    %edx, %eax
// d4: f7 d0                         notl    %eax
// d6: 48 63 f8                      movslq  %eax, %rdi
// d9: 49 8b 04 fe                   movq    (%r14,%rdi,8), %rax
// dd: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// e2: 29 d6                         subl    %edx, %esi
// e4: 4c 63 ce                      movslq  %esi, %r9
// e7: 0f b7 c9                      movzwl  %cx, %ecx
// ea: 48 89 ce                      movq    %rcx, %rsi
// ed: 48 f7 de                      negq    %rsi
// f0: 44 8d 62 01                   leal    0x1(%rdx), %r12d
// f4: 48 85 c0                      testq   %rax, %rax
// f7: 48 f7 d1                      notq    %rcx
// fa: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// fe: 44 0f 44 e2                   cmovel  %edx, %r12d
// 102: 4b 8b 34 ce                   movq    (%r14,%r9,8), %rsi
// 106: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000108:  R_X86_64_64  PyCFunction_Type
// 110: 48 39 56 08                   cmpq    %rdx, 0x8(%rsi)
// 114: 0f 85 1e 01 00 00             jne     0x238 <_JIT_ENTRY+0x238>
// 11a: 4c 8b 46 10                   movq    0x10(%rsi), %r8
// 11e: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 126: 0f 85 0c 01 00 00             jne     0x238 <_JIT_ENTRY+0x238>
// 12c: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 131: 48 89 7c 24 18                movq    %rdi, 0x18(%rsp)
// 136: 4c 89 7c 24 20                movq    %r15, 0x20(%rsp)
// 13b: 49 8d 2c ce                   leaq    (%r14,%rcx,8), %rbp
// 13f: 48 85 c0                      testq   %rax, %rax
// 142: 41 0f 94 c7                   sete    %r15b
// 146: 48 89 34 24                   movq    %rsi, (%rsp)
// 14a: 48 8b 7e 18                   movq    0x18(%rsi), %rdi
// 14e: 44 89 e2                      movl    %r12d, %edx
// 151: 48 89 ee                      movq    %rbp, %rsi
// 154: 31 c9                         xorl    %ecx, %ecx
// 156: 41 ff 50 08                   callq   *0x8(%r8)
// 15a: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 15f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000161:  R_X86_64_64  _JIT_OPARG
// 169: 66 85 c0                      testw   %ax, %ax
// 16c: 0f 94 c0                      sete    %al
// 16f: 41 84 c7                      testb   %al, %r15b
// 172: 0f 84 f7 00 00 00             je      0x26f <_JIT_ENTRY+0x26f>
// 178: 48 8b 14 24                   movq    (%rsp), %rdx
// 17c: 48 8b 02                      movq    (%rdx), %rax
// 17f: 48 85 c0                      testq   %rax, %rax
// 182: 7f 22                         jg      0x1a6 <_JIT_ENTRY+0x1a6>
// 184: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000186:  R_X86_64_64  .rodata.str1.1
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_NegativeRefcount
// 198: be 51 0b 00 00                movl    $0xb51, %esi            # imm = 0xB51
// 19d: ff d0                         callq   *%rax
// 19f: 48 8b 04 24                   movq    (%rsp), %rax
// 1a3: 48 8b 00                      movq    (%rax), %rax
// 1a6: 85 c0                         testl   %eax, %eax
// 1a8: 4c 8b 7c 24 20                movq    0x20(%rsp), %r15
// 1ad: 4c 8b 64 24 18                movq    0x18(%rsp), %r12
// 1b2: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 1b7: 78 21                         js      0x1da <_JIT_ENTRY+0x1da>
// 1b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c3: ff d0                         callq   *%rax
// 1c5: 48 8b 3c 24                   movq    (%rsp), %rdi
// 1c9: 48 ff 0f                      decq    (%rdi)
// 1cc: 75 0c                         jne     0x1da <_JIT_ENTRY+0x1da>
// 1ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d0:  R_X86_64_64  _Py_Dealloc
// 1d8: ff d0                         callq   *%rax
// 1da: 4b 8d 04 ee                   leaq    (%r14,%r13,8), %rax
// 1de: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1e3: 48 85 c9                      testq   %rcx, %rcx
// 1e6: 0f 84 0d 01 00 00             je      0x2f9 <_JIT_ENTRY+0x2f9>
// 1ec: 4f 8d 34 e6                   leaq    (%r14,%r12,8), %r14
// 1f0: 48 89 08                      movq    %rcx, (%rax)
// 1f3: 49 8b 47 10                   movq    0x10(%r15), %rax
// 1f7: 48 8b 00                      movq    (%rax), %rax
// 1fa: 84 c0                         testb   %al, %al
// 1fc: 74 17                         je      0x215 <_JIT_ENTRY+0x215>
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _Py_HandlePending
// 208: 4c 89 ff                      movq    %r15, %rdi
// 20b: ff d0                         callq   *%rax
// 20d: 85 c0                         testl   %eax, %eax
// 20f: 0f 85 53 fe ff ff             jne     0x68 <_JIT_ENTRY+0x68>
// 215: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000217:  R_X86_64_64  _JIT_CONTINUE
// 21f: 48 89 df                      movq    %rbx, %rdi
// 222: 4c 89 f6                      movq    %r14, %rsi
// 225: 4c 89 fa                      movq    %r15, %rdx
// 228: 48 83 c4 28                   addq    $0x28, %rsp
// 22c: 5b                            popq    %rbx
// 22d: 41 5c                         popq    %r12
// 22f: 41 5d                         popq    %r13
// 231: 41 5e                         popq    %r14
// 233: 41 5f                         popq    %r15
// 235: 5d                            popq    %rbp
// 236: ff e0                         jmpq    *%rax
// 238: 49 29 de                      subq    %rbx, %r14
// 23b: 49 83 c6 b8                   addq    $-0x48, %r14
// 23f: 49 c1 ee 03                   shrq    $0x3, %r14
// 243: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 247: 48 8b 03                      movq    (%rbx), %rax
// 24a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024c:  R_X86_64_64  _JIT_TARGET
// 254: 89 c9                         movl    %ecx, %ecx
// 256: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 25a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 260: 48 83 c4 28                   addq    $0x28, %rsp
// 264: 5b                            popq    %rbx
// 265: 41 5c                         popq    %r12
// 267: 41 5d                         popq    %r13
// 269: 41 5e                         popq    %r14
// 26b: 41 5f                         popq    %r15
// 26d: 5d                            popq    %rbp
// 26e: c3                            retq
// 26f: 41 83 fc 02                   cmpl    $0x2, %r12d
// 273: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 279: 45 0f 43 fc                   cmovael %r12d, %r15d
// 27d: 45 31 e4                      xorl    %r12d, %r12d
// 280: eb 1a                         jmp     0x29c <_JIT_ENTRY+0x29c>
// 282: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
// 290: 49 ff c4                      incq    %r12
// 293: 4d 39 e7                      cmpq    %r12, %r15
// 296: 0f 84 dc fe ff ff             je      0x178 <_JIT_ENTRY+0x178>
// 29c: 4e 8b 6c e5 00                movq    (%rbp,%r12,8), %r13
// 2a1: 49 8b 45 00                   movq    (%r13), %rax
// 2a5: 48 85 c0                      testq   %rax, %rax
// 2a8: 7e 06                         jle     0x2b0 <_JIT_ENTRY+0x2b0>
// 2aa: 85 c0                         testl   %eax, %eax
// 2ac: 78 e2                         js      0x290 <_JIT_ENTRY+0x290>
// 2ae: eb 26                         jmp     0x2d6 <_JIT_ENTRY+0x2d6>
// 2b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002b2:  R_X86_64_64  .rodata.str1.1
// 2ba: be 4f 0b 00 00                movl    $0xb4f, %esi            # imm = 0xB4F
// 2bf: 4c 89 ea                      movq    %r13, %rdx
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_NegativeRefcount
// 2cc: ff d0                         callq   *%rax
// 2ce: 49 8b 45 00                   movq    (%r13), %rax
// 2d2: 85 c0                         testl   %eax, %eax
// 2d4: 78 ba                         js      0x290 <_JIT_ENTRY+0x290>
// 2d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2e0: ff d0                         callq   *%rax
// 2e2: 49 ff 4d 00                   decq    (%r13)
// 2e6: 75 a8                         jne     0x290 <_JIT_ENTRY+0x290>
// 2e8: 4c 89 ef                      movq    %r13, %rdi
// 2eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002ed:  R_X86_64_64  _Py_Dealloc
// 2f5: ff d0                         callq   *%rax
// 2f7: eb 97                         jmp     0x290 <_JIT_ENTRY+0x290>
// 2f9: 49 89 c6                      movq    %rax, %r14
// 2fc: e9 67 fd ff ff                jmp     0x68 <_JIT_ENTRY+0x68>
// 301: 
static const unsigned char _DELETE_DEREFplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_body[770] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xe2, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x48, 0x63, 0xf8, 0x49, 0x8b, 0x04, 0xfe, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd6, 0x4c, 0x63, 0xce, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x62, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xe2, 0x4b, 0x8b, 0x34, 0xce, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x56, 0x08, 0x0f, 0x85, 0x1e, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x46, 0x10, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x0c, 0x01, 0x00, 0x00, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x20, 0x49, 0x8d, 0x2c, 0xce, 0x48, 0x85, 0xc0, 0x41, 0x0f, 0x94, 0xc7, 0x48, 0x89, 0x34, 0x24, 0x48, 0x8b, 0x7e, 0x18, 0x44, 0x89, 0xe2, 0x48, 0x89, 0xee, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x41, 0x84, 0xc7, 0x0f, 0x84, 0xf7, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x02, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x51, 0x0b, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b, 0x00, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x20, 0x4c, 0x8b, 0x64, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0xff, 0x0f, 0x75, 0x0c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x0d, 0x01, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xe6, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x53, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x41, 0x83, 0xfc, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfc, 0x45, 0x31, 0xe4, 0xeb, 0x1a, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0xc4, 0x4d, 0x39, 0xe7, 0x0f, 0x84, 0xdc, 0xfe, 0xff, 0xff, 0x4e, 0x8b, 0x6c, 0xe5, 0x00, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0xe2, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4f, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xba, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0xa8, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x97, 0x49, 0x89, 0xc6, 0xe9, 0x67, 0xfd, 0xff, 0xff};
static const Hole _DELETE_DEREFplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_code_holes[22] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x161, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x217, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CALL_BUILTIN_FAST_WITH_KEYWORDS_data_holes[1];

// _DELETE_DEREFplus_CALL_BUILTIN_O
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CALL_BUILTIN_O.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 29: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2d: 4d 85 e4                      testq   %r12, %r12
// 30: 74 17                         je      0x49 <_JIT_ENTRY+0x49>
// 32: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 3b                         jle     0x7e <_JIT_ENTRY+0x7e>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 5d                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 47: eb 7c                         jmp     0xc5 <_JIT_ENTRY+0xc5>
// 49: 48 8b 33                      movq    (%rbx), %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 d0                      movzwl  %ax, %edx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _PyEval_FormatExcUnbound
// 63: 4c 89 ff                      movq    %r15, %rdi
// 66: ff d0                         callq   *%rax
// 68: 49 29 de                      subq    %rbx, %r14
// 6b: 49 83 c6 b8                   addq    $-0x48, %r14
// 6f: 49 c1 ee 03                   shrq    $0x3, %r14
// 73: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 77: 31 c0                         xorl    %eax, %eax
// 79: e9 09 01 00 00                jmp     0x187 <_JIT_ENTRY+0x187>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 21                         js      0xc5 <_JIT_ENTRY+0xc5>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 75 0f                         jne     0xc5 <_JIT_ENTRY+0xc5>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_Dealloc
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c7:  R_X86_64_64  _JIT_OPARG
// cf: 0f b7 c1                      movzwl  %cx, %eax
// d2: 89 c2                         movl    %eax, %edx
// d4: f7 d2                         notl    %edx
// d6: 4c 63 ea                      movslq  %edx, %r13
// d9: 0f b7 e9                      movzwl  %cx, %ebp
// dc: 48 89 e9                      movq    %rbp, %rcx
// df: 48 f7 d9                      negq    %rcx
// e2: 31 d2                         xorl    %edx, %edx
// e4: 66 85 ed                      testw   %bp, %bp
// e7: 0f 94 c2                      sete    %dl
// ea: 31 f6                         xorl    %esi, %esi
// ec: 66 83 fd 01                   cmpw    $0x1, %bp
// f0: 40 0f 94 c6                   sete    %sil
// f4: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// f9: 48 f7 d5                      notq    %rbp
// fc: 48 0f 44 e9                   cmoveq  %rcx, %rbp
// 100: 0f 44 d6                      cmovel  %esi, %edx
// 103: 80 fa 01                      cmpb    $0x1, %dl
// 106: 75 57                         jne     0x15f <_JIT_ENTRY+0x15f>
// 108: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 10d: 29 c1                         subl    %eax, %ecx
// 10f: 48 63 c9                      movslq  %ecx, %rcx
// 112: 4d 8b 24 ce                   movq    (%r14,%rcx,8), %r12
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  PyCFunction_Type
// 120: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 125: 75 38                         jne     0x15f <_JIT_ENTRY+0x15f>
// 127: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 12c: 83 78 10 08                   cmpl    $0x8, 0x10(%rax)
// 130: 75 2d                         jne     0x15f <_JIT_ENTRY+0x15f>
// 132: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
// 137: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 13b: 41 8b 4f 2c                   movl    0x2c(%r15), %ecx
// 13f: 8d 51 ff                      leal    -0x1(%rcx), %edx
// 142: 41 89 57 2c                   movl    %edx, 0x2c(%r15)
// 146: 85 c9                         testl   %ecx, %ecx
// 148: 7e 4c                         jle     0x196 <_JIT_ENTRY+0x196>
// 14a: 49 8b 0c ee                   movq    (%r14,%rbp,8), %rcx
// 14e: 48 89 0c 24                   movq    %rcx, (%rsp)
// 152: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 156: 75 7a                         jne     0x1d2 <_JIT_ENTRY+0x1d2>
// 158: 49 8b 7c 24 18                movq    0x18(%r12), %rdi
// 15d: eb 75                         jmp     0x1d4 <_JIT_ENTRY+0x1d4>
// 15f: 49 29 de                      subq    %rbx, %r14
// 162: 49 83 c6 b8                   addq    $-0x48, %r14
// 166: 49 c1 ee 03                   shrq    $0x3, %r14
// 16a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 16e: 48 8b 03                      movq    (%rbx), %rax
// 171: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000173:  R_X86_64_64  _JIT_TARGET
// 17b: 89 c9                         movl    %ecx, %ecx
// 17d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 181: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 187: 48 83 c4 18                   addq    $0x18, %rsp
// 18b: 5b                            popq    %rbx
// 18c: 41 5c                         popq    %r12
// 18e: 41 5d                         popq    %r13
// 190: 41 5e                         popq    %r14
// 192: 41 5f                         popq    %r15
// 194: 5d                            popq    %rbp
// 195: c3                            retq
// 196: 4c 89 04 24                   movq    %r8, (%rsp)
// 19a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000019c:  R_X86_64_64  .rodata.str1.1+0x39
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _Py_CheckRecursiveCall
// 1ae: 4c 89 ff                      movq    %r15, %rdi
// 1b1: ff d0                         callq   *%rax
// 1b3: 85 c0                         testl   %eax, %eax
// 1b5: 0f 85 ad fe ff ff             jne     0x68 <_JIT_ENTRY+0x68>
// 1bb: 49 8b 44 24 10                movq    0x10(%r12), %rax
// 1c0: 4c 8b 04 24                   movq    (%rsp), %r8
// 1c4: 49 8b 0c ee                   movq    (%r14,%rbp,8), %rcx
// 1c8: 48 89 0c 24                   movq    %rcx, (%rsp)
// 1cc: f6 40 10 20                   testb   $0x20, 0x10(%rax)
// 1d0: 74 86                         je      0x158 <_JIT_ENTRY+0x158>
// 1d2: 31 ff                         xorl    %edi, %edi
// 1d4: 48 8b 2c 24                   movq    (%rsp), %rbp
// 1d8: 48 89 ee                      movq    %rbp, %rsi
// 1db: 41 ff d0                      callq   *%r8
// 1de: 41 ff 47 2c                   incl    0x2c(%r15)
// 1e2: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1e7: 48 8b 45 00                   movq    (%rbp), %rax
// 1eb: 48 85 c0                      testq   %rax, %rax
// 1ee: 7f 26                         jg      0x216 <_JIT_ENTRY+0x216>
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _Py_NegativeRefcount
// 204: be 02 0b 00 00                movl    $0xb02, %esi            # imm = 0xB02
// 209: 48 8b 2c 24                   movq    (%rsp), %rbp
// 20d: 48 89 ea                      movq    %rbp, %rdx
// 210: ff d0                         callq   *%rax
// 212: 48 8b 45 00                   movq    (%rbp), %rax
// 216: 85 c0                         testl   %eax, %eax
// 218: 78 25                         js      0x23f <_JIT_ENTRY+0x23f>
// 21a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 224: ff d0                         callq   *%rax
// 226: 48 8b 04 24                   movq    (%rsp), %rax
// 22a: 48 ff 08                      decq    (%rax)
// 22d: 75 10                         jne     0x23f <_JIT_ENTRY+0x23f>
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _Py_Dealloc
// 239: 48 8b 3c 24                   movq    (%rsp), %rdi
// 23d: ff d0                         callq   *%rax
// 23f: 49 8b 04 24                   movq    (%r12), %rax
// 243: 48 85 c0                      testq   %rax, %rax
// 246: 7f 22                         jg      0x26a <_JIT_ENTRY+0x26a>
// 248: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024a:  R_X86_64_64  .rodata.str1.1
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_NegativeRefcount
// 25c: be 03 0b 00 00                movl    $0xb03, %esi            # imm = 0xB03
// 261: 4c 89 e2                      movq    %r12, %rdx
// 264: ff d0                         callq   *%rax
// 266: 49 8b 04 24                   movq    (%r12), %rax
// 26a: 85 c0                         testl   %eax, %eax
// 26c: 78 21                         js      0x28f <_JIT_ENTRY+0x28f>
// 26e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000270:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 278: ff d0                         callq   *%rax
// 27a: 49 ff 0c 24                   decq    (%r12)
// 27e: 75 0f                         jne     0x28f <_JIT_ENTRY+0x28f>
// 280: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000282:  R_X86_64_64  _Py_Dealloc
// 28a: 4c 89 e7                      movq    %r12, %rdi
// 28d: ff d0                         callq   *%rax
// 28f: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 294: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 298: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 29d: 48 85 c9                      testq   %rcx, %rcx
// 2a0: 74 4c                         je      0x2ee <_JIT_ENTRY+0x2ee>
// 2a2: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 2a6: 48 89 08                      movq    %rcx, (%rax)
// 2a9: 49 8b 47 10                   movq    0x10(%r15), %rax
// 2ad: 48 8b 00                      movq    (%rax), %rax
// 2b0: 84 c0                         testb   %al, %al
// 2b2: 74 17                         je      0x2cb <_JIT_ENTRY+0x2cb>
// 2b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b6:  R_X86_64_64  _Py_HandlePending
// 2be: 4c 89 ff                      movq    %r15, %rdi
// 2c1: ff d0                         callq   *%rax
// 2c3: 85 c0                         testl   %eax, %eax
// 2c5: 0f 85 9d fd ff ff             jne     0x68 <_JIT_ENTRY+0x68>
// 2cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002cd:  R_X86_64_64  _JIT_CONTINUE
// 2d5: 48 89 df                      movq    %rbx, %rdi
// 2d8: 4c 89 f6                      movq    %r14, %rsi
// 2db: 4c 89 fa                      movq    %r15, %rdx
// 2de: 48 83 c4 18                   addq    $0x18, %rsp
// 2e2: 5b                            popq    %rbx
// 2e3: 41 5c                         popq    %r12
// 2e5: 41 5d                         popq    %r13
// 2e7: 41 5e                         popq    %r14
// 2e9: 41 5f                         popq    %r15
// 2eb: 5d                            popq    %rbp
// 2ec: ff e0                         jmpq    *%rax
// 2ee: 49 89 c6                      movq    %rax, %r14
// 2f1: e9 72 fd ff ff                jmp     0x68 <_JIT_ENTRY+0x68>
// 2f6: 
static const unsigned char _DELETE_DEREFplus_CALL_BUILTIN_O_code_body[759] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x09, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x89, 0xc2, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x0f, 0xb7, 0xe9, 0x48, 0x89, 0xe9, 0x48, 0xf7, 0xd9, 0x31, 0xd2, 0x66, 0x85, 0xed, 0x0f, 0x94, 0xc2, 0x31, 0xf6, 0x66, 0x83, 0xfd, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd5, 0x48, 0x0f, 0x44, 0xe9, 0x0f, 0x44, 0xd6, 0x80, 0xfa, 0x01, 0x75, 0x57, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x4d, 0x8b, 0x24, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x38, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x83, 0x78, 0x10, 0x08, 0x75, 0x2d, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x8b, 0x40, 0x08, 0x41, 0x8b, 0x4f, 0x2c, 0x8d, 0x51, 0xff, 0x41, 0x89, 0x57, 0x2c, 0x85, 0xc9, 0x7e, 0x4c, 0x49, 0x8b, 0x0c, 0xee, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x75, 0x7a, 0x49, 0x8b, 0x7c, 0x24, 0x18, 0xeb, 0x75, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x04, 0x24, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0xad, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x4c, 0x8b, 0x04, 0x24, 0x49, 0x8b, 0x0c, 0xee, 0x48, 0x89, 0x0c, 0x24, 0xf6, 0x40, 0x10, 0x20, 0x74, 0x86, 0x31, 0xff, 0x48, 0x8b, 0x2c, 0x24, 0x48, 0x89, 0xee, 0x41, 0xff, 0xd0, 0x41, 0xff, 0x47, 0x2c, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x2c, 0x24, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x25, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0xff, 0x08, 0x75, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x03, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x4c, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x9d, 0xfd, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xe9, 0x72, 0xfd, 0xff, 0xff};
static const Hole _DELETE_DEREFplus_CALL_BUILTIN_O_code_holes[23] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCFunction_Type, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x270, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x282, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x2cd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _DELETE_DEREFplus_CALL_BUILTIN_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _DELETE_DEREFplus_CALL_BUILTIN_O_data_holes[1];

// _DELETE_DEREFplus_CALL_INTRINSIC_1
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CALL_INTRINSIC_1.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 21                         je      0x50 <_JIT_ENTRY+0x50>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 34                         jle     0x74 <_JIT_ENTRY+0x74>
// 40: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000042:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a: 85 c0                         testl   %eax, %eax
// 4c: 79 56                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 4e: eb 6b                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 50: 49 8b 36                      movq    (%r14), %rsi
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _JIT_OPARG
// 5d: 0f b7 d0                      movzwl  %ax, %edx
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _PyEval_FormatExcUnbound
// 6a: 4c 89 ff                      movq    %r15, %rdi
// 6d: ff d0                         callq   *%rax
// 6f: e9 f3 00 00 00                jmp     0x167 <_JIT_ENTRY+0x167>
// 74: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000076:  R_X86_64_64  .rodata.str1.1
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _Py_NegativeRefcount
// 88: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 49 8b 04 24                   movq    (%r12), %rax
// 96: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000098:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 17                         js      0xbb <_JIT_ENTRY+0xbb>
// a4: ff d5                         callq   *%rbp
// a6: 49 ff 0c 24                   decq    (%r12)
// aa: 75 0f                         jne     0xbb <_JIT_ENTRY+0xbb>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_Dealloc
// b6: 4c 89 e7                      movq    %r12, %rdi
// b9: ff d0                         callq   *%rax
// bb: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c1:  R_X86_64_64  _JIT_OPARG
// c9: 0f b7 c0                      movzwl  %ax, %eax
// cc: 48 c1 e0 04                   shlq    $0x4, %rax
// d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d2:  R_X86_64_64  _PyIntrinsics_UnaryFunctions
// da: 4c 89 ff                      movq    %r15, %rdi
// dd: 4c 89 e6                      movq    %r12, %rsi
// e0: ff 14 08                      callq   *(%rax,%rcx)
// e3: 49 89 c5                      movq    %rax, %r13
// e6: 49 8b 04 24                   movq    (%r12), %rax
// ea: 48 85 c0                      testq   %rax, %rax
// ed: 7e 06                         jle     0xf5 <_JIT_ENTRY+0xf5>
// ef: 85 c0                         testl   %eax, %eax
// f1: 79 28                         jns     0x11b <_JIT_ENTRY+0x11b>
// f3: eb 2e                         jmp     0x123 <_JIT_ENTRY+0x123>
// f5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f7:  R_X86_64_64  .rodata.str1.1
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_NegativeRefcount
// 109: be 7e 02 00 00                movl    $0x27e, %esi            # imm = 0x27E
// 10e: 4c 89 e2                      movq    %r12, %rdx
// 111: ff d0                         callq   *%rax
// 113: 49 8b 04 24                   movq    (%r12), %rax
// 117: 85 c0                         testl   %eax, %eax
// 119: 78 08                         js      0x123 <_JIT_ENTRY+0x123>
// 11b: ff d5                         callq   *%rbp
// 11d: 49 ff 0c 24                   decq    (%r12)
// 121: 74 2c                         je      0x14f <_JIT_ENTRY+0x14f>
// 123: 4d 85 ed                      testq   %r13, %r13
// 126: 74 3b                         je      0x163 <_JIT_ENTRY+0x163>
// 128: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 12c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012e:  R_X86_64_64  _JIT_CONTINUE
// 136: 4c 89 f7                      movq    %r14, %rdi
// 139: 48 89 de                      movq    %rbx, %rsi
// 13c: 4c 89 fa                      movq    %r15, %rdx
// 13f: 48 83 c4 08                   addq    $0x8, %rsp
// 143: 5b                            popq    %rbx
// 144: 41 5c                         popq    %r12
// 146: 41 5d                         popq    %r13
// 148: 41 5e                         popq    %r14
// 14a: 41 5f                         popq    %r15
// 14c: 5d                            popq    %rbp
// 14d: ff e0                         jmpq    *%rax
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 4d 85 ed                      testq   %r13, %r13
// 161: 75 c5                         jne     0x128 <_JIT_ENTRY+0x128>
// 163: 48 83 c3 f8                   addq    $-0x8, %rbx
// 167: 4c 29 f3                      subq    %r14, %rbx
// 16a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 16e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 172: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 176: 31 c0                         xorl    %eax, %eax
// 178: 48 83 c4 08                   addq    $0x8, %rsp
// 17c: 5b                            popq    %rbx
// 17d: 41 5c                         popq    %r12
// 17f: 41 5d                         popq    %r13
// 181: 41 5e                         popq    %r14
// 183: 41 5f                         popq    %r15
// 185: 5d                            popq    %rbp
// 186: c3                            retq
// 187: 
static const unsigned char _DELETE_DEREFplus_CALL_INTRINSIC_1_code_body[392] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x21, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x34, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x56, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xf3, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0x14, 0x08, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x2e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2c, 0x4d, 0x85, 0xed, 0x74, 0x3b, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0xc5, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_CALL_INTRINSIC_1_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_UnaryFunctions, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CALL_INTRINSIC_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CALL_INTRINSIC_1_data_holes[1];

// _DELETE_DEREFplus_CALL_INTRINSIC_2
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CALL_INTRINSIC_2.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 2a                         jle     0x6a <_JIT_ENTRY+0x6a>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 4c                         jns     0x90 <_JIT_ENTRY+0x90>
// 44: eb 6b                         jmp     0xb1 <_JIT_ENTRY+0xb1>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: e9 6d 01 00 00                jmp     0x1d7 <_JIT_ENTRY+0x1d7>
// 6a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006c:  R_X86_64_64  .rodata.str1.1
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _Py_NegativeRefcount
// 7e: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 83: 4c 89 e2                      movq    %r12, %rdx
// 86: ff d0                         callq   *%rax
// 88: 49 8b 04 24                   movq    (%r12), %rax
// 8c: 85 c0                         testl   %eax, %eax
// 8e: 78 21                         js      0xb1 <_JIT_ENTRY+0xb1>
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9a: ff d0                         callq   *%rax
// 9c: 49 ff 0c 24                   decq    (%r12)
// a0: 75 0f                         jne     0xb1 <_JIT_ENTRY+0xb1>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_Dealloc
// ac: 4c 89 e7                      movq    %r12, %rdi
// af: ff d0                         callq   *%rax
// b1: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// b5: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  _JIT_OPARG
// c3: 0f b7 c0                      movzwl  %ax, %eax
// c6: 48 c1 e0 04                   shlq    $0x4, %rax
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  _PyIntrinsics_BinaryFunctions
// d4: 4c 89 ff                      movq    %r15, %rdi
// d7: 48 89 ee                      movq    %rbp, %rsi
// da: 4c 89 e2                      movq    %r12, %rdx
// dd: ff 14 08                      callq   *(%rax,%rcx)
// e0: 49 89 c5                      movq    %rax, %r13
// e3: 48 8b 45 00                   movq    (%rbp), %rax
// e7: 48 85 c0                      testq   %rax, %rax
// ea: 7e 06                         jle     0xf2 <_JIT_ENTRY+0xf2>
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 28                         jns     0x118 <_JIT_ENTRY+0x118>
// f0: eb 38                         jmp     0x12a <_JIT_ENTRY+0x12a>
// f2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f4:  R_X86_64_64  .rodata.str1.1
// fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fe:  R_X86_64_64  _Py_NegativeRefcount
// 106: be 8d 02 00 00                movl    $0x28d, %esi            # imm = 0x28D
// 10b: 48 89 ea                      movq    %rbp, %rdx
// 10e: ff d0                         callq   *%rax
// 110: 48 8b 45 00                   movq    (%rbp), %rax
// 114: 85 c0                         testl   %eax, %eax
// 116: 78 12                         js      0x12a <_JIT_ENTRY+0x12a>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 122: ff d0                         callq   *%rax
// 124: 48 ff 4d 00                   decq    (%rbp)
// 128: 74 0f                         je      0x139 <_JIT_ENTRY+0x139>
// 12a: 49 8b 04 24                   movq    (%r12), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7e 1e                         jle     0x151 <_JIT_ENTRY+0x151>
// 133: 85 c0                         testl   %eax, %eax
// 135: 79 40                         jns     0x177 <_JIT_ENTRY+0x177>
// 137: eb 50                         jmp     0x189 <_JIT_ENTRY+0x189>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 48 89 ef                      movq    %rbp, %rdi
// 146: ff d0                         callq   *%rax
// 148: 49 8b 04 24                   movq    (%r12), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f e2                         jg      0x133 <_JIT_ENTRY+0x133>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be 8e 02 00 00                movl    $0x28e, %esi            # imm = 0x28E
// 16a: 4c 89 e2                      movq    %r12, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 49 8b 04 24                   movq    (%r12), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 12                         js      0x189 <_JIT_ENTRY+0x189>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 49 ff 0c 24                   decq    (%r12)
// 187: 74 33                         je      0x1bc <_JIT_ENTRY+0x1bc>
// 189: 48 8d 43 f0                   leaq    -0x10(%rbx), %rax
// 18d: 4d 85 ed                      testq   %r13, %r13
// 190: 74 42                         je      0x1d4 <_JIT_ENTRY+0x1d4>
// 192: 48 83 c3 f8                   addq    $-0x8, %rbx
// 196: 4c 89 28                      movq    %r13, (%rax)
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _JIT_CONTINUE
// 1a3: 4c 89 f7                      movq    %r14, %rdi
// 1a6: 48 89 de                      movq    %rbx, %rsi
// 1a9: 4c 89 fa                      movq    %r15, %rdx
// 1ac: 48 83 c4 08                   addq    $0x8, %rsp
// 1b0: 5b                            popq    %rbx
// 1b1: 41 5c                         popq    %r12
// 1b3: 41 5d                         popq    %r13
// 1b5: 41 5e                         popq    %r14
// 1b7: 41 5f                         popq    %r15
// 1b9: 5d                            popq    %rbp
// 1ba: ff e0                         jmpq    *%rax
// 1bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001be:  R_X86_64_64  _Py_Dealloc
// 1c6: 4c 89 e7                      movq    %r12, %rdi
// 1c9: ff d0                         callq   *%rax
// 1cb: 48 8d 43 f0                   leaq    -0x10(%rbx), %rax
// 1cf: 4d 85 ed                      testq   %r13, %r13
// 1d2: 75 be                         jne     0x192 <_JIT_ENTRY+0x192>
// 1d4: 48 89 c3                      movq    %rax, %rbx
// 1d7: 4c 29 f3                      subq    %r14, %rbx
// 1da: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1de: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1e2: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1e6: 31 c0                         xorl    %eax, %eax
// 1e8: 48 83 c4 08                   addq    $0x8, %rsp
// 1ec: 5b                            popq    %rbx
// 1ed: 41 5c                         popq    %r12
// 1ef: 41 5d                         popq    %r13
// 1f1: 41 5e                         popq    %r14
// 1f3: 41 5f                         popq    %r15
// 1f5: 5d                            popq    %rbp
// 1f6: c3                            retq
// 1f7: 
static const unsigned char _DELETE_DEREFplus_CALL_INTRINSIC_2_code_body[504] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x6d, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xe2, 0xff, 0x14, 0x08, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8d, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x8e, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x33, 0x48, 0x8d, 0x43, 0xf0, 0x4d, 0x85, 0xed, 0x74, 0x42, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x89, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8d, 0x43, 0xf0, 0x4d, 0x85, 0xed, 0x75, 0xbe, 0x48, 0x89, 0xc3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_CALL_INTRINSIC_2_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyIntrinsics_BinaryFunctions, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CALL_INTRINSIC_2_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CALL_INTRINSIC_2_data_holes[1];

// _DELETE_DEREFplus_CALL_ISINSTANCE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CALL_ISINSTANCE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 29: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2d: 4d 85 e4                      testq   %r12, %r12
// 30: 74 17                         je      0x49 <_JIT_ENTRY+0x49>
// 32: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 3b                         jle     0x7e <_JIT_ENTRY+0x7e>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 5d                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 47: eb 7c                         jmp     0xc5 <_JIT_ENTRY+0xc5>
// 49: 48 8b 33                      movq    (%rbx), %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 d0                      movzwl  %ax, %edx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _PyEval_FormatExcUnbound
// 63: 4c 89 ff                      movq    %r15, %rdi
// 66: ff d0                         callq   *%rax
// 68: 49 29 de                      subq    %rbx, %r14
// 6b: 49 83 c6 b8                   addq    $-0x48, %r14
// 6f: 49 c1 ee 03                   shrq    $0x3, %r14
// 73: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 77: 31 c0                         xorl    %eax, %eax
// 79: e9 d0 00 00 00                jmp     0x14e <_JIT_ENTRY+0x14e>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 21                         js      0xc5 <_JIT_ENTRY+0xc5>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 75 0f                         jne     0xc5 <_JIT_ENTRY+0xc5>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_Dealloc
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  _JIT_OPARG
// cf: 0f b7 c8                      movzwl  %ax, %ecx
// d2: 89 ca                         movl    %ecx, %edx
// d4: f7 d2                         notl    %edx
// d6: 48 63 ea                      movslq  %edx, %rbp
// d9: 0f b7 c0                      movzwl  %ax, %eax
// dc: 48 89 c2                      movq    %rax, %rdx
// df: 48 f7 da                      negq    %rdx
// e2: 31 f6                         xorl    %esi, %esi
// e4: 66 83 f8 01                   cmpw    $0x1, %ax
// e8: 40 0f 94 c6                   sete    %sil
// ec: 31 ff                         xorl    %edi, %edi
// ee: 66 83 f8 02                   cmpw    $0x2, %ax
// f2: 40 0f 94 c7                   sete    %dil
// f6: 49 83 3c ee 00                cmpq    $0x0, (%r14,%rbp,8)
// fb: 48 f7 d0                      notq    %rax
// fe: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 102: 0f 44 f7                      cmovel  %edi, %esi
// 105: 40 80 fe 01                   cmpb    $0x1, %sil
// 109: 75 1b                         jne     0x126 <_JIT_ENTRY+0x126>
// 10b: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 110: 29 ca                         subl    %ecx, %edx
// 112: 48 63 d2                      movslq  %edx, %rdx
// 115: 4d 8b 24 d6                   movq    (%r14,%rdx,8), %r12
// 119: 49 8b 4f 10                   movq    0x10(%r15), %rcx
// 11d: 4c 3b a1 b8 54 06 00          cmpq    0x654b8(%rcx), %r12
// 124: 74 37                         je      0x15d <_JIT_ENTRY+0x15d>
// 126: 49 29 de                      subq    %rbx, %r14
// 129: 49 83 c6 b8                   addq    $-0x48, %r14
// 12d: 49 c1 ee 03                   shrq    $0x3, %r14
// 131: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 135: 48 8b 03                      movq    (%rbx), %rax
// 138: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000013a:  R_X86_64_64  _JIT_TARGET
// 142: 89 c9                         movl    %ecx, %ecx
// 144: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 148: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 14e: 48 83 c4 18                   addq    $0x18, %rsp
// 152: 5b                            popq    %rbx
// 153: 41 5c                         popq    %r12
// 155: 41 5d                         popq    %r13
// 157: 41 5e                         popq    %r14
// 159: 41 5f                         popq    %r15
// 15b: 5d                            popq    %rbp
// 15c: c3                            retq
// 15d: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 162: 4d 8b 2c c6                   movq    (%r14,%rax,8), %r13
// 166: 49 8b 74 c6 08                movq    0x8(%r14,%rax,8), %rsi
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  PyObject_IsInstance
// 175: 4c 89 ef                      movq    %r13, %rdi
// 178: 48 89 74 24 08                movq    %rsi, 0x8(%rsp)
// 17d: ff d0                         callq   *%rax
// 17f: 85 c0                         testl   %eax, %eax
// 181: 0f 88 e1 fe ff ff             js      0x68 <_JIT_ENTRY+0x68>
// 187: 89 c7                         movl    %eax, %edi
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  PyBool_FromLong
// 193: ff d0                         callq   *%rax
// 195: 48 89 04 24                   movq    %rax, (%rsp)
// 199: 49 8b 45 00                   movq    (%r13), %rax
// 19d: 48 85 c0                      testq   %rax, %rax
// 1a0: 7f 22                         jg      0x1c4 <_JIT_ENTRY+0x1c4>
// 1a2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a4:  R_X86_64_64  .rodata.str1.1
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _Py_NegativeRefcount
// 1b6: be 96 0b 00 00                movl    $0xb96, %esi            # imm = 0xB96
// 1bb: 4c 89 ea                      movq    %r13, %rdx
// 1be: ff d0                         callq   *%rax
// 1c0: 49 8b 45 00                   movq    (%r13), %rax
// 1c4: 85 c0                         testl   %eax, %eax
// 1c6: 78 21                         js      0x1e9 <_JIT_ENTRY+0x1e9>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d2: ff d0                         callq   *%rax
// 1d4: 49 ff 4d 00                   decq    (%r13)
// 1d8: 75 0f                         jne     0x1e9 <_JIT_ENTRY+0x1e9>
// 1da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dc:  R_X86_64_64  _Py_Dealloc
// 1e4: 4c 89 ef                      movq    %r13, %rdi
// 1e7: ff d0                         callq   *%rax
// 1e9: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
// 1ee: 49 8b 45 00                   movq    (%r13), %rax
// 1f2: 48 85 c0                      testq   %rax, %rax
// 1f5: 7f 22                         jg      0x219 <_JIT_ENTRY+0x219>
// 1f7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f9:  R_X86_64_64  .rodata.str1.1
// 201: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000203:  R_X86_64_64  _Py_NegativeRefcount
// 20b: be 97 0b 00 00                movl    $0xb97, %esi            # imm = 0xB97
// 210: 4c 89 ea                      movq    %r13, %rdx
// 213: ff d0                         callq   *%rax
// 215: 49 8b 45 00                   movq    (%r13), %rax
// 219: 85 c0                         testl   %eax, %eax
// 21b: 78 21                         js      0x23e <_JIT_ENTRY+0x23e>
// 21d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 227: ff d0                         callq   *%rax
// 229: 49 ff 4d 00                   decq    (%r13)
// 22d: 75 0f                         jne     0x23e <_JIT_ENTRY+0x23e>
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _Py_Dealloc
// 239: 4c 89 ef                      movq    %r13, %rdi
// 23c: ff d0                         callq   *%rax
// 23e: 49 8b 04 24                   movq    (%r12), %rax
// 242: 48 85 c0                      testq   %rax, %rax
// 245: 7f 22                         jg      0x269 <_JIT_ENTRY+0x269>
// 247: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000249:  R_X86_64_64  .rodata.str1.1
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _Py_NegativeRefcount
// 25b: be 98 0b 00 00                movl    $0xb98, %esi            # imm = 0xB98
// 260: 4c 89 e2                      movq    %r12, %rdx
// 263: ff d0                         callq   *%rax
// 265: 49 8b 04 24                   movq    (%r12), %rax
// 269: 85 c0                         testl   %eax, %eax
// 26b: 78 21                         js      0x28e <_JIT_ENTRY+0x28e>
// 26d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000026f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 277: ff d0                         callq   *%rax
// 279: 49 ff 0c 24                   decq    (%r12)
// 27d: 75 0f                         jne     0x28e <_JIT_ENTRY+0x28e>
// 27f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000281:  R_X86_64_64  _Py_Dealloc
// 289: 4c 89 e7                      movq    %r12, %rdi
// 28c: ff d0                         callq   *%rax
// 28e: 48 8b 44 24 10                movq    0x10(%rsp), %rax
// 293: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 297: 48 8b 0c 24                   movq    (%rsp), %rcx
// 29b: 48 85 c9                      testq   %rcx, %rcx
// 29e: 74 27                         je      0x2c7 <_JIT_ENTRY+0x2c7>
// 2a0: 49 8d 34 ee                   leaq    (%r14,%rbp,8), %rsi
// 2a4: 48 89 08                      movq    %rcx, (%rax)
// 2a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a9:  R_X86_64_64  _JIT_CONTINUE
// 2b1: 48 89 df                      movq    %rbx, %rdi
// 2b4: 4c 89 fa                      movq    %r15, %rdx
// 2b7: 48 83 c4 18                   addq    $0x18, %rsp
// 2bb: 5b                            popq    %rbx
// 2bc: 41 5c                         popq    %r12
// 2be: 41 5d                         popq    %r13
// 2c0: 41 5e                         popq    %r14
// 2c2: 41 5f                         popq    %r15
// 2c4: 5d                            popq    %rbp
// 2c5: ff e0                         jmpq    *%rax
// 2c7: 49 89 c6                      movq    %rax, %r14
// 2ca: e9 99 fd ff ff                jmp     0x68 <_JIT_ENTRY+0x68>
// 2cf: 
static const unsigned char _DELETE_DEREFplus_CALL_ISINSTANCE_code_body[720] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xd0, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xea, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x02, 0x40, 0x0f, 0x94, 0xc7, 0x49, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xd2, 0x4d, 0x8b, 0x24, 0xd6, 0x49, 0x8b, 0x4f, 0x10, 0x4c, 0x3b, 0xa1, 0xb8, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0x89, 0x54, 0x24, 0x10, 0x4d, 0x8b, 0x2c, 0xc6, 0x49, 0x8b, 0x74, 0xc6, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x48, 0x89, 0x74, 0x24, 0x08, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xe1, 0xfe, 0xff, 0xff, 0x89, 0xc7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x10, 0x49, 0x8d, 0x04, 0xc6, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x74, 0x27, 0x49, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xe9, 0x99, 0xfd, 0xff, 0xff};
static const Hole _DELETE_DEREFplus_CALL_ISINSTANCE_code_holes[25] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsInstance, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_FromLong, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x203, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x21f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x249, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x26f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2a9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CALL_ISINSTANCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CALL_ISINSTANCE_data_holes[1];

// _DELETE_DEREFplus_CALL_LEN
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CALL_LEN.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 29: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2d: 4d 85 e4                      testq   %r12, %r12
// 30: 74 17                         je      0x49 <_JIT_ENTRY+0x49>
// 32: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 3b                         jle     0x7e <_JIT_ENTRY+0x7e>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 5d                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 47: eb 7c                         jmp     0xc5 <_JIT_ENTRY+0xc5>
// 49: 48 8b 33                      movq    (%rbx), %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 d0                      movzwl  %ax, %edx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _PyEval_FormatExcUnbound
// 63: 4c 89 ff                      movq    %r15, %rdi
// 66: ff d0                         callq   *%rax
// 68: 49 29 de                      subq    %rbx, %r14
// 6b: 49 83 c6 b8                   addq    $-0x48, %r14
// 6f: 49 c1 ee 03                   shrq    $0x3, %r14
// 73: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 77: 31 c0                         xorl    %eax, %eax
// 79: e9 cf 00 00 00                jmp     0x14d <_JIT_ENTRY+0x14d>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 21                         js      0xc5 <_JIT_ENTRY+0xc5>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 75 0f                         jne     0xc5 <_JIT_ENTRY+0xc5>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_Dealloc
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  _JIT_OPARG
// cf: 0f b7 c8                      movzwl  %ax, %ecx
// d2: 89 ca                         movl    %ecx, %edx
// d4: f7 d2                         notl    %edx
// d6: 4c 63 ea                      movslq  %edx, %r13
// d9: 0f b7 c0                      movzwl  %ax, %eax
// dc: 48 89 c2                      movq    %rax, %rdx
// df: 48 f7 da                      negq    %rdx
// e2: 31 f6                         xorl    %esi, %esi
// e4: 66 85 c0                      testw   %ax, %ax
// e7: 40 0f 94 c6                   sete    %sil
// eb: 31 ff                         xorl    %edi, %edi
// ed: 66 83 f8 01                   cmpw    $0x1, %ax
// f1: 40 0f 94 c7                   sete    %dil
// f5: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// fa: 48 f7 d0                      notq    %rax
// fd: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 101: 0f 44 f7                      cmovel  %edi, %esi
// 104: 40 80 fe 01                   cmpb    $0x1, %sil
// 108: 75 1b                         jne     0x125 <_JIT_ENTRY+0x125>
// 10a: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 10f: 29 ca                         subl    %ecx, %edx
// 111: 4c 63 e2                      movslq  %edx, %r12
// 114: 4b 8b 2c e6                   movq    (%r14,%r12,8), %rbp
// 118: 49 8b 4f 10                   movq    0x10(%r15), %rcx
// 11c: 48 3b a9 c0 54 06 00          cmpq    0x654c0(%rcx), %rbp
// 123: 74 37                         je      0x15c <_JIT_ENTRY+0x15c>
// 125: 49 29 de                      subq    %rbx, %r14
// 128: 49 83 c6 b8                   addq    $-0x48, %r14
// 12c: 49 c1 ee 03                   shrq    $0x3, %r14
// 130: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 134: 48 8b 03                      movq    (%rbx), %rax
// 137: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000139:  R_X86_64_64  _JIT_TARGET
// 141: 89 c9                         movl    %ecx, %ecx
// 143: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 147: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 14d: 48 83 c4 18                   addq    $0x18, %rsp
// 151: 5b                            popq    %rbx
// 152: 41 5c                         popq    %r12
// 154: 41 5d                         popq    %r13
// 156: 41 5e                         popq    %r14
// 158: 41 5f                         popq    %r15
// 15a: 5d                            popq    %rbp
// 15b: c3                            retq
// 15c: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// 160: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000162:  R_X86_64_64  PyObject_Size
// 16a: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
// 16f: ff d0                         callq   *%rax
// 171: 48 85 c0                      testq   %rax, %rax
// 174: 0f 88 ee fe ff ff             js      0x68 <_JIT_ENTRY+0x68>
// 17a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017c:  R_X86_64_64  PyLong_FromSsize_t
// 184: 48 89 c7                      movq    %rax, %rdi
// 187: ff d1                         callq   *%rcx
// 189: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 18e: 48 8b 45 00                   movq    (%rbp), %rax
// 192: 48 85 c0                      testq   %rax, %rax
// 195: 7f 22                         jg      0x1b9 <_JIT_ENTRY+0x1b9>
// 197: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000199:  R_X86_64_64  .rodata.str1.1
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_NegativeRefcount
// 1ab: be 73 0b 00 00                movl    $0xb73, %esi            # imm = 0xB73
// 1b0: 48 89 ea                      movq    %rbp, %rdx
// 1b3: ff d0                         callq   *%rax
// 1b5: 48 8b 45 00                   movq    (%rbp), %rax
// 1b9: 85 c0                         testl   %eax, %eax
// 1bb: 78 21                         js      0x1de <_JIT_ENTRY+0x1de>
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c7: ff d0                         callq   *%rax
// 1c9: 48 ff 4d 00                   decq    (%rbp)
// 1cd: 75 0f                         jne     0x1de <_JIT_ENTRY+0x1de>
// 1cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d1:  R_X86_64_64  _Py_Dealloc
// 1d9: 48 89 ef                      movq    %rbp, %rdi
// 1dc: ff d0                         callq   *%rax
// 1de: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 1e3: 48 8b 45 00                   movq    (%rbp), %rax
// 1e7: 48 85 c0                      testq   %rax, %rax
// 1ea: 7f 22                         jg      0x20e <_JIT_ENTRY+0x20e>
// 1ec: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ee:  R_X86_64_64  .rodata.str1.1
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_NegativeRefcount
// 200: be 74 0b 00 00                movl    $0xb74, %esi            # imm = 0xB74
// 205: 48 89 ea                      movq    %rbp, %rdx
// 208: ff d0                         callq   *%rax
// 20a: 48 8b 45 00                   movq    (%rbp), %rax
// 20e: 85 c0                         testl   %eax, %eax
// 210: 78 21                         js      0x233 <_JIT_ENTRY+0x233>
// 212: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000214:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 21c: ff d0                         callq   *%rax
// 21e: 48 ff 4d 00                   decq    (%rbp)
// 222: 75 0f                         jne     0x233 <_JIT_ENTRY+0x233>
// 224: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000226:  R_X86_64_64  _Py_Dealloc
// 22e: 48 89 ef                      movq    %rbp, %rdi
// 231: ff d0                         callq   *%rax
// 233: 4b 8d 04 e6                   leaq    (%r14,%r12,8), %rax
// 237: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 23c: 48 85 c9                      testq   %rcx, %rcx
// 23f: 74 27                         je      0x268 <_JIT_ENTRY+0x268>
// 241: 4b 8d 34 ee                   leaq    (%r14,%r13,8), %rsi
// 245: 48 89 08                      movq    %rcx, (%rax)
// 248: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024a:  R_X86_64_64  _JIT_CONTINUE
// 252: 48 89 df                      movq    %rbx, %rdi
// 255: 4c 89 fa                      movq    %r15, %rdx
// 258: 48 83 c4 18                   addq    $0x18, %rsp
// 25c: 5b                            popq    %rbx
// 25d: 41 5c                         popq    %r12
// 25f: 41 5d                         popq    %r13
// 261: 41 5e                         popq    %r14
// 263: 41 5f                         popq    %r15
// 265: 5d                            popq    %rbp
// 266: ff e0                         jmpq    *%rax
// 268: 49 89 c6                      movq    %rax, %r14
// 26b: e9 f8 fd ff ff                jmp     0x68 <_JIT_ENTRY+0x68>
// 270: 
static const unsigned char _DELETE_DEREFplus_CALL_LEN_code_body[625] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xcf, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x1b, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x4c, 0x63, 0xe2, 0x4b, 0x8b, 0x2c, 0xe6, 0x49, 0x8b, 0x4f, 0x10, 0x48, 0x3b, 0xa9, 0xc0, 0x54, 0x06, 0x00, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x7c, 0x24, 0x10, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x88, 0xee, 0xfe, 0xff, 0xff, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x73, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x74, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x4b, 0x8d, 0x04, 0xe6, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x74, 0x27, 0x4b, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x89, 0xc6, 0xe9, 0xf8, 0xfd, 0xff, 0xff};
static const Hole _DELETE_DEREFplus_CALL_LEN_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x162, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0x17c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ee, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x214, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x226, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CALL_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CALL_LEN_data_holes[1];

// _DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_FAST
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_FAST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 29: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2d: 4d 85 e4                      testq   %r12, %r12
// 30: 74 17                         je      0x49 <_JIT_ENTRY+0x49>
// 32: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 3b                         jle     0x7e <_JIT_ENTRY+0x7e>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 5d                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 47: eb 7c                         jmp     0xc5 <_JIT_ENTRY+0xc5>
// 49: 48 8b 33                      movq    (%rbx), %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 d0                      movzwl  %ax, %edx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _PyEval_FormatExcUnbound
// 63: 4c 89 ff                      movq    %r15, %rdi
// 66: ff d0                         callq   *%rax
// 68: 49 29 de                      subq    %rbx, %r14
// 6b: 49 83 c6 b8                   addq    $-0x48, %r14
// 6f: 49 c1 ee 03                   shrq    $0x3, %r14
// 73: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 77: 31 c0                         xorl    %eax, %eax
// 79: e9 e2 00 00 00                jmp     0x160 <_JIT_ENTRY+0x160>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 21                         js      0xc5 <_JIT_ENTRY+0xc5>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 75 0f                         jne     0xc5 <_JIT_ENTRY+0xc5>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_Dealloc
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c7:  R_X86_64_64  _JIT_OPARG
// cf: 0f b7 d1                      movzwl  %cx, %edx
// d2: 89 d0                         movl    %edx, %eax
// d4: f7 d0                         notl    %eax
// d6: 4c 63 c8                      movslq  %eax, %r9
// d9: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// dd: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// e2: 29 d6                         subl    %edx, %esi
// e4: 4c 63 d6                      movslq  %esi, %r10
// e7: 0f b7 c9                      movzwl  %cx, %ecx
// ea: 48 89 ce                      movq    %rcx, %rsi
// ed: 48 f7 de                      negq    %rsi
// f0: 44 8d 6a 01                   leal    0x1(%rdx), %r13d
// f4: 48 85 c0                      testq   %rax, %rax
// f7: 48 f7 d1                      notq    %rcx
// fa: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// fe: 44 0f 44 ea                   cmovel  %edx, %r13d
// 102: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 106: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000108:  R_X86_64_64  PyMethodDescr_Type
// 110: 49 39 54 24 08                cmpq    %rdx, 0x8(%r12)
// 115: 75 21                         jne     0x138 <_JIT_ENTRY+0x138>
// 117: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 11c: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
// 124: 75 12                         jne     0x138 <_JIT_ENTRY+0x138>
// 126: 49 8d 14 ce                   leaq    (%r14,%rcx,8), %rdx
// 12a: 48 8b 3a                      movq    (%rdx), %rdi
// 12d: 48 8b 4f 08                   movq    0x8(%rdi), %rcx
// 131: 49 3b 4c 24 10                cmpq    0x10(%r12), %rcx
// 136: 74 37                         je      0x16f <_JIT_ENTRY+0x16f>
// 138: 49 29 de                      subq    %rbx, %r14
// 13b: 49 83 c6 b8                   addq    $-0x48, %r14
// 13f: 49 c1 ee 03                   shrq    $0x3, %r14
// 143: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 147: 48 8b 03                      movq    (%rbx), %rax
// 14a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000014c:  R_X86_64_64  _JIT_TARGET
// 154: 89 c9                         movl    %ecx, %ecx
// 156: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 15a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 160: 48 83 c4 28                   addq    $0x28, %rsp
// 164: 5b                            popq    %rbx
// 165: 41 5c                         popq    %r12
// 167: 41 5d                         popq    %r13
// 169: 41 5e                         popq    %r14
// 16b: 41 5f                         popq    %r15
// 16d: 5d                            popq    %rbp
// 16e: c3                            retq
// 16f: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 174: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 179: 4c 89 7c 24 18                movq    %r15, 0x18(%rsp)
// 17e: 48 85 c0                      testq   %rax, %rax
// 181: 40 0f 94 c5                   sete    %bpl
// 185: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// 189: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 18e: 48 8d 72 08                   leaq    0x8(%rdx), %rsi
// 192: 48 63 d0                      movslq  %eax, %rdx
// 195: 41 ff 50 08                   callq   *0x8(%r8)
// 199: 48 89 04 24                   movq    %rax, (%rsp)
// 19d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019f:  R_X86_64_64  _JIT_OPARG
// 1a7: 66 85 c0                      testw   %ax, %ax
// 1aa: 0f 94 c0                      sete    %al
// 1ad: 40 84 c5                      testb   %al, %bpl
// 1b0: 0f 84 bc 00 00 00             je      0x272 <_JIT_ENTRY+0x272>
// 1b6: 49 8b 04 24                   movq    (%r12), %rax
// 1ba: 48 85 c0                      testq   %rax, %rax
// 1bd: 7f 22                         jg      0x1e1 <_JIT_ENTRY+0x1e1>
// 1bf: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c1:  R_X86_64_64  .rodata.str1.1
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_NegativeRefcount
// 1d3: be 38 0c 00 00                movl    $0xc38, %esi            # imm = 0xC38
// 1d8: 4c 89 e2                      movq    %r12, %rdx
// 1db: ff d0                         callq   *%rax
// 1dd: 49 8b 04 24                   movq    (%r12), %rax
// 1e1: 85 c0                         testl   %eax, %eax
// 1e3: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 1e8: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 1ed: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 1f2: 78 21                         js      0x215 <_JIT_ENTRY+0x215>
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1fe: ff d0                         callq   *%rax
// 200: 49 ff 0c 24                   decq    (%r12)
// 204: 75 0f                         jne     0x215 <_JIT_ENTRY+0x215>
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_Dealloc
// 210: 4c 89 e7                      movq    %r12, %rdi
// 213: ff d0                         callq   *%rax
// 215: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 219: 48 8b 0c 24                   movq    (%rsp), %rcx
// 21d: 48 85 c9                      testq   %rcx, %rcx
// 220: 0f 84 e3 00 00 00             je      0x309 <_JIT_ENTRY+0x309>
// 226: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 22a: 48 89 08                      movq    %rcx, (%rax)
// 22d: 49 8b 47 10                   movq    0x10(%r15), %rax
// 231: 48 8b 00                      movq    (%rax), %rax
// 234: 84 c0                         testb   %al, %al
// 236: 74 17                         je      0x24f <_JIT_ENTRY+0x24f>
// 238: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023a:  R_X86_64_64  _Py_HandlePending
// 242: 4c 89 ff                      movq    %r15, %rdi
// 245: ff d0                         callq   *%rax
// 247: 85 c0                         testl   %eax, %eax
// 249: 0f 85 19 fe ff ff             jne     0x68 <_JIT_ENTRY+0x68>
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _JIT_CONTINUE
// 259: 48 89 df                      movq    %rbx, %rdi
// 25c: 4c 89 f6                      movq    %r14, %rsi
// 25f: 4c 89 fa                      movq    %r15, %rdx
// 262: 48 83 c4 28                   addq    $0x28, %rsp
// 266: 5b                            popq    %rbx
// 267: 41 5c                         popq    %r12
// 269: 41 5d                         popq    %r13
// 26b: 41 5e                         popq    %r14
// 26d: 41 5f                         popq    %r15
// 26f: 5d                            popq    %rbp
// 270: ff e0                         jmpq    *%rax
// 272: 41 83 fd 02                   cmpl    $0x2, %r13d
// 276: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 27c: 45 0f 43 fd                   cmovael %r13d, %r15d
// 280: 31 ed                         xorl    %ebp, %ebp
// 282: eb 18                         jmp     0x29c <_JIT_ENTRY+0x29c>
// 284: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 290: 48 ff c5                      incq    %rbp
// 293: 49 39 ef                      cmpq    %rbp, %r15
// 296: 0f 84 1a ff ff ff             je      0x1b6 <_JIT_ENTRY+0x1b6>
// 29c: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 2a1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 2a5: 49 8b 45 00                   movq    (%r13), %rax
// 2a9: 48 85 c0                      testq   %rax, %rax
// 2ac: 7e 12                         jle     0x2c0 <_JIT_ENTRY+0x2c0>
// 2ae: 85 c0                         testl   %eax, %eax
// 2b0: 78 de                         js      0x290 <_JIT_ENTRY+0x290>
// 2b2: eb 32                         jmp     0x2e6 <_JIT_ENTRY+0x2e6>
// 2b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 2c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c2:  R_X86_64_64  .rodata.str1.1
// 2ca: be 36 0c 00 00                movl    $0xc36, %esi            # imm = 0xC36
// 2cf: 4c 89 ea                      movq    %r13, %rdx
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_NegativeRefcount
// 2dc: ff d0                         callq   *%rax
// 2de: 49 8b 45 00                   movq    (%r13), %rax
// 2e2: 85 c0                         testl   %eax, %eax
// 2e4: 78 aa                         js      0x290 <_JIT_ENTRY+0x290>
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f0: ff d0                         callq   *%rax
// 2f2: 49 ff 4d 00                   decq    (%r13)
// 2f6: 75 98                         jne     0x290 <_JIT_ENTRY+0x290>
// 2f8: 4c 89 ef                      movq    %r13, %rdi
// 2fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fd:  R_X86_64_64  _Py_Dealloc
// 305: ff d0                         callq   *%rax
// 307: eb 87                         jmp     0x290 <_JIT_ENTRY+0x290>
// 309: 49 89 c6                      movq    %rax, %r14
// 30c: e9 57 fd ff ff                jmp     0x68 <_JIT_ENTRY+0x68>
// 311: 
static const unsigned char _DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_FAST_code_body[786] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xe2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd6, 0x4c, 0x63, 0xd6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x6a, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xea, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x54, 0x24, 0x08, 0x75, 0x21, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00, 0x75, 0x12, 0x49, 0x8d, 0x14, 0xce, 0x48, 0x8b, 0x3a, 0x48, 0x8b, 0x4f, 0x08, 0x49, 0x3b, 0x4c, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x7c, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x89, 0x54, 0x24, 0x20, 0x48, 0x8d, 0x72, 0x08, 0x48, 0x63, 0xd0, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xbc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xe3, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x19, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x18, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x1a, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x36, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x49, 0x89, 0xc6, 0xe9, 0x57, 0xfd, 0xff, 0xff};
static const Hole _DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_FAST_code_holes[22] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x19f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x251, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_FAST_data_holes[1];

// _DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 28                   subq    $0x28, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 29: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2d: 4d 85 e4                      testq   %r12, %r12
// 30: 74 17                         je      0x49 <_JIT_ENTRY+0x49>
// 32: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 3b                         jle     0x7e <_JIT_ENTRY+0x7e>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 5d                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 47: eb 7c                         jmp     0xc5 <_JIT_ENTRY+0xc5>
// 49: 48 8b 33                      movq    (%rbx), %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 d0                      movzwl  %ax, %edx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _PyEval_FormatExcUnbound
// 63: 4c 89 ff                      movq    %r15, %rdi
// 66: ff d0                         callq   *%rax
// 68: 49 29 de                      subq    %rbx, %r14
// 6b: 49 83 c6 b8                   addq    $-0x48, %r14
// 6f: 49 c1 ee 03                   shrq    $0x3, %r14
// 73: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 77: 31 c0                         xorl    %eax, %eax
// 79: e9 e2 00 00 00                jmp     0x160 <_JIT_ENTRY+0x160>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 21                         js      0xc5 <_JIT_ENTRY+0xc5>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 75 0f                         jne     0xc5 <_JIT_ENTRY+0xc5>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_Dealloc
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c7:  R_X86_64_64  _JIT_OPARG
// cf: 0f b7 d1                      movzwl  %cx, %edx
// d2: 89 d0                         movl    %edx, %eax
// d4: f7 d0                         notl    %eax
// d6: 4c 63 c8                      movslq  %eax, %r9
// d9: 4b 8b 04 ce                   movq    (%r14,%r9,8), %rax
// dd: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
// e2: 29 d6                         subl    %edx, %esi
// e4: 4c 63 d6                      movslq  %esi, %r10
// e7: 0f b7 c9                      movzwl  %cx, %ecx
// ea: 48 89 ce                      movq    %rcx, %rsi
// ed: 48 f7 de                      negq    %rsi
// f0: 44 8d 6a 01                   leal    0x1(%rdx), %r13d
// f4: 48 85 c0                      testq   %rax, %rax
// f7: 48 f7 d1                      notq    %rcx
// fa: 48 0f 44 ce                   cmoveq  %rsi, %rcx
// fe: 44 0f 44 ea                   cmovel  %edx, %r13d
// 102: 4f 8b 24 d6                   movq    (%r14,%r10,8), %r12
// 106: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000108:  R_X86_64_64  PyMethodDescr_Type
// 110: 49 39 54 24 08                cmpq    %rdx, 0x8(%r12)
// 115: 75 21                         jne     0x138 <_JIT_ENTRY+0x138>
// 117: 4d 8b 44 24 28                movq    0x28(%r12), %r8
// 11c: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
// 124: 75 12                         jne     0x138 <_JIT_ENTRY+0x138>
// 126: 49 8d 14 ce                   leaq    (%r14,%rcx,8), %rdx
// 12a: 48 8b 3a                      movq    (%rdx), %rdi
// 12d: 48 8b 4f 08                   movq    0x8(%rdi), %rcx
// 131: 49 3b 4c 24 10                cmpq    0x10(%r12), %rcx
// 136: 74 37                         je      0x16f <_JIT_ENTRY+0x16f>
// 138: 49 29 de                      subq    %rbx, %r14
// 13b: 49 83 c6 b8                   addq    $-0x48, %r14
// 13f: 49 c1 ee 03                   shrq    $0x3, %r14
// 143: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 147: 48 8b 03                      movq    (%rbx), %rax
// 14a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000014c:  R_X86_64_64  _JIT_TARGET
// 154: 89 c9                         movl    %ecx, %ecx
// 156: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 15a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 160: 48 83 c4 28                   addq    $0x28, %rsp
// 164: 5b                            popq    %rbx
// 165: 41 5c                         popq    %r12
// 167: 41 5d                         popq    %r13
// 169: 41 5e                         popq    %r14
// 16b: 41 5f                         popq    %r15
// 16d: 5d                            popq    %rbp
// 16e: c3                            retq
// 16f: 4c 89 54 24 08                movq    %r10, 0x8(%rsp)
// 174: 4c 89 4c 24 10                movq    %r9, 0x10(%rsp)
// 179: 4c 89 7c 24 18                movq    %r15, 0x18(%rsp)
// 17e: 48 85 c0                      testq   %rax, %rax
// 181: 40 0f 94 c5                   sete    %bpl
// 185: 41 8d 45 ff                   leal    -0x1(%r13), %eax
// 189: 48 89 54 24 20                movq    %rdx, 0x20(%rsp)
// 18e: 48 8d 72 08                   leaq    0x8(%rdx), %rsi
// 192: 48 63 d0                      movslq  %eax, %rdx
// 195: 31 c9                         xorl    %ecx, %ecx
// 197: 41 ff 50 08                   callq   *0x8(%r8)
// 19b: 48 89 04 24                   movq    %rax, (%rsp)
// 19f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a1:  R_X86_64_64  _JIT_OPARG
// 1a9: 66 85 c0                      testw   %ax, %ax
// 1ac: 0f 94 c0                      sete    %al
// 1af: 40 84 c5                      testb   %al, %bpl
// 1b2: 0f 84 bc 00 00 00             je      0x274 <_JIT_ENTRY+0x274>
// 1b8: 49 8b 04 24                   movq    (%r12), %rax
// 1bc: 48 85 c0                      testq   %rax, %rax
// 1bf: 7f 22                         jg      0x1e3 <_JIT_ENTRY+0x1e3>
// 1c1: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c3:  R_X86_64_64  .rodata.str1.1
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  _Py_NegativeRefcount
// 1d5: be e8 0b 00 00                movl    $0xbe8, %esi            # imm = 0xBE8
// 1da: 4c 89 e2                      movq    %r12, %rdx
// 1dd: ff d0                         callq   *%rax
// 1df: 49 8b 04 24                   movq    (%r12), %rax
// 1e3: 85 c0                         testl   %eax, %eax
// 1e5: 4c 8b 7c 24 18                movq    0x18(%rsp), %r15
// 1ea: 4c 8b 6c 24 10                movq    0x10(%rsp), %r13
// 1ef: 48 8b 6c 24 08                movq    0x8(%rsp), %rbp
// 1f4: 78 21                         js      0x217 <_JIT_ENTRY+0x217>
// 1f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 200: ff d0                         callq   *%rax
// 202: 49 ff 0c 24                   decq    (%r12)
// 206: 75 0f                         jne     0x217 <_JIT_ENTRY+0x217>
// 208: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020a:  R_X86_64_64  _Py_Dealloc
// 212: 4c 89 e7                      movq    %r12, %rdi
// 215: ff d0                         callq   *%rax
// 217: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 21b: 48 8b 0c 24                   movq    (%rsp), %rcx
// 21f: 48 85 c9                      testq   %rcx, %rcx
// 222: 0f 84 e1 00 00 00             je      0x309 <_JIT_ENTRY+0x309>
// 228: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 22c: 48 89 08                      movq    %rcx, (%rax)
// 22f: 49 8b 47 10                   movq    0x10(%r15), %rax
// 233: 48 8b 00                      movq    (%rax), %rax
// 236: 84 c0                         testb   %al, %al
// 238: 74 17                         je      0x251 <_JIT_ENTRY+0x251>
// 23a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000023c:  R_X86_64_64  _Py_HandlePending
// 244: 4c 89 ff                      movq    %r15, %rdi
// 247: ff d0                         callq   *%rax
// 249: 85 c0                         testl   %eax, %eax
// 24b: 0f 85 17 fe ff ff             jne     0x68 <_JIT_ENTRY+0x68>
// 251: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000253:  R_X86_64_64  _JIT_CONTINUE
// 25b: 48 89 df                      movq    %rbx, %rdi
// 25e: 4c 89 f6                      movq    %r14, %rsi
// 261: 4c 89 fa                      movq    %r15, %rdx
// 264: 48 83 c4 28                   addq    $0x28, %rsp
// 268: 5b                            popq    %rbx
// 269: 41 5c                         popq    %r12
// 26b: 41 5d                         popq    %r13
// 26d: 41 5e                         popq    %r14
// 26f: 41 5f                         popq    %r15
// 271: 5d                            popq    %rbp
// 272: ff e0                         jmpq    *%rax
// 274: 41 83 fd 02                   cmpl    $0x2, %r13d
// 278: 41 bf 01 00 00 00             movl    $0x1, %r15d
// 27e: 45 0f 43 fd                   cmovael %r13d, %r15d
// 282: 31 ed                         xorl    %ebp, %ebp
// 284: eb 16                         jmp     0x29c <_JIT_ENTRY+0x29c>
// 286: 66 2e 0f 1f 84 00 00 00 00 00 nopw    %cs:(%rax,%rax)
// 290: 48 ff c5                      incq    %rbp
// 293: 49 39 ef                      cmpq    %rbp, %r15
// 296: 0f 84 1c ff ff ff             je      0x1b8 <_JIT_ENTRY+0x1b8>
// 29c: 48 8b 44 24 20                movq    0x20(%rsp), %rax
// 2a1: 4c 8b 2c e8                   movq    (%rax,%rbp,8), %r13
// 2a5: 49 8b 45 00                   movq    (%r13), %rax
// 2a9: 48 85 c0                      testq   %rax, %rax
// 2ac: 7e 12                         jle     0x2c0 <_JIT_ENTRY+0x2c0>
// 2ae: 85 c0                         testl   %eax, %eax
// 2b0: 78 de                         js      0x290 <_JIT_ENTRY+0x290>
// 2b2: eb 32                         jmp     0x2e6 <_JIT_ENTRY+0x2e6>
// 2b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
// 2c0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002c2:  R_X86_64_64  .rodata.str1.1
// 2ca: be e6 0b 00 00                movl    $0xbe6, %esi            # imm = 0xBE6
// 2cf: 4c 89 ea                      movq    %r13, %rdx
// 2d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d4:  R_X86_64_64  _Py_NegativeRefcount
// 2dc: ff d0                         callq   *%rax
// 2de: 49 8b 45 00                   movq    (%r13), %rax
// 2e2: 85 c0                         testl   %eax, %eax
// 2e4: 78 aa                         js      0x290 <_JIT_ENTRY+0x290>
// 2e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2f0: ff d0                         callq   *%rax
// 2f2: 49 ff 4d 00                   decq    (%r13)
// 2f6: 75 98                         jne     0x290 <_JIT_ENTRY+0x290>
// 2f8: 4c 89 ef                      movq    %r13, %rdi
// 2fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002fd:  R_X86_64_64  _Py_Dealloc
// 305: ff d0                         callq   *%rax
// 307: eb 87                         jmp     0x290 <_JIT_ENTRY+0x290>
// 309: 49 89 c6                      movq    %rax, %r14
// 30c: e9 57 fd ff ff                jmp     0x68 <_JIT_ENTRY+0x68>
// 311: 
static const unsigned char _DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_body[786] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x28, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xe2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd1, 0x89, 0xd0, 0xf7, 0xd0, 0x4c, 0x63, 0xc8, 0x4b, 0x8b, 0x04, 0xce, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xd6, 0x4c, 0x63, 0xd6, 0x0f, 0xb7, 0xc9, 0x48, 0x89, 0xce, 0x48, 0xf7, 0xde, 0x44, 0x8d, 0x6a, 0x01, 0x48, 0x85, 0xc0, 0x48, 0xf7, 0xd1, 0x48, 0x0f, 0x44, 0xce, 0x44, 0x0f, 0x44, 0xea, 0x4f, 0x8b, 0x24, 0xd6, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x54, 0x24, 0x08, 0x75, 0x21, 0x4d, 0x8b, 0x44, 0x24, 0x28, 0x41, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00, 0x75, 0x12, 0x49, 0x8d, 0x14, 0xce, 0x48, 0x8b, 0x3a, 0x48, 0x8b, 0x4f, 0x08, 0x49, 0x3b, 0x4c, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0x7c, 0x24, 0x18, 0x48, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc5, 0x41, 0x8d, 0x45, 0xff, 0x48, 0x89, 0x54, 0x24, 0x20, 0x48, 0x8d, 0x72, 0x08, 0x48, 0x63, 0xd0, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x94, 0xc0, 0x40, 0x84, 0xc5, 0x0f, 0x84, 0xbc, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe8, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x18, 0x4c, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x8b, 0x6c, 0x24, 0x08, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xe1, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x17, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x41, 0x83, 0xfd, 0x02, 0x41, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x45, 0x0f, 0x43, 0xfd, 0x31, 0xed, 0xeb, 0x16, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc5, 0x49, 0x39, 0xef, 0x0f, 0x84, 0x1c, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x2c, 0xe8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x78, 0xde, 0xeb, 0x32, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xea, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x98, 0x4c, 0x89, 0xef, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0x87, 0x49, 0x89, 0xc6, 0xe9, 0x57, 0xfd, 0xff, 0xff};
static const Hole _DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_code_holes[22] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1a1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x253, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x2c2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2fd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS_data_holes[1];

// _DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_NOARGS
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_NOARGS.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 29: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2d: 4d 85 e4                      testq   %r12, %r12
// 30: 74 17                         je      0x49 <_JIT_ENTRY+0x49>
// 32: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 3b                         jle     0x7e <_JIT_ENTRY+0x7e>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 5d                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 47: eb 7c                         jmp     0xc5 <_JIT_ENTRY+0xc5>
// 49: 48 8b 33                      movq    (%rbx), %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 d0                      movzwl  %ax, %edx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _PyEval_FormatExcUnbound
// 63: 4c 89 ff                      movq    %r15, %rdi
// 66: ff d0                         callq   *%rax
// 68: 49 29 de                      subq    %rbx, %r14
// 6b: 49 83 c6 b8                   addq    $-0x48, %r14
// 6f: 49 c1 ee 03                   shrq    $0x3, %r14
// 73: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 77: 31 c0                         xorl    %eax, %eax
// 79: e9 b8 01 00 00                jmp     0x236 <_JIT_ENTRY+0x236>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 21                         js      0xc5 <_JIT_ENTRY+0xc5>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 75 0f                         jne     0xc5 <_JIT_ENTRY+0xc5>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_Dealloc
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  _JIT_OPARG
// cf: 0f b7 c8                      movzwl  %ax, %ecx
// d2: 89 ca                         movl    %ecx, %edx
// d4: f7 d2                         notl    %edx
// d6: 48 63 ea                      movslq  %edx, %rbp
// d9: 0f b7 c0                      movzwl  %ax, %eax
// dc: 48 89 c2                      movq    %rax, %rdx
// df: 48 f7 da                      negq    %rdx
// e2: 31 f6                         xorl    %esi, %esi
// e4: 66 85 c0                      testw   %ax, %ax
// e7: 40 0f 94 c6                   sete    %sil
// eb: 31 ff                         xorl    %edi, %edi
// ed: 66 83 f8 01                   cmpw    $0x1, %ax
// f1: 40 0f 94 c7                   sete    %dil
// f5: 49 83 3c ee 00                cmpq    $0x0, (%r14,%rbp,8)
// fa: 48 f7 d0                      notq    %rax
// fd: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 101: 0f 44 f7                      cmovel  %edi, %esi
// 104: 40 80 fe 01                   cmpb    $0x1, %sil
// 108: 0f 85 00 01 00 00             jne     0x20e <_JIT_ENTRY+0x20e>
// 10e: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 113: 29 ca                         subl    %ecx, %edx
// 115: 4c 63 ea                      movslq  %edx, %r13
// 118: 4f 8b 24 ee                   movq    (%r14,%r13,8), %r12
// 11c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000011e:  R_X86_64_64  PyMethodDescr_Type
// 126: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 12b: 0f 85 dd 00 00 00             jne     0x20e <_JIT_ENTRY+0x20e>
// 131: 49 8b 14 c6                   movq    (%r14,%rax,8), %rdx
// 135: 48 8b 42 08                   movq    0x8(%rdx), %rax
// 139: 49 3b 44 24 10                cmpq    0x10(%r12), %rax
// 13e: 0f 85 ca 00 00 00             jne     0x20e <_JIT_ENTRY+0x20e>
// 144: 49 8b 44 24 28                movq    0x28(%r12), %rax
// 149: 83 78 10 04                   cmpl    $0x4, 0x10(%rax)
// 14d: 0f 85 bb 00 00 00             jne     0x20e <_JIT_ENTRY+0x20e>
// 153: 4c 8b 40 08                   movq    0x8(%rax), %r8
// 157: 41 8b 47 2c                   movl    0x2c(%r15), %eax
// 15b: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 15e: 41 89 4f 2c                   movl    %ecx, 0x2c(%r15)
// 162: 85 c0                         testl   %eax, %eax
// 164: 0f 8e db 00 00 00             jle     0x245 <_JIT_ENTRY+0x245>
// 16a: 4b 8d 04 ee                   leaq    (%r14,%r13,8), %rax
// 16e: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 173: 49 89 d5                      movq    %rdx, %r13
// 176: 48 89 d7                      movq    %rdx, %rdi
// 179: 31 f6                         xorl    %esi, %esi
// 17b: 41 ff d0                      callq   *%r8
// 17e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 183: 41 ff 47 2c                   incl    0x2c(%r15)
// 187: bf 10 0c 00 00                movl    $0xc10, %edi            # imm = 0xC10
// 18c: 4c 89 ee                      movq    %r13, %rsi
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  .text+0x290
// 199: ff d0                         callq   *%rax
// 19b: bf 11 0c 00 00                movl    $0xc11, %edi            # imm = 0xC11
// 1a0: 4c 89 e6                      movq    %r12, %rsi
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  .text+0x290
// 1ad: ff d0                         callq   *%rax
// 1af: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1b4: 48 85 c9                      testq   %rcx, %rcx
// 1b7: 0f 84 c2 00 00 00             je      0x27f <_JIT_ENTRY+0x27f>
// 1bd: 4d 8d 34 ee                   leaq    (%r14,%rbp,8), %r14
// 1c1: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1c6: 48 89 08                      movq    %rcx, (%rax)
// 1c9: 49 8b 47 10                   movq    0x10(%r15), %rax
// 1cd: 48 8b 00                      movq    (%rax), %rax
// 1d0: 84 c0                         testb   %al, %al
// 1d2: 74 17                         je      0x1eb <_JIT_ENTRY+0x1eb>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_HandlePending
// 1de: 4c 89 ff                      movq    %r15, %rdi
// 1e1: ff d0                         callq   *%rax
// 1e3: 85 c0                         testl   %eax, %eax
// 1e5: 0f 85 7d fe ff ff             jne     0x68 <_JIT_ENTRY+0x68>
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _JIT_CONTINUE
// 1f5: 48 89 df                      movq    %rbx, %rdi
// 1f8: 4c 89 f6                      movq    %r14, %rsi
// 1fb: 4c 89 fa                      movq    %r15, %rdx
// 1fe: 48 83 c4 18                   addq    $0x18, %rsp
// 202: 5b                            popq    %rbx
// 203: 41 5c                         popq    %r12
// 205: 41 5d                         popq    %r13
// 207: 41 5e                         popq    %r14
// 209: 41 5f                         popq    %r15
// 20b: 5d                            popq    %rbp
// 20c: ff e0                         jmpq    *%rax
// 20e: 49 29 de                      subq    %rbx, %r14
// 211: 49 83 c6 b8                   addq    $-0x48, %r14
// 215: 49 c1 ee 03                   shrq    $0x3, %r14
// 219: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 21d: 48 8b 03                      movq    (%rbx), %rax
// 220: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000222:  R_X86_64_64  _JIT_TARGET
// 22a: 89 c9                         movl    %ecx, %ecx
// 22c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 230: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 236: 48 83 c4 18                   addq    $0x18, %rsp
// 23a: 5b                            popq    %rbx
// 23b: 41 5c                         popq    %r12
// 23d: 41 5d                         popq    %r13
// 23f: 41 5e                         popq    %r14
// 241: 41 5f                         popq    %r15
// 243: 5d                            popq    %rbp
// 244: c3                            retq
// 245: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000247:  R_X86_64_64  .rodata.str1.1+0x39
// 24f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000251:  R_X86_64_64  _Py_CheckRecursiveCall
// 259: 48 89 54 24 08                movq    %rdx, 0x8(%rsp)
// 25e: 4c 89 ff                      movq    %r15, %rdi
// 261: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
// 266: ff d0                         callq   *%rax
// 268: 4c 8b 44 24 10                movq    0x10(%rsp), %r8
// 26d: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 272: 85 c0                         testl   %eax, %eax
// 274: 0f 85 ee fd ff ff             jne     0x68 <_JIT_ENTRY+0x68>
// 27a: e9 eb fe ff ff                jmp     0x16a <_JIT_ENTRY+0x16a>
// 27f: 4c 8b 74 24 08                movq    0x8(%rsp), %r14
// 284: e9 df fd ff ff                jmp     0x68 <_JIT_ENTRY+0x68>
// 289: 0f 1f 80 00 00 00 00          nopl    (%rax)
// 
// 0000000000000290 <Py_DECREF>:
// 290: 53                            pushq   %rbx
// 291: 48 89 f3                      movq    %rsi, %rbx
// 294: 48 8b 06                      movq    (%rsi), %rax
// 297: 48 85 c0                      testq   %rax, %rax
// 29a: 7e 06                         jle     0x2a2 <Py_DECREF+0x12>
// 29c: 85 c0                         testl   %eax, %eax
// 29e: 79 24                         jns     0x2c4 <Py_DECREF+0x34>
// 2a0: eb 33                         jmp     0x2d5 <Py_DECREF+0x45>
// 2a2: 89 fe                         movl    %edi, %esi
// 2a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a6:  R_X86_64_64  .rodata.str1.1
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _Py_NegativeRefcount
// 2b8: 48 89 da                      movq    %rbx, %rdx
// 2bb: ff d0                         callq   *%rax
// 2bd: 48 8b 03                      movq    (%rbx), %rax
// 2c0: 85 c0                         testl   %eax, %eax
// 2c2: 78 11                         js      0x2d5 <Py_DECREF+0x45>
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ce: ff d0                         callq   *%rax
// 2d0: 48 ff 0b                      decq    (%rbx)
// 2d3: 74 02                         je      0x2d7 <Py_DECREF+0x47>
// 2d5: 5b                            popq    %rbx
// 2d6: c3                            retq
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  _Py_Dealloc
// 2e1: 48 89 df                      movq    %rbx, %rdi
// 2e4: 5b                            popq    %rbx
// 2e5: ff e0                         jmpq    *%rax
// 2e7: 
static const unsigned char _DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_body[744] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xb8, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x48, 0x63, 0xea, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x85, 0xc0, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc7, 0x49, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x0f, 0x85, 0x00, 0x01, 0x00, 0x00, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x4c, 0x63, 0xea, 0x4f, 0x8b, 0x24, 0xee, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x0f, 0x85, 0xdd, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x14, 0xc6, 0x48, 0x8b, 0x42, 0x08, 0x49, 0x3b, 0x44, 0x24, 0x10, 0x0f, 0x85, 0xca, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x28, 0x83, 0x78, 0x10, 0x04, 0x0f, 0x85, 0xbb, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x40, 0x08, 0x41, 0x8b, 0x47, 0x2c, 0x8d, 0x48, 0xff, 0x41, 0x89, 0x4f, 0x2c, 0x85, 0xc0, 0x0f, 0x8e, 0xdb, 0x00, 0x00, 0x00, 0x4b, 0x8d, 0x04, 0xee, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x89, 0xd5, 0x48, 0x89, 0xd7, 0x31, 0xf6, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0xff, 0x47, 0x2c, 0xbf, 0x10, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xbf, 0x11, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xc2, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x34, 0xee, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x7d, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x10, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x85, 0xc0, 0x0f, 0x85, 0xee, 0xfd, 0xff, 0xff, 0xe9, 0xeb, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x74, 0x24, 0x08, 0xe9, 0xdf, 0xfd, 0xff, 0xff, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_NOARGS_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x290},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x290},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x247, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x251, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_NOARGS_data_holes[1];

// _DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_O
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_O.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 29: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2d: 4d 85 e4                      testq   %r12, %r12
// 30: 74 17                         je      0x49 <_JIT_ENTRY+0x49>
// 32: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 3b                         jle     0x7e <_JIT_ENTRY+0x7e>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 5d                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 47: eb 7c                         jmp     0xc5 <_JIT_ENTRY+0xc5>
// 49: 48 8b 33                      movq    (%rbx), %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 d0                      movzwl  %ax, %edx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _PyEval_FormatExcUnbound
// 63: 4c 89 ff                      movq    %r15, %rdi
// 66: ff d0                         callq   *%rax
// 68: 49 29 de                      subq    %rbx, %r14
// 6b: 49 83 c6 b8                   addq    $-0x48, %r14
// 6f: 49 c1 ee 03                   shrq    $0x3, %r14
// 73: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 77: 31 c0                         xorl    %eax, %eax
// 79: e9 ee 00 00 00                jmp     0x16c <_JIT_ENTRY+0x16c>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 21                         js      0xc5 <_JIT_ENTRY+0xc5>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 75 0f                         jne     0xc5 <_JIT_ENTRY+0xc5>
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _Py_Dealloc
// c0: 4c 89 e7                      movq    %r12, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  _JIT_OPARG
// cf: 0f b7 c8                      movzwl  %ax, %ecx
// d2: 89 ca                         movl    %ecx, %edx
// d4: f7 d2                         notl    %edx
// d6: 4c 63 ea                      movslq  %edx, %r13
// d9: 0f b7 c0                      movzwl  %ax, %eax
// dc: 48 89 c2                      movq    %rax, %rdx
// df: 48 f7 da                      negq    %rdx
// e2: 31 f6                         xorl    %esi, %esi
// e4: 66 83 f8 01                   cmpw    $0x1, %ax
// e8: 40 0f 94 c6                   sete    %sil
// ec: 31 ff                         xorl    %edi, %edi
// ee: 66 83 f8 02                   cmpw    $0x2, %ax
// f2: 40 0f 94 c7                   sete    %dil
// f6: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// fb: 48 f7 d0                      notq    %rax
// fe: 48 0f 44 c2                   cmoveq  %rdx, %rax
// 102: 0f 44 f7                      cmovel  %edi, %esi
// 105: 40 80 fe 01                   cmpb    $0x1, %sil
// 109: 75 39                         jne     0x144 <_JIT_ENTRY+0x144>
// 10b: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// 110: 29 ca                         subl    %ecx, %edx
// 112: 48 63 ea                      movslq  %edx, %rbp
// 115: 4d 8b 24 ee                   movq    (%r14,%rbp,8), %r12
// 119: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000011b:  R_X86_64_64  PyMethodDescr_Type
// 123: 49 39 4c 24 08                cmpq    %rcx, 0x8(%r12)
// 128: 75 1a                         jne     0x144 <_JIT_ENTRY+0x144>
// 12a: 49 8b 4c 24 28                movq    0x28(%r12), %rcx
// 12f: 83 79 10 08                   cmpl    $0x8, 0x10(%rcx)
// 133: 75 0f                         jne     0x144 <_JIT_ENTRY+0x144>
// 135: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// 139: 48 8b 57 08                   movq    0x8(%rdi), %rdx
// 13d: 49 3b 54 24 10                cmpq    0x10(%r12), %rdx
// 142: 74 37                         je      0x17b <_JIT_ENTRY+0x17b>
// 144: 49 29 de                      subq    %rbx, %r14
// 147: 49 83 c6 b8                   addq    $-0x48, %r14
// 14b: 49 c1 ee 03                   shrq    $0x3, %r14
// 14f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 153: 48 8b 03                      movq    (%rbx), %rax
// 156: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000158:  R_X86_64_64  _JIT_TARGET
// 160: 89 c9                         movl    %ecx, %ecx
// 162: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 166: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 16c: 48 83 c4 18                   addq    $0x18, %rsp
// 170: 5b                            popq    %rbx
// 171: 41 5c                         popq    %r12
// 173: 41 5d                         popq    %r13
// 175: 41 5e                         popq    %r14
// 177: 41 5f                         popq    %r15
// 179: 5d                            popq    %rbp
// 17a: c3                            retq
// 17b: 49 8b 54 c6 08                movq    0x8(%r14,%rax,8), %rdx
// 180: 4c 8b 41 08                   movq    0x8(%rcx), %r8
// 184: 41 8b 47 2c                   movl    0x2c(%r15), %eax
// 188: 8d 48 ff                      leal    -0x1(%rax), %ecx
// 18b: 41 89 4f 2c                   movl    %ecx, 0x2c(%r15)
// 18f: 85 c0                         testl   %eax, %eax
// 191: 48 89 54 24 10                movq    %rdx, 0x10(%rsp)
// 196: 0f 8e ac 00 00 00             jle     0x248 <_JIT_ENTRY+0x248>
// 19c: 49 8d 04 ee                   leaq    (%r14,%rbp,8), %rax
// 1a0: 48 89 04 24                   movq    %rax, (%rsp)
// 1a4: 48 89 fd                      movq    %rdi, %rbp
// 1a7: 48 89 d6                      movq    %rdx, %rsi
// 1aa: 41 ff d0                      callq   *%r8
// 1ad: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 1b2: 41 ff 47 2c                   incl    0x2c(%r15)
// 1b6: bf bf 0b 00 00                movl    $0xbbf, %edi            # imm = 0xBBF
// 1bb: 48 89 ee                      movq    %rbp, %rsi
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  .text+0x290
// 1c8: ff d0                         callq   *%rax
// 1ca: bf c0 0b 00 00                movl    $0xbc0, %edi            # imm = 0xBC0
// 1cf: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 1d4: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001d6:  R_X86_64_64  .text+0x290
// 1de: ff d5                         callq   *%rbp
// 1e0: bf c1 0b 00 00                movl    $0xbc1, %edi            # imm = 0xBC1
// 1e5: 4c 89 e6                      movq    %r12, %rsi
// 1e8: ff d5                         callq   *%rbp
// 1ea: 48 8b 4c 24 08                movq    0x8(%rsp), %rcx
// 1ef: 48 85 c9                      testq   %rcx, %rcx
// 1f2: 0f 84 8d 00 00 00             je      0x285 <_JIT_ENTRY+0x285>
// 1f8: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 1fc: 48 8b 04 24                   movq    (%rsp), %rax
// 200: 48 89 08                      movq    %rcx, (%rax)
// 203: 49 8b 47 10                   movq    0x10(%r15), %rax
// 207: 48 8b 00                      movq    (%rax), %rax
// 20a: 84 c0                         testb   %al, %al
// 20c: 74 17                         je      0x225 <_JIT_ENTRY+0x225>
// 20e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000210:  R_X86_64_64  _Py_HandlePending
// 218: 4c 89 ff                      movq    %r15, %rdi
// 21b: ff d0                         callq   *%rax
// 21d: 85 c0                         testl   %eax, %eax
// 21f: 0f 85 43 fe ff ff             jne     0x68 <_JIT_ENTRY+0x68>
// 225: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000227:  R_X86_64_64  _JIT_CONTINUE
// 22f: 48 89 df                      movq    %rbx, %rdi
// 232: 4c 89 f6                      movq    %r14, %rsi
// 235: 4c 89 fa                      movq    %r15, %rdx
// 238: 48 83 c4 18                   addq    $0x18, %rsp
// 23c: 5b                            popq    %rbx
// 23d: 41 5c                         popq    %r12
// 23f: 41 5d                         popq    %r13
// 241: 41 5e                         popq    %r14
// 243: 41 5f                         popq    %r15
// 245: 5d                            popq    %rbp
// 246: ff e0                         jmpq    *%rax
// 248: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000024a:  R_X86_64_64  .rodata.str1.1+0x39
// 252: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000254:  R_X86_64_64  _Py_CheckRecursiveCall
// 25c: 48 89 3c 24                   movq    %rdi, (%rsp)
// 260: 4c 89 ff                      movq    %r15, %rdi
// 263: 4c 89 44 24 08                movq    %r8, 0x8(%rsp)
// 268: ff d0                         callq   *%rax
// 26a: 4c 8b 44 24 08                movq    0x8(%rsp), %r8
// 26f: 48 8b 3c 24                   movq    (%rsp), %rdi
// 273: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 278: 85 c0                         testl   %eax, %eax
// 27a: 0f 85 e8 fd ff ff             jne     0x68 <_JIT_ENTRY+0x68>
// 280: e9 17 ff ff ff                jmp     0x19c <_JIT_ENTRY+0x19c>
// 285: 4c 8b 34 24                   movq    (%rsp), %r14
// 289: e9 da fd ff ff                jmp     0x68 <_JIT_ENTRY+0x68>
// 28e: 66 90                         nop
// 
// 0000000000000290 <Py_DECREF>:
// 290: 53                            pushq   %rbx
// 291: 48 89 f3                      movq    %rsi, %rbx
// 294: 48 8b 06                      movq    (%rsi), %rax
// 297: 48 85 c0                      testq   %rax, %rax
// 29a: 7e 06                         jle     0x2a2 <Py_DECREF+0x12>
// 29c: 85 c0                         testl   %eax, %eax
// 29e: 79 24                         jns     0x2c4 <Py_DECREF+0x34>
// 2a0: eb 33                         jmp     0x2d5 <Py_DECREF+0x45>
// 2a2: 89 fe                         movl    %edi, %esi
// 2a4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002a6:  R_X86_64_64  .rodata.str1.1
// 2ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b0:  R_X86_64_64  _Py_NegativeRefcount
// 2b8: 48 89 da                      movq    %rbx, %rdx
// 2bb: ff d0                         callq   *%rax
// 2bd: 48 8b 03                      movq    (%rbx), %rax
// 2c0: 85 c0                         testl   %eax, %eax
// 2c2: 78 11                         js      0x2d5 <Py_DECREF+0x45>
// 2c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2ce: ff d0                         callq   *%rax
// 2d0: 48 ff 0b                      decq    (%rbx)
// 2d3: 74 02                         je      0x2d7 <Py_DECREF+0x47>
// 2d5: 5b                            popq    %rbx
// 2d6: c3                            retq
// 2d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002d9:  R_X86_64_64  _Py_Dealloc
// 2e1: 48 89 df                      movq    %rbx, %rdi
// 2e4: 5b                            popq    %rbx
// 2e5: ff e0                         jmpq    *%rax
// 2e7: 
static const unsigned char _DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_O_code_body[744] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xee, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x89, 0xca, 0xf7, 0xd2, 0x4c, 0x63, 0xea, 0x0f, 0xb7, 0xc0, 0x48, 0x89, 0xc2, 0x48, 0xf7, 0xda, 0x31, 0xf6, 0x66, 0x83, 0xf8, 0x01, 0x40, 0x0f, 0x94, 0xc6, 0x31, 0xff, 0x66, 0x83, 0xf8, 0x02, 0x40, 0x0f, 0x94, 0xc7, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x48, 0xf7, 0xd0, 0x48, 0x0f, 0x44, 0xc2, 0x0f, 0x44, 0xf7, 0x40, 0x80, 0xfe, 0x01, 0x75, 0x39, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xea, 0x4d, 0x8b, 0x24, 0xee, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x4c, 0x24, 0x08, 0x75, 0x1a, 0x49, 0x8b, 0x4c, 0x24, 0x28, 0x83, 0x79, 0x10, 0x08, 0x75, 0x0f, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0x8b, 0x57, 0x08, 0x49, 0x3b, 0x54, 0x24, 0x10, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x54, 0xc6, 0x08, 0x4c, 0x8b, 0x41, 0x08, 0x41, 0x8b, 0x47, 0x2c, 0x8d, 0x48, 0xff, 0x41, 0x89, 0x4f, 0x2c, 0x85, 0xc0, 0x48, 0x89, 0x54, 0x24, 0x10, 0x0f, 0x8e, 0xac, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xee, 0x48, 0x89, 0x04, 0x24, 0x48, 0x89, 0xfd, 0x48, 0x89, 0xd6, 0x41, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x41, 0xff, 0x47, 0x2c, 0xbf, 0xbf, 0x0b, 0x00, 0x00, 0x48, 0x89, 0xee, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xbf, 0xc0, 0x0b, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd5, 0xbf, 0xc1, 0x0b, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd5, 0x48, 0x8b, 0x4c, 0x24, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x8d, 0x00, 0x00, 0x00, 0x4f, 0x8d, 0x34, 0xee, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x89, 0x08, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x43, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x3c, 0x24, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0x44, 0x24, 0x08, 0xff, 0xd0, 0x4c, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x85, 0xc0, 0x0f, 0x85, 0xe8, 0xfd, 0xff, 0xff, 0xe9, 0x17, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x34, 0x24, 0xe9, 0xda, 0xfd, 0xff, 0xff, 0x66, 0x90, 0x53, 0x48, 0x89, 0xf3, 0x48, 0x8b, 0x06, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x24, 0xeb, 0x33, 0x89, 0xfe, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x0b, 0x74, 0x02, 0x5b, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x5b, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_O_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethodDescr_Type, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x290},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_CODE, NULL, 0x290},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x227, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x24a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x254, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_CheckRecursiveCall, 0x0},
    {0x2a6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2b0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2c6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00 while calling a Python object\x00'
// 58: 
static const unsigned char _DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_O_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00};
static const Hole _DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_O_data_holes[1];

// _DELETE_DEREFplus_CALL_STR_1
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CALL_STR_1.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 3b                         jle     0x7b <_JIT_ENTRY+0x7b>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 5d                         jns     0xa1 <_JIT_ENTRY+0xa1>
// 44: eb 7c                         jmp     0xc2 <_JIT_ENTRY+0xc2>
// 46: 48 8b 33                      movq    (%rbx), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 49 29 de                      subq    %rbx, %r14
// 68: 49 83 c6 b8                   addq    $-0x48, %r14
// 6c: 49 c1 ee 03                   shrq    $0x3, %r14
// 70: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 74: 31 c0                         xorl    %eax, %eax
// 76: e9 a8 00 00 00                jmp     0x123 <_JIT_ENTRY+0x123>
// 7b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007d:  R_X86_64_64  .rodata.str1.1
// 85: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000087:  R_X86_64_64  _Py_NegativeRefcount
// 8f: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 94: 4c 89 e2                      movq    %r12, %rdx
// 97: ff d0                         callq   *%rax
// 99: 49 8b 04 24                   movq    (%r12), %rax
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 21                         js      0xc2 <_JIT_ENTRY+0xc2>
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ab: ff d0                         callq   *%rax
// ad: 49 ff 0c 24                   decq    (%r12)
// b1: 75 0f                         jne     0xc2 <_JIT_ENTRY+0xc2>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_Dealloc
// bd: 4c 89 e7                      movq    %r12, %rdi
// c0: ff d0                         callq   *%rax
// c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c4:  R_X86_64_64  _JIT_OPARG
// cc: 0f b7 c0                      movzwl  %ax, %eax
// cf: 89 c1                         movl    %eax, %ecx
// d1: f7 d1                         notl    %ecx
// d3: 4c 63 e9                      movslq  %ecx, %r13
// d6: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// db: 75 1e                         jne     0xfb <_JIT_ENTRY+0xfb>
// dd: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// e2: 29 c1                         subl    %eax, %ecx
// e4: 48 63 c1                      movslq  %ecx, %rax
// e7: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  PyUnicode_Type
// f5: 49 39 04 24                   cmpq    %rax, (%r12)
// f9: 74 37                         je      0x132 <_JIT_ENTRY+0x132>
// fb: 49 29 de                      subq    %rbx, %r14
// fe: 49 83 c6 b8                   addq    $-0x48, %r14
// 102: 49 c1 ee 03                   shrq    $0x3, %r14
// 106: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 10a: 48 8b 03                      movq    (%rbx), %rax
// 10d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010f:  R_X86_64_64  _JIT_TARGET
// 117: 89 c9                         movl    %ecx, %ecx
// 119: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 11d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 123: 48 83 c4 08                   addq    $0x8, %rsp
// 127: 5b                            popq    %rbx
// 128: 41 5c                         popq    %r12
// 12a: 41 5d                         popq    %r13
// 12c: 41 5e                         popq    %r14
// 12e: 41 5f                         popq    %r15
// 130: 5d                            popq    %rbp
// 131: c3                            retq
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _JIT_OPARG
// 13c: 0f b7 c0                      movzwl  %ax, %eax
// 13f: 48 c1 e0 03                   shlq    $0x3, %rax
// 143: 4c 89 f1                      movq    %r14, %rcx
// 146: 48 29 c1                      subq    %rax, %rcx
// 149: 48 8b 29                      movq    (%rcx), %rbp
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  PyObject_Str
// 156: 48 89 ef                      movq    %rbp, %rdi
// 159: ff d0                         callq   *%rax
// 15b: 48 89 04 24                   movq    %rax, (%rsp)
// 15f: 48 8b 45 00                   movq    (%rbp), %rax
// 163: 48 85 c0                      testq   %rax, %rax
// 166: 7f 22                         jg      0x18a <_JIT_ENTRY+0x18a>
// 168: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016a:  R_X86_64_64  .rodata.str1.1
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_NegativeRefcount
// 17c: be 95 0a 00 00                movl    $0xa95, %esi            # imm = 0xA95
// 181: 48 89 ea                      movq    %rbp, %rdx
// 184: ff d0                         callq   *%rax
// 186: 48 8b 45 00                   movq    (%rbp), %rax
// 18a: 85 c0                         testl   %eax, %eax
// 18c: 78 21                         js      0x1af <_JIT_ENTRY+0x1af>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 198: ff d0                         callq   *%rax
// 19a: 48 ff 4d 00                   decq    (%rbp)
// 19e: 75 0f                         jne     0x1af <_JIT_ENTRY+0x1af>
// 1a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a2:  R_X86_64_64  _Py_Dealloc
// 1aa: 48 89 ef                      movq    %rbp, %rdi
// 1ad: ff d0                         callq   *%rax
// 1af: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001b1:  R_X86_64_64  PyUnicode_Type
// 1b9: 48 8b 45 00                   movq    (%rbp), %rax
// 1bd: 48 85 c0                      testq   %rax, %rax
// 1c0: 7f 22                         jg      0x1e4 <_JIT_ENTRY+0x1e4>
// 1c2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c4:  R_X86_64_64  .rodata.str1.1
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _Py_NegativeRefcount
// 1d6: be 96 0a 00 00                movl    $0xa96, %esi            # imm = 0xA96
// 1db: 48 89 ea                      movq    %rbp, %rdx
// 1de: ff d0                         callq   *%rax
// 1e0: 48 8b 45 00                   movq    (%rbp), %rax
// 1e4: 85 c0                         testl   %eax, %eax
// 1e6: 78 28                         js      0x210 <_JIT_ENTRY+0x210>
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f2: ff d0                         callq   *%rax
// 1f4: 48 ff 4d 00                   decq    (%rbp)
// 1f8: 75 16                         jne     0x210 <_JIT_ENTRY+0x210>
// 1fa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fc:  R_X86_64_64  PyUnicode_Type
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _Py_Dealloc
// 20e: ff d0                         callq   *%rax
// 210: 48 8b 04 24                   movq    (%rsp), %rax
// 214: 48 85 c0                      testq   %rax, %rax
// 217: 74 4d                         je      0x266 <_JIT_ENTRY+0x266>
// 219: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 21d: 49 89 04 24                   movq    %rax, (%r12)
// 221: 49 8b 47 10                   movq    0x10(%r15), %rax
// 225: 48 8b 00                      movq    (%rax), %rax
// 228: 84 c0                         testb   %al, %al
// 22a: 74 17                         je      0x243 <_JIT_ENTRY+0x243>
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _Py_HandlePending
// 236: 4c 89 ff                      movq    %r15, %rdi
// 239: ff d0                         callq   *%rax
// 23b: 85 c0                         testl   %eax, %eax
// 23d: 0f 85 22 fe ff ff             jne     0x65 <_JIT_ENTRY+0x65>
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _JIT_CONTINUE
// 24d: 48 89 df                      movq    %rbx, %rdi
// 250: 4c 89 f6                      movq    %r14, %rsi
// 253: 4c 89 fa                      movq    %r15, %rdx
// 256: 48 83 c4 08                   addq    $0x8, %rsp
// 25a: 5b                            popq    %rbx
// 25b: 41 5c                         popq    %r12
// 25d: 41 5d                         popq    %r13
// 25f: 41 5e                         popq    %r14
// 261: 41 5f                         popq    %r15
// 263: 5d                            popq    %rbp
// 264: ff e0                         jmpq    *%rax
// 266: 4d 89 e6                      movq    %r12, %r14
// 269: e9 f7 fd ff ff                jmp     0x65 <_JIT_ENTRY+0x65>
// 26e: 
static const unsigned char _DELETE_DEREFplus_CALL_STR_1_code_body[623] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xa8, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x4c, 0x63, 0xe9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x75, 0x1e, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x8d, 0x24, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x04, 0x24, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x48, 0x8b, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x95, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x4d, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x22, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0xe9, 0xf7, 0xfd, 0xff, 0xff};
static const Hole _DELETE_DEREFplus_CALL_STR_1_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x87, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CALL_STR_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CALL_STR_1_data_holes[1];

// _DELETE_DEREFplus_CALL_TUPLE_1
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CALL_TUPLE_1.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 3b                         jle     0x7b <_JIT_ENTRY+0x7b>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 5d                         jns     0xa1 <_JIT_ENTRY+0xa1>
// 44: eb 7c                         jmp     0xc2 <_JIT_ENTRY+0xc2>
// 46: 48 8b 33                      movq    (%rbx), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 49 29 de                      subq    %rbx, %r14
// 68: 49 83 c6 b8                   addq    $-0x48, %r14
// 6c: 49 c1 ee 03                   shrq    $0x3, %r14
// 70: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 74: 31 c0                         xorl    %eax, %eax
// 76: e9 a8 00 00 00                jmp     0x123 <_JIT_ENTRY+0x123>
// 7b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007d:  R_X86_64_64  .rodata.str1.1
// 85: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000087:  R_X86_64_64  _Py_NegativeRefcount
// 8f: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 94: 4c 89 e2                      movq    %r12, %rdx
// 97: ff d0                         callq   *%rax
// 99: 49 8b 04 24                   movq    (%r12), %rax
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 21                         js      0xc2 <_JIT_ENTRY+0xc2>
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ab: ff d0                         callq   *%rax
// ad: 49 ff 0c 24                   decq    (%r12)
// b1: 75 0f                         jne     0xc2 <_JIT_ENTRY+0xc2>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_Dealloc
// bd: 4c 89 e7                      movq    %r12, %rdi
// c0: ff d0                         callq   *%rax
// c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c4:  R_X86_64_64  _JIT_OPARG
// cc: 0f b7 c0                      movzwl  %ax, %eax
// cf: 89 c1                         movl    %eax, %ecx
// d1: f7 d1                         notl    %ecx
// d3: 4c 63 e9                      movslq  %ecx, %r13
// d6: 4b 83 3c ee 00                cmpq    $0x0, (%r14,%r13,8)
// db: 75 1e                         jne     0xfb <_JIT_ENTRY+0xfb>
// dd: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// e2: 29 c1                         subl    %eax, %ecx
// e4: 48 63 c1                      movslq  %ecx, %rax
// e7: 4d 8d 24 c6                   leaq    (%r14,%rax,8), %r12
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  PyTuple_Type
// f5: 49 39 04 24                   cmpq    %rax, (%r12)
// f9: 74 37                         je      0x132 <_JIT_ENTRY+0x132>
// fb: 49 29 de                      subq    %rbx, %r14
// fe: 49 83 c6 b8                   addq    $-0x48, %r14
// 102: 49 c1 ee 03                   shrq    $0x3, %r14
// 106: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 10a: 48 8b 03                      movq    (%rbx), %rax
// 10d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010f:  R_X86_64_64  _JIT_TARGET
// 117: 89 c9                         movl    %ecx, %ecx
// 119: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 11d: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 123: 48 83 c4 08                   addq    $0x8, %rsp
// 127: 5b                            popq    %rbx
// 128: 41 5c                         popq    %r12
// 12a: 41 5d                         popq    %r13
// 12c: 41 5e                         popq    %r14
// 12e: 41 5f                         popq    %r15
// 130: 5d                            popq    %rbp
// 131: c3                            retq
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _JIT_OPARG
// 13c: 0f b7 c0                      movzwl  %ax, %eax
// 13f: 48 c1 e0 03                   shlq    $0x3, %rax
// 143: 4c 89 f1                      movq    %r14, %rcx
// 146: 48 29 c1                      subq    %rax, %rcx
// 149: 48 8b 29                      movq    (%rcx), %rbp
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  PySequence_Tuple
// 156: 48 89 ef                      movq    %rbp, %rdi
// 159: ff d0                         callq   *%rax
// 15b: 48 89 04 24                   movq    %rax, (%rsp)
// 15f: 48 8b 45 00                   movq    (%rbp), %rax
// 163: 48 85 c0                      testq   %rax, %rax
// 166: 7f 22                         jg      0x18a <_JIT_ENTRY+0x18a>
// 168: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016a:  R_X86_64_64  .rodata.str1.1
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_NegativeRefcount
// 17c: be ad 0a 00 00                movl    $0xaad, %esi            # imm = 0xAAD
// 181: 48 89 ea                      movq    %rbp, %rdx
// 184: ff d0                         callq   *%rax
// 186: 48 8b 45 00                   movq    (%rbp), %rax
// 18a: 85 c0                         testl   %eax, %eax
// 18c: 78 21                         js      0x1af <_JIT_ENTRY+0x1af>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 198: ff d0                         callq   *%rax
// 19a: 48 ff 4d 00                   decq    (%rbp)
// 19e: 75 0f                         jne     0x1af <_JIT_ENTRY+0x1af>
// 1a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a2:  R_X86_64_64  _Py_Dealloc
// 1aa: 48 89 ef                      movq    %rbp, %rdi
// 1ad: ff d0                         callq   *%rax
// 1af: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000001b1:  R_X86_64_64  PyTuple_Type
// 1b9: 48 8b 45 00                   movq    (%rbp), %rax
// 1bd: 48 85 c0                      testq   %rax, %rax
// 1c0: 7f 22                         jg      0x1e4 <_JIT_ENTRY+0x1e4>
// 1c2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c4:  R_X86_64_64  .rodata.str1.1
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _Py_NegativeRefcount
// 1d6: be ae 0a 00 00                movl    $0xaae, %esi            # imm = 0xAAE
// 1db: 48 89 ea                      movq    %rbp, %rdx
// 1de: ff d0                         callq   *%rax
// 1e0: 48 8b 45 00                   movq    (%rbp), %rax
// 1e4: 85 c0                         testl   %eax, %eax
// 1e6: 78 28                         js      0x210 <_JIT_ENTRY+0x210>
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f2: ff d0                         callq   *%rax
// 1f4: 48 ff 4d 00                   decq    (%rbp)
// 1f8: 75 16                         jne     0x210 <_JIT_ENTRY+0x210>
// 1fa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fc:  R_X86_64_64  PyTuple_Type
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _Py_Dealloc
// 20e: ff d0                         callq   *%rax
// 210: 48 8b 04 24                   movq    (%rsp), %rax
// 214: 48 85 c0                      testq   %rax, %rax
// 217: 74 4d                         je      0x266 <_JIT_ENTRY+0x266>
// 219: 4f 8d 34 ee                   leaq    (%r14,%r13,8), %r14
// 21d: 49 89 04 24                   movq    %rax, (%r12)
// 221: 49 8b 47 10                   movq    0x10(%r15), %rax
// 225: 48 8b 00                      movq    (%rax), %rax
// 228: 84 c0                         testb   %al, %al
// 22a: 74 17                         je      0x243 <_JIT_ENTRY+0x243>
// 22c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022e:  R_X86_64_64  _Py_HandlePending
// 236: 4c 89 ff                      movq    %r15, %rdi
// 239: ff d0                         callq   *%rax
// 23b: 85 c0                         testl   %eax, %eax
// 23d: 0f 85 22 fe ff ff             jne     0x65 <_JIT_ENTRY+0x65>
// 243: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000245:  R_X86_64_64  _JIT_CONTINUE
// 24d: 48 89 df                      movq    %rbx, %rdi
// 250: 4c 89 f6                      movq    %r14, %rsi
// 253: 4c 89 fa                      movq    %r15, %rdx
// 256: 48 83 c4 08                   addq    $0x8, %rsp
// 25a: 5b                            popq    %rbx
// 25b: 41 5c                         popq    %r12
// 25d: 41 5d                         popq    %r13
// 25f: 41 5e                         popq    %r14
// 261: 41 5f                         popq    %r15
// 263: 5d                            popq    %rbp
// 264: ff e0                         jmpq    *%rax
// 266: 4d 89 e6                      movq    %r12, %r14
// 269: e9 f7 fd ff ff                jmp     0x65 <_JIT_ENTRY+0x65>
// 26e: 
static const unsigned char _DELETE_DEREFplus_CALL_TUPLE_1_code_body[623] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xa8, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x89, 0xc1, 0xf7, 0xd1, 0x4c, 0x63, 0xe9, 0x4b, 0x83, 0x3c, 0xee, 0x00, 0x75, 0x1e, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x8d, 0x24, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x04, 0x24, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x48, 0x8b, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xad, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x0a, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x4d, 0x4f, 0x8d, 0x34, 0xee, 0x49, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x85, 0x22, 0xfe, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4d, 0x89, 0xe6, 0xe9, 0xf7, 0xfd, 0xff, 0xff};
static const Hole _DELETE_DEREFplus_CALL_TUPLE_1_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x87, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Tuple, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x22e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CALL_TUPLE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CALL_TUPLE_1_data_holes[1];

// _DELETE_DEREFplus_CALL_TYPE_1
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CALL_TYPE_1.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 3b                         jle     0x7b <_JIT_ENTRY+0x7b>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 5d                         jns     0xa1 <_JIT_ENTRY+0xa1>
// 44: eb 7c                         jmp     0xc2 <_JIT_ENTRY+0xc2>
// 46: 48 8b 33                      movq    (%rbx), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 49 29 de                      subq    %rbx, %r14
// 68: 49 83 c6 b8                   addq    $-0x48, %r14
// 6c: 49 c1 ee 03                   shrq    $0x3, %r14
// 70: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 74: 31 c0                         xorl    %eax, %eax
// 76: e9 b1 00 00 00                jmp     0x12c <_JIT_ENTRY+0x12c>
// 7b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007d:  R_X86_64_64  .rodata.str1.1
// 85: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000087:  R_X86_64_64  _Py_NegativeRefcount
// 8f: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 94: 4c 89 e2                      movq    %r12, %rdx
// 97: ff d0                         callq   *%rax
// 99: 49 8b 04 24                   movq    (%r12), %rax
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 21                         js      0xc2 <_JIT_ENTRY+0xc2>
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ab: ff d0                         callq   *%rax
// ad: 49 ff 0c 24                   decq    (%r12)
// b1: 75 0f                         jne     0xc2 <_JIT_ENTRY+0xc2>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  _Py_Dealloc
// bd: 4c 89 e7                      movq    %r12, %rdi
// c0: ff d0                         callq   *%rax
// c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c4:  R_X86_64_64  _JIT_OPARG
// cc: f7 d0                         notl    %eax
// ce: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// d3: 48 63 e8                      movslq  %eax, %rbp
// d6: 49 83 3c ee 00                cmpq    $0x0, (%r14,%rbp,8)
// db: 75 27                         jne     0x104 <_JIT_ENTRY+0x104>
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _JIT_OPARG
// e7: 0f b7 c0                      movzwl  %ax, %eax
// ea: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// ef: 29 c1                         subl    %eax, %ecx
// f1: 48 63 c1                      movslq  %ecx, %rax
// f4: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 00000000000000f6:  R_X86_64_64  PyType_Type
// fe: 4d 39 24 c6                   cmpq    %r12, (%r14,%rax,8)
// 102: 74 37                         je      0x13b <_JIT_ENTRY+0x13b>
// 104: 49 29 de                      subq    %rbx, %r14
// 107: 49 83 c6 b8                   addq    $-0x48, %r14
// 10b: 49 c1 ee 03                   shrq    $0x3, %r14
// 10f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 113: 48 8b 03                      movq    (%rbx), %rax
// 116: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000118:  R_X86_64_64  _JIT_TARGET
// 120: 89 c9                         movl    %ecx, %ecx
// 122: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 126: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 12c: 48 83 c4 08                   addq    $0x8, %rsp
// 130: 5b                            popq    %rbx
// 131: 41 5c                         popq    %r12
// 133: 41 5d                         popq    %r13
// 135: 41 5e                         popq    %r14
// 137: 41 5f                         popq    %r15
// 139: 5d                            popq    %rbp
// 13a: c3                            retq
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _JIT_OPARG
// 145: 0f b7 c0                      movzwl  %ax, %eax
// 148: 48 c1 e0 03                   shlq    $0x3, %rax
// 14c: 4c 89 f1                      movq    %r14, %rcx
// 14f: 48 29 c1                      subq    %rax, %rcx
// 152: 4c 8b 29                      movq    (%rcx), %r13
// 155: 49 8b 45 08                   movq    0x8(%r13), %rax
// 159: 48 89 04 24                   movq    %rax, (%rsp)
// 15d: 8b 00                         movl    (%rax), %eax
// 15f: ff c0                         incl    %eax
// 161: 75 0f                         jne     0x172 <_JIT_ENTRY+0x172>
// 163: 49 8b 45 00                   movq    (%r13), %rax
// 167: 48 85 c0                      testq   %rax, %rax
// 16a: 7e 21                         jle     0x18d <_JIT_ENTRY+0x18d>
// 16c: 85 c0                         testl   %eax, %eax
// 16e: 79 43                         jns     0x1b3 <_JIT_ENTRY+0x1b3>
// 170: eb 62                         jmp     0x1d4 <_JIT_ENTRY+0x1d4>
// 172: 48 8b 0c 24                   movq    (%rsp), %rcx
// 176: 89 01                         movl    %eax, (%rcx)
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 182: ff d0                         callq   *%rax
// 184: 49 8b 45 00                   movq    (%r13), %rax
// 188: 48 85 c0                      testq   %rax, %rax
// 18b: 7f df                         jg      0x16c <_JIT_ENTRY+0x16c>
// 18d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018f:  R_X86_64_64  .rodata.str1.1
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _Py_NegativeRefcount
// 1a1: be 7f 0a 00 00                movl    $0xa7f, %esi            # imm = 0xA7F
// 1a6: 4c 89 ea                      movq    %r13, %rdx
// 1a9: ff d0                         callq   *%rax
// 1ab: 49 8b 45 00                   movq    (%r13), %rax
// 1af: 85 c0                         testl   %eax, %eax
// 1b1: 78 21                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1bd: ff d0                         callq   *%rax
// 1bf: 49 ff 4d 00                   decq    (%r13)
// 1c3: 75 0f                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_Dealloc
// 1cf: 4c 89 ef                      movq    %r13, %rdi
// 1d2: ff d0                         callq   *%rax
// 1d4: 49 8b 04 24                   movq    (%r12), %rax
// 1d8: 48 85 c0                      testq   %rax, %rax
// 1db: 7f 22                         jg      0x1ff <_JIT_ENTRY+0x1ff>
// 1dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001df:  R_X86_64_64  .rodata.str1.1
// 1e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e9:  R_X86_64_64  _Py_NegativeRefcount
// 1f1: be 80 0a 00 00                movl    $0xa80, %esi            # imm = 0xA80
// 1f6: 4c 89 e2                      movq    %r12, %rdx
// 1f9: ff d0                         callq   *%rax
// 1fb: 49 8b 04 24                   movq    (%r12), %rax
// 1ff: 4d 8d 2c ee                   leaq    (%r14,%rbp,8), %r13
// 203: 85 c0                         testl   %eax, %eax
// 205: 78 28                         js      0x22f <_JIT_ENTRY+0x22f>
// 207: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000209:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 211: ff d0                         callq   *%rax
// 213: 49 ff 0c 24                   decq    (%r12)
// 217: 75 16                         jne     0x22f <_JIT_ENTRY+0x22f>
// 219: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000021b:  R_X86_64_64  PyType_Type
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _Py_Dealloc
// 22d: ff d0                         callq   *%rax
// 22f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000231:  R_X86_64_64  _JIT_OPARG
// 239: 0f b7 c0                      movzwl  %ax, %eax
// 23c: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 241: 29 c1                         subl    %eax, %ecx
// 243: 48 63 c1                      movslq  %ecx, %rax
// 246: 48 8b 0c 24                   movq    (%rsp), %rcx
// 24a: 49 89 0c c6                   movq    %rcx, (%r14,%rax,8)
// 24e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000250:  R_X86_64_64  _JIT_CONTINUE
// 258: 48 89 df                      movq    %rbx, %rdi
// 25b: 4c 89 ee                      movq    %r13, %rsi
// 25e: 4c 89 fa                      movq    %r15, %rdx
// 261: 48 83 c4 08                   addq    $0x8, %rsp
// 265: 5b                            popq    %rbx
// 266: 41 5c                         popq    %r12
// 268: 41 5d                         popq    %r13
// 26a: 41 5e                         popq    %r14
// 26c: 41 5f                         popq    %r15
// 26e: 5d                            popq    %rbp
// 26f: ff e0                         jmpq    *%rax
// 271: 
static const unsigned char _DELETE_DEREFplus_CALL_TYPE_1_code_body[626] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xb1, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x63, 0xe8, 0x49, 0x83, 0x3c, 0xee, 0x00, 0x75, 0x27, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x24, 0xc6, 0x74, 0x37, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x4c, 0x89, 0xf1, 0x48, 0x29, 0xc1, 0x4c, 0x8b, 0x29, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x89, 0x04, 0x24, 0x8b, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x21, 0x85, 0xc0, 0x79, 0x43, 0xeb, 0x62, 0x48, 0x8b, 0x0c, 0x24, 0x89, 0x01, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xdf, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x7f, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x2c, 0xee, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x0c, 0x24, 0x49, 0x89, 0x0c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_CALL_TYPE_1_code_holes[25] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x87, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x209, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x21b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyType_Type, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x231, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x250, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CALL_TYPE_1_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CALL_TYPE_1_data_holes[1];

// _DELETE_DEREFplus_CHECK_ATTR_CLASS
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CHECK_ATTR_CLASS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 6d                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 c3 00 00 00                jmp     0x13b <_JIT_ENTRY+0x13b>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 12                         js      0xb0 <_JIT_ENTRY+0xb0>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 74 43                         je      0xf3 <_JIT_ENTRY+0xf3>
// b0: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// b4: 48 8b 48 08                   movq    0x8(%rax), %rcx
// b8: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
// bf: 74 52                         je      0x113 <_JIT_ENTRY+0x113>
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_OPERAND
// cb: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// d1: 75 40                         jne     0x113 <_JIT_ENTRY+0x113>
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _JIT_CONTINUE
// dd: 4c 89 f7                      movq    %r14, %rdi
// e0: 48 89 de                      movq    %rbx, %rsi
// e3: 4c 89 fa                      movq    %r15, %rdx
// e6: 48 83 c4 08                   addq    $0x8, %rsp
// ea: 5b                            popq    %rbx
// eb: 41 5c                         popq    %r12
// ed: 41 5e                         popq    %r14
// ef: 41 5f                         popq    %r15
// f1: ff e0                         jmpq    *%rax
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _Py_Dealloc
// fd: 4c 89 e7                      movq    %r12, %rdi
// 100: ff d0                         callq   *%rax
// 102: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 106: 48 8b 48 08                   movq    0x8(%rax), %rcx
// 10a: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
// 111: 75 ae                         jne     0xc1 <_JIT_ENTRY+0xc1>
// 113: 4c 29 f3                      subq    %r14, %rbx
// 116: 48 83 c3 b8                   addq    $-0x48, %rbx
// 11a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 11e: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 122: 49 8b 06                      movq    (%r14), %rax
// 125: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000127:  R_X86_64_64  _JIT_TARGET
// 12f: 89 c9                         movl    %ecx, %ecx
// 131: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 135: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 13b: 48 83 c4 08                   addq    $0x8, %rsp
// 13f: 5b                            popq    %rbx
// 140: 41 5c                         popq    %r12
// 142: 41 5e                         popq    %r14
// 144: 41 5f                         popq    %r15
// 146: c3                            retq
// 147: 
static const unsigned char _DELETE_DEREFplus_CHECK_ATTR_CLASS_code_body[328] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x6d, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xc3, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x43, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74, 0x52, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0xae, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_CHECK_ATTR_CLASS_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CHECK_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CHECK_ATTR_CLASS_data_holes[1];

// _DELETE_DEREFplus_CHECK_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CHECK_ATTR_METHOD_LAZY_DICT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 7c                         jmp     0xbf <_JIT_ENTRY+0xbf>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 85 00 00 00                jmp     0xfd <_JIT_ENTRY+0xfd>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 21                         js      0xbf <_JIT_ENTRY+0xbf>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 75 0f                         jne     0xbf <_JIT_ENTRY+0xbf>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_Dealloc
// ba: 4c 89 e7                      movq    %r12, %rdi
// bd: ff d0                         callq   *%rax
// bf: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// c3: 48 8b 48 08                   movq    0x8(%rax), %rcx
// c7: 48 8b 89 20 01 00 00          movq    0x120(%rcx), %rcx
// ce: 48 83 3c 08 00                cmpq    $0x0, (%rax,%rcx)
// d3: 74 34                         je      0x109 <_JIT_ENTRY+0x109>
// d5: 4c 29 f3                      subq    %r14, %rbx
// d8: 48 83 c3 b8                   addq    $-0x48, %rbx
// dc: 48 c1 eb 03                   shrq    $0x3, %rbx
// e0: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// e4: 49 8b 06                      movq    (%r14), %rax
// e7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e9:  R_X86_64_64  _JIT_TARGET
// f1: 89 c9                         movl    %ecx, %ecx
// f3: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// f7: 48 05 c8 00 00 00             addq    $0xc8, %rax
// fd: 48 83 c4 08                   addq    $0x8, %rsp
// 101: 5b                            popq    %rbx
// 102: 41 5c                         popq    %r12
// 104: 41 5e                         popq    %r14
// 106: 41 5f                         popq    %r15
// 108: c3                            retq
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _JIT_CONTINUE
// 113: 4c 89 f7                      movq    %r14, %rdi
// 116: 48 89 de                      movq    %rbx, %rsi
// 119: 4c 89 fa                      movq    %r15, %rdx
// 11c: 48 83 c4 08                   addq    $0x8, %rsp
// 120: 5b                            popq    %rbx
// 121: 41 5c                         popq    %r12
// 123: 41 5e                         popq    %r14
// 125: 41 5f                         popq    %r15
// 127: ff e0                         jmpq    *%rax
// 129: 
static const unsigned char _DELETE_DEREFplus_CHECK_ATTR_METHOD_LAZY_DICT_code_body[298] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x85, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x08, 0x48, 0x8b, 0x89, 0x20, 0x01, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x08, 0x00, 0x74, 0x34, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_CHECK_ATTR_METHOD_LAZY_DICT_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CHECK_ATTR_METHOD_LAZY_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CHECK_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _DELETE_DEREFplus_CHECK_ATTR_MODULE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CHECK_ATTR_MODULE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 6d                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 ce 00 00 00                jmp     0x146 <_JIT_ENTRY+0x146>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 12                         js      0xb0 <_JIT_ENTRY+0xb0>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 74 4b                         je      0xfb <_JIT_ENTRY+0xfb>
// b0: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// b4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b6:  R_X86_64_64  PyModule_Type
// be: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// c2: 75 5a                         jne     0x11e <_JIT_ENTRY+0x11e>
// c4: 48 8b 40 10                   movq    0x10(%rax), %rax
// c8: 48 8b 40 20                   movq    0x20(%rax), %rax
// cc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ce:  R_X86_64_64  _JIT_OPERAND
// d6: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// d9: 75 43                         jne     0x11e <_JIT_ENTRY+0x11e>
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _JIT_CONTINUE
// e5: 4c 89 f7                      movq    %r14, %rdi
// e8: 48 89 de                      movq    %rbx, %rsi
// eb: 4c 89 fa                      movq    %r15, %rdx
// ee: 48 83 c4 08                   addq    $0x8, %rsp
// f2: 5b                            popq    %rbx
// f3: 41 5c                         popq    %r12
// f5: 41 5e                         popq    %r14
// f7: 41 5f                         popq    %r15
// f9: ff e0                         jmpq    *%rax
// fb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fd:  R_X86_64_64  _Py_Dealloc
// 105: 4c 89 e7                      movq    %r12, %rdi
// 108: ff d0                         callq   *%rax
// 10a: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 10e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000110:  R_X86_64_64  PyModule_Type
// 118: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 11c: 74 a6                         je      0xc4 <_JIT_ENTRY+0xc4>
// 11e: 4c 29 f3                      subq    %r14, %rbx
// 121: 48 83 c3 b8                   addq    $-0x48, %rbx
// 125: 48 c1 eb 03                   shrq    $0x3, %rbx
// 129: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 12d: 49 8b 06                      movq    (%r14), %rax
// 130: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000132:  R_X86_64_64  _JIT_TARGET
// 13a: 89 c9                         movl    %ecx, %ecx
// 13c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 140: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 146: 48 83 c4 08                   addq    $0x8, %rsp
// 14a: 5b                            popq    %rbx
// 14b: 41 5c                         popq    %r12
// 14d: 41 5e                         popq    %r14
// 14f: 41 5f                         popq    %r15
// 151: c3                            retq
// 152: 
static const unsigned char _DELETE_DEREFplus_CHECK_ATTR_MODULE_code_body[339] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x6d, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xce, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x4b, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x5a, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x43, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0xa6, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_CHECK_ATTR_MODULE_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyModule_Type, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyModule_Type, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CHECK_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CHECK_ATTR_MODULE_data_holes[1];

// _DELETE_DEREFplus_CHECK_ATTR_WITH_HINT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CHECK_ATTR_WITH_HINT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 6d                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 ac 00 00 00                jmp     0x124 <_JIT_ENTRY+0x124>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 12                         js      0xb0 <_JIT_ENTRY+0xb0>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 74 31                         je      0xe1 <_JIT_ENTRY+0xe1>
// b0: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// b4: 48 8b 40 e8                   movq    -0x18(%rax), %rax
// b8: a8 01                         testb   $0x1, %al
// ba: 75 40                         jne     0xfc <_JIT_ENTRY+0xfc>
// bc: 48 85 c0                      testq   %rax, %rax
// bf: 74 3b                         je      0xfc <_JIT_ENTRY+0xfc>
// c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c3:  R_X86_64_64  _JIT_CONTINUE
// cb: 4c 89 f7                      movq    %r14, %rdi
// ce: 48 89 de                      movq    %rbx, %rsi
// d1: 4c 89 fa                      movq    %r15, %rdx
// d4: 48 83 c4 08                   addq    $0x8, %rsp
// d8: 5b                            popq    %rbx
// d9: 41 5c                         popq    %r12
// db: 41 5e                         popq    %r14
// dd: 41 5f                         popq    %r15
// df: ff e0                         jmpq    *%rax
// e1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e3:  R_X86_64_64  _Py_Dealloc
// eb: 4c 89 e7                      movq    %r12, %rdi
// ee: ff d0                         callq   *%rax
// f0: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// f4: 48 8b 40 e8                   movq    -0x18(%rax), %rax
// f8: a8 01                         testb   $0x1, %al
// fa: 74 c0                         je      0xbc <_JIT_ENTRY+0xbc>
// fc: 4c 29 f3                      subq    %r14, %rbx
// ff: 48 83 c3 b8                   addq    $-0x48, %rbx
// 103: 48 c1 eb 03                   shrq    $0x3, %rbx
// 107: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 10b: 49 8b 06                      movq    (%r14), %rax
// 10e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000110:  R_X86_64_64  _JIT_TARGET
// 118: 89 c9                         movl    %ecx, %ecx
// 11a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 11e: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 124: 48 83 c4 08                   addq    $0x8, %rsp
// 128: 5b                            popq    %rbx
// 129: 41 5c                         popq    %r12
// 12b: 41 5e                         popq    %r14
// 12d: 41 5f                         popq    %r15
// 12f: c3                            retq
// 130: 
static const unsigned char _DELETE_DEREFplus_CHECK_ATTR_WITH_HINT_code_body[305] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x6d, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xac, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x31, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x40, 0xe8, 0xa8, 0x01, 0x75, 0x40, 0x48, 0x85, 0xc0, 0x74, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x40, 0xe8, 0xa8, 0x01, 0x74, 0xc0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_CHECK_ATTR_WITH_HINT_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xe3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CHECK_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CHECK_ATTR_WITH_HINT_data_holes[1];

// _DELETE_DEREFplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 7c                         jmp     0xbf <_JIT_ENTRY+0xbf>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 b4 00 00 00                jmp     0x12c <_JIT_ENTRY+0x12c>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 21                         js      0xbf <_JIT_ENTRY+0xbf>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 75 0f                         jne     0xbf <_JIT_ENTRY+0xbf>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_Dealloc
// ba: 4c 89 e7                      movq    %r12, %rdi
// bd: ff d0                         callq   *%rax
// bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c1:  R_X86_64_64  _JIT_OPARG
// c9: f7 d0                         notl    %eax
// cb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// d0: 48 98                         cltq
// d2: 48 83 3c c3 00                cmpq    $0x0, (%rbx,%rax,8)
// d7: 75 2b                         jne     0x104 <_JIT_ENTRY+0x104>
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _JIT_OPARG
// e3: 0f b7 c0                      movzwl  %ax, %eax
// e6: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// eb: 29 c1                         subl    %eax, %ecx
// ed: 48 63 c1                      movslq  %ecx, %rax
// f0: 48 8b 04 c3                   movq    (%rbx,%rax,8), %rax
// f4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f6:  R_X86_64_64  PyMethod_Type
// fe: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 102: 74 34                         je      0x138 <_JIT_ENTRY+0x138>
// 104: 4c 29 f3                      subq    %r14, %rbx
// 107: 48 83 c3 b8                   addq    $-0x48, %rbx
// 10b: 48 c1 eb 03                   shrq    $0x3, %rbx
// 10f: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 113: 49 8b 06                      movq    (%r14), %rax
// 116: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000118:  R_X86_64_64  _JIT_TARGET
// 120: 89 c9                         movl    %ecx, %ecx
// 122: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 126: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 12c: 48 83 c4 08                   addq    $0x8, %rsp
// 130: 5b                            popq    %rbx
// 131: 41 5c                         popq    %r12
// 133: 41 5e                         popq    %r14
// 135: 41 5f                         popq    %r15
// 137: c3                            retq
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _JIT_CONTINUE
// 142: 4c 89 f7                      movq    %r14, %rdi
// 145: 48 89 de                      movq    %rbx, %rsi
// 148: 4c 89 fa                      movq    %r15, %rdx
// 14b: 48 83 c4 08                   addq    $0x8, %rsp
// 14f: 5b                            popq    %rbx
// 150: 41 5c                         popq    %r12
// 152: 41 5e                         popq    %r14
// 154: 41 5f                         popq    %r15
// 156: ff e0                         jmpq    *%rax
// 158: 
static const unsigned char _DELETE_DEREFplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_body[345] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xb4, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x83, 0x3c, 0xc3, 0x00, 0x75, 0x2b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x48, 0x8b, 0x04, 0xc3, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x34, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMethod_Type, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _DELETE_DEREFplus_CHECK_EG_MATCH
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CHECK_EG_MATCH.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 29: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2d: 4d 85 e4                      testq   %r12, %r12
// 30: 74 17                         je      0x49 <_JIT_ENTRY+0x49>
// 32: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 2a                         jle     0x6d <_JIT_ENTRY+0x6d>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 4c                         jns     0x93 <_JIT_ENTRY+0x93>
// 47: eb 6b                         jmp     0xb4 <_JIT_ENTRY+0xb4>
// 49: 49 8b 36                      movq    (%r14), %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 d0                      movzwl  %ax, %edx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _PyEval_FormatExcUnbound
// 63: 4c 89 ff                      movq    %r15, %rdi
// 66: ff d0                         callq   *%rax
// 68: e9 70 02 00 00                jmp     0x2dd <_JIT_ENTRY+0x2dd>
// 6d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006f:  R_X86_64_64  .rodata.str1.1
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_NegativeRefcount
// 81: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 86: 4c 89 e2                      movq    %r12, %rdx
// 89: ff d0                         callq   *%rax
// 8b: 49 8b 04 24                   movq    (%r12), %rax
// 8f: 85 c0                         testl   %eax, %eax
// 91: 78 21                         js      0xb4 <_JIT_ENTRY+0xb4>
// 93: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000095:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9d: ff d0                         callq   *%rax
// 9f: 49 ff 0c 24                   decq    (%r12)
// a3: 75 0f                         jne     0xb4 <_JIT_ENTRY+0xb4>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _Py_Dealloc
// af: 4c 89 e7                      movq    %r12, %rdi
// b2: ff d0                         callq   *%rax
// b4: 4c 8b 6b f0                   movq    -0x10(%rbx), %r13
// b8: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// bc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000be:  R_X86_64_64  _PyEval_CheckExceptStarTypeValid
// c6: 4c 89 ff                      movq    %r15, %rdi
// c9: 4c 89 e6                      movq    %r12, %rsi
// cc: ff d0                         callq   *%rax
// ce: 85 c0                         testl   %eax, %eax
// d0: 78 3f                         js      0x111 <_JIT_ENTRY+0x111>
// d2: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// db: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e6:  R_X86_64_64  _PyEval_ExceptionGroupMatch
// ee: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// f3: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
// f8: 4c 89 ef                      movq    %r13, %rdi
// fb: 4c 89 e6                      movq    %r12, %rsi
// fe: ff d0                         callq   *%rax
// 100: 89 c5                         movl    %eax, %ebp
// 102: 49 8b 45 00                   movq    (%r13), %rax
// 106: 48 85 c0                      testq   %rax, %rax
// 109: 7e 20                         jle     0x12b <_JIT_ENTRY+0x12b>
// 10b: 85 c0                         testl   %eax, %eax
// 10d: 79 42                         jns     0x151 <_JIT_ENTRY+0x151>
// 10f: eb 61                         jmp     0x172 <_JIT_ENTRY+0x172>
// 111: 49 8b 45 00                   movq    (%r13), %rax
// 115: 48 85 c0                      testq   %rax, %rax
// 118: 0f 8e 05 01 00 00             jle     0x223 <_JIT_ENTRY+0x223>
// 11e: 85 c0                         testl   %eax, %eax
// 120: 0f 89 23 01 00 00             jns     0x249 <_JIT_ENTRY+0x249>
// 126: e9 3f 01 00 00                jmp     0x26a <_JIT_ENTRY+0x26a>
// 12b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012d:  R_X86_64_64  .rodata.str1.1
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _Py_NegativeRefcount
// 13f: be c1 07 00 00                movl    $0x7c1, %esi            # imm = 0x7C1
// 144: 4c 89 ea                      movq    %r13, %rdx
// 147: ff d0                         callq   *%rax
// 149: 49 8b 45 00                   movq    (%r13), %rax
// 14d: 85 c0                         testl   %eax, %eax
// 14f: 78 21                         js      0x172 <_JIT_ENTRY+0x172>
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 15b: ff d0                         callq   *%rax
// 15d: 49 ff 4d 00                   decq    (%r13)
// 161: 75 0f                         jne     0x172 <_JIT_ENTRY+0x172>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 4c 89 ef                      movq    %r13, %rdi
// 170: ff d0                         callq   *%rax
// 172: 49 8b 04 24                   movq    (%r12), %rax
// 176: 48 85 c0                      testq   %rax, %rax
// 179: 7e 06                         jle     0x181 <_JIT_ENTRY+0x181>
// 17b: 85 c0                         testl   %eax, %eax
// 17d: 79 28                         jns     0x1a7 <_JIT_ENTRY+0x1a7>
// 17f: eb 3c                         jmp     0x1bd <_JIT_ENTRY+0x1bd>
// 181: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000183:  R_X86_64_64  .rodata.str1.1
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_NegativeRefcount
// 195: be c2 07 00 00                movl    $0x7c2, %esi            # imm = 0x7C2
// 19a: 4c 89 e2                      movq    %r12, %rdx
// 19d: ff d0                         callq   *%rax
// 19f: 49 8b 04 24                   movq    (%r12), %rax
// 1a3: 85 c0                         testl   %eax, %eax
// 1a5: 78 16                         js      0x1bd <_JIT_ENTRY+0x1bd>
// 1a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b1: ff d0                         callq   *%rax
// 1b3: 49 ff 0c 24                   decq    (%r12)
// 1b7: 0f 84 05 01 00 00             je      0x2c2 <_JIT_ENTRY+0x2c2>
// 1bd: 85 ed                         testl   %ebp, %ebp
// 1bf: 0f 88 14 01 00 00             js      0x2d9 <_JIT_ENTRY+0x2d9>
// 1c5: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
// 1ca: 48 85 ff                      testq   %rdi, %rdi
// 1cd: 0f 84 06 01 00 00             je      0x2d9 <_JIT_ENTRY+0x2d9>
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _Py_NoneStruct
// 1dd: 48 39 c7                      cmpq    %rax, %rdi
// 1e0: 74 11                         je      0x1f3 <_JIT_ENTRY+0x1f3>
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  PyErr_SetHandledException
// 1ec: ff d0                         callq   *%rax
// 1ee: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1f3: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
// 1f8: 48 89 4b f0                   movq    %rcx, -0x10(%rbx)
// 1fc: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _JIT_CONTINUE
// 20a: 4c 89 f7                      movq    %r14, %rdi
// 20d: 48 89 de                      movq    %rbx, %rsi
// 210: 4c 89 fa                      movq    %r15, %rdx
// 213: 48 83 c4 18                   addq    $0x18, %rsp
// 217: 5b                            popq    %rbx
// 218: 41 5c                         popq    %r12
// 21a: 41 5d                         popq    %r13
// 21c: 41 5e                         popq    %r14
// 21e: 41 5f                         popq    %r15
// 220: 5d                            popq    %rbp
// 221: ff e0                         jmpq    *%rax
// 223: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000225:  R_X86_64_64  .rodata.str1.1
// 22d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022f:  R_X86_64_64  _Py_NegativeRefcount
// 237: be b9 07 00 00                movl    $0x7b9, %esi            # imm = 0x7B9
// 23c: 4c 89 ea                      movq    %r13, %rdx
// 23f: ff d0                         callq   *%rax
// 241: 49 8b 45 00                   movq    (%r13), %rax
// 245: 85 c0                         testl   %eax, %eax
// 247: 78 21                         js      0x26a <_JIT_ENTRY+0x26a>
// 249: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 253: ff d0                         callq   *%rax
// 255: 49 ff 4d 00                   decq    (%r13)
// 259: 75 0f                         jne     0x26a <_JIT_ENTRY+0x26a>
// 25b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000025d:  R_X86_64_64  _Py_Dealloc
// 265: 4c 89 ef                      movq    %r13, %rdi
// 268: ff d0                         callq   *%rax
// 26a: 49 8b 04 24                   movq    (%r12), %rax
// 26e: 48 85 c0                      testq   %rax, %rax
// 271: 7e 06                         jle     0x279 <_JIT_ENTRY+0x279>
// 273: 85 c0                         testl   %eax, %eax
// 275: 79 28                         jns     0x29f <_JIT_ENTRY+0x29f>
// 277: eb 60                         jmp     0x2d9 <_JIT_ENTRY+0x2d9>
// 279: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000027b:  R_X86_64_64  .rodata.str1.1
// 283: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000285:  R_X86_64_64  _Py_NegativeRefcount
// 28d: be ba 07 00 00                movl    $0x7ba, %esi            # imm = 0x7BA
// 292: 4c 89 e2                      movq    %r12, %rdx
// 295: ff d0                         callq   *%rax
// 297: 49 8b 04 24                   movq    (%r12), %rax
// 29b: 85 c0                         testl   %eax, %eax
// 29d: 78 3a                         js      0x2d9 <_JIT_ENTRY+0x2d9>
// 29f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002a1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 2a9: ff d0                         callq   *%rax
// 2ab: 49 ff 0c 24                   decq    (%r12)
// 2af: 75 28                         jne     0x2d9 <_JIT_ENTRY+0x2d9>
// 2b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002b3:  R_X86_64_64  _Py_Dealloc
// 2bb: 4c 89 e7                      movq    %r12, %rdi
// 2be: ff d0                         callq   *%rax
// 2c0: eb 17                         jmp     0x2d9 <_JIT_ENTRY+0x2d9>
// 2c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002c4:  R_X86_64_64  _Py_Dealloc
// 2cc: 4c 89 e7                      movq    %r12, %rdi
// 2cf: ff d0                         callq   *%rax
// 2d1: 85 ed                         testl   %ebp, %ebp
// 2d3: 0f 89 ec fe ff ff             jns     0x1c5 <_JIT_ENTRY+0x1c5>
// 2d9: 48 83 c3 f0                   addq    $-0x10, %rbx
// 2dd: 4c 29 f3                      subq    %r14, %rbx
// 2e0: 48 83 c3 b8                   addq    $-0x48, %rbx
// 2e4: 48 c1 eb 03                   shrq    $0x3, %rbx
// 2e8: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 2ec: 31 c0                         xorl    %eax, %eax
// 2ee: 48 83 c4 18                   addq    $0x18, %rsp
// 2f2: 5b                            popq    %rbx
// 2f3: 41 5c                         popq    %r12
// 2f5: 41 5d                         popq    %r13
// 2f7: 41 5e                         popq    %r14
// 2f9: 41 5f                         popq    %r15
// 2fb: 5d                            popq    %rbp
// 2fc: c3                            retq
// 2fd: 
static const unsigned char _DELETE_DEREFplus_CHECK_EG_MATCH_code_body[766] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x70, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x3f, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x20, 0x85, 0xc0, 0x79, 0x42, 0xeb, 0x61, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x05, 0x01, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0x23, 0x01, 0x00, 0x00, 0xe9, 0x3f, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x3c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc2, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x05, 0x01, 0x00, 0x00, 0x85, 0xed, 0x0f, 0x88, 0x14, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x06, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7, 0x74, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4b, 0xf0, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x60, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xba, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x17, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x89, 0xec, 0xfe, 0xff, 0xff, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_CHECK_EG_MATCH_code_holes[29] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptStarTypeValid, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_ExceptionGroupMatch, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_SetHandledException, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x22f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x24b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x25d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x27b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x285, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x2a1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x2b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x2c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CHECK_EG_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CHECK_EG_MATCH_data_holes[1];

// _DELETE_DEREFplus_CHECK_EXC_MATCH
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CHECK_EXC_MATCH.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 2a                         jle     0x6a <_JIT_ENTRY+0x6a>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 4c                         jns     0x90 <_JIT_ENTRY+0x90>
// 44: eb 6b                         jmp     0xb1 <_JIT_ENTRY+0xb1>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: e9 79 01 00 00                jmp     0x1e3 <_JIT_ENTRY+0x1e3>
// 6a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006c:  R_X86_64_64  .rodata.str1.1
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _Py_NegativeRefcount
// 7e: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 83: 4c 89 e2                      movq    %r12, %rdx
// 86: ff d0                         callq   *%rax
// 88: 49 8b 04 24                   movq    (%r12), %rax
// 8c: 85 c0                         testl   %eax, %eax
// 8e: 78 21                         js      0xb1 <_JIT_ENTRY+0xb1>
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9a: ff d0                         callq   *%rax
// 9c: 49 ff 0c 24                   decq    (%r12)
// a0: 75 0f                         jne     0xb1 <_JIT_ENTRY+0xb1>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_Dealloc
// ac: 4c 89 e7                      movq    %r12, %rdi
// af: ff d0                         callq   *%rax
// b1: 4c 8b 6b f0                   movq    -0x10(%rbx), %r13
// b5: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  _PyEval_CheckExceptTypeValid
// c3: 4c 89 ff                      movq    %r15, %rdi
// c6: 4c 89 e6                      movq    %r12, %rsi
// c9: ff d0                         callq   *%rax
// cb: 85 c0                         testl   %eax, %eax
// cd: 78 23                         js      0xf2 <_JIT_ENTRY+0xf2>
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  PyErr_GivenExceptionMatches
// d9: 4c 89 ef                      movq    %r13, %rdi
// dc: 4c 89 e6                      movq    %r12, %rsi
// df: ff d0                         callq   *%rax
// e1: 89 c5                         movl    %eax, %ebp
// e3: 49 8b 04 24                   movq    (%r12), %rax
// e7: 48 85 c0                      testq   %rax, %rax
// ea: 7e 24                         jle     0x110 <_JIT_ENTRY+0x110>
// ec: 85 c0                         testl   %eax, %eax
// ee: 79 46                         jns     0x136 <_JIT_ENTRY+0x136>
// f0: eb 65                         jmp     0x157 <_JIT_ENTRY+0x157>
// f2: 49 8b 04 24                   movq    (%r12), %rax
// f6: 48 85 c0                      testq   %rax, %rax
// f9: 0f 8e 99 00 00 00             jle     0x198 <_JIT_ENTRY+0x198>
// ff: 48 83 c3 f8                   addq    $-0x8, %rbx
// 103: 85 c0                         testl   %eax, %eax
// 105: 0f 89 b7 00 00 00             jns     0x1c2 <_JIT_ENTRY+0x1c2>
// 10b: e9 d3 00 00 00                jmp     0x1e3 <_JIT_ENTRY+0x1e3>
// 110: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000112:  R_X86_64_64  .rodata.str1.1
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  _Py_NegativeRefcount
// 124: be da 07 00 00                movl    $0x7da, %esi            # imm = 0x7DA
// 129: 4c 89 e2                      movq    %r12, %rdx
// 12c: ff d0                         callq   *%rax
// 12e: 49 8b 04 24                   movq    (%r12), %rax
// 132: 85 c0                         testl   %eax, %eax
// 134: 78 21                         js      0x157 <_JIT_ENTRY+0x157>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 140: ff d0                         callq   *%rax
// 142: 49 ff 0c 24                   decq    (%r12)
// 146: 75 0f                         jne     0x157 <_JIT_ENTRY+0x157>
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _Py_Dealloc
// 152: 4c 89 e7                      movq    %r12, %rdi
// 155: ff d0                         callq   *%rax
// 157: 85 ed                         testl   %ebp, %ebp
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_FalseStruct
// 163: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000165:  R_X86_64_64  _Py_TrueStruct
// 16d: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 171: 48 89 4b f8                   movq    %rcx, -0x8(%rbx)
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _JIT_CONTINUE
// 17f: 4c 89 f7                      movq    %r14, %rdi
// 182: 48 89 de                      movq    %rbx, %rsi
// 185: 4c 89 fa                      movq    %r15, %rdx
// 188: 48 83 c4 08                   addq    $0x8, %rsp
// 18c: 5b                            popq    %rbx
// 18d: 41 5c                         popq    %r12
// 18f: 41 5d                         popq    %r13
// 191: 41 5e                         popq    %r14
// 193: 41 5f                         popq    %r15
// 195: 5d                            popq    %rbp
// 196: ff e0                         jmpq    *%rax
// 198: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019a:  R_X86_64_64  .rodata.str1.1
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _Py_NegativeRefcount
// 1ac: be d6 07 00 00                movl    $0x7d6, %esi            # imm = 0x7D6
// 1b1: 4c 89 e2                      movq    %r12, %rdx
// 1b4: ff d0                         callq   *%rax
// 1b6: 49 8b 04 24                   movq    (%r12), %rax
// 1ba: 48 83 c3 f8                   addq    $-0x8, %rbx
// 1be: 85 c0                         testl   %eax, %eax
// 1c0: 78 21                         js      0x1e3 <_JIT_ENTRY+0x1e3>
// 1c2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c4:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 ff 0c 24                   decq    (%r12)
// 1d2: 75 0f                         jne     0x1e3 <_JIT_ENTRY+0x1e3>
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  _Py_Dealloc
// 1de: 4c 89 e7                      movq    %r12, %rdi
// 1e1: ff d0                         callq   *%rax
// 1e3: 4c 29 f3                      subq    %r14, %rbx
// 1e6: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1ea: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1ee: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1f2: 31 c0                         xorl    %eax, %eax
// 1f4: 48 83 c4 08                   addq    $0x8, %rsp
// 1f8: 5b                            popq    %rbx
// 1f9: 41 5c                         popq    %r12
// 1fb: 41 5d                         popq    %r13
// 1fd: 41 5e                         popq    %r14
// 1ff: 41 5f                         popq    %r15
// 201: 5d                            popq    %rbp
// 202: c3                            retq
// 203: 
static const unsigned char _DELETE_DEREFplus_CHECK_EXC_MATCH_code_body[516] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x79, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x24, 0x85, 0xc0, 0x79, 0x46, 0xeb, 0x65, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x99, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x0f, 0x89, 0xb7, 0x00, 0x00, 0x00, 0xe9, 0xd3, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xda, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x4b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_CHECK_EXC_MATCH_code_holes[21] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_CheckExceptTypeValid, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_GivenExceptionMatches, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CHECK_EXC_MATCH_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CHECK_EXC_MATCH_data_holes[1];

// _DELETE_DEREFplus_CHECK_FUNCTION_EXACT_ARGS
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CHECK_FUNCTION_EXACT_ARGS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 7c                         jmp     0xbf <_JIT_ENTRY+0xbf>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 ee 00 00 00                jmp     0x166 <_JIT_ENTRY+0x166>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 21                         js      0xbf <_JIT_ENTRY+0xbf>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 75 0f                         jne     0xbf <_JIT_ENTRY+0xbf>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_Dealloc
// ba: 4c 89 e7                      movq    %r12, %rdi
// bd: ff d0                         callq   *%rax
// bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c1:  R_X86_64_64  _JIT_OPARG
// c9: 0f b7 c0                      movzwl  %ax, %eax
// cc: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// d1: 29 c1                         subl    %eax, %ecx
// d3: 48 63 c9                      movslq  %ecx, %rcx
// d6: 48 8b 0c cb                   movq    (%rbx,%rcx,8), %rcx
// da: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000dc:  R_X86_64_64  PyFunction_Type
// e4: 48 39 51 08                   cmpq    %rdx, 0x8(%rcx)
// e8: 75 54                         jne     0x13e <_JIT_ENTRY+0x13e>
// ea: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000ec:  R_X86_64_64  _JIT_OPERAND
// f4: 39 91 88 00 00 00             cmpl    %edx, 0x88(%rcx)
// fa: 75 42                         jne     0x13e <_JIT_ENTRY+0x13e>
// fc: f7 d0                         notl    %eax
// fe: 48 98                         cltq
// 100: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// 104: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000106:  R_X86_64_64  _JIT_OPARG
// 10e: 0f b7 d2                      movzwl  %dx, %edx
// 111: 48 83 3c c3 01                cmpq    $0x1, (%rbx,%rax,8)
// 116: 83 da ff                      sbbl    $-0x1, %edx
// 119: 39 51 34                      cmpl    %edx, 0x34(%rcx)
// 11c: 75 20                         jne     0x13e <_JIT_ENTRY+0x13e>
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _JIT_CONTINUE
// 128: 4c 89 f7                      movq    %r14, %rdi
// 12b: 48 89 de                      movq    %rbx, %rsi
// 12e: 4c 89 fa                      movq    %r15, %rdx
// 131: 48 83 c4 08                   addq    $0x8, %rsp
// 135: 5b                            popq    %rbx
// 136: 41 5c                         popq    %r12
// 138: 41 5e                         popq    %r14
// 13a: 41 5f                         popq    %r15
// 13c: ff e0                         jmpq    *%rax
// 13e: 4c 29 f3                      subq    %r14, %rbx
// 141: 48 83 c3 b8                   addq    $-0x48, %rbx
// 145: 48 c1 eb 03                   shrq    $0x3, %rbx
// 149: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 14d: 49 8b 06                      movq    (%r14), %rax
// 150: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000152:  R_X86_64_64  _JIT_TARGET
// 15a: 89 c9                         movl    %ecx, %ecx
// 15c: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 160: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 166: 48 83 c4 08                   addq    $0x8, %rsp
// 16a: 5b                            popq    %rbx
// 16b: 41 5c                         popq    %r12
// 16d: 41 5e                         popq    %r14
// 16f: 41 5f                         popq    %r15
// 171: c3                            retq
// 172: 
static const unsigned char _DELETE_DEREFplus_CHECK_FUNCTION_EXACT_ARGS_code_body[371] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xee, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x48, 0x8b, 0x0c, 0xcb, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x51, 0x08, 0x75, 0x54, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x91, 0x88, 0x00, 0x00, 0x00, 0x75, 0x42, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x8b, 0x49, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x48, 0x83, 0x3c, 0xc3, 0x01, 0x83, 0xda, 0xff, 0x39, 0x51, 0x34, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_CHECK_FUNCTION_EXACT_ARGS_code_holes[14] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_Type, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CHECK_FUNCTION_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CHECK_FUNCTION_EXACT_ARGS_data_holes[1];

// _DELETE_DEREFplus_CHECK_MANAGED_OBJECT_HAS_VALUES
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CHECK_MANAGED_OBJECT_HAS_VALUES.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 38                         jle     0x75 <_JIT_ENTRY+0x75>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5a                         jns     0x9b <_JIT_ENTRY+0x9b>
// 41: eb 6a                         jmp     0xad <_JIT_ENTRY+0xad>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: eb 7e                         jmp     0xf3 <_JIT_ENTRY+0xf3>
// 75: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000077:  R_X86_64_64  .rodata.str1.1
// 7f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000081:  R_X86_64_64  _Py_NegativeRefcount
// 89: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8e: 4c 89 e2                      movq    %r12, %rdx
// 91: ff d0                         callq   *%rax
// 93: 49 8b 04 24                   movq    (%r12), %rax
// 97: 85 c0                         testl   %eax, %eax
// 99: 78 12                         js      0xad <_JIT_ENTRY+0xad>
// 9b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a5: ff d0                         callq   *%rax
// a7: 49 ff 0c 24                   decq    (%r12)
// ab: 74 52                         je      0xff <_JIT_ENTRY+0xff>
// ad: 48 8b 7b f8                   movq    -0x8(%rbx), %rdi
// b1: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// b5: 75 61                         jne     0x118 <_JIT_ENTRY+0x118>
// b7: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// c5: ff d0                         callq   *%rax
// c7: 84 c0                         testb   %al, %al
// c9: 75 4d                         jne     0x118 <_JIT_ENTRY+0x118>
// cb: 4c 29 f3                      subq    %r14, %rbx
// ce: 48 83 c3 b8                   addq    $-0x48, %rbx
// d2: 48 c1 eb 03                   shrq    $0x3, %rbx
// d6: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// da: 49 8b 06                      movq    (%r14), %rax
// dd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000df:  R_X86_64_64  _JIT_TARGET
// e7: 89 c9                         movl    %ecx, %ecx
// e9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ed: 48 05 c8 00 00 00             addq    $0xc8, %rax
// f3: 48 83 c4 08                   addq    $0x8, %rsp
// f7: 5b                            popq    %rbx
// f8: 41 5c                         popq    %r12
// fa: 41 5e                         popq    %r14
// fc: 41 5f                         popq    %r15
// fe: c3                            retq
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_Dealloc
// 109: 4c 89 e7                      movq    %r12, %rdi
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 7b f8                   movq    -0x8(%rbx), %rdi
// 112: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 116: 74 9f                         je      0xb7 <_JIT_ENTRY+0xb7>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _JIT_CONTINUE
// 122: 4c 89 f7                      movq    %r14, %rdi
// 125: 48 89 de                      movq    %rbx, %rsi
// 128: 4c 89 fa                      movq    %r15, %rdx
// 12b: 48 83 c4 08                   addq    $0x8, %rsp
// 12f: 5b                            popq    %rbx
// 130: 41 5c                         popq    %r12
// 132: 41 5e                         popq    %r14
// 134: 41 5f                         popq    %r15
// 136: ff e0                         jmpq    *%rax
// 138: 
static const unsigned char _DELETE_DEREFplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_body[313] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x38, 0x85, 0xc0, 0x79, 0x5a, 0xeb, 0x6a, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x7e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x52, 0x48, 0x8b, 0x7b, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x61, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x75, 0x4d, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7b, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x74, 0x9f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_CHECK_MANAGED_OBJECT_HAS_VALUES_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x77, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CHECK_MANAGED_OBJECT_HAS_VALUES_data_holes[1];

// _DELETE_DEREFplus_CHECK_PEP_523
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CHECK_PEP_523.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 38                         jle     0x75 <_JIT_ENTRY+0x75>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5a                         jns     0x9b <_JIT_ENTRY+0x9b>
// 41: eb 6a                         jmp     0xad <_JIT_ENTRY+0xad>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: eb 6e                         jmp     0xe3 <_JIT_ENTRY+0xe3>
// 75: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000077:  R_X86_64_64  .rodata.str1.1
// 7f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000081:  R_X86_64_64  _Py_NegativeRefcount
// 89: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8e: 4c 89 e2                      movq    %r12, %rdx
// 91: ff d0                         callq   *%rax
// 93: 49 8b 04 24                   movq    (%r12), %rax
// 97: 85 c0                         testl   %eax, %eax
// 99: 78 12                         js      0xad <_JIT_ENTRY+0xad>
// 9b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a5: ff d0                         callq   *%rax
// a7: 49 ff 0c 24                   decq    (%r12)
// ab: 74 42                         je      0xef <_JIT_ENTRY+0xef>
// ad: 49 8b 47 10                   movq    0x10(%r15), %rax
// b1: 48 83 b8 20 08 00 00 00       cmpq    $0x0, 0x820(%rax)
// b9: 74 51                         je      0x10c <_JIT_ENTRY+0x10c>
// bb: 4c 29 f3                      subq    %r14, %rbx
// be: 48 83 c3 b8                   addq    $-0x48, %rbx
// c2: 48 c1 eb 03                   shrq    $0x3, %rbx
// c6: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// ca: 49 8b 06                      movq    (%r14), %rax
// cd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cf:  R_X86_64_64  _JIT_TARGET
// d7: 89 c9                         movl    %ecx, %ecx
// d9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// dd: 48 05 c8 00 00 00             addq    $0xc8, %rax
// e3: 48 83 c4 08                   addq    $0x8, %rsp
// e7: 5b                            popq    %rbx
// e8: 41 5c                         popq    %r12
// ea: 41 5e                         popq    %r14
// ec: 41 5f                         popq    %r15
// ee: c3                            retq
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_Dealloc
// f9: 4c 89 e7                      movq    %r12, %rdi
// fc: ff d0                         callq   *%rax
// fe: 49 8b 47 10                   movq    0x10(%r15), %rax
// 102: 48 83 b8 20 08 00 00 00       cmpq    $0x0, 0x820(%rax)
// 10a: 75 af                         jne     0xbb <_JIT_ENTRY+0xbb>
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _JIT_CONTINUE
// 116: 4c 89 f7                      movq    %r14, %rdi
// 119: 48 89 de                      movq    %rbx, %rsi
// 11c: 4c 89 fa                      movq    %r15, %rdx
// 11f: 48 83 c4 08                   addq    $0x8, %rsp
// 123: 5b                            popq    %rbx
// 124: 41 5c                         popq    %r12
// 126: 41 5e                         popq    %r14
// 128: 41 5f                         popq    %r15
// 12a: ff e0                         jmpq    *%rax
// 12c: 
static const unsigned char _DELETE_DEREFplus_CHECK_PEP_523_code_body[301] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x38, 0x85, 0xc0, 0x79, 0x5a, 0xeb, 0x6a, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x6e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x42, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x83, 0xb8, 0x20, 0x08, 0x00, 0x00, 0x00, 0x74, 0x51, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x83, 0xb8, 0x20, 0x08, 0x00, 0x00, 0x00, 0x75, 0xaf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_CHECK_PEP_523_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x77, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CHECK_PEP_523_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CHECK_PEP_523_data_holes[1];

// _DELETE_DEREFplus_CHECK_STACK_SPACE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CHECK_STACK_SPACE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 6d                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 e4 00 00 00                jmp     0x15c <_JIT_ENTRY+0x15c>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 12                         js      0xb0 <_JIT_ENTRY+0xb0>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 74 69                         je      0x119 <_JIT_ENTRY+0x119>
// b0: 49 8b 87 00 01 00 00          movq    0x100(%r15), %rax
// b7: 48 85 c0                      testq   %rax, %rax
// ba: 74 78                         je      0x134 <_JIT_ENTRY+0x134>
// bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000be:  R_X86_64_64  _JIT_OPARG
// c6: 0f b7 c9                      movzwl  %cx, %ecx
// c9: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
// ce: 29 ca                         subl    %ecx, %edx
// d0: 48 63 ca                      movslq  %edx, %rcx
// d3: 48 8b 0c cb                   movq    (%rbx,%rcx,8), %rcx
// d7: 48 8b 49 30                   movq    0x30(%rcx), %rcx
// db: 48 63 49 4c                   movslq  0x4c(%rcx), %rcx
// df: 49 8b 97 08 01 00 00          movq    0x108(%r15), %rdx
// e6: 48 29 c2                      subq    %rax, %rdx
// e9: 48 c1 fa 03                   sarq    $0x3, %rdx
// ed: 48 39 ca                      cmpq    %rcx, %rdx
// f0: 7e 42                         jle     0x134 <_JIT_ENTRY+0x134>
// f2: 41 83 7f 24 02                cmpl    $0x2, 0x24(%r15)
// f7: 7c 3b                         jl      0x134 <_JIT_ENTRY+0x134>
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _JIT_CONTINUE
// 103: 4c 89 f7                      movq    %r14, %rdi
// 106: 48 89 de                      movq    %rbx, %rsi
// 109: 4c 89 fa                      movq    %r15, %rdx
// 10c: 48 83 c4 08                   addq    $0x8, %rsp
// 110: 5b                            popq    %rbx
// 111: 41 5c                         popq    %r12
// 113: 41 5e                         popq    %r14
// 115: 41 5f                         popq    %r15
// 117: ff e0                         jmpq    *%rax
// 119: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011b:  R_X86_64_64  _Py_Dealloc
// 123: 4c 89 e7                      movq    %r12, %rdi
// 126: ff d0                         callq   *%rax
// 128: 49 8b 87 00 01 00 00          movq    0x100(%r15), %rax
// 12f: 48 85 c0                      testq   %rax, %rax
// 132: 75 88                         jne     0xbc <_JIT_ENTRY+0xbc>
// 134: 4c 29 f3                      subq    %r14, %rbx
// 137: 48 83 c3 b8                   addq    $-0x48, %rbx
// 13b: 48 c1 eb 03                   shrq    $0x3, %rbx
// 13f: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 143: 49 8b 06                      movq    (%r14), %rax
// 146: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000148:  R_X86_64_64  _JIT_TARGET
// 150: 89 c9                         movl    %ecx, %ecx
// 152: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 156: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 15c: 48 83 c4 08                   addq    $0x8, %rsp
// 160: 5b                            popq    %rbx
// 161: 41 5c                         popq    %r12
// 163: 41 5e                         popq    %r14
// 165: 41 5f                         popq    %r15
// 167: c3                            retq
// 168: 
static const unsigned char _DELETE_DEREFplus_CHECK_STACK_SPACE_code_body[361] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x6d, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xe4, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x69, 0x49, 0x8b, 0x87, 0x00, 0x01, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x78, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xca, 0x48, 0x63, 0xca, 0x48, 0x8b, 0x0c, 0xcb, 0x48, 0x8b, 0x49, 0x30, 0x48, 0x63, 0x49, 0x4c, 0x49, 0x8b, 0x97, 0x08, 0x01, 0x00, 0x00, 0x48, 0x29, 0xc2, 0x48, 0xc1, 0xfa, 0x03, 0x48, 0x39, 0xca, 0x7e, 0x42, 0x41, 0x83, 0x7f, 0x24, 0x02, 0x7c, 0x3b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x87, 0x00, 0x01, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x75, 0x88, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_CHECK_STACK_SPACE_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CHECK_STACK_SPACE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CHECK_STACK_SPACE_data_holes[1];

// _DELETE_DEREFplus_CHECK_VALIDITY
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CHECK_VALIDITY.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 6d                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 af 00 00 00                jmp     0x127 <_JIT_ENTRY+0x127>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 12                         js      0xb0 <_JIT_ENTRY+0xb0>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 74 30                         je      0xe0 <_JIT_ENTRY+0xe0>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _JIT_EXECUTOR
// ba: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// be: 74 3f                         je      0xff <_JIT_ENTRY+0xff>
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _JIT_CONTINUE
// ca: 4c 89 f7                      movq    %r14, %rdi
// cd: 48 89 de                      movq    %rbx, %rsi
// d0: 4c 89 fa                      movq    %r15, %rdx
// d3: 48 83 c4 08                   addq    $0x8, %rsp
// d7: 5b                            popq    %rbx
// d8: 41 5c                         popq    %r12
// da: 41 5e                         popq    %r14
// dc: 41 5f                         popq    %r15
// de: ff e0                         jmpq    *%rax
// e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e2:  R_X86_64_64  _Py_Dealloc
// ea: 4c 89 e7                      movq    %r12, %rdi
// ed: ff d0                         callq   *%rax
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _JIT_EXECUTOR
// f9: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
// fd: 75 c1                         jne     0xc0 <_JIT_ENTRY+0xc0>
// ff: 4c 29 f3                      subq    %r14, %rbx
// 102: 48 83 c3 b8                   addq    $-0x48, %rbx
// 106: 48 c1 eb 03                   shrq    $0x3, %rbx
// 10a: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 10e: 49 8b 06                      movq    (%r14), %rax
// 111: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000113:  R_X86_64_64  _JIT_TARGET
// 11b: 89 c9                         movl    %ecx, %ecx
// 11d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 121: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 127: 48 83 c4 08                   addq    $0x8, %rsp
// 12b: 5b                            popq    %rbx
// 12c: 41 5c                         popq    %r12
// 12e: 41 5e                         popq    %r14
// 130: 41 5f                         popq    %r15
// 132: c3                            retq
// 133: 
static const unsigned char _DELETE_DEREFplus_CHECK_VALIDITY_code_body[308] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x6d, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74, 0x3f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x75, 0xc1, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_CHECK_VALIDITY_code_holes[12] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_EXECUTOR, NULL, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CHECK_VALIDITY_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CHECK_VALIDITY_data_holes[1];

// _DELETE_DEREFplus_COMPARE_OP
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_COMPARE_OP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 2a                         jle     0x6a <_JIT_ENTRY+0x6a>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 4c                         jns     0x90 <_JIT_ENTRY+0x90>
// 44: eb 6b                         jmp     0xb1 <_JIT_ENTRY+0xb1>
// 46: 48 8b 33                      movq    (%rbx), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: e9 00 02 00 00                jmp     0x26a <_JIT_ENTRY+0x26a>
// 6a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006c:  R_X86_64_64  .rodata.str1.1
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _Py_NegativeRefcount
// 7e: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 83: 4c 89 e2                      movq    %r12, %rdx
// 86: ff d0                         callq   *%rax
// 88: 49 8b 04 24                   movq    (%r12), %rax
// 8c: 85 c0                         testl   %eax, %eax
// 8e: 78 21                         js      0xb1 <_JIT_ENTRY+0xb1>
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9a: ff d0                         callq   *%rax
// 9c: 49 ff 0c 24                   decq    (%r12)
// a0: 75 0f                         jne     0xb1 <_JIT_ENTRY+0xb1>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_Dealloc
// ac: 4c 89 e7                      movq    %r12, %rdi
// af: ff d0                         callq   *%rax
// b1: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// b5: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  _JIT_OPARG
// c3: 0f b7 d0                      movzwl  %ax, %edx
// c6: c1 ea 05                      shrl    $0x5, %edx
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  PyObject_RichCompare
// d3: 48 89 ef                      movq    %rbp, %rdi
// d6: 4c 89 ee                      movq    %r13, %rsi
// d9: ff d0                         callq   *%rax
// db: 49 89 c4                      movq    %rax, %r12
// de: 48 8b 45 00                   movq    (%rbp), %rax
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 7e 06                         jle     0xed <_JIT_ENTRY+0xed>
// e7: 85 c0                         testl   %eax, %eax
// e9: 79 28                         jns     0x113 <_JIT_ENTRY+0x113>
// eb: eb 38                         jmp     0x125 <_JIT_ENTRY+0x125>
// ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ef:  R_X86_64_64  .rodata.str1.1
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_NegativeRefcount
// 101: be 38 07 00 00                movl    $0x738, %esi            # imm = 0x738
// 106: 48 89 ea                      movq    %rbp, %rdx
// 109: ff d0                         callq   *%rax
// 10b: 48 8b 45 00                   movq    (%rbp), %rax
// 10f: 85 c0                         testl   %eax, %eax
// 111: 78 12                         js      0x125 <_JIT_ENTRY+0x125>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 11d: ff d0                         callq   *%rax
// 11f: 48 ff 4d 00                   decq    (%rbp)
// 123: 74 0f                         je      0x134 <_JIT_ENTRY+0x134>
// 125: 49 8b 45 00                   movq    (%r13), %rax
// 129: 48 85 c0                      testq   %rax, %rax
// 12c: 7e 1e                         jle     0x14c <_JIT_ENTRY+0x14c>
// 12e: 85 c0                         testl   %eax, %eax
// 130: 79 40                         jns     0x172 <_JIT_ENTRY+0x172>
// 132: eb 54                         jmp     0x188 <_JIT_ENTRY+0x188>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_Dealloc
// 13e: 48 89 ef                      movq    %rbp, %rdi
// 141: ff d0                         callq   *%rax
// 143: 49 8b 45 00                   movq    (%r13), %rax
// 147: 48 85 c0                      testq   %rax, %rax
// 14a: 7f e2                         jg      0x12e <_JIT_ENTRY+0x12e>
// 14c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014e:  R_X86_64_64  .rodata.str1.1
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _Py_NegativeRefcount
// 160: be 39 07 00 00                movl    $0x739, %esi            # imm = 0x739
// 165: 4c 89 ea                      movq    %r13, %rdx
// 168: ff d0                         callq   *%rax
// 16a: 49 8b 45 00                   movq    (%r13), %rax
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 16                         js      0x188 <_JIT_ENTRY+0x188>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 4d 00                   decq    (%r13)
// 182: 0f 84 c3 00 00 00             je      0x24b <_JIT_ENTRY+0x24b>
// 188: 4d 8d 6e f0                   leaq    -0x10(%r14), %r13
// 18c: 4d 85 e4                      testq   %r12, %r12
// 18f: 0f 84 d2 00 00 00             je      0x267 <_JIT_ENTRY+0x267>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _JIT_OPARG
// 19f: a8 10                         testb   $0x10, %al
// 1a1: 74 7d                         je      0x220 <_JIT_ENTRY+0x220>
// 1a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a5:  R_X86_64_64  PyObject_IsTrue
// 1ad: 4c 89 e7                      movq    %r12, %rdi
// 1b0: ff d0                         callq   *%rax
// 1b2: 89 c5                         movl    %eax, %ebp
// 1b4: 49 8b 04 24                   movq    (%r12), %rax
// 1b8: 48 85 c0                      testq   %rax, %rax
// 1bb: 7f 22                         jg      0x1df <_JIT_ENTRY+0x1df>
// 1bd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001bf:  R_X86_64_64  .rodata.str1.1
// 1c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c9:  R_X86_64_64  _Py_NegativeRefcount
// 1d1: be 3d 07 00 00                movl    $0x73d, %esi            # imm = 0x73D
// 1d6: 4c 89 e2                      movq    %r12, %rdx
// 1d9: ff d0                         callq   *%rax
// 1db: 49 8b 04 24                   movq    (%r12), %rax
// 1df: 85 c0                         testl   %eax, %eax
// 1e1: 78 21                         js      0x204 <_JIT_ENTRY+0x204>
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ed: ff d0                         callq   *%rax
// 1ef: 49 ff 0c 24                   decq    (%r12)
// 1f3: 75 0f                         jne     0x204 <_JIT_ENTRY+0x204>
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _Py_Dealloc
// 1ff: 4c 89 e7                      movq    %r12, %rdi
// 202: ff d0                         callq   *%rax
// 204: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000206:  R_X86_64_64  _Py_FalseStruct
// 20e: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000210:  R_X86_64_64  _Py_TrueStruct
// 218: 85 ed                         testl   %ebp, %ebp
// 21a: 4c 0f 44 e0                   cmoveq  %rax, %r12
// 21e: 78 47                         js      0x267 <_JIT_ENTRY+0x267>
// 220: 49 83 c6 f8                   addq    $-0x8, %r14
// 224: 4d 89 65 00                   movq    %r12, (%r13)
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _JIT_CONTINUE
// 232: 48 89 df                      movq    %rbx, %rdi
// 235: 4c 89 f6                      movq    %r14, %rsi
// 238: 4c 89 fa                      movq    %r15, %rdx
// 23b: 48 83 c4 08                   addq    $0x8, %rsp
// 23f: 5b                            popq    %rbx
// 240: 41 5c                         popq    %r12
// 242: 41 5d                         popq    %r13
// 244: 41 5e                         popq    %r14
// 246: 41 5f                         popq    %r15
// 248: 5d                            popq    %rbp
// 249: ff e0                         jmpq    *%rax
// 24b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024d:  R_X86_64_64  _Py_Dealloc
// 255: 4c 89 ef                      movq    %r13, %rdi
// 258: ff d0                         callq   *%rax
// 25a: 4d 8d 6e f0                   leaq    -0x10(%r14), %r13
// 25e: 4d 85 e4                      testq   %r12, %r12
// 261: 0f 85 2e ff ff ff             jne     0x195 <_JIT_ENTRY+0x195>
// 267: 4d 89 ee                      movq    %r13, %r14
// 26a: 49 29 de                      subq    %rbx, %r14
// 26d: 49 83 c6 b8                   addq    $-0x48, %r14
// 271: 49 c1 ee 03                   shrq    $0x3, %r14
// 275: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 279: 31 c0                         xorl    %eax, %eax
// 27b: 48 83 c4 08                   addq    $0x8, %rsp
// 27f: 5b                            popq    %rbx
// 280: 41 5c                         popq    %r12
// 282: 41 5d                         popq    %r13
// 284: 41 5e                         popq    %r14
// 286: 41 5f                         popq    %r15
// 288: 5d                            popq    %rbp
// 289: c3                            retq
// 28a: 
static const unsigned char _DELETE_DEREFplus_COMPARE_OP_code_body[651] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x00, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x6e, 0xf0, 0x4d, 0x8b, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0xc1, 0xea, 0x05, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x07, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x6e, 0xf0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xd2, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x10, 0x74, 0x7d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3d, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xed, 0x4c, 0x0f, 0x44, 0xe0, 0x78, 0x47, 0x49, 0x83, 0xc6, 0xf8, 0x4d, 0x89, 0x65, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x8d, 0x6e, 0xf0, 0x4d, 0x85, 0xe4, 0x0f, 0x85, 0x2e, 0xff, 0xff, 0xff, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_COMPARE_OP_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_RichCompare, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x206, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x24d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_COMPARE_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_COMPARE_OP_data_holes[1];

// _DELETE_DEREFplus_COMPARE_OP_FLOAT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_COMPARE_OP_FLOAT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 29: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2d: 4d 85 e4                      testq   %r12, %r12
// 30: 74 17                         je      0x49 <_JIT_ENTRY+0x49>
// 32: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 3b                         jle     0x7e <_JIT_ENTRY+0x7e>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 5d                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 47: eb 71                         jmp     0xba <_JIT_ENTRY+0xba>
// 49: 48 8b 33                      movq    (%rbx), %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 d0                      movzwl  %ax, %edx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _PyEval_FormatExcUnbound
// 63: 4c 89 ff                      movq    %r15, %rdi
// 66: ff d0                         callq   *%rax
// 68: 49 29 de                      subq    %rbx, %r14
// 6b: 49 83 c6 b8                   addq    $-0x48, %r14
// 6f: 49 c1 ee 03                   shrq    $0x3, %r14
// 73: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 77: 31 c0                         xorl    %eax, %eax
// 79: e9 93 01 00 00                jmp     0x211 <_JIT_ENTRY+0x211>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 16                         js      0xba <_JIT_ENTRY+0xba>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 0f 84 07 01 00 00             je      0x1c1 <_JIT_ENTRY+0x1c1>
// ba: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c0:  R_X86_64_64  PyFloat_Type
// c8: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// cd: 0f 85 16 01 00 00             jne     0x1e9 <_JIT_ENTRY+0x1e9>
// d3: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// d7: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// db: 0f 85 08 01 00 00             jne     0x1e9 <_JIT_ENTRY+0x1e9>
// e1: f2 41 0f 10 44 24 10          movsd   0x10(%r12), %xmm0       # xmm0 = mem[0],zero
// e8: f2 0f 11 44 24 10             movsd   %xmm0, 0x10(%rsp)
// ee: f2 41 0f 10 45 10             movsd   0x10(%r13), %xmm0       # xmm0 = mem[0],zero
// f4: f2 0f 11 44 24 08             movsd   %xmm0, 0x8(%rsp)
// fa: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 100: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000102:  R_X86_64_64  PyInterpreterState_Get
// 10a: 75 1e                         jne     0x12a <_JIT_ENTRY+0x12a>
// 10c: ff d5                         callq   *%rbp
// 10e: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 115: 49 ff 0c 24                   decq    (%r12)
// 119: 75 0f                         jne     0x12a <_JIT_ENTRY+0x12a>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _PyFloat_ExactDealloc
// 125: 4c 89 e7                      movq    %r12, %rdi
// 128: ff d0                         callq   *%rax
// 12a: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 12e: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 133: 75 1e                         jne     0x153 <_JIT_ENTRY+0x153>
// 135: ff d5                         callq   *%rbp
// 137: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 13e: 49 ff 4d 00                   decq    (%r13)
// 142: 75 0f                         jne     0x153 <_JIT_ENTRY+0x153>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _PyFloat_ExactDealloc
// 14e: 4c 89 ef                      movq    %r13, %rdi
// 151: ff d0                         callq   *%rax
// 153: 31 c0                         xorl    %eax, %eax
// 155: f2 0f 10 44 24 10             movsd   0x10(%rsp), %xmm0       # xmm0 = mem[0],zero
// 15b: f2 0f 10 4c 24 08             movsd   0x8(%rsp), %xmm1        # xmm1 = mem[0],zero
// 161: 66 0f 2e c1                   ucomisd %xmm1, %xmm0
// 165: 0f 93 c0                      setae   %al
// 168: 01 c0                         addl    %eax, %eax
// 16a: 31 c9                         xorl    %ecx, %ecx
// 16c: 66 0f 2e c8                   ucomisd %xmm0, %xmm1
// 170: 0f 93 c1                      setae   %cl
// 173: 09 c1                         orl     %eax, %ecx
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _JIT_OPARG
// 17f: 0f a3 c8                      btl     %ecx, %eax
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_FalseStruct
// 18c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000018e:  R_X86_64_64  _Py_TrueStruct
// 196: 48 0f 43 c8                   cmovaeq %rax, %rcx
// 19a: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_CONTINUE
// 1a8: 48 89 df                      movq    %rbx, %rdi
// 1ab: 4c 89 e6                      movq    %r12, %rsi
// 1ae: 4c 89 fa                      movq    %r15, %rdx
// 1b1: 48 83 c4 18                   addq    $0x18, %rsp
// 1b5: 5b                            popq    %rbx
// 1b6: 41 5c                         popq    %r12
// 1b8: 41 5d                         popq    %r13
// 1ba: 41 5e                         popq    %r14
// 1bc: 41 5f                         popq    %r15
// 1be: 5d                            popq    %rbp
// 1bf: ff e0                         jmpq    *%rax
// 1c1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c3:  R_X86_64_64  _Py_Dealloc
// 1cb: 4c 89 e7                      movq    %r12, %rdi
// 1ce: ff d0                         callq   *%rax
// 1d0: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 1d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d6:  R_X86_64_64  PyFloat_Type
// 1de: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 1e3: 0f 84 ea fe ff ff             je      0xd3 <_JIT_ENTRY+0xd3>
// 1e9: 49 29 de                      subq    %rbx, %r14
// 1ec: 49 83 c6 b8                   addq    $-0x48, %r14
// 1f0: 49 c1 ee 03                   shrq    $0x3, %r14
// 1f4: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1f8: 48 8b 03                      movq    (%rbx), %rax
// 1fb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001fd:  R_X86_64_64  _JIT_TARGET
// 205: 89 c9                         movl    %ecx, %ecx
// 207: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 20b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 211: 48 83 c4 18                   addq    $0x18, %rsp
// 215: 5b                            popq    %rbx
// 216: 41 5c                         popq    %r12
// 218: 41 5d                         popq    %r13
// 21a: 41 5e                         popq    %r14
// 21c: 41 5f                         popq    %r15
// 21e: 5d                            popq    %rbp
// 21f: c3                            retq
// 220: 
static const unsigned char _DELETE_DEREFplus_COMPARE_OP_FLOAT_code_body[545] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x71, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x93, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x07, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x16, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x6e, 0xf8, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x08, 0x01, 0x00, 0x00, 0xf2, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x10, 0xf2, 0x41, 0x0f, 0x10, 0x45, 0x10, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x08, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x66, 0xf8, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd5, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x31, 0xc0, 0xf2, 0x0f, 0x10, 0x44, 0x24, 0x10, 0xf2, 0x0f, 0x10, 0x4c, 0x24, 0x08, 0x66, 0x0f, 0x2e, 0xc1, 0x0f, 0x93, 0xc0, 0x01, 0xc0, 0x31, 0xc9, 0x66, 0x0f, 0x2e, 0xc8, 0x0f, 0x93, 0xc1, 0x09, 0xc1, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xa3, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xc8, 0x49, 0x89, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x84, 0xea, 0xfe, 0xff, 0xff, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_COMPARE_OP_FLOAT_code_holes[18] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFloat_ExactDealloc, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1c3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x1fd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_COMPARE_OP_FLOAT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_COMPARE_OP_FLOAT_data_holes[1];

// _DELETE_DEREFplus_COMPARE_OP_INT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_COMPARE_OP_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 29: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2d: 4d 85 e4                      testq   %r12, %r12
// 30: 74 17                         je      0x49 <_JIT_ENTRY+0x49>
// 32: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 3b                         jle     0x7e <_JIT_ENTRY+0x7e>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 5d                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 47: eb 71                         jmp     0xba <_JIT_ENTRY+0xba>
// 49: 48 8b 33                      movq    (%rbx), %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 d0                      movzwl  %ax, %edx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _PyEval_FormatExcUnbound
// 63: 4c 89 ff                      movq    %r15, %rdi
// 66: ff d0                         callq   *%rax
// 68: 49 29 de                      subq    %rbx, %r14
// 6b: 49 83 c6 b8                   addq    $-0x48, %r14
// 6f: 49 c1 ee 03                   shrq    $0x3, %r14
// 73: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 77: 31 c0                         xorl    %eax, %eax
// 79: e9 e2 01 00 00                jmp     0x260 <_JIT_ENTRY+0x260>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 16                         js      0xba <_JIT_ENTRY+0xba>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 0f 84 56 01 00 00             je      0x210 <_JIT_ENTRY+0x210>
// ba: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c0:  R_X86_64_64  PyLong_Type
// c8: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// cd: 0f 85 65 01 00 00             jne     0x238 <_JIT_ENTRY+0x238>
// d3: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// d7: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// db: 0f 85 57 01 00 00             jne     0x238 <_JIT_ENTRY+0x238>
// e1: 49 8b 6c 24 10                movq    0x10(%r12), %rbp
// e6: 48 83 fd 0f                   cmpq    $0xf, %rbp
// ea: 0f 87 48 01 00 00             ja      0x238 <_JIT_ENTRY+0x238>
// f0: 49 8b 45 10                   movq    0x10(%r13), %rax
// f4: 48 83 f8 0f                   cmpq    $0xf, %rax
// f8: 0f 87 3a 01 00 00             ja      0x238 <_JIT_ENTRY+0x238>
// fe: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 103: 41 8b 44 24 18                movl    0x18(%r12), %eax
// 108: 48 89 04 24                   movq    %rax, (%rsp)
// 10c: 41 8b 45 18                   movl    0x18(%r13), %eax
// 110: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 115: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 11b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000011d:  R_X86_64_64  PyInterpreterState_Get
// 125: 75 3c                         jne     0x163 <_JIT_ENTRY+0x163>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  PyInterpreterState_Get
// 131: ff d0                         callq   *%rax
// 133: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 13a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000013c:  R_X86_64_64  PyInterpreterState_Get
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 19                         jne     0x163 <_JIT_ENTRY+0x163>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  PyObject_Free
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000015b:  R_X86_64_64  PyInterpreterState_Get
// 163: 4d 8d 66 f8                   leaq    -0x8(%r14), %r12
// 167: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 16c: 75 1e                         jne     0x18c <_JIT_ENTRY+0x18c>
// 16e: ff d1                         callq   *%rcx
// 170: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 177: 49 ff 4d 00                   decq    (%r13)
// 17b: 75 0f                         jne     0x18c <_JIT_ENTRY+0x18c>
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  PyObject_Free
// 187: 4c 89 ef                      movq    %r13, %rdi
// 18a: ff d0                         callq   *%rax
// 18c: 83 e5 03                      andl    $0x3, %ebp
// 18f: b8 01 00 00 00                movl    $0x1, %eax
// 194: b9 01 00 00 00                movl    $0x1, %ecx
// 199: 48 29 e9                      subq    %rbp, %rcx
// 19c: 48 0f af 0c 24                imulq   (%rsp), %rcx
// 1a1: 48 8b 54 24 10                movq    0x10(%rsp), %rdx
// 1a6: 83 e2 03                      andl    $0x3, %edx
// 1a9: 48 29 d0                      subq    %rdx, %rax
// 1ac: 48 0f af 44 24 08             imulq   0x8(%rsp), %rax
// 1b2: 31 d2                         xorl    %edx, %edx
// 1b4: 31 f6                         xorl    %esi, %esi
// 1b6: 48 39 c1                      cmpq    %rax, %rcx
// 1b9: 0f 9d c2                      setge   %dl
// 1bc: 40 0f 9e c6                   setle   %sil
// 1c0: 01 d2                         addl    %edx, %edx
// 1c2: 09 d6                         orl     %edx, %esi
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _JIT_OPARG
// 1ce: 0f a3 f0                      btl     %esi, %eax
// 1d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d3:  R_X86_64_64  _Py_FalseStruct
// 1db: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001dd:  R_X86_64_64  _Py_TrueStruct
// 1e5: 48 0f 43 c8                   cmovaeq %rax, %rcx
// 1e9: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ef:  R_X86_64_64  _JIT_CONTINUE
// 1f7: 48 89 df                      movq    %rbx, %rdi
// 1fa: 4c 89 e6                      movq    %r12, %rsi
// 1fd: 4c 89 fa                      movq    %r15, %rdx
// 200: 48 83 c4 18                   addq    $0x18, %rsp
// 204: 5b                            popq    %rbx
// 205: 41 5c                         popq    %r12
// 207: 41 5d                         popq    %r13
// 209: 41 5e                         popq    %r14
// 20b: 41 5f                         popq    %r15
// 20d: 5d                            popq    %rbp
// 20e: ff e0                         jmpq    *%rax
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _Py_Dealloc
// 21a: 4c 89 e7                      movq    %r12, %rdi
// 21d: ff d0                         callq   *%rax
// 21f: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  PyLong_Type
// 22d: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 232: 0f 84 9b fe ff ff             je      0xd3 <_JIT_ENTRY+0xd3>
// 238: 49 29 de                      subq    %rbx, %r14
// 23b: 49 83 c6 b8                   addq    $-0x48, %r14
// 23f: 49 c1 ee 03                   shrq    $0x3, %r14
// 243: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 247: 48 8b 03                      movq    (%rbx), %rax
// 24a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000024c:  R_X86_64_64  _JIT_TARGET
// 254: 89 c9                         movl    %ecx, %ecx
// 256: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 25a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 260: 48 83 c4 18                   addq    $0x18, %rsp
// 264: 5b                            popq    %rbx
// 265: 41 5c                         popq    %r12
// 267: 41 5d                         popq    %r13
// 269: 41 5e                         popq    %r14
// 26b: 41 5f                         popq    %r15
// 26d: 5d                            popq    %rbp
// 26e: c3                            retq
// 26f: 
static const unsigned char _DELETE_DEREFplus_COMPARE_OP_INT_code_body[624] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x71, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xe2, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x56, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x65, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x6e, 0xf8, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x57, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x83, 0xfd, 0x0f, 0x0f, 0x87, 0x48, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x45, 0x10, 0x48, 0x83, 0xf8, 0x0f, 0x0f, 0x87, 0x3a, 0x01, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x10, 0x41, 0x8b, 0x44, 0x24, 0x18, 0x48, 0x89, 0x04, 0x24, 0x41, 0x8b, 0x45, 0x18, 0x48, 0x89, 0x44, 0x24, 0x08, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x66, 0xf8, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x83, 0xe5, 0x03, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x48, 0x29, 0xe9, 0x48, 0x0f, 0xaf, 0x0c, 0x24, 0x48, 0x8b, 0x54, 0x24, 0x10, 0x83, 0xe2, 0x03, 0x48, 0x29, 0xd0, 0x48, 0x0f, 0xaf, 0x44, 0x24, 0x08, 0x31, 0xd2, 0x31, 0xf6, 0x48, 0x39, 0xc1, 0x0f, 0x9d, 0xc2, 0x40, 0x0f, 0x9e, 0xc6, 0x01, 0xd2, 0x09, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xa3, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x43, 0xc8, 0x49, 0x89, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8b, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x84, 0x9b, 0xfe, 0xff, 0xff, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_COMPARE_OP_INT_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1ef, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_COMPARE_OP_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_COMPARE_OP_INT_data_holes[1];

// _DELETE_DEREFplus_COMPARE_OP_STR
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_COMPARE_OP_STR.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 3b                         jle     0x7b <_JIT_ENTRY+0x7b>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 5d                         jns     0xa1 <_JIT_ENTRY+0xa1>
// 44: eb 71                         jmp     0xb7 <_JIT_ENTRY+0xb7>
// 46: 48 8b 33                      movq    (%rbx), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 49 29 de                      subq    %rbx, %r14
// 68: 49 83 c6 b8                   addq    $-0x48, %r14
// 6c: 49 c1 ee 03                   shrq    $0x3, %r14
// 70: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 74: 31 c0                         xorl    %eax, %eax
// 76: e9 8c 01 00 00                jmp     0x207 <_JIT_ENTRY+0x207>
// 7b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007d:  R_X86_64_64  .rodata.str1.1
// 85: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000087:  R_X86_64_64  _Py_NegativeRefcount
// 8f: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 94: 4c 89 e2                      movq    %r12, %rdx
// 97: ff d0                         callq   *%rax
// 99: 49 8b 04 24                   movq    (%r12), %rax
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 16                         js      0xb7 <_JIT_ENTRY+0xb7>
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ab: ff d0                         callq   *%rax
// ad: 49 ff 0c 24                   decq    (%r12)
// b1: 0f 84 01 01 00 00             je      0x1b8 <_JIT_ENTRY+0x1b8>
// b7: 4d 8b 6e f0                   movq    -0x10(%r14), %r13
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  PyUnicode_Type
// c5: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// c9: 0f 85 10 01 00 00             jne     0x1df <_JIT_ENTRY+0x1df>
// cf: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// d3: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// d8: 0f 85 01 01 00 00             jne     0x1df <_JIT_ENTRY+0x1df>
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _PyUnicode_Equal
// e8: 4c 89 ef                      movq    %r13, %rdi
// eb: 4c 89 e6                      movq    %r12, %rsi
// ee: ff d0                         callq   *%rax
// f0: 89 c5                         movl    %eax, %ebp
// f2: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// f7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f9:  R_X86_64_64  PyInterpreterState_Get
// 101: 75 3c                         jne     0x13f <_JIT_ENTRY+0x13f>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  PyInterpreterState_Get
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 116: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000118:  R_X86_64_64  PyInterpreterState_Get
// 120: 49 ff 4d 00                   decq    (%r13)
// 124: 75 19                         jne     0x13f <_JIT_ENTRY+0x13f>
// 126: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000128:  R_X86_64_64  _PyUnicode_ExactDealloc
// 130: 4c 89 ef                      movq    %r13, %rdi
// 133: ff d0                         callq   *%rax
// 135: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000137:  R_X86_64_64  PyInterpreterState_Get
// 13f: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 143: 41 f6 44 24 03 80             testb   $-0x80, 0x3(%r12)
// 149: 75 1e                         jne     0x169 <_JIT_ENTRY+0x169>
// 14b: ff d1                         callq   *%rcx
// 14d: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 154: 49 ff 0c 24                   decq    (%r12)
// 158: 75 0f                         jne     0x169 <_JIT_ENTRY+0x169>
// 15a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015c:  R_X86_64_64  _PyUnicode_ExactDealloc
// 164: 4c 89 e7                      movq    %r12, %rdi
// 167: ff d0                         callq   *%rax
// 169: 83 c5 07                      addl    $0x7, %ebp
// 16c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016e:  R_X86_64_64  _JIT_OPARG
// 176: 66 85 e8                      testw   %bp, %ax
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_FalseStruct
// 183: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000185:  R_X86_64_64  _Py_TrueStruct
// 18d: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 191: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _JIT_CONTINUE
// 19f: 48 89 df                      movq    %rbx, %rdi
// 1a2: 4c 89 ee                      movq    %r13, %rsi
// 1a5: 4c 89 fa                      movq    %r15, %rdx
// 1a8: 48 83 c4 08                   addq    $0x8, %rsp
// 1ac: 5b                            popq    %rbx
// 1ad: 41 5c                         popq    %r12
// 1af: 41 5d                         popq    %r13
// 1b1: 41 5e                         popq    %r14
// 1b3: 41 5f                         popq    %r15
// 1b5: 5d                            popq    %rbp
// 1b6: ff e0                         jmpq    *%rax
// 1b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ba:  R_X86_64_64  _Py_Dealloc
// 1c2: 4c 89 e7                      movq    %r12, %rdi
// 1c5: ff d0                         callq   *%rax
// 1c7: 4d 8b 6e f0                   movq    -0x10(%r14), %r13
// 1cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cd:  R_X86_64_64  PyUnicode_Type
// 1d5: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 1d9: 0f 84 f0 fe ff ff             je      0xcf <_JIT_ENTRY+0xcf>
// 1df: 49 29 de                      subq    %rbx, %r14
// 1e2: 49 83 c6 b8                   addq    $-0x48, %r14
// 1e6: 49 c1 ee 03                   shrq    $0x3, %r14
// 1ea: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1ee: 48 8b 03                      movq    (%rbx), %rax
// 1f1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001f3:  R_X86_64_64  _JIT_TARGET
// 1fb: 89 c9                         movl    %ecx, %ecx
// 1fd: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 201: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 207: 48 83 c4 08                   addq    $0x8, %rsp
// 20b: 5b                            popq    %rbx
// 20c: 41 5c                         popq    %r12
// 20e: 41 5d                         popq    %r13
// 210: 41 5e                         popq    %r14
// 212: 41 5f                         popq    %r15
// 214: 5d                            popq    %rbp
// 215: c3                            retq
// 216: 
static const unsigned char _DELETE_DEREFplus_COMPARE_OP_STR_code_body[535] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x71, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x8c, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x01, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x10, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf8, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x01, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x19, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x6e, 0xf8, 0x41, 0xf6, 0x44, 0x24, 0x03, 0x80, 0x75, 0x1e, 0xff, 0xd1, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x83, 0xc5, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8b, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x84, 0xf0, 0xfe, 0xff, 0xff, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_COMPARE_OP_STR_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x87, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_Equal, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyUnicode_ExactDealloc, 0x0},
    {0x16e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1ba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x1f3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_COMPARE_OP_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_COMPARE_OP_STR_data_holes[1];

// _DELETE_DEREFplus_CONTAINS_OP
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CONTAINS_OP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 2a                         jle     0x6a <_JIT_ENTRY+0x6a>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 4c                         jns     0x90 <_JIT_ENTRY+0x90>
// 44: eb 6b                         jmp     0xb1 <_JIT_ENTRY+0xb1>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: e9 7c 01 00 00                jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 6a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006c:  R_X86_64_64  .rodata.str1.1
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _Py_NegativeRefcount
// 7e: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 83: 4c 89 e2                      movq    %r12, %rdx
// 86: ff d0                         callq   *%rax
// 88: 49 8b 04 24                   movq    (%r12), %rax
// 8c: 85 c0                         testl   %eax, %eax
// 8e: 78 21                         js      0xb1 <_JIT_ENTRY+0xb1>
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9a: ff d0                         callq   *%rax
// 9c: 49 ff 0c 24                   decq    (%r12)
// a0: 75 0f                         jne     0xb1 <_JIT_ENTRY+0xb1>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_Dealloc
// ac: 4c 89 e7                      movq    %r12, %rdi
// af: ff d0                         callq   *%rax
// b1: 4c 8b 6b f0                   movq    -0x10(%rbx), %r13
// b5: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  PySequence_Contains
// c3: 4c 89 e7                      movq    %r12, %rdi
// c6: 4c 89 ee                      movq    %r13, %rsi
// c9: ff d0                         callq   *%rax
// cb: 89 c5                         movl    %eax, %ebp
// cd: 49 8b 45 00                   movq    (%r13), %rax
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 7e 06                         jle     0xdc <_JIT_ENTRY+0xdc>
// d6: 85 c0                         testl   %eax, %eax
// d8: 79 28                         jns     0x102 <_JIT_ENTRY+0x102>
// da: eb 38                         jmp     0x114 <_JIT_ENTRY+0x114>
// dc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000de:  R_X86_64_64  .rodata.str1.1
// e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e8:  R_X86_64_64  _Py_NegativeRefcount
// f0: be a8 07 00 00                movl    $0x7a8, %esi            # imm = 0x7A8
// f5: 4c 89 ea                      movq    %r13, %rdx
// f8: ff d0                         callq   *%rax
// fa: 49 8b 45 00                   movq    (%r13), %rax
// fe: 85 c0                         testl   %eax, %eax
// 100: 78 12                         js      0x114 <_JIT_ENTRY+0x114>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10c: ff d0                         callq   *%rax
// 10e: 49 ff 4d 00                   decq    (%r13)
// 112: 74 0f                         je      0x123 <_JIT_ENTRY+0x123>
// 114: 49 8b 04 24                   movq    (%r12), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 7e 1e                         jle     0x13b <_JIT_ENTRY+0x13b>
// 11d: 85 c0                         testl   %eax, %eax
// 11f: 79 40                         jns     0x161 <_JIT_ENTRY+0x161>
// 121: eb 50                         jmp     0x173 <_JIT_ENTRY+0x173>
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _Py_Dealloc
// 12d: 4c 89 ef                      movq    %r13, %rdi
// 130: ff d0                         callq   *%rax
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f e2                         jg      0x11d <_JIT_ENTRY+0x11d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be a9 07 00 00                movl    $0x7a9, %esi            # imm = 0x7A9
// 154: 4c 89 e2                      movq    %r12, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 04 24                   movq    (%r12), %rax
// 15d: 85 c0                         testl   %eax, %eax
// 15f: 78 12                         js      0x173 <_JIT_ENTRY+0x173>
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16b: ff d0                         callq   *%rax
// 16d: 49 ff 0c 24                   decq    (%r12)
// 171: 74 59                         je      0x1cc <_JIT_ENTRY+0x1cc>
// 173: 48 8d 43 f0                   leaq    -0x10(%rbx), %rax
// 177: 85 ed                         testl   %ebp, %ebp
// 179: 78 68                         js      0x1e3 <_JIT_ENTRY+0x1e3>
// 17b: 48 83 c3 f8                   addq    $-0x8, %rbx
// 17f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000181:  R_X86_64_64  _JIT_OPARG
// 189: 0f b7 c9                      movzwl  %cx, %ecx
// 18c: 39 cd                         cmpl    %ecx, %ebp
// 18e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000190:  R_X86_64_64  _Py_FalseStruct
// 198: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000019a:  R_X86_64_64  _Py_TrueStruct
// 1a2: 48 0f 44 d1                   cmoveq  %rcx, %rdx
// 1a6: 48 89 10                      movq    %rdx, (%rax)
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _JIT_CONTINUE
// 1b3: 4c 89 f7                      movq    %r14, %rdi
// 1b6: 48 89 de                      movq    %rbx, %rsi
// 1b9: 4c 89 fa                      movq    %r15, %rdx
// 1bc: 48 83 c4 08                   addq    $0x8, %rsp
// 1c0: 5b                            popq    %rbx
// 1c1: 41 5c                         popq    %r12
// 1c3: 41 5d                         popq    %r13
// 1c5: 41 5e                         popq    %r14
// 1c7: 41 5f                         popq    %r15
// 1c9: 5d                            popq    %rbp
// 1ca: ff e0                         jmpq    *%rax
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _Py_Dealloc
// 1d6: 4c 89 e7                      movq    %r12, %rdi
// 1d9: ff d0                         callq   *%rax
// 1db: 48 8d 43 f0                   leaq    -0x10(%rbx), %rax
// 1df: 85 ed                         testl   %ebp, %ebp
// 1e1: 79 98                         jns     0x17b <_JIT_ENTRY+0x17b>
// 1e3: 48 89 c3                      movq    %rax, %rbx
// 1e6: 4c 29 f3                      subq    %r14, %rbx
// 1e9: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1ed: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1f1: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1f5: 31 c0                         xorl    %eax, %eax
// 1f7: 48 83 c4 08                   addq    $0x8, %rsp
// 1fb: 5b                            popq    %rbx
// 1fc: 41 5c                         popq    %r12
// 1fe: 41 5d                         popq    %r13
// 200: 41 5e                         popq    %r14
// 202: 41 5f                         popq    %r15
// 204: 5d                            popq    %rbp
// 205: c3                            retq
// 206: 
static const unsigned char _DELETE_DEREFplus_CONTAINS_OP_code_body[519] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x7c, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa8, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa9, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x59, 0x48, 0x8d, 0x43, 0xf0, 0x85, 0xed, 0x78, 0x68, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0xcd, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xd1, 0x48, 0x89, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8d, 0x43, 0xf0, 0x85, 0xed, 0x79, 0x98, 0x48, 0x89, 0xc3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_CONTAINS_OP_code_holes[21] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Contains, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CONTAINS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CONTAINS_OP_data_holes[1];

// _DELETE_DEREFplus_CONVERT_VALUE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_CONVERT_VALUE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 21                         je      0x50 <_JIT_ENTRY+0x50>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 34                         jle     0x74 <_JIT_ENTRY+0x74>
// 40: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000042:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a: 85 c0                         testl   %eax, %eax
// 4c: 79 56                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 4e: eb 6b                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 50: 49 8b 36                      movq    (%r14), %rsi
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _JIT_OPARG
// 5d: 0f b7 d0                      movzwl  %ax, %edx
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _PyEval_FormatExcUnbound
// 6a: 4c 89 ff                      movq    %r15, %rdi
// 6d: ff d0                         callq   *%rax
// 6f: e9 ec 00 00 00                jmp     0x160 <_JIT_ENTRY+0x160>
// 74: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000076:  R_X86_64_64  .rodata.str1.1
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _Py_NegativeRefcount
// 88: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 49 8b 04 24                   movq    (%r12), %rax
// 96: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000098:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 17                         js      0xbb <_JIT_ENTRY+0xbb>
// a4: ff d5                         callq   *%rbp
// a6: 49 ff 0c 24                   decq    (%r12)
// aa: 75 0f                         jne     0xbb <_JIT_ENTRY+0xbb>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_Dealloc
// b6: 4c 89 e7                      movq    %r12, %rdi
// b9: ff d0                         callq   *%rax
// bb: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c1:  R_X86_64_64  _JIT_OPARG
// c9: 0f b7 c0                      movzwl  %ax, %eax
// cc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ce:  R_X86_64_64  .rodata
// d6: 4c 89 e7                      movq    %r12, %rdi
// d9: ff 14 c1                      callq   *(%rcx,%rax,8)
// dc: 49 89 c5                      movq    %rax, %r13
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 06                         jle     0xee <_JIT_ENTRY+0xee>
// e8: 85 c0                         testl   %eax, %eax
// ea: 79 28                         jns     0x114 <_JIT_ENTRY+0x114>
// ec: eb 2e                         jmp     0x11c <_JIT_ENTRY+0x11c>
// ee: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f0:  R_X86_64_64  .rodata.str1.1
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _Py_NegativeRefcount
// 102: be 98 0c 00 00                movl    $0xc98, %esi            # imm = 0xC98
// 107: 4c 89 e2                      movq    %r12, %rdx
// 10a: ff d0                         callq   *%rax
// 10c: 49 8b 04 24                   movq    (%r12), %rax
// 110: 85 c0                         testl   %eax, %eax
// 112: 78 08                         js      0x11c <_JIT_ENTRY+0x11c>
// 114: ff d5                         callq   *%rbp
// 116: 49 ff 0c 24                   decq    (%r12)
// 11a: 74 2c                         je      0x148 <_JIT_ENTRY+0x148>
// 11c: 4d 85 ed                      testq   %r13, %r13
// 11f: 74 3b                         je      0x15c <_JIT_ENTRY+0x15c>
// 121: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _JIT_CONTINUE
// 12f: 4c 89 f7                      movq    %r14, %rdi
// 132: 48 89 de                      movq    %rbx, %rsi
// 135: 4c 89 fa                      movq    %r15, %rdx
// 138: 48 83 c4 08                   addq    $0x8, %rsp
// 13c: 5b                            popq    %rbx
// 13d: 41 5c                         popq    %r12
// 13f: 41 5d                         popq    %r13
// 141: 41 5e                         popq    %r14
// 143: 41 5f                         popq    %r15
// 145: 5d                            popq    %rbp
// 146: ff e0                         jmpq    *%rax
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _Py_Dealloc
// 152: 4c 89 e7                      movq    %r12, %rdi
// 155: ff d0                         callq   *%rax
// 157: 4d 85 ed                      testq   %r13, %r13
// 15a: 75 c5                         jne     0x121 <_JIT_ENTRY+0x121>
// 15c: 48 83 c3 f8                   addq    $-0x8, %rbx
// 160: 4c 29 f3                      subq    %r14, %rbx
// 163: 48 83 c3 b8                   addq    $-0x48, %rbx
// 167: 48 c1 eb 03                   shrq    $0x3, %rbx
// 16b: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 16f: 31 c0                         xorl    %eax, %eax
// 171: 48 83 c4 08                   addq    $0x8, %rsp
// 175: 5b                            popq    %rbx
// 176: 41 5c                         popq    %r12
// 178: 41 5d                         popq    %r13
// 17a: 41 5e                         popq    %r14
// 17c: 41 5f                         popq    %r15
// 17e: 5d                            popq    %rbp
// 17f: c3                            retq
// 180: 
static const unsigned char _DELETE_DEREFplus_CONVERT_VALUE_code_body[385] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x21, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x34, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x56, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xec, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0x14, 0xc1, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x2e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2c, 0x4d, 0x85, 0xed, 0x74, 0x3b, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0xc5, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_CONVERT_VALUE_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_CONVERT_VALUE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_CONVERT_VALUE_data_holes[4] = {
    {0x41, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Str, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Repr, 0x0},
    {0x51, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_ASCII, 0x0},
};

// _DELETE_DEREFplus_COPY
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_COPY.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 1a                         je      0x46 <_JIT_ENTRY+0x46>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 45                         jle     0x82 <_JIT_ENTRY+0x82>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 67                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 41: e9 83 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 4c 29 f3                      subq    %r14, %rbx
// 68: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 70: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 74: 31 c0                         xorl    %eax, %eax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 21                         js      0xc9 <_JIT_ENTRY+0xc9>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 75 0f                         jne     0xc9 <_JIT_ENTRY+0xc9>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_Dealloc
// c4: 4c 89 e7                      movq    %r12, %rdi
// c7: ff d0                         callq   *%rax
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _JIT_OPARG
// d3: 0f b7 c0                      movzwl  %ax, %eax
// d6: 48 c1 e0 03                   shlq    $0x3, %rax
// da: 48 89 d9                      movq    %rbx, %rcx
// dd: 48 29 c1                      subq    %rax, %rcx
// e0: 4c 8b 21                      movq    (%rcx), %r12
// e3: 41 8b 04 24                   movl    (%r12), %eax
// e7: ff c0                         incl    %eax
// e9: 74 10                         je      0xfb <_JIT_ENTRY+0xfb>
// eb: 41 89 04 24                   movl    %eax, (%r12)
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _Py_INCREF_IncRefTotal
// f9: ff d0                         callq   *%rax
// fb: 4c 89 23                      movq    %r12, (%rbx)
// fe: 48 83 c3 08                   addq    $0x8, %rbx
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _JIT_CONTINUE
// 10c: 4c 89 f7                      movq    %r14, %rdi
// 10f: 48 89 de                      movq    %rbx, %rsi
// 112: 4c 89 fa                      movq    %r15, %rdx
// 115: 48 83 c4 08                   addq    $0x8, %rsp
// 119: 5b                            popq    %rbx
// 11a: 41 5c                         popq    %r12
// 11c: 41 5e                         popq    %r14
// 11e: 41 5f                         popq    %r15
// 120: ff e0                         jmpq    *%rax
// 122: 
static const unsigned char _DELETE_DEREFplus_COPY_code_body[291] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x03, 0x48, 0x89, 0xd9, 0x48, 0x29, 0xc1, 0x4c, 0x8b, 0x21, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_COPY_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_COPY_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_COPY_data_holes[1];

// _DELETE_DEREFplus_COPY_FREE_VARS
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_COPY_FREE_VARS.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 29: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2d: 4d 85 e4                      testq   %r12, %r12
// 30: 0f 84 da 00 00 00             je      0x110 <_JIT_ENTRY+0x110>
// 36: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3e: 49 8b 04 24                   movq    (%r12), %rax
// 42: 48 85 c0                      testq   %rax, %rax
// 45: 7f 22                         jg      0x69 <_JIT_ENTRY+0x69>
// 47: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000049:  R_X86_64_64  .rodata.str1.1
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _Py_NegativeRefcount
// 5b: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 60: 4c 89 e2                      movq    %r12, %rdx
// 63: ff d0                         callq   *%rax
// 65: 49 8b 04 24                   movq    (%r12), %rax
// 69: 4c 89 7c 24 08                movq    %r15, 0x8(%rsp)
// 6e: 4c 89 34 24                   movq    %r14, (%rsp)
// 72: 48 89 5c 24 10                movq    %rbx, 0x10(%rsp)
// 77: 85 c0                         testl   %eax, %eax
// 79: 78 16                         js      0x91 <_JIT_ENTRY+0x91>
// 7b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 85: ff d0                         callq   *%rax
// 87: 49 ff 0c 24                   decq    (%r12)
// 8b: 0f 84 be 00 00 00             je      0x14f <_JIT_ENTRY+0x14f>
// 91: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000093:  R_X86_64_64  _JIT_OPARG
// 9b: 66 85 c0                      testw   %ax, %ax
// 9e: 0f 84 cd 00 00 00             je      0x171 <_JIT_ENTRY+0x171>
// a4: 48 8b 14 24                   movq    (%rsp), %rdx
// a8: 48 8b 42 10                   movq    0x10(%rdx), %rax
// ac: 4c 8b 60 48                   movq    0x48(%rax), %r12
// b0: 48 8b 02                      movq    (%rdx), %rax
// b3: 8b 40 48                      movl    0x48(%rax), %eax
// b6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b8:  R_X86_64_64  _JIT_OPARG
// c0: 0f b7 c9                      movzwl  %cx, %ecx
// c3: 29 c8                         subl    %ecx, %eax
// c5: 83 f9 02                      cmpl    $0x2, %ecx
// c8: 41 bd 01 00 00 00             movl    $0x1, %r13d
// ce: 44 0f 43 e9                   cmovael %ecx, %r13d
// d2: 48 98                         cltq
// d4: 48 8d 2c c2                   leaq    (%rdx,%rax,8), %rbp
// d8: 48 83 c5 48                   addq    $0x48, %rbp
// dc: 45 31 ff                      xorl    %r15d, %r15d
// df: 48 bb 00 00 00 00 00 00 00 00 movabsq $0x0, %rbx
// 00000000000000e1:  R_X86_64_64  _Py_INCREF_IncRefTotal
// e9: eb 12                         jmp     0xfd <_JIT_ENTRY+0xfd>
// eb: 0f 1f 44 00 00                nopl    (%rax,%rax)
// f0: 4e 89 74 fd 00                movq    %r14, (%rbp,%r15,8)
// f5: 49 ff c7                      incq    %r15
// f8: 4d 39 fd                      cmpq    %r15, %r13
// fb: 74 74                         je      0x171 <_JIT_ENTRY+0x171>
// fd: 4f 8b 74 fc 18                movq    0x18(%r12,%r15,8), %r14
// 102: 41 8b 06                      movl    (%r14), %eax
// 105: ff c0                         incl    %eax
// 107: 74 e7                         je      0xf0 <_JIT_ENTRY+0xf0>
// 109: 41 89 06                      movl    %eax, (%r14)
// 10c: ff d3                         callq   *%rbx
// 10e: eb e0                         jmp     0xf0 <_JIT_ENTRY+0xf0>
// 110: 49 8b 36                      movq    (%r14), %rsi
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _JIT_OPARG
// 11d: 0f b7 d0                      movzwl  %ax, %edx
// 120: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000122:  R_X86_64_64  _PyEval_FormatExcUnbound
// 12a: 4c 89 ff                      movq    %r15, %rdi
// 12d: ff d0                         callq   *%rax
// 12f: 4c 29 f3                      subq    %r14, %rbx
// 132: 48 83 c3 b8                   addq    $-0x48, %rbx
// 136: 48 c1 eb 03                   shrq    $0x3, %rbx
// 13a: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 13e: 31 c0                         xorl    %eax, %eax
// 140: 48 83 c4 18                   addq    $0x18, %rsp
// 144: 5b                            popq    %rbx
// 145: 41 5c                         popq    %r12
// 147: 41 5d                         popq    %r13
// 149: 41 5e                         popq    %r14
// 14b: 41 5f                         popq    %r15
// 14d: 5d                            popq    %rbp
// 14e: c3                            retq
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_Dealloc
// 159: 4c 89 e7                      movq    %r12, %rdi
// 15c: ff d0                         callq   *%rax
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _JIT_OPARG
// 168: 66 85 c0                      testw   %ax, %ax
// 16b: 0f 85 33 ff ff ff             jne     0xa4 <_JIT_ENTRY+0xa4>
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _JIT_CONTINUE
// 17b: 48 8b 3c 24                   movq    (%rsp), %rdi
// 17f: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
// 184: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 189: 48 83 c4 18                   addq    $0x18, %rsp
// 18d: 5b                            popq    %rbx
// 18e: 41 5c                         popq    %r12
// 190: 41 5d                         popq    %r13
// 192: 41 5e                         popq    %r14
// 194: 41 5f                         popq    %r15
// 196: 5d                            popq    %rbp
// 197: ff e0                         jmpq    *%rax
// 199: 
static const unsigned char _DELETE_DEREFplus_COPY_FREE_VARS_code_body[410] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xda, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x89, 0x7c, 0x24, 0x08, 0x4c, 0x89, 0x34, 0x24, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xbe, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x84, 0xcd, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x8b, 0x42, 0x10, 0x4c, 0x8b, 0x60, 0x48, 0x48, 0x8b, 0x02, 0x8b, 0x40, 0x48, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x29, 0xc8, 0x83, 0xf9, 0x02, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x43, 0xe9, 0x48, 0x98, 0x48, 0x8d, 0x2c, 0xc2, 0x48, 0x83, 0xc5, 0x48, 0x45, 0x31, 0xff, 0x48, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x12, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x4e, 0x89, 0x74, 0xfd, 0x00, 0x49, 0xff, 0xc7, 0x4d, 0x39, 0xfd, 0x74, 0x74, 0x4f, 0x8b, 0x74, 0xfc, 0x18, 0x41, 0x8b, 0x06, 0xff, 0xc0, 0x74, 0xe7, 0x41, 0x89, 0x06, 0xff, 0xd3, 0xeb, 0xe0, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x85, 0xc0, 0x0f, 0x85, 0x33, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c, 0x24, 0x48, 0x8b, 0x74, 0x24, 0x10, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_COPY_FREE_VARS_code_holes[13] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x93, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_COPY_FREE_VARS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_COPY_FREE_VARS_data_holes[1];

// _DELETE_DEREFplus_DELETE_ATTR
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_DELETE_ATTR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 21                         je      0x50 <_JIT_ENTRY+0x50>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 34                         jle     0x74 <_JIT_ENTRY+0x74>
// 40: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000042:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a: 85 c0                         testl   %eax, %eax
// 4c: 79 56                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 4e: eb 6b                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 50: 49 8b 36                      movq    (%r14), %rsi
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _JIT_OPARG
// 5d: 0f b7 d0                      movzwl  %ax, %edx
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _PyEval_FormatExcUnbound
// 6a: 4c 89 ff                      movq    %r15, %rdi
// 6d: ff d0                         callq   *%rax
// 6f: e9 d0 00 00 00                jmp     0x144 <_JIT_ENTRY+0x144>
// 74: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000076:  R_X86_64_64  .rodata.str1.1
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _Py_NegativeRefcount
// 88: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 49 8b 04 24                   movq    (%r12), %rax
// 96: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000098:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 17                         js      0xbb <_JIT_ENTRY+0xbb>
// a4: ff d1                         callq   *%rcx
// a6: 49 ff 0c 24                   decq    (%r12)
// aa: 75 0f                         jne     0xbb <_JIT_ENTRY+0xbb>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_Dealloc
// b6: 4c 89 e7                      movq    %r12, %rdi
// b9: ff d0                         callq   *%rax
// bb: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// bf: 49 8b 06                      movq    (%r14), %rax
// c2: 48 8b 40 20                   movq    0x20(%rax), %rax
// c6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c8:  R_X86_64_64  _JIT_OPARG
// d0: 0f b7 c9                      movzwl  %cx, %ecx
// d3: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000da:  R_X86_64_64  PyObject_DelAttr
// e2: 4c 89 e7                      movq    %r12, %rdi
// e5: ff d0                         callq   *%rax
// e7: 89 c5                         movl    %eax, %ebp
// e9: 49 8b 04 24                   movq    (%r12), %rax
// ed: 48 85 c0                      testq   %rax, %rax
// f0: 7e 0a                         jle     0xfc <_JIT_ENTRY+0xfc>
// f2: 4c 8d 6b f8                   leaq    -0x8(%rbx), %r13
// f6: 85 c0                         testl   %eax, %eax
// f8: 79 2c                         jns     0x126 <_JIT_ENTRY+0x126>
// fa: eb 3c                         jmp     0x138 <_JIT_ENTRY+0x138>
// fc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000fe:  R_X86_64_64  .rodata.str1.1
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_NegativeRefcount
// 110: be d2 03 00 00                movl    $0x3d2, %esi            # imm = 0x3D2
// 115: 4c 89 e2                      movq    %r12, %rdx
// 118: ff d0                         callq   *%rax
// 11a: 49 8b 04 24                   movq    (%r12), %rax
// 11e: 4c 8d 6b f8                   leaq    -0x8(%rbx), %r13
// 122: 85 c0                         testl   %eax, %eax
// 124: 78 12                         js      0x138 <_JIT_ENTRY+0x138>
// 126: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000128:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 130: ff d0                         callq   *%rax
// 132: 49 ff 0c 24                   decq    (%r12)
// 136: 74 2c                         je      0x164 <_JIT_ENTRY+0x164>
// 138: 85 ed                         testl   %ebp, %ebp
// 13a: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 13e: 74 3b                         je      0x17b <_JIT_ENTRY+0x17b>
// 140: 48 83 c3 f8                   addq    $-0x8, %rbx
// 144: 4c 29 f3                      subq    %r14, %rbx
// 147: 48 83 c3 b8                   addq    $-0x48, %rbx
// 14b: 48 c1 eb 03                   shrq    $0x3, %rbx
// 14f: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 153: 31 c0                         xorl    %eax, %eax
// 155: 48 83 c4 08                   addq    $0x8, %rsp
// 159: 5b                            popq    %rbx
// 15a: 41 5c                         popq    %r12
// 15c: 41 5d                         popq    %r13
// 15e: 41 5e                         popq    %r14
// 160: 41 5f                         popq    %r15
// 162: 5d                            popq    %rbp
// 163: c3                            retq
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_Dealloc
// 16e: 4c 89 e7                      movq    %r12, %rdi
// 171: ff d0                         callq   *%rax
// 173: 85 ed                         testl   %ebp, %ebp
// 175: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 179: 75 c5                         jne     0x140 <_JIT_ENTRY+0x140>
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  _JIT_CONTINUE
// 185: 4c 89 f7                      movq    %r14, %rdi
// 188: 48 89 de                      movq    %rbx, %rsi
// 18b: 4c 89 fa                      movq    %r15, %rdx
// 18e: 48 83 c4 08                   addq    $0x8, %rsp
// 192: 5b                            popq    %rbx
// 193: 41 5c                         popq    %r12
// 195: 41 5d                         popq    %r13
// 197: 41 5e                         popq    %r14
// 199: 41 5f                         popq    %r15
// 19b: 5d                            popq    %rbp
// 19c: ff e0                         jmpq    *%rax
// 19e: 
static const unsigned char _DELETE_DEREFplus_DELETE_ATTR_code_body[415] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x21, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x34, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x56, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xd0, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x4c, 0x8d, 0x6b, 0xf8, 0x85, 0xc0, 0x79, 0x2c, 0xeb, 0x3c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd2, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x6b, 0xf8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2c, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x74, 0x3b, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x75, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_DELETE_ATTR_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelAttr, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_DELETE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_DELETE_ATTR_data_holes[1];

// _DELETE_DEREFplus_DELETE_DEREF
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_DELETE_DEREF.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 0f 84 93 00 00 00             je      0xc3 <_JIT_ENTRY+0xc3>
// 30: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 06                         jle     0x47 <_JIT_ENTRY+0x47>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 28                         jns     0x6d <_JIT_ENTRY+0x6d>
// 45: eb 47                         jmp     0x8e <_JIT_ENTRY+0x8e>
// 47: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000049:  R_X86_64_64  .rodata.str1.1
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _Py_NegativeRefcount
// 5b: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 60: 4c 89 e2                      movq    %r12, %rdx
// 63: ff d0                         callq   *%rax
// 65: 49 8b 04 24                   movq    (%r12), %rax
// 69: 85 c0                         testl   %eax, %eax
// 6b: 78 21                         js      0x8e <_JIT_ENTRY+0x8e>
// 6d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 77: ff d0                         callq   *%rax
// 79: 49 ff 0c 24                   decq    (%r12)
// 7d: 75 0f                         jne     0x8e <_JIT_ENTRY+0x8e>
// 7f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000081:  R_X86_64_64  _Py_Dealloc
// 89: 4c 89 e7                      movq    %r12, %rdi
// 8c: ff d0                         callq   *%rax
// 8e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000090:  R_X86_64_64  _JIT_OPARG
// 98: 0f b7 c0                      movzwl  %ax, %eax
// 9b: 49 8b 44 c6 48                movq    0x48(%r14,%rax,8), %rax
// a0: 4c 8b 60 10                   movq    0x10(%rax), %r12
// a4: 4d 85 e4                      testq   %r12, %r12
// a7: 74 1a                         je      0xc3 <_JIT_ENTRY+0xc3>
// a9: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// b1: 49 8b 04 24                   movq    (%r12), %rax
// b5: 48 85 c0                      testq   %rax, %rax
// b8: 7e 45                         jle     0xff <_JIT_ENTRY+0xff>
// ba: 85 c0                         testl   %eax, %eax
// bc: 79 67                         jns     0x125 <_JIT_ENTRY+0x125>
// be: e9 83 00 00 00                jmp     0x146 <_JIT_ENTRY+0x146>
// c3: 49 8b 36                      movq    (%r14), %rsi
// c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c8:  R_X86_64_64  _JIT_OPARG
// d0: 0f b7 d0                      movzwl  %ax, %edx
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  _PyEval_FormatExcUnbound
// dd: 4c 89 ff                      movq    %r15, %rdi
// e0: ff d0                         callq   *%rax
// e2: 4c 29 f3                      subq    %r14, %rbx
// e5: 48 83 c3 b8                   addq    $-0x48, %rbx
// e9: 48 c1 eb 03                   shrq    $0x3, %rbx
// ed: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// f1: 31 c0                         xorl    %eax, %eax
// f3: 48 83 c4 08                   addq    $0x8, %rsp
// f7: 5b                            popq    %rbx
// f8: 41 5c                         popq    %r12
// fa: 41 5e                         popq    %r14
// fc: 41 5f                         popq    %r15
// fe: c3                            retq
// ff: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000101:  R_X86_64_64  .rodata.str1.1
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_NegativeRefcount
// 113: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 118: 4c 89 e2                      movq    %r12, %rdx
// 11b: ff d0                         callq   *%rax
// 11d: 49 8b 04 24                   movq    (%r12), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 21                         js      0x146 <_JIT_ENTRY+0x146>
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 12f: ff d0                         callq   *%rax
// 131: 49 ff 0c 24                   decq    (%r12)
// 135: 75 0f                         jne     0x146 <_JIT_ENTRY+0x146>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_Dealloc
// 141: 4c 89 e7                      movq    %r12, %rdi
// 144: ff d0                         callq   *%rax
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _JIT_CONTINUE
// 150: 4c 89 f7                      movq    %r14, %rdi
// 153: 48 89 de                      movq    %rbx, %rsi
// 156: 4c 89 fa                      movq    %r15, %rdx
// 159: 48 83 c4 08                   addq    $0x8, %rsp
// 15d: 5b                            popq    %rbx
// 15e: 41 5c                         popq    %r12
// 160: 41 5e                         popq    %r14
// 162: 41 5f                         popq    %r15
// 164: ff e0                         jmpq    *%rax
// 166: 
static const unsigned char _DELETE_DEREFplus_DELETE_DEREF_code_body[359] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x93, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x44, 0xc6, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_DELETE_DEREF_code_holes[14] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_DELETE_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_DELETE_DEREF_data_holes[1];

// _DELETE_DEREFplus_DELETE_FAST
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_DELETE_FAST.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 2a                         jle     0x67 <_JIT_ENTRY+0x67>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 4c                         jns     0x8d <_JIT_ENTRY+0x8d>
// 41: eb 6b                         jmp     0xae <_JIT_ENTRY+0xae>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: e9 d7 00 00 00                jmp     0x13e <_JIT_ENTRY+0x13e>
// 67: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000069:  R_X86_64_64  .rodata.str1.1
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_NegativeRefcount
// 7b: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 80: 4c 89 e2                      movq    %r12, %rdx
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 85 c0                         testl   %eax, %eax
// 8b: 78 21                         js      0xae <_JIT_ENTRY+0xae>
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: ff d0                         callq   *%rax
// 99: 49 ff 0c 24                   decq    (%r12)
// 9d: 75 0f                         jne     0xae <_JIT_ENTRY+0xae>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _Py_Dealloc
// a9: 4c 89 e7                      movq    %r12, %rdi
// ac: ff d0                         callq   *%rax
// ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b0:  R_X86_64_64  _JIT_OPARG
// b8: 0f b7 c0                      movzwl  %ax, %eax
// bb: 4d 8b 64 c6 48                movq    0x48(%r14,%rax,8), %r12
// c0: 4d 85 e4                      testq   %r12, %r12
// c3: 74 2c                         je      0xf1 <_JIT_ENTRY+0xf1>
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  _JIT_OPARG
// cf: 0f b7 c0                      movzwl  %ax, %eax
// d2: 49 c7 44 c6 48 00 00 00 00    movq    $0x0, 0x48(%r14,%rax,8)
// db: 49 8b 04 24                   movq    (%r12), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 77                         jle     0x15b <_JIT_ENTRY+0x15b>
// e4: 85 c0                         testl   %eax, %eax
// e6: 0f 89 95 00 00 00             jns     0x181 <_JIT_ENTRY+0x181>
// ec: e9 b1 00 00 00                jmp     0x1a2 <_JIT_ENTRY+0x1a2>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  PyExc_UnboundLocalError
// fb: 4c 8b 20                      movq    (%rax), %r12
// fe: 49 8b 06                      movq    (%r14), %rax
// 101: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _JIT_OPARG
// 10f: 0f b7 f0                      movzwl  %ax, %esi
// 112: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000114:  R_X86_64_64  PyTuple_GetItem
// 11c: ff d0                         callq   *%rax
// 11e: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000120:  R_X86_64_64  .rodata.str1.1+0x39
// 128: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000012a:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 132: 4c 89 ff                      movq    %r15, %rdi
// 135: 4c 89 e6                      movq    %r12, %rsi
// 138: 48 89 c1                      movq    %rax, %rcx
// 13b: 41 ff d0                      callq   *%r8
// 13e: 4c 29 f3                      subq    %r14, %rbx
// 141: 48 83 c3 b8                   addq    $-0x48, %rbx
// 145: 48 c1 eb 03                   shrq    $0x3, %rbx
// 149: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 14d: 31 c0                         xorl    %eax, %eax
// 14f: 48 83 c4 08                   addq    $0x8, %rsp
// 153: 5b                            popq    %rbx
// 154: 41 5c                         popq    %r12
// 156: 41 5e                         popq    %r14
// 158: 41 5f                         popq    %r15
// 15a: c3                            retq
// 15b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015d:  R_X86_64_64  .rodata.str1.1+0x83
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_NegativeRefcount
// 16f: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 174: 4c 89 e2                      movq    %r12, %rdx
// 177: ff d0                         callq   *%rax
// 179: 49 8b 04 24                   movq    (%r12), %rax
// 17d: 85 c0                         testl   %eax, %eax
// 17f: 78 21                         js      0x1a2 <_JIT_ENTRY+0x1a2>
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18b: ff d0                         callq   *%rax
// 18d: 49 ff 0c 24                   decq    (%r12)
// 191: 75 0f                         jne     0x1a2 <_JIT_ENTRY+0x1a2>
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _Py_Dealloc
// 19d: 4c 89 e7                      movq    %r12, %rdi
// 1a0: ff d0                         callq   *%rax
// 1a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a4:  R_X86_64_64  _JIT_CONTINUE
// 1ac: 4c 89 f7                      movq    %r14, %rdi
// 1af: 48 89 de                      movq    %rbx, %rsi
// 1b2: 4c 89 fa                      movq    %r15, %rdx
// 1b5: 48 83 c4 08                   addq    $0x8, %rsp
// 1b9: 5b                            popq    %rbx
// 1ba: 41 5c                         popq    %r12
// 1bc: 41 5e                         popq    %r14
// 1be: 41 5f                         popq    %r15
// 1c0: ff e0                         jmpq    *%rax
// 1c2: 
static const unsigned char _DELETE_DEREFplus_DELETE_FAST_code_body[451] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xd7, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x64, 0xc6, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0xc7, 0x44, 0xc6, 0x48, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x77, 0x85, 0xc0, 0x0f, 0x89, 0x95, 0x00, 0x00, 0x00, 0xe9, 0xb1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x20, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_DELETE_FAST_code_holes[20] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x83},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot access local variable '%s' where it is not associated with a value\x00/home/jglass/Documents/cpython/Include/object.h\x00"
// b3: 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_DELETE_FAST_data_body[185] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_DELETE_FAST_data_holes[1];

// _DELETE_DEREFplus_DELETE_GLOBAL
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_DELETE_GLOBAL.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 2a                         jle     0x67 <_JIT_ENTRY+0x67>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 4c                         jns     0x8d <_JIT_ENTRY+0x8d>
// 41: eb 6b                         jmp     0xae <_JIT_ENTRY+0xae>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: e9 c0 00 00 00                jmp     0x127 <_JIT_ENTRY+0x127>
// 67: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000069:  R_X86_64_64  .rodata.str1.1
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_NegativeRefcount
// 7b: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 80: 4c 89 e2                      movq    %r12, %rdx
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 85 c0                         testl   %eax, %eax
// 8b: 78 21                         js      0xae <_JIT_ENTRY+0xae>
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: ff d0                         callq   *%rax
// 99: 49 ff 0c 24                   decq    (%r12)
// 9d: 75 0f                         jne     0xae <_JIT_ENTRY+0xae>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _Py_Dealloc
// a9: 4c 89 e7                      movq    %r12, %rdi
// ac: ff d0                         callq   *%rax
// ae: 49 8b 06                      movq    (%r14), %rax
// b1: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// b5: 48 8b 40 20                   movq    0x20(%rax), %rax
// b9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bb:  R_X86_64_64  _JIT_OPARG
// c3: 0f b7 c9                      movzwl  %cx, %ecx
// c6: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  PyDict_DelItem
// d5: 4c 89 e6                      movq    %r12, %rsi
// d8: ff d0                         callq   *%rax
// da: 85 c0                         testl   %eax, %eax
// dc: 74 66                         je      0x144 <_JIT_ENTRY+0x144>
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  PyExc_KeyError
// e8: 48 8b 30                      movq    (%rax), %rsi
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _PyErr_ExceptionMatches
// f5: 4c 89 ff                      movq    %r15, %rdi
// f8: ff d0                         callq   *%rax
// fa: 85 c0                         testl   %eax, %eax
// fc: 74 29                         je      0x127 <_JIT_ENTRY+0x127>
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  PyExc_NameError
// 108: 48 8b 30                      movq    (%rax), %rsi
// 10b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000010d:  R_X86_64_64  .rodata.str1.1+0x39
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 11f: 4c 89 ff                      movq    %r15, %rdi
// 122: 4c 89 e1                      movq    %r12, %rcx
// 125: ff d0                         callq   *%rax
// 127: 4c 29 f3                      subq    %r14, %rbx
// 12a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 12e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 132: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 136: 31 c0                         xorl    %eax, %eax
// 138: 48 83 c4 08                   addq    $0x8, %rsp
// 13c: 5b                            popq    %rbx
// 13d: 41 5c                         popq    %r12
// 13f: 41 5e                         popq    %r14
// 141: 41 5f                         popq    %r15
// 143: c3                            retq
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _JIT_CONTINUE
// 14e: 4c 89 f7                      movq    %r14, %rdi
// 151: 48 89 de                      movq    %rbx, %rsi
// 154: 4c 89 fa                      movq    %r15, %rdx
// 157: 48 83 c4 08                   addq    $0x8, %rsp
// 15b: 5b                            popq    %rbx
// 15c: 41 5c                         popq    %r12
// 15e: 41 5e                         popq    %r14
// 160: 41 5f                         popq    %r15
// 162: ff e0                         jmpq    *%rax
// 164: 
static const unsigned char _DELETE_DEREFplus_DELETE_GLOBAL_code_body[357] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xc0, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x66, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_DELETE_GLOBAL_code_holes[16] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_DelItem, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_KeyError, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _DELETE_DEREFplus_DELETE_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_DELETE_GLOBAL_data_holes[1];

// _DELETE_DEREFplus_DELETE_NAME
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_DELETE_NAME.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 2a                         jle     0x67 <_JIT_ENTRY+0x67>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 4c                         jns     0x8d <_JIT_ENTRY+0x8d>
// 41: eb 6b                         jmp     0xae <_JIT_ENTRY+0xae>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: e9 d3 00 00 00                jmp     0x13a <_JIT_ENTRY+0x13a>
// 67: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000069:  R_X86_64_64  .rodata.str1.1
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_NegativeRefcount
// 7b: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 80: 4c 89 e2                      movq    %r12, %rdx
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 85 c0                         testl   %eax, %eax
// 8b: 78 21                         js      0xae <_JIT_ENTRY+0xae>
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: ff d0                         callq   *%rax
// 99: 49 ff 0c 24                   decq    (%r12)
// 9d: 75 0f                         jne     0xae <_JIT_ENTRY+0xae>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _Py_Dealloc
// a9: 4c 89 e7                      movq    %r12, %rdi
// ac: ff d0                         callq   *%rax
// ae: 49 8b 06                      movq    (%r14), %rax
// b1: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// b5: 48 8b 40 20                   movq    0x20(%rax), %rax
// b9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000bb:  R_X86_64_64  _JIT_OPARG
// c3: 0f b7 c9                      movzwl  %cx, %ecx
// c6: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// cb: 48 85 ff                      testq   %rdi, %rdi
// ce: 74 3e                         je      0x10e <_JIT_ENTRY+0x10e>
// d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d2:  R_X86_64_64  PyObject_DelItem
// da: 4c 89 e6                      movq    %r12, %rsi
// dd: ff d0                         callq   *%rax
// df: 85 c0                         testl   %eax, %eax
// e1: 74 74                         je      0x157 <_JIT_ENTRY+0x157>
// e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e5:  R_X86_64_64  PyExc_NameError
// ed: 48 8b 30                      movq    (%rax), %rsi
// f0: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1+0x54
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 104: 4c 89 ff                      movq    %r15, %rdi
// 107: 4c 89 e1                      movq    %r12, %rcx
// 10a: ff d0                         callq   *%rax
// 10c: eb 2c                         jmp     0x13a <_JIT_ENTRY+0x13a>
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  PyExc_SystemError
// 118: 48 8b 30                      movq    (%rax), %rsi
// 11b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000011d:  R_X86_64_64  .rodata.str1.1+0x39
// 125: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000127:  R_X86_64_64  _PyErr_Format
// 12f: 4c 89 ff                      movq    %r15, %rdi
// 132: 4c 89 e1                      movq    %r12, %rcx
// 135: 31 c0                         xorl    %eax, %eax
// 137: 41 ff d0                      callq   *%r8
// 13a: 4c 29 f3                      subq    %r14, %rbx
// 13d: 48 83 c3 b8                   addq    $-0x48, %rbx
// 141: 48 c1 eb 03                   shrq    $0x3, %rbx
// 145: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 149: 31 c0                         xorl    %eax, %eax
// 14b: 48 83 c4 08                   addq    $0x8, %rsp
// 14f: 5b                            popq    %rbx
// 150: 41 5c                         popq    %r12
// 152: 41 5e                         popq    %r14
// 154: 41 5f                         popq    %r15
// 156: c3                            retq
// 157: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000159:  R_X86_64_64  _JIT_CONTINUE
// 161: 4c 89 f7                      movq    %r14, %rdi
// 164: 48 89 de                      movq    %rbx, %rsi
// 167: 4c 89 fa                      movq    %r15, %rdx
// 16a: 48 83 c4 08                   addq    $0x8, %rsp
// 16e: 5b                            popq    %rbx
// 16f: 41 5c                         popq    %r12
// 171: 41 5e                         popq    %r14
// 173: 41 5f                         popq    %r15
// 175: ff e0                         jmpq    *%rax
// 177: 
static const unsigned char _DELETE_DEREFplus_DELETE_NAME_code_body[376] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xd3, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x48, 0x85, 0xff, 0x74, 0x3e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x74, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xeb, 0x2c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_DELETE_NAME_code_holes[17] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x54},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x159, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals when deleting %R\x00name '%.200s' is not defined\x00"
// 71: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_DELETE_NAME_data_body[121] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_DELETE_NAME_data_holes[1];

// _DELETE_DEREFplus_DELETE_SUBSCR
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_DELETE_SUBSCR.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 2a                         jle     0x6a <_JIT_ENTRY+0x6a>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 4c                         jns     0x90 <_JIT_ENTRY+0x90>
// 44: eb 6b                         jmp     0xb1 <_JIT_ENTRY+0xb1>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: e9 1d 01 00 00                jmp     0x187 <_JIT_ENTRY+0x187>
// 6a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006c:  R_X86_64_64  .rodata.str1.1
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _Py_NegativeRefcount
// 7e: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 83: 4c 89 e2                      movq    %r12, %rdx
// 86: ff d0                         callq   *%rax
// 88: 49 8b 04 24                   movq    (%r12), %rax
// 8c: 85 c0                         testl   %eax, %eax
// 8e: 78 21                         js      0xb1 <_JIT_ENTRY+0xb1>
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9a: ff d0                         callq   *%rax
// 9c: 49 ff 0c 24                   decq    (%r12)
// a0: 75 0f                         jne     0xb1 <_JIT_ENTRY+0xb1>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_Dealloc
// ac: 4c 89 e7                      movq    %r12, %rdi
// af: ff d0                         callq   *%rax
// b1: 4c 8b 6b f0                   movq    -0x10(%rbx), %r13
// b5: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  PyObject_DelItem
// c3: 4c 89 ef                      movq    %r13, %rdi
// c6: 4c 89 e6                      movq    %r12, %rsi
// c9: ff d0                         callq   *%rax
// cb: 89 c5                         movl    %eax, %ebp
// cd: 49 8b 45 00                   movq    (%r13), %rax
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 7e 06                         jle     0xdc <_JIT_ENTRY+0xdc>
// d6: 85 c0                         testl   %eax, %eax
// d8: 79 28                         jns     0x102 <_JIT_ENTRY+0x102>
// da: eb 38                         jmp     0x114 <_JIT_ENTRY+0x114>
// dc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000de:  R_X86_64_64  .rodata.str1.1
// e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e8:  R_X86_64_64  _Py_NegativeRefcount
// f0: be 70 02 00 00                movl    $0x270, %esi            # imm = 0x270
// f5: 4c 89 ea                      movq    %r13, %rdx
// f8: ff d0                         callq   *%rax
// fa: 49 8b 45 00                   movq    (%r13), %rax
// fe: 85 c0                         testl   %eax, %eax
// 100: 78 12                         js      0x114 <_JIT_ENTRY+0x114>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10c: ff d0                         callq   *%rax
// 10e: 49 ff 4d 00                   decq    (%r13)
// 112: 74 13                         je      0x127 <_JIT_ENTRY+0x127>
// 114: 49 8b 04 24                   movq    (%r12), %rax
// 118: 48 85 c0                      testq   %rax, %rax
// 11b: 7e 22                         jle     0x13f <_JIT_ENTRY+0x13f>
// 11d: 4c 8d 6b f0                   leaq    -0x10(%rbx), %r13
// 121: 85 c0                         testl   %eax, %eax
// 123: 79 44                         jns     0x169 <_JIT_ENTRY+0x169>
// 125: eb 54                         jmp     0x17b <_JIT_ENTRY+0x17b>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_Dealloc
// 131: 4c 89 ef                      movq    %r13, %rdi
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f de                         jg      0x11d <_JIT_ENTRY+0x11d>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be 71 02 00 00                movl    $0x271, %esi            # imm = 0x271
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 4c 8d 6b f0                   leaq    -0x10(%rbx), %r13
// 165: 85 c0                         testl   %eax, %eax
// 167: 78 12                         js      0x17b <_JIT_ENTRY+0x17b>
// 169: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 173: ff d0                         callq   *%rax
// 175: 49 ff 0c 24                   decq    (%r12)
// 179: 74 2c                         je      0x1a7 <_JIT_ENTRY+0x1a7>
// 17b: 85 ed                         testl   %ebp, %ebp
// 17d: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 181: 74 3b                         je      0x1be <_JIT_ENTRY+0x1be>
// 183: 48 83 c3 f0                   addq    $-0x10, %rbx
// 187: 4c 29 f3                      subq    %r14, %rbx
// 18a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 18e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 192: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 196: 31 c0                         xorl    %eax, %eax
// 198: 48 83 c4 08                   addq    $0x8, %rsp
// 19c: 5b                            popq    %rbx
// 19d: 41 5c                         popq    %r12
// 19f: 41 5d                         popq    %r13
// 1a1: 41 5e                         popq    %r14
// 1a3: 41 5f                         popq    %r15
// 1a5: 5d                            popq    %rbp
// 1a6: c3                            retq
// 1a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a9:  R_X86_64_64  _Py_Dealloc
// 1b1: 4c 89 e7                      movq    %r12, %rdi
// 1b4: ff d0                         callq   *%rax
// 1b6: 85 ed                         testl   %ebp, %ebp
// 1b8: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 1bc: 75 c5                         jne     0x183 <_JIT_ENTRY+0x183>
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  _JIT_CONTINUE
// 1c8: 4c 89 f7                      movq    %r14, %rdi
// 1cb: 48 89 de                      movq    %rbx, %rsi
// 1ce: 4c 89 fa                      movq    %r15, %rdx
// 1d1: 48 83 c4 08                   addq    $0x8, %rsp
// 1d5: 5b                            popq    %rbx
// 1d6: 41 5c                         popq    %r12
// 1d8: 41 5d                         popq    %r13
// 1da: 41 5e                         popq    %r14
// 1dc: 41 5f                         popq    %r15
// 1de: 5d                            popq    %rbp
// 1df: ff e0                         jmpq    *%rax
// 1e1: 
static const unsigned char _DELETE_DEREFplus_DELETE_SUBSCR_code_body[482] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x1d, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x70, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x6b, 0xf0, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x6b, 0xf0, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2c, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x74, 0x3b, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x75, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_DELETE_SUBSCR_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_DelItem, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_DELETE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_DELETE_SUBSCR_data_holes[1];

// _DELETE_DEREFplus_DICT_MERGE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_DICT_MERGE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d6                      movq    %rdx, %r14
// c: 49 89 f5                      movq    %rsi, %r13
// f: 48 89 fb                      movq    %rdi, %rbx
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 78 10                   movq    0x10(%rax), %r15
// 28: 4d 85 ff                      testq   %r15, %r15
// 2b: 74 16                         je      0x43 <_JIT_ENTRY+0x43>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 07                      movq    (%r15), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 2a                         jle     0x67 <_JIT_ENTRY+0x67>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 4b                         jns     0x8c <_JIT_ENTRY+0x8c>
// 41: eb 69                         jmp     0xac <_JIT_ENTRY+0xac>
// 43: 48 8b 33                      movq    (%rbx), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 f7                      movq    %r14, %rdi
// 60: ff d0                         callq   *%rax
// 62: e9 73 01 00 00                jmp     0x1da <_JIT_ENTRY+0x1da>
// 67: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000069:  R_X86_64_64  .rodata.str1.1
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_NegativeRefcount
// 7b: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 80: 4c 89 fa                      movq    %r15, %rdx
// 83: ff d0                         callq   *%rax
// 85: 49 8b 07                      movq    (%r15), %rax
// 88: 85 c0                         testl   %eax, %eax
// 8a: 78 20                         js      0xac <_JIT_ENTRY+0xac>
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 96: ff d0                         callq   *%rax
// 98: 49 ff 0f                      decq    (%r15)
// 9b: 75 0f                         jne     0xac <_JIT_ENTRY+0xac>
// 9d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009f:  R_X86_64_64  _Py_Dealloc
// a7: 4c 89 ff                      movq    %r15, %rdi
// aa: ff d0                         callq   *%rax
// ac: 4d 8d 7d f8                   leaq    -0x8(%r13), %r15
// b0: 4d 8b 65 f8                   movq    -0x8(%r13), %r12
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _JIT_OPARG
// be: 0f b7 c0                      movzwl  %ax, %eax
// c1: b9 fc ff ff ff                movl    $0xfffffffc, %ecx       # imm = 0xFFFFFFFC
// c6: 29 c1                         subl    %eax, %ecx
// c8: f7 d0                         notl    %eax
// ca: 48 98                         cltq
// cc: 49 8b 7c c5 00                movq    (%r13,%rax,8), %rdi
// d1: 48 63 c1                      movslq  %ecx, %rax
// d4: 4d 8b 6c c5 00                movq    (%r13,%rax,8), %r13
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _PyDict_MergeEx
// e3: 4c 89 e6                      movq    %r12, %rsi
// e6: ba 02 00 00 00                movl    $0x2, %edx
// eb: ff d0                         callq   *%rax
// ed: 85 c0                         testl   %eax, %eax
// ef: 78 0f                         js      0x100 <_JIT_ENTRY+0x100>
// f1: 49 8b 04 24                   movq    (%r12), %rax
// f5: 48 85 c0                      testq   %rax, %rax
// f8: 7e 31                         jle     0x12b <_JIT_ENTRY+0x12b>
// fa: 85 c0                         testl   %eax, %eax
// fc: 79 53                         jns     0x151 <_JIT_ENTRY+0x151>
// fe: eb 72                         jmp     0x172 <_JIT_ENTRY+0x172>
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _PyEval_FormatKwargsError
// 10a: 4c 89 f7                      movq    %r14, %rdi
// 10d: 4c 89 ee                      movq    %r13, %rsi
// 110: 4c 89 e2                      movq    %r12, %rdx
// 113: ff d0                         callq   *%rax
// 115: 49 8b 04 24                   movq    (%r12), %rax
// 119: 48 85 c0                      testq   %rax, %rax
// 11c: 7e 72                         jle     0x190 <_JIT_ENTRY+0x190>
// 11e: 85 c0                         testl   %eax, %eax
// 120: 0f 88 b1 00 00 00             js      0x1d7 <_JIT_ENTRY+0x1d7>
// 126: e9 8b 00 00 00                jmp     0x1b6 <_JIT_ENTRY+0x1b6>
// 12b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012d:  R_X86_64_64  .rodata.str1.1
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _Py_NegativeRefcount
// 13f: be d6 05 00 00                movl    $0x5d6, %esi            # imm = 0x5D6
// 144: 4c 89 e2                      movq    %r12, %rdx
// 147: ff d0                         callq   *%rax
// 149: 49 8b 04 24                   movq    (%r12), %rax
// 14d: 85 c0                         testl   %eax, %eax
// 14f: 78 21                         js      0x172 <_JIT_ENTRY+0x172>
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 15b: ff d0                         callq   *%rax
// 15d: 49 ff 0c 24                   decq    (%r12)
// 161: 75 0f                         jne     0x172 <_JIT_ENTRY+0x172>
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 4c 89 e7                      movq    %r12, %rdi
// 170: ff d0                         callq   *%rax
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _JIT_CONTINUE
// 17c: 48 89 df                      movq    %rbx, %rdi
// 17f: 4c 89 fe                      movq    %r15, %rsi
// 182: 4c 89 f2                      movq    %r14, %rdx
// 185: 5b                            popq    %rbx
// 186: 41 5c                         popq    %r12
// 188: 41 5d                         popq    %r13
// 18a: 41 5e                         popq    %r14
// 18c: 41 5f                         popq    %r15
// 18e: ff e0                         jmpq    *%rax
// 190: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000192:  R_X86_64_64  .rodata.str1.1
// 19a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019c:  R_X86_64_64  _Py_NegativeRefcount
// 1a4: be d3 05 00 00                movl    $0x5d3, %esi            # imm = 0x5D3
// 1a9: 4c 89 e2                      movq    %r12, %rdx
// 1ac: ff d0                         callq   *%rax
// 1ae: 49 8b 04 24                   movq    (%r12), %rax
// 1b2: 85 c0                         testl   %eax, %eax
// 1b4: 78 21                         js      0x1d7 <_JIT_ENTRY+0x1d7>
// 1b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 ff 0c 24                   decq    (%r12)
// 1c6: 75 0f                         jne     0x1d7 <_JIT_ENTRY+0x1d7>
// 1c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ca:  R_X86_64_64  _Py_Dealloc
// 1d2: 4c 89 e7                      movq    %r12, %rdi
// 1d5: ff d0                         callq   *%rax
// 1d7: 4d 89 fd                      movq    %r15, %r13
// 1da: 49 29 dd                      subq    %rbx, %r13
// 1dd: 49 83 c5 b8                   addq    $-0x48, %r13
// 1e1: 49 c1 ed 03                   shrq    $0x3, %r13
// 1e5: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 1e9: 31 c0                         xorl    %eax, %eax
// 1eb: 5b                            popq    %rbx
// 1ec: 41 5c                         popq    %r12
// 1ee: 41 5d                         popq    %r13
// 1f0: 41 5e                         popq    %r14
// 1f2: 41 5f                         popq    %r15
// 1f4: c3                            retq
// 1f5: 
static const unsigned char _DELETE_DEREFplus_DICT_MERGE_code_body[502] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x78, 0x10, 0x4d, 0x85, 0xff, 0x74, 0x16, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4b, 0xeb, 0x69, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xe9, 0x73, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x8d, 0x7d, 0xf8, 0x4d, 0x8b, 0x65, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfc, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc5, 0x00, 0x48, 0x63, 0xc1, 0x4d, 0x8b, 0x6c, 0xc5, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xba, 0x02, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x31, 0x85, 0xc0, 0x79, 0x53, 0xeb, 0x72, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x72, 0x85, 0xc0, 0x0f, 0x88, 0xb1, 0x00, 0x00, 0x00, 0xe9, 0x8b, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd6, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd3, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_DICT_MERGE_code_holes[20] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_MergeEx, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatKwargsError, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x19c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_DICT_MERGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_DICT_MERGE_data_holes[1];

// _DELETE_DEREFplus_DICT_UPDATE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_DICT_UPDATE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d6                      movq    %rdx, %r14
// c: 49 89 f5                      movq    %rsi, %r13
// f: 48 89 fb                      movq    %rdi, %rbx
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 78 10                   movq    0x10(%rax), %r15
// 28: 4d 85 ff                      testq   %r15, %r15
// 2b: 74 16                         je      0x43 <_JIT_ENTRY+0x43>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 07                      movq    (%r15), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 2a                         jle     0x67 <_JIT_ENTRY+0x67>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 4b                         jns     0x8c <_JIT_ENTRY+0x8c>
// 41: eb 69                         jmp     0xac <_JIT_ENTRY+0xac>
// 43: 48 8b 33                      movq    (%rbx), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 f7                      movq    %r14, %rdi
// 60: ff d0                         callq   *%rax
// 62: e9 a5 01 00 00                jmp     0x20c <_JIT_ENTRY+0x20c>
// 67: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000069:  R_X86_64_64  .rodata.str1.1
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_NegativeRefcount
// 7b: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 80: 4c 89 fa                      movq    %r15, %rdx
// 83: ff d0                         callq   *%rax
// 85: 49 8b 07                      movq    (%r15), %rax
// 88: 85 c0                         testl   %eax, %eax
// 8a: 78 20                         js      0xac <_JIT_ENTRY+0xac>
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 96: ff d0                         callq   *%rax
// 98: 49 ff 0f                      decq    (%r15)
// 9b: 75 0f                         jne     0xac <_JIT_ENTRY+0xac>
// 9d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009f:  R_X86_64_64  _Py_Dealloc
// a7: 4c 89 ff                      movq    %r15, %rdi
// aa: ff d0                         callq   *%rax
// ac: 4d 8d 7d f8                   leaq    -0x8(%r13), %r15
// b0: 4d 8b 65 f8                   movq    -0x8(%r13), %r12
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _JIT_OPARG
// be: f7 d0                         notl    %eax
// c0: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// c5: 48 98                         cltq
// c7: 49 8b 7c c5 00                movq    (%r13,%rax,8), %rdi
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  PyDict_Update
// d6: 4c 89 e6                      movq    %r12, %rsi
// d9: ff d0                         callq   *%rax
// db: 85 c0                         testl   %eax, %eax
// dd: 78 16                         js      0xf5 <_JIT_ENTRY+0xf5>
// df: 49 8b 04 24                   movq    (%r12), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7e 75                         jle     0x15d <_JIT_ENTRY+0x15d>
// e8: 85 c0                         testl   %eax, %eax
// ea: 0f 89 93 00 00 00             jns     0x183 <_JIT_ENTRY+0x183>
// f0: e9 af 00 00 00                jmp     0x1a4 <_JIT_ENTRY+0x1a4>
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  PyExc_AttributeError
// ff: 48 8b 30                      movq    (%rax), %rsi
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _PyErr_ExceptionMatches
// 10c: 4c 89 f7                      movq    %r14, %rdi
// 10f: ff d0                         callq   *%rax
// 111: 85 c0                         testl   %eax, %eax
// 113: 74 32                         je      0x147 <_JIT_ENTRY+0x147>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  PyExc_TypeError
// 11f: 48 8b 30                      movq    (%rax), %rsi
// 122: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 127: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 12b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000012d:  R_X86_64_64  .rodata.str1.1+0x39
// 135: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000137:  R_X86_64_64  _PyErr_Format
// 13f: 4c 89 f7                      movq    %r14, %rdi
// 142: 31 c0                         xorl    %eax, %eax
// 144: 41 ff d0                      callq   *%r8
// 147: 49 8b 04 24                   movq    (%r12), %rax
// 14b: 48 85 c0                      testq   %rax, %rax
// 14e: 7e 72                         jle     0x1c2 <_JIT_ENTRY+0x1c2>
// 150: 85 c0                         testl   %eax, %eax
// 152: 0f 88 b1 00 00 00             js      0x209 <_JIT_ENTRY+0x209>
// 158: e9 8b 00 00 00                jmp     0x1e8 <_JIT_ENTRY+0x1e8>
// 15d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015f:  R_X86_64_64  .rodata.str1.1
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_NegativeRefcount
// 171: be c4 05 00 00                movl    $0x5c4, %esi            # imm = 0x5C4
// 176: 4c 89 e2                      movq    %r12, %rdx
// 179: ff d0                         callq   *%rax
// 17b: 49 8b 04 24                   movq    (%r12), %rax
// 17f: 85 c0                         testl   %eax, %eax
// 181: 78 21                         js      0x1a4 <_JIT_ENTRY+0x1a4>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18d: ff d0                         callq   *%rax
// 18f: 49 ff 0c 24                   decq    (%r12)
// 193: 75 0f                         jne     0x1a4 <_JIT_ENTRY+0x1a4>
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_Dealloc
// 19f: 4c 89 e7                      movq    %r12, %rdi
// 1a2: ff d0                         callq   *%rax
// 1a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a6:  R_X86_64_64  _JIT_CONTINUE
// 1ae: 48 89 df                      movq    %rbx, %rdi
// 1b1: 4c 89 fe                      movq    %r15, %rsi
// 1b4: 4c 89 f2                      movq    %r14, %rdx
// 1b7: 5b                            popq    %rbx
// 1b8: 41 5c                         popq    %r12
// 1ba: 41 5d                         popq    %r13
// 1bc: 41 5e                         popq    %r14
// 1be: 41 5f                         popq    %r15
// 1c0: ff e0                         jmpq    *%rax
// 1c2: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001c4:  R_X86_64_64  .rodata.str1.1
// 1cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ce:  R_X86_64_64  _Py_NegativeRefcount
// 1d6: be c1 05 00 00                movl    $0x5c1, %esi            # imm = 0x5C1
// 1db: 4c 89 e2                      movq    %r12, %rdx
// 1de: ff d0                         callq   *%rax
// 1e0: 49 8b 04 24                   movq    (%r12), %rax
// 1e4: 85 c0                         testl   %eax, %eax
// 1e6: 78 21                         js      0x209 <_JIT_ENTRY+0x209>
// 1e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ea:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f2: ff d0                         callq   *%rax
// 1f4: 49 ff 0c 24                   decq    (%r12)
// 1f8: 75 0f                         jne     0x209 <_JIT_ENTRY+0x209>
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _Py_Dealloc
// 204: 4c 89 e7                      movq    %r12, %rdi
// 207: ff d0                         callq   *%rax
// 209: 4d 89 fd                      movq    %r15, %r13
// 20c: 49 29 dd                      subq    %rbx, %r13
// 20f: 49 83 c5 b8                   addq    $-0x48, %r13
// 213: 49 c1 ed 03                   shrq    $0x3, %r13
// 217: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 21b: 31 c0                         xorl    %eax, %eax
// 21d: 5b                            popq    %rbx
// 21e: 41 5c                         popq    %r12
// 220: 41 5d                         popq    %r13
// 222: 41 5e                         popq    %r14
// 224: 41 5f                         popq    %r15
// 226: c3                            retq
// 227: 
static const unsigned char _DELETE_DEREFplus_DICT_UPDATE_code_body[552] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x78, 0x10, 0x4d, 0x85, 0xff, 0x74, 0x16, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4b, 0xeb, 0x69, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xe9, 0xa5, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x8d, 0x7d, 0xf8, 0x4d, 0x8b, 0x65, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc5, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x16, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x75, 0x85, 0xc0, 0x0f, 0x89, 0x93, 0x00, 0x00, 0x00, 0xe9, 0xaf, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x32, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x72, 0x85, 0xc0, 0x0f, 0x88, 0xb1, 0x00, 0x00, 0x00, 0xe9, 0x8b, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_DICT_UPDATE_code_holes[24] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Update, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AttributeError, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1c4, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1ea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'%.200s' object is not a mapping\x00"
// 5a: 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_DICT_UPDATE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_DICT_UPDATE_data_holes[1];

// _DELETE_DEREFplus_END_SEND
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_END_SEND.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 24                         je      0x53 <_JIT_ENTRY+0x53>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 52                         jle     0x92 <_JIT_ENTRY+0x92>
// 40: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000042:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a: 85 c0                         testl   %eax, %eax
// 4c: 79 74                         jns     0xc2 <_JIT_ENTRY+0xc2>
// 4e: e9 86 00 00 00                jmp     0xd9 <_JIT_ENTRY+0xd9>
// 53: 48 8b 33                      movq    (%rbx), %rsi
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _JIT_OPARG
// 60: 0f b7 d0                      movzwl  %ax, %edx
// 63: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000065:  R_X86_64_64  _PyEval_FormatExcUnbound
// 6d: 4c 89 ff                      movq    %r15, %rdi
// 70: ff d0                         callq   *%rax
// 72: 49 29 de                      subq    %rbx, %r14
// 75: 49 83 c6 b8                   addq    $-0x48, %r14
// 79: 49 c1 ee 03                   shrq    $0x3, %r14
// 7d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 81: 31 c0                         xorl    %eax, %eax
// 83: 48 83 c4 08                   addq    $0x8, %rsp
// 87: 5b                            popq    %rbx
// 88: 41 5c                         popq    %r12
// 8a: 41 5d                         popq    %r13
// 8c: 41 5e                         popq    %r14
// 8e: 41 5f                         popq    %r15
// 90: 5d                            popq    %rbp
// 91: c3                            retq
// 92: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000094:  R_X86_64_64  .rodata.str1.1
// 9c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009e:  R_X86_64_64  _Py_NegativeRefcount
// a6: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// ab: 4c 89 e2                      movq    %r12, %rdx
// ae: ff d0                         callq   *%rax
// b0: 49 8b 04 24                   movq    (%r12), %rax
// b4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// be: 85 c0                         testl   %eax, %eax
// c0: 78 17                         js      0xd9 <_JIT_ENTRY+0xd9>
// c2: ff d1                         callq   *%rcx
// c4: 49 ff 0c 24                   decq    (%r12)
// c8: 75 0f                         jne     0xd9 <_JIT_ENTRY+0xd9>
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_Dealloc
// d4: 4c 89 e7                      movq    %r12, %rdi
// d7: ff d0                         callq   *%rax
// d9: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// dd: 49 8b 6e f8                   movq    -0x8(%r14), %rbp
// e1: 49 8b 04 24                   movq    (%r12), %rax
// e5: 48 85 c0                      testq   %rax, %rax
// e8: 7e 0a                         jle     0xf4 <_JIT_ENTRY+0xf4>
// ea: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// ee: 85 c0                         testl   %eax, %eax
// f0: 79 2c                         jns     0x11e <_JIT_ENTRY+0x11e>
// f2: eb 4b                         jmp     0x13f <_JIT_ENTRY+0x13f>
// f4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f6:  R_X86_64_64  .rodata.str1.1
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_NegativeRefcount
// 108: be 66 00 00 00                movl    $0x66, %esi
// 10d: 4c 89 e2                      movq    %r12, %rdx
// 110: ff d0                         callq   *%rax
// 112: 49 8b 04 24                   movq    (%r12), %rax
// 116: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 78 21                         js      0x13f <_JIT_ENTRY+0x13f>
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 128: ff d0                         callq   *%rax
// 12a: 49 ff 0c 24                   decq    (%r12)
// 12e: 75 0f                         jne     0x13f <_JIT_ENTRY+0x13f>
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_Dealloc
// 13a: 4c 89 e7                      movq    %r12, %rdi
// 13d: ff d0                         callq   *%rax
// 13f: 49 89 6e f0                   movq    %rbp, -0x10(%r14)
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _JIT_CONTINUE
// 14d: 48 89 df                      movq    %rbx, %rdi
// 150: 4c 89 ee                      movq    %r13, %rsi
// 153: 4c 89 fa                      movq    %r15, %rdx
// 156: 48 83 c4 08                   addq    $0x8, %rsp
// 15a: 5b                            popq    %rbx
// 15b: 41 5c                         popq    %r12
// 15d: 41 5d                         popq    %r13
// 15f: 41 5e                         popq    %r14
// 161: 41 5f                         popq    %r15
// 163: 5d                            popq    %rbp
// 164: ff e0                         jmpq    *%rax
// 166: 
static const unsigned char _DELETE_DEREFplus_END_SEND_code_body[359] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x24, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x86, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8b, 0x66, 0xf0, 0x49, 0x8b, 0x6e, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x4d, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x79, 0x2c, 0xeb, 0x4b, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x66, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_END_SEND_code_holes[14] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x65, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_END_SEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_END_SEND_data_holes[1];

// _DELETE_DEREFplus_EXIT_INIT_CHECK
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_EXIT_INIT_CHECK.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 27                         jle     0x64 <_JIT_ENTRY+0x64>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 49                         jns     0x8a <_JIT_ENTRY+0x8a>
// 41: eb 59                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: eb 78                         jmp     0xdc <_JIT_ENTRY+0xdc>
// 64: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000066:  R_X86_64_64  .rodata.str1.1
// 6e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000070:  R_X86_64_64  _Py_NegativeRefcount
// 78: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 7d: 4c 89 e2                      movq    %r12, %rdx
// 80: ff d0                         callq   *%rax
// 82: 49 8b 04 24                   movq    (%r12), %rax
// 86: 85 c0                         testl   %eax, %eax
// 88: 78 12                         js      0x9c <_JIT_ENTRY+0x9c>
// 8a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 94: ff d0                         callq   *%rax
// 96: 49 ff 0c 24                   decq    (%r12)
// 9a: 74 5d                         je      0xf9 <_JIT_ENTRY+0xf9>
// 9c: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// a0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000a2:  R_X86_64_64  _Py_NoneStruct
// aa: 48 39 c8                      cmpq    %rcx, %rax
// ad: 74 6c                         je      0x11b <_JIT_ENTRY+0x11b>
// af: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b1:  R_X86_64_64  PyExc_TypeError
// b9: 48 8b 39                      movq    (%rcx), %rdi
// bc: 48 8b 40 08                   movq    0x8(%rax), %rax
// c0: 48 8b 50 18                   movq    0x18(%rax), %rdx
// c4: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000c6:  R_X86_64_64  .rodata.str1.1+0x39
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  PyErr_Format
// d8: 31 c0                         xorl    %eax, %eax
// da: ff d1                         callq   *%rcx
// dc: 4c 29 f3                      subq    %r14, %rbx
// df: 48 83 c3 b8                   addq    $-0x48, %rbx
// e3: 48 c1 eb 03                   shrq    $0x3, %rbx
// e7: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// eb: 31 c0                         xorl    %eax, %eax
// ed: 48 83 c4 08                   addq    $0x8, %rsp
// f1: 5b                            popq    %rbx
// f2: 41 5c                         popq    %r12
// f4: 41 5e                         popq    %r14
// f6: 41 5f                         popq    %r15
// f8: c3                            retq
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _Py_Dealloc
// 103: 4c 89 e7                      movq    %r12, %rdi
// 106: ff d0                         callq   *%rax
// 108: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 10c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010e:  R_X86_64_64  _Py_NoneStruct
// 116: 48 39 c8                      cmpq    %rcx, %rax
// 119: 75 94                         jne     0xaf <_JIT_ENTRY+0xaf>
// 11b: 48 83 c3 f8                   addq    $-0x8, %rbx
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _JIT_CONTINUE
// 129: 4c 89 f7                      movq    %r14, %rdi
// 12c: 48 89 de                      movq    %rbx, %rsi
// 12f: 4c 89 fa                      movq    %r15, %rdx
// 132: 48 83 c4 08                   addq    $0x8, %rsp
// 136: 5b                            popq    %rbx
// 137: 41 5c                         popq    %r12
// 139: 41 5e                         popq    %r14
// 13b: 41 5f                         popq    %r15
// 13d: ff e0                         jmpq    *%rax
// 13f: 
static const unsigned char _DELETE_DEREFplus_EXIT_INIT_CHECK_code_body[320] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x27, 0x85, 0xc0, 0x79, 0x49, 0xeb, 0x59, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x78, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x5d, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x74, 0x6c, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x39, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x75, 0x94, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_EXIT_INIT_CHECK_code_holes[14] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x70, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0xb1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0xc6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyErr_Format, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__init__() should return None, not '%.200s'\x00"
// 65: 00 00 00
static const unsigned char _DELETE_DEREFplus_EXIT_INIT_CHECK_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x5f, 0x28, 0x29, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x4e, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_EXIT_INIT_CHECK_data_holes[1];

// _DELETE_DEREFplus_EXIT_TRACE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_EXIT_TRACE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 53                            pushq   %rbx
// 5: 49 89 f6                      movq    %rsi, %r14
// 8: 48 89 fb                      movq    %rdi, %rbx
// b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000000d:  R_X86_64_64  _JIT_OPARG
// 15: 0f b7 c0                      movzwl  %ax, %eax
// 18: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 1d: 4c 8b 78 10                   movq    0x10(%rax), %r15
// 21: 4d 85 ff                      testq   %r15, %r15
// 24: 74 16                         je      0x3c <_JIT_ENTRY+0x3c>
// 26: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 2e: 49 8b 07                      movq    (%r15), %rax
// 31: 48 85 c0                      testq   %rax, %rax
// 34: 7e 3e                         jle     0x74 <_JIT_ENTRY+0x74>
// 36: 85 c0                         testl   %eax, %eax
// 38: 79 5f                         jns     0x99 <_JIT_ENTRY+0x99>
// 3a: eb 7d                         jmp     0xb9 <_JIT_ENTRY+0xb9>
// 3c: 48 8b 33                      movq    (%rbx), %rsi
// 3f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000041:  R_X86_64_64  _JIT_OPARG
// 49: 0f b7 c0                      movzwl  %ax, %eax
// 4c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000004e:  R_X86_64_64  _PyEval_FormatExcUnbound
// 56: 48 89 d7                      movq    %rdx, %rdi
// 59: 89 c2                         movl    %eax, %edx
// 5b: ff d1                         callq   *%rcx
// 5d: 49 29 de                      subq    %rbx, %r14
// 60: 49 83 c6 b8                   addq    $-0x48, %r14
// 64: 49 c1 ee 03                   shrq    $0x3, %r14
// 68: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 6c: 31 c0                         xorl    %eax, %eax
// 6e: 5b                            popq    %rbx
// 6f: 41 5e                         popq    %r14
// 71: 41 5f                         popq    %r15
// 73: c3                            retq
// 74: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000076:  R_X86_64_64  .rodata.str1.1
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _Py_NegativeRefcount
// 88: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8d: 4c 89 fa                      movq    %r15, %rdx
// 90: ff d0                         callq   *%rax
// 92: 49 8b 07                      movq    (%r15), %rax
// 95: 85 c0                         testl   %eax, %eax
// 97: 78 20                         js      0xb9 <_JIT_ENTRY+0xb9>
// 99: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a3: ff d0                         callq   *%rax
// a5: 49 ff 0f                      decq    (%r15)
// a8: 75 0f                         jne     0xb9 <_JIT_ENTRY+0xb9>
// aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ac:  R_X86_64_64  _Py_Dealloc
// b4: 4c 89 ff                      movq    %r15, %rdi
// b7: ff d0                         callq   *%rax
// b9: 49 29 de                      subq    %rbx, %r14
// bc: 49 83 c6 b8                   addq    $-0x48, %r14
// c0: 49 c1 ee 03                   shrq    $0x3, %r14
// c4: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// c8: 48 8b 03                      movq    (%rbx), %rax
// cb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cd:  R_X86_64_64  _JIT_TARGET
// d5: 89 c9                         movl    %ecx, %ecx
// d7: 48 8d 84 48 c8 00 00 00       leaq    0xc8(%rax,%rcx,2), %rax
// df: 5b                            popq    %rbx
// e0: 41 5e                         popq    %r14
// e2: 41 5f                         popq    %r15
// e4: c3                            retq
// e5: 
static const unsigned char _DELETE_DEREFplus_EXIT_TRACE_code_body[230] = {0x41, 0x57, 0x41, 0x56, 0x53, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x78, 0x10, 0x4d, 0x85, 0xff, 0x74, 0x16, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x3e, 0x85, 0xc0, 0x79, 0x5f, 0xeb, 0x7d, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd7, 0x89, 0xc2, 0xff, 0xd1, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x84, 0x48, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_EXIT_TRACE_code_holes[9] = {
    {0xd, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x41, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_EXIT_TRACE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_EXIT_TRACE_data_holes[1];

// _DELETE_DEREFplus_FORMAT_SIMPLE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_FORMAT_SIMPLE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 28: 4d 85 e4                      testq   %r12, %r12
// 2b: 74 17                         je      0x44 <_JIT_ENTRY+0x44>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 2a                         jle     0x68 <_JIT_ENTRY+0x68>
// 3e: 85 c0                         testl   %eax, %eax
// 40: 79 4c                         jns     0x8e <_JIT_ENTRY+0x8e>
// 42: eb 60                         jmp     0xa4 <_JIT_ENTRY+0xa4>
// 44: 49 8b 36                      movq    (%r14), %rsi
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _JIT_OPARG
// 51: 0f b7 d0                      movzwl  %ax, %edx
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5e: 4c 89 ff                      movq    %r15, %rdi
// 61: ff d0                         callq   *%rax
// 63: e9 1b 01 00 00                jmp     0x183 <_JIT_ENTRY+0x183>
// 68: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006a:  R_X86_64_64  .rodata.str1.1
// 72: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000074:  R_X86_64_64  _Py_NegativeRefcount
// 7c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 81: 4c 89 e2                      movq    %r12, %rdx
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 85 c0                         testl   %eax, %eax
// 8c: 78 16                         js      0xa4 <_JIT_ENTRY+0xa4>
// 8e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000090:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 98: ff d0                         callq   *%rax
// 9a: 49 ff 0c 24                   decq    (%r12)
// 9e: 0f 84 9a 00 00 00             je      0x13e <_JIT_ENTRY+0x13e>
// a4: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  PyUnicode_Type
// b2: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// b7: 74 63                         je      0x11c <_JIT_ENTRY+0x11c>
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  PyObject_Format
// c3: 4c 89 e7                      movq    %r12, %rdi
// c6: 31 f6                         xorl    %esi, %esi
// c8: ff d0                         callq   *%rax
// ca: 49 89 c5                      movq    %rax, %r13
// cd: 49 8b 04 24                   movq    (%r12), %rax
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 7e 06                         jle     0xdc <_JIT_ENTRY+0xdc>
// d6: 85 c0                         testl   %eax, %eax
// d8: 79 28                         jns     0x102 <_JIT_ENTRY+0x102>
// da: eb 38                         jmp     0x114 <_JIT_ENTRY+0x114>
// dc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000de:  R_X86_64_64  .rodata.str1.1
// e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e8:  R_X86_64_64  _Py_NegativeRefcount
// f0: be a6 0c 00 00                movl    $0xca6, %esi            # imm = 0xCA6
// f5: 4c 89 e2                      movq    %r12, %rdx
// f8: ff d0                         callq   *%rax
// fa: 49 8b 04 24                   movq    (%r12), %rax
// fe: 85 c0                         testl   %eax, %eax
// 100: 78 12                         js      0x114 <_JIT_ENTRY+0x114>
// 102: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000104:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10c: ff d0                         callq   *%rax
// 10e: 49 ff 0c 24                   decq    (%r12)
// 112: 74 54                         je      0x168 <_JIT_ENTRY+0x168>
// 114: 4d 89 ec                      movq    %r13, %r12
// 117: 4d 85 ed                      testq   %r13, %r13
// 11a: 74 63                         je      0x17f <_JIT_ENTRY+0x17f>
// 11c: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 120: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000122:  R_X86_64_64  _JIT_CONTINUE
// 12a: 4c 89 f7                      movq    %r14, %rdi
// 12d: 48 89 de                      movq    %rbx, %rsi
// 130: 4c 89 fa                      movq    %r15, %rdx
// 133: 5b                            popq    %rbx
// 134: 41 5c                         popq    %r12
// 136: 41 5d                         popq    %r13
// 138: 41 5e                         popq    %r14
// 13a: 41 5f                         popq    %r15
// 13c: ff e0                         jmpq    *%rax
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_Dealloc
// 148: 4c 89 e7                      movq    %r12, %rdi
// 14b: ff d0                         callq   *%rax
// 14d: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 151: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000153:  R_X86_64_64  PyUnicode_Type
// 15b: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 160: 0f 85 53 ff ff ff             jne     0xb9 <_JIT_ENTRY+0xb9>
// 166: eb b4                         jmp     0x11c <_JIT_ENTRY+0x11c>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_Dealloc
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: ff d0                         callq   *%rax
// 177: 4d 89 ec                      movq    %r13, %r12
// 17a: 4d 85 ed                      testq   %r13, %r13
// 17d: 75 9d                         jne     0x11c <_JIT_ENTRY+0x11c>
// 17f: 48 83 c3 f8                   addq    $-0x8, %rbx
// 183: 4c 29 f3                      subq    %r14, %rbx
// 186: 48 83 c3 b8                   addq    $-0x48, %rbx
// 18a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 18e: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 192: 31 c0                         xorl    %eax, %eax
// 194: 5b                            popq    %rbx
// 195: 41 5c                         popq    %r12
// 197: 41 5d                         popq    %r13
// 199: 41 5e                         popq    %r14
// 19b: 41 5f                         popq    %r15
// 19d: c3                            retq
// 19e: 
static const unsigned char _DELETE_DEREFplus_FORMAT_SIMPLE_code_body[415] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x60, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x1b, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x9a, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xf6, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa6, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x54, 0x4d, 0x89, 0xec, 0x4d, 0x85, 0xed, 0x74, 0x63, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x53, 0xff, 0xff, 0xff, 0xeb, 0xb4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0x4d, 0x85, 0xed, 0x75, 0x9d, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_FORMAT_SIMPLE_code_holes[16] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x74, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_FORMAT_SIMPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_FORMAT_SIMPLE_data_holes[1];

// _DELETE_DEREFplus_FORMAT_WITH_SPEC
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_FORMAT_WITH_SPEC.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 2a                         jle     0x6a <_JIT_ENTRY+0x6a>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 4c                         jns     0x90 <_JIT_ENTRY+0x90>
// 44: eb 6b                         jmp     0xb1 <_JIT_ENTRY+0xb1>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: e9 58 01 00 00                jmp     0x1c2 <_JIT_ENTRY+0x1c2>
// 6a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006c:  R_X86_64_64  .rodata.str1.1
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _Py_NegativeRefcount
// 7e: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 83: 4c 89 e2                      movq    %r12, %rdx
// 86: ff d0                         callq   *%rax
// 88: 49 8b 04 24                   movq    (%r12), %rax
// 8c: 85 c0                         testl   %eax, %eax
// 8e: 78 21                         js      0xb1 <_JIT_ENTRY+0xb1>
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9a: ff d0                         callq   *%rax
// 9c: 49 ff 0c 24                   decq    (%r12)
// a0: 75 0f                         jne     0xb1 <_JIT_ENTRY+0xb1>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_Dealloc
// ac: 4c 89 e7                      movq    %r12, %rdi
// af: ff d0                         callq   *%rax
// b1: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// b5: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  PyObject_Format
// c3: 48 89 ef                      movq    %rbp, %rdi
// c6: 4c 89 ee                      movq    %r13, %rsi
// c9: ff d0                         callq   *%rax
// cb: 49 89 c4                      movq    %rax, %r12
// ce: 48 8b 45 00                   movq    (%rbp), %rax
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 7e 06                         jle     0xdd <_JIT_ENTRY+0xdd>
// d7: 85 c0                         testl   %eax, %eax
// d9: 79 28                         jns     0x103 <_JIT_ENTRY+0x103>
// db: eb 38                         jmp     0x115 <_JIT_ENTRY+0x115>
// dd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000df:  R_X86_64_64  .rodata.str1.1
// e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e9:  R_X86_64_64  _Py_NegativeRefcount
// f1: be b7 0c 00 00                movl    $0xcb7, %esi            # imm = 0xCB7
// f6: 48 89 ea                      movq    %rbp, %rdx
// f9: ff d0                         callq   *%rax
// fb: 48 8b 45 00                   movq    (%rbp), %rax
// ff: 85 c0                         testl   %eax, %eax
// 101: 78 12                         js      0x115 <_JIT_ENTRY+0x115>
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 10d: ff d0                         callq   *%rax
// 10f: 48 ff 4d 00                   decq    (%rbp)
// 113: 74 0f                         je      0x124 <_JIT_ENTRY+0x124>
// 115: 49 8b 45 00                   movq    (%r13), %rax
// 119: 48 85 c0                      testq   %rax, %rax
// 11c: 7e 1e                         jle     0x13c <_JIT_ENTRY+0x13c>
// 11e: 85 c0                         testl   %eax, %eax
// 120: 79 40                         jns     0x162 <_JIT_ENTRY+0x162>
// 122: eb 50                         jmp     0x174 <_JIT_ENTRY+0x174>
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  _Py_Dealloc
// 12e: 48 89 ef                      movq    %rbp, %rdi
// 131: ff d0                         callq   *%rax
// 133: 49 8b 45 00                   movq    (%r13), %rax
// 137: 48 85 c0                      testq   %rax, %rax
// 13a: 7f e2                         jg      0x11e <_JIT_ENTRY+0x11e>
// 13c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013e:  R_X86_64_64  .rodata.str1.1
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _Py_NegativeRefcount
// 150: be b8 0c 00 00                movl    $0xcb8, %esi            # imm = 0xCB8
// 155: 4c 89 ea                      movq    %r13, %rdx
// 158: ff d0                         callq   *%rax
// 15a: 49 8b 45 00                   movq    (%r13), %rax
// 15e: 85 c0                         testl   %eax, %eax
// 160: 78 12                         js      0x174 <_JIT_ENTRY+0x174>
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16c: ff d0                         callq   *%rax
// 16e: 49 ff 4d 00                   decq    (%r13)
// 172: 74 33                         je      0x1a7 <_JIT_ENTRY+0x1a7>
// 174: 48 8d 43 f0                   leaq    -0x10(%rbx), %rax
// 178: 4d 85 e4                      testq   %r12, %r12
// 17b: 74 42                         je      0x1bf <_JIT_ENTRY+0x1bf>
// 17d: 48 83 c3 f8                   addq    $-0x8, %rbx
// 181: 4c 89 20                      movq    %r12, (%rax)
// 184: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000186:  R_X86_64_64  _JIT_CONTINUE
// 18e: 4c 89 f7                      movq    %r14, %rdi
// 191: 48 89 de                      movq    %rbx, %rsi
// 194: 4c 89 fa                      movq    %r15, %rdx
// 197: 48 83 c4 08                   addq    $0x8, %rsp
// 19b: 5b                            popq    %rbx
// 19c: 41 5c                         popq    %r12
// 19e: 41 5d                         popq    %r13
// 1a0: 41 5e                         popq    %r14
// 1a2: 41 5f                         popq    %r15
// 1a4: 5d                            popq    %rbp
// 1a5: ff e0                         jmpq    *%rax
// 1a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a9:  R_X86_64_64  _Py_Dealloc
// 1b1: 4c 89 ef                      movq    %r13, %rdi
// 1b4: ff d0                         callq   *%rax
// 1b6: 48 8d 43 f0                   leaq    -0x10(%rbx), %rax
// 1ba: 4d 85 e4                      testq   %r12, %r12
// 1bd: 75 be                         jne     0x17d <_JIT_ENTRY+0x17d>
// 1bf: 48 89 c3                      movq    %rax, %rbx
// 1c2: 4c 29 f3                      subq    %r14, %rbx
// 1c5: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1c9: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1cd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1d1: 31 c0                         xorl    %eax, %eax
// 1d3: 48 83 c4 08                   addq    $0x8, %rsp
// 1d7: 5b                            popq    %rbx
// 1d8: 41 5c                         popq    %r12
// 1da: 41 5d                         popq    %r13
// 1dc: 41 5e                         popq    %r14
// 1de: 41 5f                         popq    %r15
// 1e0: 5d                            popq    %rbp
// 1e1: c3                            retq
// 1e2: 
static const unsigned char _DELETE_DEREFplus_FORMAT_WITH_SPEC_code_body[483] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x58, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x0c, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb8, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x33, 0x48, 0x8d, 0x43, 0xf0, 0x4d, 0x85, 0xe4, 0x74, 0x42, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8d, 0x43, 0xf0, 0x4d, 0x85, 0xe4, 0x75, 0xbe, 0x48, 0x89, 0xc3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_FORMAT_WITH_SPEC_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Format, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_FORMAT_WITH_SPEC_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_FORMAT_WITH_SPEC_data_holes[1];

// _DELETE_DEREFplus_FOR_ITER_TIER_TWO
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_FOR_ITER_TIER_TWO.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 7c                         jmp     0xbf <_JIT_ENTRY+0xbf>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 44 01 00 00                jmp     0x1bc <_JIT_ENTRY+0x1bc>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 21                         js      0xbf <_JIT_ENTRY+0xbf>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 75 0f                         jne     0xbf <_JIT_ENTRY+0xbf>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_Dealloc
// ba: 4c 89 e7                      movq    %r12, %rdi
// bd: ff d0                         callq   *%rax
// bf: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// c3: 49 8b 44 24 08                movq    0x8(%r12), %rax
// c8: 4c 89 e7                      movq    %r12, %rdi
// cb: ff 90 e0 00 00 00             callq   *0xe0(%rax)
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 74 27                         je      0xfd <_JIT_ENTRY+0xfd>
// d6: 48 89 03                      movq    %rax, (%rbx)
// d9: 48 83 c3 08                   addq    $0x8, %rbx
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _JIT_CONTINUE
// e7: 4c 89 f7                      movq    %r14, %rdi
// ea: 48 89 de                      movq    %rbx, %rsi
// ed: 4c 89 fa                      movq    %r15, %rdx
// f0: 48 83 c4 08                   addq    $0x8, %rsp
// f4: 5b                            popq    %rbx
// f5: 41 5c                         popq    %r12
// f7: 41 5e                         popq    %r14
// f9: 41 5f                         popq    %r15
// fb: ff e0                         jmpq    *%rax
// fd: 49 8b 47 68                   movq    0x68(%r15), %rax
// 101: 48 85 c0                      testq   %rax, %rax
// 104: 74 3a                         je      0x140 <_JIT_ENTRY+0x140>
// 106: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 10b: 74 33                         je      0x140 <_JIT_ENTRY+0x140>
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  PyExc_StopIteration
// 117: 48 8b 30                      movq    (%rax), %rsi
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  _PyErr_ExceptionMatches
// 124: 4c 89 ff                      movq    %r15, %rdi
// 127: ff d0                         callq   *%rax
// 129: 85 c0                         testl   %eax, %eax
// 12b: 0f 84 31 ff ff ff             je      0x62 <_JIT_ENTRY+0x62>
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  _PyErr_Clear
// 13b: 4c 89 ff                      movq    %r15, %rdi
// 13e: ff d0                         callq   *%rax
// 140: 49 8b 04 24                   movq    (%r12), %rax
// 144: 48 85 c0                      testq   %rax, %rax
// 147: 7f 22                         jg      0x16b <_JIT_ENTRY+0x16b>
// 149: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014b:  R_X86_64_64  .rodata.str1.1
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_NegativeRefcount
// 15d: be 80 08 00 00                movl    $0x880, %esi            # imm = 0x880
// 162: 4c 89 e2                      movq    %r12, %rdx
// 165: ff d0                         callq   *%rax
// 167: 49 8b 04 24                   movq    (%r12), %rax
// 16b: 48 83 c3 f8                   addq    $-0x8, %rbx
// 16f: 85 c0                         testl   %eax, %eax
// 171: 78 21                         js      0x194 <_JIT_ENTRY+0x194>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17d: ff d0                         callq   *%rax
// 17f: 49 ff 0c 24                   decq    (%r12)
// 183: 75 0f                         jne     0x194 <_JIT_ENTRY+0x194>
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_Dealloc
// 18f: 4c 89 e7                      movq    %r12, %rdi
// 192: ff d0                         callq   *%rax
// 194: 4c 29 f3                      subq    %r14, %rbx
// 197: 48 83 c3 b8                   addq    $-0x48, %rbx
// 19b: 48 c1 eb 03                   shrq    $0x3, %rbx
// 19f: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1a3: 49 8b 06                      movq    (%r14), %rax
// 1a6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a8:  R_X86_64_64  _JIT_TARGET
// 1b0: 89 c9                         movl    %ecx, %ecx
// 1b2: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b6: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1bc: 48 83 c4 08                   addq    $0x8, %rsp
// 1c0: 5b                            popq    %rbx
// 1c1: 41 5c                         popq    %r12
// 1c3: 41 5e                         popq    %r14
// 1c5: 41 5f                         popq    %r15
// 1c7: c3                            retq
// 1c8: 
static const unsigned char _DELETE_DEREFplus_FOR_ITER_TIER_TWO_code_body[457] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x44, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0x90, 0xe0, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x27, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x3a, 0x48, 0x83, 0x78, 0x08, 0x00, 0x74, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x84, 0x31, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_FOR_ITER_TIER_TWO_code_holes[17] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_StopIteration, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_FOR_ITER_TIER_TWO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_FOR_ITER_TIER_TWO_data_holes[1];

// _DELETE_DEREFplus_GET_AITER
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_GET_AITER.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 2a                         jle     0x6a <_JIT_ENTRY+0x6a>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 4c                         jns     0x90 <_JIT_ENTRY+0x90>
// 44: eb 6b                         jmp     0xb1 <_JIT_ENTRY+0xb1>
// 46: 48 8b 33                      movq    (%rbx), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: e9 2a 02 00 00                jmp     0x294 <_JIT_ENTRY+0x294>
// 6a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006c:  R_X86_64_64  .rodata.str1.1
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _Py_NegativeRefcount
// 7e: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 83: 4c 89 e2                      movq    %r12, %rdx
// 86: ff d0                         callq   *%rax
// 88: 49 8b 04 24                   movq    (%r12), %rax
// 8c: 85 c0                         testl   %eax, %eax
// 8e: 78 21                         js      0xb1 <_JIT_ENTRY+0xb1>
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9a: ff d0                         callq   *%rax
// 9c: 49 ff 0c 24                   decq    (%r12)
// a0: 75 0f                         jne     0xb1 <_JIT_ENTRY+0xb1>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_Dealloc
// ac: 4c 89 e7                      movq    %r12, %rdi
// af: ff d0                         callq   *%rax
// b1: 49 8d 6e f8                   leaq    -0x8(%r14), %rbp
// b5: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// b9: 49 8b 45 08                   movq    0x8(%r13), %rax
// bd: 48 8b 48 50                   movq    0x50(%rax), %rcx
// c1: 48 85 c9                      testq   %rcx, %rcx
// c4: 0f 84 b2 00 00 00             je      0x17c <_JIT_ENTRY+0x17c>
// ca: 48 8b 49 08                   movq    0x8(%rcx), %rcx
// ce: 48 85 c9                      testq   %rcx, %rcx
// d1: 0f 84 a5 00 00 00             je      0x17c <_JIT_ENTRY+0x17c>
// d7: 4c 89 ef                      movq    %r13, %rdi
// da: ff d1                         callq   *%rcx
// dc: 49 89 c4                      movq    %rax, %r12
// df: 49 8b 45 00                   movq    (%r13), %rax
// e3: 48 85 c0                      testq   %rax, %rax
// e6: 7f 22                         jg      0x10a <_JIT_ENTRY+0x10a>
// e8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ea:  R_X86_64_64  .rodata.str1.1
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _Py_NegativeRefcount
// fc: be c5 02 00 00                movl    $0x2c5, %esi            # imm = 0x2C5
// 101: 4c 89 ea                      movq    %r13, %rdx
// 104: ff d0                         callq   *%rax
// 106: 49 8b 45 00                   movq    (%r13), %rax
// 10a: 85 c0                         testl   %eax, %eax
// 10c: 78 21                         js      0x12f <_JIT_ENTRY+0x12f>
// 10e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000110:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 118: ff d0                         callq   *%rax
// 11a: 49 ff 4d 00                   decq    (%r13)
// 11e: 75 0f                         jne     0x12f <_JIT_ENTRY+0x12f>
// 120: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000122:  R_X86_64_64  _Py_Dealloc
// 12a: 4c 89 ef                      movq    %r13, %rdi
// 12d: ff d0                         callq   *%rax
// 12f: 4d 85 e4                      testq   %r12, %r12
// 132: 0f 84 59 01 00 00             je      0x291 <_JIT_ENTRY+0x291>
// 138: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 13d: 48 8b 48 50                   movq    0x50(%rax), %rcx
// 141: 48 85 c9                      testq   %rcx, %rcx
// 144: 0f 84 c4 00 00 00             je      0x20e <_JIT_ENTRY+0x20e>
// 14a: 48 83 79 10 00                cmpq    $0x0, 0x10(%rcx)
// 14f: 0f 84 b9 00 00 00             je      0x20e <_JIT_ENTRY+0x20e>
// 155: 4d 89 66 f8                   movq    %r12, -0x8(%r14)
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _JIT_CONTINUE
// 163: 48 89 df                      movq    %rbx, %rdi
// 166: 4c 89 f6                      movq    %r14, %rsi
// 169: 4c 89 fa                      movq    %r15, %rdx
// 16c: 48 83 c4 08                   addq    $0x8, %rsp
// 170: 5b                            popq    %rbx
// 171: 41 5c                         popq    %r12
// 173: 41 5d                         popq    %r13
// 175: 41 5e                         popq    %r14
// 177: 41 5f                         popq    %r15
// 179: 5d                            popq    %rbp
// 17a: ff e0                         jmpq    *%rax
// 17c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017e:  R_X86_64_64  PyExc_TypeError
// 186: 48 8b 31                      movq    (%rcx), %rsi
// 189: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 18d: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000018f:  R_X86_64_64  .rodata.str1.1+0x39
// 197: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000199:  R_X86_64_64  _PyErr_Format
// 1a1: 4c 89 ff                      movq    %r15, %rdi
// 1a4: 31 c0                         xorl    %eax, %eax
// 1a6: 41 ff d0                      callq   *%r8
// 1a9: 49 8b 45 00                   movq    (%r13), %rax
// 1ad: 48 85 c0                      testq   %rax, %rax
// 1b0: 7e 0a                         jle     0x1bc <_JIT_ENTRY+0x1bc>
// 1b2: 85 c0                         testl   %eax, %eax
// 1b4: 0f 88 d7 00 00 00             js      0x291 <_JIT_ENTRY+0x291>
// 1ba: eb 2a                         jmp     0x1e6 <_JIT_ENTRY+0x1e6>
// 1bc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001be:  R_X86_64_64  .rodata.str1.1
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_NegativeRefcount
// 1d0: be c1 02 00 00                movl    $0x2c1, %esi            # imm = 0x2C1
// 1d5: 4c 89 ea                      movq    %r13, %rdx
// 1d8: ff d0                         callq   *%rax
// 1da: 49 8b 45 00                   movq    (%r13), %rax
// 1de: 85 c0                         testl   %eax, %eax
// 1e0: 0f 88 ab 00 00 00             js      0x291 <_JIT_ENTRY+0x291>
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 ff 4d 00                   decq    (%r13)
// 1f6: 0f 85 95 00 00 00             jne     0x291 <_JIT_ENTRY+0x291>
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_Dealloc
// 206: 4c 89 ef                      movq    %r13, %rdi
// 209: e9 81 00 00 00                jmp     0x28f <_JIT_ENTRY+0x28f>
// 20e: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000210:  R_X86_64_64  PyExc_TypeError
// 218: 48 8b 31                      movq    (%rcx), %rsi
// 21b: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 21f: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000221:  R_X86_64_64  .rodata.str1.1+0x7a
// 229: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000022b:  R_X86_64_64  _PyErr_Format
// 233: 4c 89 ff                      movq    %r15, %rdi
// 236: 31 c0                         xorl    %eax, %eax
// 238: 41 ff d0                      callq   *%r8
// 23b: 49 8b 04 24                   movq    (%r12), %rax
// 23f: 48 85 c0                      testq   %rax, %rax
// 242: 7e 06                         jle     0x24a <_JIT_ENTRY+0x24a>
// 244: 85 c0                         testl   %eax, %eax
// 246: 78 49                         js      0x291 <_JIT_ENTRY+0x291>
// 248: eb 26                         jmp     0x270 <_JIT_ENTRY+0x270>
// 24a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000024c:  R_X86_64_64  .rodata.str1.1
// 254: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000256:  R_X86_64_64  _Py_NegativeRefcount
// 25e: be cd 02 00 00                movl    $0x2cd, %esi            # imm = 0x2CD
// 263: 4c 89 e2                      movq    %r12, %rdx
// 266: ff d0                         callq   *%rax
// 268: 49 8b 04 24                   movq    (%r12), %rax
// 26c: 85 c0                         testl   %eax, %eax
// 26e: 78 21                         js      0x291 <_JIT_ENTRY+0x291>
// 270: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000272:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 27a: ff d0                         callq   *%rax
// 27c: 49 ff 0c 24                   decq    (%r12)
// 280: 75 0f                         jne     0x291 <_JIT_ENTRY+0x291>
// 282: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000284:  R_X86_64_64  _Py_Dealloc
// 28c: 4c 89 e7                      movq    %r12, %rdi
// 28f: ff d0                         callq   *%rax
// 291: 49 89 ee                      movq    %rbp, %r14
// 294: 49 29 de                      subq    %rbx, %r14
// 297: 49 83 c6 b8                   addq    $-0x48, %r14
// 29b: 49 c1 ee 03                   shrq    $0x3, %r14
// 29f: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2a3: 31 c0                         xorl    %eax, %eax
// 2a5: 48 83 c4 08                   addq    $0x8, %rsp
// 2a9: 5b                            popq    %rbx
// 2aa: 41 5c                         popq    %r12
// 2ac: 41 5d                         popq    %r13
// 2ae: 41 5e                         popq    %r14
// 2b0: 41 5f                         popq    %r15
// 2b2: 5d                            popq    %rbp
// 2b3: c3                            retq
// 2b4: 
static const unsigned char _DELETE_DEREFplus_GET_AITER_code_body[693] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x2a, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x6e, 0xf8, 0x4d, 0x8b, 0x6e, 0xf8, 0x49, 0x8b, 0x45, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xb2, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x08, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xa5, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd1, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x59, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0xc4, 0x00, 0x00, 0x00, 0x48, 0x83, 0x79, 0x10, 0x00, 0x0f, 0x84, 0xb9, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x85, 0xc0, 0x0f, 0x88, 0xd7, 0x00, 0x00, 0x00, 0xeb, 0x2a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc1, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x0f, 0x88, 0xab, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x85, 0x95, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x78, 0x49, 0xeb, 0x26, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcd, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_GET_AITER_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x110, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x17e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x199, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x1be, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x210, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x221, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7a},
    {0x22b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x256, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x272, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x284, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an object with __aiter__ method, got %.100s\x00'async for' received an object from __aiter__ that does not implement __anext__: %.100s\x00"
// d2: 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_GET_AITER_data_body[217] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_GET_AITER_data_holes[1];

// _DELETE_DEREFplus_GET_ANEXT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_GET_ANEXT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 28: 4d 85 e4                      testq   %r12, %r12
// 2b: 74 17                         je      0x44 <_JIT_ENTRY+0x44>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 2a                         jle     0x68 <_JIT_ENTRY+0x68>
// 3e: 85 c0                         testl   %eax, %eax
// 40: 79 4c                         jns     0x8e <_JIT_ENTRY+0x8e>
// 42: eb 6b                         jmp     0xaf <_JIT_ENTRY+0xaf>
// 44: 49 8b 36                      movq    (%r14), %rsi
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _JIT_OPARG
// 51: 0f b7 d0                      movzwl  %ax, %edx
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5e: 4c 89 ff                      movq    %r15, %rdi
// 61: ff d0                         callq   *%rax
// 63: e9 db 01 00 00                jmp     0x243 <_JIT_ENTRY+0x243>
// 68: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006a:  R_X86_64_64  .rodata.str1.1
// 72: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000074:  R_X86_64_64  _Py_NegativeRefcount
// 7c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 81: 4c 89 e2                      movq    %r12, %rdx
// 84: ff d0                         callq   *%rax
// 86: 49 8b 04 24                   movq    (%r12), %rax
// 8a: 85 c0                         testl   %eax, %eax
// 8c: 78 21                         js      0xaf <_JIT_ENTRY+0xaf>
// 8e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000090:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 98: ff d0                         callq   *%rax
// 9a: 49 ff 0c 24                   decq    (%r12)
// 9e: 75 0f                         jne     0xaf <_JIT_ENTRY+0xaf>
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _Py_Dealloc
// aa: 4c 89 e7                      movq    %r12, %rdi
// ad: ff d0                         callq   *%rax
// af: 48 8b 7b f8                   movq    -0x8(%rbx), %rdi
// b3: 48 8b 47 08                   movq    0x8(%rdi), %rax
// b7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b9:  R_X86_64_64  PyAsyncGen_Type
// c1: 48 39 c8                      cmpq    %rcx, %rax
// c4: 0f 84 c3 00 00 00             je      0x18d <_JIT_ENTRY+0x18d>
// ca: 48 8b 48 50                   movq    0x50(%rax), %rcx
// ce: 48 85 c9                      testq   %rcx, %rcx
// d1: 0f 84 84 00 00 00             je      0x15b <_JIT_ENTRY+0x15b>
// d7: 48 8b 49 10                   movq    0x10(%rcx), %rcx
// db: 48 85 c9                      testq   %rcx, %rcx
// de: 74 7b                         je      0x15b <_JIT_ENTRY+0x15b>
// e0: ff d1                         callq   *%rcx
// e2: 48 85 c0                      testq   %rax, %rax
// e5: 0f 84 58 01 00 00             je      0x243 <_JIT_ENTRY+0x243>
// eb: 49 89 c4                      movq    %rax, %r12
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _PyCoro_GetAwaitableIter
// f8: 4c 89 e7                      movq    %r12, %rdi
// fb: ff d0                         callq   *%rax
// fd: 48 85 c0                      testq   %rax, %rax
// 100: 0f 84 bf 00 00 00             je      0x1c5 <_JIT_ENTRY+0x1c5>
// 106: 49 89 c5                      movq    %rax, %r13
// 109: 49 8b 04 24                   movq    (%r12), %rax
// 10d: 48 85 c0                      testq   %rax, %rax
// 110: 7f 22                         jg      0x134 <_JIT_ENTRY+0x134>
// 112: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000114:  R_X86_64_64  .rodata.str1.1
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  _Py_NegativeRefcount
// 126: be fb 02 00 00                movl    $0x2fb, %esi            # imm = 0x2FB
// 12b: 4c 89 e2                      movq    %r12, %rdx
// 12e: ff d0                         callq   *%rax
// 130: 49 8b 04 24                   movq    (%r12), %rax
// 134: 85 c0                         testl   %eax, %eax
// 136: 78 68                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 138: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 142: ff d0                         callq   *%rax
// 144: 49 ff 0c 24                   decq    (%r12)
// 148: 75 56                         jne     0x1a0 <_JIT_ENTRY+0x1a0>
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_Dealloc
// 154: 4c 89 e7                      movq    %r12, %rdi
// 157: ff d0                         callq   *%rax
// 159: eb 45                         jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 15b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000015d:  R_X86_64_64  PyExc_TypeError
// 165: 48 8b 31                      movq    (%rcx), %rsi
// 168: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 16c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000016e:  R_X86_64_64  .rodata.str1.1+0x39
// 176: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000178:  R_X86_64_64  _PyErr_Format
// 180: 4c 89 ff                      movq    %r15, %rdi
// 183: 31 c0                         xorl    %eax, %eax
// 185: 41 ff d0                      callq   *%r8
// 188: e9 b6 00 00 00                jmp     0x243 <_JIT_ENTRY+0x243>
// 18d: 48 8b 41 50                   movq    0x50(%rcx), %rax
// 191: ff 50 10                      callq   *0x10(%rax)
// 194: 49 89 c5                      movq    %rax, %r13
// 197: 48 85 c0                      testq   %rax, %rax
// 19a: 0f 84 a3 00 00 00             je      0x243 <_JIT_ENTRY+0x243>
// 1a0: 4c 89 2b                      movq    %r13, (%rbx)
// 1a3: 48 83 c3 08                   addq    $0x8, %rbx
// 1a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a9:  R_X86_64_64  _JIT_CONTINUE
// 1b1: 4c 89 f7                      movq    %r14, %rdi
// 1b4: 48 89 de                      movq    %rbx, %rsi
// 1b7: 4c 89 fa                      movq    %r15, %rdx
// 1ba: 5b                            popq    %rbx
// 1bb: 41 5c                         popq    %r12
// 1bd: 41 5d                         popq    %r13
// 1bf: 41 5e                         popq    %r14
// 1c1: 41 5f                         popq    %r15
// 1c3: ff e0                         jmpq    *%rax
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  PyExc_TypeError
// 1cf: 48 8b 38                      movq    (%rax), %rdi
// 1d2: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 1d7: 48 8b 50 18                   movq    0x18(%rax), %rdx
// 1db: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000001dd:  R_X86_64_64  .rodata.str1.1+0x7c
// 1e5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001e7:  R_X86_64_64  _PyErr_FormatFromCause
// 1ef: 31 c0                         xorl    %eax, %eax
// 1f1: ff d1                         callq   *%rcx
// 1f3: 49 8b 04 24                   movq    (%r12), %rax
// 1f7: 48 85 c0                      testq   %rax, %rax
// 1fa: 7f 22                         jg      0x21e <_JIT_ENTRY+0x21e>
// 1fc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fe:  R_X86_64_64  .rodata.str1.1
// 206: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000208:  R_X86_64_64  _Py_NegativeRefcount
// 210: be f8 02 00 00                movl    $0x2f8, %esi            # imm = 0x2F8
// 215: 4c 89 e2                      movq    %r12, %rdx
// 218: ff d0                         callq   *%rax
// 21a: 49 8b 04 24                   movq    (%r12), %rax
// 21e: 85 c0                         testl   %eax, %eax
// 220: 78 21                         js      0x243 <_JIT_ENTRY+0x243>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 22c: ff d0                         callq   *%rax
// 22e: 49 ff 0c 24                   decq    (%r12)
// 232: 75 0f                         jne     0x243 <_JIT_ENTRY+0x243>
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _Py_Dealloc
// 23e: 4c 89 e7                      movq    %r12, %rdi
// 241: ff d0                         callq   *%rax
// 243: 4c 29 f3                      subq    %r14, %rbx
// 246: 48 83 c3 b8                   addq    $-0x48, %rbx
// 24a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 24e: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 252: 31 c0                         xorl    %eax, %eax
// 254: 5b                            popq    %rbx
// 255: 41 5c                         popq    %r12
// 257: 41 5d                         popq    %r13
// 259: 41 5e                         popq    %r14
// 25b: 41 5f                         popq    %r15
// 25d: c3                            retq
// 25e: 
static const unsigned char _DELETE_DEREFplus_GET_ANEXT_code_body[607] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xdb, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7b, 0xf8, 0x48, 0x8b, 0x47, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x49, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x7b, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x58, 0x01, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xbf, 0x00, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfb, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x68, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x56, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x45, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0xe9, 0xb6, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x41, 0x50, 0xff, 0x50, 0x10, 0x49, 0x89, 0xc5, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xa3, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x2b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x38, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x50, 0x18, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0xd1, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf8, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_GET_ANEXT_code_holes[25] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x74, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyAsyncGen_Type, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x16e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x178, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x7c},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_FormatFromCause, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x208, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'async for' requires an iterator with __anext__ method, got %.100s\x00'async for' received an invalid object from __anext__: %.100s\x00"
// ba: 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_GET_ANEXT_data_body[193] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_GET_ANEXT_data_holes[1];

// _DELETE_DEREFplus_GET_AWAITABLE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_GET_AWAITABLE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d6                      movq    %rdx, %r14
// e: 49 89 f7                      movq    %rsi, %r15
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 2d                         jle     0x6d <_JIT_ENTRY+0x6d>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 4f                         jns     0x93 <_JIT_ENTRY+0x93>
// 44: eb 6e                         jmp     0xb4 <_JIT_ENTRY+0xb4>
// 46: 48 8b 33                      movq    (%rbx), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 f7                      movq    %r14, %rdi
// 63: ff d0                         callq   *%rax
// 65: 4c 89 fd                      movq    %r15, %rbp
// 68: e9 0d 02 00 00                jmp     0x27a <_JIT_ENTRY+0x27a>
// 6d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006f:  R_X86_64_64  .rodata.str1.1
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_NegativeRefcount
// 81: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 86: 4c 89 e2                      movq    %r12, %rdx
// 89: ff d0                         callq   *%rax
// 8b: 49 8b 04 24                   movq    (%r12), %rax
// 8f: 85 c0                         testl   %eax, %eax
// 91: 78 21                         js      0xb4 <_JIT_ENTRY+0xb4>
// 93: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000095:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9d: ff d0                         callq   *%rax
// 9f: 49 ff 0c 24                   decq    (%r12)
// a3: 75 0f                         jne     0xb4 <_JIT_ENTRY+0xb4>
// a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a7:  R_X86_64_64  _Py_Dealloc
// af: 4c 89 e7                      movq    %r12, %rdi
// b2: ff d0                         callq   *%rax
// b4: 4d 8b 6f f8                   movq    -0x8(%r15), %r13
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  _PyCoro_GetAwaitableIter
// c2: 4c 89 ef                      movq    %r13, %rdi
// c5: ff d0                         callq   *%rax
// c7: 49 89 c4                      movq    %rax, %r12
// ca: 48 85 c0                      testq   %rax, %rax
// cd: 74 0f                         je      0xde <_JIT_ENTRY+0xde>
// cf: 49 8b 45 00                   movq    (%r13), %rax
// d3: 48 85 c0                      testq   %rax, %rax
// d6: 7e 2f                         jle     0x107 <_JIT_ENTRY+0x107>
// d8: 85 c0                         testl   %eax, %eax
// da: 79 51                         jns     0x12d <_JIT_ENTRY+0x12d>
// dc: eb 65                         jmp     0x143 <_JIT_ENTRY+0x143>
// de: 49 8b 75 08                   movq    0x8(%r13), %rsi
// e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e4:  R_X86_64_64  _JIT_OPARG
// ec: 0f b7 d0                      movzwl  %ax, %edx
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  _PyEval_FormatAwaitableError
// f9: 4c 89 f7                      movq    %r14, %rdi
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 48 85 c0                      testq   %rax, %rax
// 105: 7f d1                         jg      0xd8 <_JIT_ENTRY+0xd8>
// 107: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000109:  R_X86_64_64  .rodata.str1.1
// 111: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000113:  R_X86_64_64  _Py_NegativeRefcount
// 11b: be 0c 03 00 00                movl    $0x30c, %esi            # imm = 0x30C
// 120: 4c 89 ea                      movq    %r13, %rdx
// 123: ff d0                         callq   *%rax
// 125: 49 8b 45 00                   movq    (%r13), %rax
// 129: 85 c0                         testl   %eax, %eax
// 12b: 78 16                         js      0x143 <_JIT_ENTRY+0x143>
// 12d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 137: ff d0                         callq   *%rax
// 139: 49 ff 4d 00                   decq    (%r13)
// 13d: 0f 84 1b 01 00 00             je      0x25e <_JIT_ENTRY+0x25e>
// 143: 49 8d 6f f8                   leaq    -0x8(%r15), %rbp
// 147: 4d 85 e4                      testq   %r12, %r12
// 14a: 0f 84 2a 01 00 00             je      0x27a <_JIT_ENTRY+0x27a>
// 150: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000152:  R_X86_64_64  PyCoro_Type
// 15a: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 15f: 74 27                         je      0x188 <_JIT_ENTRY+0x188>
// 161: 4d 89 67 f8                   movq    %r12, -0x8(%r15)
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _JIT_CONTINUE
// 16f: 48 89 df                      movq    %rbx, %rdi
// 172: 4c 89 fe                      movq    %r15, %rsi
// 175: 4c 89 f2                      movq    %r14, %rdx
// 178: 48 83 c4 08                   addq    $0x8, %rsp
// 17c: 5b                            popq    %rbx
// 17d: 41 5c                         popq    %r12
// 17f: 41 5d                         popq    %r13
// 181: 41 5e                         popq    %r14
// 183: 41 5f                         popq    %r15
// 185: 5d                            popq    %rbp
// 186: ff e0                         jmpq    *%rax
// 188: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018a:  R_X86_64_64  _PyGen_yf
// 192: 4c 89 e7                      movq    %r12, %rdi
// 195: ff d0                         callq   *%rax
// 197: 48 85 c0                      testq   %rax, %rax
// 19a: 74 c5                         je      0x161 <_JIT_ENTRY+0x161>
// 19c: 49 89 c5                      movq    %rax, %r13
// 19f: 48 8b 00                      movq    (%rax), %rax
// 1a2: 48 85 c0                      testq   %rax, %rax
// 1a5: 7f 22                         jg      0x1c9 <_JIT_ENTRY+0x1c9>
// 1a7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a9:  R_X86_64_64  .rodata.str1.1
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _Py_NegativeRefcount
// 1bb: be 13 03 00 00                movl    $0x313, %esi            # imm = 0x313
// 1c0: 4c 89 ea                      movq    %r13, %rdx
// 1c3: ff d0                         callq   *%rax
// 1c5: 49 8b 45 00                   movq    (%r13), %rax
// 1c9: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 00000000000001cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d3: 85 c0                         testl   %eax, %eax
// 1d5: 78 18                         js      0x1ef <_JIT_ENTRY+0x1ef>
// 1d7: 41 ff d7                      callq   *%r15
// 1da: 49 ff 4d 00                   decq    (%r13)
// 1de: 75 0f                         jne     0x1ef <_JIT_ENTRY+0x1ef>
// 1e0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e2:  R_X86_64_64  _Py_Dealloc
// 1ea: 4c 89 ef                      movq    %r13, %rdi
// 1ed: ff d0                         callq   *%rax
// 1ef: 49 8b 04 24                   movq    (%r12), %rax
// 1f3: 48 85 c0                      testq   %rax, %rax
// 1f6: 7f 22                         jg      0x21a <_JIT_ENTRY+0x21a>
// 1f8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001fa:  R_X86_64_64  .rodata.str1.1
// 202: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000204:  R_X86_64_64  _Py_NegativeRefcount
// 20c: be 14 03 00 00                movl    $0x314, %esi            # imm = 0x314
// 211: 4c 89 e2                      movq    %r12, %rdx
// 214: ff d0                         callq   *%rax
// 216: 49 8b 04 24                   movq    (%r12), %rax
// 21a: 85 c0                         testl   %eax, %eax
// 21c: 78 18                         js      0x236 <_JIT_ENTRY+0x236>
// 21e: 41 ff d7                      callq   *%r15
// 221: 49 ff 0c 24                   decq    (%r12)
// 225: 75 0f                         jne     0x236 <_JIT_ENTRY+0x236>
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _Py_Dealloc
// 231: 4c 89 e7                      movq    %r12, %rdi
// 234: ff d0                         callq   *%rax
// 236: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000238:  R_X86_64_64  PyExc_RuntimeError
// 240: 48 8b 30                      movq    (%rax), %rsi
// 243: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000245:  R_X86_64_64  .rodata.str1.1+0x39
// 24d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024f:  R_X86_64_64  _PyErr_SetString
// 257: 4c 89 f7                      movq    %r14, %rdi
// 25a: ff d0                         callq   *%rax
// 25c: eb 1c                         jmp     0x27a <_JIT_ENTRY+0x27a>
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _Py_Dealloc
// 268: 4c 89 ef                      movq    %r13, %rdi
// 26b: ff d0                         callq   *%rax
// 26d: 49 8d 6f f8                   leaq    -0x8(%r15), %rbp
// 271: 4d 85 e4                      testq   %r12, %r12
// 274: 0f 85 d6 fe ff ff             jne     0x150 <_JIT_ENTRY+0x150>
// 27a: 48 29 dd                      subq    %rbx, %rbp
// 27d: 48 83 c5 b8                   addq    $-0x48, %rbp
// 281: 48 c1 ed 03                   shrq    $0x3, %rbp
// 285: 89 6b 40                      movl    %ebp, 0x40(%rbx)
// 288: 31 c0                         xorl    %eax, %eax
// 28a: 48 83 c4 08                   addq    $0x8, %rsp
// 28e: 5b                            popq    %rbx
// 28f: 41 5c                         popq    %r12
// 291: 41 5d                         popq    %r13
// 293: 41 5e                         popq    %r14
// 295: 41 5f                         popq    %r15
// 297: 5d                            popq    %rbp
// 298: c3                            retq
// 299: 
static const unsigned char _DELETE_DEREFplus_GET_AWAITABLE_code_body[666] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2d, 0x85, 0xc0, 0x79, 0x4f, 0xeb, 0x6e, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x4c, 0x89, 0xfd, 0xe9, 0x0d, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8b, 0x6f, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x48, 0x85, 0xc0, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x2f, 0x85, 0xc0, 0x79, 0x51, 0xeb, 0x65, 0x49, 0x8b, 0x75, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xd1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0c, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x0f, 0x84, 0x1b, 0x01, 0x00, 0x00, 0x49, 0x8d, 0x6f, 0xf8, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0x2a, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x27, 0x4d, 0x89, 0x67, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0xc5, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x13, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd7, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xeb, 0x1c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8d, 0x6f, 0xf8, 0x4d, 0x85, 0xe4, 0x0f, 0x85, 0xd6, 0xfe, 0xff, 0xff, 0x48, 0x29, 0xdd, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_GET_AWAITABLE_code_holes[28] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x95, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyCoro_GetAwaitableIter, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatAwaitableError, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x152, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x18a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyGen_yf, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x204, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x238, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_RuntimeError, 0x0},
    {0x245, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x24f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00coroutine is being awaited already\x00'
// 5c: 00 00 00 00
static const unsigned char _DELETE_DEREFplus_GET_AWAITABLE_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x77, 0x61, 0x69, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_GET_AWAITABLE_data_holes[1];

// _DELETE_DEREFplus_GET_ITER
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_GET_ITER.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 21                         je      0x50 <_JIT_ENTRY+0x50>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 34                         jle     0x74 <_JIT_ENTRY+0x74>
// 40: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000042:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a: 85 c0                         testl   %eax, %eax
// 4c: 79 56                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 4e: eb 6b                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 50: 49 8b 36                      movq    (%r14), %rsi
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _JIT_OPARG
// 5d: 0f b7 d0                      movzwl  %ax, %edx
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _PyEval_FormatExcUnbound
// 6a: 4c 89 ff                      movq    %r15, %rdi
// 6d: ff d0                         callq   *%rax
// 6f: e9 de 00 00 00                jmp     0x152 <_JIT_ENTRY+0x152>
// 74: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000076:  R_X86_64_64  .rodata.str1.1
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _Py_NegativeRefcount
// 88: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 49 8b 04 24                   movq    (%r12), %rax
// 96: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000098:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 17                         js      0xbb <_JIT_ENTRY+0xbb>
// a4: ff d5                         callq   *%rbp
// a6: 49 ff 0c 24                   decq    (%r12)
// aa: 75 0f                         jne     0xbb <_JIT_ENTRY+0xbb>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_Dealloc
// b6: 4c 89 e7                      movq    %r12, %rdi
// b9: ff d0                         callq   *%rax
// bb: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c1:  R_X86_64_64  PyObject_GetIter
// c9: 4c 89 ef                      movq    %r13, %rdi
// cc: ff d0                         callq   *%rax
// ce: 49 89 c4                      movq    %rax, %r12
// d1: 49 8b 45 00                   movq    (%r13), %rax
// d5: 48 85 c0                      testq   %rax, %rax
// d8: 7e 06                         jle     0xe0 <_JIT_ENTRY+0xe0>
// da: 85 c0                         testl   %eax, %eax
// dc: 79 28                         jns     0x106 <_JIT_ENTRY+0x106>
// de: eb 2e                         jmp     0x10e <_JIT_ENTRY+0x10e>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be 4a 08 00 00                movl    $0x84a, %esi            # imm = 0x84A
// f9: 4c 89 ea                      movq    %r13, %rdx
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 08                         js      0x10e <_JIT_ENTRY+0x10e>
// 106: ff d5                         callq   *%rbp
// 108: 49 ff 4d 00                   decq    (%r13)
// 10c: 74 2c                         je      0x13a <_JIT_ENTRY+0x13a>
// 10e: 4d 85 e4                      testq   %r12, %r12
// 111: 74 3b                         je      0x14e <_JIT_ENTRY+0x14e>
// 113: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _JIT_CONTINUE
// 121: 4c 89 f7                      movq    %r14, %rdi
// 124: 48 89 de                      movq    %rbx, %rsi
// 127: 4c 89 fa                      movq    %r15, %rdx
// 12a: 48 83 c4 08                   addq    $0x8, %rsp
// 12e: 5b                            popq    %rbx
// 12f: 41 5c                         popq    %r12
// 131: 41 5d                         popq    %r13
// 133: 41 5e                         popq    %r14
// 135: 41 5f                         popq    %r15
// 137: 5d                            popq    %rbp
// 138: ff e0                         jmpq    *%rax
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _Py_Dealloc
// 144: 4c 89 ef                      movq    %r13, %rdi
// 147: ff d0                         callq   *%rax
// 149: 4d 85 e4                      testq   %r12, %r12
// 14c: 75 c5                         jne     0x113 <_JIT_ENTRY+0x113>
// 14e: 48 83 c3 f8                   addq    $-0x8, %rbx
// 152: 4c 29 f3                      subq    %r14, %rbx
// 155: 48 83 c3 b8                   addq    $-0x48, %rbx
// 159: 48 c1 eb 03                   shrq    $0x3, %rbx
// 15d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 161: 31 c0                         xorl    %eax, %eax
// 163: 48 83 c4 08                   addq    $0x8, %rsp
// 167: 5b                            popq    %rbx
// 168: 41 5c                         popq    %r12
// 16a: 41 5d                         popq    %r13
// 16c: 41 5e                         popq    %r14
// 16e: 41 5f                         popq    %r15
// 170: 5d                            popq    %rbp
// 171: c3                            retq
// 172: 
static const unsigned char _DELETE_DEREFplus_GET_ITER_code_body[371] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x21, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x34, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x56, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xde, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x2e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd5, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x2c, 0x4d, 0x85, 0xe4, 0x74, 0x3b, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xc5, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_GET_ITER_code_holes[14] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_GET_ITER_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_GET_ITER_data_holes[1];

// _DELETE_DEREFplus_GET_LEN
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_GET_LEN.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 2a                         jle     0x67 <_JIT_ENTRY+0x67>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 4c                         jns     0x8d <_JIT_ENTRY+0x8d>
// 41: eb 6b                         jmp     0xae <_JIT_ENTRY+0xae>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: e9 97 00 00 00                jmp     0xfe <_JIT_ENTRY+0xfe>
// 67: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000069:  R_X86_64_64  .rodata.str1.1
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_NegativeRefcount
// 7b: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 80: 4c 89 e2                      movq    %r12, %rdx
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 85 c0                         testl   %eax, %eax
// 8b: 78 21                         js      0xae <_JIT_ENTRY+0xae>
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: ff d0                         callq   *%rax
// 99: 49 ff 0c 24                   decq    (%r12)
// 9d: 75 0f                         jne     0xae <_JIT_ENTRY+0xae>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _Py_Dealloc
// a9: 4c 89 e7                      movq    %r12, %rdi
// ac: ff d0                         callq   *%rax
// ae: 48 8b 7b f8                   movq    -0x8(%rbx), %rdi
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  PyObject_Size
// bc: ff d0                         callq   *%rax
// be: 48 85 c0                      testq   %rax, %rax
// c1: 78 3b                         js      0xfe <_JIT_ENTRY+0xfe>
// c3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c5:  R_X86_64_64  PyLong_FromSsize_t
// cd: 48 89 c7                      movq    %rax, %rdi
// d0: ff d1                         callq   *%rcx
// d2: 48 85 c0                      testq   %rax, %rax
// d5: 74 27                         je      0xfe <_JIT_ENTRY+0xfe>
// d7: 48 89 03                      movq    %rax, (%rbx)
// da: 48 83 c3 08                   addq    $0x8, %rbx
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _JIT_CONTINUE
// e8: 4c 89 f7                      movq    %r14, %rdi
// eb: 48 89 de                      movq    %rbx, %rsi
// ee: 4c 89 fa                      movq    %r15, %rdx
// f1: 48 83 c4 08                   addq    $0x8, %rsp
// f5: 5b                            popq    %rbx
// f6: 41 5c                         popq    %r12
// f8: 41 5e                         popq    %r14
// fa: 41 5f                         popq    %r15
// fc: ff e0                         jmpq    *%rax
// fe: 4c 29 f3                      subq    %r14, %rbx
// 101: 48 83 c3 b8                   addq    $-0x48, %rbx
// 105: 48 c1 eb 03                   shrq    $0x3, %rbx
// 109: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 10d: 31 c0                         xorl    %eax, %eax
// 10f: 48 83 c4 08                   addq    $0x8, %rsp
// 113: 5b                            popq    %rbx
// 114: 41 5c                         popq    %r12
// 116: 41 5e                         popq    %r14
// 118: 41 5f                         popq    %r15
// 11a: c3                            retq
// 11b: 
static const unsigned char _DELETE_DEREFplus_GET_LEN_code_body[284] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x97, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x78, 0x3b, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc7, 0xff, 0xd1, 0x48, 0x85, 0xc0, 0x74, 0x27, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_GET_LEN_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Size, 0x0},
    {0xc5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromSsize_t, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_GET_LEN_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_GET_LEN_data_holes[1];

// _DELETE_DEREFplus_GET_YIELD_FROM_ITER
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_GET_YIELD_FROM_ITER.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 28: 4d 85 e4                      testq   %r12, %r12
// 2b: 74 1a                         je      0x47 <_JIT_ENTRY+0x47>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 43                         jle     0x81 <_JIT_ENTRY+0x81>
// 3e: 85 c0                         testl   %eax, %eax
// 40: 79 65                         jns     0xa7 <_JIT_ENTRY+0xa7>
// 42: e9 81 00 00 00                jmp     0xc8 <_JIT_ENTRY+0xc8>
// 47: 49 8b 36                      movq    (%r14), %rsi
// 4a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004c:  R_X86_64_64  _JIT_OPARG
// 54: 0f b7 d0                      movzwl  %ax, %edx
// 57: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000059:  R_X86_64_64  _PyEval_FormatExcUnbound
// 61: 4c 89 ff                      movq    %r15, %rdi
// 64: ff d0                         callq   *%rax
// 66: 4c 29 f3                      subq    %r14, %rbx
// 69: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 71: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 75: 31 c0                         xorl    %eax, %eax
// 77: 5b                            popq    %rbx
// 78: 41 5c                         popq    %r12
// 7a: 41 5d                         popq    %r13
// 7c: 41 5e                         popq    %r14
// 7e: 41 5f                         popq    %r15
// 80: c3                            retq
// 81: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000083:  R_X86_64_64  .rodata.str1.1
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_NegativeRefcount
// 95: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9a: 4c 89 e2                      movq    %r12, %rdx
// 9d: ff d0                         callq   *%rax
// 9f: 49 8b 04 24                   movq    (%r12), %rax
// a3: 85 c0                         testl   %eax, %eax
// a5: 78 21                         js      0xc8 <_JIT_ENTRY+0xc8>
// a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b1: ff d0                         callq   *%rax
// b3: 49 ff 0c 24                   decq    (%r12)
// b7: 75 0f                         jne     0xc8 <_JIT_ENTRY+0xc8>
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  _Py_Dealloc
// c3: 4c 89 e7                      movq    %r12, %rdi
// c6: ff d0                         callq   *%rax
// c8: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// cc: 49 8b 44 24 08                movq    0x8(%r12), %rax
// d1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d3:  R_X86_64_64  PyCoro_Type
// db: 48 39 c8                      cmpq    %rcx, %rax
// de: 74 7f                         je      0x15f <_JIT_ENTRY+0x15f>
// e0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e2:  R_X86_64_64  PyGen_Type
// ea: 48 39 c8                      cmpq    %rcx, %rax
// ed: 74 7e                         je      0x16d <_JIT_ENTRY+0x16d>
// ef: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f1:  R_X86_64_64  PyObject_GetIter
// f9: 4c 89 e7                      movq    %r12, %rdi
// fc: ff d0                         callq   *%rax
// fe: 48 85 c0                      testq   %rax, %rax
// 101: 0f 84 5f ff ff ff             je      0x66 <_JIT_ENTRY+0x66>
// 107: 49 89 c5                      movq    %rax, %r13
// 10a: 49 8b 04 24                   movq    (%r12), %rax
// 10e: 48 85 c0                      testq   %rax, %rax
// 111: 7f 22                         jg      0x135 <_JIT_ENTRY+0x135>
// 113: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000115:  R_X86_64_64  .rodata.str1.1
// 11d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011f:  R_X86_64_64  _Py_NegativeRefcount
// 127: be 6a 08 00 00                movl    $0x86a, %esi            # imm = 0x86A
// 12c: 4c 89 e2                      movq    %r12, %rdx
// 12f: ff d0                         callq   *%rax
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 85 c0                         testl   %eax, %eax
// 137: 78 21                         js      0x15a <_JIT_ENTRY+0x15a>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 143: ff d0                         callq   *%rax
// 145: 49 ff 0c 24                   decq    (%r12)
// 149: 75 0f                         jne     0x15a <_JIT_ENTRY+0x15a>
// 14b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014d:  R_X86_64_64  _Py_Dealloc
// 155: 4c 89 e7                      movq    %r12, %rdi
// 158: ff d0                         callq   *%rax
// 15a: 4d 89 ec                      movq    %r13, %r12
// 15d: eb 0e                         jmp     0x16d <_JIT_ENTRY+0x16d>
// 15f: 49 8b 06                      movq    (%r14), %rax
// 162: 0f b7 40 30                   movzwl  0x30(%rax), %eax
// 166: a9 80 01 00 00                testl   $0x180, %eax            # imm = 0x180
// 16b: 74 22                         je      0x18f <_JIT_ENTRY+0x18f>
// 16d: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 171: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000173:  R_X86_64_64  _JIT_CONTINUE
// 17b: 4c 89 f7                      movq    %r14, %rdi
// 17e: 48 89 de                      movq    %rbx, %rsi
// 181: 4c 89 fa                      movq    %r15, %rdx
// 184: 5b                            popq    %rbx
// 185: 41 5c                         popq    %r12
// 187: 41 5d                         popq    %r13
// 189: 41 5e                         popq    %r14
// 18b: 41 5f                         popq    %r15
// 18d: ff e0                         jmpq    *%rax
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  PyExc_TypeError
// 199: 48 8b 30                      movq    (%rax), %rsi
// 19c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000019e:  R_X86_64_64  .rodata.str1.1+0x39
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _PyErr_SetString
// 1b0: 4c 89 ff                      movq    %r15, %rdi
// 1b3: ff d0                         callq   *%rax
// 1b5: e9 ac fe ff ff                jmp     0x66 <_JIT_ENTRY+0x66>
// 1ba: 
static const unsigned char _DELETE_DEREFplus_GET_YIELD_FROM_ITER_code_body[443] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x43, 0x85, 0xc0, 0x79, 0x65, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x74, 0x7f, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc8, 0x74, 0x7e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x5f, 0xff, 0xff, 0xff, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x6a, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xec, 0xeb, 0x0e, 0x49, 0x8b, 0x06, 0x0f, 0xb7, 0x40, 0x30, 0xa9, 0x80, 0x01, 0x00, 0x00, 0x74, 0x22, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xac, 0xfe, 0xff, 0xff};
static const Hole _DELETE_DEREFplus_GET_YIELD_FROM_ITER_code_holes[19] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCoro_Type, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyGen_Type, 0x0},
    {0xf1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetIter, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot 'yield from' a coroutine object in a non-coroutine generator\x00"
// 7d: 00 00 00
static const unsigned char _DELETE_DEREFplus_GET_YIELD_FROM_ITER_data_body[129] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x27, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x27, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_GET_YIELD_FROM_ITER_data_holes[1];

// _DELETE_DEREFplus_GUARD_BOTH_FLOAT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_GUARD_BOTH_FLOAT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 6d                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 c1 00 00 00                jmp     0x139 <_JIT_ENTRY+0x139>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 12                         js      0xb0 <_JIT_ENTRY+0xb0>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 74 3e                         je      0xee <_JIT_ENTRY+0xee>
// b0: 48 8b 4b f0                   movq    -0x10(%rbx), %rcx
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  PyFloat_Type
// be: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// c2: 75 4d                         jne     0x111 <_JIT_ENTRY+0x111>
// c4: 48 8b 4b f8                   movq    -0x8(%rbx), %rcx
// c8: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// cc: 75 43                         jne     0x111 <_JIT_ENTRY+0x111>
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _JIT_CONTINUE
// d8: 4c 89 f7                      movq    %r14, %rdi
// db: 48 89 de                      movq    %rbx, %rsi
// de: 4c 89 fa                      movq    %r15, %rdx
// e1: 48 83 c4 08                   addq    $0x8, %rsp
// e5: 5b                            popq    %rbx
// e6: 41 5c                         popq    %r12
// e8: 41 5e                         popq    %r14
// ea: 41 5f                         popq    %r15
// ec: ff e0                         jmpq    *%rax
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 e7                      movq    %r12, %rdi
// fb: ff d0                         callq   *%rax
// fd: 48 8b 4b f0                   movq    -0x10(%rbx), %rcx
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  PyFloat_Type
// 10b: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 10f: 74 b3                         je      0xc4 <_JIT_ENTRY+0xc4>
// 111: 4c 29 f3                      subq    %r14, %rbx
// 114: 48 83 c3 b8                   addq    $-0x48, %rbx
// 118: 48 c1 eb 03                   shrq    $0x3, %rbx
// 11c: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 120: 49 8b 06                      movq    (%r14), %rax
// 123: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000125:  R_X86_64_64  _JIT_TARGET
// 12d: 89 c9                         movl    %ecx, %ecx
// 12f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 133: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 139: 48 83 c4 08                   addq    $0x8, %rsp
// 13d: 5b                            popq    %rbx
// 13e: 41 5c                         popq    %r12
// 140: 41 5e                         popq    %r14
// 142: 41 5f                         popq    %r15
// 144: c3                            retq
// 145: 
static const unsigned char _DELETE_DEREFplus_GUARD_BOTH_FLOAT_code_body[326] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x6d, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xc1, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x3e, 0x48, 0x8b, 0x4b, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x4d, 0x48, 0x8b, 0x4b, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x75, 0x43, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x4b, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x74, 0xb3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_GUARD_BOTH_FLOAT_code_holes[12] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFloat_Type, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_GUARD_BOTH_FLOAT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_GUARD_BOTH_FLOAT_data_holes[1];

// _DELETE_DEREFplus_GUARD_BOTH_INT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_GUARD_BOTH_INT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 6d                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 c1 00 00 00                jmp     0x139 <_JIT_ENTRY+0x139>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 12                         js      0xb0 <_JIT_ENTRY+0xb0>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 74 3e                         je      0xee <_JIT_ENTRY+0xee>
// b0: 48 8b 4b f0                   movq    -0x10(%rbx), %rcx
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  PyLong_Type
// be: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// c2: 75 4d                         jne     0x111 <_JIT_ENTRY+0x111>
// c4: 48 8b 4b f8                   movq    -0x8(%rbx), %rcx
// c8: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// cc: 75 43                         jne     0x111 <_JIT_ENTRY+0x111>
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _JIT_CONTINUE
// d8: 4c 89 f7                      movq    %r14, %rdi
// db: 48 89 de                      movq    %rbx, %rsi
// de: 4c 89 fa                      movq    %r15, %rdx
// e1: 48 83 c4 08                   addq    $0x8, %rsp
// e5: 5b                            popq    %rbx
// e6: 41 5c                         popq    %r12
// e8: 41 5e                         popq    %r14
// ea: 41 5f                         popq    %r15
// ec: ff e0                         jmpq    *%rax
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 e7                      movq    %r12, %rdi
// fb: ff d0                         callq   *%rax
// fd: 48 8b 4b f0                   movq    -0x10(%rbx), %rcx
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  PyLong_Type
// 10b: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 10f: 74 b3                         je      0xc4 <_JIT_ENTRY+0xc4>
// 111: 4c 29 f3                      subq    %r14, %rbx
// 114: 48 83 c3 b8                   addq    $-0x48, %rbx
// 118: 48 c1 eb 03                   shrq    $0x3, %rbx
// 11c: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 120: 49 8b 06                      movq    (%r14), %rax
// 123: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000125:  R_X86_64_64  _JIT_TARGET
// 12d: 89 c9                         movl    %ecx, %ecx
// 12f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 133: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 139: 48 83 c4 08                   addq    $0x8, %rsp
// 13d: 5b                            popq    %rbx
// 13e: 41 5c                         popq    %r12
// 140: 41 5e                         popq    %r14
// 142: 41 5f                         popq    %r15
// 144: c3                            retq
// 145: 
static const unsigned char _DELETE_DEREFplus_GUARD_BOTH_INT_code_body[326] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x6d, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xc1, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x3e, 0x48, 0x8b, 0x4b, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x4d, 0x48, 0x8b, 0x4b, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x75, 0x43, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x4b, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x74, 0xb3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_GUARD_BOTH_INT_code_holes[12] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_GUARD_BOTH_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_GUARD_BOTH_INT_data_holes[1];

// _DELETE_DEREFplus_GUARD_BOTH_UNICODE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_GUARD_BOTH_UNICODE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 6d                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 c1 00 00 00                jmp     0x139 <_JIT_ENTRY+0x139>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 12                         js      0xb0 <_JIT_ENTRY+0xb0>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 74 3e                         je      0xee <_JIT_ENTRY+0xee>
// b0: 48 8b 4b f0                   movq    -0x10(%rbx), %rcx
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  PyUnicode_Type
// be: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// c2: 75 4d                         jne     0x111 <_JIT_ENTRY+0x111>
// c4: 48 8b 4b f8                   movq    -0x8(%rbx), %rcx
// c8: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// cc: 75 43                         jne     0x111 <_JIT_ENTRY+0x111>
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _JIT_CONTINUE
// d8: 4c 89 f7                      movq    %r14, %rdi
// db: 48 89 de                      movq    %rbx, %rsi
// de: 4c 89 fa                      movq    %r15, %rdx
// e1: 48 83 c4 08                   addq    $0x8, %rsp
// e5: 5b                            popq    %rbx
// e6: 41 5c                         popq    %r12
// e8: 41 5e                         popq    %r14
// ea: 41 5f                         popq    %r15
// ec: ff e0                         jmpq    *%rax
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_Dealloc
// f8: 4c 89 e7                      movq    %r12, %rdi
// fb: ff d0                         callq   *%rax
// fd: 48 8b 4b f0                   movq    -0x10(%rbx), %rcx
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  PyUnicode_Type
// 10b: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 10f: 74 b3                         je      0xc4 <_JIT_ENTRY+0xc4>
// 111: 4c 29 f3                      subq    %r14, %rbx
// 114: 48 83 c3 b8                   addq    $-0x48, %rbx
// 118: 48 c1 eb 03                   shrq    $0x3, %rbx
// 11c: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 120: 49 8b 06                      movq    (%r14), %rax
// 123: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000125:  R_X86_64_64  _JIT_TARGET
// 12d: 89 c9                         movl    %ecx, %ecx
// 12f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 133: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 139: 48 83 c4 08                   addq    $0x8, %rsp
// 13d: 5b                            popq    %rbx
// 13e: 41 5c                         popq    %r12
// 140: 41 5e                         popq    %r14
// 142: 41 5f                         popq    %r15
// 144: c3                            retq
// 145: 
static const unsigned char _DELETE_DEREFplus_GUARD_BOTH_UNICODE_code_body[326] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x6d, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xc1, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x3e, 0x48, 0x8b, 0x4b, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x75, 0x4d, 0x48, 0x8b, 0x4b, 0xf8, 0x48, 0x39, 0x41, 0x08, 0x75, 0x43, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x4b, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x74, 0xb3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_GUARD_BOTH_UNICODE_code_holes[12] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_GUARD_BOTH_UNICODE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_GUARD_BOTH_UNICODE_data_holes[1];

// _DELETE_DEREFplus_GUARD_BUILTINS_VERSION
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_GUARD_BUILTINS_VERSION.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 6d                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 cd 00 00 00                jmp     0x145 <_JIT_ENTRY+0x145>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 12                         js      0xb0 <_JIT_ENTRY+0xb0>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 74 4a                         je      0xfa <_JIT_ENTRY+0xfa>
// b0: 49 8b 46 20                   movq    0x20(%r14), %rax
// b4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b6:  R_X86_64_64  PyDict_Type
// be: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// c2: 75 59                         jne     0x11d <_JIT_ENTRY+0x11d>
// c4: 48 8b 40 20                   movq    0x20(%rax), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_OPERAND
// d2: 0f b7 c9                      movzwl  %cx, %ecx
// d5: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// d8: 75 43                         jne     0x11d <_JIT_ENTRY+0x11d>
// da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dc:  R_X86_64_64  _JIT_CONTINUE
// e4: 4c 89 f7                      movq    %r14, %rdi
// e7: 48 89 de                      movq    %rbx, %rsi
// ea: 4c 89 fa                      movq    %r15, %rdx
// ed: 48 83 c4 08                   addq    $0x8, %rsp
// f1: 5b                            popq    %rbx
// f2: 41 5c                         popq    %r12
// f4: 41 5e                         popq    %r14
// f6: 41 5f                         popq    %r15
// f8: ff e0                         jmpq    *%rax
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_Dealloc
// 104: 4c 89 e7                      movq    %r12, %rdi
// 107: ff d0                         callq   *%rax
// 109: 49 8b 46 20                   movq    0x20(%r14), %rax
// 10d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010f:  R_X86_64_64  PyDict_Type
// 117: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 11b: 74 a7                         je      0xc4 <_JIT_ENTRY+0xc4>
// 11d: 4c 29 f3                      subq    %r14, %rbx
// 120: 48 83 c3 b8                   addq    $-0x48, %rbx
// 124: 48 c1 eb 03                   shrq    $0x3, %rbx
// 128: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 12c: 49 8b 06                      movq    (%r14), %rax
// 12f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000131:  R_X86_64_64  _JIT_TARGET
// 139: 89 c9                         movl    %ecx, %ecx
// 13b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 13f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 145: 48 83 c4 08                   addq    $0x8, %rsp
// 149: 5b                            popq    %rbx
// 14a: 41 5c                         popq    %r12
// 14c: 41 5e                         popq    %r14
// 14e: 41 5f                         popq    %r15
// 150: c3                            retq
// 151: 
static const unsigned char _DELETE_DEREFplus_GUARD_BUILTINS_VERSION_code_body[338] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x6d, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xcd, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x4a, 0x49, 0x8b, 0x46, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x59, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x43, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x46, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0xa7, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_GUARD_BUILTINS_VERSION_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_GUARD_BUILTINS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_GUARD_BUILTINS_VERSION_data_holes[1];

// _DELETE_DEREFplus_GUARD_DORV_VALUES
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_GUARD_DORV_VALUES.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 38                         jle     0x75 <_JIT_ENTRY+0x75>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5a                         jns     0x9b <_JIT_ENTRY+0x9b>
// 41: eb 6a                         jmp     0xad <_JIT_ENTRY+0xad>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: eb 6a                         jmp     0xdf <_JIT_ENTRY+0xdf>
// 75: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000077:  R_X86_64_64  .rodata.str1.1
// 7f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000081:  R_X86_64_64  _Py_NegativeRefcount
// 89: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8e: 4c 89 e2                      movq    %r12, %rdx
// 91: ff d0                         callq   *%rax
// 93: 49 8b 04 24                   movq    (%r12), %rax
// 97: 85 c0                         testl   %eax, %eax
// 99: 78 12                         js      0xad <_JIT_ENTRY+0xad>
// 9b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a5: ff d0                         callq   *%rax
// a7: 49 ff 0c 24                   decq    (%r12)
// ab: 74 3e                         je      0xeb <_JIT_ENTRY+0xeb>
// ad: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// b1: f6 40 e8 01                   testb   $0x1, -0x18(%rax)
// b5: 75 4d                         jne     0x104 <_JIT_ENTRY+0x104>
// b7: 4c 29 f3                      subq    %r14, %rbx
// ba: 48 83 c3 b8                   addq    $-0x48, %rbx
// be: 48 c1 eb 03                   shrq    $0x3, %rbx
// c2: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// c6: 49 8b 06                      movq    (%r14), %rax
// c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cb:  R_X86_64_64  _JIT_TARGET
// d3: 89 c9                         movl    %ecx, %ecx
// d5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// df: 48 83 c4 08                   addq    $0x8, %rsp
// e3: 5b                            popq    %rbx
// e4: 41 5c                         popq    %r12
// e6: 41 5e                         popq    %r14
// e8: 41 5f                         popq    %r15
// ea: c3                            retq
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _Py_Dealloc
// f5: 4c 89 e7                      movq    %r12, %rdi
// f8: ff d0                         callq   *%rax
// fa: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// fe: f6 40 e8 01                   testb   $0x1, -0x18(%rax)
// 102: 74 b3                         je      0xb7 <_JIT_ENTRY+0xb7>
// 104: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000106:  R_X86_64_64  _JIT_CONTINUE
// 10e: 4c 89 f7                      movq    %r14, %rdi
// 111: 48 89 de                      movq    %rbx, %rsi
// 114: 4c 89 fa                      movq    %r15, %rdx
// 117: 48 83 c4 08                   addq    $0x8, %rsp
// 11b: 5b                            popq    %rbx
// 11c: 41 5c                         popq    %r12
// 11e: 41 5e                         popq    %r14
// 120: 41 5f                         popq    %r15
// 122: ff e0                         jmpq    *%rax
// 124: 
static const unsigned char _DELETE_DEREFplus_GUARD_DORV_VALUES_code_body[293] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x38, 0x85, 0xc0, 0x79, 0x5a, 0xeb, 0x6a, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x6a, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x3e, 0x48, 0x8b, 0x43, 0xf8, 0xf6, 0x40, 0xe8, 0x01, 0x75, 0x4d, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0xf6, 0x40, 0xe8, 0x01, 0x74, 0xb3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_GUARD_DORV_VALUES_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x77, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_GUARD_DORV_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_GUARD_DORV_VALUES_data_holes[1];

// _DELETE_DEREFplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 38                         jle     0x75 <_JIT_ENTRY+0x75>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5a                         jns     0x9b <_JIT_ENTRY+0x9b>
// 41: eb 6a                         jmp     0xad <_JIT_ENTRY+0xad>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: eb 7e                         jmp     0xf3 <_JIT_ENTRY+0xf3>
// 75: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000077:  R_X86_64_64  .rodata.str1.1
// 7f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000081:  R_X86_64_64  _Py_NegativeRefcount
// 89: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8e: 4c 89 e2                      movq    %r12, %rdx
// 91: ff d0                         callq   *%rax
// 93: 49 8b 04 24                   movq    (%r12), %rax
// 97: 85 c0                         testl   %eax, %eax
// 99: 78 12                         js      0xad <_JIT_ENTRY+0xad>
// 9b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a5: ff d0                         callq   *%rax
// a7: 49 ff 0c 24                   decq    (%r12)
// ab: 74 52                         je      0xff <_JIT_ENTRY+0xff>
// ad: 48 8b 7b f8                   movq    -0x8(%rbx), %rdi
// b1: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// b5: 75 61                         jne     0x118 <_JIT_ENTRY+0x118>
// b7: 48 8d 77 e8                   leaq    -0x18(%rdi), %rsi
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _PyObject_MakeInstanceAttributesFromDict
// c5: ff d0                         callq   *%rax
// c7: 84 c0                         testb   %al, %al
// c9: 75 4d                         jne     0x118 <_JIT_ENTRY+0x118>
// cb: 4c 29 f3                      subq    %r14, %rbx
// ce: 48 83 c3 b8                   addq    $-0x48, %rbx
// d2: 48 c1 eb 03                   shrq    $0x3, %rbx
// d6: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// da: 49 8b 06                      movq    (%r14), %rax
// dd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000df:  R_X86_64_64  _JIT_TARGET
// e7: 89 c9                         movl    %ecx, %ecx
// e9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// ed: 48 05 c8 00 00 00             addq    $0xc8, %rax
// f3: 48 83 c4 08                   addq    $0x8, %rsp
// f7: 5b                            popq    %rbx
// f8: 41 5c                         popq    %r12
// fa: 41 5e                         popq    %r14
// fc: 41 5f                         popq    %r15
// fe: c3                            retq
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_Dealloc
// 109: 4c 89 e7                      movq    %r12, %rdi
// 10c: ff d0                         callq   *%rax
// 10e: 48 8b 7b f8                   movq    -0x8(%rbx), %rdi
// 112: f6 47 e8 01                   testb   $0x1, -0x18(%rdi)
// 116: 74 9f                         je      0xb7 <_JIT_ENTRY+0xb7>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _JIT_CONTINUE
// 122: 4c 89 f7                      movq    %r14, %rdi
// 125: 48 89 de                      movq    %rbx, %rsi
// 128: 4c 89 fa                      movq    %r15, %rdx
// 12b: 48 83 c4 08                   addq    $0x8, %rsp
// 12f: 5b                            popq    %rbx
// 130: 41 5c                         popq    %r12
// 132: 41 5e                         popq    %r14
// 134: 41 5f                         popq    %r15
// 136: ff e0                         jmpq    *%rax
// 138: 
static const unsigned char _DELETE_DEREFplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_body[313] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x38, 0x85, 0xc0, 0x79, 0x5a, 0xeb, 0x6a, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x7e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x52, 0x48, 0x8b, 0x7b, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x75, 0x61, 0x48, 0x8d, 0x77, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x84, 0xc0, 0x75, 0x4d, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x7b, 0xf8, 0xf6, 0x47, 0xe8, 0x01, 0x74, 0x9f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x77, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_MakeInstanceAttributesFromDict, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT_data_holes[1];

// _DELETE_DEREFplus_GUARD_GLOBALS_VERSION
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_GUARD_GLOBALS_VERSION.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 6d                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 cd 00 00 00                jmp     0x145 <_JIT_ENTRY+0x145>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 12                         js      0xb0 <_JIT_ENTRY+0xb0>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 74 4a                         je      0xfa <_JIT_ENTRY+0xfa>
// b0: 49 8b 46 18                   movq    0x18(%r14), %rax
// b4: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b6:  R_X86_64_64  PyDict_Type
// be: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// c2: 75 59                         jne     0x11d <_JIT_ENTRY+0x11d>
// c4: 48 8b 40 20                   movq    0x20(%rax), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_OPERAND
// d2: 0f b7 c9                      movzwl  %cx, %ecx
// d5: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// d8: 75 43                         jne     0x11d <_JIT_ENTRY+0x11d>
// da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dc:  R_X86_64_64  _JIT_CONTINUE
// e4: 4c 89 f7                      movq    %r14, %rdi
// e7: 48 89 de                      movq    %rbx, %rsi
// ea: 4c 89 fa                      movq    %r15, %rdx
// ed: 48 83 c4 08                   addq    $0x8, %rsp
// f1: 5b                            popq    %rbx
// f2: 41 5c                         popq    %r12
// f4: 41 5e                         popq    %r14
// f6: 41 5f                         popq    %r15
// f8: ff e0                         jmpq    *%rax
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_Dealloc
// 104: 4c 89 e7                      movq    %r12, %rdi
// 107: ff d0                         callq   *%rax
// 109: 49 8b 46 18                   movq    0x18(%r14), %rax
// 10d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010f:  R_X86_64_64  PyDict_Type
// 117: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 11b: 74 a7                         je      0xc4 <_JIT_ENTRY+0xc4>
// 11d: 4c 29 f3                      subq    %r14, %rbx
// 120: 48 83 c3 b8                   addq    $-0x48, %rbx
// 124: 48 c1 eb 03                   shrq    $0x3, %rbx
// 128: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 12c: 49 8b 06                      movq    (%r14), %rax
// 12f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000131:  R_X86_64_64  _JIT_TARGET
// 139: 89 c9                         movl    %ecx, %ecx
// 13b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 13f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 145: 48 83 c4 08                   addq    $0x8, %rsp
// 149: 5b                            popq    %rbx
// 14a: 41 5c                         popq    %r12
// 14c: 41 5e                         popq    %r14
// 14e: 41 5f                         popq    %r15
// 150: c3                            retq
// 151: 
static const unsigned char _DELETE_DEREFplus_GUARD_GLOBALS_VERSION_code_body[338] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x6d, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xcd, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x4a, 0x49, 0x8b, 0x46, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0x59, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x39, 0x48, 0x0c, 0x75, 0x43, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x46, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0xa7, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_GUARD_GLOBALS_VERSION_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_GUARD_GLOBALS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_GUARD_GLOBALS_VERSION_data_holes[1];

// _DELETE_DEREFplus_GUARD_IS_FALSE_POP
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_GUARD_IS_FALSE_POP.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 7c                         jmp     0xbf <_JIT_ENTRY+0xbf>
// 43: 48 8b 33                      movq    (%rbx), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 49 29 de                      subq    %rbx, %r14
// 65: 49 83 c6 b8                   addq    $-0x48, %r14
// 69: 49 c1 ee 03                   shrq    $0x3, %r14
// 6d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 a3 00 00 00                jmp     0x11b <_JIT_ENTRY+0x11b>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 21                         js      0xbf <_JIT_ENTRY+0xbf>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 75 0f                         jne     0xbf <_JIT_ENTRY+0xbf>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_Dealloc
// ba: 4c 89 e7                      movq    %r12, %rdi
// bd: ff d0                         callq   *%rax
// bf: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c5:  R_X86_64_64  _Py_TrueStruct
// cd: 49 39 46 f8                   cmpq    %rax, -0x8(%r14)
// d1: 49 0f 44 f6                   cmoveq  %r14, %rsi
// d5: 74 1d                         je      0xf4 <_JIT_ENTRY+0xf4>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _JIT_CONTINUE
// e1: 48 89 df                      movq    %rbx, %rdi
// e4: 4c 89 fa                      movq    %r15, %rdx
// e7: 48 83 c4 08                   addq    $0x8, %rsp
// eb: 5b                            popq    %rbx
// ec: 41 5c                         popq    %r12
// ee: 41 5e                         popq    %r14
// f0: 41 5f                         popq    %r15
// f2: ff e0                         jmpq    *%rax
// f4: 48 29 de                      subq    %rbx, %rsi
// f7: 48 83 c6 b8                   addq    $-0x48, %rsi
// fb: 48 c1 ee 03                   shrq    $0x3, %rsi
// ff: 89 73 40                      movl    %esi, 0x40(%rbx)
// 102: 48 8b 03                      movq    (%rbx), %rax
// 105: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000107:  R_X86_64_64  _JIT_TARGET
// 10f: 89 c9                         movl    %ecx, %ecx
// 111: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 115: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11b: 48 83 c4 08                   addq    $0x8, %rsp
// 11f: 5b                            popq    %rbx
// 120: 41 5c                         popq    %r12
// 122: 41 5e                         popq    %r14
// 124: 41 5f                         popq    %r15
// 126: c3                            retq
// 127: 
static const unsigned char _DELETE_DEREFplus_GUARD_IS_FALSE_POP_code_body[296] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x46, 0xf8, 0x49, 0x0f, 0x44, 0xf6, 0x74, 0x1d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_GUARD_IS_FALSE_POP_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_GUARD_IS_FALSE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_GUARD_IS_FALSE_POP_data_holes[1];

// _DELETE_DEREFplus_GUARD_IS_NONE_POP
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_GUARD_IS_NONE_POP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 7c                         jmp     0xbf <_JIT_ENTRY+0xbf>
// 43: 48 8b 33                      movq    (%rbx), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 49 29 de                      subq    %rbx, %r14
// 65: 49 83 c6 b8                   addq    $-0x48, %r14
// 69: 49 c1 ee 03                   shrq    $0x3, %r14
// 6d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 86 00 00 00                jmp     0xfe <_JIT_ENTRY+0xfe>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 21                         js      0xbf <_JIT_ENTRY+0xbf>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 75 0f                         jne     0xbf <_JIT_ENTRY+0xbf>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_Dealloc
// ba: 4c 89 e7                      movq    %r12, %rdi
// bd: ff d0                         callq   *%rax
// bf: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c5:  R_X86_64_64  _Py_NoneStruct
// cd: 49 39 46 f8                   cmpq    %rax, -0x8(%r14)
// d1: 49 0f 45 f6                   cmovneq %r14, %rsi
// d5: 74 33                         je      0x10a <_JIT_ENTRY+0x10a>
// d7: 48 29 de                      subq    %rbx, %rsi
// da: 48 83 c6 b8                   addq    $-0x48, %rsi
// de: 48 c1 ee 03                   shrq    $0x3, %rsi
// e2: 89 73 40                      movl    %esi, 0x40(%rbx)
// e5: 48 8b 03                      movq    (%rbx), %rax
// e8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ea:  R_X86_64_64  _JIT_TARGET
// f2: 89 c9                         movl    %ecx, %ecx
// f4: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// f8: 48 05 c8 00 00 00             addq    $0xc8, %rax
// fe: 48 83 c4 08                   addq    $0x8, %rsp
// 102: 5b                            popq    %rbx
// 103: 41 5c                         popq    %r12
// 105: 41 5e                         popq    %r14
// 107: 41 5f                         popq    %r15
// 109: c3                            retq
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _JIT_CONTINUE
// 114: 48 89 df                      movq    %rbx, %rdi
// 117: 4c 89 fa                      movq    %r15, %rdx
// 11a: 48 83 c4 08                   addq    $0x8, %rsp
// 11e: 5b                            popq    %rbx
// 11f: 41 5c                         popq    %r12
// 121: 41 5e                         popq    %r14
// 123: 41 5f                         popq    %r15
// 125: ff e0                         jmpq    *%rax
// 127: 
static const unsigned char _DELETE_DEREFplus_GUARD_IS_NONE_POP_code_body[296] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x86, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x46, 0xf8, 0x49, 0x0f, 0x45, 0xf6, 0x74, 0x33, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_GUARD_IS_NONE_POP_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_GUARD_IS_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_GUARD_IS_NONE_POP_data_holes[1];

// _DELETE_DEREFplus_GUARD_IS_NOT_NONE_POP
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_GUARD_IS_NOT_NONE_POP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 71                         jmp     0xb4 <_JIT_ENTRY+0xb4>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 1f 01 00 00                jmp     0x197 <_JIT_ENTRY+0x197>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 16                         js      0xb4 <_JIT_ENTRY+0xb4>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 0f 84 95 00 00 00             je      0x149 <_JIT_ENTRY+0x149>
// b4: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// b8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ba:  R_X86_64_64  _Py_NoneStruct
// c2: 49 39 c4                      cmpq    %rax, %r12
// c5: 0f 84 a4 00 00 00             je      0x16f <_JIT_ENTRY+0x16f>
// cb: 49 8b 04 24                   movq    (%r12), %rax
// cf: 48 85 c0                      testq   %rax, %rax
// d2: 7e 0a                         jle     0xde <_JIT_ENTRY+0xde>
// d4: 48 83 c3 f8                   addq    $-0x8, %rbx
// d8: 85 c0                         testl   %eax, %eax
// da: 79 2c                         jns     0x108 <_JIT_ENTRY+0x108>
// dc: eb 4b                         jmp     0x129 <_JIT_ENTRY+0x129>
// de: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e0:  R_X86_64_64  .rodata.str1.1
// e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ea:  R_X86_64_64  _Py_NegativeRefcount
// f2: be 14 0d 00 00                movl    $0xd14, %esi            # imm = 0xD14
// f7: 4c 89 e2                      movq    %r12, %rdx
// fa: ff d0                         callq   *%rax
// fc: 49 8b 04 24                   movq    (%r12), %rax
// 100: 48 83 c3 f8                   addq    $-0x8, %rbx
// 104: 85 c0                         testl   %eax, %eax
// 106: 78 21                         js      0x129 <_JIT_ENTRY+0x129>
// 108: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 112: ff d0                         callq   *%rax
// 114: 49 ff 0c 24                   decq    (%r12)
// 118: 75 0f                         jne     0x129 <_JIT_ENTRY+0x129>
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  _Py_Dealloc
// 124: 4c 89 e7                      movq    %r12, %rdi
// 127: ff d0                         callq   *%rax
// 129: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012b:  R_X86_64_64  _JIT_CONTINUE
// 133: 4c 89 f7                      movq    %r14, %rdi
// 136: 48 89 de                      movq    %rbx, %rsi
// 139: 4c 89 fa                      movq    %r15, %rdx
// 13c: 48 83 c4 08                   addq    $0x8, %rsp
// 140: 5b                            popq    %rbx
// 141: 41 5c                         popq    %r12
// 143: 41 5e                         popq    %r14
// 145: 41 5f                         popq    %r15
// 147: ff e0                         jmpq    *%rax
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_Dealloc
// 153: 4c 89 e7                      movq    %r12, %rdi
// 156: ff d0                         callq   *%rax
// 158: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 15c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015e:  R_X86_64_64  _Py_NoneStruct
// 166: 49 39 c4                      cmpq    %rax, %r12
// 169: 0f 85 5c ff ff ff             jne     0xcb <_JIT_ENTRY+0xcb>
// 16f: 4c 29 f3                      subq    %r14, %rbx
// 172: 48 83 c3 b8                   addq    $-0x48, %rbx
// 176: 48 c1 eb 03                   shrq    $0x3, %rbx
// 17a: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 17e: 49 8b 06                      movq    (%r14), %rax
// 181: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000183:  R_X86_64_64  _JIT_TARGET
// 18b: 89 c9                         movl    %ecx, %ecx
// 18d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 191: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 197: 48 83 c4 08                   addq    $0x8, %rsp
// 19b: 5b                            popq    %rbx
// 19c: 41 5c                         popq    %r12
// 19e: 41 5e                         popq    %r14
// 1a0: 41 5f                         popq    %r15
// 1a2: c3                            retq
// 1a3: 
static const unsigned char _DELETE_DEREFplus_GUARD_IS_NOT_NONE_POP_code_body[420] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x71, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x1f, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc4, 0x0f, 0x84, 0xa4, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x79, 0x2c, 0xeb, 0x4b, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x14, 0x0d, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc4, 0x0f, 0x85, 0x5c, 0xff, 0xff, 0xff, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_GUARD_IS_NOT_NONE_POP_code_holes[16] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_GUARD_IS_NOT_NONE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_GUARD_IS_NOT_NONE_POP_data_holes[1];

// _DELETE_DEREFplus_GUARD_IS_TRUE_POP
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_GUARD_IS_TRUE_POP.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 7c                         jmp     0xbf <_JIT_ENTRY+0xbf>
// 43: 48 8b 33                      movq    (%rbx), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 49 29 de                      subq    %rbx, %r14
// 65: 49 83 c6 b8                   addq    $-0x48, %r14
// 69: 49 c1 ee 03                   shrq    $0x3, %r14
// 6d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 a3 00 00 00                jmp     0x11b <_JIT_ENTRY+0x11b>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 21                         js      0xbf <_JIT_ENTRY+0xbf>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 75 0f                         jne     0xbf <_JIT_ENTRY+0xbf>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_Dealloc
// ba: 4c 89 e7                      movq    %r12, %rdi
// bd: ff d0                         callq   *%rax
// bf: 49 8d 76 f8                   leaq    -0x8(%r14), %rsi
// c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c5:  R_X86_64_64  _Py_FalseStruct
// cd: 49 39 46 f8                   cmpq    %rax, -0x8(%r14)
// d1: 49 0f 44 f6                   cmoveq  %r14, %rsi
// d5: 74 1d                         je      0xf4 <_JIT_ENTRY+0xf4>
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _JIT_CONTINUE
// e1: 48 89 df                      movq    %rbx, %rdi
// e4: 4c 89 fa                      movq    %r15, %rdx
// e7: 48 83 c4 08                   addq    $0x8, %rsp
// eb: 5b                            popq    %rbx
// ec: 41 5c                         popq    %r12
// ee: 41 5e                         popq    %r14
// f0: 41 5f                         popq    %r15
// f2: ff e0                         jmpq    *%rax
// f4: 48 29 de                      subq    %rbx, %rsi
// f7: 48 83 c6 b8                   addq    $-0x48, %rsi
// fb: 48 c1 ee 03                   shrq    $0x3, %rsi
// ff: 89 73 40                      movl    %esi, 0x40(%rbx)
// 102: 48 8b 03                      movq    (%rbx), %rax
// 105: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000107:  R_X86_64_64  _JIT_TARGET
// 10f: 89 c9                         movl    %ecx, %ecx
// 111: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 115: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11b: 48 83 c4 08                   addq    $0x8, %rsp
// 11f: 5b                            popq    %rbx
// 120: 41 5c                         popq    %r12
// 122: 41 5e                         popq    %r14
// 124: 41 5f                         popq    %r15
// 126: c3                            retq
// 127: 
static const unsigned char _DELETE_DEREFplus_GUARD_IS_TRUE_POP_code_body[296] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x76, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x46, 0xf8, 0x49, 0x0f, 0x44, 0xf6, 0x74, 0x1d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0x29, 0xde, 0x48, 0x83, 0xc6, 0xb8, 0x48, 0xc1, 0xee, 0x03, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_GUARD_IS_TRUE_POP_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_GUARD_IS_TRUE_POP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_GUARD_IS_TRUE_POP_data_holes[1];

// _DELETE_DEREFplus_GUARD_KEYS_VERSION
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_GUARD_KEYS_VERSION.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 7c                         jmp     0xbf <_JIT_ENTRY+0xbf>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 ad 00 00 00                jmp     0x125 <_JIT_ENTRY+0x125>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 21                         js      0xbf <_JIT_ENTRY+0xbf>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 75 0f                         jne     0xbf <_JIT_ENTRY+0xbf>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_Dealloc
// ba: 4c 89 e7                      movq    %r12, %rdi
// bd: ff d0                         callq   *%rax
// bf: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// c3: 48 8b 40 08                   movq    0x8(%rax), %rax
// c7: 48 8b 80 70 03 00 00          movq    0x370(%rax), %rax
// ce: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d0:  R_X86_64_64  _JIT_OPERAND
// d8: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
// db: 75 20                         jne     0xfd <_JIT_ENTRY+0xfd>
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _JIT_CONTINUE
// e7: 4c 89 f7                      movq    %r14, %rdi
// ea: 48 89 de                      movq    %rbx, %rsi
// ed: 4c 89 fa                      movq    %r15, %rdx
// f0: 48 83 c4 08                   addq    $0x8, %rsp
// f4: 5b                            popq    %rbx
// f5: 41 5c                         popq    %r12
// f7: 41 5e                         popq    %r14
// f9: 41 5f                         popq    %r15
// fb: ff e0                         jmpq    *%rax
// fd: 4c 29 f3                      subq    %r14, %rbx
// 100: 48 83 c3 b8                   addq    $-0x48, %rbx
// 104: 48 c1 eb 03                   shrq    $0x3, %rbx
// 108: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 10c: 49 8b 06                      movq    (%r14), %rax
// 10f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000111:  R_X86_64_64  _JIT_TARGET
// 119: 89 c9                         movl    %ecx, %ecx
// 11b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 11f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 125: 48 83 c4 08                   addq    $0x8, %rsp
// 129: 5b                            popq    %rbx
// 12a: 41 5c                         popq    %r12
// 12c: 41 5e                         popq    %r14
// 12e: 41 5f                         popq    %r15
// 130: c3                            retq
// 131: 
static const unsigned char _DELETE_DEREFplus_GUARD_KEYS_VERSION_code_body[306] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xad, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x80, 0x70, 0x03, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_GUARD_KEYS_VERSION_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x111, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_GUARD_KEYS_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_GUARD_KEYS_VERSION_data_holes[1];

// _DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_LIST
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_LIST.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 6d                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 b3 00 00 00                jmp     0x12b <_JIT_ENTRY+0x12b>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 12                         js      0xb0 <_JIT_ENTRY+0xb0>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 74 37                         je      0xe7 <_JIT_ENTRY+0xe7>
// b0: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// b4: 48 8b 48 18                   movq    0x18(%rax), %rcx
// b8: 48 85 c9                      testq   %rcx, %rcx
// bb: 74 46                         je      0x103 <_JIT_ENTRY+0x103>
// bd: 48 8b 40 10                   movq    0x10(%rax), %rax
// c1: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// c5: 7d 3c                         jge     0x103 <_JIT_ENTRY+0x103>
// c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c9:  R_X86_64_64  _JIT_CONTINUE
// d1: 4c 89 f7                      movq    %r14, %rdi
// d4: 48 89 de                      movq    %rbx, %rsi
// d7: 4c 89 fa                      movq    %r15, %rdx
// da: 48 83 c4 08                   addq    $0x8, %rsp
// de: 5b                            popq    %rbx
// df: 41 5c                         popq    %r12
// e1: 41 5e                         popq    %r14
// e3: 41 5f                         popq    %r15
// e5: ff e0                         jmpq    *%rax
// e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e9:  R_X86_64_64  _Py_Dealloc
// f1: 4c 89 e7                      movq    %r12, %rdi
// f4: ff d0                         callq   *%rax
// f6: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// fa: 48 8b 48 18                   movq    0x18(%rax), %rcx
// fe: 48 85 c9                      testq   %rcx, %rcx
// 101: 75 ba                         jne     0xbd <_JIT_ENTRY+0xbd>
// 103: 4c 29 f3                      subq    %r14, %rbx
// 106: 48 83 c3 b8                   addq    $-0x48, %rbx
// 10a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 10e: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 112: 49 8b 06                      movq    (%r14), %rax
// 115: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000117:  R_X86_64_64  _JIT_TARGET
// 11f: 89 c9                         movl    %ecx, %ecx
// 121: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 125: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 12b: 48 83 c4 08                   addq    $0x8, %rsp
// 12f: 5b                            popq    %rbx
// 130: 41 5c                         popq    %r12
// 132: 41 5e                         popq    %r14
// 134: 41 5f                         popq    %r15
// 136: c3                            retq
// 137: 
static const unsigned char _DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_LIST_code_body[312] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x6d, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xb3, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x37, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x46, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x75, 0xba, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_LIST_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_LIST_data_holes[1];

// _DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_RANGE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_RANGE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 6d                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 a5 00 00 00                jmp     0x11d <_JIT_ENTRY+0x11d>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 12                         js      0xb0 <_JIT_ENTRY+0xb0>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 74 2b                         je      0xdb <_JIT_ENTRY+0xdb>
// b0: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// b4: 48 83 78 20 00                cmpq    $0x0, 0x20(%rax)
// b9: 7e 3a                         jle     0xf5 <_JIT_ENTRY+0xf5>
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  _JIT_CONTINUE
// c5: 4c 89 f7                      movq    %r14, %rdi
// c8: 48 89 de                      movq    %rbx, %rsi
// cb: 4c 89 fa                      movq    %r15, %rdx
// ce: 48 83 c4 08                   addq    $0x8, %rsp
// d2: 5b                            popq    %rbx
// d3: 41 5c                         popq    %r12
// d5: 41 5e                         popq    %r14
// d7: 41 5f                         popq    %r15
// d9: ff e0                         jmpq    *%rax
// db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dd:  R_X86_64_64  _Py_Dealloc
// e5: 4c 89 e7                      movq    %r12, %rdi
// e8: ff d0                         callq   *%rax
// ea: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// ee: 48 83 78 20 00                cmpq    $0x0, 0x20(%rax)
// f3: 7f c6                         jg      0xbb <_JIT_ENTRY+0xbb>
// f5: 4c 29 f3                      subq    %r14, %rbx
// f8: 48 83 c3 b8                   addq    $-0x48, %rbx
// fc: 48 c1 eb 03                   shrq    $0x3, %rbx
// 100: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 104: 49 8b 06                      movq    (%r14), %rax
// 107: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000109:  R_X86_64_64  _JIT_TARGET
// 111: 89 c9                         movl    %ecx, %ecx
// 113: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 117: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11d: 48 83 c4 08                   addq    $0x8, %rsp
// 121: 5b                            popq    %rbx
// 122: 41 5c                         popq    %r12
// 124: 41 5e                         popq    %r14
// 126: 41 5f                         popq    %r15
// 128: c3                            retq
// 129: 
static const unsigned char _DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_RANGE_code_body[298] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x6d, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xa5, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2b, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x83, 0x78, 0x20, 0x00, 0x7e, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x83, 0x78, 0x20, 0x00, 0x7f, 0xc6, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_RANGE_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xdd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_RANGE_data_holes[1];

// _DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_TUPLE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_TUPLE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 6d                         jmp     0xb0 <_JIT_ENTRY+0xb0>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 b3 00 00 00                jmp     0x12b <_JIT_ENTRY+0x12b>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 12                         js      0xb0 <_JIT_ENTRY+0xb0>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 74 37                         je      0xe7 <_JIT_ENTRY+0xe7>
// b0: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// b4: 48 8b 48 18                   movq    0x18(%rax), %rcx
// b8: 48 85 c9                      testq   %rcx, %rcx
// bb: 74 46                         je      0x103 <_JIT_ENTRY+0x103>
// bd: 48 8b 40 10                   movq    0x10(%rax), %rax
// c1: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
// c5: 7d 3c                         jge     0x103 <_JIT_ENTRY+0x103>
// c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c9:  R_X86_64_64  _JIT_CONTINUE
// d1: 4c 89 f7                      movq    %r14, %rdi
// d4: 48 89 de                      movq    %rbx, %rsi
// d7: 4c 89 fa                      movq    %r15, %rdx
// da: 48 83 c4 08                   addq    $0x8, %rsp
// de: 5b                            popq    %rbx
// df: 41 5c                         popq    %r12
// e1: 41 5e                         popq    %r14
// e3: 41 5f                         popq    %r15
// e5: ff e0                         jmpq    *%rax
// e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e9:  R_X86_64_64  _Py_Dealloc
// f1: 4c 89 e7                      movq    %r12, %rdi
// f4: ff d0                         callq   *%rax
// f6: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// fa: 48 8b 48 18                   movq    0x18(%rax), %rcx
// fe: 48 85 c9                      testq   %rcx, %rcx
// 101: 75 ba                         jne     0xbd <_JIT_ENTRY+0xbd>
// 103: 4c 29 f3                      subq    %r14, %rbx
// 106: 48 83 c3 b8                   addq    $-0x48, %rbx
// 10a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 10e: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 112: 49 8b 06                      movq    (%r14), %rax
// 115: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000117:  R_X86_64_64  _JIT_TARGET
// 11f: 89 c9                         movl    %ecx, %ecx
// 121: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 125: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 12b: 48 83 c4 08                   addq    $0x8, %rsp
// 12f: 5b                            popq    %rbx
// 130: 41 5c                         popq    %r12
// 132: 41 5e                         popq    %r14
// 134: 41 5f                         popq    %r15
// 136: c3                            retq
// 137: 
static const unsigned char _DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_TUPLE_code_body[312] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x6d, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xb3, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x37, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x46, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x85, 0xc9, 0x75, 0xba, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_TUPLE_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_TUPLE_data_holes[1];

// _DELETE_DEREFplus_GUARD_TYPE_VERSION
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_GUARD_TYPE_VERSION.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 7c                         jmp     0xbf <_JIT_ENTRY+0xbf>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 a9 00 00 00                jmp     0x121 <_JIT_ENTRY+0x121>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 21                         js      0xbf <_JIT_ENTRY+0xbf>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 75 0f                         jne     0xbf <_JIT_ENTRY+0xbf>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_Dealloc
// ba: 4c 89 e7                      movq    %r12, %rdi
// bd: ff d0                         callq   *%rax
// bf: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// c3: 48 8b 40 08                   movq    0x8(%rax), %rax
// c7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c9:  R_X86_64_64  _JIT_OPERAND
// d1: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// d7: 75 20                         jne     0xf9 <_JIT_ENTRY+0xf9>
// d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000db:  R_X86_64_64  _JIT_CONTINUE
// e3: 4c 89 f7                      movq    %r14, %rdi
// e6: 48 89 de                      movq    %rbx, %rsi
// e9: 4c 89 fa                      movq    %r15, %rdx
// ec: 48 83 c4 08                   addq    $0x8, %rsp
// f0: 5b                            popq    %rbx
// f1: 41 5c                         popq    %r12
// f3: 41 5e                         popq    %r14
// f5: 41 5f                         popq    %r15
// f7: ff e0                         jmpq    *%rax
// f9: 4c 29 f3                      subq    %r14, %rbx
// fc: 48 83 c3 b8                   addq    $-0x48, %rbx
// 100: 48 c1 eb 03                   shrq    $0x3, %rbx
// 104: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 108: 49 8b 06                      movq    (%r14), %rax
// 10b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010d:  R_X86_64_64  _JIT_TARGET
// 115: 89 c9                         movl    %ecx, %ecx
// 117: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 11b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 121: 48 83 c4 08                   addq    $0x8, %rsp
// 125: 5b                            popq    %rbx
// 126: 41 5c                         popq    %r12
// 128: 41 5e                         popq    %r14
// 12a: 41 5f                         popq    %r15
// 12c: c3                            retq
// 12d: 
static const unsigned char _DELETE_DEREFplus_GUARD_TYPE_VERSION_code_body[302] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xa9, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_GUARD_TYPE_VERSION_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xdb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_GUARD_TYPE_VERSION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_GUARD_TYPE_VERSION_data_holes[1];

// _DELETE_DEREFplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 d1                      movq    %rdx, %rcx
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 28                         je      0x57 <_JIT_ENTRY+0x57>
// 2f: 48 89 0c 24                   movq    %rcx, (%rsp)
// 33: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3b: 49 8b 04 24                   movq    (%r12), %rax
// 3f: 48 85 c0                      testq   %rax, %rax
// 42: 7e 52                         jle     0x96 <_JIT_ENTRY+0x96>
// 44: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000046:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4e: 85 c0                         testl   %eax, %eax
// 50: 79 74                         jns     0xc6 <_JIT_ENTRY+0xc6>
// 52: e9 86 00 00 00                jmp     0xdd <_JIT_ENTRY+0xdd>
// 57: 49 8b 36                      movq    (%r14), %rsi
// 5a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005c:  R_X86_64_64  _JIT_OPARG
// 64: 0f b7 d0                      movzwl  %ax, %edx
// 67: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000069:  R_X86_64_64  _PyEval_FormatExcUnbound
// 71: 48 89 cf                      movq    %rcx, %rdi
// 74: ff d0                         callq   *%rax
// 76: 4c 29 f3                      subq    %r14, %rbx
// 79: 48 83 c3 b8                   addq    $-0x48, %rbx
// 7d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 81: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 85: 31 c0                         xorl    %eax, %eax
// 87: 48 83 c4 08                   addq    $0x8, %rsp
// 8b: 5b                            popq    %rbx
// 8c: 41 5c                         popq    %r12
// 8e: 41 5d                         popq    %r13
// 90: 41 5e                         popq    %r14
// 92: 41 5f                         popq    %r15
// 94: 5d                            popq    %rbp
// 95: c3                            retq
// 96: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000098:  R_X86_64_64  .rodata.str1.1
// a0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a2:  R_X86_64_64  _Py_NegativeRefcount
// aa: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// af: 4c 89 e2                      movq    %r12, %rdx
// b2: ff d0                         callq   *%rax
// b4: 49 8b 04 24                   movq    (%r12), %rax
// b8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ba:  R_X86_64_64  _Py_DECREF_DecRefTotal
// c2: 85 c0                         testl   %eax, %eax
// c4: 78 17                         js      0xdd <_JIT_ENTRY+0xdd>
// c6: ff d1                         callq   *%rcx
// c8: 49 ff 0c 24                   decq    (%r12)
// cc: 75 0f                         jne     0xdd <_JIT_ENTRY+0xdd>
// ce: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d0:  R_X86_64_64  _Py_Dealloc
// d8: 4c 89 e7                      movq    %r12, %rdi
// db: ff d0                         callq   *%rax
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _JIT_OPARG
// e7: 0f b7 c0                      movzwl  %ax, %eax
// ea: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// ef: 29 c1                         subl    %eax, %ecx
// f1: 48 63 c1                      movslq  %ecx, %rax
// f4: 4c 8b 24 c3                   movq    (%rbx,%rax,8), %r12
// f8: 49 8b 6c 24 18                movq    0x18(%r12), %rbp
// fd: 8b 45 00                      movl    (%rbp), %eax
// 100: 49 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %r15
// 0000000000000102:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 10a: ff c0                         incl    %eax
// 10c: 74 06                         je      0x114 <_JIT_ENTRY+0x114>
// 10e: 89 45 00                      movl    %eax, (%rbp)
// 111: 41 ff d7                      callq   *%r15
// 114: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000116:  R_X86_64_64  _JIT_OPARG
// 11e: f7 d0                         notl    %eax
// 120: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// 125: 48 98                         cltq
// 127: 48 89 2c c3                   movq    %rbp, (%rbx,%rax,8)
// 12b: 4d 8b 6c 24 10                movq    0x10(%r12), %r13
// 130: 41 8b 45 00                   movl    (%r13), %eax
// 134: ff c0                         incl    %eax
// 136: 74 07                         je      0x13f <_JIT_ENTRY+0x13f>
// 138: 41 89 45 00                   movl    %eax, (%r13)
// 13c: 41 ff d7                      callq   *%r15
// 13f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000141:  R_X86_64_64  _JIT_OPARG
// 149: 0f b7 c0                      movzwl  %ax, %eax
// 14c: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 151: 29 c1                         subl    %eax, %ecx
// 153: 48 63 c1                      movslq  %ecx, %rax
// 156: 4c 89 2c c3                   movq    %r13, (%rbx,%rax,8)
// 15a: 49 8b 04 24                   movq    (%r12), %rax
// 15e: 48 85 c0                      testq   %rax, %rax
// 161: 7e 06                         jle     0x169 <_JIT_ENTRY+0x169>
// 163: 85 c0                         testl   %eax, %eax
// 165: 79 28                         jns     0x18f <_JIT_ENTRY+0x18f>
// 167: eb 47                         jmp     0x1b0 <_JIT_ENTRY+0x1b0>
// 169: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016b:  R_X86_64_64  .rodata.str1.1
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_NegativeRefcount
// 17d: be 18 0a 00 00                movl    $0xa18, %esi            # imm = 0xA18
// 182: 4c 89 e2                      movq    %r12, %rdx
// 185: ff d0                         callq   *%rax
// 187: 49 8b 04 24                   movq    (%r12), %rax
// 18b: 85 c0                         testl   %eax, %eax
// 18d: 78 21                         js      0x1b0 <_JIT_ENTRY+0x1b0>
// 18f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000191:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 199: ff d0                         callq   *%rax
// 19b: 49 ff 0c 24                   decq    (%r12)
// 19f: 75 0f                         jne     0x1b0 <_JIT_ENTRY+0x1b0>
// 1a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a3:  R_X86_64_64  _Py_Dealloc
// 1ab: 4c 89 e7                      movq    %r12, %rdi
// 1ae: ff d0                         callq   *%rax
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _JIT_OPARG
// 1ba: 0f b7 c0                      movzwl  %ax, %eax
// 1bd: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 1c2: 29 c1                         subl    %eax, %ecx
// 1c4: 48 63 c9                      movslq  %ecx, %rcx
// 1c7: 4c 89 2c cb                   movq    %r13, (%rbx,%rcx,8)
// 1cb: f7 d0                         notl    %eax
// 1cd: 48 98                         cltq
// 1cf: 48 89 2c c3                   movq    %rbp, (%rbx,%rax,8)
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _JIT_CONTINUE
// 1dd: 4c 89 f7                      movq    %r14, %rdi
// 1e0: 48 89 de                      movq    %rbx, %rsi
// 1e3: 48 8b 14 24                   movq    (%rsp), %rdx
// 1e7: 48 83 c4 08                   addq    $0x8, %rsp
// 1eb: 5b                            popq    %rbx
// 1ec: 41 5c                         popq    %r12
// 1ee: 41 5d                         popq    %r13
// 1f0: 41 5e                         popq    %r14
// 1f2: 41 5f                         popq    %r15
// 1f4: 5d                            popq    %rbp
// 1f5: ff e0                         jmpq    *%rax
// 1f7: 
static const unsigned char _DELETE_DEREFplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_body[504] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xd1, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x28, 0x48, 0x89, 0x0c, 0x24, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x86, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x8b, 0x24, 0xc3, 0x49, 0x8b, 0x6c, 0x24, 0x18, 0x8b, 0x45, 0x00, 0x49, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x06, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x89, 0x2c, 0xc3, 0x4d, 0x8b, 0x6c, 0x24, 0x10, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x07, 0x41, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd7, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4c, 0x89, 0x2c, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x0a, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc9, 0x4c, 0x89, 0x2c, 0xcb, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x89, 0x2c, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x46, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xa2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x116, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x16b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x191, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS_data_holes[1];

// _DELETE_DEREFplus_INIT_CALL_PY_EXACT_ARGS
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_INIT_CALL_PY_EXACT_ARGS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 1a                         je      0x49 <_JIT_ENTRY+0x49>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 48                         jle     0x88 <_JIT_ENTRY+0x88>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 6a                         jns     0xae <_JIT_ENTRY+0xae>
// 44: e9 86 00 00 00                jmp     0xcf <_JIT_ENTRY+0xcf>
// 49: 48 8b 33                      movq    (%rbx), %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 d0                      movzwl  %ax, %edx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _PyEval_FormatExcUnbound
// 63: 4c 89 ff                      movq    %r15, %rdi
// 66: ff d0                         callq   *%rax
// 68: 49 29 de                      subq    %rbx, %r14
// 6b: 49 83 c6 b8                   addq    $-0x48, %r14
// 6f: 49 c1 ee 03                   shrq    $0x3, %r14
// 73: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 77: 31 c0                         xorl    %eax, %eax
// 79: 48 83 c4 08                   addq    $0x8, %rsp
// 7d: 5b                            popq    %rbx
// 7e: 41 5c                         popq    %r12
// 80: 41 5d                         popq    %r13
// 82: 41 5e                         popq    %r14
// 84: 41 5f                         popq    %r15
// 86: 5d                            popq    %rbp
// 87: c3                            retq
// 88: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008a:  R_X86_64_64  .rodata.str1.1
// 92: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000094:  R_X86_64_64  _Py_NegativeRefcount
// 9c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// a1: 4c 89 e2                      movq    %r12, %rdx
// a4: ff d0                         callq   *%rax
// a6: 49 8b 04 24                   movq    (%r12), %rax
// aa: 85 c0                         testl   %eax, %eax
// ac: 78 21                         js      0xcf <_JIT_ENTRY+0xcf>
// ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b8: ff d0                         callq   *%rax
// ba: 49 ff 0c 24                   decq    (%r12)
// be: 75 0f                         jne     0xcf <_JIT_ENTRY+0xcf>
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: 4c 89 e7                      movq    %r12, %rdi
// cd: ff d0                         callq   *%rax
// cf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d1:  R_X86_64_64  _JIT_OPARG
// d9: 0f b7 c0                      movzwl  %ax, %eax
// dc: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// e1: 29 c1                         subl    %eax, %ecx
// e3: f7 d0                         notl    %eax
// e5: 48 63 d0                      movslq  %eax, %rdx
// e8: 48 63 c1                      movslq  %ecx, %rax
// eb: 4d 8b 24 c6                   movq    (%r14,%rax,8), %r12
// ef: 49 8b 0c d6                   movq    (%r14,%rdx,8), %rcx
// f3: 49 8b 6c 24 30                movq    0x30(%r12), %rbp
// f8: 4d 8b af 00 01 00 00          movq    0x100(%r15), %r13
// ff: 48 63 45 4c                   movslq  0x4c(%rbp), %rax
// 103: 49 8d 44 c5 00                leaq    (%r13,%rax,8), %rax
// 108: 49 89 87 00 01 00 00          movq    %rax, 0x100(%r15)
// 10f: 4d 89 65 10                   movq    %r12, 0x10(%r13)
// 113: 8b 45 00                      movl    (%rbp), %eax
// 116: ff c0                         incl    %eax
// 118: 49 8d 14 d6                   leaq    (%r14,%rdx,8), %rdx
// 11c: 48 85 c9                      testq   %rcx, %rcx
// 11f: 48 89 14 24                   movq    %rdx, (%rsp)
// 123: 0f 84 c2 00 00 00             je      0x1eb <_JIT_ENTRY+0x1eb>
// 129: 85 c0                         testl   %eax, %eax
// 12b: 74 0f                         je      0x13c <_JIT_ENTRY+0x13c>
// 12d: 89 45 00                      movl    %eax, (%rbp)
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 89 6d 00                   movq    %rbp, (%r13)
// 140: 41 0f 10 44 24 10             movups  0x10(%r12), %xmm0
// 146: 41 0f 11 45 18                movups  %xmm0, 0x18(%r13)
// 14b: 49 c7 45 28 00 00 00 00       movq    $0x0, 0x28(%r13)
// 153: 8b 4d 48                      movl    0x48(%rbp), %ecx
// 156: 41 89 4d 40                   movl    %ecx, 0x40(%r13)
// 15a: 49 c7 45 30 00 00 00 00       movq    $0x0, 0x30(%r13)
// 162: 48 81 c5 c8 00 00 00          addq    $0xc8, %rbp
// 169: 49 89 6d 38                   movq    %rbp, 0x38(%r13)
// 16d: 66 41 c7 45 44 00 00          movw    $0x0, 0x44(%r13)
// 174: 41 c6 45 46 00                movb    $0x0, 0x46(%r13)
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _JIT_OPARG
// 183: 0f b7 e8                      movzwl  %ax, %ebp
// 186: ff c5                         incl    %ebp
// 188: 85 ed                         testl   %ebp, %ebp
// 18a: 0f 9f c2                      setg    %dl
// 18d: 39 e9                         cmpl    %ebp, %ecx
// 18f: 0f 8e fe 00 00 00             jle     0x293 <_JIT_ENTRY+0x293>
// 195: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000197:  R_X86_64_64  _JIT_OPARG
// 19f: 41 0f b7 ec                   movzwl  %r12w, %ebp
// 1a3: ff c5                         incl    %ebp
// 1a5: 48 8d 3c ed 48 00 00 00       leaq    0x48(,%rbp,8), %rdi
// 1ad: 4c 01 ef                      addq    %r13, %rdi
// 1b0: 89 e8                         movl    %ebp, %eax
// 1b2: f7 d0                         notl    %eax
// 1b4: 01 c1                         addl    %eax, %ecx
// 1b6: 48 8d 14 cd 08 00 00 00       leaq    0x8(,%rcx,8), %rdx
// 1be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c0:  R_X86_64_64  memset
// 1c8: 31 f6                         xorl    %esi, %esi
// 1ca: ff d0                         callq   *%rax
// 1cc: 85 ed                         testl   %ebp, %ebp
// 1ce: 0f 8e a3 01 00 00             jle     0x377 <_JIT_ENTRY+0x377>
// 1d4: 41 0f b7 cc                   movzwl  %r12w, %ecx
// 1d8: 48 c1 e1 03                   shlq    $0x3, %rcx
// 1dc: 4c 89 f0                      movq    %r14, %rax
// 1df: 48 29 c8                      subq    %rcx, %rax
// 1e2: 48 83 c0 f8                   addq    $-0x8, %rax
// 1e6: e9 cd 00 00 00                jmp     0x2b8 <_JIT_ENTRY+0x2b8>
// 1eb: 85 c0                         testl   %eax, %eax
// 1ed: 74 0f                         je      0x1fe <_JIT_ENTRY+0x1fe>
// 1ef: 89 45 00                      movl    %eax, (%rbp)
// 1f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f4:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1fc: ff d0                         callq   *%rax
// 1fe: 49 89 6d 00                   movq    %rbp, (%r13)
// 202: 41 0f 10 44 24 10             movups  0x10(%r12), %xmm0
// 208: 41 0f 11 45 18                movups  %xmm0, 0x18(%r13)
// 20d: 49 c7 45 28 00 00 00 00       movq    $0x0, 0x28(%r13)
// 215: 8b 45 48                      movl    0x48(%rbp), %eax
// 218: 41 89 45 40                   movl    %eax, 0x40(%r13)
// 21c: 49 c7 45 30 00 00 00 00       movq    $0x0, 0x30(%r13)
// 224: 48 81 c5 c8 00 00 00          addq    $0xc8, %rbp
// 22b: 49 89 6d 38                   movq    %rbp, 0x38(%r13)
// 22f: 66 41 c7 45 44 00 00          movw    $0x0, 0x44(%r13)
// 236: 41 c6 45 46 00                movb    $0x0, 0x46(%r13)
// 23b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000023d:  R_X86_64_64  _JIT_OPARG
// 245: 0f b7 e9                      movzwl  %cx, %ebp
// 248: 85 ed                         testl   %ebp, %ebp
// 24a: 0f 9f c2                      setg    %dl
// 24d: 39 e8                         cmpl    %ebp, %eax
// 24f: 7e 54                         jle     0x2a5 <_JIT_ENTRY+0x2a5>
// 251: 44 0f b7 e1                   movzwl  %cx, %r12d
// 255: 4a 8d 3c e5 48 00 00 00       leaq    0x48(,%r12,8), %rdi
// 25d: 4c 01 ef                      addq    %r13, %rdi
// 260: 0f b7 e9                      movzwl  %cx, %ebp
// 263: 89 e9                         movl    %ebp, %ecx
// 265: f7 d1                         notl    %ecx
// 267: 01 c8                         addl    %ecx, %eax
// 269: 48 8d 14 c5 08 00 00 00       leaq    0x8(,%rax,8), %rdx
// 271: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000273:  R_X86_64_64  memset
// 27b: 31 f6                         xorl    %esi, %esi
// 27d: ff d0                         callq   *%rax
// 27f: 85 ed                         testl   %ebp, %ebp
// 281: 0f 8e f0 00 00 00             jle     0x377 <_JIT_ENTRY+0x377>
// 287: 49 c1 e4 03                   shlq    $0x3, %r12
// 28b: 4c 89 f0                      movq    %r14, %rax
// 28e: 4c 29 e0                      subq    %r12, %rax
// 291: eb 25                         jmp     0x2b8 <_JIT_ENTRY+0x2b8>
// 293: f7 d0                         notl    %eax
// 295: 48 0d 00 00 ff ff             orq     $-0x10000, %rax         # imm = 0xFFFF0000
// 29b: f6 c2 01                      testb   $0x1, %dl
// 29e: 75 14                         jne     0x2b4 <_JIT_ENTRY+0x2b4>
// 2a0: e9 d2 00 00 00                jmp     0x377 <_JIT_ENTRY+0x377>
// 2a5: 0f b7 c1                      movzwl  %cx, %eax
// 2a8: 48 f7 d8                      negq    %rax
// 2ab: f6 c2 01                      testb   $0x1, %dl
// 2ae: 0f 84 c3 00 00 00             je      0x377 <_JIT_ENTRY+0x377>
// 2b4: 49 8d 04 c6                   leaq    (%r14,%rax,8), %rax
// 2b8: 83 fd 02                      cmpl    $0x2, %ebp
// 2bb: b9 01 00 00 00                movl    $0x1, %ecx
// 2c0: 0f 4d cd                      cmovgel %ebp, %ecx
// 2c3: 83 f9 08                      cmpl    $0x8, %ecx
// 2c6: 72 10                         jb      0x2d8 <_JIT_ENTRY+0x2d8>
// 2c8: 4c 89 ea                      movq    %r13, %rdx
// 2cb: 48 29 c2                      subq    %rax, %rdx
// 2ce: 48 83 c2 48                   addq    $0x48, %rdx
// 2d2: 48 83 fa 20                   cmpq    $0x20, %rdx
// 2d6: 73 6a                         jae     0x342 <_JIT_ENTRY+0x342>
// 2d8: 31 d2                         xorl    %edx, %edx
// 2da: 48 89 d6                      movq    %rdx, %rsi
// 2dd: 48 f7 d6                      notq    %rsi
// 2e0: 48 01 ce                      addq    %rcx, %rsi
// 2e3: 48 89 cf                      movq    %rcx, %rdi
// 2e6: 48 83 e7 03                   andq    $0x3, %rdi
// 2ea: 74 15                         je      0x301 <_JIT_ENTRY+0x301>
// 2ec: 0f 1f 40 00                   nopl    (%rax)
// 2f0: 4c 8b 04 d0                   movq    (%rax,%rdx,8), %r8
// 2f4: 4d 89 44 d5 48                movq    %r8, 0x48(%r13,%rdx,8)
// 2f9: 48 ff c2                      incq    %rdx
// 2fc: 48 ff cf                      decq    %rdi
// 2ff: 75 ef                         jne     0x2f0 <_JIT_ENTRY+0x2f0>
// 301: 48 83 fe 03                   cmpq    $0x3, %rsi
// 305: 72 70                         jb      0x377 <_JIT_ENTRY+0x377>
// 307: 66 0f 1f 84 00 00 00 00 00    nopw    (%rax,%rax)
// 310: 48 8b 34 d0                   movq    (%rax,%rdx,8), %rsi
// 314: 49 89 74 d5 48                movq    %rsi, 0x48(%r13,%rdx,8)
// 319: 48 8b 74 d0 08                movq    0x8(%rax,%rdx,8), %rsi
// 31e: 49 89 74 d5 50                movq    %rsi, 0x50(%r13,%rdx,8)
// 323: 48 8b 74 d0 10                movq    0x10(%rax,%rdx,8), %rsi
// 328: 49 89 74 d5 58                movq    %rsi, 0x58(%r13,%rdx,8)
// 32d: 48 8b 74 d0 18                movq    0x18(%rax,%rdx,8), %rsi
// 332: 49 89 74 d5 60                movq    %rsi, 0x60(%r13,%rdx,8)
// 337: 48 83 c2 04                   addq    $0x4, %rdx
// 33b: 48 39 d1                      cmpq    %rdx, %rcx
// 33e: 75 d0                         jne     0x310 <_JIT_ENTRY+0x310>
// 340: eb 35                         jmp     0x377 <_JIT_ENTRY+0x377>
// 342: 89 ca                         movl    %ecx, %edx
// 344: 81 e2 fc ff ff 7f             andl    $0x7ffffffc, %edx       # imm = 0x7FFFFFFC
// 34a: 31 f6                         xorl    %esi, %esi
// 34c: 0f 1f 40 00                   nopl    (%rax)
// 350: 0f 10 04 f0                   movups  (%rax,%rsi,8), %xmm0
// 354: 0f 10 4c f0 10                movups  0x10(%rax,%rsi,8), %xmm1
// 359: 41 0f 11 44 f5 48             movups  %xmm0, 0x48(%r13,%rsi,8)
// 35f: 41 0f 11 4c f5 58             movups  %xmm1, 0x58(%r13,%rsi,8)
// 365: 48 83 c6 04                   addq    $0x4, %rsi
// 369: 48 39 f2                      cmpq    %rsi, %rdx
// 36c: 75 e2                         jne     0x350 <_JIT_ENTRY+0x350>
// 36e: 48 39 ca                      cmpq    %rcx, %rdx
// 371: 0f 85 63 ff ff ff             jne     0x2da <_JIT_ENTRY+0x2da>
// 377: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000379:  R_X86_64_64  _JIT_OPARG
// 381: 0f b7 c0                      movzwl  %ax, %eax
// 384: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// 389: 29 c1                         subl    %eax, %ecx
// 38b: 48 63 c1                      movslq  %ecx, %rax
// 38e: 4d 89 2c c6                   movq    %r13, (%r14,%rax,8)
// 392: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000394:  R_X86_64_64  _JIT_CONTINUE
// 39c: 48 89 df                      movq    %rbx, %rdi
// 39f: 48 8b 34 24                   movq    (%rsp), %rsi
// 3a3: 4c 89 fa                      movq    %r15, %rdx
// 3a6: 48 83 c4 08                   addq    $0x8, %rsp
// 3aa: 5b                            popq    %rbx
// 3ab: 41 5c                         popq    %r12
// 3ad: 41 5d                         popq    %r13
// 3af: 41 5e                         popq    %r14
// 3b1: 41 5f                         popq    %r15
// 3b3: 5d                            popq    %rbp
// 3b4: ff e0                         jmpq    *%rax
// 3b6: 
static const unsigned char _DELETE_DEREFplus_INIT_CALL_PY_EXACT_ARGS_code_body[951] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x48, 0x85, 0xc0, 0x79, 0x6a, 0xe9, 0x86, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x63, 0xd0, 0x48, 0x63, 0xc1, 0x4d, 0x8b, 0x24, 0xc6, 0x49, 0x8b, 0x0c, 0xd6, 0x49, 0x8b, 0x6c, 0x24, 0x30, 0x4d, 0x8b, 0xaf, 0x00, 0x01, 0x00, 0x00, 0x48, 0x63, 0x45, 0x4c, 0x49, 0x8d, 0x44, 0xc5, 0x00, 0x49, 0x89, 0x87, 0x00, 0x01, 0x00, 0x00, 0x4d, 0x89, 0x65, 0x10, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x49, 0x8d, 0x14, 0xd6, 0x48, 0x85, 0xc9, 0x48, 0x89, 0x14, 0x24, 0x0f, 0x84, 0xc2, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x0f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0x6d, 0x00, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0x41, 0x0f, 0x11, 0x45, 0x18, 0x49, 0xc7, 0x45, 0x28, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x4d, 0x48, 0x41, 0x89, 0x4d, 0x40, 0x49, 0xc7, 0x45, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc5, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6d, 0x38, 0x66, 0x41, 0xc7, 0x45, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x45, 0x46, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe8, 0xff, 0xc5, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x39, 0xe9, 0x0f, 0x8e, 0xfe, 0x00, 0x00, 0x00, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xec, 0xff, 0xc5, 0x48, 0x8d, 0x3c, 0xed, 0x48, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xef, 0x89, 0xe8, 0xf7, 0xd0, 0x01, 0xc1, 0x48, 0x8d, 0x14, 0xcd, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x8e, 0xa3, 0x01, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xcc, 0x48, 0xc1, 0xe1, 0x03, 0x4c, 0x89, 0xf0, 0x48, 0x29, 0xc8, 0x48, 0x83, 0xc0, 0xf8, 0xe9, 0xcd, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x0f, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x89, 0x6d, 0x00, 0x41, 0x0f, 0x10, 0x44, 0x24, 0x10, 0x41, 0x0f, 0x11, 0x45, 0x18, 0x49, 0xc7, 0x45, 0x28, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x45, 0x48, 0x41, 0x89, 0x45, 0x40, 0x49, 0xc7, 0x45, 0x30, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc5, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x6d, 0x38, 0x66, 0x41, 0xc7, 0x45, 0x44, 0x00, 0x00, 0x41, 0xc6, 0x45, 0x46, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xe9, 0x85, 0xed, 0x0f, 0x9f, 0xc2, 0x39, 0xe8, 0x7e, 0x54, 0x44, 0x0f, 0xb7, 0xe1, 0x4a, 0x8d, 0x3c, 0xe5, 0x48, 0x00, 0x00, 0x00, 0x4c, 0x01, 0xef, 0x0f, 0xb7, 0xe9, 0x89, 0xe9, 0xf7, 0xd1, 0x01, 0xc8, 0x48, 0x8d, 0x14, 0xc5, 0x08, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x8e, 0xf0, 0x00, 0x00, 0x00, 0x49, 0xc1, 0xe4, 0x03, 0x4c, 0x89, 0xf0, 0x4c, 0x29, 0xe0, 0xeb, 0x25, 0xf7, 0xd0, 0x48, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xc2, 0x01, 0x75, 0x14, 0xe9, 0xd2, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc1, 0x48, 0xf7, 0xd8, 0xf6, 0xc2, 0x01, 0x0f, 0x84, 0xc3, 0x00, 0x00, 0x00, 0x49, 0x8d, 0x04, 0xc6, 0x83, 0xfd, 0x02, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x4d, 0xcd, 0x83, 0xf9, 0x08, 0x72, 0x10, 0x4c, 0x89, 0xea, 0x48, 0x29, 0xc2, 0x48, 0x83, 0xc2, 0x48, 0x48, 0x83, 0xfa, 0x20, 0x73, 0x6a, 0x31, 0xd2, 0x48, 0x89, 0xd6, 0x48, 0xf7, 0xd6, 0x48, 0x01, 0xce, 0x48, 0x89, 0xcf, 0x48, 0x83, 0xe7, 0x03, 0x74, 0x15, 0x0f, 0x1f, 0x40, 0x00, 0x4c, 0x8b, 0x04, 0xd0, 0x4d, 0x89, 0x44, 0xd5, 0x48, 0x48, 0xff, 0xc2, 0x48, 0xff, 0xcf, 0x75, 0xef, 0x48, 0x83, 0xfe, 0x03, 0x72, 0x70, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x34, 0xd0, 0x49, 0x89, 0x74, 0xd5, 0x48, 0x48, 0x8b, 0x74, 0xd0, 0x08, 0x49, 0x89, 0x74, 0xd5, 0x50, 0x48, 0x8b, 0x74, 0xd0, 0x10, 0x49, 0x89, 0x74, 0xd5, 0x58, 0x48, 0x8b, 0x74, 0xd0, 0x18, 0x49, 0x89, 0x74, 0xd5, 0x60, 0x48, 0x83, 0xc2, 0x04, 0x48, 0x39, 0xd1, 0x75, 0xd0, 0xeb, 0x35, 0x89, 0xca, 0x81, 0xe2, 0xfc, 0xff, 0xff, 0x7f, 0x31, 0xf6, 0x0f, 0x1f, 0x40, 0x00, 0x0f, 0x10, 0x04, 0xf0, 0x0f, 0x10, 0x4c, 0xf0, 0x10, 0x41, 0x0f, 0x11, 0x44, 0xf5, 0x48, 0x41, 0x0f, 0x11, 0x4c, 0xf5, 0x58, 0x48, 0x83, 0xc6, 0x04, 0x48, 0x39, 0xf2, 0x75, 0xe2, 0x48, 0x39, 0xca, 0x0f, 0x85, 0x63, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x4d, 0x89, 0x2c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x8b, 0x34, 0x24, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_INIT_CALL_PY_EXACT_ARGS_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c0, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x1f4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x23d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x273, HoleKind_R_X86_64_64, HoleValue_ZERO, &memset, 0x0},
    {0x379, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x394, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_INIT_CALL_PY_EXACT_ARGS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_INIT_CALL_PY_EXACT_ARGS_data_holes[1];

// _DELETE_DEREFplus_INSERT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_INSERT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 28: 4d 85 e4                      testq   %r12, %r12
// 2b: 74 1a                         je      0x47 <_JIT_ENTRY+0x47>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 43                         jle     0x81 <_JIT_ENTRY+0x81>
// 3e: 85 c0                         testl   %eax, %eax
// 40: 79 65                         jns     0xa7 <_JIT_ENTRY+0xa7>
// 42: e9 81 00 00 00                jmp     0xc8 <_JIT_ENTRY+0xc8>
// 47: 49 8b 36                      movq    (%r14), %rsi
// 4a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004c:  R_X86_64_64  _JIT_OPARG
// 54: 0f b7 d0                      movzwl  %ax, %edx
// 57: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000059:  R_X86_64_64  _PyEval_FormatExcUnbound
// 61: 4c 89 ff                      movq    %r15, %rdi
// 64: ff d0                         callq   *%rax
// 66: 4c 29 f3                      subq    %r14, %rbx
// 69: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 71: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 75: 31 c0                         xorl    %eax, %eax
// 77: 5b                            popq    %rbx
// 78: 41 5c                         popq    %r12
// 7a: 41 5d                         popq    %r13
// 7c: 41 5e                         popq    %r14
// 7e: 41 5f                         popq    %r15
// 80: c3                            retq
// 81: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000083:  R_X86_64_64  .rodata.str1.1
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_NegativeRefcount
// 95: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9a: 4c 89 e2                      movq    %r12, %rdx
// 9d: ff d0                         callq   *%rax
// 9f: 49 8b 04 24                   movq    (%r12), %rax
// a3: 85 c0                         testl   %eax, %eax
// a5: 78 21                         js      0xc8 <_JIT_ENTRY+0xc8>
// a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b1: ff d0                         callq   *%rax
// b3: 49 ff 0c 24                   decq    (%r12)
// b7: 75 0f                         jne     0xc8 <_JIT_ENTRY+0xc8>
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  _Py_Dealloc
// c3: 4c 89 e7                      movq    %r12, %rdi
// c6: ff d0                         callq   *%rax
// c8: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  _JIT_OPARG
// d6: 0f b7 d0                      movzwl  %ax, %edx
// d9: f7 d0                         notl    %eax
// db: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// e0: 4c 63 e8                      movslq  %eax, %r13
// e3: 4a 8d 3c eb                   leaq    (%rbx,%r13,8), %rdi
// e7: 48 c1 e2 03                   shlq    $0x3, %rdx
// eb: 48 89 de                      movq    %rbx, %rsi
// ee: 48 29 d6                      subq    %rdx, %rsi
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  memmove
// fb: ff d0                         callq   *%rax
// fd: 4e 89 24 eb                   movq    %r12, (%rbx,%r13,8)
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_CONTINUE
// 10b: 4c 89 f7                      movq    %r14, %rdi
// 10e: 48 89 de                      movq    %rbx, %rsi
// 111: 4c 89 fa                      movq    %r15, %rdx
// 114: 5b                            popq    %rbx
// 115: 41 5c                         popq    %r12
// 117: 41 5d                         popq    %r13
// 119: 41 5e                         popq    %r14
// 11b: 41 5f                         popq    %r15
// 11d: ff e0                         jmpq    *%rax
// 11f: 
static const unsigned char _DELETE_DEREFplus_INSERT_code_body[288] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x43, 0x85, 0xc0, 0x79, 0x65, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x63, 0xe8, 0x4a, 0x8d, 0x3c, 0xeb, 0x48, 0xc1, 0xe2, 0x03, 0x48, 0x89, 0xde, 0x48, 0x29, 0xd6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4e, 0x89, 0x24, 0xeb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_INSERT_code_holes[11] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &memmove, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_INSERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_INSERT_data_holes[1];

// _DELETE_DEREFplus_IS_NONE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_IS_NONE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 28: 4d 85 e4                      testq   %r12, %r12
// 2b: 74 17                         je      0x44 <_JIT_ENTRY+0x44>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 40                         jle     0x7e <_JIT_ENTRY+0x7e>
// 3e: 85 c0                         testl   %eax, %eax
// 40: 79 62                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 42: eb 76                         jmp     0xba <_JIT_ENTRY+0xba>
// 44: 49 8b 36                      movq    (%r14), %rsi
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _JIT_OPARG
// 51: 0f b7 d0                      movzwl  %ax, %edx
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5e: 4c 89 ff                      movq    %r15, %rdi
// 61: ff d0                         callq   *%rax
// 63: 4c 29 f3                      subq    %r14, %rbx
// 66: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6e: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 72: 31 c0                         xorl    %eax, %eax
// 74: 5b                            popq    %rbx
// 75: 41 5c                         popq    %r12
// 77: 41 5d                         popq    %r13
// 79: 41 5e                         popq    %r14
// 7b: 41 5f                         popq    %r15
// 7d: c3                            retq
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 16                         js      0xba <_JIT_ENTRY+0xba>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 0f 84 86 00 00 00             je      0x140 <_JIT_ENTRY+0x140>
// ba: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c0:  R_X86_64_64  _Py_NoneStruct
// c8: 49 39 c4                      cmpq    %rax, %r12
// cb: 0f 84 95 00 00 00             je      0x166 <_JIT_ENTRY+0x166>
// d1: 49 8b 04 24                   movq    (%r12), %rax
// d5: 48 85 c0                      testq   %rax, %rax
// d8: 7e 13                         jle     0xed <_JIT_ENTRY+0xed>
// da: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000dc:  R_X86_64_64  _Py_FalseStruct
// e4: 85 c0                         testl   %eax, %eax
// e6: 79 35                         jns     0x11d <_JIT_ENTRY+0x11d>
// e8: e9 83 00 00 00                jmp     0x170 <_JIT_ENTRY+0x170>
// ed: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ef:  R_X86_64_64  .rodata.str1.1
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _Py_NegativeRefcount
// 101: be ef 07 00 00                movl    $0x7ef, %esi            # imm = 0x7EF
// 106: 4c 89 e2                      movq    %r12, %rdx
// 109: ff d0                         callq   *%rax
// 10b: 49 8b 04 24                   movq    (%r12), %rax
// 10f: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000111:  R_X86_64_64  _Py_FalseStruct
// 119: 85 c0                         testl   %eax, %eax
// 11b: 78 53                         js      0x170 <_JIT_ENTRY+0x170>
// 11d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 127: ff d0                         callq   *%rax
// 129: 49 ff 0c 24                   decq    (%r12)
// 12d: 75 41                         jne     0x170 <_JIT_ENTRY+0x170>
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: 4c 89 e7                      movq    %r12, %rdi
// 13c: ff d0                         callq   *%rax
// 13e: eb 30                         jmp     0x170 <_JIT_ENTRY+0x170>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 4c 89 e7                      movq    %r12, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_NoneStruct
// 15d: 49 39 c4                      cmpq    %rax, %r12
// 160: 0f 85 6b ff ff ff             jne     0xd1 <_JIT_ENTRY+0xd1>
// 166: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000168:  R_X86_64_64  _Py_TrueStruct
// 170: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 174: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000176:  R_X86_64_64  _JIT_CONTINUE
// 17e: 4c 89 f7                      movq    %r14, %rdi
// 181: 48 89 de                      movq    %rbx, %rsi
// 184: 4c 89 fa                      movq    %r15, %rdx
// 187: 5b                            popq    %rbx
// 188: 41 5c                         popq    %r12
// 18a: 41 5d                         popq    %r13
// 18c: 41 5e                         popq    %r14
// 18e: 41 5f                         popq    %r15
// 190: ff e0                         jmpq    *%rax
// 192: 
static const unsigned char _DELETE_DEREFplus_IS_NONE_code_body[403] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x40, 0x85, 0xc0, 0x79, 0x62, 0xeb, 0x76, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc4, 0x0f, 0x84, 0x95, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x35, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xef, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x53, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x41, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x30, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0xc4, 0x0f, 0x85, 0x6b, 0xff, 0xff, 0xff, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_IS_NONE_code_holes[18] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x111, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x11f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x176, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_IS_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_IS_NONE_data_holes[1];

// _DELETE_DEREFplus_IS_OP
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_IS_OP.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 24                         je      0x53 <_JIT_ENTRY+0x53>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 52                         jle     0x92 <_JIT_ENTRY+0x92>
// 40: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000042:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a: 85 c0                         testl   %eax, %eax
// 4c: 79 74                         jns     0xc2 <_JIT_ENTRY+0xc2>
// 4e: e9 86 00 00 00                jmp     0xd9 <_JIT_ENTRY+0xd9>
// 53: 48 8b 33                      movq    (%rbx), %rsi
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _JIT_OPARG
// 60: 0f b7 d0                      movzwl  %ax, %edx
// 63: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000065:  R_X86_64_64  _PyEval_FormatExcUnbound
// 6d: 4c 89 ff                      movq    %r15, %rdi
// 70: ff d0                         callq   *%rax
// 72: 49 29 de                      subq    %rbx, %r14
// 75: 49 83 c6 b8                   addq    $-0x48, %r14
// 79: 49 c1 ee 03                   shrq    $0x3, %r14
// 7d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 81: 31 c0                         xorl    %eax, %eax
// 83: 48 83 c4 08                   addq    $0x8, %rsp
// 87: 5b                            popq    %rbx
// 88: 41 5c                         popq    %r12
// 8a: 41 5d                         popq    %r13
// 8c: 41 5e                         popq    %r14
// 8e: 41 5f                         popq    %r15
// 90: 5d                            popq    %rbp
// 91: c3                            retq
// 92: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000094:  R_X86_64_64  .rodata.str1.1
// 9c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009e:  R_X86_64_64  _Py_NegativeRefcount
// a6: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// ab: 4c 89 e2                      movq    %r12, %rdx
// ae: ff d0                         callq   *%rax
// b0: 49 8b 04 24                   movq    (%r12), %rax
// b4: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// be: 85 c0                         testl   %eax, %eax
// c0: 78 17                         js      0xd9 <_JIT_ENTRY+0xd9>
// c2: ff d5                         callq   *%rbp
// c4: 49 ff 0c 24                   decq    (%r12)
// c8: 75 0f                         jne     0xd9 <_JIT_ENTRY+0xd9>
// ca: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cc:  R_X86_64_64  _Py_Dealloc
// d4: 4c 89 e7                      movq    %r12, %rdi
// d7: ff d0                         callq   *%rax
// d9: 4d 8b 66 f0                   movq    -0x10(%r14), %r12
// dd: 4d 8b 6e f8                   movq    -0x8(%r14), %r13
// e1: 49 8b 04 24                   movq    (%r12), %rax
// e5: 48 85 c0                      testq   %rax, %rax
// e8: 7e 06                         jle     0xf0 <_JIT_ENTRY+0xf0>
// ea: 85 c0                         testl   %eax, %eax
// ec: 79 28                         jns     0x116 <_JIT_ENTRY+0x116>
// ee: eb 2e                         jmp     0x11e <_JIT_ENTRY+0x11e>
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_NegativeRefcount
// 104: be 98 07 00 00                movl    $0x798, %esi            # imm = 0x798
// 109: 4c 89 e2                      movq    %r12, %rdx
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 04 24                   movq    (%r12), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 08                         js      0x11e <_JIT_ENTRY+0x11e>
// 116: ff d5                         callq   *%rbp
// 118: 49 ff 0c 24                   decq    (%r12)
// 11c: 74 13                         je      0x131 <_JIT_ENTRY+0x131>
// 11e: 49 8b 45 00                   movq    (%r13), %rax
// 122: 48 85 c0                      testq   %rax, %rax
// 125: 7e 22                         jle     0x149 <_JIT_ENTRY+0x149>
// 127: 49 8d 6e f8                   leaq    -0x8(%r14), %rbp
// 12b: 85 c0                         testl   %eax, %eax
// 12d: 79 44                         jns     0x173 <_JIT_ENTRY+0x173>
// 12f: eb 63                         jmp     0x194 <_JIT_ENTRY+0x194>
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  _Py_Dealloc
// 13b: 4c 89 e7                      movq    %r12, %rdi
// 13e: ff d0                         callq   *%rax
// 140: 49 8b 45 00                   movq    (%r13), %rax
// 144: 48 85 c0                      testq   %rax, %rax
// 147: 7f de                         jg      0x127 <_JIT_ENTRY+0x127>
// 149: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014b:  R_X86_64_64  .rodata.str1.1
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_NegativeRefcount
// 15d: be 99 07 00 00                movl    $0x799, %esi            # imm = 0x799
// 162: 4c 89 ea                      movq    %r13, %rdx
// 165: ff d0                         callq   *%rax
// 167: 49 8b 45 00                   movq    (%r13), %rax
// 16b: 49 8d 6e f8                   leaq    -0x8(%r14), %rbp
// 16f: 85 c0                         testl   %eax, %eax
// 171: 78 21                         js      0x194 <_JIT_ENTRY+0x194>
// 173: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000175:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17d: ff d0                         callq   *%rax
// 17f: 49 ff 4d 00                   decq    (%r13)
// 183: 75 0f                         jne     0x194 <_JIT_ENTRY+0x194>
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_Dealloc
// 18f: 4c 89 ef                      movq    %r13, %rdi
// 192: ff d0                         callq   *%rax
// 194: 31 c0                         xorl    %eax, %eax
// 196: 4d 39 ec                      cmpq    %r13, %r12
// 199: 0f 94 c0                      sete    %al
// 19c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000019e:  R_X86_64_64  _JIT_OPARG
// 1a6: 66 39 c8                      cmpw    %cx, %ax
// 1a9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ab:  R_X86_64_64  _Py_FalseStruct
// 1b3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001b5:  R_X86_64_64  _Py_TrueStruct
// 1bd: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 1c1: 49 89 4e f0                   movq    %rcx, -0x10(%r14)
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _JIT_CONTINUE
// 1cf: 48 89 df                      movq    %rbx, %rdi
// 1d2: 48 89 ee                      movq    %rbp, %rsi
// 1d5: 4c 89 fa                      movq    %r15, %rdx
// 1d8: 48 83 c4 08                   addq    $0x8, %rsp
// 1dc: 5b                            popq    %rbx
// 1dd: 41 5c                         popq    %r12
// 1df: 41 5d                         popq    %r13
// 1e1: 41 5e                         popq    %r14
// 1e3: 41 5f                         popq    %r15
// 1e5: 5d                            popq    %rbp
// 1e6: ff e0                         jmpq    *%rax
// 1e8: 
static const unsigned char _DELETE_DEREFplus_IS_OP_code_body[489] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x24, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x86, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8b, 0x66, 0xf0, 0x4d, 0x8b, 0x6e, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x2e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x98, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x13, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x49, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x31, 0xc0, 0x4d, 0x39, 0xec, 0x0f, 0x94, 0xc0, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x39, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x49, 0x89, 0x4e, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_IS_OP_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x65, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x175, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_IS_OP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_IS_OP_data_holes[1];

// _DELETE_DEREFplus_ITER_CHECK_LIST
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_ITER_CHECK_LIST.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 38                         jle     0x75 <_JIT_ENTRY+0x75>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5a                         jns     0x9b <_JIT_ENTRY+0x9b>
// 41: eb 6a                         jmp     0xad <_JIT_ENTRY+0xad>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: eb 74                         jmp     0xe9 <_JIT_ENTRY+0xe9>
// 75: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000077:  R_X86_64_64  .rodata.str1.1
// 7f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000081:  R_X86_64_64  _Py_NegativeRefcount
// 89: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8e: 4c 89 e2                      movq    %r12, %rdx
// 91: ff d0                         callq   *%rax
// 93: 49 8b 04 24                   movq    (%r12), %rax
// 97: 85 c0                         testl   %eax, %eax
// 99: 78 12                         js      0xad <_JIT_ENTRY+0xad>
// 9b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a5: ff d0                         callq   *%rax
// a7: 49 ff 0c 24                   decq    (%r12)
// ab: 74 48                         je      0xf5 <_JIT_ENTRY+0xf5>
// ad: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// b1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b3:  R_X86_64_64  PyListIter_Type
// bb: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// bf: 74 57                         je      0x118 <_JIT_ENTRY+0x118>
// c1: 4c 29 f3                      subq    %r14, %rbx
// c4: 48 83 c3 b8                   addq    $-0x48, %rbx
// c8: 48 c1 eb 03                   shrq    $0x3, %rbx
// cc: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// d0: 49 8b 06                      movq    (%r14), %rax
// d3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d5:  R_X86_64_64  _JIT_TARGET
// dd: 89 c9                         movl    %ecx, %ecx
// df: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// e3: 48 05 c8 00 00 00             addq    $0xc8, %rax
// e9: 48 83 c4 08                   addq    $0x8, %rsp
// ed: 5b                            popq    %rbx
// ee: 41 5c                         popq    %r12
// f0: 41 5e                         popq    %r14
// f2: 41 5f                         popq    %r15
// f4: c3                            retq
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: 4c 89 e7                      movq    %r12, %rdi
// 102: ff d0                         callq   *%rax
// 104: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 108: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010a:  R_X86_64_64  PyListIter_Type
// 112: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 116: 75 a9                         jne     0xc1 <_JIT_ENTRY+0xc1>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _JIT_CONTINUE
// 122: 4c 89 f7                      movq    %r14, %rdi
// 125: 48 89 de                      movq    %rbx, %rsi
// 128: 4c 89 fa                      movq    %r15, %rdx
// 12b: 48 83 c4 08                   addq    $0x8, %rsp
// 12f: 5b                            popq    %rbx
// 130: 41 5c                         popq    %r12
// 132: 41 5e                         popq    %r14
// 134: 41 5f                         popq    %r15
// 136: ff e0                         jmpq    *%rax
// 138: 
static const unsigned char _DELETE_DEREFplus_ITER_CHECK_LIST_code_body[313] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x38, 0x85, 0xc0, 0x79, 0x5a, 0xeb, 0x6a, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x74, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x48, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x57, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0xa9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_ITER_CHECK_LIST_code_holes[12] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x77, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyListIter_Type, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyListIter_Type, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_ITER_CHECK_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_ITER_CHECK_LIST_data_holes[1];

// _DELETE_DEREFplus_ITER_CHECK_RANGE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_ITER_CHECK_RANGE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 38                         jle     0x75 <_JIT_ENTRY+0x75>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5a                         jns     0x9b <_JIT_ENTRY+0x9b>
// 41: eb 6a                         jmp     0xad <_JIT_ENTRY+0xad>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: eb 74                         jmp     0xe9 <_JIT_ENTRY+0xe9>
// 75: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000077:  R_X86_64_64  .rodata.str1.1
// 7f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000081:  R_X86_64_64  _Py_NegativeRefcount
// 89: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8e: 4c 89 e2                      movq    %r12, %rdx
// 91: ff d0                         callq   *%rax
// 93: 49 8b 04 24                   movq    (%r12), %rax
// 97: 85 c0                         testl   %eax, %eax
// 99: 78 12                         js      0xad <_JIT_ENTRY+0xad>
// 9b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a5: ff d0                         callq   *%rax
// a7: 49 ff 0c 24                   decq    (%r12)
// ab: 74 48                         je      0xf5 <_JIT_ENTRY+0xf5>
// ad: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// b1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b3:  R_X86_64_64  PyRangeIter_Type
// bb: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// bf: 74 57                         je      0x118 <_JIT_ENTRY+0x118>
// c1: 4c 29 f3                      subq    %r14, %rbx
// c4: 48 83 c3 b8                   addq    $-0x48, %rbx
// c8: 48 c1 eb 03                   shrq    $0x3, %rbx
// cc: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// d0: 49 8b 06                      movq    (%r14), %rax
// d3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d5:  R_X86_64_64  _JIT_TARGET
// dd: 89 c9                         movl    %ecx, %ecx
// df: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// e3: 48 05 c8 00 00 00             addq    $0xc8, %rax
// e9: 48 83 c4 08                   addq    $0x8, %rsp
// ed: 5b                            popq    %rbx
// ee: 41 5c                         popq    %r12
// f0: 41 5e                         popq    %r14
// f2: 41 5f                         popq    %r15
// f4: c3                            retq
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: 4c 89 e7                      movq    %r12, %rdi
// 102: ff d0                         callq   *%rax
// 104: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 108: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010a:  R_X86_64_64  PyRangeIter_Type
// 112: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 116: 75 a9                         jne     0xc1 <_JIT_ENTRY+0xc1>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _JIT_CONTINUE
// 122: 4c 89 f7                      movq    %r14, %rdi
// 125: 48 89 de                      movq    %rbx, %rsi
// 128: 4c 89 fa                      movq    %r15, %rdx
// 12b: 48 83 c4 08                   addq    $0x8, %rsp
// 12f: 5b                            popq    %rbx
// 130: 41 5c                         popq    %r12
// 132: 41 5e                         popq    %r14
// 134: 41 5f                         popq    %r15
// 136: ff e0                         jmpq    *%rax
// 138: 
static const unsigned char _DELETE_DEREFplus_ITER_CHECK_RANGE_code_body[313] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x38, 0x85, 0xc0, 0x79, 0x5a, 0xeb, 0x6a, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x74, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x48, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x57, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0xa9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_ITER_CHECK_RANGE_code_holes[12] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x77, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyRangeIter_Type, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyRangeIter_Type, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_ITER_CHECK_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_ITER_CHECK_RANGE_data_holes[1];

// _DELETE_DEREFplus_ITER_CHECK_TUPLE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_ITER_CHECK_TUPLE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 38                         jle     0x75 <_JIT_ENTRY+0x75>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5a                         jns     0x9b <_JIT_ENTRY+0x9b>
// 41: eb 6a                         jmp     0xad <_JIT_ENTRY+0xad>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: eb 74                         jmp     0xe9 <_JIT_ENTRY+0xe9>
// 75: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000077:  R_X86_64_64  .rodata.str1.1
// 7f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000081:  R_X86_64_64  _Py_NegativeRefcount
// 89: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8e: 4c 89 e2                      movq    %r12, %rdx
// 91: ff d0                         callq   *%rax
// 93: 49 8b 04 24                   movq    (%r12), %rax
// 97: 85 c0                         testl   %eax, %eax
// 99: 78 12                         js      0xad <_JIT_ENTRY+0xad>
// 9b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a5: ff d0                         callq   *%rax
// a7: 49 ff 0c 24                   decq    (%r12)
// ab: 74 48                         je      0xf5 <_JIT_ENTRY+0xf5>
// ad: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// b1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b3:  R_X86_64_64  PyTupleIter_Type
// bb: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// bf: 74 57                         je      0x118 <_JIT_ENTRY+0x118>
// c1: 4c 29 f3                      subq    %r14, %rbx
// c4: 48 83 c3 b8                   addq    $-0x48, %rbx
// c8: 48 c1 eb 03                   shrq    $0x3, %rbx
// cc: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// d0: 49 8b 06                      movq    (%r14), %rax
// d3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d5:  R_X86_64_64  _JIT_TARGET
// dd: 89 c9                         movl    %ecx, %ecx
// df: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// e3: 48 05 c8 00 00 00             addq    $0xc8, %rax
// e9: 48 83 c4 08                   addq    $0x8, %rsp
// ed: 5b                            popq    %rbx
// ee: 41 5c                         popq    %r12
// f0: 41 5e                         popq    %r14
// f2: 41 5f                         popq    %r15
// f4: c3                            retq
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: 4c 89 e7                      movq    %r12, %rdi
// 102: ff d0                         callq   *%rax
// 104: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 108: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010a:  R_X86_64_64  PyTupleIter_Type
// 112: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 116: 75 a9                         jne     0xc1 <_JIT_ENTRY+0xc1>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _JIT_CONTINUE
// 122: 4c 89 f7                      movq    %r14, %rdi
// 125: 48 89 de                      movq    %rbx, %rsi
// 128: 4c 89 fa                      movq    %r15, %rdx
// 12b: 48 83 c4 08                   addq    $0x8, %rsp
// 12f: 5b                            popq    %rbx
// 130: 41 5c                         popq    %r12
// 132: 41 5e                         popq    %r14
// 134: 41 5f                         popq    %r15
// 136: ff e0                         jmpq    *%rax
// 138: 
static const unsigned char _DELETE_DEREFplus_ITER_CHECK_TUPLE_code_body[313] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x38, 0x85, 0xc0, 0x79, 0x5a, 0xeb, 0x6a, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x74, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x48, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x57, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0xa9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_ITER_CHECK_TUPLE_code_holes[12] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x77, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTupleIter_Type, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTupleIter_Type, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_ITER_CHECK_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_ITER_CHECK_TUPLE_data_holes[1];

// _DELETE_DEREFplus_ITER_NEXT_LIST
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_ITER_NEXT_LIST.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 1a                         je      0x46 <_JIT_ENTRY+0x46>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 45                         jle     0x82 <_JIT_ENTRY+0x82>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 67                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 41: e9 83 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 4c 29 f3                      subq    %r14, %rbx
// 68: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 70: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 74: 31 c0                         xorl    %eax, %eax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 21                         js      0xc9 <_JIT_ENTRY+0xc9>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 75 0f                         jne     0xc9 <_JIT_ENTRY+0xc9>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_Dealloc
// c4: 4c 89 e7                      movq    %r12, %rdi
// c7: ff d0                         callq   *%rax
// c9: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// cd: 48 8b 48 10                   movq    0x10(%rax), %rcx
// d1: 48 8b 50 18                   movq    0x18(%rax), %rdx
// d5: 48 8b 52 18                   movq    0x18(%rdx), %rdx
// d9: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// dd: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// e1: 4c 8b 24 ca                   movq    (%rdx,%rcx,8), %r12
// e5: 41 8b 04 24                   movl    (%r12), %eax
// e9: ff c0                         incl    %eax
// eb: 74 10                         je      0xfd <_JIT_ENTRY+0xfd>
// ed: 41 89 04 24                   movl    %eax, (%r12)
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_INCREF_IncRefTotal
// fb: ff d0                         callq   *%rax
// fd: 4c 89 23                      movq    %r12, (%rbx)
// 100: 48 83 c3 08                   addq    $0x8, %rbx
// 104: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000106:  R_X86_64_64  _JIT_CONTINUE
// 10e: 4c 89 f7                      movq    %r14, %rdi
// 111: 48 89 de                      movq    %rbx, %rsi
// 114: 4c 89 fa                      movq    %r15, %rdx
// 117: 48 83 c4 08                   addq    $0x8, %rsp
// 11b: 5b                            popq    %rbx
// 11c: 41 5c                         popq    %r12
// 11e: 41 5e                         popq    %r14
// 120: 41 5f                         popq    %r15
// 122: ff e0                         jmpq    *%rax
// 124: 
static const unsigned char _DELETE_DEREFplus_ITER_NEXT_LIST_code_body[293] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x8b, 0x24, 0xca, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_ITER_NEXT_LIST_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_ITER_NEXT_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_ITER_NEXT_LIST_data_holes[1];

// _DELETE_DEREFplus_ITER_NEXT_RANGE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_ITER_NEXT_RANGE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 2a                         jle     0x67 <_JIT_ENTRY+0x67>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 4c                         jns     0x8d <_JIT_ENTRY+0x8d>
// 41: eb 6b                         jmp     0xae <_JIT_ENTRY+0xae>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: e9 96 00 00 00                jmp     0xfd <_JIT_ENTRY+0xfd>
// 67: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000069:  R_X86_64_64  .rodata.str1.1
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_NegativeRefcount
// 7b: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 80: 4c 89 e2                      movq    %r12, %rdx
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 85 c0                         testl   %eax, %eax
// 8b: 78 21                         js      0xae <_JIT_ENTRY+0xae>
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: ff d0                         callq   *%rax
// 99: 49 ff 0c 24                   decq    (%r12)
// 9d: 75 0f                         jne     0xae <_JIT_ENTRY+0xae>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _Py_Dealloc
// a9: 4c 89 e7                      movq    %r12, %rdi
// ac: ff d0                         callq   *%rax
// ae: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// b2: 48 8b 78 10                   movq    0x10(%rax), %rdi
// b6: 48 8b 48 18                   movq    0x18(%rax), %rcx
// ba: 48 01 f9                      addq    %rdi, %rcx
// bd: 48 89 48 10                   movq    %rcx, 0x10(%rax)
// c1: 48 ff 48 20                   decq    0x20(%rax)
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  PyLong_FromLong
// cf: ff d0                         callq   *%rax
// d1: 48 85 c0                      testq   %rax, %rax
// d4: 74 27                         je      0xfd <_JIT_ENTRY+0xfd>
// d6: 48 89 03                      movq    %rax, (%rbx)
// d9: 48 83 c3 08                   addq    $0x8, %rbx
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  _JIT_CONTINUE
// e7: 4c 89 f7                      movq    %r14, %rdi
// ea: 48 89 de                      movq    %rbx, %rsi
// ed: 4c 89 fa                      movq    %r15, %rdx
// f0: 48 83 c4 08                   addq    $0x8, %rsp
// f4: 5b                            popq    %rbx
// f5: 41 5c                         popq    %r12
// f7: 41 5e                         popq    %r14
// f9: 41 5f                         popq    %r15
// fb: ff e0                         jmpq    *%rax
// fd: 4c 29 f3                      subq    %r14, %rbx
// 100: 48 83 c3 b8                   addq    $-0x48, %rbx
// 104: 48 c1 eb 03                   shrq    $0x3, %rbx
// 108: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 10c: 31 c0                         xorl    %eax, %eax
// 10e: 48 83 c4 08                   addq    $0x8, %rsp
// 112: 5b                            popq    %rbx
// 113: 41 5c                         popq    %r12
// 115: 41 5e                         popq    %r14
// 117: 41 5f                         popq    %r15
// 119: c3                            retq
// 11a: 
static const unsigned char _DELETE_DEREFplus_ITER_NEXT_RANGE_code_body[283] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x96, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x78, 0x10, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x01, 0xf9, 0x48, 0x89, 0x48, 0x10, 0x48, 0xff, 0x48, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x27, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_ITER_NEXT_RANGE_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_FromLong, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_ITER_NEXT_RANGE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_ITER_NEXT_RANGE_data_holes[1];

// _DELETE_DEREFplus_ITER_NEXT_TUPLE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_ITER_NEXT_TUPLE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 1a                         je      0x46 <_JIT_ENTRY+0x46>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 45                         jle     0x82 <_JIT_ENTRY+0x82>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 67                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 41: e9 83 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 4c 29 f3                      subq    %r14, %rbx
// 68: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 70: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 74: 31 c0                         xorl    %eax, %eax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 21                         js      0xc9 <_JIT_ENTRY+0xc9>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 75 0f                         jne     0xc9 <_JIT_ENTRY+0xc9>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_Dealloc
// c4: 4c 89 e7                      movq    %r12, %rdi
// c7: ff d0                         callq   *%rax
// c9: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// cd: 48 8b 48 10                   movq    0x10(%rax), %rcx
// d1: 48 8b 50 18                   movq    0x18(%rax), %rdx
// d5: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
// d9: 48 89 70 10                   movq    %rsi, 0x10(%rax)
// dd: 4c 8b 64 ca 18                movq    0x18(%rdx,%rcx,8), %r12
// e2: 41 8b 04 24                   movl    (%r12), %eax
// e6: ff c0                         incl    %eax
// e8: 74 10                         je      0xfa <_JIT_ENTRY+0xfa>
// ea: 41 89 04 24                   movl    %eax, (%r12)
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_INCREF_IncRefTotal
// f8: ff d0                         callq   *%rax
// fa: 4c 89 23                      movq    %r12, (%rbx)
// fd: 48 83 c3 08                   addq    $0x8, %rbx
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_CONTINUE
// 10b: 4c 89 f7                      movq    %r14, %rdi
// 10e: 48 89 de                      movq    %rbx, %rsi
// 111: 4c 89 fa                      movq    %r15, %rdx
// 114: 48 83 c4 08                   addq    $0x8, %rsp
// 118: 5b                            popq    %rbx
// 119: 41 5c                         popq    %r12
// 11b: 41 5e                         popq    %r14
// 11d: 41 5f                         popq    %r15
// 11f: ff e0                         jmpq    *%rax
// 121: 
static const unsigned char _DELETE_DEREFplus_ITER_NEXT_TUPLE_code_body[290] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x48, 0x10, 0x48, 0x8b, 0x50, 0x18, 0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x8b, 0x64, 0xca, 0x18, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_ITER_NEXT_TUPLE_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_ITER_NEXT_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_ITER_NEXT_TUPLE_data_holes[1];

// _DELETE_DEREFplus_JUMP_TO_TOP
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_JUMP_TO_TOP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 27                         jle     0x64 <_JIT_ENTRY+0x64>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 49                         jns     0x8a <_JIT_ENTRY+0x8a>
// 41: eb 59                         jmp     0x9c <_JIT_ENTRY+0x9c>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: eb 56                         jmp     0xba <_JIT_ENTRY+0xba>
// 64: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000066:  R_X86_64_64  .rodata.str1.1
// 6e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000070:  R_X86_64_64  _Py_NegativeRefcount
// 78: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 7d: 4c 89 e2                      movq    %r12, %rdx
// 80: ff d0                         callq   *%rax
// 82: 49 8b 04 24                   movq    (%r12), %rax
// 86: 85 c0                         testl   %eax, %eax
// 88: 78 12                         js      0x9c <_JIT_ENTRY+0x9c>
// 8a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 94: ff d0                         callq   *%rax
// 96: 49 ff 0c 24                   decq    (%r12)
// 9a: 74 3b                         je      0xd7 <_JIT_ENTRY+0xd7>
// 9c: 49 8b 47 10                   movq    0x10(%r15), %rax
// a0: 48 8b 00                      movq    (%rax), %rax
// a3: 84 c0                         testb   %al, %al
// a5: 74 4a                         je      0xf1 <_JIT_ENTRY+0xf1>
// a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a9:  R_X86_64_64  _Py_HandlePending
// b1: 4c 89 ff                      movq    %r15, %rdi
// b4: ff d0                         callq   *%rax
// b6: 85 c0                         testl   %eax, %eax
// b8: 74 37                         je      0xf1 <_JIT_ENTRY+0xf1>
// ba: 4c 29 f3                      subq    %r14, %rbx
// bd: 48 83 c3 b8                   addq    $-0x48, %rbx
// c1: 48 c1 eb 03                   shrq    $0x3, %rbx
// c5: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// c9: 31 c0                         xorl    %eax, %eax
// cb: 48 83 c4 08                   addq    $0x8, %rsp
// cf: 5b                            popq    %rbx
// d0: 41 5c                         popq    %r12
// d2: 41 5e                         popq    %r14
// d4: 41 5f                         popq    %r15
// d6: c3                            retq
// d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d9:  R_X86_64_64  _Py_Dealloc
// e1: 4c 89 e7                      movq    %r12, %rdi
// e4: ff d0                         callq   *%rax
// e6: 49 8b 47 10                   movq    0x10(%r15), %rax
// ea: 48 8b 00                      movq    (%rax), %rax
// ed: 84 c0                         testb   %al, %al
// ef: 75 b6                         jne     0xa7 <_JIT_ENTRY+0xa7>
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _JIT_CONTINUE
// fb: 4c 89 f7                      movq    %r14, %rdi
// fe: 48 89 de                      movq    %rbx, %rsi
// 101: 4c 89 fa                      movq    %r15, %rdx
// 104: 48 83 c4 08                   addq    $0x8, %rsp
// 108: 5b                            popq    %rbx
// 109: 41 5c                         popq    %r12
// 10b: 41 5e                         popq    %r14
// 10d: 41 5f                         popq    %r15
// 10f: ff e0                         jmpq    *%rax
// 111: 
static const unsigned char _DELETE_DEREFplus_JUMP_TO_TOP_code_body[274] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x27, 0x85, 0xc0, 0x79, 0x49, 0xeb, 0x59, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xeb, 0x56, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x3b, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x74, 0x4a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x37, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x00, 0x84, 0xc0, 0x75, 0xb6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_JUMP_TO_TOP_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x66, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x70, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_HandlePending, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_JUMP_TO_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_JUMP_TO_TOP_data_holes[1];

// _DELETE_DEREFplus_LIST_APPEND
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LIST_APPEND.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d6                      movq    %rdx, %r14
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 2a                         jle     0x67 <_JIT_ENTRY+0x67>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 4c                         jns     0x8d <_JIT_ENTRY+0x8d>
// 41: eb 6b                         jmp     0xae <_JIT_ENTRY+0xae>
// 43: 48 8b 33                      movq    (%rbx), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 f7                      movq    %r14, %rdi
// 60: ff d0                         callq   *%rax
// 62: e9 b4 00 00 00                jmp     0x11b <_JIT_ENTRY+0x11b>
// 67: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000069:  R_X86_64_64  .rodata.str1.1
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_NegativeRefcount
// 7b: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 80: 4c 89 e2                      movq    %r12, %rdx
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 85 c0                         testl   %eax, %eax
// 8b: 78 21                         js      0xae <_JIT_ENTRY+0xae>
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: ff d0                         callq   *%rax
// 99: 49 ff 0c 24                   decq    (%r12)
// 9d: 75 0f                         jne     0xae <_JIT_ENTRY+0xae>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _Py_Dealloc
// a9: 4c 89 e7                      movq    %r12, %rdi
// ac: ff d0                         callq   *%rax
// ae: 4d 8d 67 f8                   leaq    -0x8(%r15), %r12
// b2: 49 8b 77 f8                   movq    -0x8(%r15), %rsi
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _JIT_OPARG
// c0: f7 d0                         notl    %eax
// c2: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// c7: 48 98                         cltq
// c9: 49 8b 3c c7                   movq    (%r15,%rax,8), %rdi
// cd: 48 8b 47 10                   movq    0x10(%rdi), %rax
// d1: 48 39 47 20                   cmpq    %rax, 0x20(%rdi)
// d5: 7e 11                         jle     0xe8 <_JIT_ENTRY+0xe8>
// d7: 48 8b 4f 18                   movq    0x18(%rdi), %rcx
// db: 48 89 34 c1                   movq    %rsi, (%rcx,%rax,8)
// df: 48 ff c0                      incq    %rax
// e2: 48 89 47 10                   movq    %rax, 0x10(%rdi)
// e6: eb 10                         jmp     0xf8 <_JIT_ENTRY+0xf8>
// e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ea:  R_X86_64_64  _PyList_AppendTakeRefListResize
// f2: ff d0                         callq   *%rax
// f4: 85 c0                         testl   %eax, %eax
// f6: 78 20                         js      0x118 <_JIT_ENTRY+0x118>
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_CONTINUE
// 102: 48 89 df                      movq    %rbx, %rdi
// 105: 4c 89 e6                      movq    %r12, %rsi
// 108: 4c 89 f2                      movq    %r14, %rdx
// 10b: 48 83 c4 08                   addq    $0x8, %rsp
// 10f: 5b                            popq    %rbx
// 110: 41 5c                         popq    %r12
// 112: 41 5e                         popq    %r14
// 114: 41 5f                         popq    %r15
// 116: ff e0                         jmpq    *%rax
// 118: 4d 89 e7                      movq    %r12, %r15
// 11b: 49 29 df                      subq    %rbx, %r15
// 11e: 49 83 c7 b8                   addq    $-0x48, %r15
// 122: 49 c1 ef 03                   shrq    $0x3, %r15
// 126: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 12a: 31 c0                         xorl    %eax, %eax
// 12c: 48 83 c4 08                   addq    $0x8, %rsp
// 130: 5b                            popq    %rbx
// 131: 41 5c                         popq    %r12
// 133: 41 5e                         popq    %r14
// 135: 41 5f                         popq    %r15
// 137: c3                            retq
// 138: 
static const unsigned char _DELETE_DEREFplus_LIST_APPEND_code_body[313] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xe9, 0xb4, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x67, 0xf8, 0x49, 0x8b, 0x77, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x3c, 0xc7, 0x48, 0x8b, 0x47, 0x10, 0x48, 0x39, 0x47, 0x20, 0x7e, 0x11, 0x48, 0x8b, 0x4f, 0x18, 0x48, 0x89, 0x34, 0xc1, 0x48, 0xff, 0xc0, 0x48, 0x89, 0x47, 0x10, 0xeb, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4d, 0x89, 0xe7, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_LIST_APPEND_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_AppendTakeRefListResize, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LIST_APPEND_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LIST_APPEND_data_holes[1];

// _DELETE_DEREFplus_LIST_EXTEND
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LIST_EXTEND.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d6                      movq    %rdx, %r14
// c: 49 89 f5                      movq    %rsi, %r13
// f: 48 89 fb                      movq    %rdi, %rbx
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 78 10                   movq    0x10(%rax), %r15
// 28: 4d 85 ff                      testq   %r15, %r15
// 2b: 74 16                         je      0x43 <_JIT_ENTRY+0x43>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 07                      movq    (%r15), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 2a                         jle     0x67 <_JIT_ENTRY+0x67>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 4b                         jns     0x8c <_JIT_ENTRY+0x8c>
// 41: eb 69                         jmp     0xac <_JIT_ENTRY+0xac>
// 43: 48 8b 33                      movq    (%rbx), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 f7                      movq    %r14, %rdi
// 60: ff d0                         callq   *%rax
// 62: e9 d3 01 00 00                jmp     0x23a <_JIT_ENTRY+0x23a>
// 67: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000069:  R_X86_64_64  .rodata.str1.1
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_NegativeRefcount
// 7b: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 80: 4c 89 fa                      movq    %r15, %rdx
// 83: ff d0                         callq   *%rax
// 85: 49 8b 07                      movq    (%r15), %rax
// 88: 85 c0                         testl   %eax, %eax
// 8a: 78 20                         js      0xac <_JIT_ENTRY+0xac>
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 96: ff d0                         callq   *%rax
// 98: 49 ff 0f                      decq    (%r15)
// 9b: 75 0f                         jne     0xac <_JIT_ENTRY+0xac>
// 9d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009f:  R_X86_64_64  _Py_Dealloc
// a7: 4c 89 ff                      movq    %r15, %rdi
// aa: ff d0                         callq   *%rax
// ac: 4d 8d 7d f8                   leaq    -0x8(%r13), %r15
// b0: 4d 8b 65 f8                   movq    -0x8(%r13), %r12
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _JIT_OPARG
// be: f7 d0                         notl    %eax
// c0: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// c5: 48 98                         cltq
// c7: 49 8b 7c c5 00                movq    (%r13,%rax,8), %rdi
// cc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ce:  R_X86_64_64  _PyList_Extend
// d6: 4c 89 e6                      movq    %r12, %rsi
// d9: ff d0                         callq   *%rax
// db: 48 85 c0                      testq   %rax, %rax
// de: 74 1a                         je      0xfa <_JIT_ENTRY+0xfa>
// e0: 49 8b 04 24                   movq    (%r12), %rax
// e4: 48 85 c0                      testq   %rax, %rax
// e7: 0f 8e 9e 00 00 00             jle     0x18b <_JIT_ENTRY+0x18b>
// ed: 85 c0                         testl   %eax, %eax
// ef: 0f 89 bc 00 00 00             jns     0x1b1 <_JIT_ENTRY+0x1b1>
// f5: e9 d8 00 00 00                jmp     0x1d2 <_JIT_ENTRY+0x1d2>
// fa: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000fc:  R_X86_64_64  PyExc_TypeError
// 104: 49 8b 75 00                   movq    (%r13), %rsi
// 108: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010a:  R_X86_64_64  _PyErr_ExceptionMatches
// 112: 4c 89 f7                      movq    %r14, %rdi
// 115: ff d0                         callq   *%rax
// 117: 85 c0                         testl   %eax, %eax
// 119: 74 5a                         je      0x175 <_JIT_ENTRY+0x175>
// 11b: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 120: 48 83 b8 d8 00 00 00 00       cmpq    $0x0, 0xd8(%rax)
// 128: 75 4b                         jne     0x175 <_JIT_ENTRY+0x175>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  PySequence_Check
// 134: 4c 89 e7                      movq    %r12, %rdi
// 137: ff d0                         callq   *%rax
// 139: 85 c0                         testl   %eax, %eax
// 13b: 75 38                         jne     0x175 <_JIT_ENTRY+0x175>
// 13d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013f:  R_X86_64_64  _PyErr_Clear
// 147: 4c 89 f7                      movq    %r14, %rdi
// 14a: ff d0                         callq   *%rax
// 14c: 49 8b 75 00                   movq    (%r13), %rsi
// 150: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 155: 48 8b 48 18                   movq    0x18(%rax), %rcx
// 159: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000015b:  R_X86_64_64  .rodata.str1.1+0x39
// 163: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 0000000000000165:  R_X86_64_64  _PyErr_Format
// 16d: 4c 89 f7                      movq    %r14, %rdi
// 170: 31 c0                         xorl    %eax, %eax
// 172: 41 ff d0                      callq   *%r8
// 175: 49 8b 04 24                   movq    (%r12), %rax
// 179: 48 85 c0                      testq   %rax, %rax
// 17c: 7e 72                         jle     0x1f0 <_JIT_ENTRY+0x1f0>
// 17e: 85 c0                         testl   %eax, %eax
// 180: 0f 88 b1 00 00 00             js      0x237 <_JIT_ENTRY+0x237>
// 186: e9 8b 00 00 00                jmp     0x216 <_JIT_ENTRY+0x216>
// 18b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018d:  R_X86_64_64  .rodata.str1.1
// 195: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000197:  R_X86_64_64  _Py_NegativeRefcount
// 19f: be 47 05 00 00                movl    $0x547, %esi            # imm = 0x547
// 1a4: 4c 89 e2                      movq    %r12, %rdx
// 1a7: ff d0                         callq   *%rax
// 1a9: 49 8b 04 24                   movq    (%r12), %rax
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 78 21                         js      0x1d2 <_JIT_ENTRY+0x1d2>
// 1b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1bb: ff d0                         callq   *%rax
// 1bd: 49 ff 0c 24                   decq    (%r12)
// 1c1: 75 0f                         jne     0x1d2 <_JIT_ENTRY+0x1d2>
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_Dealloc
// 1cd: 4c 89 e7                      movq    %r12, %rdi
// 1d0: ff d0                         callq   *%rax
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _JIT_CONTINUE
// 1dc: 48 89 df                      movq    %rbx, %rdi
// 1df: 4c 89 fe                      movq    %r15, %rsi
// 1e2: 4c 89 f2                      movq    %r14, %rdx
// 1e5: 5b                            popq    %rbx
// 1e6: 41 5c                         popq    %r12
// 1e8: 41 5d                         popq    %r13
// 1ea: 41 5e                         popq    %r14
// 1ec: 41 5f                         popq    %r15
// 1ee: ff e0                         jmpq    *%rax
// 1f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001f2:  R_X86_64_64  .rodata.str1.1
// 1fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fc:  R_X86_64_64  _Py_NegativeRefcount
// 204: be 43 05 00 00                movl    $0x543, %esi            # imm = 0x543
// 209: 4c 89 e2                      movq    %r12, %rdx
// 20c: ff d0                         callq   *%rax
// 20e: 49 8b 04 24                   movq    (%r12), %rax
// 212: 85 c0                         testl   %eax, %eax
// 214: 78 21                         js      0x237 <_JIT_ENTRY+0x237>
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 220: ff d0                         callq   *%rax
// 222: 49 ff 0c 24                   decq    (%r12)
// 226: 75 0f                         jne     0x237 <_JIT_ENTRY+0x237>
// 228: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000022a:  R_X86_64_64  _Py_Dealloc
// 232: 4c 89 e7                      movq    %r12, %rdi
// 235: ff d0                         callq   *%rax
// 237: 4d 89 fd                      movq    %r15, %r13
// 23a: 49 29 dd                      subq    %rbx, %r13
// 23d: 49 83 c5 b8                   addq    $-0x48, %r13
// 241: 49 c1 ed 03                   shrq    $0x3, %r13
// 245: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 249: 31 c0                         xorl    %eax, %eax
// 24b: 5b                            popq    %rbx
// 24c: 41 5c                         popq    %r12
// 24e: 41 5d                         popq    %r13
// 250: 41 5e                         popq    %r14
// 252: 41 5f                         popq    %r15
// 254: c3                            retq
// 255: 
static const unsigned char _DELETE_DEREFplus_LIST_EXTEND_code_body[598] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf5, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x78, 0x10, 0x4d, 0x85, 0xff, 0x74, 0x16, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4b, 0xeb, 0x69, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0xe9, 0xd3, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x8d, 0x7d, 0xf8, 0x4d, 0x8b, 0x65, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x7c, 0xc5, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x1a, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x9e, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xbc, 0x00, 0x00, 0x00, 0xe9, 0xd8, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x75, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x5a, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x83, 0xb8, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x75, 0x4b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x75, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x8b, 0x75, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x48, 0x18, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x72, 0x85, 0xc0, 0x0f, 0x88, 0xb1, 0x00, 0x00, 0x00, 0xe9, 0x8b, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x47, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0xfd, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_LIST_EXTEND_code_holes[25] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x9f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyList_Extend, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_TypeError, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_ExceptionMatches, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySequence_Check, 0x0},
    {0x13f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Clear, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x197, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1fc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x22a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00Value after * must be an iterable, not %.200s\x00'
// 67: 00
static const unsigned char _DELETE_DEREFplus_LIST_EXTEND_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x2a, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LIST_EXTEND_data_holes[1];

// _DELETE_DEREFplus_LOAD_ASSERTION_ERROR
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_ASSERTION_ERROR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 1a                         je      0x46 <_JIT_ENTRY+0x46>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 45                         jle     0x82 <_JIT_ENTRY+0x82>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 67                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 41: e9 83 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 4c 29 f3                      subq    %r14, %rbx
// 68: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 70: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 74: 31 c0                         xorl    %eax, %eax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 21                         js      0xc9 <_JIT_ENTRY+0xc9>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 75 0f                         jne     0xc9 <_JIT_ENTRY+0xc9>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_Dealloc
// c4: 4c 89 e7                      movq    %r12, %rdi
// c7: ff d0                         callq   *%rax
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  PyExc_AssertionError
// d3: 4c 8b 20                      movq    (%rax), %r12
// d6: 41 8b 04 24                   movl    (%r12), %eax
// da: ff c0                         incl    %eax
// dc: 74 10                         je      0xee <_JIT_ENTRY+0xee>
// de: 41 89 04 24                   movl    %eax, (%r12)
// e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e4:  R_X86_64_64  _Py_INCREF_IncRefTotal
// ec: ff d0                         callq   *%rax
// ee: 4c 89 23                      movq    %r12, (%rbx)
// f1: 48 83 c3 08                   addq    $0x8, %rbx
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _JIT_CONTINUE
// ff: 4c 89 f7                      movq    %r14, %rdi
// 102: 48 89 de                      movq    %rbx, %rsi
// 105: 4c 89 fa                      movq    %r15, %rdx
// 108: 48 83 c4 08                   addq    $0x8, %rsp
// 10c: 5b                            popq    %rbx
// 10d: 41 5c                         popq    %r12
// 10f: 41 5e                         popq    %r14
// 111: 41 5f                         popq    %r15
// 113: ff e0                         jmpq    *%rax
// 115: 
static const unsigned char _DELETE_DEREFplus_LOAD_ASSERTION_ERROR_code_body[278] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x20, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_LOAD_ASSERTION_ERROR_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_AssertionError, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_ASSERTION_ERROR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_ASSERTION_ERROR_data_holes[1];

// _DELETE_DEREFplus_LOAD_ATTR
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_ATTR.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 83 ec 10                   subq    $0x10, %rsp
// d: 49 89 d7                      movq    %rdx, %r15
// 10: 49 89 f6                      movq    %rsi, %r14
// 13: 48 89 fb                      movq    %rdi, %rbx
// 16: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000018:  R_X86_64_64  _JIT_OPARG
// 20: 0f b7 c0                      movzwl  %ax, %eax
// 23: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 28: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2c: 4d 85 e4                      testq   %r12, %r12
// 2f: 74 17                         je      0x48 <_JIT_ENTRY+0x48>
// 31: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 39: 49 8b 04 24                   movq    (%r12), %rax
// 3d: 48 85 c0                      testq   %rax, %rax
// 40: 7e 2d                         jle     0x6f <_JIT_ENTRY+0x6f>
// 42: 85 c0                         testl   %eax, %eax
// 44: 79 4f                         jns     0x95 <_JIT_ENTRY+0x95>
// 46: eb 6e                         jmp     0xb6 <_JIT_ENTRY+0xb6>
// 48: 48 8b 33                      movq    (%rbx), %rsi
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: 0f b7 d0                      movzwl  %ax, %edx
// 58: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005a:  R_X86_64_64  _PyEval_FormatExcUnbound
// 62: 4c 89 ff                      movq    %r15, %rdi
// 65: ff d0                         callq   *%rax
// 67: 4d 89 f5                      movq    %r14, %r13
// 6a: e9 8d 01 00 00                jmp     0x1fc <_JIT_ENTRY+0x1fc>
// 6f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000071:  R_X86_64_64  .rodata.str1.1
// 79: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007b:  R_X86_64_64  _Py_NegativeRefcount
// 83: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 88: 4c 89 e2                      movq    %r12, %rdx
// 8b: ff d0                         callq   *%rax
// 8d: 49 8b 04 24                   movq    (%r12), %rax
// 91: 85 c0                         testl   %eax, %eax
// 93: 78 21                         js      0xb6 <_JIT_ENTRY+0xb6>
// 95: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000097:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9f: ff d0                         callq   *%rax
// a1: 49 ff 0c 24                   decq    (%r12)
// a5: 75 0f                         jne     0xb6 <_JIT_ENTRY+0xb6>
// a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a9:  R_X86_64_64  _Py_Dealloc
// b1: 4c 89 e7                      movq    %r12, %rdi
// b4: ff d0                         callq   *%rax
// b6: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// ba: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// be: 48 8b 03                      movq    (%rbx), %rax
// c1: 48 8b 40 20                   movq    0x20(%rax), %rax
// c5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c7:  R_X86_64_64  _JIT_OPARG
// cf: 89 ca                         movl    %ecx, %edx
// d1: 81 e2 fe ff 00 00             andl    $0xfffe, %edx           # imm = 0xFFFE
// d7: 48 8b 74 90 18                movq    0x18(%rax,%rdx,4), %rsi
// dc: f6 c1 01                      testb   $0x1, %cl
// df: 74 41                         je      0x122 <_JIT_ENTRY+0x122>
// e1: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _PyObject_GetMethod
// f4: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// f9: 4c 89 e7                      movq    %r12, %rdi
// fc: ff d0                         callq   *%rax
// fe: 85 c0                         testl   %eax, %eax
// 100: 74 58                         je      0x15a <_JIT_ENTRY+0x15a>
// 102: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 107: 49 89 45 00                   movq    %rax, (%r13)
// 10b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010d:  R_X86_64_64  _JIT_OPARG
// 115: a8 01                         testb   $0x1, %al
// 117: 0f 85 9d 00 00 00             jne     0x1ba <_JIT_ENTRY+0x1ba>
// 11d: e9 9b 00 00 00                jmp     0x1bd <_JIT_ENTRY+0x1bd>
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  PyObject_GetAttr
// 12c: 4c 89 e7                      movq    %r12, %rdi
// 12f: ff d0                         callq   *%rax
// 131: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f 46                         jg      0x185 <_JIT_ENTRY+0x185>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be 4b 06 00 00                movl    $0x64b, %esi            # imm = 0x64B
// 158: eb 22                         jmp     0x17c <_JIT_ENTRY+0x17c>
// 15a: 49 8b 04 24                   movq    (%r12), %rax
// 15e: 48 85 c0                      testq   %rax, %rax
// 161: 7f 22                         jg      0x185 <_JIT_ENTRY+0x185>
// 163: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000165:  R_X86_64_64  .rodata.str1.1
// 16d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016f:  R_X86_64_64  _Py_NegativeRefcount
// 177: be 43 06 00 00                movl    $0x643, %esi            # imm = 0x643
// 17c: 4c 89 e2                      movq    %r12, %rdx
// 17f: ff d0                         callq   *%rax
// 181: 49 8b 04 24                   movq    (%r12), %rax
// 185: 85 c0                         testl   %eax, %eax
// 187: 78 12                         js      0x19b <_JIT_ENTRY+0x19b>
// 189: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 193: ff d0                         callq   *%rax
// 195: 49 ff 0c 24                   decq    (%r12)
// 199: 74 48                         je      0x1e3 <_JIT_ENTRY+0x1e3>
// 19b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1a0: 48 85 c0                      testq   %rax, %rax
// 1a3: 74 57                         je      0x1fc <_JIT_ENTRY+0x1fc>
// 1a5: 45 31 e4                      xorl    %r12d, %r12d
// 1a8: 49 89 45 00                   movq    %rax, (%r13)
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _JIT_OPARG
// 1b6: a8 01                         testb   $0x1, %al
// 1b8: 74 03                         je      0x1bd <_JIT_ENTRY+0x1bd>
// 1ba: 4d 89 26                      movq    %r12, (%r14)
// 1bd: 83 e0 01                      andl    $0x1, %eax
// 1c0: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c6:  R_X86_64_64  _JIT_CONTINUE
// 1ce: 48 89 df                      movq    %rbx, %rdi
// 1d1: 4c 89 fa                      movq    %r15, %rdx
// 1d4: 48 83 c4 10                   addq    $0x10, %rsp
// 1d8: 5b                            popq    %rbx
// 1d9: 41 5c                         popq    %r12
// 1db: 41 5d                         popq    %r13
// 1dd: 41 5e                         popq    %r14
// 1df: 41 5f                         popq    %r15
// 1e1: ff e0                         jmpq    *%rax
// 1e3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e5:  R_X86_64_64  _Py_Dealloc
// 1ed: 4c 89 e7                      movq    %r12, %rdi
// 1f0: ff d0                         callq   *%rax
// 1f2: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1f7: 48 85 c0                      testq   %rax, %rax
// 1fa: 75 a9                         jne     0x1a5 <_JIT_ENTRY+0x1a5>
// 1fc: 49 29 dd                      subq    %rbx, %r13
// 1ff: 49 83 c5 b8                   addq    $-0x48, %r13
// 203: 49 c1 ed 03                   shrq    $0x3, %r13
// 207: 44 89 6b 40                   movl    %r13d, 0x40(%rbx)
// 20b: 31 c0                         xorl    %eax, %eax
// 20d: 48 83 c4 10                   addq    $0x10, %rsp
// 211: 5b                            popq    %rbx
// 212: 41 5c                         popq    %r12
// 214: 41 5d                         popq    %r13
// 216: 41 5e                         popq    %r14
// 218: 41 5f                         popq    %r15
// 21a: c3                            retq
// 21b: 
static const unsigned char _DELETE_DEREFplus_LOAD_ATTR_code_body[540] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x10, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2d, 0x85, 0xc0, 0x79, 0x4f, 0xeb, 0x6e, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4d, 0x89, 0xf5, 0xe9, 0x8d, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8d, 0x6e, 0xf8, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xca, 0x81, 0xe2, 0xfe, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x90, 0x18, 0xf6, 0xc1, 0x01, 0x74, 0x41, 0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x74, 0x58, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x0f, 0x85, 0x9d, 0x00, 0x00, 0x00, 0xe9, 0x9b, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x46, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4b, 0x06, 0x00, 0x00, 0xeb, 0x22, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x43, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x48, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x57, 0x45, 0x31, 0xe4, 0x49, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x03, 0x4d, 0x89, 0x26, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x75, 0xa9, 0x49, 0x29, 0xdd, 0x49, 0x83, 0xc5, 0xb8, 0x49, 0xc1, 0xed, 0x03, 0x44, 0x89, 0x6b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_LOAD_ATTR_code_holes[20] = {
    {0x18, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x71, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x97, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyObject_GetMethod, 0x0},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GetAttr, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x16f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x18b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1e5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_ATTR_data_holes[1];

// _DELETE_DEREFplus_LOAD_ATTR_CLASS
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_ATTR_CLASS.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 24                         je      0x53 <_JIT_ENTRY+0x53>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 52                         jle     0x92 <_JIT_ENTRY+0x92>
// 40: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000042:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a: 85 c0                         testl   %eax, %eax
// 4c: 79 74                         jns     0xc2 <_JIT_ENTRY+0xc2>
// 4e: e9 87 00 00 00                jmp     0xda <_JIT_ENTRY+0xda>
// 53: 48 8b 33                      movq    (%rbx), %rsi
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _JIT_OPARG
// 60: 0f b7 d0                      movzwl  %ax, %edx
// 63: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000065:  R_X86_64_64  _PyEval_FormatExcUnbound
// 6d: 4c 89 ff                      movq    %r15, %rdi
// 70: ff d0                         callq   *%rax
// 72: 49 29 de                      subq    %rbx, %r14
// 75: 49 83 c6 b8                   addq    $-0x48, %r14
// 79: 49 c1 ee 03                   shrq    $0x3, %r14
// 7d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 81: 31 c0                         xorl    %eax, %eax
// 83: 48 83 c4 08                   addq    $0x8, %rsp
// 87: 5b                            popq    %rbx
// 88: 41 5c                         popq    %r12
// 8a: 41 5d                         popq    %r13
// 8c: 41 5e                         popq    %r14
// 8e: 41 5f                         popq    %r15
// 90: 5d                            popq    %rbp
// 91: c3                            retq
// 92: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000094:  R_X86_64_64  .rodata.str1.1
// 9c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009e:  R_X86_64_64  _Py_NegativeRefcount
// a6: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// ab: 4c 89 e2                      movq    %r12, %rdx
// ae: ff d0                         callq   *%rax
// b0: 49 8b 04 24                   movq    (%r12), %rax
// b4: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// be: 85 c0                         testl   %eax, %eax
// c0: 78 18                         js      0xda <_JIT_ENTRY+0xda>
// c2: 41 ff d5                      callq   *%r13
// c5: 49 ff 0c 24                   decq    (%r12)
// c9: 75 0f                         jne     0xda <_JIT_ENTRY+0xda>
// cb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cd:  R_X86_64_64  _Py_Dealloc
// d5: 4c 89 e7                      movq    %r12, %rdi
// d8: ff d0                         callq   *%rax
// da: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// de: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000e0:  R_X86_64_64  _JIT_OPERAND
// e8: 8b 45 00                      movl    (%rbp), %eax
// eb: ff c0                         incl    %eax
// ed: 75 0f                         jne     0xfe <_JIT_ENTRY+0xfe>
// ef: 49 8b 04 24                   movq    (%r12), %rax
// f3: 48 85 c0                      testq   %rax, %rax
// f6: 7e 1e                         jle     0x116 <_JIT_ENTRY+0x116>
// f8: 85 c0                         testl   %eax, %eax
// fa: 79 40                         jns     0x13c <_JIT_ENTRY+0x13c>
// fc: eb 47                         jmp     0x145 <_JIT_ENTRY+0x145>
// fe: 89 45 00                      movl    %eax, (%rbp)
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 10b: ff d0                         callq   *%rax
// 10d: 49 8b 04 24                   movq    (%r12), %rax
// 111: 48 85 c0                      testq   %rax, %rax
// 114: 7f e2                         jg      0xf8 <_JIT_ENTRY+0xf8>
// 116: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000118:  R_X86_64_64  .rodata.str1.1
// 120: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000122:  R_X86_64_64  _Py_NegativeRefcount
// 12a: be f3 06 00 00                movl    $0x6f3, %esi            # imm = 0x6F3
// 12f: 4c 89 e2                      movq    %r12, %rdx
// 132: ff d0                         callq   *%rax
// 134: 49 8b 04 24                   movq    (%r12), %rax
// 138: 85 c0                         testl   %eax, %eax
// 13a: 78 09                         js      0x145 <_JIT_ENTRY+0x145>
// 13c: 41 ff d5                      callq   *%r13
// 13f: 49 ff 0c 24                   decq    (%r12)
// 143: 74 40                         je      0x185 <_JIT_ENTRY+0x185>
// 145: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _JIT_OPARG
// 153: a8 01                         testb   $0x1, %al
// 155: 74 07                         je      0x15e <_JIT_ENTRY+0x15e>
// 157: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 15e: 83 e0 01                      andl    $0x1, %eax
// 161: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _JIT_CONTINUE
// 16f: 48 89 df                      movq    %rbx, %rdi
// 172: 4c 89 fa                      movq    %r15, %rdx
// 175: 48 83 c4 08                   addq    $0x8, %rsp
// 179: 5b                            popq    %rbx
// 17a: 41 5c                         popq    %r12
// 17c: 41 5d                         popq    %r13
// 17e: 41 5e                         popq    %r14
// 180: 41 5f                         popq    %r15
// 182: 5d                            popq    %rbp
// 183: ff e0                         jmpq    *%rax
// 185: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000187:  R_X86_64_64  _Py_Dealloc
// 18f: 4c 89 e7                      movq    %r12, %rdi
// 192: ff d0                         callq   *%rax
// 194: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  _JIT_OPARG
// 1a2: a8 01                         testb   $0x1, %al
// 1a4: 75 b1                         jne     0x157 <_JIT_ENTRY+0x157>
// 1a6: eb b6                         jmp     0x15e <_JIT_ENTRY+0x15e>
// 1a8: 
static const unsigned char _DELETE_DEREFplus_LOAD_ATTR_CLASS_code_body[425] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x24, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x52, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x74, 0xe9, 0x87, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x47, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xf3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x09, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x40, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x75, 0xb1, 0xeb, 0xb6};
static const Hole _DELETE_DEREFplus_LOAD_ATTR_CLASS_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x65, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xcd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x187, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_ATTR_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_ATTR_CLASS_data_holes[1];

// _DELETE_DEREFplus_LOAD_ATTR_INSTANCE_VALUE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_ATTR_INSTANCE_VALUE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 49 89 f6                      movq    %rsi, %r14
// f: 48 89 fb                      movq    %rdi, %rbx
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 28: 4d 85 e4                      testq   %r12, %r12
// 2b: 74 17                         je      0x44 <_JIT_ENTRY+0x44>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 3b                         jle     0x79 <_JIT_ENTRY+0x79>
// 3e: 85 c0                         testl   %eax, %eax
// 40: 79 5d                         jns     0x9f <_JIT_ENTRY+0x9f>
// 42: eb 7c                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 44: 48 8b 33                      movq    (%rbx), %rsi
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _JIT_OPARG
// 51: 0f b7 d0                      movzwl  %ax, %edx
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5e: 4c 89 ff                      movq    %r15, %rdi
// 61: ff d0                         callq   *%rax
// 63: 49 29 de                      subq    %rbx, %r14
// 66: 49 83 c6 b8                   addq    $-0x48, %r14
// 6a: 49 c1 ee 03                   shrq    $0x3, %r14
// 6e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 72: 31 c0                         xorl    %eax, %eax
// 74: e9 a9 00 00 00                jmp     0x122 <_JIT_ENTRY+0x122>
// 79: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 92: 4c 89 e2                      movq    %r12, %rdx
// 95: ff d0                         callq   *%rax
// 97: 49 8b 04 24                   movq    (%r12), %rax
// 9b: 85 c0                         testl   %eax, %eax
// 9d: 78 21                         js      0xc0 <_JIT_ENTRY+0xc0>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a9: ff d0                         callq   *%rax
// ab: 49 ff 0c 24                   decq    (%r12)
// af: 75 0f                         jne     0xc0 <_JIT_ENTRY+0xc0>
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_Dealloc
// bb: 4c 89 e7                      movq    %r12, %rdi
// be: ff d0                         callq   *%rax
// c0: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// c4: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cb:  R_X86_64_64  _JIT_OPERAND
// d3: 0f b7 c9                      movzwl  %cx, %ecx
// d6: 4c 8b 6c c8 01                movq    0x1(%rax,%rcx,8), %r13
// db: 4d 85 ed                      testq   %r13, %r13
// de: 74 1a                         je      0xfa <_JIT_ENTRY+0xfa>
// e0: 41 8b 45 00                   movl    (%r13), %eax
// e4: ff c0                         incl    %eax
// e6: 75 44                         jne     0x12c <_JIT_ENTRY+0x12c>
// e8: 49 8b 04 24                   movq    (%r12), %rax
// ec: 48 85 c0                      testq   %rax, %rax
// ef: 7e 54                         jle     0x145 <_JIT_ENTRY+0x145>
// f1: 85 c0                         testl   %eax, %eax
// f3: 79 76                         jns     0x16b <_JIT_ENTRY+0x16b>
// f5: e9 92 00 00 00                jmp     0x18c <_JIT_ENTRY+0x18c>
// fa: 49 29 de                      subq    %rbx, %r14
// fd: 49 83 c6 b8                   addq    $-0x48, %r14
// 101: 49 c1 ee 03                   shrq    $0x3, %r14
// 105: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 109: 48 8b 03                      movq    (%rbx), %rax
// 10c: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010e:  R_X86_64_64  _JIT_TARGET
// 116: 89 c9                         movl    %ecx, %ecx
// 118: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 11c: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 122: 5b                            popq    %rbx
// 123: 41 5c                         popq    %r12
// 125: 41 5d                         popq    %r13
// 127: 41 5e                         popq    %r14
// 129: 41 5f                         popq    %r15
// 12b: c3                            retq
// 12c: 41 89 45 00                   movl    %eax, (%r13)
// 130: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000132:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 13a: ff d0                         callq   *%rax
// 13c: 49 8b 04 24                   movq    (%r12), %rax
// 140: 48 85 c0                      testq   %rax, %rax
// 143: 7f ac                         jg      0xf1 <_JIT_ENTRY+0xf1>
// 145: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000147:  R_X86_64_64  .rodata.str1.1
// 14f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000151:  R_X86_64_64  _Py_NegativeRefcount
// 159: be 75 06 00 00                movl    $0x675, %esi            # imm = 0x675
// 15e: 4c 89 e2                      movq    %r12, %rdx
// 161: ff d0                         callq   *%rax
// 163: 49 8b 04 24                   movq    (%r12), %rax
// 167: 85 c0                         testl   %eax, %eax
// 169: 78 21                         js      0x18c <_JIT_ENTRY+0x18c>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 49 ff 0c 24                   decq    (%r12)
// 17b: 75 0f                         jne     0x18c <_JIT_ENTRY+0x18c>
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_Dealloc
// 187: 4c 89 e7                      movq    %r12, %rdi
// 18a: ff d0                         callq   *%rax
// 18c: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _JIT_OPARG
// 19a: a8 01                         testb   $0x1, %al
// 19c: 74 07                         je      0x1a5 <_JIT_ENTRY+0x1a5>
// 19e: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 1a5: 83 e0 01                      andl    $0x1, %eax
// 1a8: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  _JIT_CONTINUE
// 1b6: 48 89 df                      movq    %rbx, %rdi
// 1b9: 4c 89 fa                      movq    %r15, %rdx
// 1bc: 5b                            popq    %rbx
// 1bd: 41 5c                         popq    %r12
// 1bf: 41 5d                         popq    %r13
// 1c1: 41 5e                         popq    %r14
// 1c3: 41 5f                         popq    %r15
// 1c5: ff e0                         jmpq    *%rax
// 1c7: 
static const unsigned char _DELETE_DEREFplus_LOAD_ATTR_INSTANCE_VALUE_code_body[456] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xa9, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8b, 0x66, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x6c, 0xc8, 0x01, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x44, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x54, 0x85, 0xc0, 0x79, 0x76, 0xe9, 0x92, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xac, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_LOAD_ATTR_INSTANCE_VALUE_code_holes[17] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x132, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_ATTR_INSTANCE_VALUE_data_holes[1];

// _DELETE_DEREFplus_LOAD_ATTR_METHOD_LAZY_DICT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_ATTR_METHOD_LAZY_DICT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 28: 4d 85 e4                      testq   %r12, %r12
// 2b: 74 1a                         je      0x47 <_JIT_ENTRY+0x47>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 43                         jle     0x81 <_JIT_ENTRY+0x81>
// 3e: 85 c0                         testl   %eax, %eax
// 40: 79 65                         jns     0xa7 <_JIT_ENTRY+0xa7>
// 42: e9 81 00 00 00                jmp     0xc8 <_JIT_ENTRY+0xc8>
// 47: 49 8b 36                      movq    (%r14), %rsi
// 4a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004c:  R_X86_64_64  _JIT_OPARG
// 54: 0f b7 d0                      movzwl  %ax, %edx
// 57: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000059:  R_X86_64_64  _PyEval_FormatExcUnbound
// 61: 4c 89 ff                      movq    %r15, %rdi
// 64: ff d0                         callq   *%rax
// 66: 4c 29 f3                      subq    %r14, %rbx
// 69: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 71: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 75: 31 c0                         xorl    %eax, %eax
// 77: 5b                            popq    %rbx
// 78: 41 5c                         popq    %r12
// 7a: 41 5d                         popq    %r13
// 7c: 41 5e                         popq    %r14
// 7e: 41 5f                         popq    %r15
// 80: c3                            retq
// 81: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000083:  R_X86_64_64  .rodata.str1.1
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_NegativeRefcount
// 95: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9a: 4c 89 e2                      movq    %r12, %rdx
// 9d: ff d0                         callq   *%rax
// 9f: 49 8b 04 24                   movq    (%r12), %rax
// a3: 85 c0                         testl   %eax, %eax
// a5: 78 21                         js      0xc8 <_JIT_ENTRY+0xc8>
// a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b1: ff d0                         callq   *%rax
// b3: 49 ff 0c 24                   decq    (%r12)
// b7: 75 0f                         jne     0xc8 <_JIT_ENTRY+0xc8>
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  _Py_Dealloc
// c3: 4c 89 e7                      movq    %r12, %rdi
// c6: ff d0                         callq   *%rax
// c8: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// cc: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000ce:  R_X86_64_64  _JIT_OPERAND
// d6: 41 8b 45 00                   movl    (%r13), %eax
// da: ff c0                         incl    %eax
// dc: 74 10                         je      0xee <_JIT_ENTRY+0xee>
// de: 41 89 45 00                   movl    %eax, (%r13)
// e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e4:  R_X86_64_64  _Py_INCREF_IncRefTotal
// ec: ff d0                         callq   *%rax
// ee: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// f2: 4c 89 23                      movq    %r12, (%rbx)
// f5: 48 83 c3 08                   addq    $0x8, %rbx
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _JIT_CONTINUE
// 103: 4c 89 f7                      movq    %r14, %rdi
// 106: 48 89 de                      movq    %rbx, %rsi
// 109: 4c 89 fa                      movq    %r15, %rdx
// 10c: 5b                            popq    %rbx
// 10d: 41 5c                         popq    %r12
// 10f: 41 5d                         popq    %r13
// 111: 41 5e                         popq    %r14
// 113: 41 5f                         popq    %r15
// 115: ff e0                         jmpq    *%rax
// 117: 
static const unsigned char _DELETE_DEREFplus_LOAD_ATTR_METHOD_LAZY_DICT_code_body[280] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x43, 0x85, 0xc0, 0x79, 0x65, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_LOAD_ATTR_METHOD_LAZY_DICT_code_holes[11] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_ATTR_METHOD_LAZY_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_ATTR_METHOD_LAZY_DICT_data_holes[1];

// _DELETE_DEREFplus_LOAD_ATTR_METHOD_NO_DICT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_ATTR_METHOD_NO_DICT.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 28: 4d 85 e4                      testq   %r12, %r12
// 2b: 74 1a                         je      0x47 <_JIT_ENTRY+0x47>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 43                         jle     0x81 <_JIT_ENTRY+0x81>
// 3e: 85 c0                         testl   %eax, %eax
// 40: 79 65                         jns     0xa7 <_JIT_ENTRY+0xa7>
// 42: e9 81 00 00 00                jmp     0xc8 <_JIT_ENTRY+0xc8>
// 47: 49 8b 36                      movq    (%r14), %rsi
// 4a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004c:  R_X86_64_64  _JIT_OPARG
// 54: 0f b7 d0                      movzwl  %ax, %edx
// 57: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000059:  R_X86_64_64  _PyEval_FormatExcUnbound
// 61: 4c 89 ff                      movq    %r15, %rdi
// 64: ff d0                         callq   *%rax
// 66: 4c 29 f3                      subq    %r14, %rbx
// 69: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 71: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 75: 31 c0                         xorl    %eax, %eax
// 77: 5b                            popq    %rbx
// 78: 41 5c                         popq    %r12
// 7a: 41 5d                         popq    %r13
// 7c: 41 5e                         popq    %r14
// 7e: 41 5f                         popq    %r15
// 80: c3                            retq
// 81: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000083:  R_X86_64_64  .rodata.str1.1
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_NegativeRefcount
// 95: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9a: 4c 89 e2                      movq    %r12, %rdx
// 9d: ff d0                         callq   *%rax
// 9f: 49 8b 04 24                   movq    (%r12), %rax
// a3: 85 c0                         testl   %eax, %eax
// a5: 78 21                         js      0xc8 <_JIT_ENTRY+0xc8>
// a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b1: ff d0                         callq   *%rax
// b3: 49 ff 0c 24                   decq    (%r12)
// b7: 75 0f                         jne     0xc8 <_JIT_ENTRY+0xc8>
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  _Py_Dealloc
// c3: 4c 89 e7                      movq    %r12, %rdi
// c6: ff d0                         callq   *%rax
// c8: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// cc: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000ce:  R_X86_64_64  _JIT_OPERAND
// d6: 41 8b 45 00                   movl    (%r13), %eax
// da: ff c0                         incl    %eax
// dc: 74 10                         je      0xee <_JIT_ENTRY+0xee>
// de: 41 89 45 00                   movl    %eax, (%r13)
// e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e4:  R_X86_64_64  _Py_INCREF_IncRefTotal
// ec: ff d0                         callq   *%rax
// ee: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// f2: 4c 89 23                      movq    %r12, (%rbx)
// f5: 48 83 c3 08                   addq    $0x8, %rbx
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _JIT_CONTINUE
// 103: 4c 89 f7                      movq    %r14, %rdi
// 106: 48 89 de                      movq    %rbx, %rsi
// 109: 4c 89 fa                      movq    %r15, %rdx
// 10c: 5b                            popq    %rbx
// 10d: 41 5c                         popq    %r12
// 10f: 41 5d                         popq    %r13
// 111: 41 5e                         popq    %r14
// 113: 41 5f                         popq    %r15
// 115: ff e0                         jmpq    *%rax
// 117: 
static const unsigned char _DELETE_DEREFplus_LOAD_ATTR_METHOD_NO_DICT_code_body[280] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x43, 0x85, 0xc0, 0x79, 0x65, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_LOAD_ATTR_METHOD_NO_DICT_code_holes[11] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_ATTR_METHOD_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_ATTR_METHOD_NO_DICT_data_holes[1];

// _DELETE_DEREFplus_LOAD_ATTR_METHOD_WITH_VALUES
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_ATTR_METHOD_WITH_VALUES.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 28: 4d 85 e4                      testq   %r12, %r12
// 2b: 74 1a                         je      0x47 <_JIT_ENTRY+0x47>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 43                         jle     0x81 <_JIT_ENTRY+0x81>
// 3e: 85 c0                         testl   %eax, %eax
// 40: 79 65                         jns     0xa7 <_JIT_ENTRY+0xa7>
// 42: e9 81 00 00 00                jmp     0xc8 <_JIT_ENTRY+0xc8>
// 47: 49 8b 36                      movq    (%r14), %rsi
// 4a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004c:  R_X86_64_64  _JIT_OPARG
// 54: 0f b7 d0                      movzwl  %ax, %edx
// 57: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000059:  R_X86_64_64  _PyEval_FormatExcUnbound
// 61: 4c 89 ff                      movq    %r15, %rdi
// 64: ff d0                         callq   *%rax
// 66: 4c 29 f3                      subq    %r14, %rbx
// 69: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 71: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 75: 31 c0                         xorl    %eax, %eax
// 77: 5b                            popq    %rbx
// 78: 41 5c                         popq    %r12
// 7a: 41 5d                         popq    %r13
// 7c: 41 5e                         popq    %r14
// 7e: 41 5f                         popq    %r15
// 80: c3                            retq
// 81: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000083:  R_X86_64_64  .rodata.str1.1
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_NegativeRefcount
// 95: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9a: 4c 89 e2                      movq    %r12, %rdx
// 9d: ff d0                         callq   *%rax
// 9f: 49 8b 04 24                   movq    (%r12), %rax
// a3: 85 c0                         testl   %eax, %eax
// a5: 78 21                         js      0xc8 <_JIT_ENTRY+0xc8>
// a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b1: ff d0                         callq   *%rax
// b3: 49 ff 0c 24                   decq    (%r12)
// b7: 75 0f                         jne     0xc8 <_JIT_ENTRY+0xc8>
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  _Py_Dealloc
// c3: 4c 89 e7                      movq    %r12, %rdi
// c6: ff d0                         callq   *%rax
// c8: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// cc: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000ce:  R_X86_64_64  _JIT_OPERAND
// d6: 41 8b 45 00                   movl    (%r13), %eax
// da: ff c0                         incl    %eax
// dc: 74 10                         je      0xee <_JIT_ENTRY+0xee>
// de: 41 89 45 00                   movl    %eax, (%r13)
// e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e4:  R_X86_64_64  _Py_INCREF_IncRefTotal
// ec: ff d0                         callq   *%rax
// ee: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// f2: 4c 89 23                      movq    %r12, (%rbx)
// f5: 48 83 c3 08                   addq    $0x8, %rbx
// f9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fb:  R_X86_64_64  _JIT_CONTINUE
// 103: 4c 89 f7                      movq    %r14, %rdi
// 106: 48 89 de                      movq    %rbx, %rsi
// 109: 4c 89 fa                      movq    %r15, %rdx
// 10c: 5b                            popq    %rbx
// 10d: 41 5c                         popq    %r12
// 10f: 41 5d                         popq    %r13
// 111: 41 5e                         popq    %r14
// 113: 41 5f                         popq    %r15
// 115: ff e0                         jmpq    *%rax
// 117: 
static const unsigned char _DELETE_DEREFplus_LOAD_ATTR_METHOD_WITH_VALUES_code_body[280] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x43, 0x85, 0xc0, 0x79, 0x65, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_LOAD_ATTR_METHOD_WITH_VALUES_code_holes[11] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_ATTR_METHOD_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_ATTR_METHOD_WITH_VALUES_data_holes[1];

// _DELETE_DEREFplus_LOAD_ATTR_MODULE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_ATTR_MODULE.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 49 89 f6                      movq    %rsi, %r14
// f: 48 89 fb                      movq    %rdi, %rbx
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 28: 4d 85 e4                      testq   %r12, %r12
// 2b: 74 17                         je      0x44 <_JIT_ENTRY+0x44>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 3b                         jle     0x79 <_JIT_ENTRY+0x79>
// 3e: 85 c0                         testl   %eax, %eax
// 40: 79 5d                         jns     0x9f <_JIT_ENTRY+0x9f>
// 42: eb 7c                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 44: 48 8b 33                      movq    (%rbx), %rsi
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _JIT_OPARG
// 51: 0f b7 d0                      movzwl  %ax, %edx
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5e: 4c 89 ff                      movq    %r15, %rdi
// 61: ff d0                         callq   *%rax
// 63: 49 29 de                      subq    %rbx, %r14
// 66: 49 83 c6 b8                   addq    $-0x48, %r14
// 6a: 49 c1 ee 03                   shrq    $0x3, %r14
// 6e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 72: 31 c0                         xorl    %eax, %eax
// 74: e9 c0 00 00 00                jmp     0x139 <_JIT_ENTRY+0x139>
// 79: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 92: 4c 89 e2                      movq    %r12, %rdx
// 95: ff d0                         callq   *%rax
// 97: 49 8b 04 24                   movq    (%r12), %rax
// 9b: 85 c0                         testl   %eax, %eax
// 9d: 78 21                         js      0xc0 <_JIT_ENTRY+0xc0>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a9: ff d0                         callq   *%rax
// ab: 49 ff 0c 24                   decq    (%r12)
// af: 75 0f                         jne     0xc0 <_JIT_ENTRY+0xc0>
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_Dealloc
// bb: 4c 89 e7                      movq    %r12, %rdi
// be: ff d0                         callq   *%rax
// c0: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// c4: 49 8b 44 24 10                movq    0x10(%r12), %rax
// c9: 48 8b 40 20                   movq    0x20(%rax), %rax
// cd: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// d1: ba 01 00 00 00                movl    $0x1, %edx
// d6: 48 d3 e2                      shlq    %cl, %rdx
// d9: 48 01 c2                      addq    %rax, %rdx
// dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000de:  R_X86_64_64  _JIT_OPERAND
// e6: 0f b7 c0                      movzwl  %ax, %eax
// e9: 48 c1 e0 04                   shlq    $0x4, %rax
// ed: 4c 8b 6c 10 28                movq    0x28(%rax,%rdx), %r13
// f2: 4d 85 ed                      testq   %r13, %r13
// f5: 74 1a                         je      0x111 <_JIT_ENTRY+0x111>
// f7: 41 8b 45 00                   movl    (%r13), %eax
// fb: ff c0                         incl    %eax
// fd: 75 44                         jne     0x143 <_JIT_ENTRY+0x143>
// ff: 49 8b 04 24                   movq    (%r12), %rax
// 103: 48 85 c0                      testq   %rax, %rax
// 106: 7e 54                         jle     0x15c <_JIT_ENTRY+0x15c>
// 108: 85 c0                         testl   %eax, %eax
// 10a: 79 76                         jns     0x182 <_JIT_ENTRY+0x182>
// 10c: e9 92 00 00 00                jmp     0x1a3 <_JIT_ENTRY+0x1a3>
// 111: 49 29 de                      subq    %rbx, %r14
// 114: 49 83 c6 b8                   addq    $-0x48, %r14
// 118: 49 c1 ee 03                   shrq    $0x3, %r14
// 11c: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 120: 48 8b 03                      movq    (%rbx), %rax
// 123: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000125:  R_X86_64_64  _JIT_TARGET
// 12d: 89 c9                         movl    %ecx, %ecx
// 12f: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 133: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 139: 5b                            popq    %rbx
// 13a: 41 5c                         popq    %r12
// 13c: 41 5d                         popq    %r13
// 13e: 41 5e                         popq    %r14
// 140: 41 5f                         popq    %r15
// 142: c3                            retq
// 143: 41 89 45 00                   movl    %eax, (%r13)
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 151: ff d0                         callq   *%rax
// 153: 49 8b 04 24                   movq    (%r12), %rax
// 157: 48 85 c0                      testq   %rax, %rax
// 15a: 7f ac                         jg      0x108 <_JIT_ENTRY+0x108>
// 15c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015e:  R_X86_64_64  .rodata.str1.1
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_NegativeRefcount
// 170: be 97 06 00 00                movl    $0x697, %esi            # imm = 0x697
// 175: 4c 89 e2                      movq    %r12, %rdx
// 178: ff d0                         callq   *%rax
// 17a: 49 8b 04 24                   movq    (%r12), %rax
// 17e: 85 c0                         testl   %eax, %eax
// 180: 78 21                         js      0x1a3 <_JIT_ENTRY+0x1a3>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18c: ff d0                         callq   *%rax
// 18e: 49 ff 0c 24                   decq    (%r12)
// 192: 75 0f                         jne     0x1a3 <_JIT_ENTRY+0x1a3>
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_Dealloc
// 19e: 4c 89 e7                      movq    %r12, %rdi
// 1a1: ff d0                         callq   *%rax
// 1a3: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 1a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a9:  R_X86_64_64  _JIT_OPARG
// 1b1: a8 01                         testb   $0x1, %al
// 1b3: 74 07                         je      0x1bc <_JIT_ENTRY+0x1bc>
// 1b5: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 1bc: 83 e0 01                      andl    $0x1, %eax
// 1bf: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _JIT_CONTINUE
// 1cd: 48 89 df                      movq    %rbx, %rdi
// 1d0: 4c 89 fa                      movq    %r15, %rdx
// 1d3: 5b                            popq    %rbx
// 1d4: 41 5c                         popq    %r12
// 1d6: 41 5d                         popq    %r13
// 1d8: 41 5e                         popq    %r14
// 1da: 41 5f                         popq    %r15
// 1dc: ff e0                         jmpq    *%rax
// 1de: 
static const unsigned char _DELETE_DEREFplus_LOAD_ATTR_MODULE_code_body[479] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xc0, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8b, 0x66, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x6c, 0x10, 0x28, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x44, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x54, 0x85, 0xc0, 0x79, 0x76, 0xe9, 0x92, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xac, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x97, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_LOAD_ATTR_MODULE_code_holes[17] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_ATTR_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_ATTR_MODULE_data_holes[1];

// _DELETE_DEREFplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 28: 4d 85 e4                      testq   %r12, %r12
// 2b: 74 21                         je      0x4e <_JIT_ENTRY+0x4e>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 4a                         jle     0x88 <_JIT_ENTRY+0x88>
// 3e: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000040:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 48: 85 c0                         testl   %eax, %eax
// 4a: 79 6c                         jns     0xb8 <_JIT_ENTRY+0xb8>
// 4c: eb 73                         jmp     0xc1 <_JIT_ENTRY+0xc1>
// 4e: 49 8b 36                      movq    (%r14), %rsi
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: 0f b7 d0                      movzwl  %ax, %edx
// 5e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000060:  R_X86_64_64  _PyEval_FormatExcUnbound
// 68: 4c 89 ff                      movq    %r15, %rdi
// 6b: ff d0                         callq   *%rax
// 6d: 4c 29 f3                      subq    %r14, %rbx
// 70: 48 83 c3 b8                   addq    $-0x48, %rbx
// 74: 48 c1 eb 03                   shrq    $0x3, %rbx
// 78: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 7c: 31 c0                         xorl    %eax, %eax
// 7e: 5b                            popq    %rbx
// 7f: 41 5c                         popq    %r12
// 81: 41 5d                         popq    %r13
// 83: 41 5e                         popq    %r14
// 85: 41 5f                         popq    %r15
// 87: c3                            retq
// 88: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008a:  R_X86_64_64  .rodata.str1.1
// 92: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000094:  R_X86_64_64  _Py_NegativeRefcount
// 9c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// a1: 4c 89 e2                      movq    %r12, %rdx
// a4: ff d0                         callq   *%rax
// a6: 49 8b 04 24                   movq    (%r12), %rax
// aa: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000ac:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b4: 85 c0                         testl   %eax, %eax
// b6: 78 09                         js      0xc1 <_JIT_ENTRY+0xc1>
// b8: 41 ff d5                      callq   *%r13
// bb: 49 ff 0c 24                   decq    (%r12)
// bf: 74 13                         je      0xd4 <_JIT_ENTRY+0xd4>
// c1: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// c5: 49 8b 04 24                   movq    (%r12), %rax
// c9: 48 85 c0                      testq   %rax, %rax
// cc: 7e 22                         jle     0xf0 <_JIT_ENTRY+0xf0>
// ce: 85 c0                         testl   %eax, %eax
// d0: 79 44                         jns     0x116 <_JIT_ENTRY+0x116>
// d2: eb 4b                         jmp     0x11f <_JIT_ENTRY+0x11f>
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_Dealloc
// de: 4c 89 e7                      movq    %r12, %rdi
// e1: ff d0                         callq   *%rax
// e3: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 48 85 c0                      testq   %rax, %rax
// ee: 7f de                         jg      0xce <_JIT_ENTRY+0xce>
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_NegativeRefcount
// 104: be d9 09 00 00                movl    $0x9d9, %esi            # imm = 0x9D9
// 109: 4c 89 e2                      movq    %r12, %rdx
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 04 24                   movq    (%r12), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 09                         js      0x11f <_JIT_ENTRY+0x11f>
// 116: 41 ff d5                      callq   *%r13
// 119: 49 ff 0c 24                   decq    (%r12)
// 11d: 74 44                         je      0x163 <_JIT_ENTRY+0x163>
// 11f: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000121:  R_X86_64_64  _JIT_OPERAND
// 129: 41 8b 04 24                   movl    (%r12), %eax
// 12d: ff c0                         incl    %eax
// 12f: 74 10                         je      0x141 <_JIT_ENTRY+0x141>
// 131: 41 89 04 24                   movl    %eax, (%r12)
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 13f: ff d0                         callq   *%rax
// 141: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _JIT_CONTINUE
// 14f: 4c 89 f7                      movq    %r14, %rdi
// 152: 48 89 de                      movq    %rbx, %rsi
// 155: 4c 89 fa                      movq    %r15, %rdx
// 158: 5b                            popq    %rbx
// 159: 41 5c                         popq    %r12
// 15b: 41 5d                         popq    %r13
// 15d: 41 5e                         popq    %r14
// 15f: 41 5f                         popq    %r15
// 161: ff e0                         jmpq    *%rax
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 4c 89 e7                      movq    %r12, %rdi
// 170: ff d0                         callq   *%rax
// 172: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000174:  R_X86_64_64  _JIT_OPERAND
// 17c: 41 8b 04 24                   movl    (%r12), %eax
// 180: ff c0                         incl    %eax
// 182: 75 ad                         jne     0x131 <_JIT_ENTRY+0x131>
// 184: eb bb                         jmp     0x141 <_JIT_ENTRY+0x141>
// 186: 
static const unsigned char _DELETE_DEREFplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_body[391] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x21, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4a, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x6c, 0xeb, 0x73, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x09, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x13, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x4b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd9, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x09, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x44, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x75, 0xad, 0xeb, 0xbb};
static const Hole _DELETE_DEREFplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_code_holes[16] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x40, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x60, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT_data_holes[1];

// _DELETE_DEREFplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 28: 4d 85 e4                      testq   %r12, %r12
// 2b: 74 21                         je      0x4e <_JIT_ENTRY+0x4e>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 4a                         jle     0x88 <_JIT_ENTRY+0x88>
// 3e: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000040:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 48: 85 c0                         testl   %eax, %eax
// 4a: 79 6c                         jns     0xb8 <_JIT_ENTRY+0xb8>
// 4c: eb 73                         jmp     0xc1 <_JIT_ENTRY+0xc1>
// 4e: 49 8b 36                      movq    (%r14), %rsi
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: 0f b7 d0                      movzwl  %ax, %edx
// 5e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000060:  R_X86_64_64  _PyEval_FormatExcUnbound
// 68: 4c 89 ff                      movq    %r15, %rdi
// 6b: ff d0                         callq   *%rax
// 6d: 4c 29 f3                      subq    %r14, %rbx
// 70: 48 83 c3 b8                   addq    $-0x48, %rbx
// 74: 48 c1 eb 03                   shrq    $0x3, %rbx
// 78: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 7c: 31 c0                         xorl    %eax, %eax
// 7e: 5b                            popq    %rbx
// 7f: 41 5c                         popq    %r12
// 81: 41 5d                         popq    %r13
// 83: 41 5e                         popq    %r14
// 85: 41 5f                         popq    %r15
// 87: c3                            retq
// 88: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008a:  R_X86_64_64  .rodata.str1.1
// 92: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000094:  R_X86_64_64  _Py_NegativeRefcount
// 9c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// a1: 4c 89 e2                      movq    %r12, %rdx
// a4: ff d0                         callq   *%rax
// a6: 49 8b 04 24                   movq    (%r12), %rax
// aa: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000ac:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b4: 85 c0                         testl   %eax, %eax
// b6: 78 09                         js      0xc1 <_JIT_ENTRY+0xc1>
// b8: 41 ff d5                      callq   *%r13
// bb: 49 ff 0c 24                   decq    (%r12)
// bf: 74 13                         je      0xd4 <_JIT_ENTRY+0xd4>
// c1: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// c5: 49 8b 04 24                   movq    (%r12), %rax
// c9: 48 85 c0                      testq   %rax, %rax
// cc: 7e 22                         jle     0xf0 <_JIT_ENTRY+0xf0>
// ce: 85 c0                         testl   %eax, %eax
// d0: 79 44                         jns     0x116 <_JIT_ENTRY+0x116>
// d2: eb 4b                         jmp     0x11f <_JIT_ENTRY+0x11f>
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _Py_Dealloc
// de: 4c 89 e7                      movq    %r12, %rdi
// e1: ff d0                         callq   *%rax
// e3: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 48 85 c0                      testq   %rax, %rax
// ee: 7f de                         jg      0xce <_JIT_ENTRY+0xce>
// f0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f2:  R_X86_64_64  .rodata.str1.1
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _Py_NegativeRefcount
// 104: be c8 09 00 00                movl    $0x9c8, %esi            # imm = 0x9C8
// 109: 4c 89 e2                      movq    %r12, %rdx
// 10c: ff d0                         callq   *%rax
// 10e: 49 8b 04 24                   movq    (%r12), %rax
// 112: 85 c0                         testl   %eax, %eax
// 114: 78 09                         js      0x11f <_JIT_ENTRY+0x11f>
// 116: 41 ff d5                      callq   *%r13
// 119: 49 ff 0c 24                   decq    (%r12)
// 11d: 74 44                         je      0x163 <_JIT_ENTRY+0x163>
// 11f: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000121:  R_X86_64_64  _JIT_OPERAND
// 129: 41 8b 04 24                   movl    (%r12), %eax
// 12d: ff c0                         incl    %eax
// 12f: 74 10                         je      0x141 <_JIT_ENTRY+0x141>
// 131: 41 89 04 24                   movl    %eax, (%r12)
// 135: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000137:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 13f: ff d0                         callq   *%rax
// 141: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _JIT_CONTINUE
// 14f: 4c 89 f7                      movq    %r14, %rdi
// 152: 48 89 de                      movq    %rbx, %rsi
// 155: 4c 89 fa                      movq    %r15, %rdx
// 158: 5b                            popq    %rbx
// 159: 41 5c                         popq    %r12
// 15b: 41 5d                         popq    %r13
// 15d: 41 5e                         popq    %r14
// 15f: 41 5f                         popq    %r15
// 161: ff e0                         jmpq    *%rax
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: 4c 89 e7                      movq    %r12, %rdi
// 170: ff d0                         callq   *%rax
// 172: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 0000000000000174:  R_X86_64_64  _JIT_OPERAND
// 17c: 41 8b 04 24                   movl    (%r12), %eax
// 180: ff c0                         incl    %eax
// 182: 75 ad                         jne     0x131 <_JIT_ENTRY+0x131>
// 184: eb bb                         jmp     0x141 <_JIT_ENTRY+0x141>
// 186: 
static const unsigned char _DELETE_DEREFplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_body[391] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x21, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4a, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x6c, 0xeb, 0x73, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x09, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x13, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x4b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc8, 0x09, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x09, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x44, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x75, 0xad, 0xeb, 0xbb};
static const Hole _DELETE_DEREFplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_code_holes[16] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x40, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x60, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x137, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES_data_holes[1];

// _DELETE_DEREFplus_LOAD_ATTR_SLOT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_ATTR_SLOT.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 49 89 f6                      movq    %rsi, %r14
// f: 48 89 fb                      movq    %rdi, %rbx
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 28: 4d 85 e4                      testq   %r12, %r12
// 2b: 74 17                         je      0x44 <_JIT_ENTRY+0x44>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 3b                         jle     0x79 <_JIT_ENTRY+0x79>
// 3e: 85 c0                         testl   %eax, %eax
// 40: 79 5d                         jns     0x9f <_JIT_ENTRY+0x9f>
// 42: eb 7c                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 44: 48 8b 33                      movq    (%rbx), %rsi
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _JIT_OPARG
// 51: 0f b7 d0                      movzwl  %ax, %edx
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5e: 4c 89 ff                      movq    %r15, %rdi
// 61: ff d0                         callq   *%rax
// 63: 49 29 de                      subq    %rbx, %r14
// 66: 49 83 c6 b8                   addq    $-0x48, %r14
// 6a: 49 c1 ee 03                   shrq    $0x3, %r14
// 6e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 72: 31 c0                         xorl    %eax, %eax
// 74: e9 a3 00 00 00                jmp     0x11c <_JIT_ENTRY+0x11c>
// 79: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 92: 4c 89 e2                      movq    %r12, %rdx
// 95: ff d0                         callq   *%rax
// 97: 49 8b 04 24                   movq    (%r12), %rax
// 9b: 85 c0                         testl   %eax, %eax
// 9d: 78 21                         js      0xc0 <_JIT_ENTRY+0xc0>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a9: ff d0                         callq   *%rax
// ab: 49 ff 0c 24                   decq    (%r12)
// af: 75 0f                         jne     0xc0 <_JIT_ENTRY+0xc0>
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_Dealloc
// bb: 4c 89 e7                      movq    %r12, %rdi
// be: ff d0                         callq   *%rax
// c0: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// c4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c6:  R_X86_64_64  _JIT_OPERAND
// ce: 0f b7 c0                      movzwl  %ax, %eax
// d1: 4d 8b 2c 04                   movq    (%r12,%rax), %r13
// d5: 4d 85 ed                      testq   %r13, %r13
// d8: 74 1a                         je      0xf4 <_JIT_ENTRY+0xf4>
// da: 41 8b 45 00                   movl    (%r13), %eax
// de: ff c0                         incl    %eax
// e0: 75 44                         jne     0x126 <_JIT_ENTRY+0x126>
// e2: 49 8b 04 24                   movq    (%r12), %rax
// e6: 48 85 c0                      testq   %rax, %rax
// e9: 7e 54                         jle     0x13f <_JIT_ENTRY+0x13f>
// eb: 85 c0                         testl   %eax, %eax
// ed: 79 76                         jns     0x165 <_JIT_ENTRY+0x165>
// ef: e9 92 00 00 00                jmp     0x186 <_JIT_ENTRY+0x186>
// f4: 49 29 de                      subq    %rbx, %r14
// f7: 49 83 c6 b8                   addq    $-0x48, %r14
// fb: 49 c1 ee 03                   shrq    $0x3, %r14
// ff: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 103: 48 8b 03                      movq    (%rbx), %rax
// 106: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000108:  R_X86_64_64  _JIT_TARGET
// 110: 89 c9                         movl    %ecx, %ecx
// 112: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 116: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 11c: 5b                            popq    %rbx
// 11d: 41 5c                         popq    %r12
// 11f: 41 5d                         popq    %r13
// 121: 41 5e                         popq    %r14
// 123: 41 5f                         popq    %r15
// 125: c3                            retq
// 126: 41 89 45 00                   movl    %eax, (%r13)
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 134: ff d0                         callq   *%rax
// 136: 49 8b 04 24                   movq    (%r12), %rax
// 13a: 48 85 c0                      testq   %rax, %rax
// 13d: 7f ac                         jg      0xeb <_JIT_ENTRY+0xeb>
// 13f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000141:  R_X86_64_64  .rodata.str1.1
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_NegativeRefcount
// 153: be d7 06 00 00                movl    $0x6d7, %esi            # imm = 0x6D7
// 158: 4c 89 e2                      movq    %r12, %rdx
// 15b: ff d0                         callq   *%rax
// 15d: 49 8b 04 24                   movq    (%r12), %rax
// 161: 85 c0                         testl   %eax, %eax
// 163: 78 21                         js      0x186 <_JIT_ENTRY+0x186>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 16f: ff d0                         callq   *%rax
// 171: 49 ff 0c 24                   decq    (%r12)
// 175: 75 0f                         jne     0x186 <_JIT_ENTRY+0x186>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_Dealloc
// 181: 4c 89 e7                      movq    %r12, %rdi
// 184: ff d0                         callq   *%rax
// 186: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 18a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018c:  R_X86_64_64  _JIT_OPARG
// 194: a8 01                         testb   $0x1, %al
// 196: 74 07                         je      0x19f <_JIT_ENTRY+0x19f>
// 198: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 19f: 83 e0 01                      andl    $0x1, %eax
// 1a2: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a8:  R_X86_64_64  _JIT_CONTINUE
// 1b0: 48 89 df                      movq    %rbx, %rdi
// 1b3: 4c 89 fa                      movq    %r15, %rdx
// 1b6: 5b                            popq    %rbx
// 1b7: 41 5c                         popq    %r12
// 1b9: 41 5d                         popq    %r13
// 1bb: 41 5e                         popq    %r14
// 1bd: 41 5f                         popq    %r15
// 1bf: ff e0                         jmpq    *%rax
// 1c1: 
static const unsigned char _DELETE_DEREFplus_LOAD_ATTR_SLOT_code_body[450] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xa3, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x2c, 0x04, 0x4d, 0x85, 0xed, 0x74, 0x1a, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x44, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x54, 0x85, 0xc0, 0x79, 0x76, 0xe9, 0x92, 0x00, 0x00, 0x00, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xac, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd7, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_LOAD_ATTR_SLOT_code_holes[17] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc6, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x141, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1a8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_ATTR_SLOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_ATTR_SLOT_data_holes[1];

// _DELETE_DEREFplus_LOAD_ATTR_WITH_HINT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_ATTR_WITH_HINT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 49 89 f6                      movq    %rsi, %r14
// f: 48 89 fb                      movq    %rdi, %rbx
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 28: 4d 85 e4                      testq   %r12, %r12
// 2b: 74 17                         je      0x44 <_JIT_ENTRY+0x44>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 3b                         jle     0x79 <_JIT_ENTRY+0x79>
// 3e: 85 c0                         testl   %eax, %eax
// 40: 79 5d                         jns     0x9f <_JIT_ENTRY+0x9f>
// 42: eb 7c                         jmp     0xc0 <_JIT_ENTRY+0xc0>
// 44: 48 8b 33                      movq    (%rbx), %rsi
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _JIT_OPARG
// 51: 0f b7 d0                      movzwl  %ax, %edx
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5e: 4c 89 ff                      movq    %r15, %rdi
// 61: ff d0                         callq   *%rax
// 63: 49 29 de                      subq    %rbx, %r14
// 66: 49 83 c6 b8                   addq    $-0x48, %r14
// 6a: 49 c1 ee 03                   shrq    $0x3, %r14
// 6e: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 72: 31 c0                         xorl    %eax, %eax
// 74: e9 04 01 00 00                jmp     0x17d <_JIT_ENTRY+0x17d>
// 79: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007b:  R_X86_64_64  .rodata.str1.1
// 83: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000085:  R_X86_64_64  _Py_NegativeRefcount
// 8d: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 92: 4c 89 e2                      movq    %r12, %rdx
// 95: ff d0                         callq   *%rax
// 97: 49 8b 04 24                   movq    (%r12), %rax
// 9b: 85 c0                         testl   %eax, %eax
// 9d: 78 21                         js      0xc0 <_JIT_ENTRY+0xc0>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a9: ff d0                         callq   *%rax
// ab: 49 ff 0c 24                   decq    (%r12)
// af: 75 0f                         jne     0xc0 <_JIT_ENTRY+0xc0>
// b1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b3:  R_X86_64_64  _Py_Dealloc
// bb: 4c 89 e7                      movq    %r12, %rdi
// be: ff d0                         callq   *%rax
// c0: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// c4: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// c9: 48 8b 50 20                   movq    0x20(%rax), %rdx
// cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cf:  R_X86_64_64  _JIT_OPERAND
// d7: 0f b7 c8                      movzwl  %ax, %ecx
// da: 48 8b 03                      movq    (%rbx), %rax
// dd: 48 39 4a 18                   cmpq    %rcx, 0x18(%rdx)
// e1: 76 75                         jbe     0x158 <_JIT_ENTRY+0x158>
// e3: 48 8b 70 20                   movq    0x20(%rax), %rsi
// e7: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e9:  R_X86_64_64  _JIT_OPARG
// f1: 81 e7 fe ff 00 00             andl    $0xfffe, %edi           # imm = 0xFFFE
// f7: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
// fb: 41 b8 01 00 00 00             movl    $0x1, %r8d
// 101: 49 d3 e0                      shlq    %cl, %r8
// 104: 48 8b 74 be 18                movq    0x18(%rsi,%rdi,4), %rsi
// 109: 80 7a 0a 00                   cmpb    $0x0, 0xa(%rdx)
// 10d: 4a 8d 4c 02 20                leaq    0x20(%rdx,%r8), %rcx
// 112: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000114:  R_X86_64_64  _JIT_OPERAND
// 11c: 0f b7 d2                      movzwl  %dx, %edx
// 11f: 74 2c                         je      0x14d <_JIT_ENTRY+0x14d>
// 121: 48 c1 e2 04                   shlq    $0x4, %rdx
// 125: 48 39 34 11                   cmpq    %rsi, (%rcx,%rdx)
// 129: 75 2d                         jne     0x158 <_JIT_ENTRY+0x158>
// 12b: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000012d:  R_X86_64_64  _JIT_OPERAND
// 135: 0f b7 d2                      movzwl  %dx, %edx
// 138: 48 c1 e2 04                   shlq    $0x4, %rdx
// 13c: 48 01 d1                      addq    %rdx, %rcx
// 13f: 48 83 c1 08                   addq    $0x8, %rcx
// 143: 4c 8b 29                      movq    (%rcx), %r13
// 146: 4d 85 ed                      testq   %r13, %r13
// 149: 75 5d                         jne     0x1a8 <_JIT_ENTRY+0x1a8>
// 14b: eb 0b                         jmp     0x158 <_JIT_ENTRY+0x158>
// 14d: 48 8d 14 52                   leaq    (%rdx,%rdx,2), %rdx
// 151: 48 39 74 d1 08                cmpq    %rsi, 0x8(%rcx,%rdx,8)
// 156: 74 2f                         je      0x187 <_JIT_ENTRY+0x187>
// 158: 49 29 de                      subq    %rbx, %r14
// 15b: 49 83 c6 b8                   addq    $-0x48, %r14
// 15f: 49 c1 ee 03                   shrq    $0x3, %r14
// 163: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 167: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000169:  R_X86_64_64  _JIT_TARGET
// 171: 89 c9                         movl    %ecx, %ecx
// 173: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 177: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 17d: 5b                            popq    %rbx
// 17e: 41 5c                         popq    %r12
// 180: 41 5d                         popq    %r13
// 182: 41 5e                         popq    %r14
// 184: 41 5f                         popq    %r15
// 186: c3                            retq
// 187: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000189:  R_X86_64_64  _JIT_OPERAND
// 191: 0f b7 d2                      movzwl  %dx, %edx
// 194: 48 8d 14 52                   leaq    (%rdx,%rdx,2), %rdx
// 198: 48 8d 0c d1                   leaq    (%rcx,%rdx,8), %rcx
// 19c: 48 83 c1 10                   addq    $0x10, %rcx
// 1a0: 4c 8b 29                      movq    (%rcx), %r13
// 1a3: 4d 85 ed                      testq   %r13, %r13
// 1a6: 74 b0                         je      0x158 <_JIT_ENTRY+0x158>
// 1a8: 41 8b 45 00                   movl    (%r13), %eax
// 1ac: ff c0                         incl    %eax
// 1ae: 75 0f                         jne     0x1bf <_JIT_ENTRY+0x1bf>
// 1b0: 49 8b 04 24                   movq    (%r12), %rax
// 1b4: 48 85 c0                      testq   %rax, %rax
// 1b7: 7e 1f                         jle     0x1d8 <_JIT_ENTRY+0x1d8>
// 1b9: 85 c0                         testl   %eax, %eax
// 1bb: 79 41                         jns     0x1fe <_JIT_ENTRY+0x1fe>
// 1bd: eb 60                         jmp     0x21f <_JIT_ENTRY+0x21f>
// 1bf: 41 89 45 00                   movl    %eax, (%r13)
// 1c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c5:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1cd: ff d0                         callq   *%rax
// 1cf: 49 8b 04 24                   movq    (%r12), %rax
// 1d3: 48 85 c0                      testq   %rax, %rax
// 1d6: 7f e1                         jg      0x1b9 <_JIT_ENTRY+0x1b9>
// 1d8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001da:  R_X86_64_64  .rodata.str1.1
// 1e2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e4:  R_X86_64_64  _Py_NegativeRefcount
// 1ec: be c3 06 00 00                movl    $0x6c3, %esi            # imm = 0x6C3
// 1f1: 4c 89 e2                      movq    %r12, %rdx
// 1f4: ff d0                         callq   *%rax
// 1f6: 49 8b 04 24                   movq    (%r12), %rax
// 1fa: 85 c0                         testl   %eax, %eax
// 1fc: 78 21                         js      0x21f <_JIT_ENTRY+0x21f>
// 1fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000200:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 208: ff d0                         callq   *%rax
// 20a: 49 ff 0c 24                   decq    (%r12)
// 20e: 75 0f                         jne     0x21f <_JIT_ENTRY+0x21f>
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _Py_Dealloc
// 21a: 4c 89 e7                      movq    %r12, %rdi
// 21d: ff d0                         callq   *%rax
// 21f: 4d 89 6e f8                   movq    %r13, -0x8(%r14)
// 223: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000225:  R_X86_64_64  _JIT_OPARG
// 22d: a8 01                         testb   $0x1, %al
// 22f: 74 07                         je      0x238 <_JIT_ENTRY+0x238>
// 231: 49 c7 06 00 00 00 00          movq    $0x0, (%r14)
// 238: 83 e0 01                      andl    $0x1, %eax
// 23b: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 23f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000241:  R_X86_64_64  _JIT_CONTINUE
// 249: 48 89 df                      movq    %rbx, %rdi
// 24c: 4c 89 fa                      movq    %r15, %rdx
// 24f: 5b                            popq    %rbx
// 250: 41 5c                         popq    %r12
// 252: 41 5d                         popq    %r13
// 254: 41 5e                         popq    %r14
// 256: 41 5f                         popq    %r15
// 258: ff e0                         jmpq    *%rax
// 25a: 
static const unsigned char _DELETE_DEREFplus_LOAD_ATTR_WITH_HINT_code_body[603] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x04, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8b, 0x66, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0x8b, 0x50, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0x8b, 0x03, 0x48, 0x39, 0x4a, 0x18, 0x76, 0x75, 0x48, 0x8b, 0x70, 0x20, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe7, 0xfe, 0xff, 0x00, 0x00, 0x0f, 0xb6, 0x4a, 0x09, 0x41, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x49, 0xd3, 0xe0, 0x48, 0x8b, 0x74, 0xbe, 0x18, 0x80, 0x7a, 0x0a, 0x00, 0x4a, 0x8d, 0x4c, 0x02, 0x20, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x74, 0x2c, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0x39, 0x34, 0x11, 0x75, 0x2d, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x48, 0xc1, 0xe2, 0x04, 0x48, 0x01, 0xd1, 0x48, 0x83, 0xc1, 0x08, 0x4c, 0x8b, 0x29, 0x4d, 0x85, 0xed, 0x75, 0x5d, 0xeb, 0x0b, 0x48, 0x8d, 0x14, 0x52, 0x48, 0x39, 0x74, 0xd1, 0x08, 0x74, 0x2f, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x48, 0x8d, 0x14, 0x52, 0x48, 0x8d, 0x0c, 0xd1, 0x48, 0x83, 0xc1, 0x10, 0x4c, 0x8b, 0x29, 0x4d, 0x85, 0xed, 0x74, 0xb0, 0x41, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x1f, 0x85, 0xc0, 0x79, 0x41, 0xeb, 0x60, 0x41, 0x89, 0x45, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xe1, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc3, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x89, 0x6e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x07, 0x49, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_LOAD_ATTR_WITH_HINT_code_holes[21] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x85, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x114, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x1c5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1da, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x200, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x225, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x241, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_ATTR_WITH_HINT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_ATTR_WITH_HINT_data_holes[1];

// _DELETE_DEREFplus_LOAD_BUILD_CLASS
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_BUILD_CLASS.o:  file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 2a                         jle     0x67 <_JIT_ENTRY+0x67>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 4c                         jns     0x8d <_JIT_ENTRY+0x8d>
// 41: eb 6b                         jmp     0xae <_JIT_ENTRY+0xae>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: e9 c5 00 00 00                jmp     0x12c <_JIT_ENTRY+0x12c>
// 67: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000069:  R_X86_64_64  .rodata.str1.1
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_NegativeRefcount
// 7b: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 80: 4c 89 e2                      movq    %r12, %rdx
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 85 c0                         testl   %eax, %eax
// 8b: 78 21                         js      0xae <_JIT_ENTRY+0xae>
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: ff d0                         callq   *%rax
// 99: 49 ff 0c 24                   decq    (%r12)
// 9d: 75 0f                         jne     0xae <_JIT_ENTRY+0xae>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _Py_Dealloc
// a9: 4c 89 e7                      movq    %r12, %rdi
// ac: ff d0                         callq   *%rax
// ae: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  PyMapping_GetOptionalItem
// bc: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 00000000000000be:  R_X86_64_64  _PyRuntime
// c6: 48 81 c6 40 a9 00 00          addq    $0xa940, %rsi           # imm = 0xA940
// cd: 48 89 e2                      movq    %rsp, %rdx
// d0: ff d0                         callq   *%rax
// d2: 85 c0                         testl   %eax, %eax
// d4: 78 56                         js      0x12c <_JIT_ENTRY+0x12c>
// d6: 48 8b 04 24                   movq    (%rsp), %rax
// da: 48 85 c0                      testq   %rax, %rax
// dd: 74 27                         je      0x106 <_JIT_ENTRY+0x106>
// df: 48 89 03                      movq    %rax, (%rbx)
// e2: 48 83 c3 08                   addq    $0x8, %rbx
// e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e8:  R_X86_64_64  _JIT_CONTINUE
// f0: 4c 89 f7                      movq    %r14, %rdi
// f3: 48 89 de                      movq    %rbx, %rsi
// f6: 4c 89 fa                      movq    %r15, %rdx
// f9: 48 83 c4 08                   addq    $0x8, %rsp
// fd: 5b                            popq    %rbx
// fe: 41 5c                         popq    %r12
// 100: 41 5e                         popq    %r14
// 102: 41 5f                         popq    %r15
// 104: ff e0                         jmpq    *%rax
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  PyExc_NameError
// 110: 48 8b 30                      movq    (%rax), %rsi
// 113: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000115:  R_X86_64_64  .rodata.str1.1+0x39
// 11d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011f:  R_X86_64_64  _PyErr_SetString
// 127: 4c 89 ff                      movq    %r15, %rdi
// 12a: ff d0                         callq   *%rax
// 12c: 4c 29 f3                      subq    %r14, %rbx
// 12f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 133: 48 c1 eb 03                   shrq    $0x3, %rbx
// 137: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 13b: 31 c0                         xorl    %eax, %eax
// 13d: 48 83 c4 08                   addq    $0x8, %rsp
// 141: 5b                            popq    %rbx
// 142: 41 5c                         popq    %r12
// 144: 41 5e                         popq    %r14
// 146: 41 5f                         popq    %r15
// 148: c3                            retq
// 149: 
static const unsigned char _DELETE_DEREFplus_LOAD_BUILD_CLASS_code_body[330] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xc5, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x81, 0xc6, 0x40, 0xa9, 0x00, 0x00, 0x48, 0x89, 0xe2, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x56, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x27, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_LOAD_BUILD_CLASS_code_holes[14] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0xe8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x11f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00__build_class__ not found\x00'
// 53: 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_BUILD_CLASS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x5f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_BUILD_CLASS_data_holes[1];

// _DELETE_DEREFplus_LOAD_CONST
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_CONST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 1a                         je      0x46 <_JIT_ENTRY+0x46>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 45                         jle     0x82 <_JIT_ENTRY+0x82>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 67                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 41: e9 83 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 4c 29 f3                      subq    %r14, %rbx
// 68: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 70: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 74: 31 c0                         xorl    %eax, %eax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 21                         js      0xc9 <_JIT_ENTRY+0xc9>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 75 0f                         jne     0xc9 <_JIT_ENTRY+0xc9>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_Dealloc
// c4: 4c 89 e7                      movq    %r12, %rdi
// c7: ff d0                         callq   *%rax
// c9: 49 8b 06                      movq    (%r14), %rax
// cc: 48 8b 40 18                   movq    0x18(%rax), %rax
// d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d2:  R_X86_64_64  _JIT_OPARG
// da: 0f b7 c9                      movzwl  %cx, %ecx
// dd: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// e2: 41 8b 04 24                   movl    (%r12), %eax
// e6: ff c0                         incl    %eax
// e8: 74 10                         je      0xfa <_JIT_ENTRY+0xfa>
// ea: 41 89 04 24                   movl    %eax, (%r12)
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_INCREF_IncRefTotal
// f8: ff d0                         callq   *%rax
// fa: 4c 89 23                      movq    %r12, (%rbx)
// fd: 48 83 c3 08                   addq    $0x8, %rbx
// 101: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000103:  R_X86_64_64  _JIT_CONTINUE
// 10b: 4c 89 f7                      movq    %r14, %rdi
// 10e: 48 89 de                      movq    %rbx, %rsi
// 111: 4c 89 fa                      movq    %r15, %rdx
// 114: 48 83 c4 08                   addq    $0x8, %rsp
// 118: 5b                            popq    %rbx
// 119: 41 5c                         popq    %r12
// 11b: 41 5e                         popq    %r14
// 11d: 41 5f                         popq    %r15
// 11f: ff e0                         jmpq    *%rax
// 121: 
static const unsigned char _DELETE_DEREFplus_LOAD_CONST_code_body[290] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x18, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_LOAD_CONST_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_CONST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_CONST_data_holes[1];

// _DELETE_DEREFplus_LOAD_DEREF
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_DEREF.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 0f 84 b8 00 00 00             je      0xe8 <_JIT_ENTRY+0xe8>
// 30: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 06                         jle     0x47 <_JIT_ENTRY+0x47>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 28                         jns     0x6d <_JIT_ENTRY+0x6d>
// 45: eb 47                         jmp     0x8e <_JIT_ENTRY+0x8e>
// 47: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000049:  R_X86_64_64  .rodata.str1.1
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _Py_NegativeRefcount
// 5b: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 60: 4c 89 e2                      movq    %r12, %rdx
// 63: ff d0                         callq   *%rax
// 65: 49 8b 04 24                   movq    (%r12), %rax
// 69: 85 c0                         testl   %eax, %eax
// 6b: 78 21                         js      0x8e <_JIT_ENTRY+0x8e>
// 6d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 77: ff d0                         callq   *%rax
// 79: 49 ff 0c 24                   decq    (%r12)
// 7d: 75 0f                         jne     0x8e <_JIT_ENTRY+0x8e>
// 7f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000081:  R_X86_64_64  _Py_Dealloc
// 89: 4c 89 e7                      movq    %r12, %rdi
// 8c: ff d0                         callq   *%rax
// 8e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000090:  R_X86_64_64  _JIT_OPARG
// 98: 0f b7 c0                      movzwl  %ax, %eax
// 9b: 49 8b 44 c6 48                movq    0x48(%r14,%rax,8), %rax
// a0: 4c 8b 60 10                   movq    0x10(%rax), %r12
// a4: 4d 85 e4                      testq   %r12, %r12
// a7: 74 3f                         je      0xe8 <_JIT_ENTRY+0xe8>
// a9: 41 8b 04 24                   movl    (%r12), %eax
// ad: ff c0                         incl    %eax
// af: 74 10                         je      0xc1 <_JIT_ENTRY+0xc1>
// b1: 41 89 04 24                   movl    %eax, (%r12)
// b5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b7:  R_X86_64_64  _Py_INCREF_IncRefTotal
// bf: ff d0                         callq   *%rax
// c1: 4c 89 23                      movq    %r12, (%rbx)
// c4: 48 83 c3 08                   addq    $0x8, %rbx
// c8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ca:  R_X86_64_64  _JIT_CONTINUE
// d2: 4c 89 f7                      movq    %r14, %rdi
// d5: 48 89 de                      movq    %rbx, %rsi
// d8: 4c 89 fa                      movq    %r15, %rdx
// db: 48 83 c4 08                   addq    $0x8, %rsp
// df: 5b                            popq    %rbx
// e0: 41 5c                         popq    %r12
// e2: 41 5e                         popq    %r14
// e4: 41 5f                         popq    %r15
// e6: ff e0                         jmpq    *%rax
// e8: 49 8b 36                      movq    (%r14), %rsi
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 0f b7 d0                      movzwl  %ax, %edx
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _PyEval_FormatExcUnbound
// 102: 4c 89 ff                      movq    %r15, %rdi
// 105: ff d0                         callq   *%rax
// 107: 4c 29 f3                      subq    %r14, %rbx
// 10a: 48 83 c3 b8                   addq    $-0x48, %rbx
// 10e: 48 c1 eb 03                   shrq    $0x3, %rbx
// 112: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 116: 31 c0                         xorl    %eax, %eax
// 118: 48 83 c4 08                   addq    $0x8, %rsp
// 11c: 5b                            popq    %rbx
// 11d: 41 5c                         popq    %r12
// 11f: 41 5e                         popq    %r14
// 121: 41 5f                         popq    %r15
// 123: c3                            retq
// 124: 
static const unsigned char _DELETE_DEREFplus_LOAD_DEREF_code_body[293] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xb8, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x44, 0xc6, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x3f, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_LOAD_DEREF_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xb7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_DEREF_data_holes[1];

// _DELETE_DEREFplus_LOAD_FAST
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_FAST.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 1a                         je      0x46 <_JIT_ENTRY+0x46>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 45                         jle     0x82 <_JIT_ENTRY+0x82>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 67                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 41: e9 83 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 4c 29 f3                      subq    %r14, %rbx
// 68: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 70: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 74: 31 c0                         xorl    %eax, %eax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 21                         js      0xc9 <_JIT_ENTRY+0xc9>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 75 0f                         jne     0xc9 <_JIT_ENTRY+0xc9>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_Dealloc
// c4: 4c 89 e7                      movq    %r12, %rdi
// c7: ff d0                         callq   *%rax
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _JIT_OPARG
// d3: 0f b7 c0                      movzwl  %ax, %eax
// d6: 4d 8b 64 c6 48                movq    0x48(%r14,%rax,8), %r12
// db: 41 8b 04 24                   movl    (%r12), %eax
// df: ff c0                         incl    %eax
// e1: 74 10                         je      0xf3 <_JIT_ENTRY+0xf3>
// e3: 41 89 04 24                   movl    %eax, (%r12)
// e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e9:  R_X86_64_64  _Py_INCREF_IncRefTotal
// f1: ff d0                         callq   *%rax
// f3: 4c 89 23                      movq    %r12, (%rbx)
// f6: 48 83 c3 08                   addq    $0x8, %rbx
// fa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fc:  R_X86_64_64  _JIT_CONTINUE
// 104: 4c 89 f7                      movq    %r14, %rdi
// 107: 48 89 de                      movq    %rbx, %rsi
// 10a: 4c 89 fa                      movq    %r15, %rdx
// 10d: 48 83 c4 08                   addq    $0x8, %rsp
// 111: 5b                            popq    %rbx
// 112: 41 5c                         popq    %r12
// 114: 41 5e                         popq    %r14
// 116: 41 5f                         popq    %r15
// 118: ff e0                         jmpq    *%rax
// 11a: 
static const unsigned char _DELETE_DEREFplus_LOAD_FAST_code_body[283] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x64, 0xc6, 0x48, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_LOAD_FAST_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_FAST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_FAST_data_holes[1];

// _DELETE_DEREFplus_LOAD_FAST_AND_CLEAR
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_FAST_AND_CLEAR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 1a                         je      0x46 <_JIT_ENTRY+0x46>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 45                         jle     0x82 <_JIT_ENTRY+0x82>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 67                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 41: e9 83 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 4c 29 f3                      subq    %r14, %rbx
// 68: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 70: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 74: 31 c0                         xorl    %eax, %eax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 21                         js      0xc9 <_JIT_ENTRY+0xc9>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 75 0f                         jne     0xc9 <_JIT_ENTRY+0xc9>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_Dealloc
// c4: 4c 89 e7                      movq    %r12, %rdi
// c7: ff d0                         callq   *%rax
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _JIT_OPARG
// d3: 0f b7 c0                      movzwl  %ax, %eax
// d6: 49 8b 4c c6 48                movq    0x48(%r14,%rax,8), %rcx
// db: 49 c7 44 c6 48 00 00 00 00    movq    $0x0, 0x48(%r14,%rax,8)
// e4: 48 89 0b                      movq    %rcx, (%rbx)
// e7: 48 83 c3 08                   addq    $0x8, %rbx
// eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ed:  R_X86_64_64  _JIT_CONTINUE
// f5: 4c 89 f7                      movq    %r14, %rdi
// f8: 48 89 de                      movq    %rbx, %rsi
// fb: 4c 89 fa                      movq    %r15, %rdx
// fe: 48 83 c4 08                   addq    $0x8, %rsp
// 102: 5b                            popq    %rbx
// 103: 41 5c                         popq    %r12
// 105: 41 5e                         popq    %r14
// 107: 41 5f                         popq    %r15
// 109: ff e0                         jmpq    *%rax
// 10b: 
static const unsigned char _DELETE_DEREFplus_LOAD_FAST_AND_CLEAR_code_body[268] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x4c, 0xc6, 0x48, 0x49, 0xc7, 0x44, 0xc6, 0x48, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x0b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_LOAD_FAST_AND_CLEAR_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_FAST_AND_CLEAR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_FAST_AND_CLEAR_data_holes[1];

// _DELETE_DEREFplus_LOAD_FAST_CHECK
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_FAST_CHECK.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 2a                         jle     0x67 <_JIT_ENTRY+0x67>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 4c                         jns     0x8d <_JIT_ENTRY+0x8d>
// 41: eb 6b                         jmp     0xae <_JIT_ENTRY+0xae>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: e9 ea 00 00 00                jmp     0x151 <_JIT_ENTRY+0x151>
// 67: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000069:  R_X86_64_64  .rodata.str1.1
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_NegativeRefcount
// 7b: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 80: 4c 89 e2                      movq    %r12, %rdx
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 85 c0                         testl   %eax, %eax
// 8b: 78 21                         js      0xae <_JIT_ENTRY+0xae>
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: ff d0                         callq   *%rax
// 99: 49 ff 0c 24                   decq    (%r12)
// 9d: 75 0f                         jne     0xae <_JIT_ENTRY+0xae>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _Py_Dealloc
// a9: 4c 89 e7                      movq    %r12, %rdi
// ac: ff d0                         callq   *%rax
// ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b0:  R_X86_64_64  _JIT_OPARG
// b8: 0f b7 c0                      movzwl  %ax, %eax
// bb: 4d 8b 64 c6 48                movq    0x48(%r14,%rax,8), %r12
// c0: 4d 85 e4                      testq   %r12, %r12
// c3: 74 3f                         je      0x104 <_JIT_ENTRY+0x104>
// c5: 41 8b 04 24                   movl    (%r12), %eax
// c9: ff c0                         incl    %eax
// cb: 74 10                         je      0xdd <_JIT_ENTRY+0xdd>
// cd: 41 89 04 24                   movl    %eax, (%r12)
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _Py_INCREF_IncRefTotal
// db: ff d0                         callq   *%rax
// dd: 4c 89 23                      movq    %r12, (%rbx)
// e0: 48 83 c3 08                   addq    $0x8, %rbx
// e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e6:  R_X86_64_64  _JIT_CONTINUE
// ee: 4c 89 f7                      movq    %r14, %rdi
// f1: 48 89 de                      movq    %rbx, %rsi
// f4: 4c 89 fa                      movq    %r15, %rdx
// f7: 48 83 c4 08                   addq    $0x8, %rsp
// fb: 5b                            popq    %rbx
// fc: 41 5c                         popq    %r12
// fe: 41 5e                         popq    %r14
// 100: 41 5f                         popq    %r15
// 102: ff e0                         jmpq    *%rax
// 104: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000106:  R_X86_64_64  PyExc_UnboundLocalError
// 10e: 4c 8b 20                      movq    (%rax), %r12
// 111: 49 8b 06                      movq    (%r14), %rax
// 114: 48 8b 78 60                   movq    0x60(%rax), %rdi
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _JIT_OPARG
// 122: 0f b7 f0                      movzwl  %ax, %esi
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  PyTuple_GetItem
// 12f: ff d0                         callq   *%rax
// 131: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000133:  R_X86_64_64  .rodata.str1.1+0x39
// 13b: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000013d:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 145: 4c 89 ff                      movq    %r15, %rdi
// 148: 4c 89 e6                      movq    %r12, %rsi
// 14b: 48 89 c1                      movq    %rax, %rcx
// 14e: 41 ff d0                      callq   *%r8
// 151: 4c 29 f3                      subq    %r14, %rbx
// 154: 48 83 c3 b8                   addq    $-0x48, %rbx
// 158: 48 c1 eb 03                   shrq    $0x3, %rbx
// 15c: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 160: 31 c0                         xorl    %eax, %eax
// 162: 48 83 c4 08                   addq    $0x8, %rsp
// 166: 5b                            popq    %rbx
// 167: 41 5c                         popq    %r12
// 169: 41 5e                         popq    %r14
// 16b: 41 5f                         popq    %r15
// 16d: c3                            retq
// 16e: 
static const unsigned char _DELETE_DEREFplus_LOAD_FAST_CHECK_code_body[367] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xea, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x4d, 0x8b, 0x64, 0xc6, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x3f, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x20, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x78, 0x60, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0x48, 0x89, 0xc1, 0x41, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_LOAD_FAST_CHECK_code_holes[16] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_UnboundLocalError, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_GetItem, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00cannot access local variable '%s' where it is not associated with a value\x00"
// 83: 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_FAST_CHECK_data_body[137] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73, 0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_FAST_CHECK_data_holes[1];

// _DELETE_DEREFplus_LOAD_FROM_DICT_OR_DEREF
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_FROM_DICT_OR_DEREF.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 0f 84 e3 00 00 00             je      0x113 <_JIT_ENTRY+0x113>
// 30: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 38: 49 8b 04 24                   movq    (%r12), %rax
// 3c: 48 85 c0                      testq   %rax, %rax
// 3f: 7e 06                         jle     0x47 <_JIT_ENTRY+0x47>
// 41: 85 c0                         testl   %eax, %eax
// 43: 79 28                         jns     0x6d <_JIT_ENTRY+0x6d>
// 45: eb 47                         jmp     0x8e <_JIT_ENTRY+0x8e>
// 47: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000049:  R_X86_64_64  .rodata.str1.1
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _Py_NegativeRefcount
// 5b: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 60: 4c 89 e2                      movq    %r12, %rdx
// 63: ff d0                         callq   *%rax
// 65: 49 8b 04 24                   movq    (%r12), %rax
// 69: 85 c0                         testl   %eax, %eax
// 6b: 78 21                         js      0x8e <_JIT_ENTRY+0x8e>
// 6d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000006f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 77: ff d0                         callq   *%rax
// 79: 49 ff 0c 24                   decq    (%r12)
// 7d: 75 0f                         jne     0x8e <_JIT_ENTRY+0x8e>
// 7f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000081:  R_X86_64_64  _Py_Dealloc
// 89: 4c 89 e7                      movq    %r12, %rdi
// 8c: ff d0                         callq   *%rax
// 8e: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 92: 49 8b 06                      movq    (%r14), %rax
// 95: 48 8b 40 60                   movq    0x60(%rax), %rax
// 99: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000009b:  R_X86_64_64  _JIT_OPARG
// a3: 0f b7 c9                      movzwl  %cx, %ecx
// a6: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// ab: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ad:  R_X86_64_64  PyMapping_GetOptionalItem
// b5: 48 89 e2                      movq    %rsp, %rdx
// b8: 4c 89 e7                      movq    %r12, %rdi
// bb: ff d0                         callq   *%rax
// bd: 85 c0                         testl   %eax, %eax
// bf: 78 71                         js      0x132 <_JIT_ENTRY+0x132>
// c1: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// c6: 74 16                         je      0xde <_JIT_ENTRY+0xde>
// c8: 49 8b 04 24                   movq    (%r12), %rax
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 7e 7e                         jle     0x14f <_JIT_ENTRY+0x14f>
// d1: 85 c0                         testl   %eax, %eax
// d3: 0f 89 9c 00 00 00             jns     0x175 <_JIT_ENTRY+0x175>
// d9: e9 b8 00 00 00                jmp     0x196 <_JIT_ENTRY+0x196>
// de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e0:  R_X86_64_64  _JIT_OPARG
// e8: 0f b7 c0                      movzwl  %ax, %eax
// eb: 49 8b 44 c6 48                movq    0x48(%r14,%rax,8), %rax
// f0: 48 8b 40 10                   movq    0x10(%rax), %rax
// f4: 48 89 04 24                   movq    %rax, (%rsp)
// f8: 48 85 c0                      testq   %rax, %rax
// fb: 74 16                         je      0x113 <_JIT_ENTRY+0x113>
// fd: 8b 08                         movl    (%rax), %ecx
// ff: ff c1                         incl    %ecx
// 101: 74 c5                         je      0xc8 <_JIT_ENTRY+0xc8>
// 103: 89 08                         movl    %ecx, (%rax)
// 105: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000107:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 10f: ff d0                         callq   *%rax
// 111: eb b5                         jmp     0xc8 <_JIT_ENTRY+0xc8>
// 113: 49 8b 36                      movq    (%r14), %rsi
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _JIT_OPARG
// 120: 0f b7 d0                      movzwl  %ax, %edx
// 123: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000125:  R_X86_64_64  _PyEval_FormatExcUnbound
// 12d: 4c 89 ff                      movq    %r15, %rdi
// 130: ff d0                         callq   *%rax
// 132: 4c 29 f3                      subq    %r14, %rbx
// 135: 48 83 c3 b8                   addq    $-0x48, %rbx
// 139: 48 c1 eb 03                   shrq    $0x3, %rbx
// 13d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 141: 31 c0                         xorl    %eax, %eax
// 143: 48 83 c4 08                   addq    $0x8, %rsp
// 147: 5b                            popq    %rbx
// 148: 41 5c                         popq    %r12
// 14a: 41 5e                         popq    %r14
// 14c: 41 5f                         popq    %r15
// 14e: c3                            retq
// 14f: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000151:  R_X86_64_64  .rodata.str1.1
// 159: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015b:  R_X86_64_64  _Py_NegativeRefcount
// 163: be dd 04 00 00                movl    $0x4dd, %esi            # imm = 0x4DD
// 168: 4c 89 e2                      movq    %r12, %rdx
// 16b: ff d0                         callq   *%rax
// 16d: 49 8b 04 24                   movq    (%r12), %rax
// 171: 85 c0                         testl   %eax, %eax
// 173: 78 21                         js      0x196 <_JIT_ENTRY+0x196>
// 175: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000177:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17f: ff d0                         callq   *%rax
// 181: 49 ff 0c 24                   decq    (%r12)
// 185: 75 0f                         jne     0x196 <_JIT_ENTRY+0x196>
// 187: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000189:  R_X86_64_64  _Py_Dealloc
// 191: 4c 89 e7                      movq    %r12, %rdi
// 194: ff d0                         callq   *%rax
// 196: 48 8b 04 24                   movq    (%rsp), %rax
// 19a: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _JIT_CONTINUE
// 1a8: 4c 89 f7                      movq    %r14, %rdi
// 1ab: 48 89 de                      movq    %rbx, %rsi
// 1ae: 4c 89 fa                      movq    %r15, %rdx
// 1b1: 48 83 c4 08                   addq    $0x8, %rsp
// 1b5: 5b                            popq    %rbx
// 1b6: 41 5c                         popq    %r12
// 1b8: 41 5e                         popq    %r14
// 1ba: 41 5f                         popq    %r15
// 1bc: ff e0                         jmpq    *%rax
// 1be: 
static const unsigned char _DELETE_DEREFplus_LOAD_FROM_DICT_OR_DEREF_code_body[447] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xe3, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x60, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x71, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x74, 0x16, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7e, 0x85, 0xc0, 0x0f, 0x89, 0x9c, 0x00, 0x00, 0x00, 0xe9, 0xb8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x44, 0xc6, 0x48, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x16, 0x8b, 0x08, 0xff, 0xc1, 0x74, 0xc5, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xb5, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdd, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_LOAD_FROM_DICT_OR_DEREF_code_holes[17] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x9b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xad, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0xe0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x107, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x118, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x125, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x151, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x177, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x189, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_FROM_DICT_OR_DEREF_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_FROM_DICT_OR_DEREF_data_holes[1];

// _DELETE_DEREFplus_LOAD_FROM_DICT_OR_GLOBALS
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_FROM_DICT_OR_GLOBALS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 2a                         jle     0x6a <_JIT_ENTRY+0x6a>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 4c                         jns     0x90 <_JIT_ENTRY+0x90>
// 44: eb 6b                         jmp     0xb1 <_JIT_ENTRY+0xb1>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: e9 03 01 00 00                jmp     0x16d <_JIT_ENTRY+0x16d>
// 6a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006c:  R_X86_64_64  .rodata.str1.1
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _Py_NegativeRefcount
// 7e: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 83: 4c 89 e2                      movq    %r12, %rdx
// 86: ff d0                         callq   *%rax
// 88: 49 8b 04 24                   movq    (%r12), %rax
// 8c: 85 c0                         testl   %eax, %eax
// 8e: 78 21                         js      0xb1 <_JIT_ENTRY+0xb1>
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9a: ff d0                         callq   *%rax
// 9c: 49 ff 0c 24                   decq    (%r12)
// a0: 75 0f                         jne     0xb1 <_JIT_ENTRY+0xb1>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_Dealloc
// ac: 4c 89 e7                      movq    %r12, %rdi
// af: ff d0                         callq   *%rax
// b1: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// b5: 49 8b 06                      movq    (%r14), %rax
// b8: 48 8b 40 20                   movq    0x20(%rax), %rax
// bc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000be:  R_X86_64_64  _JIT_OPARG
// c6: 0f b7 c9                      movzwl  %cx, %ecx
// c9: 4c 8b 6c c8 18                movq    0x18(%rax,%rcx,8), %r13
// ce: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000d0:  R_X86_64_64  PyMapping_GetOptionalItem
// d8: 48 89 e2                      movq    %rsp, %rdx
// db: 4c 89 e7                      movq    %r12, %rdi
// de: 4c 89 ee                      movq    %r13, %rsi
// e1: ff d5                         callq   *%rbp
// e3: 85 c0                         testl   %eax, %eax
// e5: 0f 88 82 00 00 00             js      0x16d <_JIT_ENTRY+0x16d>
// eb: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// f0: 74 1a                         je      0x10c <_JIT_ENTRY+0x10c>
// f2: 49 8b 04 24                   movq    (%r12), %rax
// f6: 48 85 c0                      testq   %rax, %rax
// f9: 0f 8e 8e 00 00 00             jle     0x18d <_JIT_ENTRY+0x18d>
// ff: 85 c0                         testl   %eax, %eax
// 101: 0f 89 ac 00 00 00             jns     0x1b3 <_JIT_ENTRY+0x1b3>
// 107: e9 c8 00 00 00                jmp     0x1d4 <_JIT_ENTRY+0x1d4>
// 10c: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  PyDict_GetItemRef
// 11a: 48 89 e2                      movq    %rsp, %rdx
// 11d: 4c 89 ee                      movq    %r13, %rsi
// 120: ff d0                         callq   *%rax
// 122: 85 c0                         testl   %eax, %eax
// 124: 78 47                         js      0x16d <_JIT_ENTRY+0x16d>
// 126: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// 12b: 75 c5                         jne     0xf2 <_JIT_ENTRY+0xf2>
// 12d: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// 131: 48 89 e2                      movq    %rsp, %rdx
// 134: 4c 89 ee                      movq    %r13, %rsi
// 137: ff d5                         callq   *%rbp
// 139: 85 c0                         testl   %eax, %eax
// 13b: 78 30                         js      0x16d <_JIT_ENTRY+0x16d>
// 13d: 48 83 3c 24 00                cmpq    $0x0, (%rsp)
// 142: 75 ae                         jne     0xf2 <_JIT_ENTRY+0xf2>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  PyExc_NameError
// 14e: 48 8b 30                      movq    (%rax), %rsi
// 151: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000153:  R_X86_64_64  .rodata.str1.1+0x39
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 165: 4c 89 ff                      movq    %r15, %rdi
// 168: 4c 89 e9                      movq    %r13, %rcx
// 16b: ff d0                         callq   *%rax
// 16d: 4c 29 f3                      subq    %r14, %rbx
// 170: 48 83 c3 b8                   addq    $-0x48, %rbx
// 174: 48 c1 eb 03                   shrq    $0x3, %rbx
// 178: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 17c: 31 c0                         xorl    %eax, %eax
// 17e: 48 83 c4 08                   addq    $0x8, %rsp
// 182: 5b                            popq    %rbx
// 183: 41 5c                         popq    %r12
// 185: 41 5d                         popq    %r13
// 187: 41 5e                         popq    %r14
// 189: 41 5f                         popq    %r15
// 18b: 5d                            popq    %rbp
// 18c: c3                            retq
// 18d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018f:  R_X86_64_64  .rodata.str1.1
// 197: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000199:  R_X86_64_64  _Py_NegativeRefcount
// 1a1: be 1b 04 00 00                movl    $0x41b, %esi            # imm = 0x41B
// 1a6: 4c 89 e2                      movq    %r12, %rdx
// 1a9: ff d0                         callq   *%rax
// 1ab: 49 8b 04 24                   movq    (%r12), %rax
// 1af: 85 c0                         testl   %eax, %eax
// 1b1: 78 21                         js      0x1d4 <_JIT_ENTRY+0x1d4>
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1bd: ff d0                         callq   *%rax
// 1bf: 49 ff 0c 24                   decq    (%r12)
// 1c3: 75 0f                         jne     0x1d4 <_JIT_ENTRY+0x1d4>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_Dealloc
// 1cf: 4c 89 e7                      movq    %r12, %rdi
// 1d2: ff d0                         callq   *%rax
// 1d4: 48 8b 04 24                   movq    (%rsp), %rax
// 1d8: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 1dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001de:  R_X86_64_64  _JIT_CONTINUE
// 1e6: 4c 89 f7                      movq    %r14, %rdi
// 1e9: 48 89 de                      movq    %rbx, %rsi
// 1ec: 4c 89 fa                      movq    %r15, %rdx
// 1ef: 48 83 c4 08                   addq    $0x8, %rsp
// 1f3: 5b                            popq    %rbx
// 1f4: 41 5c                         popq    %r12
// 1f6: 41 5d                         popq    %r13
// 1f8: 41 5e                         popq    %r14
// 1fa: 41 5f                         popq    %r15
// 1fc: 5d                            popq    %rbp
// 1fd: ff e0                         jmpq    *%rax
// 1ff: 
static const unsigned char _DELETE_DEREFplus_LOAD_FROM_DICT_OR_GLOBALS_code_body[512] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x03, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x6c, 0xc8, 0x18, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x88, 0x82, 0x00, 0x00, 0x00, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x74, 0x1a, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x8e, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xac, 0x00, 0x00, 0x00, 0xe9, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x47, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x75, 0xc5, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xee, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0x30, 0x48, 0x83, 0x3c, 0x24, 0x00, 0x75, 0xae, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe9, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_LOAD_FROM_DICT_OR_GLOBALS_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xbe, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
    {0x18f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x199, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1de, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_FROM_DICT_OR_GLOBALS_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_FROM_DICT_OR_GLOBALS_data_holes[1];

// _DELETE_DEREFplus_LOAD_GLOBAL
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_GLOBAL.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 83 ec 10                   subq    $0x10, %rsp
// d: 49 89 d7                      movq    %rdx, %r15
// 10: 49 89 f6                      movq    %rsi, %r14
// 13: 48 89 fb                      movq    %rdi, %rbx
// 16: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000018:  R_X86_64_64  _JIT_OPARG
// 20: 0f b7 c0                      movzwl  %ax, %eax
// 23: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 28: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2c: 4d 85 e4                      testq   %r12, %r12
// 2f: 74 17                         je      0x48 <_JIT_ENTRY+0x48>
// 31: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 39: 49 8b 04 24                   movq    (%r12), %rax
// 3d: 48 85 c0                      testq   %rax, %rax
// 40: 7e 2a                         jle     0x6c <_JIT_ENTRY+0x6c>
// 42: 85 c0                         testl   %eax, %eax
// 44: 79 4c                         jns     0x92 <_JIT_ENTRY+0x92>
// 46: eb 6b                         jmp     0xb3 <_JIT_ENTRY+0xb3>
// 48: 48 8b 33                      movq    (%rbx), %rsi
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: 0f b7 d0                      movzwl  %ax, %edx
// 58: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005a:  R_X86_64_64  _PyEval_FormatExcUnbound
// 62: 4c 89 ff                      movq    %r15, %rdi
// 65: ff d0                         callq   *%rax
// 67: e9 7c 01 00 00                jmp     0x1e8 <_JIT_ENTRY+0x1e8>
// 6c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006e:  R_X86_64_64  .rodata.str1.1
// 76: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000078:  R_X86_64_64  _Py_NegativeRefcount
// 80: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 85: 4c 89 e2                      movq    %r12, %rdx
// 88: ff d0                         callq   *%rax
// 8a: 49 8b 04 24                   movq    (%r12), %rax
// 8e: 85 c0                         testl   %eax, %eax
// 90: 78 21                         js      0xb3 <_JIT_ENTRY+0xb3>
// 92: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000094:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9c: ff d0                         callq   *%rax
// 9e: 49 ff 0c 24                   decq    (%r12)
// a2: 75 0f                         jne     0xb3 <_JIT_ENTRY+0xb3>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_Dealloc
// ae: 4c 89 e7                      movq    %r12, %rdi
// b1: ff d0                         callq   *%rax
// b3: 48 8b 03                      movq    (%rbx), %rax
// b6: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
// ba: 48 8b 40 20                   movq    0x20(%rax), %rax
// be: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c0:  R_X86_64_64  _JIT_OPARG
// c8: 81 e1 fe ff 00 00             andl    $0xfffe, %ecx           # imm = 0xFFFE
// ce: 4c 8b 64 88 18                movq    0x18(%rax,%rcx,4), %r12
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  PyDict_Type
// dd: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// e1: 75 0e                         jne     0xf1 <_JIT_ENTRY+0xf1>
// e3: 48 8b 73 20                   movq    0x20(%rbx), %rsi
// e7: 48 39 46 08                   cmpq    %rax, 0x8(%rsi)
// eb: 0f 84 87 00 00 00             je      0x178 <_JIT_ENTRY+0x178>
// f1: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000f3:  R_X86_64_64  PyMapping_GetOptionalItem
// fb: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 100: 4c 89 e6                      movq    %r12, %rsi
// 103: 41 ff d5                      callq   *%r13
// 106: 85 c0                         testl   %eax, %eax
// 108: 0f 88 da 00 00 00             js      0x1e8 <_JIT_ENTRY+0x1e8>
// 10e: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 113: 48 85 c0                      testq   %rax, %rax
// 116: 74 41                         je      0x159 <_JIT_ENTRY+0x159>
// 118: 49 89 06                      movq    %rax, (%r14)
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _JIT_OPARG
// 125: a8 01                         testb   $0x1, %al
// 127: 74 08                         je      0x131 <_JIT_ENTRY+0x131>
// 129: 49 c7 46 08 00 00 00 00       movq    $0x0, 0x8(%r14)
// 131: 83 e0 01                      andl    $0x1, %eax
// 134: ff c0                         incl    %eax
// 136: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _JIT_CONTINUE
// 144: 48 89 df                      movq    %rbx, %rdi
// 147: 4c 89 fa                      movq    %r15, %rdx
// 14a: 48 83 c4 10                   addq    $0x10, %rsp
// 14e: 5b                            popq    %rbx
// 14f: 41 5c                         popq    %r12
// 151: 41 5d                         popq    %r13
// 153: 41 5e                         popq    %r14
// 155: 41 5f                         popq    %r15
// 157: ff e0                         jmpq    *%rax
// 159: 48 8b 7b 20                   movq    0x20(%rbx), %rdi
// 15d: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 162: 4c 89 e6                      movq    %r12, %rsi
// 165: 41 ff d5                      callq   *%r13
// 168: 85 c0                         testl   %eax, %eax
// 16a: 78 7c                         js      0x1e8 <_JIT_ENTRY+0x1e8>
// 16c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 171: 48 85 c0                      testq   %rax, %rax
// 174: 75 a2                         jne     0x118 <_JIT_ENTRY+0x118>
// 176: eb 47                         jmp     0x1bf <_JIT_ENTRY+0x1bf>
// 178: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017a:  R_X86_64_64  _PyDict_LoadGlobal
// 182: 4c 89 e2                      movq    %r12, %rdx
// 185: ff d0                         callq   *%rax
// 187: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
// 18c: 48 85 c0                      testq   %rax, %rax
// 18f: 74 1e                         je      0x1af <_JIT_ENTRY+0x1af>
// 191: 8b 08                         movl    (%rax), %ecx
// 193: ff c1                         incl    %ecx
// 195: 74 81                         je      0x118 <_JIT_ENTRY+0x118>
// 197: 89 08                         movl    %ecx, (%rax)
// 199: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019b:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 1a3: ff d0                         callq   *%rax
// 1a5: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1aa: e9 69 ff ff ff                jmp     0x118 <_JIT_ENTRY+0x118>
// 1af: 49 8b 47 68                   movq    0x68(%r15), %rax
// 1b3: 48 85 c0                      testq   %rax, %rax
// 1b6: 74 07                         je      0x1bf <_JIT_ENTRY+0x1bf>
// 1b8: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
// 1bd: 75 29                         jne     0x1e8 <_JIT_ENTRY+0x1e8>
// 1bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c1:  R_X86_64_64  PyExc_NameError
// 1c9: 48 8b 30                      movq    (%rax), %rsi
// 1cc: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001ce:  R_X86_64_64  .rodata.str1.1+0x39
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 1e0: 4c 89 ff                      movq    %r15, %rdi
// 1e3: 4c 89 e1                      movq    %r12, %rcx
// 1e6: ff d0                         callq   *%rax
// 1e8: 49 29 de                      subq    %rbx, %r14
// 1eb: 49 83 c6 b8                   addq    $-0x48, %r14
// 1ef: 49 c1 ee 03                   shrq    $0x3, %r14
// 1f3: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 1f7: 31 c0                         xorl    %eax, %eax
// 1f9: 48 83 c4 10                   addq    $0x10, %rsp
// 1fd: 5b                            popq    %rbx
// 1fe: 41 5c                         popq    %r12
// 200: 41 5d                         popq    %r13
// 202: 41 5e                         popq    %r14
// 204: 41 5f                         popq    %r15
// 206: c3                            retq
// 207: 
static const unsigned char _DELETE_DEREFplus_LOAD_GLOBAL_code_body[520] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x10, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x7c, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x7b, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfe, 0xff, 0x00, 0x00, 0x4c, 0x8b, 0x64, 0x88, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x75, 0x0e, 0x48, 0x8b, 0x73, 0x20, 0x48, 0x39, 0x46, 0x08, 0x0f, 0x84, 0x87, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x88, 0xda, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x41, 0x49, 0x89, 0x06, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x46, 0x08, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0x8b, 0x7b, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0x7c, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x75, 0xa2, 0xeb, 0x47, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x74, 0x1e, 0x8b, 0x08, 0xff, 0xc1, 0x74, 0x81, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x08, 0xe9, 0x69, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x47, 0x68, 0x48, 0x85, 0xc0, 0x74, 0x07, 0x48, 0x83, 0x78, 0x08, 0x00, 0x75, 0x29, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_LOAD_GLOBAL_code_holes[18] = {
    {0x18, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x78, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_LoadGlobal, 0x0},
    {0x19b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x1c1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x1ce, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00"
// 56: 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_GLOBAL_data_body[89] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_GLOBAL_data_holes[1];

// _DELETE_DEREFplus_LOAD_GLOBAL_BUILTINS
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_GLOBAL_BUILTINS.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 7c                         jmp     0xbf <_JIT_ENTRY+0xbf>
// 43: 48 8b 33                      movq    (%rbx), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 49 29 de                      subq    %rbx, %r14
// 65: 49 83 c6 b8                   addq    $-0x48, %r14
// 69: 49 c1 ee 03                   shrq    $0x3, %r14
// 6d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 f8 00 00 00                jmp     0x170 <_JIT_ENTRY+0x170>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 21                         js      0xbf <_JIT_ENTRY+0xbf>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 75 0f                         jne     0xbf <_JIT_ENTRY+0xbf>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_Dealloc
// ba: 4c 89 e7                      movq    %r12, %rdi
// bd: ff d0                         callq   *%rax
// bf: 48 8b 43 20                   movq    0x20(%rbx), %rax
// c3: 48 8b 40 20                   movq    0x20(%rax), %rax
// c7: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// cb: ba 01 00 00 00                movl    $0x1, %edx
// d0: 48 d3 e2                      shlq    %cl, %rdx
// d3: 48 01 c2                      addq    %rax, %rdx
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  _JIT_OPERAND
// e0: 0f b7 c0                      movzwl  %ax, %eax
// e3: 48 c1 e0 04                   shlq    $0x4, %rax
// e7: 4c 8b 64 10 28                movq    0x28(%rax,%rdx), %r12
// ec: 4d 85 e4                      testq   %r12, %r12
// ef: 74 57                         je      0x148 <_JIT_ENTRY+0x148>
// f1: 41 8b 04 24                   movl    (%r12), %eax
// f5: ff c0                         incl    %eax
// f7: 74 10                         je      0x109 <_JIT_ENTRY+0x109>
// f9: 41 89 04 24                   movl    %eax, (%r12)
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 107: ff d0                         callq   *%rax
// 109: 4d 89 26                      movq    %r12, (%r14)
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _JIT_OPARG
// 116: a8 01                         testb   $0x1, %al
// 118: 74 08                         je      0x122 <_JIT_ENTRY+0x122>
// 11a: 49 c7 46 08 00 00 00 00       movq    $0x0, 0x8(%r14)
// 122: 83 e0 01                      andl    $0x1, %eax
// 125: ff c0                         incl    %eax
// 127: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _JIT_CONTINUE
// 135: 48 89 df                      movq    %rbx, %rdi
// 138: 4c 89 fa                      movq    %r15, %rdx
// 13b: 48 83 c4 08                   addq    $0x8, %rsp
// 13f: 5b                            popq    %rbx
// 140: 41 5c                         popq    %r12
// 142: 41 5e                         popq    %r14
// 144: 41 5f                         popq    %r15
// 146: ff e0                         jmpq    *%rax
// 148: 49 29 de                      subq    %rbx, %r14
// 14b: 49 83 c6 b8                   addq    $-0x48, %r14
// 14f: 49 c1 ee 03                   shrq    $0x3, %r14
// 153: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 157: 48 8b 03                      movq    (%rbx), %rax
// 15a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000015c:  R_X86_64_64  _JIT_TARGET
// 164: 89 c9                         movl    %ecx, %ecx
// 166: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 16a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 170: 48 83 c4 08                   addq    $0x8, %rsp
// 174: 5b                            popq    %rbx
// 175: 41 5c                         popq    %r12
// 177: 41 5e                         popq    %r14
// 179: 41 5f                         popq    %r15
// 17b: c3                            retq
// 17c: 
static const unsigned char _DELETE_DEREFplus_LOAD_GLOBAL_BUILTINS_code_body[381] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xf8, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0x20, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x64, 0x10, 0x28, 0x4d, 0x85, 0xe4, 0x74, 0x57, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x46, 0x08, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_LOAD_GLOBAL_BUILTINS_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_GLOBAL_BUILTINS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_GLOBAL_BUILTINS_data_holes[1];

// _DELETE_DEREFplus_LOAD_GLOBAL_MODULE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_GLOBAL_MODULE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 7c                         jmp     0xbf <_JIT_ENTRY+0xbf>
// 43: 48 8b 33                      movq    (%rbx), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 49 29 de                      subq    %rbx, %r14
// 65: 49 83 c6 b8                   addq    $-0x48, %r14
// 69: 49 c1 ee 03                   shrq    $0x3, %r14
// 6d: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 f8 00 00 00                jmp     0x170 <_JIT_ENTRY+0x170>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 21                         js      0xbf <_JIT_ENTRY+0xbf>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 75 0f                         jne     0xbf <_JIT_ENTRY+0xbf>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_Dealloc
// ba: 4c 89 e7                      movq    %r12, %rdi
// bd: ff d0                         callq   *%rax
// bf: 48 8b 43 18                   movq    0x18(%rbx), %rax
// c3: 48 8b 40 20                   movq    0x20(%rax), %rax
// c7: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
// cb: ba 01 00 00 00                movl    $0x1, %edx
// d0: 48 d3 e2                      shlq    %cl, %rdx
// d3: 48 01 c2                      addq    %rax, %rdx
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  _JIT_OPERAND
// e0: 0f b7 c0                      movzwl  %ax, %eax
// e3: 48 c1 e0 04                   shlq    $0x4, %rax
// e7: 4c 8b 64 10 28                movq    0x28(%rax,%rdx), %r12
// ec: 4d 85 e4                      testq   %r12, %r12
// ef: 74 57                         je      0x148 <_JIT_ENTRY+0x148>
// f1: 41 8b 04 24                   movl    (%r12), %eax
// f5: ff c0                         incl    %eax
// f7: 74 10                         je      0x109 <_JIT_ENTRY+0x109>
// f9: 41 89 04 24                   movl    %eax, (%r12)
// fd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ff:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 107: ff d0                         callq   *%rax
// 109: 4d 89 26                      movq    %r12, (%r14)
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _JIT_OPARG
// 116: a8 01                         testb   $0x1, %al
// 118: 74 08                         je      0x122 <_JIT_ENTRY+0x122>
// 11a: 49 c7 46 08 00 00 00 00       movq    $0x0, 0x8(%r14)
// 122: 83 e0 01                      andl    $0x1, %eax
// 125: ff c0                         incl    %eax
// 127: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _JIT_CONTINUE
// 135: 48 89 df                      movq    %rbx, %rdi
// 138: 4c 89 fa                      movq    %r15, %rdx
// 13b: 48 83 c4 08                   addq    $0x8, %rsp
// 13f: 5b                            popq    %rbx
// 140: 41 5c                         popq    %r12
// 142: 41 5e                         popq    %r14
// 144: 41 5f                         popq    %r15
// 146: ff e0                         jmpq    *%rax
// 148: 49 29 de                      subq    %rbx, %r14
// 14b: 49 83 c6 b8                   addq    $-0x48, %r14
// 14f: 49 c1 ee 03                   shrq    $0x3, %r14
// 153: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 157: 48 8b 03                      movq    (%rbx), %rax
// 15a: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000015c:  R_X86_64_64  _JIT_TARGET
// 164: 89 c9                         movl    %ecx, %ecx
// 166: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 16a: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 170: 48 83 c4 08                   addq    $0x8, %rsp
// 174: 5b                            popq    %rbx
// 175: 41 5c                         popq    %r12
// 177: 41 5e                         popq    %r14
// 179: 41 5f                         popq    %r15
// 17b: c3                            retq
// 17c: 
static const unsigned char _DELETE_DEREFplus_LOAD_GLOBAL_MODULE_code_body[381] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xf8, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xc1, 0xe0, 0x04, 0x4c, 0x8b, 0x64, 0x10, 0x28, 0x4d, 0x85, 0xe4, 0x74, 0x57, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4d, 0x89, 0x26, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x74, 0x08, 0x49, 0xc7, 0x46, 0x08, 0x00, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x01, 0xff, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_LOAD_GLOBAL_MODULE_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_GLOBAL_MODULE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_GLOBAL_MODULE_data_holes[1];

// _DELETE_DEREFplus_LOAD_LOCALS
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_LOCALS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 2a                         jle     0x67 <_JIT_ENTRY+0x67>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 4c                         jns     0x8d <_JIT_ENTRY+0x8d>
// 41: eb 5c                         jmp     0x9f <_JIT_ENTRY+0x9f>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: e9 be 00 00 00                jmp     0x125 <_JIT_ENTRY+0x125>
// 67: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000069:  R_X86_64_64  .rodata.str1.1
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_NegativeRefcount
// 7b: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 80: 4c 89 e2                      movq    %r12, %rdx
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 85 c0                         testl   %eax, %eax
// 8b: 78 12                         js      0x9f <_JIT_ENTRY+0x9f>
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: ff d0                         callq   *%rax
// 99: 49 ff 0c 24                   decq    (%r12)
// 9d: 74 48                         je      0xe7 <_JIT_ENTRY+0xe7>
// 9f: 4d 8b 66 28                   movq    0x28(%r14), %r12
// a3: 4d 85 e4                      testq   %r12, %r12
// a6: 74 57                         je      0xff <_JIT_ENTRY+0xff>
// a8: 41 8b 04 24                   movl    (%r12), %eax
// ac: ff c0                         incl    %eax
// ae: 74 10                         je      0xc0 <_JIT_ENTRY+0xc0>
// b0: 41 89 04 24                   movl    %eax, (%r12)
// b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b6:  R_X86_64_64  _Py_INCREF_IncRefTotal
// be: ff d0                         callq   *%rax
// c0: 4c 89 23                      movq    %r12, (%rbx)
// c3: 48 83 c3 08                   addq    $0x8, %rbx
// c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c9:  R_X86_64_64  _JIT_CONTINUE
// d1: 4c 89 f7                      movq    %r14, %rdi
// d4: 48 89 de                      movq    %rbx, %rsi
// d7: 4c 89 fa                      movq    %r15, %rdx
// da: 48 83 c4 08                   addq    $0x8, %rsp
// de: 5b                            popq    %rbx
// df: 41 5c                         popq    %r12
// e1: 41 5e                         popq    %r14
// e3: 41 5f                         popq    %r15
// e5: ff e0                         jmpq    *%rax
// e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e9:  R_X86_64_64  _Py_Dealloc
// f1: 4c 89 e7                      movq    %r12, %rdi
// f4: ff d0                         callq   *%rax
// f6: 4d 8b 66 28                   movq    0x28(%r14), %r12
// fa: 4d 85 e4                      testq   %r12, %r12
// fd: 75 a9                         jne     0xa8 <_JIT_ENTRY+0xa8>
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  PyExc_SystemError
// 109: 48 8b 30                      movq    (%rax), %rsi
// 10c: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 000000000000010e:  R_X86_64_64  .rodata.str1.1+0x39
// 116: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000118:  R_X86_64_64  _PyErr_SetString
// 120: 4c 89 ff                      movq    %r15, %rdi
// 123: ff d0                         callq   *%rax
// 125: 4c 29 f3                      subq    %r14, %rbx
// 128: 48 83 c3 b8                   addq    $-0x48, %rbx
// 12c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 130: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 134: 31 c0                         xorl    %eax, %eax
// 136: 48 83 c4 08                   addq    $0x8, %rsp
// 13a: 5b                            popq    %rbx
// 13b: 41 5c                         popq    %r12
// 13d: 41 5e                         popq    %r14
// 13f: 41 5f                         popq    %r15
// 141: c3                            retq
// 142: 
static const unsigned char _DELETE_DEREFplus_LOAD_LOCALS_code_body[323] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x5c, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xbe, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x48, 0x4d, 0x8b, 0x66, 0x28, 0x4d, 0x85, 0xe4, 0x74, 0x57, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8b, 0x66, 0x28, 0x4d, 0x85, 0xe4, 0x75, 0xa9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_LOAD_LOCALS_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x118, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found\x00'
// 49: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_LOCALS_data_body[81] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_LOCALS_data_holes[1];

// _DELETE_DEREFplus_LOAD_NAME
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_NAME.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 48 83 ec 10                   subq    $0x10, %rsp
// d: 49 89 d7                      movq    %rdx, %r15
// 10: 48 89 f3                      movq    %rsi, %rbx
// 13: 49 89 fe                      movq    %rdi, %r14
// 16: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000018:  R_X86_64_64  _JIT_OPARG
// 20: 0f b7 c0                      movzwl  %ax, %eax
// 23: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 28: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2c: 4d 85 e4                      testq   %r12, %r12
// 2f: 74 17                         je      0x48 <_JIT_ENTRY+0x48>
// 31: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 39: 49 8b 04 24                   movq    (%r12), %rax
// 3d: 48 85 c0                      testq   %rax, %rax
// 40: 7e 2a                         jle     0x6c <_JIT_ENTRY+0x6c>
// 42: 85 c0                         testl   %eax, %eax
// 44: 79 4c                         jns     0x92 <_JIT_ENTRY+0x92>
// 46: eb 5c                         jmp     0xa4 <_JIT_ENTRY+0xa4>
// 48: 49 8b 36                      movq    (%r14), %rsi
// 4b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004d:  R_X86_64_64  _JIT_OPARG
// 55: 0f b7 d0                      movzwl  %ax, %edx
// 58: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005a:  R_X86_64_64  _PyEval_FormatExcUnbound
// 62: 4c 89 ff                      movq    %r15, %rdi
// 65: ff d0                         callq   *%rax
// 67: e9 f0 00 00 00                jmp     0x15c <_JIT_ENTRY+0x15c>
// 6c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006e:  R_X86_64_64  .rodata.str1.1
// 76: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000078:  R_X86_64_64  _Py_NegativeRefcount
// 80: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 85: 4c 89 e2                      movq    %r12, %rdx
// 88: ff d0                         callq   *%rax
// 8a: 49 8b 04 24                   movq    (%r12), %rax
// 8e: 85 c0                         testl   %eax, %eax
// 90: 78 12                         js      0xa4 <_JIT_ENTRY+0xa4>
// 92: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000094:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9c: ff d0                         callq   *%rax
// 9e: 49 ff 0c 24                   decq    (%r12)
// a2: 74 76                         je      0x11a <_JIT_ENTRY+0x11a>
// a4: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// a8: 48 85 ff                      testq   %rdi, %rdi
// ab: 0f 84 85 00 00 00             je      0x136 <_JIT_ENTRY+0x136>
// b1: 49 8b 06                      movq    (%r14), %rax
// b4: 48 8b 40 20                   movq    0x20(%rax), %rax
// b8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ba:  R_X86_64_64  _JIT_OPARG
// c2: 0f b7 c9                      movzwl  %cx, %ecx
// c5: 4c 8b 64 c8 18                movq    0x18(%rax,%rcx,8), %r12
// ca: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000cc:  R_X86_64_64  PyMapping_GetOptionalItem
// d4: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// d9: 4c 89 e6                      movq    %r12, %rsi
// dc: 41 ff d5                      callq   *%r13
// df: 85 c0                         testl   %eax, %eax
// e1: 78 79                         js      0x15c <_JIT_ENTRY+0x15c>
// e3: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// e8: 48 85 c0                      testq   %rax, %rax
// eb: 0f 84 8a 00 00 00             je      0x17b <_JIT_ENTRY+0x17b>
// f1: 48 89 03                      movq    %rax, (%rbx)
// f4: 48 83 c3 08                   addq    $0x8, %rbx
// f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000fa:  R_X86_64_64  _JIT_CONTINUE
// 102: 4c 89 f7                      movq    %r14, %rdi
// 105: 48 89 de                      movq    %rbx, %rsi
// 108: 4c 89 fa                      movq    %r15, %rdx
// 10b: 48 83 c4 10                   addq    $0x10, %rsp
// 10f: 5b                            popq    %rbx
// 110: 41 5c                         popq    %r12
// 112: 41 5d                         popq    %r13
// 114: 41 5e                         popq    %r14
// 116: 41 5f                         popq    %r15
// 118: ff e0                         jmpq    *%rax
// 11a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011c:  R_X86_64_64  _Py_Dealloc
// 124: 4c 89 e7                      movq    %r12, %rdi
// 127: ff d0                         callq   *%rax
// 129: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// 12d: 48 85 ff                      testq   %rdi, %rdi
// 130: 0f 85 7b ff ff ff             jne     0xb1 <_JIT_ENTRY+0xb1>
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  PyExc_SystemError
// 140: 48 8b 30                      movq    (%rax), %rsi
// 143: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000145:  R_X86_64_64  .rodata.str1.1+0x56
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _PyErr_SetString
// 157: 4c 89 ff                      movq    %r15, %rdi
// 15a: ff d0                         callq   *%rax
// 15c: 4c 29 f3                      subq    %r14, %rbx
// 15f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 163: 48 c1 eb 03                   shrq    $0x3, %rbx
// 167: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 16b: 31 c0                         xorl    %eax, %eax
// 16d: 48 83 c4 10                   addq    $0x10, %rsp
// 171: 5b                            popq    %rbx
// 172: 41 5c                         popq    %r12
// 174: 41 5d                         popq    %r13
// 176: 41 5e                         popq    %r14
// 178: 41 5f                         popq    %r15
// 17a: c3                            retq
// 17b: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  PyDict_GetItemRef
// 189: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 18e: 4c 89 e6                      movq    %r12, %rsi
// 191: ff d0                         callq   *%rax
// 193: 85 c0                         testl   %eax, %eax
// 195: 78 c5                         js      0x15c <_JIT_ENTRY+0x15c>
// 197: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 19c: 48 85 c0                      testq   %rax, %rax
// 19f: 0f 85 4c ff ff ff             jne     0xf1 <_JIT_ENTRY+0xf1>
// 1a5: 49 8b 7e 20                   movq    0x20(%r14), %rdi
// 1a9: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
// 1ae: 4c 89 e6                      movq    %r12, %rsi
// 1b1: 41 ff d5                      callq   *%r13
// 1b4: 85 c0                         testl   %eax, %eax
// 1b6: 78 a4                         js      0x15c <_JIT_ENTRY+0x15c>
// 1b8: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 1bd: 48 85 c0                      testq   %rax, %rax
// 1c0: 0f 85 2b ff ff ff             jne     0xf1 <_JIT_ENTRY+0xf1>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  PyExc_NameError
// 1d0: 48 8b 30                      movq    (%rax), %rsi
// 1d3: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000001d5:  R_X86_64_64  .rodata.str1.1+0x39
// 1dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001df:  R_X86_64_64  _PyEval_FormatExcCheckArg
// 1e7: 4c 89 ff                      movq    %r15, %rdi
// 1ea: 4c 89 e1                      movq    %r12, %rcx
// 1ed: ff d0                         callq   *%rax
// 1ef: e9 68 ff ff ff                jmp     0x15c <_JIT_ENTRY+0x15c>
// 1f4: 
static const unsigned char _DELETE_DEREFplus_LOAD_NAME_code_body[501] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x10, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x5c, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xf0, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x76, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0x85, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4c, 0x8b, 0x64, 0xc8, 0x18, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0x79, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x8a, 0x00, 0x00, 0x00, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x85, 0x7b, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0xc5, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x4c, 0xff, 0xff, 0xff, 0x49, 0x8b, 0x7e, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x4c, 0x89, 0xe6, 0x41, 0xff, 0xd5, 0x85, 0xc0, 0x78, 0xa4, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x85, 0xc0, 0x0f, 0x85, 0x2b, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe1, 0xff, 0xd0, 0xe9, 0x68, 0xff, 0xff, 0xff};
static const Hole _DELETE_DEREFplus_LOAD_NAME_code_holes[18] = {
    {0x18, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x78, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xba, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0xfa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x11c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x56},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_SetString, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_GetItemRef, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_NameError, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x1df, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcCheckArg, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00name '%.200s' is not defined\x00no locals found\x00"
// 66: 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_NAME_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_NAME_data_holes[1];

// _DELETE_DEREFplus_LOAD_SUPER_ATTR_ATTR
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_SUPER_ATTR_ATTR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 3b                         jle     0x7b <_JIT_ENTRY+0x7b>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 5d                         jns     0xa1 <_JIT_ENTRY+0xa1>
// 44: eb 71                         jmp     0xb7 <_JIT_ENTRY+0xb7>
// 46: 48 8b 33                      movq    (%rbx), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 49 29 de                      subq    %rbx, %r14
// 68: 49 83 c6 b8                   addq    $-0x48, %r14
// 6c: 49 c1 ee 03                   shrq    $0x3, %r14
// 70: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 74: 31 c0                         xorl    %eax, %eax
// 76: e9 1a 02 00 00                jmp     0x295 <_JIT_ENTRY+0x295>
// 7b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007d:  R_X86_64_64  .rodata.str1.1
// 85: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000087:  R_X86_64_64  _Py_NegativeRefcount
// 8f: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 94: 4c 89 e2                      movq    %r12, %rdx
// 97: ff d0                         callq   *%rax
// 99: 49 8b 04 24                   movq    (%r12), %rax
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 16                         js      0xb7 <_JIT_ENTRY+0xb7>
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ab: ff d0                         callq   *%rax
// ad: 49 ff 0c 24                   decq    (%r12)
// b1: 0f 84 93 01 00 00             je      0x24a <_JIT_ENTRY+0x24a>
// b7: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000b9:  R_X86_64_64  PySuper_Type
// c1: 4d 39 6e e8                   cmpq    %r13, -0x18(%r14)
// c5: 0f 85 a2 01 00 00             jne     0x26d <_JIT_ENTRY+0x26d>
// cb: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// cf: 48 8b 45 08                   movq    0x8(%rbp), %rax
// d3: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// da: 0f 84 8d 01 00 00             je      0x26d <_JIT_ENTRY+0x26d>
// e0: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// e4: 48 8b 03                      movq    (%rbx), %rax
// e7: 48 8b 40 20                   movq    0x20(%rax), %rax
// eb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ed:  R_X86_64_64  _JIT_OPARG
// f5: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// fb: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _PySuper_Lookup
// 10a: 48 89 ef                      movq    %rbp, %rdi
// 10d: 4c 89 e6                      movq    %r12, %rsi
// 110: 31 c9                         xorl    %ecx, %ecx
// 112: ff d0                         callq   *%rax
// 114: 48 89 04 24                   movq    %rax, (%rsp)
// 118: 49 8b 45 00                   movq    (%r13), %rax
// 11c: 48 85 c0                      testq   %rax, %rax
// 11f: 7f 22                         jg      0x143 <_JIT_ENTRY+0x143>
// 121: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000123:  R_X86_64_64  .rodata.str1.1
// 12b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012d:  R_X86_64_64  _Py_NegativeRefcount
// 135: be fc 05 00 00                movl    $0x5fc, %esi            # imm = 0x5FC
// 13a: 4c 89 ea                      movq    %r13, %rdx
// 13d: ff d0                         callq   *%rax
// 13f: 49 8b 45 00                   movq    (%r13), %rax
// 143: 85 c0                         testl   %eax, %eax
// 145: 78 28                         js      0x16f <_JIT_ENTRY+0x16f>
// 147: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000149:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 151: ff d0                         callq   *%rax
// 153: 49 ff 4d 00                   decq    (%r13)
// 157: 75 16                         jne     0x16f <_JIT_ENTRY+0x16f>
// 159: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015b:  R_X86_64_64  PySuper_Type
// 163: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000165:  R_X86_64_64  _Py_Dealloc
// 16d: ff d0                         callq   *%rax
// 16f: 48 8b 45 00                   movq    (%rbp), %rax
// 173: 48 85 c0                      testq   %rax, %rax
// 176: 7f 22                         jg      0x19a <_JIT_ENTRY+0x19a>
// 178: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000017a:  R_X86_64_64  .rodata.str1.1
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_NegativeRefcount
// 18c: be fd 05 00 00                movl    $0x5fd, %esi            # imm = 0x5FD
// 191: 48 89 ea                      movq    %rbp, %rdx
// 194: ff d0                         callq   *%rax
// 196: 48 8b 45 00                   movq    (%rbp), %rax
// 19a: 85 c0                         testl   %eax, %eax
// 19c: 78 21                         js      0x1bf <_JIT_ENTRY+0x1bf>
// 19e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1a8: ff d0                         callq   *%rax
// 1aa: 48 ff 4d 00                   decq    (%rbp)
// 1ae: 75 0f                         jne     0x1bf <_JIT_ENTRY+0x1bf>
// 1b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b2:  R_X86_64_64  _Py_Dealloc
// 1ba: 48 89 ef                      movq    %rbp, %rdi
// 1bd: ff d0                         callq   *%rax
// 1bf: 49 8b 04 24                   movq    (%r12), %rax
// 1c3: 48 85 c0                      testq   %rax, %rax
// 1c6: 7f 22                         jg      0x1ea <_JIT_ENTRY+0x1ea>
// 1c8: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ca:  R_X86_64_64  .rodata.str1.1
// 1d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d4:  R_X86_64_64  _Py_NegativeRefcount
// 1dc: be fe 05 00 00                movl    $0x5fe, %esi            # imm = 0x5FE
// 1e1: 4c 89 e2                      movq    %r12, %rdx
// 1e4: ff d0                         callq   *%rax
// 1e6: 49 8b 04 24                   movq    (%r12), %rax
// 1ea: 85 c0                         testl   %eax, %eax
// 1ec: 78 21                         js      0x20f <_JIT_ENTRY+0x20f>
// 1ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1f8: ff d0                         callq   *%rax
// 1fa: 49 ff 0c 24                   decq    (%r12)
// 1fe: 75 0f                         jne     0x20f <_JIT_ENTRY+0x20f>
// 200: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000202:  R_X86_64_64  _Py_Dealloc
// 20a: 4c 89 e7                      movq    %r12, %rdi
// 20d: ff d0                         callq   *%rax
// 20f: 49 8d 46 e8                   leaq    -0x18(%r14), %rax
// 213: 48 8b 0c 24                   movq    (%rsp), %rcx
// 217: 48 85 c9                      testq   %rcx, %rcx
// 21a: 0f 84 84 00 00 00             je      0x2a4 <_JIT_ENTRY+0x2a4>
// 220: 49 83 c6 f0                   addq    $-0x10, %r14
// 224: 48 89 08                      movq    %rcx, (%rax)
// 227: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000229:  R_X86_64_64  _JIT_CONTINUE
// 231: 48 89 df                      movq    %rbx, %rdi
// 234: 4c 89 f6                      movq    %r14, %rsi
// 237: 4c 89 fa                      movq    %r15, %rdx
// 23a: 48 83 c4 08                   addq    $0x8, %rsp
// 23e: 5b                            popq    %rbx
// 23f: 41 5c                         popq    %r12
// 241: 41 5d                         popq    %r13
// 243: 41 5e                         popq    %r14
// 245: 41 5f                         popq    %r15
// 247: 5d                            popq    %rbp
// 248: ff e0                         jmpq    *%rax
// 24a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000024c:  R_X86_64_64  _Py_Dealloc
// 254: 4c 89 e7                      movq    %r12, %rdi
// 257: ff d0                         callq   *%rax
// 259: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000025b:  R_X86_64_64  PySuper_Type
// 263: 4d 39 6e e8                   cmpq    %r13, -0x18(%r14)
// 267: 0f 84 5e fe ff ff             je      0xcb <_JIT_ENTRY+0xcb>
// 26d: 49 29 de                      subq    %rbx, %r14
// 270: 49 83 c6 b8                   addq    $-0x48, %r14
// 274: 49 c1 ee 03                   shrq    $0x3, %r14
// 278: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 27c: 48 8b 03                      movq    (%rbx), %rax
// 27f: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000281:  R_X86_64_64  _JIT_TARGET
// 289: 89 c9                         movl    %ecx, %ecx
// 28b: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 28f: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 295: 48 83 c4 08                   addq    $0x8, %rsp
// 299: 5b                            popq    %rbx
// 29a: 41 5c                         popq    %r12
// 29c: 41 5d                         popq    %r13
// 29e: 41 5e                         popq    %r14
// 2a0: 41 5f                         popq    %r15
// 2a2: 5d                            popq    %rbp
// 2a3: c3                            retq
// 2a4: 49 89 c6                      movq    %rax, %r14
// 2a7: e9 b9 fd ff ff                jmp     0x65 <_JIT_ENTRY+0x65>
// 2ac: 
static const unsigned char _DELETE_DEREFplus_LOAD_SUPER_ATTR_ATTR_code_body[685] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x71, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x1a, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x93, 0x01, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0xa2, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0x8d, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfc, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfd, 0x05, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xfe, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8d, 0x46, 0xe8, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x85, 0xc9, 0x0f, 0x84, 0x84, 0x00, 0x00, 0x00, 0x49, 0x83, 0xc6, 0xf0, 0x48, 0x89, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xf6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x6e, 0xe8, 0x0f, 0x84, 0x5e, 0xfe, 0xff, 0xff, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x89, 0xc6, 0xe9, 0xb9, 0xfd, 0xff, 0xff};
static const Hole _DELETE_DEREFplus_LOAD_SUPER_ATTR_ATTR_code_holes[27] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x87, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xed, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x123, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x12d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x149, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x165, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1a0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1ca, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x202, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x229, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x24c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x25b, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x281, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_SUPER_ATTR_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_SUPER_ATTR_ATTR_data_holes[1];

// _DELETE_DEREFplus_LOAD_SUPER_ATTR_METHOD
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_LOAD_SUPER_ATTR_METHOD.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 29: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2d: 4d 85 e4                      testq   %r12, %r12
// 30: 74 17                         je      0x49 <_JIT_ENTRY+0x49>
// 32: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 3b                         jle     0x7e <_JIT_ENTRY+0x7e>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 5d                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 47: eb 71                         jmp     0xba <_JIT_ENTRY+0xba>
// 49: 48 8b 33                      movq    (%rbx), %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 d0                      movzwl  %ax, %edx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _PyEval_FormatExcUnbound
// 63: 4c 89 ff                      movq    %r15, %rdi
// 66: ff d0                         callq   *%rax
// 68: 49 29 de                      subq    %rbx, %r14
// 6b: 49 83 c6 b8                   addq    $-0x48, %r14
// 6f: 49 c1 ee 03                   shrq    $0x3, %r14
// 73: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 77: 31 c0                         xorl    %eax, %eax
// 79: e9 4e 02 00 00                jmp     0x2cc <_JIT_ENTRY+0x2cc>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 16                         js      0xba <_JIT_ENTRY+0xba>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 0f 84 c7 01 00 00             je      0x281 <_JIT_ENTRY+0x281>
// ba: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000bc:  R_X86_64_64  PySuper_Type
// c4: 4d 39 6e e8                   cmpq    %r13, -0x18(%r14)
// c8: 0f 85 d6 01 00 00             jne     0x2a4 <_JIT_ENTRY+0x2a4>
// ce: 49 8b 6e f0                   movq    -0x10(%r14), %rbp
// d2: 48 8b 45 08                   movq    0x8(%rbp), %rax
// d6: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
// dd: 0f 84 c1 01 00 00             je      0x2a4 <_JIT_ENTRY+0x2a4>
// e3: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// e7: 48 8b 03                      movq    (%rbx), %rax
// ea: 48 8b 40 20                   movq    0x20(%rax), %rax
// ee: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000f0:  R_X86_64_64  _JIT_OPARG
// f8: 81 e1 fc ff 00 00             andl    $0xfffc, %ecx           # imm = 0xFFFC
// fe: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
// 103: c7 44 24 0c 00 00 00 00       movl    $0x0, 0xc(%rsp)
// 10b: 49 8b 44 24 08                movq    0x8(%r12), %rax
// 110: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000112:  R_X86_64_64  PyObject_GenericGetAttr
// 11a: 31 f6                         xorl    %esi, %esi
// 11c: 48 39 88 90 00 00 00          cmpq    %rcx, 0x90(%rax)
// 123: 48 8d 4c 24 0c                leaq    0xc(%rsp), %rcx
// 128: 48 0f 45 ce                   cmovneq %rsi, %rcx
// 12c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012e:  R_X86_64_64  _PySuper_Lookup
// 136: 48 89 ef                      movq    %rbp, %rdi
// 139: 4c 89 e6                      movq    %r12, %rsi
// 13c: ff d0                         callq   *%rax
// 13e: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
// 143: 49 8b 45 00                   movq    (%r13), %rax
// 147: 48 85 c0                      testq   %rax, %rax
// 14a: 7f 22                         jg      0x16e <_JIT_ENTRY+0x16e>
// 14c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000014e:  R_X86_64_64  .rodata.str1.1
// 156: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000158:  R_X86_64_64  _Py_NegativeRefcount
// 160: be 18 06 00 00                movl    $0x618, %esi            # imm = 0x618
// 165: 4c 89 ea                      movq    %r13, %rdx
// 168: ff d0                         callq   *%rax
// 16a: 49 8b 45 00                   movq    (%r13), %rax
// 16e: 85 c0                         testl   %eax, %eax
// 170: 78 28                         js      0x19a <_JIT_ENTRY+0x19a>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 17c: ff d0                         callq   *%rax
// 17e: 49 ff 4d 00                   decq    (%r13)
// 182: 75 16                         jne     0x19a <_JIT_ENTRY+0x19a>
// 184: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000186:  R_X86_64_64  PySuper_Type
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_Dealloc
// 198: ff d0                         callq   *%rax
// 19a: 48 8b 45 00                   movq    (%rbp), %rax
// 19e: 48 85 c0                      testq   %rax, %rax
// 1a1: 7f 22                         jg      0x1c5 <_JIT_ENTRY+0x1c5>
// 1a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a5:  R_X86_64_64  .rodata.str1.1
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  _Py_NegativeRefcount
// 1b7: be 19 06 00 00                movl    $0x619, %esi            # imm = 0x619
// 1bc: 48 89 ea                      movq    %rbp, %rdx
// 1bf: ff d0                         callq   *%rax
// 1c1: 48 8b 45 00                   movq    (%rbp), %rax
// 1c5: 85 c0                         testl   %eax, %eax
// 1c7: 78 21                         js      0x1ea <_JIT_ENTRY+0x1ea>
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d3: ff d0                         callq   *%rax
// 1d5: 48 ff 4d 00                   decq    (%rbp)
// 1d9: 75 0f                         jne     0x1ea <_JIT_ENTRY+0x1ea>
// 1db: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001dd:  R_X86_64_64  _Py_Dealloc
// 1e5: 48 89 ef                      movq    %rbp, %rdi
// 1e8: ff d0                         callq   *%rax
// 1ea: 48 8b 6c 24 10                movq    0x10(%rsp), %rbp
// 1ef: 48 85 ed                      testq   %rbp, %rbp
// 1f2: 0f 84 e3 00 00 00             je      0x2db <_JIT_ENTRY+0x2db>
// 1f8: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 1fc: 83 7c 24 0c 00                cmpl    $0x0, 0xc(%rsp)
// 201: 75 53                         jne     0x256 <_JIT_ENTRY+0x256>
// 203: 49 8b 04 24                   movq    (%r12), %rax
// 207: 48 85 c0                      testq   %rax, %rax
// 20a: 7f 22                         jg      0x22e <_JIT_ENTRY+0x22e>
// 20c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000020e:  R_X86_64_64  .rodata.str1.1
// 216: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000218:  R_X86_64_64  _Py_NegativeRefcount
// 220: be 21 06 00 00                movl    $0x621, %esi            # imm = 0x621
// 225: 4c 89 e2                      movq    %r12, %rdx
// 228: ff d0                         callq   *%rax
// 22a: 49 8b 04 24                   movq    (%r12), %rax
// 22e: 85 c0                         testl   %eax, %eax
// 230: 78 21                         js      0x253 <_JIT_ENTRY+0x253>
// 232: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000234:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 23c: ff d0                         callq   *%rax
// 23e: 49 ff 0c 24                   decq    (%r12)
// 242: 75 0f                         jne     0x253 <_JIT_ENTRY+0x253>
// 244: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000246:  R_X86_64_64  _Py_Dealloc
// 24e: 4c 89 e7                      movq    %r12, %rdi
// 251: ff d0                         callq   *%rax
// 253: 45 31 e4                      xorl    %r12d, %r12d
// 256: 49 89 6e e8                   movq    %rbp, -0x18(%r14)
// 25a: 4d 89 66 f0                   movq    %r12, -0x10(%r14)
// 25e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000260:  R_X86_64_64  _JIT_CONTINUE
// 268: 48 89 df                      movq    %rbx, %rdi
// 26b: 4c 89 ee                      movq    %r13, %rsi
// 26e: 4c 89 fa                      movq    %r15, %rdx
// 271: 48 83 c4 18                   addq    $0x18, %rsp
// 275: 5b                            popq    %rbx
// 276: 41 5c                         popq    %r12
// 278: 41 5d                         popq    %r13
// 27a: 41 5e                         popq    %r14
// 27c: 41 5f                         popq    %r15
// 27e: 5d                            popq    %rbp
// 27f: ff e0                         jmpq    *%rax
// 281: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000283:  R_X86_64_64  _Py_Dealloc
// 28b: 4c 89 e7                      movq    %r12, %rdi
// 28e: ff d0                         callq   *%rax
// 290: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000292:  R_X86_64_64  PySuper_Type
// 29a: 4d 39 6e e8                   cmpq    %r13, -0x18(%r14)
// 29e: 0f 84 2a fe ff ff             je      0xce <_JIT_ENTRY+0xce>
// 2a4: 49 29 de                      subq    %rbx, %r14
// 2a7: 49 83 c6 b8                   addq    $-0x48, %r14
// 2ab: 49 c1 ee 03                   shrq    $0x3, %r14
// 2af: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 2b3: 48 8b 03                      movq    (%rbx), %rax
// 2b6: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000002b8:  R_X86_64_64  _JIT_TARGET
// 2c0: 89 c9                         movl    %ecx, %ecx
// 2c2: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 2c6: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 2cc: 48 83 c4 18                   addq    $0x18, %rsp
// 2d0: 5b                            popq    %rbx
// 2d1: 41 5c                         popq    %r12
// 2d3: 41 5d                         popq    %r13
// 2d5: 41 5e                         popq    %r14
// 2d7: 41 5f                         popq    %r15
// 2d9: 5d                            popq    %rbp
// 2da: c3                            retq
// 2db: 49 8b 04 24                   movq    (%r12), %rax
// 2df: 48 85 c0                      testq   %rax, %rax
// 2e2: 7f 22                         jg      0x306 <_JIT_ENTRY+0x306>
// 2e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000002e6:  R_X86_64_64  .rodata.str1.1
// 2ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000002f0:  R_X86_64_64  _Py_NegativeRefcount
// 2f8: be 1b 06 00 00                movl    $0x61b, %esi            # imm = 0x61B
// 2fd: 4c 89 e2                      movq    %r12, %rdx
// 300: ff d0                         callq   *%rax
// 302: 49 8b 04 24                   movq    (%r12), %rax
// 306: 85 c0                         testl   %eax, %eax
// 308: 78 21                         js      0x32b <_JIT_ENTRY+0x32b>
// 30a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000030c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 314: ff d0                         callq   *%rax
// 316: 49 ff 0c 24                   decq    (%r12)
// 31a: 75 0f                         jne     0x32b <_JIT_ENTRY+0x32b>
// 31c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000031e:  R_X86_64_64  _Py_Dealloc
// 326: 4c 89 e7                      movq    %r12, %rdi
// 329: ff d0                         callq   *%rax
// 32b: 49 83 c6 e8                   addq    $-0x18, %r14
// 32f: e9 34 fd ff ff                jmp     0x68 <_JIT_ENTRY+0x68>
// 334: 
static const unsigned char _DELETE_DEREFplus_LOAD_SUPER_ATTR_METHOD_code_body[821] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x71, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x4e, 0x02, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xc7, 0x01, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x6e, 0xe8, 0x0f, 0x85, 0xd6, 0x01, 0x00, 0x00, 0x49, 0x8b, 0x6e, 0xf0, 0x48, 0x8b, 0x45, 0x08, 0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x84, 0xc1, 0x01, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0x8b, 0x03, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe1, 0xfc, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x54, 0x48, 0x18, 0xc7, 0x44, 0x24, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x48, 0x39, 0x88, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x4c, 0x24, 0x0c, 0x48, 0x0f, 0x45, 0xce, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x48, 0x89, 0x44, 0x24, 0x10, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x16, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x19, 0x06, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x85, 0xed, 0x0f, 0x84, 0xe3, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x6e, 0xf8, 0x83, 0x7c, 0x24, 0x0c, 0x00, 0x75, 0x53, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x21, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x45, 0x31, 0xe4, 0x49, 0x89, 0x6e, 0xe8, 0x4d, 0x89, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x39, 0x6e, 0xe8, 0x0f, 0x84, 0x2a, 0xfe, 0xff, 0xff, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x1b, 0x06, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x83, 0xc6, 0xe8, 0xe9, 0x34, 0xfd, 0xff, 0xff};
static const Hole _DELETE_DEREFplus_LOAD_SUPER_ATTR_METHOD_code_holes[32] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_GenericGetAttr, 0x0},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySuper_Lookup, 0x0},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x158, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x186, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1dd, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x218, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x234, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x246, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x260, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x283, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x292, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySuper_Type, 0x0},
    {0x2b8, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x2e6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x2f0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x30c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x31e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_LOAD_SUPER_ATTR_METHOD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_LOAD_SUPER_ATTR_METHOD_data_holes[1];

// _DELETE_DEREFplus_MAKE_CELL
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_MAKE_CELL.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 2a                         jle     0x67 <_JIT_ENTRY+0x67>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 4c                         jns     0x8d <_JIT_ENTRY+0x8d>
// 41: eb 6b                         jmp     0xae <_JIT_ENTRY+0xae>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: e9 fa 00 00 00                jmp     0x161 <_JIT_ENTRY+0x161>
// 67: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000069:  R_X86_64_64  .rodata.str1.1
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_NegativeRefcount
// 7b: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 80: 4c 89 e2                      movq    %r12, %rdx
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 85 c0                         testl   %eax, %eax
// 8b: 78 21                         js      0xae <_JIT_ENTRY+0xae>
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: ff d0                         callq   *%rax
// 99: 49 ff 0c 24                   decq    (%r12)
// 9d: 75 0f                         jne     0xae <_JIT_ENTRY+0xae>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _Py_Dealloc
// a9: 4c 89 e7                      movq    %r12, %rdi
// ac: ff d0                         callq   *%rax
// ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b0:  R_X86_64_64  _JIT_OPARG
// b8: 0f b7 c0                      movzwl  %ax, %eax
// bb: 49 8b 7c c6 48                movq    0x48(%r14,%rax,8), %rdi
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  PyCell_New
// ca: ff d0                         callq   *%rax
// cc: 48 85 c0                      testq   %rax, %rax
// cf: 0f 84 8c 00 00 00             je      0x161 <_JIT_ENTRY+0x161>
// d5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d7:  R_X86_64_64  _JIT_OPARG
// df: 0f b7 c9                      movzwl  %cx, %ecx
// e2: 4d 8b 64 ce 48                movq    0x48(%r14,%rcx,8), %r12
// e7: 49 89 44 ce 48                movq    %rax, 0x48(%r14,%rcx,8)
// ec: 4d 85 e4                      testq   %r12, %r12
// ef: 74 50                         je      0x141 <_JIT_ENTRY+0x141>
// f1: 49 8b 04 24                   movq    (%r12), %rax
// f5: 48 85 c0                      testq   %rax, %rax
// f8: 7f 22                         jg      0x11c <_JIT_ENTRY+0x11c>
// fa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000fc:  R_X86_64_64  .rodata.str1.1+0x39
// 104: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000106:  R_X86_64_64  _Py_NegativeRefcount
// 10e: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 113: 4c 89 e2                      movq    %r12, %rdx
// 116: ff d0                         callq   *%rax
// 118: 49 8b 04 24                   movq    (%r12), %rax
// 11c: 85 c0                         testl   %eax, %eax
// 11e: 78 21                         js      0x141 <_JIT_ENTRY+0x141>
// 120: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000122:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 12a: ff d0                         callq   *%rax
// 12c: 49 ff 0c 24                   decq    (%r12)
// 130: 75 0f                         jne     0x141 <_JIT_ENTRY+0x141>
// 132: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000134:  R_X86_64_64  _Py_Dealloc
// 13c: 4c 89 e7                      movq    %r12, %rdi
// 13f: ff d0                         callq   *%rax
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _JIT_CONTINUE
// 14b: 4c 89 f7                      movq    %r14, %rdi
// 14e: 48 89 de                      movq    %rbx, %rsi
// 151: 4c 89 fa                      movq    %r15, %rdx
// 154: 48 83 c4 08                   addq    $0x8, %rsp
// 158: 5b                            popq    %rbx
// 159: 41 5c                         popq    %r12
// 15b: 41 5e                         popq    %r14
// 15d: 41 5f                         popq    %r15
// 15f: ff e0                         jmpq    *%rax
// 161: 4c 29 f3                      subq    %r14, %rbx
// 164: 48 83 c3 b8                   addq    $-0x48, %rbx
// 168: 48 c1 eb 03                   shrq    $0x3, %rbx
// 16c: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 170: 31 c0                         xorl    %eax, %eax
// 172: 48 83 c4 08                   addq    $0x8, %rsp
// 176: 5b                            popq    %rbx
// 177: 41 5c                         popq    %r12
// 179: 41 5e                         popq    %r14
// 17b: 41 5f                         popq    %r15
// 17d: c3                            retq
// 17e: 
static const unsigned char _DELETE_DEREFplus_MAKE_CELL_code_body[383] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xfa, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8b, 0x7c, 0xc6, 0x48, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4d, 0x8b, 0x64, 0xce, 0x48, 0x49, 0x89, 0x44, 0xce, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x50, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_MAKE_CELL_code_holes[16] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyCell_New, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x106, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x122, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x134, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_MAKE_CELL_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_MAKE_CELL_data_holes[1];

// _DELETE_DEREFplus_MAKE_FUNCTION
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_MAKE_FUNCTION.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 21                         je      0x50 <_JIT_ENTRY+0x50>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 34                         jle     0x74 <_JIT_ENTRY+0x74>
// 40: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000042:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a: 85 c0                         testl   %eax, %eax
// 4c: 79 56                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 4e: eb 6b                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 50: 49 8b 36                      movq    (%r14), %rsi
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _JIT_OPARG
// 5d: 0f b7 d0                      movzwl  %ax, %edx
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _PyEval_FormatExcUnbound
// 6a: 4c 89 ff                      movq    %r15, %rdi
// 6d: ff d0                         callq   *%rax
// 6f: e9 f2 00 00 00                jmp     0x166 <_JIT_ENTRY+0x166>
// 74: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000076:  R_X86_64_64  .rodata.str1.1
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _Py_NegativeRefcount
// 88: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 49 8b 04 24                   movq    (%r12), %rax
// 96: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000098:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 17                         js      0xbb <_JIT_ENTRY+0xbb>
// a4: ff d5                         callq   *%rbp
// a6: 49 ff 0c 24                   decq    (%r12)
// aa: 75 0f                         jne     0xbb <_JIT_ENTRY+0xbb>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_Dealloc
// b6: 4c 89 e7                      movq    %r12, %rdi
// b9: ff d0                         callq   *%rax
// bb: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// bf: 49 8b 76 18                   movq    0x18(%r14), %rsi
// c3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c5:  R_X86_64_64  PyFunction_New
// cd: 4c 89 e7                      movq    %r12, %rdi
// d0: ff d0                         callq   *%rax
// d2: 49 89 c5                      movq    %rax, %r13
// d5: 49 8b 04 24                   movq    (%r12), %rax
// d9: 48 85 c0                      testq   %rax, %rax
// dc: 7e 06                         jle     0xe4 <_JIT_ENTRY+0xe4>
// de: 85 c0                         testl   %eax, %eax
// e0: 79 28                         jns     0x10a <_JIT_ENTRY+0x10a>
// e2: eb 2e                         jmp     0x112 <_JIT_ENTRY+0x112>
// e4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e6:  R_X86_64_64  .rodata.str1.1
// ee: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f0:  R_X86_64_64  _Py_NegativeRefcount
// f8: be 4e 0c 00 00                movl    $0xc4e, %esi            # imm = 0xC4E
// fd: 4c 89 e2                      movq    %r12, %rdx
// 100: ff d0                         callq   *%rax
// 102: 49 8b 04 24                   movq    (%r12), %rax
// 106: 85 c0                         testl   %eax, %eax
// 108: 78 08                         js      0x112 <_JIT_ENTRY+0x112>
// 10a: ff d5                         callq   *%rbp
// 10c: 49 ff 0c 24                   decq    (%r12)
// 110: 74 40                         je      0x152 <_JIT_ENTRY+0x152>
// 112: 4d 85 ed                      testq   %r13, %r13
// 115: 74 4f                         je      0x166 <_JIT_ENTRY+0x166>
// 117: 41 8b 74 24 5c                movl    0x5c(%r12), %esi
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  _PyFunction_SetVersion
// 126: 4c 89 ef                      movq    %r13, %rdi
// 129: ff d0                         callq   *%rax
// 12b: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _JIT_CONTINUE
// 139: 4c 89 f7                      movq    %r14, %rdi
// 13c: 48 89 de                      movq    %rbx, %rsi
// 13f: 4c 89 fa                      movq    %r15, %rdx
// 142: 48 83 c4 08                   addq    $0x8, %rsp
// 146: 5b                            popq    %rbx
// 147: 41 5c                         popq    %r12
// 149: 41 5d                         popq    %r13
// 14b: 41 5e                         popq    %r14
// 14d: 41 5f                         popq    %r15
// 14f: 5d                            popq    %rbp
// 150: ff e0                         jmpq    *%rax
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_Dealloc
// 15c: 4c 89 e7                      movq    %r12, %rdi
// 15f: ff d0                         callq   *%rax
// 161: 4d 85 ed                      testq   %r13, %r13
// 164: 75 b1                         jne     0x117 <_JIT_ENTRY+0x117>
// 166: 4c 29 f3                      subq    %r14, %rbx
// 169: 48 83 c3 b8                   addq    $-0x48, %rbx
// 16d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 171: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 175: 31 c0                         xorl    %eax, %eax
// 177: 48 83 c4 08                   addq    $0x8, %rsp
// 17b: 5b                            popq    %rbx
// 17c: 41 5c                         popq    %r12
// 17e: 41 5d                         popq    %r13
// 180: 41 5e                         popq    %r14
// 182: 41 5f                         popq    %r15
// 184: 5d                            popq    %rbp
// 185: c3                            retq
// 186: 
static const unsigned char _DELETE_DEREFplus_MAKE_FUNCTION_code_body[391] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x21, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x34, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x56, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xf2, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x76, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x2e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4e, 0x0c, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x40, 0x4d, 0x85, 0xed, 0x74, 0x4f, 0x41, 0x8b, 0x74, 0x24, 0x5c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x75, 0xb1, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_MAKE_FUNCTION_code_holes[15] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyFunction_New, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xf0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyFunction_SetVersion, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_MAKE_FUNCTION_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_MAKE_FUNCTION_data_holes[1];

// _DELETE_DEREFplus_MAP_ADD
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_MAP_ADD.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 2a                         jle     0x67 <_JIT_ENTRY+0x67>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 4c                         jns     0x8d <_JIT_ENTRY+0x8d>
// 41: eb 6b                         jmp     0xae <_JIT_ENTRY+0xae>
// 43: 48 8b 33                      movq    (%rbx), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: e9 89 00 00 00                jmp     0xf0 <_JIT_ENTRY+0xf0>
// 67: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000069:  R_X86_64_64  .rodata.str1.1
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_NegativeRefcount
// 7b: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 80: 4c 89 e2                      movq    %r12, %rdx
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 85 c0                         testl   %eax, %eax
// 8b: 78 21                         js      0xae <_JIT_ENTRY+0xae>
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: ff d0                         callq   *%rax
// 99: 49 ff 0c 24                   decq    (%r12)
// 9d: 75 0f                         jne     0xae <_JIT_ENTRY+0xae>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _Py_Dealloc
// a9: 4c 89 e7                      movq    %r12, %rdi
// ac: ff d0                         callq   *%rax
// ae: 49 8b 76 f0                   movq    -0x10(%r14), %rsi
// b2: 49 8b 56 f8                   movq    -0x8(%r14), %rdx
// b6: 4d 8d 66 f0                   leaq    -0x10(%r14), %r12
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _JIT_OPARG
// c4: 0f b7 c0                      movzwl  %ax, %eax
// c7: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
// cc: 29 c1                         subl    %eax, %ecx
// ce: 48 63 c1                      movslq  %ecx, %rax
// d1: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d7:  R_X86_64_64  _PyDict_SetItem_Take2
// df: ff d0                         callq   *%rax
// e1: 85 c0                         testl   %eax, %eax
// e3: 4d 0f 45 e6                   cmovneq %r14, %r12
// e7: 74 24                         je      0x10d <_JIT_ENTRY+0x10d>
// e9: 49 83 c4 f0                   addq    $-0x10, %r12
// ed: 4d 89 e6                      movq    %r12, %r14
// f0: 49 29 de                      subq    %rbx, %r14
// f3: 49 83 c6 b8                   addq    $-0x48, %r14
// f7: 49 c1 ee 03                   shrq    $0x3, %r14
// fb: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// ff: 31 c0                         xorl    %eax, %eax
// 101: 48 83 c4 08                   addq    $0x8, %rsp
// 105: 5b                            popq    %rbx
// 106: 41 5c                         popq    %r12
// 108: 41 5e                         popq    %r14
// 10a: 41 5f                         popq    %r15
// 10c: c3                            retq
// 10d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010f:  R_X86_64_64  _JIT_CONTINUE
// 117: 48 89 df                      movq    %rbx, %rdi
// 11a: 4c 89 e6                      movq    %r12, %rsi
// 11d: 4c 89 fa                      movq    %r15, %rdx
// 120: 48 83 c4 08                   addq    $0x8, %rsp
// 124: 5b                            popq    %rbx
// 125: 41 5c                         popq    %r12
// 127: 41 5e                         popq    %r14
// 129: 41 5f                         popq    %r15
// 12b: ff e0                         jmpq    *%rax
// 12d: 
static const unsigned char _DELETE_DEREFplus_MAP_ADD_code_body[302] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x89, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x76, 0xf0, 0x49, 0x8b, 0x56, 0xf8, 0x4d, 0x8d, 0x66, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x85, 0xc0, 0x4d, 0x0f, 0x45, 0xe6, 0x74, 0x24, 0x49, 0x83, 0xc4, 0xf0, 0x4d, 0x89, 0xe6, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_MAP_ADD_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x10f, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_MAP_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_MAP_ADD_data_holes[1];

// _DELETE_DEREFplus_MATCH_CLASS
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_MATCH_CLASS.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d4                      movq    %rdx, %r12
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 78 10                   movq    0x10(%rax), %r15
// 2a: 4d 85 ff                      testq   %r15, %r15
// 2d: 74 16                         je      0x45 <_JIT_ENTRY+0x45>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 07                      movq    (%r15), %rax
// 3a: 48 85 c0                      testq   %rax, %rax
// 3d: 7e 2a                         jle     0x69 <_JIT_ENTRY+0x69>
// 3f: 85 c0                         testl   %eax, %eax
// 41: 79 4b                         jns     0x8e <_JIT_ENTRY+0x8e>
// 43: eb 69                         jmp     0xae <_JIT_ENTRY+0xae>
// 45: 49 8b 36                      movq    (%r14), %rsi
// 48: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004a:  R_X86_64_64  _JIT_OPARG
// 52: 0f b7 d0                      movzwl  %ax, %edx
// 55: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000057:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5f: 4c 89 e7                      movq    %r12, %rdi
// 62: ff d0                         callq   *%rax
// 64: e9 ec 01 00 00                jmp     0x255 <_JIT_ENTRY+0x255>
// 69: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006b:  R_X86_64_64  .rodata.str1.1
// 73: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000075:  R_X86_64_64  _Py_NegativeRefcount
// 7d: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 82: 4c 89 fa                      movq    %r15, %rdx
// 85: ff d0                         callq   *%rax
// 87: 49 8b 07                      movq    (%r15), %rax
// 8a: 85 c0                         testl   %eax, %eax
// 8c: 78 20                         js      0xae <_JIT_ENTRY+0xae>
// 8e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000090:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 98: ff d0                         callq   *%rax
// 9a: 49 ff 0f                      decq    (%r15)
// 9d: 75 0f                         jne     0xae <_JIT_ENTRY+0xae>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _Py_Dealloc
// a9: 4c 89 ff                      movq    %r15, %rdi
// ac: ff d0                         callq   *%rax
// ae: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// b2: 4c 8b 7b e8                   movq    -0x18(%rbx), %r15
// b6: 48 8b 6b f0                   movq    -0x10(%rbx), %rbp
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _JIT_OPARG
// c4: 0f b7 c8                      movzwl  %ax, %ecx
// c7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c9:  R_X86_64_64  _PyEval_MatchClass
// d1: 4c 89 24 24                   movq    %r12, (%rsp)
// d5: 4c 89 e7                      movq    %r12, %rdi
// d8: 4c 89 fe                      movq    %r15, %rsi
// db: 48 89 ea                      movq    %rbp, %rdx
// de: 4d 89 e8                      movq    %r13, %r8
// e1: ff d0                         callq   *%rax
// e3: 49 89 c4                      movq    %rax, %r12
// e6: 49 8b 07                      movq    (%r15), %rax
// e9: 48 85 c0                      testq   %rax, %rax
// ec: 7e 06                         jle     0xf4 <_JIT_ENTRY+0xf4>
// ee: 85 c0                         testl   %eax, %eax
// f0: 79 27                         jns     0x119 <_JIT_ENTRY+0x119>
// f2: eb 36                         jmp     0x12a <_JIT_ENTRY+0x12a>
// f4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f6:  R_X86_64_64  .rodata.str1.1
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_NegativeRefcount
// 108: be 10 08 00 00                movl    $0x810, %esi            # imm = 0x810
// 10d: 4c 89 fa                      movq    %r15, %rdx
// 110: ff d0                         callq   *%rax
// 112: 49 8b 07                      movq    (%r15), %rax
// 115: 85 c0                         testl   %eax, %eax
// 117: 78 11                         js      0x12a <_JIT_ENTRY+0x12a>
// 119: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011b:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 123: ff d0                         callq   *%rax
// 125: 49 ff 0f                      decq    (%r15)
// 128: 74 0f                         je      0x139 <_JIT_ENTRY+0x139>
// 12a: 48 8b 45 00                   movq    (%rbp), %rax
// 12e: 48 85 c0                      testq   %rax, %rax
// 131: 7e 1e                         jle     0x151 <_JIT_ENTRY+0x151>
// 133: 85 c0                         testl   %eax, %eax
// 135: 79 40                         jns     0x177 <_JIT_ENTRY+0x177>
// 137: eb 50                         jmp     0x189 <_JIT_ENTRY+0x189>
// 139: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013b:  R_X86_64_64  _Py_Dealloc
// 143: 4c 89 ff                      movq    %r15, %rdi
// 146: ff d0                         callq   *%rax
// 148: 48 8b 45 00                   movq    (%rbp), %rax
// 14c: 48 85 c0                      testq   %rax, %rax
// 14f: 7f e2                         jg      0x133 <_JIT_ENTRY+0x133>
// 151: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000153:  R_X86_64_64  .rodata.str1.1
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _Py_NegativeRefcount
// 165: be 11 08 00 00                movl    $0x811, %esi            # imm = 0x811
// 16a: 48 89 ea                      movq    %rbp, %rdx
// 16d: ff d0                         callq   *%rax
// 16f: 48 8b 45 00                   movq    (%rbp), %rax
// 173: 85 c0                         testl   %eax, %eax
// 175: 78 12                         js      0x189 <_JIT_ENTRY+0x189>
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 181: ff d0                         callq   *%rax
// 183: 48 ff 4d 00                   decq    (%rbp)
// 187: 74 0f                         je      0x198 <_JIT_ENTRY+0x198>
// 189: 49 8b 45 00                   movq    (%r13), %rax
// 18d: 48 85 c0                      testq   %rax, %rax
// 190: 7e 1e                         jle     0x1b0 <_JIT_ENTRY+0x1b0>
// 192: 85 c0                         testl   %eax, %eax
// 194: 79 40                         jns     0x1d6 <_JIT_ENTRY+0x1d6>
// 196: eb 50                         jmp     0x1e8 <_JIT_ENTRY+0x1e8>
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  _Py_Dealloc
// 1a2: 48 89 ef                      movq    %rbp, %rdi
// 1a5: ff d0                         callq   *%rax
// 1a7: 49 8b 45 00                   movq    (%r13), %rax
// 1ab: 48 85 c0                      testq   %rax, %rax
// 1ae: 7f e2                         jg      0x192 <_JIT_ENTRY+0x192>
// 1b0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b2:  R_X86_64_64  .rodata.str1.1
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_NegativeRefcount
// 1c4: be 12 08 00 00                movl    $0x812, %esi            # imm = 0x812
// 1c9: 4c 89 ea                      movq    %r13, %rdx
// 1cc: ff d0                         callq   *%rax
// 1ce: 49 8b 45 00                   movq    (%r13), %rax
// 1d2: 85 c0                         testl   %eax, %eax
// 1d4: 78 12                         js      0x1e8 <_JIT_ENTRY+0x1e8>
// 1d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d8:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e0: ff d0                         callq   *%rax
// 1e2: 49 ff 4d 00                   decq    (%r13)
// 1e6: 74 34                         je      0x21c <_JIT_ENTRY+0x21c>
// 1e8: 48 8d 43 e8                   leaq    -0x18(%rbx), %rax
// 1ec: 4d 85 e4                      testq   %r12, %r12
// 1ef: 74 43                         je      0x234 <_JIT_ENTRY+0x234>
// 1f1: 48 83 c3 f0                   addq    $-0x10, %rbx
// 1f5: 4c 89 20                      movq    %r12, (%rax)
// 1f8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fa:  R_X86_64_64  _JIT_CONTINUE
// 202: 4c 89 f7                      movq    %r14, %rdi
// 205: 48 89 de                      movq    %rbx, %rsi
// 208: 48 8b 14 24                   movq    (%rsp), %rdx
// 20c: 48 83 c4 08                   addq    $0x8, %rsp
// 210: 5b                            popq    %rbx
// 211: 41 5c                         popq    %r12
// 213: 41 5d                         popq    %r13
// 215: 41 5e                         popq    %r14
// 217: 41 5f                         popq    %r15
// 219: 5d                            popq    %rbp
// 21a: ff e0                         jmpq    *%rax
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  _Py_Dealloc
// 226: 4c 89 ef                      movq    %r13, %rdi
// 229: ff d0                         callq   *%rax
// 22b: 48 8d 43 e8                   leaq    -0x18(%rbx), %rax
// 22f: 4d 85 e4                      testq   %r12, %r12
// 232: 75 bd                         jne     0x1f1 <_JIT_ENTRY+0x1f1>
// 234: 48 8b 0c 24                   movq    (%rsp), %rcx
// 238: 48 8b 49 68                   movq    0x68(%rcx), %rcx
// 23c: 49 bc 00 00 00 00 00 00 00 00 movabsq $0x0, %r12
// 000000000000023e:  R_X86_64_64  _Py_NoneStruct
// 246: 48 85 c9                      testq   %rcx, %rcx
// 249: 74 a6                         je      0x1f1 <_JIT_ENTRY+0x1f1>
// 24b: 48 83 79 08 00                cmpq    $0x0, 0x8(%rcx)
// 250: 74 9f                         je      0x1f1 <_JIT_ENTRY+0x1f1>
// 252: 48 89 c3                      movq    %rax, %rbx
// 255: 4c 29 f3                      subq    %r14, %rbx
// 258: 48 83 c3 b8                   addq    $-0x48, %rbx
// 25c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 260: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 264: 31 c0                         xorl    %eax, %eax
// 266: 48 83 c4 08                   addq    $0x8, %rsp
// 26a: 5b                            popq    %rbx
// 26b: 41 5c                         popq    %r12
// 26d: 41 5d                         popq    %r13
// 26f: 41 5e                         popq    %r14
// 271: 41 5f                         popq    %r15
// 273: 5d                            popq    %rbp
// 274: c3                            retq
// 275: 
static const unsigned char _DELETE_DEREFplus_MATCH_CLASS_code_body[630] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd4, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x78, 0x10, 0x4d, 0x85, 0xff, 0x74, 0x16, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4b, 0xeb, 0x69, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xec, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x8b, 0x6b, 0xf8, 0x4c, 0x8b, 0x7b, 0xe8, 0x48, 0x8b, 0x6b, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x24, 0x24, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfe, 0x48, 0x89, 0xea, 0x4d, 0x89, 0xe8, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x10, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x11, 0x08, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x12, 0x08, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x34, 0x48, 0x8d, 0x43, 0xe8, 0x4d, 0x85, 0xe4, 0x74, 0x43, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x89, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x8d, 0x43, 0xe8, 0x4d, 0x85, 0xe4, 0x75, 0xbd, 0x48, 0x8b, 0x0c, 0x24, 0x48, 0x8b, 0x49, 0x68, 0x49, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc9, 0x74, 0xa6, 0x48, 0x83, 0x79, 0x08, 0x00, 0x74, 0x9f, 0x48, 0x89, 0xc3, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_MATCH_CLASS_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4a, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x57, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6b, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x75, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x90, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xc9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchClass, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x153, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1fa, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x23e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_MATCH_CLASS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_MATCH_CLASS_data_holes[1];

// _DELETE_DEREFplus_MATCH_KEYS
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_MATCH_KEYS.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 2a                         jle     0x67 <_JIT_ENTRY+0x67>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 4c                         jns     0x8d <_JIT_ENTRY+0x8d>
// 41: eb 6b                         jmp     0xae <_JIT_ENTRY+0xae>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: e9 8a 00 00 00                jmp     0xf1 <_JIT_ENTRY+0xf1>
// 67: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000069:  R_X86_64_64  .rodata.str1.1
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_NegativeRefcount
// 7b: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 80: 4c 89 e2                      movq    %r12, %rdx
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 85 c0                         testl   %eax, %eax
// 8b: 78 21                         js      0xae <_JIT_ENTRY+0xae>
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: ff d0                         callq   *%rax
// 99: 49 ff 0c 24                   decq    (%r12)
// 9d: 75 0f                         jne     0xae <_JIT_ENTRY+0xae>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _Py_Dealloc
// a9: 4c 89 e7                      movq    %r12, %rdi
// ac: ff d0                         callq   *%rax
// ae: 48 8b 73 f0                   movq    -0x10(%rbx), %rsi
// b2: 48 8b 53 f8                   movq    -0x8(%rbx), %rdx
// b6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b8:  R_X86_64_64  _PyEval_MatchKeys
// c0: 4c 89 ff                      movq    %r15, %rdi
// c3: ff d0                         callq   *%rax
// c5: 48 85 c0                      testq   %rax, %rax
// c8: 74 27                         je      0xf1 <_JIT_ENTRY+0xf1>
// ca: 48 89 03                      movq    %rax, (%rbx)
// cd: 48 83 c3 08                   addq    $0x8, %rbx
// d1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d3:  R_X86_64_64  _JIT_CONTINUE
// db: 4c 89 f7                      movq    %r14, %rdi
// de: 48 89 de                      movq    %rbx, %rsi
// e1: 4c 89 fa                      movq    %r15, %rdx
// e4: 48 83 c4 08                   addq    $0x8, %rsp
// e8: 5b                            popq    %rbx
// e9: 41 5c                         popq    %r12
// eb: 41 5e                         popq    %r14
// ed: 41 5f                         popq    %r15
// ef: ff e0                         jmpq    *%rax
// f1: 4c 29 f3                      subq    %r14, %rbx
// f4: 48 83 c3 b8                   addq    $-0x48, %rbx
// f8: 48 c1 eb 03                   shrq    $0x3, %rbx
// fc: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 100: 31 c0                         xorl    %eax, %eax
// 102: 48 83 c4 08                   addq    $0x8, %rsp
// 106: 5b                            popq    %rbx
// 107: 41 5c                         popq    %r12
// 109: 41 5e                         popq    %r14
// 10b: 41 5f                         popq    %r15
// 10d: c3                            retq
// 10e: 
static const unsigned char _DELETE_DEREFplus_MATCH_KEYS_code_body[271] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x8a, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x73, 0xf0, 0x48, 0x8b, 0x53, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x27, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_MATCH_KEYS_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xb8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_MatchKeys, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_MATCH_KEYS_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_MATCH_KEYS_data_holes[1];

// _DELETE_DEREFplus_MATCH_MAPPING
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_MATCH_MAPPING.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 1a                         je      0x46 <_JIT_ENTRY+0x46>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 45                         jle     0x82 <_JIT_ENTRY+0x82>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 67                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 41: e9 83 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 4c 29 f3                      subq    %r14, %rbx
// 68: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 70: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 74: 31 c0                         xorl    %eax, %eax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 21                         js      0xc9 <_JIT_ENTRY+0xc9>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 75 0f                         jne     0xc9 <_JIT_ENTRY+0xc9>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_Dealloc
// c4: 4c 89 e7                      movq    %r12, %rdi
// c7: ff d0                         callq   *%rax
// c9: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// cd: 48 8b 40 08                   movq    0x8(%rax), %rax
// d1: f6 80 a8 00 00 00 40          testb   $0x40, 0xa8(%rax)
// d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000da:  R_X86_64_64  _Py_FalseStruct
// e2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e4:  R_X86_64_64  _Py_TrueStruct
// ec: 48 0f 44 c8                   cmoveq  %rax, %rcx
// f0: 48 89 0b                      movq    %rcx, (%rbx)
// f3: 48 83 c3 08                   addq    $0x8, %rbx
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _JIT_CONTINUE
// 101: 4c 89 f7                      movq    %r14, %rdi
// 104: 48 89 de                      movq    %rbx, %rsi
// 107: 4c 89 fa                      movq    %r15, %rdx
// 10a: 48 83 c4 08                   addq    $0x8, %rsp
// 10e: 5b                            popq    %rbx
// 10f: 41 5c                         popq    %r12
// 111: 41 5e                         popq    %r14
// 113: 41 5f                         popq    %r15
// 115: ff e0                         jmpq    *%rax
// 117: 
static const unsigned char _DELETE_DEREFplus_MATCH_MAPPING_code_body[280] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x0b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_MATCH_MAPPING_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_MATCH_MAPPING_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_MATCH_MAPPING_data_holes[1];

// _DELETE_DEREFplus_MATCH_SEQUENCE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_MATCH_SEQUENCE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 1a                         je      0x46 <_JIT_ENTRY+0x46>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 45                         jle     0x82 <_JIT_ENTRY+0x82>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 67                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 41: e9 83 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 4c 29 f3                      subq    %r14, %rbx
// 68: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 70: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 74: 31 c0                         xorl    %eax, %eax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 21                         js      0xc9 <_JIT_ENTRY+0xc9>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 75 0f                         jne     0xc9 <_JIT_ENTRY+0xc9>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_Dealloc
// c4: 4c 89 e7                      movq    %r12, %rdi
// c7: ff d0                         callq   *%rax
// c9: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// cd: 48 8b 40 08                   movq    0x8(%rax), %rax
// d1: f6 80 a8 00 00 00 20          testb   $0x20, 0xa8(%rax)
// d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000da:  R_X86_64_64  _Py_FalseStruct
// e2: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000e4:  R_X86_64_64  _Py_TrueStruct
// ec: 48 0f 44 c8                   cmoveq  %rax, %rcx
// f0: 48 89 0b                      movq    %rcx, (%rbx)
// f3: 48 83 c3 08                   addq    $0x8, %rbx
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  _JIT_CONTINUE
// 101: 4c 89 f7                      movq    %r14, %rdi
// 104: 48 89 de                      movq    %rbx, %rsi
// 107: 4c 89 fa                      movq    %r15, %rdx
// 10a: 48 83 c4 08                   addq    $0x8, %rsp
// 10e: 5b                            popq    %rbx
// 10f: 41 5c                         popq    %r12
// 111: 41 5e                         popq    %r14
// 113: 41 5f                         popq    %r15
// 115: ff e0                         jmpq    *%rax
// 117: 
static const unsigned char _DELETE_DEREFplus_MATCH_SEQUENCE_code_body[280] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x8b, 0x40, 0x08, 0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x0b, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_MATCH_SEQUENCE_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0xe4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_MATCH_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_MATCH_SEQUENCE_data_holes[1];

// _DELETE_DEREFplus_NOP
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_NOP.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 1a                         je      0x46 <_JIT_ENTRY+0x46>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 45                         jle     0x82 <_JIT_ENTRY+0x82>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 67                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 41: e9 83 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 4c 29 f3                      subq    %r14, %rbx
// 68: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 70: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 74: 31 c0                         xorl    %eax, %eax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 21                         js      0xc9 <_JIT_ENTRY+0xc9>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 75 0f                         jne     0xc9 <_JIT_ENTRY+0xc9>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_Dealloc
// c4: 4c 89 e7                      movq    %r12, %rdi
// c7: ff d0                         callq   *%rax
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _JIT_CONTINUE
// d3: 4c 89 f7                      movq    %r14, %rdi
// d6: 48 89 de                      movq    %rbx, %rsi
// d9: 4c 89 fa                      movq    %r15, %rdx
// dc: 48 83 c4 08                   addq    $0x8, %rsp
// e0: 5b                            popq    %rbx
// e1: 41 5c                         popq    %r12
// e3: 41 5e                         popq    %r14
// e5: 41 5f                         popq    %r15
// e7: ff e0                         jmpq    *%rax
// e9: 
static const unsigned char _DELETE_DEREFplus_NOP_code_body[234] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_NOP_code_holes[9] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_NOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_NOP_data_holes[1];

// _DELETE_DEREFplus_POP_EXCEPT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_POP_EXCEPT.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 1a                         je      0x46 <_JIT_ENTRY+0x46>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 45                         jle     0x82 <_JIT_ENTRY+0x82>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 67                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 41: e9 83 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 4c 29 f3                      subq    %r14, %rbx
// 68: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 70: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 74: 31 c0                         xorl    %eax, %eax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 21                         js      0xc9 <_JIT_ENTRY+0xc9>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 75 0f                         jne     0xc9 <_JIT_ENTRY+0xc9>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_Dealloc
// c4: 4c 89 e7                      movq    %r12, %rdi
// c7: ff d0                         callq   *%rax
// c9: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// cd: 48 83 c3 f8                   addq    $-0x8, %rbx
// d1: 49 8b 4f 70                   movq    0x70(%r15), %rcx
// d5: 4c 8b 21                      movq    (%rcx), %r12
// d8: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000da:  R_X86_64_64  _Py_NoneStruct
// e2: 31 f6                         xorl    %esi, %esi
// e4: 48 39 d0                      cmpq    %rdx, %rax
// e7: 48 0f 45 f0                   cmovneq %rax, %rsi
// eb: 48 89 31                      movq    %rsi, (%rcx)
// ee: 4d 85 e4                      testq   %r12, %r12
// f1: 74 56                         je      0x149 <_JIT_ENTRY+0x149>
// f3: 49 8b 04 24                   movq    (%r12), %rax
// f7: 48 85 c0                      testq   %rax, %rax
// fa: 7e 06                         jle     0x102 <_JIT_ENTRY+0x102>
// fc: 85 c0                         testl   %eax, %eax
// fe: 79 28                         jns     0x128 <_JIT_ENTRY+0x128>
// 100: eb 47                         jmp     0x149 <_JIT_ENTRY+0x149>
// 102: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000104:  R_X86_64_64  .rodata.str1.1+0x39
// 10c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010e:  R_X86_64_64  _Py_NegativeRefcount
// 116: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 11b: 4c 89 e2                      movq    %r12, %rdx
// 11e: ff d0                         callq   *%rax
// 120: 49 8b 04 24                   movq    (%r12), %rax
// 124: 85 c0                         testl   %eax, %eax
// 126: 78 21                         js      0x149 <_JIT_ENTRY+0x149>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 132: ff d0                         callq   *%rax
// 134: 49 ff 0c 24                   decq    (%r12)
// 138: 75 0f                         jne     0x149 <_JIT_ENTRY+0x149>
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _Py_Dealloc
// 144: 4c 89 e7                      movq    %r12, %rdi
// 147: ff d0                         callq   *%rax
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _JIT_CONTINUE
// 153: 4c 89 f7                      movq    %r14, %rdi
// 156: 48 89 de                      movq    %rbx, %rsi
// 159: 4c 89 fa                      movq    %r15, %rdx
// 15c: 48 83 c4 08                   addq    $0x8, %rsp
// 160: 5b                            popq    %rbx
// 161: 41 5c                         popq    %r12
// 163: 41 5e                         popq    %r14
// 165: 41 5f                         popq    %r15
// 167: ff e0                         jmpq    *%rax
// 169: 
static const unsigned char _DELETE_DEREFplus_POP_EXCEPT_code_body[362] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8b, 0x4f, 0x70, 0x4c, 0x8b, 0x21, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x48, 0x39, 0xd0, 0x48, 0x0f, 0x45, 0xf0, 0x48, 0x89, 0x31, 0x4d, 0x85, 0xe4, 0x74, 0x56, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_POP_EXCEPT_code_holes[14] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x104, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x10e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_POP_EXCEPT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_POP_EXCEPT_data_holes[1];

// _DELETE_DEREFplus_POP_FRAME
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_POP_FRAME.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d6                      movq    %rdx, %r14
// b: 49 89 f7                      movq    %rsi, %r15
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 1a                         je      0x46 <_JIT_ENTRY+0x46>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 45                         jle     0x82 <_JIT_ENTRY+0x82>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 67                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 41: e9 83 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 46: 48 8b 33                      movq    (%rbx), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 f7                      movq    %r14, %rdi
// 63: ff d0                         callq   *%rax
// 65: 49 29 df                      subq    %rbx, %r15
// 68: 49 83 c7 b8                   addq    $-0x48, %r15
// 6c: 49 c1 ef 03                   shrq    $0x3, %r15
// 70: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// 74: 31 c0                         xorl    %eax, %eax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 21                         js      0xc9 <_JIT_ENTRY+0xc9>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 75 0f                         jne     0xc9 <_JIT_ENTRY+0xc9>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_Dealloc
// c4: 4c 89 e7                      movq    %r12, %rdi
// c7: ff d0                         callq   *%rax
// c9: 4d 8b 67 f8                   movq    -0x8(%r15), %r12
// cd: 49 83 c7 f8                   addq    $-0x8, %r15
// d1: 49 29 df                      subq    %rbx, %r15
// d4: 49 83 c7 b8                   addq    $-0x48, %r15
// d8: 49 c1 ef 03                   shrq    $0x3, %r15
// dc: 44 89 7b 40                   movl    %r15d, 0x40(%rbx)
// e0: 41 ff 46 24                   incl    0x24(%r14)
// e4: 4c 8b 7b 08                   movq    0x8(%rbx), %r15
// e8: 4d 89 7e 40                   movq    %r15, 0x40(%r14)
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _PyEval_FrameClearAndPop
// f6: 4c 89 f7                      movq    %r14, %rdi
// f9: 48 89 de                      movq    %rbx, %rsi
// fc: ff d0                         callq   *%rax
// fe: 49 63 47 40                   movslq  0x40(%r15), %rax
// 102: 4d 89 64 c7 48                movq    %r12, 0x48(%r15,%rax,8)
// 107: 49 8d 34 c7                   leaq    (%r15,%rax,8), %rsi
// 10b: 48 83 c6 50                   addq    $0x50, %rsi
// 10f: 41 c7 47 40 ff ff ff ff       movl    $0xffffffff, 0x40(%r15) # imm = 0xFFFFFFFF
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _JIT_CONTINUE
// 121: 4c 89 ff                      movq    %r15, %rdi
// 124: 4c 89 f2                      movq    %r14, %rdx
// 127: 48 83 c4 08                   addq    $0x8, %rsp
// 12b: 5b                            popq    %rbx
// 12c: 41 5c                         popq    %r12
// 12e: 41 5e                         popq    %r14
// 130: 41 5f                         popq    %r15
// 132: ff e0                         jmpq    *%rax
// 134: 
static const unsigned char _DELETE_DEREFplus_POP_FRAME_code_body[309] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd6, 0x49, 0x89, 0xf7, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0xd0, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8b, 0x67, 0xf8, 0x49, 0x83, 0xc7, 0xf8, 0x49, 0x29, 0xdf, 0x49, 0x83, 0xc7, 0xb8, 0x49, 0xc1, 0xef, 0x03, 0x44, 0x89, 0x7b, 0x40, 0x41, 0xff, 0x46, 0x24, 0x4c, 0x8b, 0x7b, 0x08, 0x4d, 0x89, 0x7e, 0x40, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0xff, 0xd0, 0x49, 0x63, 0x47, 0x40, 0x4d, 0x89, 0x64, 0xc7, 0x48, 0x49, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x50, 0x41, 0xc7, 0x47, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf2, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_POP_FRAME_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FrameClearAndPop, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_POP_FRAME_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_POP_FRAME_data_holes[1];

// _DELETE_DEREFplus_POP_TOP
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_POP_TOP.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 28: 4d 85 e4                      testq   %r12, %r12
// 2b: 74 21                         je      0x4e <_JIT_ENTRY+0x4e>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 4a                         jle     0x88 <_JIT_ENTRY+0x88>
// 3e: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000040:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 48: 85 c0                         testl   %eax, %eax
// 4a: 79 6c                         jns     0xb8 <_JIT_ENTRY+0xb8>
// 4c: eb 73                         jmp     0xc1 <_JIT_ENTRY+0xc1>
// 4e: 49 8b 36                      movq    (%r14), %rsi
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: 0f b7 d0                      movzwl  %ax, %edx
// 5e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000060:  R_X86_64_64  _PyEval_FormatExcUnbound
// 68: 4c 89 ff                      movq    %r15, %rdi
// 6b: ff d0                         callq   *%rax
// 6d: 4c 29 f3                      subq    %r14, %rbx
// 70: 48 83 c3 b8                   addq    $-0x48, %rbx
// 74: 48 c1 eb 03                   shrq    $0x3, %rbx
// 78: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 7c: 31 c0                         xorl    %eax, %eax
// 7e: 5b                            popq    %rbx
// 7f: 41 5c                         popq    %r12
// 81: 41 5d                         popq    %r13
// 83: 41 5e                         popq    %r14
// 85: 41 5f                         popq    %r15
// 87: c3                            retq
// 88: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008a:  R_X86_64_64  .rodata.str1.1
// 92: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000094:  R_X86_64_64  _Py_NegativeRefcount
// 9c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// a1: 4c 89 e2                      movq    %r12, %rdx
// a4: ff d0                         callq   *%rax
// a6: 49 8b 04 24                   movq    (%r12), %rax
// aa: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000ac:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b4: 85 c0                         testl   %eax, %eax
// b6: 78 09                         js      0xc1 <_JIT_ENTRY+0xc1>
// b8: 41 ff d5                      callq   *%r13
// bb: 49 ff 0c 24                   decq    (%r12)
// bf: 74 17                         je      0xd8 <_JIT_ENTRY+0xd8>
// c1: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// c5: 49 8b 04 24                   movq    (%r12), %rax
// c9: 48 85 c0                      testq   %rax, %rax
// cc: 7e 26                         jle     0xf4 <_JIT_ENTRY+0xf4>
// ce: 48 83 c3 f8                   addq    $-0x8, %rbx
// d2: 85 c0                         testl   %eax, %eax
// d4: 79 48                         jns     0x11e <_JIT_ENTRY+0x11e>
// d6: eb 5e                         jmp     0x136 <_JIT_ENTRY+0x136>
// d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000da:  R_X86_64_64  _Py_Dealloc
// e2: 4c 89 e7                      movq    %r12, %rdi
// e5: ff d0                         callq   *%rax
// e7: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 48 85 c0                      testq   %rax, %rax
// f2: 7f da                         jg      0xce <_JIT_ENTRY+0xce>
// f4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f6:  R_X86_64_64  .rodata.str1.1
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_NegativeRefcount
// 108: be 54 00 00 00                movl    $0x54, %esi
// 10d: 4c 89 e2                      movq    %r12, %rdx
// 110: ff d0                         callq   *%rax
// 112: 49 8b 04 24                   movq    (%r12), %rax
// 116: 48 83 c3 f8                   addq    $-0x8, %rbx
// 11a: 85 c0                         testl   %eax, %eax
// 11c: 78 18                         js      0x136 <_JIT_ENTRY+0x136>
// 11e: 41 ff d5                      callq   *%r13
// 121: 49 ff 0c 24                   decq    (%r12)
// 125: 75 0f                         jne     0x136 <_JIT_ENTRY+0x136>
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_Dealloc
// 131: 4c 89 e7                      movq    %r12, %rdi
// 134: ff d0                         callq   *%rax
// 136: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000138:  R_X86_64_64  _JIT_CONTINUE
// 140: 4c 89 f7                      movq    %r14, %rdi
// 143: 48 89 de                      movq    %rbx, %rsi
// 146: 4c 89 fa                      movq    %r15, %rdx
// 149: 5b                            popq    %rbx
// 14a: 41 5c                         popq    %r12
// 14c: 41 5d                         popq    %r13
// 14e: 41 5e                         popq    %r14
// 150: 41 5f                         popq    %r15
// 152: ff e0                         jmpq    *%rax
// 154: 
static const unsigned char _DELETE_DEREFplus_POP_TOP_code_body[341] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x21, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x4a, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x6c, 0xeb, 0x73, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x09, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x17, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x26, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x79, 0x48, 0xeb, 0x5e, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xda, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xf8, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_POP_TOP_code_holes[13] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x40, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x60, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x138, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_POP_TOP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_POP_TOP_data_holes[1];

// _DELETE_DEREFplus_PUSH_EXC_INFO
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_PUSH_EXC_INFO.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 1a                         je      0x49 <_JIT_ENTRY+0x49>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 48                         jle     0x88 <_JIT_ENTRY+0x88>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 6a                         jns     0xae <_JIT_ENTRY+0xae>
// 44: e9 86 00 00 00                jmp     0xcf <_JIT_ENTRY+0xcf>
// 49: 49 8b 36                      movq    (%r14), %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 d0                      movzwl  %ax, %edx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _PyEval_FormatExcUnbound
// 63: 4c 89 ff                      movq    %r15, %rdi
// 66: ff d0                         callq   *%rax
// 68: 4c 29 f3                      subq    %r14, %rbx
// 6b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 73: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 77: 31 c0                         xorl    %eax, %eax
// 79: 48 83 c4 08                   addq    $0x8, %rsp
// 7d: 5b                            popq    %rbx
// 7e: 41 5c                         popq    %r12
// 80: 41 5d                         popq    %r13
// 82: 41 5e                         popq    %r14
// 84: 41 5f                         popq    %r15
// 86: 5d                            popq    %rbp
// 87: c3                            retq
// 88: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000008a:  R_X86_64_64  .rodata.str1.1
// 92: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000094:  R_X86_64_64  _Py_NegativeRefcount
// 9c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// a1: 4c 89 e2                      movq    %r12, %rdx
// a4: ff d0                         callq   *%rax
// a6: 49 8b 04 24                   movq    (%r12), %rax
// aa: 85 c0                         testl   %eax, %eax
// ac: 78 21                         js      0xcf <_JIT_ENTRY+0xcf>
// ae: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b8: ff d0                         callq   *%rax
// ba: 49 ff 0c 24                   decq    (%r12)
// be: 75 0f                         jne     0xcf <_JIT_ENTRY+0xcf>
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _Py_Dealloc
// ca: 4c 89 e7                      movq    %r12, %rdi
// cd: ff d0                         callq   *%rax
// cf: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// d3: 4d 8b 6f 70                   movq    0x70(%r15), %r13
// d7: 49 8b 6d 00                   movq    (%r13), %rbp
// db: 41 8b 04 24                   movl    (%r12), %eax
// df: ff c0                         incl    %eax
// e1: 74 10                         je      0xf3 <_JIT_ENTRY+0xf3>
// e3: 41 89 04 24                   movl    %eax, (%r12)
// e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e9:  R_X86_64_64  _Py_INCREF_IncRefTotal
// f1: ff d0                         callq   *%rax
// f3: 48 85 ed                      testq   %rbp, %rbp
// f6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f8:  R_X86_64_64  _Py_NoneStruct
// 100: 48 0f 45 c5                   cmovneq %rbp, %rax
// 104: 4d 89 65 00                   movq    %r12, (%r13)
// 108: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 10c: 4c 89 23                      movq    %r12, (%rbx)
// 10f: 48 83 c3 08                   addq    $0x8, %rbx
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _JIT_CONTINUE
// 11d: 4c 89 f7                      movq    %r14, %rdi
// 120: 48 89 de                      movq    %rbx, %rsi
// 123: 4c 89 fa                      movq    %r15, %rdx
// 126: 48 83 c4 08                   addq    $0x8, %rsp
// 12a: 5b                            popq    %rbx
// 12b: 41 5c                         popq    %r12
// 12d: 41 5d                         popq    %r13
// 12f: 41 5e                         popq    %r14
// 131: 41 5f                         popq    %r15
// 133: 5d                            popq    %rbp
// 134: ff e0                         jmpq    *%rax
// 136: 
static const unsigned char _DELETE_DEREFplus_PUSH_EXC_INFO_code_body[311] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x48, 0x85, 0xc0, 0x79, 0x6a, 0xe9, 0x86, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x4d, 0x8b, 0x6f, 0x70, 0x49, 0x8b, 0x6d, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0x10, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45, 0xc5, 0x4d, 0x89, 0x65, 0x00, 0x48, 0x89, 0x43, 0xf8, 0x4c, 0x89, 0x23, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_PUSH_EXC_INFO_code_holes[11] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xb0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0xf8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_PUSH_EXC_INFO_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_PUSH_EXC_INFO_data_holes[1];

// _DELETE_DEREFplus_PUSH_FRAME
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_PUSH_FRAME.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 49 89 f6                      movq    %rsi, %r14
// e: 48 89 fb                      movq    %rdi, %rbx
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 1a                         je      0x46 <_JIT_ENTRY+0x46>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 45                         jle     0x82 <_JIT_ENTRY+0x82>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 67                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 41: e9 83 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 46: 48 8b 33                      movq    (%rbx), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 49 29 de                      subq    %rbx, %r14
// 68: 49 83 c6 b8                   addq    $-0x48, %r14
// 6c: 49 c1 ee 03                   shrq    $0x3, %r14
// 70: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 74: 31 c0                         xorl    %eax, %eax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 21                         js      0xc9 <_JIT_ENTRY+0xc9>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 75 0f                         jne     0xc9 <_JIT_ENTRY+0xc9>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_Dealloc
// c4: 4c 89 e7                      movq    %r12, %rdi
// c7: ff d0                         callq   *%rax
// c9: 49 8b 7e f8                   movq    -0x8(%r14), %rdi
// cd: 49 83 c6 f8                   addq    $-0x8, %r14
// d1: 49 29 de                      subq    %rbx, %r14
// d4: 49 83 c6 b8                   addq    $-0x48, %r14
// d8: 49 c1 ee 03                   shrq    $0x3, %r14
// dc: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// e0: 48 89 5f 08                   movq    %rbx, 0x8(%rdi)
// e4: 49 89 7f 40                   movq    %rdi, 0x40(%r15)
// e8: 41 ff 4f 24                   decl    0x24(%r15)
// ec: 48 63 47 40                   movslq  0x40(%rdi), %rax
// f0: 48 8d 34 c7                   leaq    (%rdi,%rax,8), %rsi
// f4: 48 83 c6 48                   addq    $0x48, %rsi
// f8: c7 47 40 ff ff ff ff          movl    $0xffffffff, 0x40(%rdi) # imm = 0xFFFFFFFF
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _JIT_CONTINUE
// 109: 4c 89 fa                      movq    %r15, %rdx
// 10c: 48 83 c4 08                   addq    $0x8, %rsp
// 110: 5b                            popq    %rbx
// 111: 41 5c                         popq    %r12
// 113: 41 5e                         popq    %r14
// 115: 41 5f                         popq    %r15
// 117: ff e0                         jmpq    *%rax
// 119: 
static const unsigned char _DELETE_DEREFplus_PUSH_FRAME_code_body[282] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x7e, 0xf8, 0x49, 0x83, 0xc6, 0xf8, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x89, 0x5f, 0x08, 0x49, 0x89, 0x7f, 0x40, 0x41, 0xff, 0x4f, 0x24, 0x48, 0x63, 0x47, 0x40, 0x48, 0x8d, 0x34, 0xc7, 0x48, 0x83, 0xc6, 0x48, 0xc7, 0x47, 0x40, 0xff, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_PUSH_FRAME_code_holes[9] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_PUSH_FRAME_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_PUSH_FRAME_data_holes[1];

// _DELETE_DEREFplus_PUSH_NULL
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_PUSH_NULL.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 1a                         je      0x46 <_JIT_ENTRY+0x46>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 45                         jle     0x82 <_JIT_ENTRY+0x82>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 67                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 41: e9 83 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 4c 29 f3                      subq    %r14, %rbx
// 68: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 70: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 74: 31 c0                         xorl    %eax, %eax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 21                         js      0xc9 <_JIT_ENTRY+0xc9>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 75 0f                         jne     0xc9 <_JIT_ENTRY+0xc9>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_Dealloc
// c4: 4c 89 e7                      movq    %r12, %rdi
// c7: ff d0                         callq   *%rax
// c9: 48 c7 03 00 00 00 00          movq    $0x0, (%rbx)
// d0: 48 83 c3 08                   addq    $0x8, %rbx
// d4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d6:  R_X86_64_64  _JIT_CONTINUE
// de: 4c 89 f7                      movq    %r14, %rdi
// e1: 48 89 de                      movq    %rbx, %rsi
// e4: 4c 89 fa                      movq    %r15, %rdx
// e7: 48 83 c4 08                   addq    $0x8, %rsp
// eb: 5b                            popq    %rbx
// ec: 41 5c                         popq    %r12
// ee: 41 5e                         popq    %r14
// f0: 41 5f                         popq    %r15
// f2: ff e0                         jmpq    *%rax
// f4: 
static const unsigned char _DELETE_DEREFplus_PUSH_NULL_code_body[245] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xc7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_PUSH_NULL_code_holes[9] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd6, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_PUSH_NULL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_PUSH_NULL_data_holes[1];

// _DELETE_DEREFplus_RESUME_CHECK
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_RESUME_CHECK.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 7c                         jmp     0xbf <_JIT_ENTRY+0xbf>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 9f 00 00 00                jmp     0x117 <_JIT_ENTRY+0x117>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 21                         js      0xbf <_JIT_ENTRY+0xbf>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 75 0f                         jne     0xbf <_JIT_ENTRY+0xbf>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_Dealloc
// ba: 4c 89 e7                      movq    %r12, %rdi
// bd: ff d0                         callq   *%rax
// bf: 49 8b 47 10                   movq    0x10(%r15), %rax
// c3: 48 8b 08                      movq    (%rax), %rcx
// c6: 49 8b 06                      movq    (%r14), %rax
// c9: 48 3b 88 a8 00 00 00          cmpq    0xa8(%rax), %rcx
// d0: 75 20                         jne     0xf2 <_JIT_ENTRY+0xf2>
// d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d4:  R_X86_64_64  _JIT_CONTINUE
// dc: 4c 89 f7                      movq    %r14, %rdi
// df: 48 89 de                      movq    %rbx, %rsi
// e2: 4c 89 fa                      movq    %r15, %rdx
// e5: 48 83 c4 08                   addq    $0x8, %rsp
// e9: 5b                            popq    %rbx
// ea: 41 5c                         popq    %r12
// ec: 41 5e                         popq    %r14
// ee: 41 5f                         popq    %r15
// f0: ff e0                         jmpq    *%rax
// f2: 4c 29 f3                      subq    %r14, %rbx
// f5: 48 83 c3 b8                   addq    $-0x48, %rbx
// f9: 48 c1 eb 03                   shrq    $0x3, %rbx
// fd: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 101: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000103:  R_X86_64_64  _JIT_TARGET
// 10b: 89 c9                         movl    %ecx, %ecx
// 10d: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 111: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 117: 48 83 c4 08                   addq    $0x8, %rsp
// 11b: 5b                            popq    %rbx
// 11c: 41 5c                         popq    %r12
// 11e: 41 5e                         popq    %r14
// 120: 41 5f                         popq    %r15
// 122: c3                            retq
// 123: 
static const unsigned char _DELETE_DEREFplus_RESUME_CHECK_code_body[292] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x9f, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x47, 0x10, 0x48, 0x8b, 0x08, 0x49, 0x8b, 0x06, 0x48, 0x3b, 0x88, 0xa8, 0x00, 0x00, 0x00, 0x75, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3};
static const Hole _DELETE_DEREFplus_RESUME_CHECK_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_RESUME_CHECK_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_RESUME_CHECK_data_holes[1];

// _DELETE_DEREFplus_SAVE_RETURN_OFFSET
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_SAVE_RETURN_OFFSET.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 1a                         je      0x46 <_JIT_ENTRY+0x46>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 45                         jle     0x82 <_JIT_ENTRY+0x82>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 67                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 41: e9 83 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 4c 29 f3                      subq    %r14, %rbx
// 68: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 70: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 74: 31 c0                         xorl    %eax, %eax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 21                         js      0xc9 <_JIT_ENTRY+0xc9>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 75 0f                         jne     0xc9 <_JIT_ENTRY+0xc9>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_Dealloc
// c4: 4c 89 e7                      movq    %r12, %rdi
// c7: ff d0                         callq   *%rax
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _JIT_OPARG
// d3: 66 41 89 46 44                movw    %ax, 0x44(%r14)
// d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000da:  R_X86_64_64  _JIT_CONTINUE
// e2: 4c 89 f7                      movq    %r14, %rdi
// e5: 48 89 de                      movq    %rbx, %rsi
// e8: 4c 89 fa                      movq    %r15, %rdx
// eb: 48 83 c4 08                   addq    $0x8, %rsp
// ef: 5b                            popq    %rbx
// f0: 41 5c                         popq    %r12
// f2: 41 5e                         popq    %r14
// f4: 41 5f                         popq    %r15
// f6: ff e0                         jmpq    *%rax
// f8: 
static const unsigned char _DELETE_DEREFplus_SAVE_RETURN_OFFSET_code_body[249] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x41, 0x89, 0x46, 0x44, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_SAVE_RETURN_OFFSET_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_SAVE_RETURN_OFFSET_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_SAVE_RETURN_OFFSET_data_holes[1];

// _DELETE_DEREFplus_SETUP_ANNOTATIONS
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_SETUP_ANNOTATIONS.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 2a                         jle     0x6a <_JIT_ENTRY+0x6a>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 4c                         jns     0x90 <_JIT_ENTRY+0x90>
// 44: eb 60                         jmp     0xa6 <_JIT_ENTRY+0xa6>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: e9 22 01 00 00                jmp     0x18c <_JIT_ENTRY+0x18c>
// 6a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006c:  R_X86_64_64  .rodata.str1.1
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _Py_NegativeRefcount
// 7e: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 83: 4c 89 e2                      movq    %r12, %rdx
// 86: ff d0                         callq   *%rax
// 88: 49 8b 04 24                   movq    (%r12), %rax
// 8c: 85 c0                         testl   %eax, %eax
// 8e: 78 16                         js      0xa6 <_JIT_ENTRY+0xa6>
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9a: ff d0                         callq   *%rax
// 9c: 49 ff 0c 24                   decq    (%r12)
// a0: 0f 84 a2 00 00 00             je      0x148 <_JIT_ENTRY+0x148>
// a6: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// aa: 48 85 ff                      testq   %rdi, %rdi
// ad: 0f 84 b1 00 00 00             je      0x164 <_JIT_ENTRY+0x164>
// b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b5:  R_X86_64_64  PyMapping_GetOptionalItem
// bd: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000bf:  R_X86_64_64  _PyRuntime
// c7: 49 81 c5 a8 a7 00 00          addq    $0xa7a8, %r13           # imm = 0xA7A8
// ce: 48 89 e2                      movq    %rsp, %rdx
// d1: 4c 89 ee                      movq    %r13, %rsi
// d4: ff d0                         callq   *%rax
// d6: 85 c0                         testl   %eax, %eax
// d8: 0f 88 ae 00 00 00             js      0x18c <_JIT_ENTRY+0x18c>
// de: 4c 8b 24 24                   movq    (%rsp), %r12
// e2: 4d 85 e4                      testq   %r12, %r12
// e5: 0f 84 c1 00 00 00             je      0x1ac <_JIT_ENTRY+0x1ac>
// eb: 49 8b 04 24                   movq    (%r12), %rax
// ef: 48 85 c0                      testq   %rax, %rax
// f2: 7f 22                         jg      0x116 <_JIT_ENTRY+0x116>
// f4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f6:  R_X86_64_64  .rodata.str1.1
// fe: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000100:  R_X86_64_64  _Py_NegativeRefcount
// 108: be 96 05 00 00                movl    $0x596, %esi            # imm = 0x596
// 10d: 4c 89 e2                      movq    %r12, %rdx
// 110: ff d0                         callq   *%rax
// 112: 49 8b 04 24                   movq    (%r12), %rax
// 116: 85 c0                         testl   %eax, %eax
// 118: 0f 88 17 01 00 00             js      0x235 <_JIT_ENTRY+0x235>
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 128: ff d0                         callq   *%rax
// 12a: 49 ff 0c 24                   decq    (%r12)
// 12e: 0f 85 01 01 00 00             jne     0x235 <_JIT_ENTRY+0x235>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_Dealloc
// 13e: 4c 89 e7                      movq    %r12, %rdi
// 141: ff d0                         callq   *%rax
// 143: e9 ed 00 00 00                jmp     0x235 <_JIT_ENTRY+0x235>
// 148: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014a:  R_X86_64_64  _Py_Dealloc
// 152: 4c 89 e7                      movq    %r12, %rdi
// 155: ff d0                         callq   *%rax
// 157: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// 15b: 48 85 ff                      testq   %rdi, %rdi
// 15e: 0f 85 4f ff ff ff             jne     0xb3 <_JIT_ENTRY+0xb3>
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  PyExc_SystemError
// 16e: 48 8b 30                      movq    (%rax), %rsi
// 171: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000173:  R_X86_64_64  .rodata.str1.1+0x39
// 17b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017d:  R_X86_64_64  _PyErr_Format
// 185: 4c 89 ff                      movq    %r15, %rdi
// 188: 31 c0                         xorl    %eax, %eax
// 18a: ff d1                         callq   *%rcx
// 18c: 4c 29 f3                      subq    %r14, %rbx
// 18f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 193: 48 c1 eb 03                   shrq    $0x3, %rbx
// 197: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 19b: 31 c0                         xorl    %eax, %eax
// 19d: 48 83 c4 08                   addq    $0x8, %rsp
// 1a1: 5b                            popq    %rbx
// 1a2: 41 5c                         popq    %r12
// 1a4: 41 5d                         popq    %r13
// 1a6: 41 5e                         popq    %r14
// 1a8: 41 5f                         popq    %r15
// 1aa: 5d                            popq    %rbp
// 1ab: c3                            retq
// 1ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ae:  R_X86_64_64  PyDict_New
// 1b6: ff d0                         callq   *%rax
// 1b8: 48 89 04 24                   movq    %rax, (%rsp)
// 1bc: 48 85 c0                      testq   %rax, %rax
// 1bf: 74 cb                         je      0x18c <_JIT_ENTRY+0x18c>
// 1c1: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// 1c5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001c7:  R_X86_64_64  PyObject_SetItem
// 1cf: 4c 89 ee                      movq    %r13, %rsi
// 1d2: 48 89 c2                      movq    %rax, %rdx
// 1d5: ff d1                         callq   *%rcx
// 1d7: 89 c5                         movl    %eax, %ebp
// 1d9: 4c 8b 24 24                   movq    (%rsp), %r12
// 1dd: 49 8b 04 24                   movq    (%r12), %rax
// 1e1: 48 85 c0                      testq   %rax, %rax
// 1e4: 7f 22                         jg      0x208 <_JIT_ENTRY+0x208>
// 1e6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001e8:  R_X86_64_64  .rodata.str1.1
// 1f0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f2:  R_X86_64_64  _Py_NegativeRefcount
// 1fa: be 92 05 00 00                movl    $0x592, %esi            # imm = 0x592
// 1ff: 4c 89 e2                      movq    %r12, %rdx
// 202: ff d0                         callq   *%rax
// 204: 49 8b 04 24                   movq    (%r12), %rax
// 208: 85 c0                         testl   %eax, %eax
// 20a: 78 21                         js      0x22d <_JIT_ENTRY+0x22d>
// 20c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 216: ff d0                         callq   *%rax
// 218: 49 ff 0c 24                   decq    (%r12)
// 21c: 75 0f                         jne     0x22d <_JIT_ENTRY+0x22d>
// 21e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000220:  R_X86_64_64  _Py_Dealloc
// 228: 4c 89 e7                      movq    %r12, %rdi
// 22b: ff d0                         callq   *%rax
// 22d: 85 ed                         testl   %ebp, %ebp
// 22f: 0f 85 57 ff ff ff             jne     0x18c <_JIT_ENTRY+0x18c>
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _JIT_CONTINUE
// 23f: 4c 89 f7                      movq    %r14, %rdi
// 242: 48 89 de                      movq    %rbx, %rsi
// 245: 4c 89 fa                      movq    %r15, %rdx
// 248: 48 83 c4 08                   addq    $0x8, %rsp
// 24c: 5b                            popq    %rbx
// 24d: 41 5c                         popq    %r12
// 24f: 41 5d                         popq    %r13
// 251: 41 5e                         popq    %r14
// 253: 41 5f                         popq    %r15
// 255: 5d                            popq    %rbp
// 256: ff e0                         jmpq    *%rax
// 258: 
static const unsigned char _DELETE_DEREFplus_SETUP_ANNOTATIONS_code_body[601] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x60, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x22, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xa2, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x84, 0xb1, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc5, 0xa8, 0xa7, 0x00, 0x00, 0x48, 0x89, 0xe2, 0x4c, 0x89, 0xee, 0xff, 0xd0, 0x85, 0xc0, 0x0f, 0x88, 0xae, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x24, 0x24, 0x4d, 0x85, 0xe4, 0x0f, 0x84, 0xc1, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x96, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x0f, 0x88, 0x17, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x85, 0x01, 0x01, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xe9, 0xed, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0x85, 0xff, 0x0f, 0x85, 0x4f, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0xff, 0xd1, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0xcb, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xee, 0x48, 0x89, 0xc2, 0xff, 0xd1, 0x89, 0xc5, 0x4c, 0x8b, 0x24, 0x24, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x92, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x0f, 0x85, 0x57, 0xff, 0xff, 0xff, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_SETUP_ANNOTATIONS_code_holes[24] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyMapping_GetOptionalItem, 0x0},
    {0xbf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x100, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x14a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x173, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x1ae, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_New, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1f2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x20e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x220, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when setting up annotations\x00'
// 65: 00 00 00
static const unsigned char _DELETE_DEREFplus_SETUP_ANNOTATIONS_data_body[105] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_SETUP_ANNOTATIONS_data_holes[1];

// _DELETE_DEREFplus_SET_ADD
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_SET_ADD.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 21                         je      0x50 <_JIT_ENTRY+0x50>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 34                         jle     0x74 <_JIT_ENTRY+0x74>
// 40: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000042:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a: 85 c0                         testl   %eax, %eax
// 4c: 79 56                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 4e: eb 6b                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 50: 49 8b 36                      movq    (%r14), %rsi
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _JIT_OPARG
// 5d: 0f b7 d0                      movzwl  %ax, %edx
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _PyEval_FormatExcUnbound
// 6a: 4c 89 ff                      movq    %r15, %rdi
// 6d: ff d0                         callq   *%rax
// 6f: e9 ce 00 00 00                jmp     0x142 <_JIT_ENTRY+0x142>
// 74: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000076:  R_X86_64_64  .rodata.str1.1
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _Py_NegativeRefcount
// 88: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 49 8b 04 24                   movq    (%r12), %rax
// 96: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000098:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 17                         js      0xbb <_JIT_ENTRY+0xbb>
// a4: ff d1                         callq   *%rcx
// a6: 49 ff 0c 24                   decq    (%r12)
// aa: 75 0f                         jne     0xbb <_JIT_ENTRY+0xbb>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_Dealloc
// b6: 4c 89 e7                      movq    %r12, %rdi
// b9: ff d0                         callq   *%rax
// bb: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c1:  R_X86_64_64  _JIT_OPARG
// c9: f7 d0                         notl    %eax
// cb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// d0: 48 98                         cltq
// d2: 48 8b 3c c3                   movq    (%rbx,%rax,8), %rdi
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  PySet_Add
// e0: 4c 89 e6                      movq    %r12, %rsi
// e3: ff d0                         callq   *%rax
// e5: 89 c5                         movl    %eax, %ebp
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 48 85 c0                      testq   %rax, %rax
// ee: 7e 0a                         jle     0xfa <_JIT_ENTRY+0xfa>
// f0: 4c 8d 6b f8                   leaq    -0x8(%rbx), %r13
// f4: 85 c0                         testl   %eax, %eax
// f6: 79 2c                         jns     0x124 <_JIT_ENTRY+0x124>
// f8: eb 3c                         jmp     0x136 <_JIT_ENTRY+0x136>
// fa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000fc:  R_X86_64_64  .rodata.str1.1
// 104: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000106:  R_X86_64_64  _Py_NegativeRefcount
// 10e: be 29 02 00 00                movl    $0x229, %esi            # imm = 0x229
// 113: 4c 89 e2                      movq    %r12, %rdx
// 116: ff d0                         callq   *%rax
// 118: 49 8b 04 24                   movq    (%r12), %rax
// 11c: 4c 8d 6b f8                   leaq    -0x8(%rbx), %r13
// 120: 85 c0                         testl   %eax, %eax
// 122: 78 12                         js      0x136 <_JIT_ENTRY+0x136>
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 12e: ff d0                         callq   *%rax
// 130: 49 ff 0c 24                   decq    (%r12)
// 134: 74 2c                         je      0x162 <_JIT_ENTRY+0x162>
// 136: 85 ed                         testl   %ebp, %ebp
// 138: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 13c: 74 3b                         je      0x179 <_JIT_ENTRY+0x179>
// 13e: 48 83 c3 f8                   addq    $-0x8, %rbx
// 142: 4c 29 f3                      subq    %r14, %rbx
// 145: 48 83 c3 b8                   addq    $-0x48, %rbx
// 149: 48 c1 eb 03                   shrq    $0x3, %rbx
// 14d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 151: 31 c0                         xorl    %eax, %eax
// 153: 48 83 c4 08                   addq    $0x8, %rsp
// 157: 5b                            popq    %rbx
// 158: 41 5c                         popq    %r12
// 15a: 41 5d                         popq    %r13
// 15c: 41 5e                         popq    %r14
// 15e: 41 5f                         popq    %r15
// 160: 5d                            popq    %rbp
// 161: c3                            retq
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_Dealloc
// 16c: 4c 89 e7                      movq    %r12, %rdi
// 16f: ff d0                         callq   *%rax
// 171: 85 ed                         testl   %ebp, %ebp
// 173: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 177: 75 c5                         jne     0x13e <_JIT_ENTRY+0x13e>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _JIT_CONTINUE
// 183: 4c 89 f7                      movq    %r14, %rdi
// 186: 48 89 de                      movq    %rbx, %rsi
// 189: 4c 89 fa                      movq    %r15, %rdx
// 18c: 48 83 c4 08                   addq    $0x8, %rsp
// 190: 5b                            popq    %rbx
// 191: 41 5c                         popq    %r12
// 193: 41 5d                         popq    %r13
// 195: 41 5e                         popq    %r14
// 197: 41 5f                         popq    %r15
// 199: 5d                            popq    %rbp
// 19a: ff e0                         jmpq    *%rax
// 19c: 
static const unsigned char _DELETE_DEREFplus_SET_ADD_code_body[413] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x21, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x34, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x56, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xce, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x48, 0x8b, 0x3c, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x4c, 0x8d, 0x6b, 0xf8, 0x85, 0xc0, 0x79, 0x2c, 0xeb, 0x3c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x29, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x6b, 0xf8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2c, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x74, 0x3b, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x75, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_SET_ADD_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PySet_Add, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_SET_ADD_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_SET_ADD_data_holes[1];

// _DELETE_DEREFplus_SET_FUNCTION_ATTRIBUTE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_SET_FUNCTION_ATTRIBUTE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 1a                         je      0x46 <_JIT_ENTRY+0x46>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 45                         jle     0x82 <_JIT_ENTRY+0x82>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 67                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 41: e9 83 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 4c 29 f3                      subq    %r14, %rbx
// 68: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 70: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 74: 31 c0                         xorl    %eax, %eax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 21                         js      0xc9 <_JIT_ENTRY+0xc9>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 75 0f                         jne     0xc9 <_JIT_ENTRY+0xc9>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_Dealloc
// c4: 4c 89 e7                      movq    %r12, %rdi
// c7: ff d0                         callq   *%rax
// c9: 48 8b 4b f0                   movq    -0x10(%rbx), %rcx
// cd: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// d1: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000d3:  R_X86_64_64  _JIT_OPARG
// db: 0f b7 d2                      movzwl  %dx, %edx
// de: 83 fa 03                      cmpl    $0x3, %edx
// e1: 7f 10                         jg      0xf3 <_JIT_ENTRY+0xf3>
// e3: 83 fa 01                      cmpl    $0x1, %edx
// e6: 74 1b                         je      0x103 <_JIT_ENTRY+0x103>
// e8: 83 fa 02                      cmpl    $0x2, %edx
// eb: 75 4b                         jne     0x138 <_JIT_ENTRY+0x138>
// ed: 48 8d 50 40                   leaq    0x40(%rax), %rdx
// f1: eb 1a                         jmp     0x10d <_JIT_ENTRY+0x10d>
// f3: 83 fa 04                      cmpl    $0x4, %edx
// f6: 74 11                         je      0x109 <_JIT_ENTRY+0x109>
// f8: 83 fa 08                      cmpl    $0x8, %edx
// fb: 75 3b                         jne     0x138 <_JIT_ENTRY+0x138>
// fd: 48 8d 50 48                   leaq    0x48(%rax), %rdx
// 101: eb 0a                         jmp     0x10d <_JIT_ENTRY+0x10d>
// 103: 48 8d 50 38                   leaq    0x38(%rax), %rdx
// 107: eb 04                         jmp     0x10d <_JIT_ENTRY+0x10d>
// 109: 48 8d 50 70                   leaq    0x70(%rax), %rdx
// 10d: 48 89 0a                      movq    %rcx, (%rdx)
// 110: 48 89 43 f0                   movq    %rax, -0x10(%rbx)
// 114: 48 83 c3 f8                   addq    $-0x8, %rbx
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _JIT_CONTINUE
// 122: 4c 89 f7                      movq    %r14, %rdi
// 125: 48 89 de                      movq    %rbx, %rsi
// 128: 4c 89 fa                      movq    %r15, %rdx
// 12b: 48 83 c4 08                   addq    $0x8, %rsp
// 12f: 5b                            popq    %rbx
// 130: 41 5c                         popq    %r12
// 132: 41 5e                         popq    %r14
// 134: 41 5f                         popq    %r15
// 136: ff e0                         jmpq    *%rax
// 138: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013a:  R_X86_64_64  .rodata.str1.1+0x39
// 142: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 0000000000000144:  R_X86_64_64  .rodata.str1.1+0x44
// 14c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014e:  R_X86_64_64  _Py_FatalErrorFunc
// 156: ff d0                         callq   *%rax
// 158: 
static const unsigned char _DELETE_DEREFplus_SET_FUNCTION_ATTRIBUTE_code_body[345] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x4b, 0xf0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x83, 0xfa, 0x03, 0x7f, 0x10, 0x83, 0xfa, 0x01, 0x74, 0x1b, 0x83, 0xfa, 0x02, 0x75, 0x4b, 0x48, 0x8d, 0x50, 0x40, 0xeb, 0x1a, 0x83, 0xfa, 0x04, 0x74, 0x11, 0x83, 0xfa, 0x08, 0x75, 0x3b, 0x48, 0x8d, 0x50, 0x48, 0xeb, 0x0a, 0x48, 0x8d, 0x50, 0x38, 0xeb, 0x04, 0x48, 0x8d, 0x50, 0x70, 0x48, 0x89, 0x0a, 0x48, 0x89, 0x43, 0xf0, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0};
static const Hole _DELETE_DEREFplus_SET_FUNCTION_ATTRIBUTE_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x13a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x144, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x44},
    {0x14e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FatalErrorFunc, 0x0},
};
// 0: "/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00_JIT_ENTRY\x00We've reached an unreachable state. Anything is possible.\nThe limits were in our heads all along. Follow your dreams.\nhttps://xkcd.com/2200\x00"
// d0: 
static const unsigned char _DELETE_DEREFplus_SET_FUNCTION_ATTRIBUTE_data_body[209] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x00, 0x57, 0x65, 0x27, 0x76, 0x65, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x41, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x2e, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x75, 0x72, 0x20, 0x68, 0x65, 0x61, 0x64, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x2e, 0x20, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x78, 0x6b, 0x63, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x32, 0x32, 0x30, 0x30, 0x00};
static const Hole _DELETE_DEREFplus_SET_FUNCTION_ATTRIBUTE_data_holes[1];

// _DELETE_DEREFplus_SET_IP
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_SET_IP.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 1a                         je      0x46 <_JIT_ENTRY+0x46>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 45                         jle     0x82 <_JIT_ENTRY+0x82>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 67                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 41: e9 83 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 4c 29 f3                      subq    %r14, %rbx
// 68: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 70: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 74: 31 c0                         xorl    %eax, %eax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 21                         js      0xc9 <_JIT_ENTRY+0xc9>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 75 0f                         jne     0xc9 <_JIT_ENTRY+0xc9>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_Dealloc
// c4: 4c 89 e7                      movq    %r12, %rdi
// c7: ff d0                         callq   *%rax
// c9: 49 8b 06                      movq    (%r14), %rax
// cc: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ce:  R_X86_64_64  _JIT_OPARG
// d6: 0f b7 c9                      movzwl  %cx, %ecx
// d9: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// dd: 48 05 c8 00 00 00             addq    $0xc8, %rax
// e3: 49 89 46 38                   movq    %rax, 0x38(%r14)
// e7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e9:  R_X86_64_64  _JIT_CONTINUE
// f1: 4c 89 f7                      movq    %r14, %rdi
// f4: 48 89 de                      movq    %rbx, %rsi
// f7: 4c 89 fa                      movq    %r15, %rdx
// fa: 48 83 c4 08                   addq    $0x8, %rsp
// fe: 5b                            popq    %rbx
// ff: 41 5c                         popq    %r12
// 101: 41 5e                         popq    %r14
// 103: 41 5f                         popq    %r15
// 105: ff e0                         jmpq    *%rax
// 107: 
static const unsigned char _DELETE_DEREFplus_SET_IP_code_body[264] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x46, 0x38, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_SET_IP_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xce, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xe9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_SET_IP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_SET_IP_data_holes[1];

// _DELETE_DEREFplus_SET_UPDATE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_SET_UPDATE.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 21                         je      0x50 <_JIT_ENTRY+0x50>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 34                         jle     0x74 <_JIT_ENTRY+0x74>
// 40: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000042:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a: 85 c0                         testl   %eax, %eax
// 4c: 79 56                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 4e: eb 6b                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 50: 48 8b 33                      movq    (%rbx), %rsi
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _JIT_OPARG
// 5d: 0f b7 d0                      movzwl  %ax, %edx
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _PyEval_FormatExcUnbound
// 6a: 4c 89 ff                      movq    %r15, %rdi
// 6d: ff d0                         callq   *%rax
// 6f: e9 0b 01 00 00                jmp     0x17f <_JIT_ENTRY+0x17f>
// 74: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000076:  R_X86_64_64  .rodata.str1.1
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _Py_NegativeRefcount
// 88: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 49 8b 04 24                   movq    (%r12), %rax
// 96: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000098:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 17                         js      0xbb <_JIT_ENTRY+0xbb>
// a4: ff d1                         callq   *%rcx
// a6: 49 ff 0c 24                   decq    (%r12)
// aa: 75 0f                         jne     0xbb <_JIT_ENTRY+0xbb>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_Dealloc
// b6: 4c 89 e7                      movq    %r12, %rdi
// b9: ff d0                         callq   *%rax
// bb: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c1:  R_X86_64_64  _JIT_OPARG
// c9: f7 d0                         notl    %eax
// cb: 0d 00 00 ff ff                orl     $0xffff0000, %eax       # imm = 0xFFFF0000
// d0: 48 98                         cltq
// d2: 49 8b 3c c6                   movq    (%r14,%rax,8), %rdi
// d6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d8:  R_X86_64_64  _PySet_Update
// e0: 4c 89 e6                      movq    %r12, %rsi
// e3: ff d0                         callq   *%rax
// e5: 89 c5                         movl    %eax, %ebp
// e7: 49 8b 04 24                   movq    (%r12), %rax
// eb: 48 85 c0                      testq   %rax, %rax
// ee: 7e 0a                         jle     0xfa <_JIT_ENTRY+0xfa>
// f0: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// f4: 85 c0                         testl   %eax, %eax
// f6: 79 2c                         jns     0x124 <_JIT_ENTRY+0x124>
// f8: eb 3c                         jmp     0x136 <_JIT_ENTRY+0x136>
// fa: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000fc:  R_X86_64_64  .rodata.str1.1
// 104: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000106:  R_X86_64_64  _Py_NegativeRefcount
// 10e: be 53 05 00 00                movl    $0x553, %esi            # imm = 0x553
// 113: 4c 89 e2                      movq    %r12, %rdx
// 116: ff d0                         callq   *%rax
// 118: 49 8b 04 24                   movq    (%r12), %rax
// 11c: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 120: 85 c0                         testl   %eax, %eax
// 122: 78 12                         js      0x136 <_JIT_ENTRY+0x136>
// 124: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000126:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 12e: ff d0                         callq   *%rax
// 130: 49 ff 0c 24                   decq    (%r12)
// 134: 74 2b                         je      0x161 <_JIT_ENTRY+0x161>
// 136: 85 ed                         testl   %ebp, %ebp
// 138: 4d 0f 48 ee                   cmovsq  %r14, %r13
// 13c: 78 3a                         js      0x178 <_JIT_ENTRY+0x178>
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _JIT_CONTINUE
// 148: 48 89 df                      movq    %rbx, %rdi
// 14b: 4c 89 ee                      movq    %r13, %rsi
// 14e: 4c 89 fa                      movq    %r15, %rdx
// 151: 48 83 c4 08                   addq    $0x8, %rsp
// 155: 5b                            popq    %rbx
// 156: 41 5c                         popq    %r12
// 158: 41 5d                         popq    %r13
// 15a: 41 5e                         popq    %r14
// 15c: 41 5f                         popq    %r15
// 15e: 5d                            popq    %rbp
// 15f: ff e0                         jmpq    *%rax
// 161: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000163:  R_X86_64_64  _Py_Dealloc
// 16b: 4c 89 e7                      movq    %r12, %rdi
// 16e: ff d0                         callq   *%rax
// 170: 85 ed                         testl   %ebp, %ebp
// 172: 4d 0f 48 ee                   cmovsq  %r14, %r13
// 176: 79 c6                         jns     0x13e <_JIT_ENTRY+0x13e>
// 178: 49 83 c5 f8                   addq    $-0x8, %r13
// 17c: 4d 89 ee                      movq    %r13, %r14
// 17f: 49 29 de                      subq    %rbx, %r14
// 182: 49 83 c6 b8                   addq    $-0x48, %r14
// 186: 49 c1 ee 03                   shrq    $0x3, %r14
// 18a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 18e: 31 c0                         xorl    %eax, %eax
// 190: 48 83 c4 08                   addq    $0x8, %rsp
// 194: 5b                            popq    %rbx
// 195: 41 5c                         popq    %r12
// 197: 41 5d                         popq    %r13
// 199: 41 5e                         popq    %r14
// 19b: 41 5f                         popq    %r15
// 19d: 5d                            popq    %rbp
// 19e: c3                            retq
// 19f: 
static const unsigned char _DELETE_DEREFplus_SET_UPDATE_code_body[416] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x21, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x34, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x56, 0xeb, 0x6b, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x0b, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xd0, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x98, 0x49, 0x8b, 0x3c, 0xc6, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x4d, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x79, 0x2c, 0xeb, 0x3c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x53, 0x05, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8d, 0x6e, 0xf8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2b, 0x85, 0xed, 0x4d, 0x0f, 0x48, 0xee, 0x78, 0x3a, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xee, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x4d, 0x0f, 0x48, 0xee, 0x79, 0xc6, 0x49, 0x83, 0xc5, 0xf8, 0x4d, 0x89, 0xee, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_SET_UPDATE_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PySet_Update, 0x0},
    {0xfc, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x106, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x126, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x163, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_SET_UPDATE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_SET_UPDATE_data_holes[1];

// _DELETE_DEREFplus_STORE_ATTR
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_STORE_ATTR.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 2a                         jle     0x6a <_JIT_ENTRY+0x6a>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 4c                         jns     0x90 <_JIT_ENTRY+0x90>
// 44: eb 6b                         jmp     0xb1 <_JIT_ENTRY+0xb1>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: e9 36 01 00 00                jmp     0x1a0 <_JIT_ENTRY+0x1a0>
// 6a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006c:  R_X86_64_64  .rodata.str1.1
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _Py_NegativeRefcount
// 7e: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 83: 4c 89 e2                      movq    %r12, %rdx
// 86: ff d0                         callq   *%rax
// 88: 49 8b 04 24                   movq    (%r12), %rax
// 8c: 85 c0                         testl   %eax, %eax
// 8e: 78 21                         js      0xb1 <_JIT_ENTRY+0xb1>
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9a: ff d0                         callq   *%rax
// 9c: 49 ff 0c 24                   decq    (%r12)
// a0: 75 0f                         jne     0xb1 <_JIT_ENTRY+0xb1>
// a2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a4:  R_X86_64_64  _Py_Dealloc
// ac: 4c 89 e7                      movq    %r12, %rdi
// af: ff d0                         callq   *%rax
// b1: 4c 8b 6b f0                   movq    -0x10(%rbx), %r13
// b5: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// b9: 49 8b 06                      movq    (%r14), %rax
// bc: 48 8b 40 20                   movq    0x20(%rax), %rax
// c0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c2:  R_X86_64_64  _JIT_OPARG
// ca: 0f b7 c9                      movzwl  %cx, %ecx
// cd: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d4:  R_X86_64_64  PyObject_SetAttr
// dc: 4c 89 e7                      movq    %r12, %rdi
// df: 4c 89 ea                      movq    %r13, %rdx
// e2: ff d0                         callq   *%rax
// e4: 89 c5                         movl    %eax, %ebp
// e6: 49 8b 45 00                   movq    (%r13), %rax
// ea: 48 85 c0                      testq   %rax, %rax
// ed: 7e 06                         jle     0xf5 <_JIT_ENTRY+0xf5>
// ef: 85 c0                         testl   %eax, %eax
// f1: 79 28                         jns     0x11b <_JIT_ENTRY+0x11b>
// f3: eb 38                         jmp     0x12d <_JIT_ENTRY+0x12d>
// f5: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f7:  R_X86_64_64  .rodata.str1.1
// ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000101:  R_X86_64_64  _Py_NegativeRefcount
// 109: be c5 03 00 00                movl    $0x3c5, %esi            # imm = 0x3C5
// 10e: 4c 89 ea                      movq    %r13, %rdx
// 111: ff d0                         callq   *%rax
// 113: 49 8b 45 00                   movq    (%r13), %rax
// 117: 85 c0                         testl   %eax, %eax
// 119: 78 12                         js      0x12d <_JIT_ENTRY+0x12d>
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 125: ff d0                         callq   *%rax
// 127: 49 ff 4d 00                   decq    (%r13)
// 12b: 74 13                         je      0x140 <_JIT_ENTRY+0x140>
// 12d: 49 8b 04 24                   movq    (%r12), %rax
// 131: 48 85 c0                      testq   %rax, %rax
// 134: 7e 22                         jle     0x158 <_JIT_ENTRY+0x158>
// 136: 4c 8d 6b f0                   leaq    -0x10(%rbx), %r13
// 13a: 85 c0                         testl   %eax, %eax
// 13c: 79 44                         jns     0x182 <_JIT_ENTRY+0x182>
// 13e: eb 54                         jmp     0x194 <_JIT_ENTRY+0x194>
// 140: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000142:  R_X86_64_64  _Py_Dealloc
// 14a: 4c 89 ef                      movq    %r13, %rdi
// 14d: ff d0                         callq   *%rax
// 14f: 49 8b 04 24                   movq    (%r12), %rax
// 153: 48 85 c0                      testq   %rax, %rax
// 156: 7f de                         jg      0x136 <_JIT_ENTRY+0x136>
// 158: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015a:  R_X86_64_64  .rodata.str1.1
// 162: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000164:  R_X86_64_64  _Py_NegativeRefcount
// 16c: be c6 03 00 00                movl    $0x3c6, %esi            # imm = 0x3C6
// 171: 4c 89 e2                      movq    %r12, %rdx
// 174: ff d0                         callq   *%rax
// 176: 49 8b 04 24                   movq    (%r12), %rax
// 17a: 4c 8d 6b f0                   leaq    -0x10(%rbx), %r13
// 17e: 85 c0                         testl   %eax, %eax
// 180: 78 12                         js      0x194 <_JIT_ENTRY+0x194>
// 182: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000184:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18c: ff d0                         callq   *%rax
// 18e: 49 ff 0c 24                   decq    (%r12)
// 192: 74 2c                         je      0x1c0 <_JIT_ENTRY+0x1c0>
// 194: 85 ed                         testl   %ebp, %ebp
// 196: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 19a: 74 3b                         je      0x1d7 <_JIT_ENTRY+0x1d7>
// 19c: 48 83 c3 f0                   addq    $-0x10, %rbx
// 1a0: 4c 29 f3                      subq    %r14, %rbx
// 1a3: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1a7: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1ab: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1af: 31 c0                         xorl    %eax, %eax
// 1b1: 48 83 c4 08                   addq    $0x8, %rsp
// 1b5: 5b                            popq    %rbx
// 1b6: 41 5c                         popq    %r12
// 1b8: 41 5d                         popq    %r13
// 1ba: 41 5e                         popq    %r14
// 1bc: 41 5f                         popq    %r15
// 1be: 5d                            popq    %rbp
// 1bf: c3                            retq
// 1c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c2:  R_X86_64_64  _Py_Dealloc
// 1ca: 4c 89 e7                      movq    %r12, %rdi
// 1cd: ff d0                         callq   *%rax
// 1cf: 85 ed                         testl   %ebp, %ebp
// 1d1: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 1d5: 75 c5                         jne     0x19c <_JIT_ENTRY+0x19c>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _JIT_CONTINUE
// 1e1: 4c 89 f7                      movq    %r14, %rdi
// 1e4: 48 89 de                      movq    %rbx, %rsi
// 1e7: 4c 89 fa                      movq    %r15, %rdx
// 1ea: 48 83 c4 08                   addq    $0x8, %rsp
// 1ee: 5b                            popq    %rbx
// 1ef: 41 5c                         popq    %r12
// 1f1: 41 5d                         popq    %r13
// 1f3: 41 5e                         popq    %r14
// 1f5: 41 5f                         popq    %r15
// 1f7: 5d                            popq    %rbp
// 1f8: ff e0                         jmpq    *%rax
// 1fa: 
static const unsigned char _DELETE_DEREFplus_STORE_ATTR_code_body[507] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x36, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x6b, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x06, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc5, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x6b, 0xf0, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc6, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x6b, 0xf0, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2c, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x74, 0x3b, 0x48, 0x83, 0xc3, 0xf0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x75, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_STORE_ATTR_code_holes[19] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa4, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetAttr, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x164, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_STORE_ATTR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_STORE_ATTR_data_holes[1];

// _DELETE_DEREFplus_STORE_ATTR_INSTANCE_VALUE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_STORE_ATTR_INSTANCE_VALUE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 28: 4d 85 e4                      testq   %r12, %r12
// 2b: 74 1a                         je      0x47 <_JIT_ENTRY+0x47>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 43                         jle     0x81 <_JIT_ENTRY+0x81>
// 3e: 85 c0                         testl   %eax, %eax
// 40: 79 65                         jns     0xa7 <_JIT_ENTRY+0xa7>
// 42: e9 81 00 00 00                jmp     0xc8 <_JIT_ENTRY+0xc8>
// 47: 49 8b 36                      movq    (%r14), %rsi
// 4a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004c:  R_X86_64_64  _JIT_OPARG
// 54: 0f b7 d0                      movzwl  %ax, %edx
// 57: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000059:  R_X86_64_64  _PyEval_FormatExcUnbound
// 61: 4c 89 ff                      movq    %r15, %rdi
// 64: ff d0                         callq   *%rax
// 66: 4c 29 f3                      subq    %r14, %rbx
// 69: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 71: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 75: 31 c0                         xorl    %eax, %eax
// 77: 5b                            popq    %rbx
// 78: 41 5c                         popq    %r12
// 7a: 41 5d                         popq    %r13
// 7c: 41 5e                         popq    %r14
// 7e: 41 5f                         popq    %r15
// 80: c3                            retq
// 81: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000083:  R_X86_64_64  .rodata.str1.1
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_NegativeRefcount
// 95: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9a: 4c 89 e2                      movq    %r12, %rdx
// 9d: ff d0                         callq   *%rax
// 9f: 49 8b 04 24                   movq    (%r12), %rax
// a3: 85 c0                         testl   %eax, %eax
// a5: 78 21                         js      0xc8 <_JIT_ENTRY+0xc8>
// a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b1: ff d0                         callq   *%rax
// b3: 49 ff 0c 24                   decq    (%r12)
// b7: 75 0f                         jne     0xc8 <_JIT_ENTRY+0xc8>
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  _Py_Dealloc
// c3: 4c 89 e7                      movq    %r12, %rdi
// c6: ff d0                         callq   *%rax
// c8: 48 8b 4b f0                   movq    -0x10(%rbx), %rcx
// cc: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// d0: 49 8b 44 24 e8                movq    -0x18(%r12), %rax
// d5: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 00000000000000d7:  R_X86_64_64  _JIT_OPERAND
// df: 0f b7 d2                      movzwl  %dx, %edx
// e2: 4c 8b 6c d0 01                movq    0x1(%rax,%rdx,8), %r13
// e7: 48 89 4c d0 01                movq    %rcx, 0x1(%rax,%rdx,8)
// ec: 4d 85 ed                      testq   %r13, %r13
// ef: 74 0f                         je      0x100 <_JIT_ENTRY+0x100>
// f1: 49 8b 45 00                   movq    (%r13), %rax
// f5: 48 85 c0                      testq   %rax, %rax
// f8: 7e 2d                         jle     0x127 <_JIT_ENTRY+0x127>
// fa: 85 c0                         testl   %eax, %eax
// fc: 79 4f                         jns     0x14d <_JIT_ENTRY+0x14d>
// fe: eb 5f                         jmp     0x15f <_JIT_ENTRY+0x15f>
// 100: 0f b6 48 ff                   movzbl  -0x1(%rax), %ecx
// 104: 8d 51 01                      leal    0x1(%rcx), %edx
// 107: 48 f7 d1                      notq    %rcx
// 10a: 48 be 00 00 00 00 00 00 00 00 movabsq $0x0, %rsi
// 000000000000010c:  R_X86_64_64  _JIT_OPERAND
// 114: 40 88 74 08 ff                movb    %sil, -0x1(%rax,%rcx)
// 119: 88 50 ff                      movb    %dl, -0x1(%rax)
// 11c: 49 8b 04 24                   movq    (%r12), %rax
// 120: 48 85 c0                      testq   %rax, %rax
// 123: 7f 43                         jg      0x168 <_JIT_ENTRY+0x168>
// 125: eb 63                         jmp     0x18a <_JIT_ENTRY+0x18a>
// 127: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000129:  R_X86_64_64  .rodata.str1.1
// 131: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000133:  R_X86_64_64  _Py_NegativeRefcount
// 13b: be 16 07 00 00                movl    $0x716, %esi            # imm = 0x716
// 140: 4c 89 ea                      movq    %r13, %rdx
// 143: ff d0                         callq   *%rax
// 145: 49 8b 45 00                   movq    (%r13), %rax
// 149: 85 c0                         testl   %eax, %eax
// 14b: 78 12                         js      0x15f <_JIT_ENTRY+0x15f>
// 14d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 157: ff d0                         callq   *%rax
// 159: 49 ff 4d 00                   decq    (%r13)
// 15d: 74 13                         je      0x172 <_JIT_ENTRY+0x172>
// 15f: 49 8b 04 24                   movq    (%r12), %rax
// 163: 48 85 c0                      testq   %rax, %rax
// 166: 7e 22                         jle     0x18a <_JIT_ENTRY+0x18a>
// 168: 48 83 c3 f0                   addq    $-0x10, %rbx
// 16c: 85 c0                         testl   %eax, %eax
// 16e: 79 44                         jns     0x1b4 <_JIT_ENTRY+0x1b4>
// 170: eb 63                         jmp     0x1d5 <_JIT_ENTRY+0x1d5>
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_Dealloc
// 17c: 4c 89 ef                      movq    %r13, %rdi
// 17f: ff d0                         callq   *%rax
// 181: 49 8b 04 24                   movq    (%r12), %rax
// 185: 48 85 c0                      testq   %rax, %rax
// 188: 7f de                         jg      0x168 <_JIT_ENTRY+0x168>
// 18a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000018c:  R_X86_64_64  .rodata.str1.1
// 194: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000196:  R_X86_64_64  _Py_NegativeRefcount
// 19e: be 18 07 00 00                movl    $0x718, %esi            # imm = 0x718
// 1a3: 4c 89 e2                      movq    %r12, %rdx
// 1a6: ff d0                         callq   *%rax
// 1a8: 49 8b 04 24                   movq    (%r12), %rax
// 1ac: 48 83 c3 f0                   addq    $-0x10, %rbx
// 1b0: 85 c0                         testl   %eax, %eax
// 1b2: 78 21                         js      0x1d5 <_JIT_ENTRY+0x1d5>
// 1b4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1be: ff d0                         callq   *%rax
// 1c0: 49 ff 0c 24                   decq    (%r12)
// 1c4: 75 0f                         jne     0x1d5 <_JIT_ENTRY+0x1d5>
// 1c6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c8:  R_X86_64_64  _Py_Dealloc
// 1d0: 4c 89 e7                      movq    %r12, %rdi
// 1d3: ff d0                         callq   *%rax
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _JIT_CONTINUE
// 1df: 4c 89 f7                      movq    %r14, %rdi
// 1e2: 48 89 de                      movq    %rbx, %rsi
// 1e5: 4c 89 fa                      movq    %r15, %rdx
// 1e8: 5b                            popq    %rbx
// 1e9: 41 5c                         popq    %r12
// 1eb: 41 5d                         popq    %r13
// 1ed: 41 5e                         popq    %r14
// 1ef: 41 5f                         popq    %r15
// 1f1: ff e0                         jmpq    *%rax
// 1f3: 
static const unsigned char _DELETE_DEREFplus_STORE_ATTR_INSTANCE_VALUE_code_body[500] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x43, 0x85, 0xc0, 0x79, 0x65, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x4b, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0xe8, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd2, 0x4c, 0x8b, 0x6c, 0xd0, 0x01, 0x48, 0x89, 0x4c, 0xd0, 0x01, 0x4d, 0x85, 0xed, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x2d, 0x85, 0xc0, 0x79, 0x4f, 0xeb, 0x5f, 0x0f, 0xb6, 0x48, 0xff, 0x8d, 0x51, 0x01, 0x48, 0xf7, 0xd1, 0x48, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x88, 0x74, 0x08, 0xff, 0x88, 0x50, 0xff, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x43, 0xeb, 0x63, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x16, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x48, 0x83, 0xc3, 0xf0, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x18, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_STORE_ATTR_INSTANCE_VALUE_code_holes[19] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x133, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x14f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x196, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1b6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1c8, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_STORE_ATTR_INSTANCE_VALUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_STORE_ATTR_INSTANCE_VALUE_data_holes[1];

// _DELETE_DEREFplus_STORE_ATTR_SLOT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_STORE_ATTR_SLOT.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 28: 4d 85 e4                      testq   %r12, %r12
// 2b: 74 1a                         je      0x47 <_JIT_ENTRY+0x47>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 43                         jle     0x81 <_JIT_ENTRY+0x81>
// 3e: 85 c0                         testl   %eax, %eax
// 40: 79 65                         jns     0xa7 <_JIT_ENTRY+0xa7>
// 42: e9 81 00 00 00                jmp     0xc8 <_JIT_ENTRY+0xc8>
// 47: 49 8b 36                      movq    (%r14), %rsi
// 4a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004c:  R_X86_64_64  _JIT_OPARG
// 54: 0f b7 d0                      movzwl  %ax, %edx
// 57: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000059:  R_X86_64_64  _PyEval_FormatExcUnbound
// 61: 4c 89 ff                      movq    %r15, %rdi
// 64: ff d0                         callq   *%rax
// 66: 4c 29 f3                      subq    %r14, %rbx
// 69: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6d: 48 c1 eb 03                   shrq    $0x3, %rbx
// 71: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 75: 31 c0                         xorl    %eax, %eax
// 77: 5b                            popq    %rbx
// 78: 41 5c                         popq    %r12
// 7a: 41 5d                         popq    %r13
// 7c: 41 5e                         popq    %r14
// 7e: 41 5f                         popq    %r15
// 80: c3                            retq
// 81: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000083:  R_X86_64_64  .rodata.str1.1
// 8b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008d:  R_X86_64_64  _Py_NegativeRefcount
// 95: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9a: 4c 89 e2                      movq    %r12, %rdx
// 9d: ff d0                         callq   *%rax
// 9f: 49 8b 04 24                   movq    (%r12), %rax
// a3: 85 c0                         testl   %eax, %eax
// a5: 78 21                         js      0xc8 <_JIT_ENTRY+0xc8>
// a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a9:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b1: ff d0                         callq   *%rax
// b3: 49 ff 0c 24                   decq    (%r12)
// b7: 75 0f                         jne     0xc8 <_JIT_ENTRY+0xc8>
// b9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bb:  R_X86_64_64  _Py_Dealloc
// c3: 4c 89 e7                      movq    %r12, %rdi
// c6: ff d0                         callq   *%rax
// c8: 48 8b 43 f0                   movq    -0x10(%rbx), %rax
// cc: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// d0: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d2:  R_X86_64_64  _JIT_OPERAND
// da: 0f b7 c9                      movzwl  %cx, %ecx
// dd: 4d 8b 2c 0c                   movq    (%r12,%rcx), %r13
// e1: 49 89 04 0c                   movq    %rax, (%r12,%rcx)
// e5: 4d 85 ed                      testq   %r13, %r13
// e8: 74 47                         je      0x131 <_JIT_ENTRY+0x131>
// ea: 49 8b 45 00                   movq    (%r13), %rax
// ee: 48 85 c0                      testq   %rax, %rax
// f1: 7e 06                         jle     0xf9 <_JIT_ENTRY+0xf9>
// f3: 85 c0                         testl   %eax, %eax
// f5: 79 28                         jns     0x11f <_JIT_ENTRY+0x11f>
// f7: eb 38                         jmp     0x131 <_JIT_ENTRY+0x131>
// f9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000fb:  R_X86_64_64  .rodata.str1.1+0x39
// 103: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000105:  R_X86_64_64  _Py_NegativeRefcount
// 10d: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 112: 4c 89 ea                      movq    %r13, %rdx
// 115: ff d0                         callq   *%rax
// 117: 49 8b 45 00                   movq    (%r13), %rax
// 11b: 85 c0                         testl   %eax, %eax
// 11d: 78 12                         js      0x131 <_JIT_ENTRY+0x131>
// 11f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000121:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 129: ff d0                         callq   *%rax
// 12b: 49 ff 4d 00                   decq    (%r13)
// 12f: 74 13                         je      0x144 <_JIT_ENTRY+0x144>
// 131: 49 8b 04 24                   movq    (%r12), %rax
// 135: 48 85 c0                      testq   %rax, %rax
// 138: 7e 22                         jle     0x15c <_JIT_ENTRY+0x15c>
// 13a: 48 83 c3 f0                   addq    $-0x10, %rbx
// 13e: 85 c0                         testl   %eax, %eax
// 140: 79 44                         jns     0x186 <_JIT_ENTRY+0x186>
// 142: eb 63                         jmp     0x1a7 <_JIT_ENTRY+0x1a7>
// 144: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000146:  R_X86_64_64  _Py_Dealloc
// 14e: 4c 89 ef                      movq    %r13, %rdi
// 151: ff d0                         callq   *%rax
// 153: 49 8b 04 24                   movq    (%r12), %rax
// 157: 48 85 c0                      testq   %rax, %rax
// 15a: 7f de                         jg      0x13a <_JIT_ENTRY+0x13a>
// 15c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015e:  R_X86_64_64  .rodata.str1.1
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_NegativeRefcount
// 170: be 2a 07 00 00                movl    $0x72a, %esi            # imm = 0x72A
// 175: 4c 89 e2                      movq    %r12, %rdx
// 178: ff d0                         callq   *%rax
// 17a: 49 8b 04 24                   movq    (%r12), %rax
// 17e: 48 83 c3 f0                   addq    $-0x10, %rbx
// 182: 85 c0                         testl   %eax, %eax
// 184: 78 21                         js      0x1a7 <_JIT_ENTRY+0x1a7>
// 186: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000188:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 190: ff d0                         callq   *%rax
// 192: 49 ff 0c 24                   decq    (%r12)
// 196: 75 0f                         jne     0x1a7 <_JIT_ENTRY+0x1a7>
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  _Py_Dealloc
// 1a2: 4c 89 e7                      movq    %r12, %rdi
// 1a5: ff d0                         callq   *%rax
// 1a7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a9:  R_X86_64_64  _JIT_CONTINUE
// 1b1: 4c 89 f7                      movq    %r14, %rdi
// 1b4: 48 89 de                      movq    %rbx, %rsi
// 1b7: 4c 89 fa                      movq    %r15, %rdx
// 1ba: 5b                            popq    %rbx
// 1bb: 41 5c                         popq    %r12
// 1bd: 41 5d                         popq    %r13
// 1bf: 41 5e                         popq    %r14
// 1c1: 41 5f                         popq    %r15
// 1c3: ff e0                         jmpq    *%rax
// 1c5: 
static const unsigned char _DELETE_DEREFplus_STORE_ATTR_SLOT_code_body[454] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x43, 0x85, 0xc0, 0x79, 0x65, 0xe9, 0x81, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4d, 0x8b, 0x2c, 0x0c, 0x49, 0x89, 0x04, 0x0c, 0x4d, 0x85, 0xed, 0x74, 0x47, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x48, 0x83, 0xc3, 0xf0, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x63, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x2a, 0x07, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xf0, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_STORE_ATTR_SLOT_code_holes[18] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4c, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x59, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x83, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xfb, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x105, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x121, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x146, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x188, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a9, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_STORE_ATTR_SLOT_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_STORE_ATTR_SLOT_data_holes[1];

// _DELETE_DEREFplus_STORE_DEREF
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_STORE_DEREF.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 1a                         je      0x46 <_JIT_ENTRY+0x46>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 45                         jle     0x82 <_JIT_ENTRY+0x82>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 67                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 41: e9 83 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 4c 29 f3                      subq    %r14, %rbx
// 68: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 70: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 74: 31 c0                         xorl    %eax, %eax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 21                         js      0xc9 <_JIT_ENTRY+0xc9>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 75 0f                         jne     0xc9 <_JIT_ENTRY+0xc9>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_Dealloc
// c4: 4c 89 e7                      movq    %r12, %rdi
// c7: ff d0                         callq   *%rax
// c9: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// cd: 48 83 c3 f8                   addq    $-0x8, %rbx
// d1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d3:  R_X86_64_64  _JIT_OPARG
// db: 0f b7 c9                      movzwl  %cx, %ecx
// de: 49 8b 4c ce 48                movq    0x48(%r14,%rcx,8), %rcx
// e3: 4c 8b 61 10                   movq    0x10(%rcx), %r12
// e7: 48 89 41 10                   movq    %rax, 0x10(%rcx)
// eb: 4d 85 e4                      testq   %r12, %r12
// ee: 74 56                         je      0x146 <_JIT_ENTRY+0x146>
// f0: 49 8b 04 24                   movq    (%r12), %rax
// f4: 48 85 c0                      testq   %rax, %rax
// f7: 7e 06                         jle     0xff <_JIT_ENTRY+0xff>
// f9: 85 c0                         testl   %eax, %eax
// fb: 79 28                         jns     0x125 <_JIT_ENTRY+0x125>
// fd: eb 47                         jmp     0x146 <_JIT_ENTRY+0x146>
// ff: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000101:  R_X86_64_64  .rodata.str1.1+0x39
// 109: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010b:  R_X86_64_64  _Py_NegativeRefcount
// 113: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 118: 4c 89 e2                      movq    %r12, %rdx
// 11b: ff d0                         callq   *%rax
// 11d: 49 8b 04 24                   movq    (%r12), %rax
// 121: 85 c0                         testl   %eax, %eax
// 123: 78 21                         js      0x146 <_JIT_ENTRY+0x146>
// 125: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000127:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 12f: ff d0                         callq   *%rax
// 131: 49 ff 0c 24                   decq    (%r12)
// 135: 75 0f                         jne     0x146 <_JIT_ENTRY+0x146>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_Dealloc
// 141: 4c 89 e7                      movq    %r12, %rdi
// 144: ff d0                         callq   *%rax
// 146: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000148:  R_X86_64_64  _JIT_CONTINUE
// 150: 4c 89 f7                      movq    %r14, %rdi
// 153: 48 89 de                      movq    %rbx, %rsi
// 156: 4c 89 fa                      movq    %r15, %rdx
// 159: 48 83 c4 08                   addq    $0x8, %rsp
// 15d: 5b                            popq    %rbx
// 15e: 41 5c                         popq    %r12
// 160: 41 5e                         popq    %r14
// 162: 41 5f                         popq    %r15
// 164: ff e0                         jmpq    *%rax
// 166: 
static const unsigned char _DELETE_DEREFplus_STORE_DEREF_code_body[359] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x49, 0x8b, 0x4c, 0xce, 0x48, 0x4c, 0x8b, 0x61, 0x10, 0x48, 0x89, 0x41, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x56, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_STORE_DEREF_code_holes[14] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x101, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x10b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x127, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x148, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_STORE_DEREF_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_STORE_DEREF_data_holes[1];

// _DELETE_DEREFplus_STORE_FAST
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_STORE_FAST.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 1a                         je      0x46 <_JIT_ENTRY+0x46>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 45                         jle     0x82 <_JIT_ENTRY+0x82>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 67                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 41: e9 83 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 4c 29 f3                      subq    %r14, %rbx
// 68: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 70: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 74: 31 c0                         xorl    %eax, %eax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 21                         js      0xc9 <_JIT_ENTRY+0xc9>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 75 0f                         jne     0xc9 <_JIT_ENTRY+0xc9>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_Dealloc
// c4: 4c 89 e7                      movq    %r12, %rdi
// c7: ff d0                         callq   *%rax
// c9: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// cd: 48 83 c3 f8                   addq    $-0x8, %rbx
// d1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d3:  R_X86_64_64  _JIT_OPARG
// db: 0f b7 c9                      movzwl  %cx, %ecx
// de: 4d 8b 64 ce 48                movq    0x48(%r14,%rcx,8), %r12
// e3: 49 89 44 ce 48                movq    %rax, 0x48(%r14,%rcx,8)
// e8: 4d 85 e4                      testq   %r12, %r12
// eb: 74 56                         je      0x143 <_JIT_ENTRY+0x143>
// ed: 49 8b 04 24                   movq    (%r12), %rax
// f1: 48 85 c0                      testq   %rax, %rax
// f4: 7e 06                         jle     0xfc <_JIT_ENTRY+0xfc>
// f6: 85 c0                         testl   %eax, %eax
// f8: 79 28                         jns     0x122 <_JIT_ENTRY+0x122>
// fa: eb 47                         jmp     0x143 <_JIT_ENTRY+0x143>
// fc: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000fe:  R_X86_64_64  .rodata.str1.1+0x39
// 106: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000108:  R_X86_64_64  _Py_NegativeRefcount
// 110: be ff 03 00 00                movl    $0x3ff, %esi            # imm = 0x3FF
// 115: 4c 89 e2                      movq    %r12, %rdx
// 118: ff d0                         callq   *%rax
// 11a: 49 8b 04 24                   movq    (%r12), %rax
// 11e: 85 c0                         testl   %eax, %eax
// 120: 78 21                         js      0x143 <_JIT_ENTRY+0x143>
// 122: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000124:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 12c: ff d0                         callq   *%rax
// 12e: 49 ff 0c 24                   decq    (%r12)
// 132: 75 0f                         jne     0x143 <_JIT_ENTRY+0x143>
// 134: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000136:  R_X86_64_64  _Py_Dealloc
// 13e: 4c 89 e7                      movq    %r12, %rdi
// 141: ff d0                         callq   *%rax
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _JIT_CONTINUE
// 14d: 4c 89 f7                      movq    %r14, %rdi
// 150: 48 89 de                      movq    %rbx, %rsi
// 153: 4c 89 fa                      movq    %r15, %rdx
// 156: 48 83 c4 08                   addq    $0x8, %rsp
// 15a: 5b                            popq    %rbx
// 15b: 41 5c                         popq    %r12
// 15d: 41 5e                         popq    %r14
// 15f: 41 5f                         popq    %r15
// 161: ff e0                         jmpq    *%rax
// 163: 
static const unsigned char _DELETE_DEREFplus_STORE_FAST_code_body[356] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x4d, 0x8b, 0x64, 0xce, 0x48, 0x49, 0x89, 0x44, 0xce, 0x48, 0x4d, 0x85, 0xe4, 0x74, 0x56, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_STORE_FAST_code_holes[14] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xd3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xfe, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x108, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x124, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00/home/jglass/Documents/cpython/Include/object.h\x00'
// 69: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_STORE_FAST_data_body[113] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_STORE_FAST_data_holes[1];

// _DELETE_DEREFplus_STORE_GLOBAL
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_STORE_GLOBAL.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 21                         je      0x50 <_JIT_ENTRY+0x50>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 34                         jle     0x74 <_JIT_ENTRY+0x74>
// 40: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000042:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a: 85 c0                         testl   %eax, %eax
// 4c: 79 56                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 4e: eb 6b                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 50: 49 8b 36                      movq    (%r14), %rsi
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _JIT_OPARG
// 5d: 0f b7 d0                      movzwl  %ax, %edx
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _PyEval_FormatExcUnbound
// 6a: 4c 89 ff                      movq    %r15, %rdi
// 6d: ff d0                         callq   *%rax
// 6f: e9 d4 00 00 00                jmp     0x148 <_JIT_ENTRY+0x148>
// 74: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000076:  R_X86_64_64  .rodata.str1.1
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _Py_NegativeRefcount
// 88: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 49 8b 04 24                   movq    (%r12), %rax
// 96: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000098:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 17                         js      0xbb <_JIT_ENTRY+0xbb>
// a4: ff d1                         callq   *%rcx
// a6: 49 ff 0c 24                   decq    (%r12)
// aa: 75 0f                         jne     0xbb <_JIT_ENTRY+0xbb>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_Dealloc
// b6: 4c 89 e7                      movq    %r12, %rdi
// b9: ff d0                         callq   *%rax
// bb: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// bf: 49 8b 06                      movq    (%r14), %rax
// c2: 49 8b 7e 18                   movq    0x18(%r14), %rdi
// c6: 48 8b 40 20                   movq    0x20(%rax), %rax
// ca: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cc:  R_X86_64_64  _JIT_OPARG
// d4: 0f b7 c9                      movzwl  %cx, %ecx
// d7: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
// dc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000de:  R_X86_64_64  PyDict_SetItem
// e6: 4c 89 e2                      movq    %r12, %rdx
// e9: ff d0                         callq   *%rax
// eb: 89 c5                         movl    %eax, %ebp
// ed: 49 8b 04 24                   movq    (%r12), %rax
// f1: 48 85 c0                      testq   %rax, %rax
// f4: 7e 0a                         jle     0x100 <_JIT_ENTRY+0x100>
// f6: 4c 8d 6b f8                   leaq    -0x8(%rbx), %r13
// fa: 85 c0                         testl   %eax, %eax
// fc: 79 2c                         jns     0x12a <_JIT_ENTRY+0x12a>
// fe: eb 3c                         jmp     0x13c <_JIT_ENTRY+0x13c>
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_NegativeRefcount
// 114: be de 03 00 00                movl    $0x3de, %esi            # imm = 0x3DE
// 119: 4c 89 e2                      movq    %r12, %rdx
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 04 24                   movq    (%r12), %rax
// 122: 4c 8d 6b f8                   leaq    -0x8(%rbx), %r13
// 126: 85 c0                         testl   %eax, %eax
// 128: 78 12                         js      0x13c <_JIT_ENTRY+0x13c>
// 12a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012c:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 134: ff d0                         callq   *%rax
// 136: 49 ff 0c 24                   decq    (%r12)
// 13a: 74 2c                         je      0x168 <_JIT_ENTRY+0x168>
// 13c: 85 ed                         testl   %ebp, %ebp
// 13e: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 142: 74 3b                         je      0x17f <_JIT_ENTRY+0x17f>
// 144: 48 83 c3 f8                   addq    $-0x8, %rbx
// 148: 4c 29 f3                      subq    %r14, %rbx
// 14b: 48 83 c3 b8                   addq    $-0x48, %rbx
// 14f: 48 c1 eb 03                   shrq    $0x3, %rbx
// 153: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 157: 31 c0                         xorl    %eax, %eax
// 159: 48 83 c4 08                   addq    $0x8, %rsp
// 15d: 5b                            popq    %rbx
// 15e: 41 5c                         popq    %r12
// 160: 41 5d                         popq    %r13
// 162: 41 5e                         popq    %r14
// 164: 41 5f                         popq    %r15
// 166: 5d                            popq    %rbp
// 167: c3                            retq
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_Dealloc
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: ff d0                         callq   *%rax
// 177: 85 ed                         testl   %ebp, %ebp
// 179: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 17d: 75 c5                         jne     0x144 <_JIT_ENTRY+0x144>
// 17f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000181:  R_X86_64_64  _JIT_CONTINUE
// 189: 4c 89 f7                      movq    %r14, %rdi
// 18c: 48 89 de                      movq    %rbx, %rsi
// 18f: 4c 89 fa                      movq    %r15, %rdx
// 192: 48 83 c4 08                   addq    $0x8, %rsp
// 196: 5b                            popq    %rbx
// 197: 41 5c                         popq    %r12
// 199: 41 5d                         popq    %r13
// 19b: 41 5e                         popq    %r14
// 19d: 41 5f                         popq    %r15
// 19f: 5d                            popq    %rbp
// 1a0: ff e0                         jmpq    *%rax
// 1a2: 
static const unsigned char _DELETE_DEREFplus_STORE_GLOBAL_code_body[419] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x21, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x34, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x56, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xd4, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd1, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x06, 0x49, 0x8b, 0x7e, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x4c, 0x8d, 0x6b, 0xf8, 0x85, 0xc0, 0x79, 0x2c, 0xeb, 0x3c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xde, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x6b, 0xf8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2c, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x74, 0x3b, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x75, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_STORE_GLOBAL_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xcc, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xde, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x181, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_STORE_GLOBAL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_STORE_GLOBAL_data_holes[1];

// _DELETE_DEREFplus_STORE_NAME
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_STORE_NAME.o:        file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 54                         pushq   %r12
// 7: 53                            pushq   %rbx
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 2a                         jle     0x67 <_JIT_ENTRY+0x67>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 4c                         jns     0x8d <_JIT_ENTRY+0x8d>
// 41: eb 6b                         jmp     0xae <_JIT_ENTRY+0xae>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: e9 a8 01 00 00                jmp     0x20f <_JIT_ENTRY+0x20f>
// 67: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000069:  R_X86_64_64  .rodata.str1.1
// 71: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000073:  R_X86_64_64  _Py_NegativeRefcount
// 7b: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 80: 4c 89 e2                      movq    %r12, %rdx
// 83: ff d0                         callq   *%rax
// 85: 49 8b 04 24                   movq    (%r12), %rax
// 89: 85 c0                         testl   %eax, %eax
// 8b: 78 21                         js      0xae <_JIT_ENTRY+0xae>
// 8d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008f:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 97: ff d0                         callq   *%rax
// 99: 49 ff 0c 24                   decq    (%r12)
// 9d: 75 0f                         jne     0xae <_JIT_ENTRY+0xae>
// 9f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a1:  R_X86_64_64  _Py_Dealloc
// a9: 4c 89 e7                      movq    %r12, %rdi
// ac: ff d0                         callq   *%rax
// ae: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// b2: 48 83 c3 f8                   addq    $-0x8, %rbx
// b6: 49 8b 06                      movq    (%r14), %rax
// b9: 49 8b 7e 28                   movq    0x28(%r14), %rdi
// bd: 48 8b 40 20                   movq    0x20(%rax), %rax
// c1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000c3:  R_X86_64_64  _JIT_OPARG
// cb: 0f b7 c9                      movzwl  %cx, %ecx
// ce: 48 8b 4c c8 18                movq    0x18(%rax,%rcx,8), %rcx
// d3: 48 85 ff                      testq   %rdi, %rdi
// d6: 74 1c                         je      0xf4 <_JIT_ENTRY+0xf4>
// d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000da:  R_X86_64_64  PyDict_Type
// e2: 48 39 47 08                   cmpq    %rax, 0x8(%rdi)
// e6: 74 4f                         je      0x137 <_JIT_ENTRY+0x137>
// e8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ea:  R_X86_64_64  PyObject_SetItem
// f2: eb 4d                         jmp     0x141 <_JIT_ENTRY+0x141>
// f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f6:  R_X86_64_64  PyExc_SystemError
// fe: 48 8b 30                      movq    (%rax), %rsi
// 101: 48 ba 00 00 00 00 00 00 00 00 movabsq $0x0, %rdx
// 0000000000000103:  R_X86_64_64  .rodata.str1.1+0x39
// 10b: 49 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %r8
// 000000000000010d:  R_X86_64_64  _PyErr_Format
// 115: 4c 89 ff                      movq    %r15, %rdi
// 118: 31 c0                         xorl    %eax, %eax
// 11a: 41 ff d0                      callq   *%r8
// 11d: 49 8b 04 24                   movq    (%r12), %rax
// 121: 48 85 c0                      testq   %rax, %rax
// 124: 0f 8e 89 00 00 00             jle     0x1b3 <_JIT_ENTRY+0x1b3>
// 12a: 85 c0                         testl   %eax, %eax
// 12c: 0f 89 a7 00 00 00             jns     0x1d9 <_JIT_ENTRY+0x1d9>
// 132: e9 d8 00 00 00                jmp     0x20f <_JIT_ENTRY+0x20f>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  PyDict_SetItem
// 141: 48 89 ce                      movq    %rcx, %rsi
// 144: 4c 89 e2                      movq    %r12, %rdx
// 147: ff d0                         callq   *%rax
// 149: 89 c5                         movl    %eax, %ebp
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 48 85 c0                      testq   %rax, %rax
// 152: 7e 06                         jle     0x15a <_JIT_ENTRY+0x15a>
// 154: 85 c0                         testl   %eax, %eax
// 156: 79 28                         jns     0x180 <_JIT_ENTRY+0x180>
// 158: eb 38                         jmp     0x192 <_JIT_ENTRY+0x192>
// 15a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000015c:  R_X86_64_64  .rodata.str1.1
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_NegativeRefcount
// 16e: be 54 03 00 00                movl    $0x354, %esi            # imm = 0x354
// 173: 4c 89 e2                      movq    %r12, %rdx
// 176: ff d0                         callq   *%rax
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 85 c0                         testl   %eax, %eax
// 17e: 78 12                         js      0x192 <_JIT_ENTRY+0x192>
// 180: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000182:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 18a: ff d0                         callq   *%rax
// 18c: 49 ff 0c 24                   decq    (%r12)
// 190: 74 6a                         je      0x1fc <_JIT_ENTRY+0x1fc>
// 192: 85 ed                         testl   %ebp, %ebp
// 194: 75 79                         jne     0x20f <_JIT_ENTRY+0x20f>
// 196: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000198:  R_X86_64_64  _JIT_CONTINUE
// 1a0: 4c 89 f7                      movq    %r14, %rdi
// 1a3: 48 89 de                      movq    %rbx, %rsi
// 1a6: 4c 89 fa                      movq    %r15, %rdx
// 1a9: 5b                            popq    %rbx
// 1aa: 41 5c                         popq    %r12
// 1ac: 41 5e                         popq    %r14
// 1ae: 41 5f                         popq    %r15
// 1b0: 5d                            popq    %rbp
// 1b1: ff e0                         jmpq    *%rax
// 1b3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001b5:  R_X86_64_64  .rodata.str1.1
// 1bd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bf:  R_X86_64_64  _Py_NegativeRefcount
// 1c7: be 4d 03 00 00                movl    $0x34d, %esi            # imm = 0x34D
// 1cc: 4c 89 e2                      movq    %r12, %rdx
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 8b 04 24                   movq    (%r12), %rax
// 1d5: 85 c0                         testl   %eax, %eax
// 1d7: 78 36                         js      0x20f <_JIT_ENTRY+0x20f>
// 1d9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001db:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1e3: ff d0                         callq   *%rax
// 1e5: 49 ff 0c 24                   decq    (%r12)
// 1e9: 75 24                         jne     0x20f <_JIT_ENTRY+0x20f>
// 1eb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001ed:  R_X86_64_64  _Py_Dealloc
// 1f5: 4c 89 e7                      movq    %r12, %rdi
// 1f8: ff d0                         callq   *%rax
// 1fa: eb 13                         jmp     0x20f <_JIT_ENTRY+0x20f>
// 1fc: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001fe:  R_X86_64_64  _Py_Dealloc
// 206: 4c 89 e7                      movq    %r12, %rdi
// 209: ff d0                         callq   *%rax
// 20b: 85 ed                         testl   %ebp, %ebp
// 20d: 74 87                         je      0x196 <_JIT_ENTRY+0x196>
// 20f: 4c 29 f3                      subq    %r14, %rbx
// 212: 48 83 c3 b8                   addq    $-0x48, %rbx
// 216: 48 c1 eb 03                   shrq    $0x3, %rbx
// 21a: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 21e: 31 c0                         xorl    %eax, %eax
// 220: 5b                            popq    %rbx
// 221: 41 5c                         popq    %r12
// 223: 41 5e                         popq    %r14
// 225: 41 5f                         popq    %r15
// 227: 5d                            popq    %rbp
// 228: c3                            retq
// 229: 
static const unsigned char _DELETE_DEREFplus_STORE_NAME_code_body[554] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xa8, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0x83, 0xc3, 0xf8, 0x49, 0x8b, 0x06, 0x49, 0x8b, 0x7e, 0x28, 0x48, 0x8b, 0x40, 0x20, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0x8b, 0x4c, 0xc8, 0x18, 0x48, 0x85, 0xff, 0x74, 0x1c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x47, 0x08, 0x74, 0x4f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x4d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x31, 0xc0, 0x41, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x0f, 0x8e, 0x89, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x0f, 0x89, 0xa7, 0x00, 0x00, 0x00, 0xe9, 0xd8, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xce, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x38, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x6a, 0x85, 0xed, 0x75, 0x79, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x4d, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x13, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x74, 0x87, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_STORE_NAME_code_holes[24] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x69, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x73, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x8f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa1, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc3, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0xea, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0xf6, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyExc_SystemError, 0x0},
    {0x103, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x39},
    {0x10d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyErr_Format, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_SetItem, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x182, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x198, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1bf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1db, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1ed, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1fe, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00no locals found when storing %R\x00'
// 59: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_STORE_NAME_data_body[97] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_STORE_NAME_data_holes[1];

// _DELETE_DEREFplus_STORE_SLICE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_STORE_SLICE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 1b                         je      0x4a <_JIT_ENTRY+0x4a>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 2e                         jle     0x6e <_JIT_ENTRY+0x6e>
// 40: 4c 89 3c 24                   movq    %r15, (%rsp)
// 44: 85 c0                         testl   %eax, %eax
// 46: 79 50                         jns     0x98 <_JIT_ENTRY+0x98>
// 48: eb 6f                         jmp     0xb9 <_JIT_ENTRY+0xb9>
// 4a: 49 8b 36                      movq    (%r14), %rsi
// 4d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004f:  R_X86_64_64  _JIT_OPARG
// 57: 0f b7 d0                      movzwl  %ax, %edx
// 5a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005c:  R_X86_64_64  _PyEval_FormatExcUnbound
// 64: 4c 89 ff                      movq    %r15, %rdi
// 67: ff d0                         callq   *%rax
// 69: e9 e2 01 00 00                jmp     0x250 <_JIT_ENTRY+0x250>
// 6e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000070:  R_X86_64_64  .rodata.str1.1
// 78: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007a:  R_X86_64_64  _Py_NegativeRefcount
// 82: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 87: 4c 89 e2                      movq    %r12, %rdx
// 8a: ff d0                         callq   *%rax
// 8c: 49 8b 04 24                   movq    (%r12), %rax
// 90: 4c 89 3c 24                   movq    %r15, (%rsp)
// 94: 85 c0                         testl   %eax, %eax
// 96: 78 21                         js      0xb9 <_JIT_ENTRY+0xb9>
// 98: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a2: ff d0                         callq   *%rax
// a4: 49 ff 0c 24                   decq    (%r12)
// a8: 75 0f                         jne     0xb9 <_JIT_ENTRY+0xb9>
// aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ac:  R_X86_64_64  _Py_Dealloc
// b4: 4c 89 e7                      movq    %r12, %rdi
// b7: ff d0                         callq   *%rax
// b9: 48 8b 73 f8                   movq    -0x8(%rbx), %rsi
// bd: 48 8b 7b f0                   movq    -0x10(%rbx), %rdi
// c1: 4c 8b 6b e0                   movq    -0x20(%rbx), %r13
// c5: 4c 8b 63 e8                   movq    -0x18(%rbx), %r12
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _PyBuildSlice_ConsumeRefs
// d3: ff d0                         callq   *%rax
// d5: 48 85 c0                      testq   %rax, %rax
// d8: 74 2a                         je      0x104 <_JIT_ENTRY+0x104>
// da: 48 89 c5                      movq    %rax, %rbp
// dd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000df:  R_X86_64_64  PyObject_SetItem
// e7: 4c 89 e7                      movq    %r12, %rdi
// ea: 48 89 ee                      movq    %rbp, %rsi
// ed: 4c 89 ea                      movq    %r13, %rdx
// f0: ff d0                         callq   *%rax
// f2: 41 89 c7                      movl    %eax, %r15d
// f5: 48 8b 45 00                   movq    (%rbp), %rax
// f9: 48 85 c0                      testq   %rax, %rax
// fc: 7e 13                         jle     0x111 <_JIT_ENTRY+0x111>
// fe: 85 c0                         testl   %eax, %eax
// 100: 79 35                         jns     0x137 <_JIT_ENTRY+0x137>
// 102: eb 54                         jmp     0x158 <_JIT_ENTRY+0x158>
// 104: 31 ed                         xorl    %ebp, %ebp
// 106: 49 8b 45 00                   movq    (%r13), %rax
// 10a: 48 85 c0                      testq   %rax, %rax
// 10d: 7f 7b                         jg      0x18a <_JIT_ENTRY+0x18a>
// 10f: eb 57                         jmp     0x168 <_JIT_ENTRY+0x168>
// 111: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000113:  R_X86_64_64  .rodata.str1.1
// 11b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011d:  R_X86_64_64  _Py_NegativeRefcount
// 125: be b2 01 00 00                movl    $0x1b2, %esi            # imm = 0x1B2
// 12a: 48 89 ea                      movq    %rbp, %rdx
// 12d: ff d0                         callq   *%rax
// 12f: 48 8b 45 00                   movq    (%rbp), %rax
// 133: 85 c0                         testl   %eax, %eax
// 135: 78 21                         js      0x158 <_JIT_ENTRY+0x158>
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 141: ff d0                         callq   *%rax
// 143: 48 ff 4d 00                   decq    (%rbp)
// 147: 75 0f                         jne     0x158 <_JIT_ENTRY+0x158>
// 149: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014b:  R_X86_64_64  _Py_Dealloc
// 153: 48 89 ef                      movq    %rbp, %rdi
// 156: ff d0                         callq   *%rax
// 158: 45 85 ff                      testl   %r15d, %r15d
// 15b: 40 0f 94 c5                   sete    %bpl
// 15f: 49 8b 45 00                   movq    (%r13), %rax
// 163: 48 85 c0                      testq   %rax, %rax
// 166: 7f 22                         jg      0x18a <_JIT_ENTRY+0x18a>
// 168: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000016a:  R_X86_64_64  .rodata.str1.1
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _Py_NegativeRefcount
// 17c: be b4 01 00 00                movl    $0x1b4, %esi            # imm = 0x1B4
// 181: 4c 89 ea                      movq    %r13, %rdx
// 184: ff d0                         callq   *%rax
// 186: 49 8b 45 00                   movq    (%r13), %rax
// 18a: 85 c0                         testl   %eax, %eax
// 18c: 78 12                         js      0x1a0 <_JIT_ENTRY+0x1a0>
// 18e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000190:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 198: ff d0                         callq   *%rax
// 19a: 49 ff 4d 00                   decq    (%r13)
// 19e: 74 13                         je      0x1b3 <_JIT_ENTRY+0x1b3>
// 1a0: 49 8b 04 24                   movq    (%r12), %rax
// 1a4: 48 85 c0                      testq   %rax, %rax
// 1a7: 7e 22                         jle     0x1cb <_JIT_ENTRY+0x1cb>
// 1a9: 4c 8d 7b e0                   leaq    -0x20(%rbx), %r15
// 1ad: 85 c0                         testl   %eax, %eax
// 1af: 79 44                         jns     0x1f5 <_JIT_ENTRY+0x1f5>
// 1b1: eb 54                         jmp     0x207 <_JIT_ENTRY+0x207>
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_Dealloc
// 1bd: 4c 89 ef                      movq    %r13, %rdi
// 1c0: ff d0                         callq   *%rax
// 1c2: 49 8b 04 24                   movq    (%r12), %rax
// 1c6: 48 85 c0                      testq   %rax, %rax
// 1c9: 7f de                         jg      0x1a9 <_JIT_ENTRY+0x1a9>
// 1cb: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001cd:  R_X86_64_64  .rodata.str1.1
// 1d5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d7:  R_X86_64_64  _Py_NegativeRefcount
// 1df: be b5 01 00 00                movl    $0x1b5, %esi            # imm = 0x1B5
// 1e4: 4c 89 e2                      movq    %r12, %rdx
// 1e7: ff d0                         callq   *%rax
// 1e9: 49 8b 04 24                   movq    (%r12), %rax
// 1ed: 4c 8d 7b e0                   leaq    -0x20(%rbx), %r15
// 1f1: 85 c0                         testl   %eax, %eax
// 1f3: 78 12                         js      0x207 <_JIT_ENTRY+0x207>
// 1f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1ff: ff d0                         callq   *%rax
// 201: 49 ff 0c 24                   decq    (%r12)
// 205: 74 2d                         je      0x234 <_JIT_ENTRY+0x234>
// 207: 40 84 ed                      testb   %bpl, %bpl
// 20a: 49 0f 45 df                   cmovneq %r15, %rbx
// 20e: 74 3c                         je      0x24c <_JIT_ENTRY+0x24c>
// 210: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000212:  R_X86_64_64  _JIT_CONTINUE
// 21a: 4c 89 f7                      movq    %r14, %rdi
// 21d: 48 89 de                      movq    %rbx, %rsi
// 220: 48 8b 14 24                   movq    (%rsp), %rdx
// 224: 48 83 c4 08                   addq    $0x8, %rsp
// 228: 5b                            popq    %rbx
// 229: 41 5c                         popq    %r12
// 22b: 41 5d                         popq    %r13
// 22d: 41 5e                         popq    %r14
// 22f: 41 5f                         popq    %r15
// 231: 5d                            popq    %rbp
// 232: ff e0                         jmpq    *%rax
// 234: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000236:  R_X86_64_64  _Py_Dealloc
// 23e: 4c 89 e7                      movq    %r12, %rdi
// 241: ff d0                         callq   *%rax
// 243: 40 84 ed                      testb   %bpl, %bpl
// 246: 49 0f 45 df                   cmovneq %r15, %rbx
// 24a: 75 c4                         jne     0x210 <_JIT_ENTRY+0x210>
// 24c: 48 83 c3 e0                   addq    $-0x20, %rbx
// 250: 4c 29 f3                      subq    %r14, %rbx
// 253: 48 83 c3 b8                   addq    $-0x48, %rbx
// 257: 48 c1 eb 03                   shrq    $0x3, %rbx
// 25b: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 25f: 31 c0                         xorl    %eax, %eax
// 261: 48 83 c4 08                   addq    $0x8, %rsp
// 265: 5b                            popq    %rbx
// 266: 41 5c                         popq    %r12
// 268: 41 5d                         popq    %r13
// 26a: 41 5e                         popq    %r14
// 26c: 41 5f                         popq    %r15
// 26e: 5d                            popq    %rbp
// 26f: c3                            retq
// 270: 
static const unsigned char _DELETE_DEREFplus_STORE_SLICE_code_body[625] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1b, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2e, 0x4c, 0x89, 0x3c, 0x24, 0x85, 0xc0, 0x79, 0x50, 0xeb, 0x6f, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xe2, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x89, 0x3c, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x73, 0xf8, 0x48, 0x8b, 0x7b, 0xf0, 0x4c, 0x8b, 0x6b, 0xe0, 0x4c, 0x8b, 0x63, 0xe8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x2a, 0x48, 0x89, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xee, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x41, 0x89, 0xc7, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x13, 0x85, 0xc0, 0x79, 0x35, 0xeb, 0x54, 0x31, 0xed, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x7b, 0xeb, 0x57, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb2, 0x01, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x45, 0x85, 0xff, 0x40, 0x0f, 0x94, 0xc5, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb4, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe0, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb5, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe0, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2d, 0x40, 0x84, 0xed, 0x49, 0x0f, 0x45, 0xdf, 0x74, 0x3c, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x40, 0x84, 0xed, 0x49, 0x0f, 0x45, 0xdf, 0x75, 0xc4, 0x48, 0x83, 0xc3, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_STORE_SLICE_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4f, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x70, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyBuildSlice_ConsumeRefs, 0x0},
    {0xdf, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0x113, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x11d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x14b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x190, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cd, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1d7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1f7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x212, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x236, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_STORE_SLICE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_STORE_SLICE_data_holes[1];

// _DELETE_DEREFplus_STORE_SUBSCR
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_STORE_SUBSCR.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 48 89 d1                      movq    %rdx, %rcx
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 78 10                   movq    0x10(%rax), %r15
// 2a: 4d 85 ff                      testq   %r15, %r15
// 2d: 74 1a                         je      0x49 <_JIT_ENTRY+0x49>
// 2f: 48 89 0c 24                   movq    %rcx, (%rsp)
// 33: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3b: 49 8b 07                      movq    (%r15), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 2a                         jle     0x6d <_JIT_ENTRY+0x6d>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 4b                         jns     0x92 <_JIT_ENTRY+0x92>
// 47: eb 69                         jmp     0xb2 <_JIT_ENTRY+0xb2>
// 49: 49 8b 36                      movq    (%r14), %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 d0                      movzwl  %ax, %edx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _PyEval_FormatExcUnbound
// 63: 48 89 cf                      movq    %rcx, %rdi
// 66: ff d0                         callq   *%rax
// 68: e9 7e 01 00 00                jmp     0x1eb <_JIT_ENTRY+0x1eb>
// 6d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006f:  R_X86_64_64  .rodata.str1.1
// 77: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000079:  R_X86_64_64  _Py_NegativeRefcount
// 81: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 86: 4c 89 fa                      movq    %r15, %rdx
// 89: ff d0                         callq   *%rax
// 8b: 49 8b 07                      movq    (%r15), %rax
// 8e: 85 c0                         testl   %eax, %eax
// 90: 78 20                         js      0xb2 <_JIT_ENTRY+0xb2>
// 92: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000094:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9c: ff d0                         callq   *%rax
// 9e: 49 ff 0f                      decq    (%r15)
// a1: 75 0f                         jne     0xb2 <_JIT_ENTRY+0xb2>
// a3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a5:  R_X86_64_64  _Py_Dealloc
// ad: 4c 89 ff                      movq    %r15, %rdi
// b0: ff d0                         callq   *%rax
// b2: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// b6: 4c 8b 7b e8                   movq    -0x18(%rbx), %r15
// ba: 4c 8b 6b f0                   movq    -0x10(%rbx), %r13
// be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c0:  R_X86_64_64  PyObject_SetItem
// c8: 4c 89 ef                      movq    %r13, %rdi
// cb: 4c 89 e6                      movq    %r12, %rsi
// ce: 4c 89 fa                      movq    %r15, %rdx
// d1: ff d0                         callq   *%rax
// d3: 89 c5                         movl    %eax, %ebp
// d5: 49 8b 07                      movq    (%r15), %rax
// d8: 48 85 c0                      testq   %rax, %rax
// db: 7e 06                         jle     0xe3 <_JIT_ENTRY+0xe3>
// dd: 85 c0                         testl   %eax, %eax
// df: 79 27                         jns     0x108 <_JIT_ENTRY+0x108>
// e1: eb 36                         jmp     0x119 <_JIT_ENTRY+0x119>
// e3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e5:  R_X86_64_64  .rodata.str1.1
// ed: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ef:  R_X86_64_64  _Py_NegativeRefcount
// f7: be 38 02 00 00                movl    $0x238, %esi            # imm = 0x238
// fc: 4c 89 fa                      movq    %r15, %rdx
// ff: ff d0                         callq   *%rax
// 101: 49 8b 07                      movq    (%r15), %rax
// 104: 85 c0                         testl   %eax, %eax
// 106: 78 11                         js      0x119 <_JIT_ENTRY+0x119>
// 108: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 112: ff d0                         callq   *%rax
// 114: 49 ff 0f                      decq    (%r15)
// 117: 74 0f                         je      0x128 <_JIT_ENTRY+0x128>
// 119: 49 8b 45 00                   movq    (%r13), %rax
// 11d: 48 85 c0                      testq   %rax, %rax
// 120: 7e 1e                         jle     0x140 <_JIT_ENTRY+0x140>
// 122: 85 c0                         testl   %eax, %eax
// 124: 79 40                         jns     0x166 <_JIT_ENTRY+0x166>
// 126: eb 50                         jmp     0x178 <_JIT_ENTRY+0x178>
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  _Py_Dealloc
// 132: 4c 89 ff                      movq    %r15, %rdi
// 135: ff d0                         callq   *%rax
// 137: 49 8b 45 00                   movq    (%r13), %rax
// 13b: 48 85 c0                      testq   %rax, %rax
// 13e: 7f e2                         jg      0x122 <_JIT_ENTRY+0x122>
// 140: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000142:  R_X86_64_64  .rodata.str1.1
// 14a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000014c:  R_X86_64_64  _Py_NegativeRefcount
// 154: be 39 02 00 00                movl    $0x239, %esi            # imm = 0x239
// 159: 4c 89 ea                      movq    %r13, %rdx
// 15c: ff d0                         callq   *%rax
// 15e: 49 8b 45 00                   movq    (%r13), %rax
// 162: 85 c0                         testl   %eax, %eax
// 164: 78 12                         js      0x178 <_JIT_ENTRY+0x178>
// 166: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000168:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 170: ff d0                         callq   *%rax
// 172: 49 ff 4d 00                   decq    (%r13)
// 176: 74 13                         je      0x18b <_JIT_ENTRY+0x18b>
// 178: 49 8b 04 24                   movq    (%r12), %rax
// 17c: 48 85 c0                      testq   %rax, %rax
// 17f: 7e 22                         jle     0x1a3 <_JIT_ENTRY+0x1a3>
// 181: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 185: 85 c0                         testl   %eax, %eax
// 187: 79 44                         jns     0x1cd <_JIT_ENTRY+0x1cd>
// 189: eb 54                         jmp     0x1df <_JIT_ENTRY+0x1df>
// 18b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018d:  R_X86_64_64  _Py_Dealloc
// 195: 4c 89 ef                      movq    %r13, %rdi
// 198: ff d0                         callq   *%rax
// 19a: 49 8b 04 24                   movq    (%r12), %rax
// 19e: 48 85 c0                      testq   %rax, %rax
// 1a1: 7f de                         jg      0x181 <_JIT_ENTRY+0x181>
// 1a3: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001a5:  R_X86_64_64  .rodata.str1.1
// 1ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001af:  R_X86_64_64  _Py_NegativeRefcount
// 1b7: be 3a 02 00 00                movl    $0x23a, %esi            # imm = 0x23A
// 1bc: 4c 89 e2                      movq    %r12, %rdx
// 1bf: ff d0                         callq   *%rax
// 1c1: 49 8b 04 24                   movq    (%r12), %rax
// 1c5: 4c 8d 7b e8                   leaq    -0x18(%rbx), %r15
// 1c9: 85 c0                         testl   %eax, %eax
// 1cb: 78 12                         js      0x1df <_JIT_ENTRY+0x1df>
// 1cd: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cf:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1d7: ff d0                         callq   *%rax
// 1d9: 49 ff 0c 24                   decq    (%r12)
// 1dd: 74 2c                         je      0x20b <_JIT_ENTRY+0x20b>
// 1df: 85 ed                         testl   %ebp, %ebp
// 1e1: 49 0f 44 df                   cmoveq  %r15, %rbx
// 1e5: 74 3b                         je      0x222 <_JIT_ENTRY+0x222>
// 1e7: 48 83 c3 e8                   addq    $-0x18, %rbx
// 1eb: 4c 29 f3                      subq    %r14, %rbx
// 1ee: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1f2: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1f6: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1fa: 31 c0                         xorl    %eax, %eax
// 1fc: 48 83 c4 08                   addq    $0x8, %rsp
// 200: 5b                            popq    %rbx
// 201: 41 5c                         popq    %r12
// 203: 41 5d                         popq    %r13
// 205: 41 5e                         popq    %r14
// 207: 41 5f                         popq    %r15
// 209: 5d                            popq    %rbp
// 20a: c3                            retq
// 20b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020d:  R_X86_64_64  _Py_Dealloc
// 215: 4c 89 e7                      movq    %r12, %rdi
// 218: ff d0                         callq   *%rax
// 21a: 85 ed                         testl   %ebp, %ebp
// 21c: 49 0f 44 df                   cmoveq  %r15, %rbx
// 220: 75 c5                         jne     0x1e7 <_JIT_ENTRY+0x1e7>
// 222: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000224:  R_X86_64_64  _JIT_CONTINUE
// 22c: 4c 89 f7                      movq    %r14, %rdi
// 22f: 48 89 de                      movq    %rbx, %rsi
// 232: 48 8b 14 24                   movq    (%rsp), %rdx
// 236: 48 83 c4 08                   addq    $0x8, %rsp
// 23a: 5b                            popq    %rbx
// 23b: 41 5c                         popq    %r12
// 23d: 41 5d                         popq    %r13
// 23f: 41 5e                         popq    %r14
// 241: 41 5f                         popq    %r15
// 243: 5d                            popq    %rbp
// 244: ff e0                         jmpq    *%rax
// 246: 
static const unsigned char _DELETE_DEREFplus_STORE_SUBSCR_code_body[583] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x48, 0x89, 0xd1, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x78, 0x10, 0x4d, 0x85, 0xff, 0x74, 0x1a, 0x48, 0x89, 0x0c, 0x24, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4b, 0xeb, 0x69, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0xe9, 0x7e, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x20, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x4c, 0x8b, 0x7b, 0xe8, 0x4c, 0x8b, 0x6b, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0x4c, 0x89, 0xe6, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x07, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x27, 0xeb, 0x36, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x38, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xfa, 0xff, 0xd0, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0f, 0x74, 0x0f, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x1e, 0x85, 0xc0, 0x79, 0x40, 0xeb, 0x50, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0xe2, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x13, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x22, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x79, 0x44, 0xeb, 0x54, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0xde, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x3a, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x7b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2c, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x74, 0x3b, 0x48, 0x83, 0xc3, 0xe8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdf, 0x75, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x14, 0x24, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_STORE_SUBSCR_code_holes[22] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x79, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x94, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_SetItem, 0x0},
    {0xe5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xef, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x142, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x14c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x168, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x18d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1a5, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1af, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1cf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x20d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x224, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_STORE_SUBSCR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_STORE_SUBSCR_data_holes[1];

// _DELETE_DEREFplus_STORE_SUBSCR_DICT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_STORE_SUBSCR_DICT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 2a                         jle     0x6a <_JIT_ENTRY+0x6a>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 4c                         jns     0x90 <_JIT_ENTRY+0x90>
// 44: eb 5c                         jmp     0xa2 <_JIT_ENTRY+0xa2>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: e9 12 01 00 00                jmp     0x17c <_JIT_ENTRY+0x17c>
// 6a: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000006c:  R_X86_64_64  .rodata.str1.1
// 74: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000076:  R_X86_64_64  _Py_NegativeRefcount
// 7e: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 83: 4c 89 e2                      movq    %r12, %rdx
// 86: ff d0                         callq   *%rax
// 88: 49 8b 04 24                   movq    (%r12), %rax
// 8c: 85 c0                         testl   %eax, %eax
// 8e: 78 12                         js      0xa2 <_JIT_ENTRY+0xa2>
// 90: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000092:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 9a: ff d0                         callq   *%rax
// 9c: 49 ff 0c 24                   decq    (%r12)
// a0: 74 42                         je      0xe4 <_JIT_ENTRY+0xe4>
// a2: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// a6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a8:  R_X86_64_64  PyDict_Type
// b0: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// b5: 74 51                         je      0x108 <_JIT_ENTRY+0x108>
// b7: 4c 29 f3                      subq    %r14, %rbx
// ba: 48 83 c3 b8                   addq    $-0x48, %rbx
// be: 48 c1 eb 03                   shrq    $0x3, %rbx
// c2: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// c6: 49 8b 06                      movq    (%r14), %rax
// c9: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cb:  R_X86_64_64  _JIT_TARGET
// d3: 89 c9                         movl    %ecx, %ecx
// d5: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// d9: 48 05 c8 00 00 00             addq    $0xc8, %rax
// df: e9 a9 00 00 00                jmp     0x18d <_JIT_ENTRY+0x18d>
// e4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000e6:  R_X86_64_64  _Py_Dealloc
// ee: 4c 89 e7                      movq    %r12, %rdi
// f1: ff d0                         callq   *%rax
// f3: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// f7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f9:  R_X86_64_64  PyDict_Type
// 101: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 106: 75 af                         jne     0xb7 <_JIT_ENTRY+0xb7>
// 108: 48 8b 53 e8                   movq    -0x18(%rbx), %rdx
// 10c: 48 8b 73 f8                   movq    -0x8(%rbx), %rsi
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _PyDict_SetItem_Take2
// 11a: 4c 89 e7                      movq    %r12, %rdi
// 11d: ff d0                         callq   *%rax
// 11f: 89 c5                         movl    %eax, %ebp
// 121: 49 8b 04 24                   movq    (%r12), %rax
// 125: 48 85 c0                      testq   %rax, %rax
// 128: 7e 0a                         jle     0x134 <_JIT_ENTRY+0x134>
// 12a: 4c 8d 6b e8                   leaq    -0x18(%rbx), %r13
// 12e: 85 c0                         testl   %eax, %eax
// 130: 79 2c                         jns     0x15e <_JIT_ENTRY+0x15e>
// 132: eb 3c                         jmp     0x170 <_JIT_ENTRY+0x170>
// 134: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000136:  R_X86_64_64  .rodata.str1.1
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _Py_NegativeRefcount
// 148: be 63 02 00 00                movl    $0x263, %esi            # imm = 0x263
// 14d: 4c 89 e2                      movq    %r12, %rdx
// 150: ff d0                         callq   *%rax
// 152: 49 8b 04 24                   movq    (%r12), %rax
// 156: 4c 8d 6b e8                   leaq    -0x18(%rbx), %r13
// 15a: 85 c0                         testl   %eax, %eax
// 15c: 78 12                         js      0x170 <_JIT_ENTRY+0x170>
// 15e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000160:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 168: ff d0                         callq   *%rax
// 16a: 49 ff 0c 24                   decq    (%r12)
// 16e: 74 2c                         je      0x19c <_JIT_ENTRY+0x19c>
// 170: 85 ed                         testl   %ebp, %ebp
// 172: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 176: 74 3b                         je      0x1b3 <_JIT_ENTRY+0x1b3>
// 178: 48 83 c3 e8                   addq    $-0x18, %rbx
// 17c: 4c 29 f3                      subq    %r14, %rbx
// 17f: 48 83 c3 b8                   addq    $-0x48, %rbx
// 183: 48 c1 eb 03                   shrq    $0x3, %rbx
// 187: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 18b: 31 c0                         xorl    %eax, %eax
// 18d: 48 83 c4 08                   addq    $0x8, %rsp
// 191: 5b                            popq    %rbx
// 192: 41 5c                         popq    %r12
// 194: 41 5d                         popq    %r13
// 196: 41 5e                         popq    %r14
// 198: 41 5f                         popq    %r15
// 19a: 5d                            popq    %rbp
// 19b: c3                            retq
// 19c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019e:  R_X86_64_64  _Py_Dealloc
// 1a6: 4c 89 e7                      movq    %r12, %rdi
// 1a9: ff d0                         callq   *%rax
// 1ab: 85 ed                         testl   %ebp, %ebp
// 1ad: 49 0f 44 dd                   cmoveq  %r13, %rbx
// 1b1: 75 c5                         jne     0x178 <_JIT_ENTRY+0x178>
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _JIT_CONTINUE
// 1bd: 4c 89 f7                      movq    %r14, %rdi
// 1c0: 48 89 de                      movq    %rbx, %rsi
// 1c3: 4c 89 fa                      movq    %r15, %rdx
// 1c6: 48 83 c4 08                   addq    $0x8, %rsp
// 1ca: 5b                            popq    %rbx
// 1cb: 41 5c                         popq    %r12
// 1cd: 41 5d                         popq    %r13
// 1cf: 41 5e                         popq    %r14
// 1d1: 41 5f                         popq    %r15
// 1d3: 5d                            popq    %rbp
// 1d4: ff e0                         jmpq    *%rax
// 1d6: 
static const unsigned char _DELETE_DEREFplus_STORE_SUBSCR_DICT_code_body[471] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x5c, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x12, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x42, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x51, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0xe9, 0xa9, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0xaf, 0x48, 0x8b, 0x53, 0xe8, 0x48, 0x8b, 0x73, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x0a, 0x4c, 0x8d, 0x6b, 0xe8, 0x85, 0xc0, 0x79, 0x2c, 0xeb, 0x3c, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x63, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x4c, 0x8d, 0x6b, 0xe8, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x2c, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x74, 0x3b, 0x48, 0x83, 0xc3, 0xe8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x49, 0x0f, 0x44, 0xdd, 0x75, 0xc5, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_STORE_SUBSCR_DICT_code_holes[17] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x6c, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x92, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xa8, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xe6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xf9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyDict_Type, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyDict_SetItem_Take2, 0x0},
    {0x136, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x160, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x19e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_STORE_SUBSCR_DICT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_STORE_SUBSCR_DICT_data_holes[1];

// _DELETE_DEREFplus_STORE_SUBSCR_LIST_INT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_STORE_SUBSCR_LIST_INT.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 3b                         jle     0x7b <_JIT_ENTRY+0x7b>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 5d                         jns     0xa1 <_JIT_ENTRY+0xa1>
// 44: eb 71                         jmp     0xb7 <_JIT_ENTRY+0xb7>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 4c 29 f3                      subq    %r14, %rbx
// 68: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 70: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 74: 31 c0                         xorl    %eax, %eax
// 76: e9 dd 01 00 00                jmp     0x258 <_JIT_ENTRY+0x258>
// 7b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007d:  R_X86_64_64  .rodata.str1.1
// 85: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000087:  R_X86_64_64  _Py_NegativeRefcount
// 8f: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 94: 4c 89 e2                      movq    %r12, %rdx
// 97: ff d0                         callq   *%rax
// 99: 49 8b 04 24                   movq    (%r12), %rax
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 16                         js      0xb7 <_JIT_ENTRY+0xb7>
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ab: ff d0                         callq   *%rax
// ad: 49 ff 0c 24                   decq    (%r12)
// b1: 0f 84 52 01 00 00             je      0x209 <_JIT_ENTRY+0x209>
// b7: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  PyLong_Type
// c5: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// c9: 0f 85 61 01 00 00             jne     0x230 <_JIT_ENTRY+0x230>
// cf: 4c 8b 63 f0                   movq    -0x10(%rbx), %r12
// d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d5:  R_X86_64_64  PyList_Type
// dd: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// e2: 0f 85 48 01 00 00             jne     0x230 <_JIT_ENTRY+0x230>
// e8: 49 83 7d 10 08                cmpq    $0x8, 0x10(%r13)
// ed: 0f 87 3d 01 00 00             ja      0x230 <_JIT_ENTRY+0x230>
// f3: 41 8b 45 18                   movl    0x18(%r13), %eax
// f7: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// fc: 0f 8e 2e 01 00 00             jle     0x230 <_JIT_ENTRY+0x230>
// 102: 48 8b 4b e8                   movq    -0x18(%rbx), %rcx
// 106: 49 8b 54 24 18                movq    0x18(%r12), %rdx
// 10b: 48 8b 2c c2                   movq    (%rdx,%rax,8), %rbp
// 10f: 48 89 0c c2                   movq    %rcx, (%rdx,%rax,8)
// 113: 48 8b 45 00                   movq    (%rbp), %rax
// 117: 48 85 c0                      testq   %rax, %rax
// 11a: 7f 22                         jg      0x13e <_JIT_ENTRY+0x13e>
// 11c: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011e:  R_X86_64_64  .rodata.str1.1
// 126: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000128:  R_X86_64_64  _Py_NegativeRefcount
// 130: be 52 02 00 00                movl    $0x252, %esi            # imm = 0x252
// 135: 48 89 ea                      movq    %rbp, %rdx
// 138: ff d0                         callq   *%rax
// 13a: 48 8b 45 00                   movq    (%rbp), %rax
// 13e: 85 c0                         testl   %eax, %eax
// 140: 78 21                         js      0x163 <_JIT_ENTRY+0x163>
// 142: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000144:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14c: ff d0                         callq   *%rax
// 14e: 48 ff 4d 00                   decq    (%rbp)
// 152: 75 0f                         jne     0x163 <_JIT_ENTRY+0x163>
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  _Py_Dealloc
// 15e: 48 89 ef                      movq    %rbp, %rdi
// 161: ff d0                         callq   *%rax
// 163: 41 f6 45 03 80                testb   $-0x80, 0x3(%r13)
// 168: 75 28                         jne     0x192 <_JIT_ENTRY+0x192>
// 16a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016c:  R_X86_64_64  PyInterpreterState_Get
// 174: ff d0                         callq   *%rax
// 176: 48 ff 88 c8 15 04 00          decq    0x415c8(%rax)
// 17d: 49 ff 4d 00                   decq    (%r13)
// 181: 75 0f                         jne     0x192 <_JIT_ENTRY+0x192>
// 183: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000185:  R_X86_64_64  PyObject_Free
// 18d: 4c 89 ef                      movq    %r13, %rdi
// 190: ff d0                         callq   *%rax
// 192: 49 8b 04 24                   movq    (%r12), %rax
// 196: 48 85 c0                      testq   %rax, %rax
// 199: 7f 22                         jg      0x1bd <_JIT_ENTRY+0x1bd>
// 19b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000019d:  R_X86_64_64  .rodata.str1.1
// 1a5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001a7:  R_X86_64_64  _Py_NegativeRefcount
// 1af: be 54 02 00 00                movl    $0x254, %esi            # imm = 0x254
// 1b4: 4c 89 e2                      movq    %r12, %rdx
// 1b7: ff d0                         callq   *%rax
// 1b9: 49 8b 04 24                   movq    (%r12), %rax
// 1bd: 48 83 c3 e8                   addq    $-0x18, %rbx
// 1c1: 85 c0                         testl   %eax, %eax
// 1c3: 78 21                         js      0x1e6 <_JIT_ENTRY+0x1e6>
// 1c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001c7:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1cf: ff d0                         callq   *%rax
// 1d1: 49 ff 0c 24                   decq    (%r12)
// 1d5: 75 0f                         jne     0x1e6 <_JIT_ENTRY+0x1e6>
// 1d7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d9:  R_X86_64_64  _Py_Dealloc
// 1e1: 4c 89 e7                      movq    %r12, %rdi
// 1e4: ff d0                         callq   *%rax
// 1e6: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e8:  R_X86_64_64  _JIT_CONTINUE
// 1f0: 4c 89 f7                      movq    %r14, %rdi
// 1f3: 48 89 de                      movq    %rbx, %rsi
// 1f6: 4c 89 fa                      movq    %r15, %rdx
// 1f9: 48 83 c4 08                   addq    $0x8, %rsp
// 1fd: 5b                            popq    %rbx
// 1fe: 41 5c                         popq    %r12
// 200: 41 5d                         popq    %r13
// 202: 41 5e                         popq    %r14
// 204: 41 5f                         popq    %r15
// 206: 5d                            popq    %rbp
// 207: ff e0                         jmpq    *%rax
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _Py_Dealloc
// 213: 4c 89 e7                      movq    %r12, %rdi
// 216: ff d0                         callq   *%rax
// 218: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// 21c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000021e:  R_X86_64_64  PyLong_Type
// 226: 49 39 45 08                   cmpq    %rax, 0x8(%r13)
// 22a: 0f 84 9f fe ff ff             je      0xcf <_JIT_ENTRY+0xcf>
// 230: 4c 29 f3                      subq    %r14, %rbx
// 233: 48 83 c3 b8                   addq    $-0x48, %rbx
// 237: 48 c1 eb 03                   shrq    $0x3, %rbx
// 23b: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 23f: 49 8b 06                      movq    (%r14), %rax
// 242: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000244:  R_X86_64_64  _JIT_TARGET
// 24c: 89 c9                         movl    %ecx, %ecx
// 24e: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 252: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 258: 48 83 c4 08                   addq    $0x8, %rsp
// 25c: 5b                            popq    %rbx
// 25d: 41 5c                         popq    %r12
// 25f: 41 5d                         popq    %r13
// 261: 41 5e                         popq    %r14
// 263: 41 5f                         popq    %r15
// 265: 5d                            popq    %rbp
// 266: c3                            retq
// 267: 
static const unsigned char _DELETE_DEREFplus_STORE_SUBSCR_LIST_INT_code_body[616] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x71, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0xdd, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x52, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x85, 0x61, 0x01, 0x00, 0x00, 0x4c, 0x8b, 0x63, 0xf0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x48, 0x01, 0x00, 0x00, 0x49, 0x83, 0x7d, 0x10, 0x08, 0x0f, 0x87, 0x3d, 0x01, 0x00, 0x00, 0x41, 0x8b, 0x45, 0x18, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x8e, 0x2e, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x4b, 0xe8, 0x49, 0x8b, 0x54, 0x24, 0x18, 0x48, 0x8b, 0x2c, 0xc2, 0x48, 0x89, 0x0c, 0xc2, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x52, 0x02, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x41, 0xf6, 0x45, 0x03, 0x80, 0x75, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x88, 0xc8, 0x15, 0x04, 0x00, 0x49, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x54, 0x02, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x83, 0xc3, 0xe8, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x45, 0x08, 0x0f, 0x84, 0x9f, 0xfe, 0xff, 0xff, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_STORE_SUBSCR_LIST_INT_code_holes[23] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x87, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x144, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x16c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyInterpreterState_Get, 0x0},
    {0x185, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Free, 0x0},
    {0x19d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1a7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1c7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1d9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1e8, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x21e, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x244, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_STORE_SUBSCR_LIST_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_STORE_SUBSCR_LIST_INT_data_holes[1];

// _DELETE_DEREFplus_SWAP
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_SWAP.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 1a                         je      0x46 <_JIT_ENTRY+0x46>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 45                         jle     0x82 <_JIT_ENTRY+0x82>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 67                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 41: e9 83 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 4c 29 f3                      subq    %r14, %rbx
// 68: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 70: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 74: 31 c0                         xorl    %eax, %eax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 21                         js      0xc9 <_JIT_ENTRY+0xc9>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 75 0f                         jne     0xc9 <_JIT_ENTRY+0xc9>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_Dealloc
// c4: 4c 89 e7                      movq    %r12, %rdi
// c7: ff d0                         callq   *%rax
// c9: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// cd: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000cf:  R_X86_64_64  _JIT_OPARG
// d7: 0f b7 c9                      movzwl  %cx, %ecx
// da: 48 c1 e1 03                   shlq    $0x3, %rcx
// de: 48 89 da                      movq    %rbx, %rdx
// e1: 48 29 ca                      subq    %rcx, %rdx
// e4: 48 f7 d9                      negq    %rcx
// e7: 48 8b 12                      movq    (%rdx), %rdx
// ea: 48 89 04 0b                   movq    %rax, (%rbx,%rcx)
// ee: 48 89 53 f8                   movq    %rdx, -0x8(%rbx)
// f2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f4:  R_X86_64_64  _JIT_CONTINUE
// fc: 4c 89 f7                      movq    %r14, %rdi
// ff: 48 89 de                      movq    %rbx, %rsi
// 102: 4c 89 fa                      movq    %r15, %rdx
// 105: 48 83 c4 08                   addq    $0x8, %rsp
// 109: 5b                            popq    %rbx
// 10a: 41 5c                         popq    %r12
// 10c: 41 5e                         popq    %r14
// 10e: 41 5f                         popq    %r15
// 110: ff e0                         jmpq    *%rax
// 112: 
static const unsigned char _DELETE_DEREFplus_SWAP_code_body[275] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc9, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0x89, 0xda, 0x48, 0x29, 0xca, 0x48, 0xf7, 0xd9, 0x48, 0x8b, 0x12, 0x48, 0x89, 0x04, 0x0b, 0x48, 0x89, 0x53, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_SWAP_code_holes[10] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xcf, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf4, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_SWAP_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_SWAP_data_holes[1];

// _DELETE_DEREFplus_TO_BOOL
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_TO_BOOL.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 21                         je      0x50 <_JIT_ENTRY+0x50>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 34                         jle     0x74 <_JIT_ENTRY+0x74>
// 40: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000042:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a: 85 c0                         testl   %eax, %eax
// 4c: 79 56                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 4e: eb 6c                         jmp     0xbc <_JIT_ENTRY+0xbc>
// 50: 49 8b 36                      movq    (%r14), %rsi
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _JIT_OPARG
// 5d: 0f b7 d0                      movzwl  %ax, %edx
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _PyEval_FormatExcUnbound
// 6a: 4c 89 ff                      movq    %r15, %rdi
// 6d: ff d0                         callq   *%rax
// 6f: e9 f5 00 00 00                jmp     0x169 <_JIT_ENTRY+0x169>
// 74: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000076:  R_X86_64_64  .rodata.str1.1
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _Py_NegativeRefcount
// 88: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 49 8b 04 24                   movq    (%r12), %rax
// 96: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000098:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 18                         js      0xbc <_JIT_ENTRY+0xbc>
// a4: 41 ff d5                      callq   *%r13
// a7: 49 ff 0c 24                   decq    (%r12)
// ab: 75 0f                         jne     0xbc <_JIT_ENTRY+0xbc>
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_Dealloc
// b7: 4c 89 e7                      movq    %r12, %rdi
// ba: ff d0                         callq   *%rax
// bc: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  PyObject_IsTrue
// ca: 4c 89 e7                      movq    %r12, %rdi
// cd: ff d0                         callq   *%rax
// cf: 89 c5                         movl    %eax, %ebp
// d1: 49 8b 04 24                   movq    (%r12), %rax
// d5: 48 85 c0                      testq   %rax, %rax
// d8: 7e 06                         jle     0xe0 <_JIT_ENTRY+0xe0>
// da: 85 c0                         testl   %eax, %eax
// dc: 79 28                         jns     0x106 <_JIT_ENTRY+0x106>
// de: eb 2f                         jmp     0x10f <_JIT_ENTRY+0x10f>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be 86 00 00 00                movl    $0x86, %esi
// f9: 4c 89 e2                      movq    %r12, %rdx
// fc: ff d0                         callq   *%rax
// fe: 49 8b 04 24                   movq    (%r12), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 09                         js      0x10f <_JIT_ENTRY+0x10f>
// 106: 41 ff d5                      callq   *%r13
// 109: 49 ff 0c 24                   decq    (%r12)
// 10d: 74 43                         je      0x152 <_JIT_ENTRY+0x152>
// 10f: 85 ed                         testl   %ebp, %ebp
// 111: 78 52                         js      0x165 <_JIT_ENTRY+0x165>
// 113: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000115:  R_X86_64_64  _Py_FalseStruct
// 11d: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000011f:  R_X86_64_64  _Py_TrueStruct
// 127: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 12b: 48 89 4b f8                   movq    %rcx, -0x8(%rbx)
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _JIT_CONTINUE
// 139: 4c 89 f7                      movq    %r14, %rdi
// 13c: 48 89 de                      movq    %rbx, %rsi
// 13f: 4c 89 fa                      movq    %r15, %rdx
// 142: 48 83 c4 08                   addq    $0x8, %rsp
// 146: 5b                            popq    %rbx
// 147: 41 5c                         popq    %r12
// 149: 41 5d                         popq    %r13
// 14b: 41 5e                         popq    %r14
// 14d: 41 5f                         popq    %r15
// 14f: 5d                            popq    %rbp
// 150: ff e0                         jmpq    *%rax
// 152: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000154:  R_X86_64_64  _Py_Dealloc
// 15c: 4c 89 e7                      movq    %r12, %rdi
// 15f: ff d0                         callq   *%rax
// 161: 85 ed                         testl   %ebp, %ebp
// 163: 79 ae                         jns     0x113 <_JIT_ENTRY+0x113>
// 165: 48 83 c3 f8                   addq    $-0x8, %rbx
// 169: 4c 29 f3                      subq    %r14, %rbx
// 16c: 48 83 c3 b8                   addq    $-0x48, %rbx
// 170: 48 c1 eb 03                   shrq    $0x3, %rbx
// 174: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 178: 31 c0                         xorl    %eax, %eax
// 17a: 48 83 c4 08                   addq    $0x8, %rsp
// 17e: 5b                            popq    %rbx
// 17f: 41 5c                         popq    %r12
// 181: 41 5d                         popq    %r13
// 183: 41 5e                         popq    %r14
// 185: 41 5f                         popq    %r15
// 187: 5d                            popq    %rbp
// 188: c3                            retq
// 189: 
static const unsigned char _DELETE_DEREFplus_TO_BOOL_code_body[394] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x21, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x34, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x56, 0xeb, 0x6c, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xf5, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x2f, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x86, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x09, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x43, 0x85, 0xed, 0x78, 0x52, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x4b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x85, 0xed, 0x79, 0xae, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_TO_BOOL_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_IsTrue, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x115, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x11f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x154, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_TO_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_TO_BOOL_data_holes[1];

// _DELETE_DEREFplus_TO_BOOL_ALWAYS_TRUE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_TO_BOOL_ALWAYS_TRUE.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 3b                         jle     0x78 <_JIT_ENTRY+0x78>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5d                         jns     0x9e <_JIT_ENTRY+0x9e>
// 41: eb 7c                         jmp     0xbf <_JIT_ENTRY+0xbf>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: e9 99 00 00 00                jmp     0x111 <_JIT_ENTRY+0x111>
// 78: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007a:  R_X86_64_64  .rodata.str1.1
// 82: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000084:  R_X86_64_64  _Py_NegativeRefcount
// 8c: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 91: 4c 89 e2                      movq    %r12, %rdx
// 94: ff d0                         callq   *%rax
// 96: 49 8b 04 24                   movq    (%r12), %rax
// 9a: 85 c0                         testl   %eax, %eax
// 9c: 78 21                         js      0xbf <_JIT_ENTRY+0xbf>
// 9e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a0:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a8: ff d0                         callq   *%rax
// aa: 49 ff 0c 24                   decq    (%r12)
// ae: 75 0f                         jne     0xbf <_JIT_ENTRY+0xbf>
// b0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b2:  R_X86_64_64  _Py_Dealloc
// ba: 4c 89 e7                      movq    %r12, %rdi
// bd: ff d0                         callq   *%rax
// bf: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// c3: 49 8b 44 24 08                movq    0x8(%r12), %rax
// c8: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000ca:  R_X86_64_64  _JIT_OPERAND
// d2: 39 88 80 01 00 00             cmpl    %ecx, 0x180(%rax)
// d8: 75 0f                         jne     0xe9 <_JIT_ENTRY+0xe9>
// da: 49 8b 04 24                   movq    (%r12), %rax
// de: 48 85 c0                      testq   %rax, %rax
// e1: 7e 3a                         jle     0x11d <_JIT_ENTRY+0x11d>
// e3: 85 c0                         testl   %eax, %eax
// e5: 79 5c                         jns     0x143 <_JIT_ENTRY+0x143>
// e7: eb 7b                         jmp     0x164 <_JIT_ENTRY+0x164>
// e9: 4c 29 f3                      subq    %r14, %rbx
// ec: 48 83 c3 b8                   addq    $-0x48, %rbx
// f0: 48 c1 eb 03                   shrq    $0x3, %rbx
// f4: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// f8: 49 8b 06                      movq    (%r14), %rax
// fb: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000fd:  R_X86_64_64  _JIT_TARGET
// 105: 89 c9                         movl    %ecx, %ecx
// 107: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 10b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 111: 48 83 c4 08                   addq    $0x8, %rsp
// 115: 5b                            popq    %rbx
// 116: 41 5c                         popq    %r12
// 118: 41 5e                         popq    %r14
// 11a: 41 5f                         popq    %r15
// 11c: c3                            retq
// 11d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000011f:  R_X86_64_64  .rodata.str1.1
// 127: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000129:  R_X86_64_64  _Py_NegativeRefcount
// 131: be db 00 00 00                movl    $0xdb, %esi
// 136: 4c 89 e2                      movq    %r12, %rdx
// 139: ff d0                         callq   *%rax
// 13b: 49 8b 04 24                   movq    (%r12), %rax
// 13f: 85 c0                         testl   %eax, %eax
// 141: 78 21                         js      0x164 <_JIT_ENTRY+0x164>
// 143: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000145:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 14d: ff d0                         callq   *%rax
// 14f: 49 ff 0c 24                   decq    (%r12)
// 153: 75 0f                         jne     0x164 <_JIT_ENTRY+0x164>
// 155: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000157:  R_X86_64_64  _Py_Dealloc
// 15f: 4c 89 e7                      movq    %r12, %rdi
// 162: ff d0                         callq   *%rax
// 164: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000166:  R_X86_64_64  _Py_TrueStruct
// 16e: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 172: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000174:  R_X86_64_64  _JIT_CONTINUE
// 17c: 4c 89 f7                      movq    %r14, %rdi
// 17f: 48 89 de                      movq    %rbx, %rsi
// 182: 4c 89 fa                      movq    %r15, %rdx
// 185: 48 83 c4 08                   addq    $0x8, %rsp
// 189: 5b                            popq    %rbx
// 18a: 41 5c                         popq    %r12
// 18c: 41 5e                         popq    %r14
// 18e: 41 5f                         popq    %r15
// 190: ff e0                         jmpq    *%rax
// 192: 
static const unsigned char _DELETE_DEREFplus_TO_BOOL_ALWAYS_TRUE_code_body[403] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x7c, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xe9, 0x99, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x49, 0x8b, 0x44, 0x24, 0x08, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x88, 0x80, 0x01, 0x00, 0x00, 0x75, 0x0f, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3a, 0x85, 0xc0, 0x79, 0x5c, 0xeb, 0x7b, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xdb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_TO_BOOL_ALWAYS_TRUE_code_holes[16] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7a, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb2, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xca, HoleKind_R_X86_64_64, HoleValue_OPERAND, NULL, 0x0},
    {0xfd, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x11f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x129, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x145, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x157, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x166, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x174, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_TO_BOOL_ALWAYS_TRUE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_TO_BOOL_ALWAYS_TRUE_data_holes[1];

// _DELETE_DEREFplus_TO_BOOL_BOOL
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_TO_BOOL_BOOL.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 38                         jle     0x75 <_JIT_ENTRY+0x75>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5a                         jns     0x9b <_JIT_ENTRY+0x9b>
// 41: eb 6a                         jmp     0xad <_JIT_ENTRY+0xad>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: eb 74                         jmp     0xe9 <_JIT_ENTRY+0xe9>
// 75: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000077:  R_X86_64_64  .rodata.str1.1
// 7f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000081:  R_X86_64_64  _Py_NegativeRefcount
// 89: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8e: 4c 89 e2                      movq    %r12, %rdx
// 91: ff d0                         callq   *%rax
// 93: 49 8b 04 24                   movq    (%r12), %rax
// 97: 85 c0                         testl   %eax, %eax
// 99: 78 12                         js      0xad <_JIT_ENTRY+0xad>
// 9b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a5: ff d0                         callq   *%rax
// a7: 49 ff 0c 24                   decq    (%r12)
// ab: 74 48                         je      0xf5 <_JIT_ENTRY+0xf5>
// ad: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// b1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000b3:  R_X86_64_64  PyBool_Type
// bb: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// bf: 74 57                         je      0x118 <_JIT_ENTRY+0x118>
// c1: 4c 29 f3                      subq    %r14, %rbx
// c4: 48 83 c3 b8                   addq    $-0x48, %rbx
// c8: 48 c1 eb 03                   shrq    $0x3, %rbx
// cc: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// d0: 49 8b 06                      movq    (%r14), %rax
// d3: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d5:  R_X86_64_64  _JIT_TARGET
// dd: 89 c9                         movl    %ecx, %ecx
// df: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// e3: 48 05 c8 00 00 00             addq    $0xc8, %rax
// e9: 48 83 c4 08                   addq    $0x8, %rsp
// ed: 5b                            popq    %rbx
// ee: 41 5c                         popq    %r12
// f0: 41 5e                         popq    %r14
// f2: 41 5f                         popq    %r15
// f4: c3                            retq
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: 4c 89 e7                      movq    %r12, %rdi
// 102: ff d0                         callq   *%rax
// 104: 48 8b 43 f8                   movq    -0x8(%rbx), %rax
// 108: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000010a:  R_X86_64_64  PyBool_Type
// 112: 48 39 48 08                   cmpq    %rcx, 0x8(%rax)
// 116: 75 a9                         jne     0xc1 <_JIT_ENTRY+0xc1>
// 118: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011a:  R_X86_64_64  _JIT_CONTINUE
// 122: 4c 89 f7                      movq    %r14, %rdi
// 125: 48 89 de                      movq    %rbx, %rsi
// 128: 4c 89 fa                      movq    %r15, %rdx
// 12b: 48 83 c4 08                   addq    $0x8, %rsp
// 12f: 5b                            popq    %rbx
// 130: 41 5c                         popq    %r12
// 132: 41 5e                         popq    %r14
// 134: 41 5f                         popq    %r15
// 136: ff e0                         jmpq    *%rax
// 138: 
static const unsigned char _DELETE_DEREFplus_TO_BOOL_BOOL_code_body[313] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x38, 0x85, 0xc0, 0x79, 0x5a, 0xeb, 0x6a, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x74, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x48, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x74, 0x57, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x48, 0x08, 0x75, 0xa9, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_TO_BOOL_BOOL_code_holes[12] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x77, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb3, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0xd5, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyBool_Type, 0x0},
    {0x11a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_TO_BOOL_BOOL_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_TO_BOOL_BOOL_data_holes[1];

// _DELETE_DEREFplus_TO_BOOL_INT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_TO_BOOL_INT.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 28: 4d 85 e4                      testq   %r12, %r12
// 2b: 74 17                         je      0x44 <_JIT_ENTRY+0x44>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 38                         jle     0x76 <_JIT_ENTRY+0x76>
// 3e: 85 c0                         testl   %eax, %eax
// 40: 79 5a                         jns     0x9c <_JIT_ENTRY+0x9c>
// 42: eb 6a                         jmp     0xae <_JIT_ENTRY+0xae>
// 44: 49 8b 36                      movq    (%r14), %rsi
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _JIT_OPARG
// 51: 0f b7 d0                      movzwl  %ax, %edx
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5e: 4c 89 ff                      movq    %r15, %rdi
// 61: ff d0                         callq   *%rax
// 63: 4c 29 f3                      subq    %r14, %rbx
// 66: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6e: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 72: 31 c0                         xorl    %eax, %eax
// 74: eb 75                         jmp     0xeb <_JIT_ENTRY+0xeb>
// 76: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000078:  R_X86_64_64  .rodata.str1.1
// 80: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000082:  R_X86_64_64  _Py_NegativeRefcount
// 8a: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8f: 4c 89 e2                      movq    %r12, %rdx
// 92: ff d0                         callq   *%rax
// 94: 49 8b 04 24                   movq    (%r12), %rax
// 98: 85 c0                         testl   %eax, %eax
// 9a: 78 12                         js      0xae <_JIT_ENTRY+0xae>
// 9c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a6: ff d0                         callq   *%rax
// a8: 49 ff 0c 24                   decq    (%r12)
// ac: 74 47                         je      0xf5 <_JIT_ENTRY+0xf5>
// ae: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  PyLong_Type
// bc: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// c1: 74 56                         je      0x119 <_JIT_ENTRY+0x119>
// c3: 4c 29 f3                      subq    %r14, %rbx
// c6: 48 83 c3 b8                   addq    $-0x48, %rbx
// ca: 48 c1 eb 03                   shrq    $0x3, %rbx
// ce: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// d2: 49 8b 06                      movq    (%r14), %rax
// d5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d7:  R_X86_64_64  _JIT_TARGET
// df: 89 c9                         movl    %ecx, %ecx
// e1: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// e5: 48 05 c8 00 00 00             addq    $0xc8, %rax
// eb: 5b                            popq    %rbx
// ec: 41 5c                         popq    %r12
// ee: 41 5d                         popq    %r13
// f0: 41 5e                         popq    %r14
// f2: 41 5f                         popq    %r15
// f4: c3                            retq
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: 4c 89 e7                      movq    %r12, %rdi
// 102: ff d0                         callq   *%rax
// 104: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 108: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010a:  R_X86_64_64  PyLong_Type
// 112: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 117: 75 aa                         jne     0xc3 <_JIT_ENTRY+0xc3>
// 119: 41 8b 44 24 10                movl    0x10(%r12), %eax
// 11e: 83 e0 03                      andl    $0x3, %eax
// 121: 83 f8 01                      cmpl    $0x1, %eax
// 124: 75 0c                         jne     0x132 <_JIT_ENTRY+0x132>
// 126: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000128:  R_X86_64_64  _Py_FalseStruct
// 130: eb 5a                         jmp     0x18c <_JIT_ENTRY+0x18c>
// 132: 49 8b 04 24                   movq    (%r12), %rax
// 136: 48 85 c0                      testq   %rax, %rax
// 139: 7f 22                         jg      0x15d <_JIT_ENTRY+0x15d>
// 13b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000013d:  R_X86_64_64  .rodata.str1.1
// 145: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000147:  R_X86_64_64  _Py_NegativeRefcount
// 14f: be a0 00 00 00                movl    $0xa0, %esi
// 154: 4c 89 e2                      movq    %r12, %rdx
// 157: ff d0                         callq   *%rax
// 159: 49 8b 04 24                   movq    (%r12), %rax
// 15d: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000015f:  R_X86_64_64  _Py_TrueStruct
// 167: 85 c0                         testl   %eax, %eax
// 169: 78 21                         js      0x18c <_JIT_ENTRY+0x18c>
// 16b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 175: ff d0                         callq   *%rax
// 177: 49 ff 0c 24                   decq    (%r12)
// 17b: 75 0f                         jne     0x18c <_JIT_ENTRY+0x18c>
// 17d: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017f:  R_X86_64_64  _Py_Dealloc
// 187: 4c 89 e7                      movq    %r12, %rdi
// 18a: ff d0                         callq   *%rax
// 18c: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 190: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000192:  R_X86_64_64  _JIT_CONTINUE
// 19a: 4c 89 f7                      movq    %r14, %rdi
// 19d: 48 89 de                      movq    %rbx, %rsi
// 1a0: 4c 89 fa                      movq    %r15, %rdx
// 1a3: 5b                            popq    %rbx
// 1a4: 41 5c                         popq    %r12
// 1a6: 41 5d                         popq    %r13
// 1a8: 41 5e                         popq    %r14
// 1aa: 41 5f                         popq    %r15
// 1ac: ff e0                         jmpq    *%rax
// 1ae: 
static const unsigned char _DELETE_DEREFplus_TO_BOOL_INT_code_body[431] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x38, 0x85, 0xc0, 0x79, 0x5a, 0xeb, 0x6a, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x75, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x47, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x56, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0xaa, 0x41, 0x8b, 0x44, 0x24, 0x10, 0x83, 0xe0, 0x03, 0x83, 0xf8, 0x01, 0x75, 0x0c, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x5a, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xa0, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_TO_BOOL_INT_code_holes[18] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x78, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x82, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyLong_Type, 0x0},
    {0x128, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x147, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x16d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17f, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x192, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_TO_BOOL_INT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_TO_BOOL_INT_data_holes[1];

// _DELETE_DEREFplus_TO_BOOL_LIST
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_TO_BOOL_LIST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 28: 4d 85 e4                      testq   %r12, %r12
// 2b: 74 17                         je      0x44 <_JIT_ENTRY+0x44>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 38                         jle     0x76 <_JIT_ENTRY+0x76>
// 3e: 85 c0                         testl   %eax, %eax
// 40: 79 5a                         jns     0x9c <_JIT_ENTRY+0x9c>
// 42: eb 6a                         jmp     0xae <_JIT_ENTRY+0xae>
// 44: 49 8b 36                      movq    (%r14), %rsi
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _JIT_OPARG
// 51: 0f b7 d0                      movzwl  %ax, %edx
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5e: 4c 89 ff                      movq    %r15, %rdi
// 61: ff d0                         callq   *%rax
// 63: 4c 29 f3                      subq    %r14, %rbx
// 66: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6e: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 72: 31 c0                         xorl    %eax, %eax
// 74: eb 75                         jmp     0xeb <_JIT_ENTRY+0xeb>
// 76: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000078:  R_X86_64_64  .rodata.str1.1
// 80: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000082:  R_X86_64_64  _Py_NegativeRefcount
// 8a: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8f: 4c 89 e2                      movq    %r12, %rdx
// 92: ff d0                         callq   *%rax
// 94: 49 8b 04 24                   movq    (%r12), %rax
// 98: 85 c0                         testl   %eax, %eax
// 9a: 78 12                         js      0xae <_JIT_ENTRY+0xae>
// 9c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a6: ff d0                         callq   *%rax
// a8: 49 ff 0c 24                   decq    (%r12)
// ac: 74 47                         je      0xf5 <_JIT_ENTRY+0xf5>
// ae: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  PyList_Type
// bc: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// c1: 74 56                         je      0x119 <_JIT_ENTRY+0x119>
// c3: 4c 29 f3                      subq    %r14, %rbx
// c6: 48 83 c3 b8                   addq    $-0x48, %rbx
// ca: 48 c1 eb 03                   shrq    $0x3, %rbx
// ce: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// d2: 49 8b 06                      movq    (%r14), %rax
// d5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d7:  R_X86_64_64  _JIT_TARGET
// df: 89 c9                         movl    %ecx, %ecx
// e1: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// e5: 48 05 c8 00 00 00             addq    $0xc8, %rax
// eb: 5b                            popq    %rbx
// ec: 41 5c                         popq    %r12
// ee: 41 5d                         popq    %r13
// f0: 41 5e                         popq    %r14
// f2: 41 5f                         popq    %r15
// f4: c3                            retq
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: 4c 89 e7                      movq    %r12, %rdi
// 102: ff d0                         callq   *%rax
// 104: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 108: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010a:  R_X86_64_64  PyList_Type
// 112: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 117: 75 aa                         jne     0xc3 <_JIT_ENTRY+0xc3>
// 119: 49 8b 04 24                   movq    (%r12), %rax
// 11d: 4d 8b 6c 24 10                movq    0x10(%r12), %r13
// 122: 48 85 c0                      testq   %rax, %rax
// 125: 7e 06                         jle     0x12d <_JIT_ENTRY+0x12d>
// 127: 85 c0                         testl   %eax, %eax
// 129: 79 28                         jns     0x153 <_JIT_ENTRY+0x153>
// 12b: eb 47                         jmp     0x174 <_JIT_ENTRY+0x174>
// 12d: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000012f:  R_X86_64_64  .rodata.str1.1
// 137: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000139:  R_X86_64_64  _Py_NegativeRefcount
// 141: be ae 00 00 00                movl    $0xae, %esi
// 146: 4c 89 e2                      movq    %r12, %rdx
// 149: ff d0                         callq   *%rax
// 14b: 49 8b 04 24                   movq    (%r12), %rax
// 14f: 85 c0                         testl   %eax, %eax
// 151: 78 21                         js      0x174 <_JIT_ENTRY+0x174>
// 153: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000155:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 15d: ff d0                         callq   *%rax
// 15f: 49 ff 0c 24                   decq    (%r12)
// 163: 75 0f                         jne     0x174 <_JIT_ENTRY+0x174>
// 165: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000167:  R_X86_64_64  _Py_Dealloc
// 16f: 4c 89 e7                      movq    %r12, %rdi
// 172: ff d0                         callq   *%rax
// 174: 4d 85 ed                      testq   %r13, %r13
// 177: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000179:  R_X86_64_64  _Py_FalseStruct
// 181: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 0000000000000183:  R_X86_64_64  _Py_TrueStruct
// 18b: 48 0f 44 c8                   cmoveq  %rax, %rcx
// 18f: 48 89 4b f8                   movq    %rcx, -0x8(%rbx)
// 193: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000195:  R_X86_64_64  _JIT_CONTINUE
// 19d: 4c 89 f7                      movq    %r14, %rdi
// 1a0: 48 89 de                      movq    %rbx, %rsi
// 1a3: 4c 89 fa                      movq    %r15, %rdx
// 1a6: 5b                            popq    %rbx
// 1a7: 41 5c                         popq    %r12
// 1a9: 41 5d                         popq    %r13
// 1ab: 41 5e                         popq    %r14
// 1ad: 41 5f                         popq    %r15
// 1af: ff e0                         jmpq    *%rax
// 1b1: 
static const unsigned char _DELETE_DEREFplus_TO_BOOL_LIST_code_body[434] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x38, 0x85, 0xc0, 0x79, 0x5a, 0xeb, 0x6a, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x75, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x47, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x56, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0xaa, 0x49, 0x8b, 0x04, 0x24, 0x4d, 0x8b, 0x6c, 0x24, 0x10, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xae, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x85, 0xed, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x44, 0xc8, 0x48, 0x89, 0x4b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_TO_BOOL_LIST_code_holes[18] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x78, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x82, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x12f, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x155, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x167, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x179, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x195, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_TO_BOOL_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_TO_BOOL_LIST_data_holes[1];

// _DELETE_DEREFplus_TO_BOOL_NONE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_TO_BOOL_NONE.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 38                         jle     0x75 <_JIT_ENTRY+0x75>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 5a                         jns     0x9b <_JIT_ENTRY+0x9b>
// 41: eb 6a                         jmp     0xad <_JIT_ENTRY+0xad>
// 43: 49 8b 36                      movq    (%r14), %rsi
// 46: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000048:  R_X86_64_64  _JIT_OPARG
// 50: 0f b7 d0                      movzwl  %ax, %edx
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5d: 4c 89 ff                      movq    %r15, %rdi
// 60: ff d0                         callq   *%rax
// 62: 4c 29 f3                      subq    %r14, %rbx
// 65: 48 83 c3 b8                   addq    $-0x48, %rbx
// 69: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 71: 31 c0                         xorl    %eax, %eax
// 73: eb 70                         jmp     0xe5 <_JIT_ENTRY+0xe5>
// 75: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000077:  R_X86_64_64  .rodata.str1.1
// 7f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000081:  R_X86_64_64  _Py_NegativeRefcount
// 89: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8e: 4c 89 e2                      movq    %r12, %rdx
// 91: ff d0                         callq   *%rax
// 93: 49 8b 04 24                   movq    (%r12), %rax
// 97: 85 c0                         testl   %eax, %eax
// 99: 78 12                         js      0xad <_JIT_ENTRY+0xad>
// 9b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009d:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a5: ff d0                         callq   *%rax
// a7: 49 ff 0c 24                   decq    (%r12)
// ab: 74 44                         je      0xf1 <_JIT_ENTRY+0xf1>
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_NoneStruct
// b7: 48 39 43 f8                   cmpq    %rax, -0x8(%rbx)
// bb: 74 53                         je      0x110 <_JIT_ENTRY+0x110>
// bd: 4c 29 f3                      subq    %r14, %rbx
// c0: 48 83 c3 b8                   addq    $-0x48, %rbx
// c4: 48 c1 eb 03                   shrq    $0x3, %rbx
// c8: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// cc: 49 8b 06                      movq    (%r14), %rax
// cf: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d1:  R_X86_64_64  _JIT_TARGET
// d9: 89 c9                         movl    %ecx, %ecx
// db: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// df: 48 05 c8 00 00 00             addq    $0xc8, %rax
// e5: 48 83 c4 08                   addq    $0x8, %rsp
// e9: 5b                            popq    %rbx
// ea: 41 5c                         popq    %r12
// ec: 41 5e                         popq    %r14
// ee: 41 5f                         popq    %r15
// f0: c3                            retq
// f1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f3:  R_X86_64_64  _Py_Dealloc
// fb: 4c 89 e7                      movq    %r12, %rdi
// fe: ff d0                         callq   *%rax
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _Py_NoneStruct
// 10a: 48 39 43 f8                   cmpq    %rax, -0x8(%rbx)
// 10e: 75 ad                         jne     0xbd <_JIT_ENTRY+0xbd>
// 110: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000112:  R_X86_64_64  _Py_FalseStruct
// 11a: 48 89 43 f8                   movq    %rax, -0x8(%rbx)
// 11e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000120:  R_X86_64_64  _JIT_CONTINUE
// 128: 4c 89 f7                      movq    %r14, %rdi
// 12b: 48 89 de                      movq    %rbx, %rsi
// 12e: 4c 89 fa                      movq    %r15, %rdx
// 131: 48 83 c4 08                   addq    $0x8, %rsp
// 135: 5b                            popq    %rbx
// 136: 41 5c                         popq    %r12
// 138: 41 5e                         popq    %r14
// 13a: 41 5f                         popq    %r15
// 13c: ff e0                         jmpq    *%rax
// 13e: 
static const unsigned char _DELETE_DEREFplus_TO_BOOL_NONE_code_body[319] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x38, 0x85, 0xc0, 0x79, 0x5a, 0xeb, 0x6a, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x70, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x44, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x43, 0xf8, 0x74, 0x53, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x43, 0xf8, 0x75, 0xad, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x43, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_TO_BOOL_NONE_code_holes[13] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x48, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x77, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x81, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9d, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0xd1, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0x112, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x120, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_TO_BOOL_NONE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_TO_BOOL_NONE_data_holes[1];

// _DELETE_DEREFplus_TO_BOOL_STR
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_TO_BOOL_STR.o:       file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 55                         pushq   %r13
// 6: 41 54                         pushq   %r12
// 8: 53                            pushq   %rbx
// 9: 49 89 d7                      movq    %rdx, %r15
// c: 48 89 f3                      movq    %rsi, %rbx
// f: 49 89 fe                      movq    %rdi, %r14
// 12: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000014:  R_X86_64_64  _JIT_OPARG
// 1c: 0f b7 c0                      movzwl  %ax, %eax
// 1f: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 24: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 28: 4d 85 e4                      testq   %r12, %r12
// 2b: 74 17                         je      0x44 <_JIT_ENTRY+0x44>
// 2d: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 35: 49 8b 04 24                   movq    (%r12), %rax
// 39: 48 85 c0                      testq   %rax, %rax
// 3c: 7e 38                         jle     0x76 <_JIT_ENTRY+0x76>
// 3e: 85 c0                         testl   %eax, %eax
// 40: 79 5a                         jns     0x9c <_JIT_ENTRY+0x9c>
// 42: eb 6a                         jmp     0xae <_JIT_ENTRY+0xae>
// 44: 49 8b 36                      movq    (%r14), %rsi
// 47: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000049:  R_X86_64_64  _JIT_OPARG
// 51: 0f b7 d0                      movzwl  %ax, %edx
// 54: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000056:  R_X86_64_64  _PyEval_FormatExcUnbound
// 5e: 4c 89 ff                      movq    %r15, %rdi
// 61: ff d0                         callq   *%rax
// 63: 4c 29 f3                      subq    %r14, %rbx
// 66: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 6e: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 72: 31 c0                         xorl    %eax, %eax
// 74: eb 75                         jmp     0xeb <_JIT_ENTRY+0xeb>
// 76: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000078:  R_X86_64_64  .rodata.str1.1
// 80: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000082:  R_X86_64_64  _Py_NegativeRefcount
// 8a: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8f: 4c 89 e2                      movq    %r12, %rdx
// 92: ff d0                         callq   *%rax
// 94: 49 8b 04 24                   movq    (%r12), %rax
// 98: 85 c0                         testl   %eax, %eax
// 9a: 78 12                         js      0xae <_JIT_ENTRY+0xae>
// 9c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a6: ff d0                         callq   *%rax
// a8: 49 ff 0c 24                   decq    (%r12)
// ac: 74 47                         je      0xf5 <_JIT_ENTRY+0xf5>
// ae: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// b2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b4:  R_X86_64_64  PyUnicode_Type
// bc: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// c1: 74 56                         je      0x119 <_JIT_ENTRY+0x119>
// c3: 4c 29 f3                      subq    %r14, %rbx
// c6: 48 83 c3 b8                   addq    $-0x48, %rbx
// ca: 48 c1 eb 03                   shrq    $0x3, %rbx
// ce: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// d2: 49 8b 06                      movq    (%r14), %rax
// d5: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d7:  R_X86_64_64  _JIT_TARGET
// df: 89 c9                         movl    %ecx, %ecx
// e1: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// e5: 48 05 c8 00 00 00             addq    $0xc8, %rax
// eb: 5b                            popq    %rbx
// ec: 41 5c                         popq    %r12
// ee: 41 5d                         popq    %r13
// f0: 41 5e                         popq    %r14
// f2: 41 5f                         popq    %r15
// f4: c3                            retq
// f5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f7:  R_X86_64_64  _Py_Dealloc
// ff: 4c 89 e7                      movq    %r12, %rdi
// 102: ff d0                         callq   *%rax
// 104: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// 108: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010a:  R_X86_64_64  PyUnicode_Type
// 112: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 117: 75 aa                         jne     0xc3 <_JIT_ENTRY+0xc3>
// 119: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011b:  R_X86_64_64  _PyRuntime
// 123: 48 05 00 a1 00 00             addq    $0xa100, %rax           # imm = 0xA100
// 129: 49 39 c4                      cmpq    %rax, %r12
// 12c: 74 5c                         je      0x18a <_JIT_ENTRY+0x18a>
// 12e: 49 8b 04 24                   movq    (%r12), %rax
// 132: 48 85 c0                      testq   %rax, %rax
// 135: 7f 22                         jg      0x159 <_JIT_ENTRY+0x159>
// 137: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000139:  R_X86_64_64  .rodata.str1.1
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_NegativeRefcount
// 14b: be cb 00 00 00                movl    $0xcb, %esi
// 150: 4c 89 e2                      movq    %r12, %rdx
// 153: ff d0                         callq   *%rax
// 155: 49 8b 04 24                   movq    (%r12), %rax
// 159: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000015b:  R_X86_64_64  _Py_TrueStruct
// 163: 85 c0                         testl   %eax, %eax
// 165: 78 2d                         js      0x194 <_JIT_ENTRY+0x194>
// 167: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000169:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 171: ff d0                         callq   *%rax
// 173: 49 ff 0c 24                   decq    (%r12)
// 177: 75 1b                         jne     0x194 <_JIT_ENTRY+0x194>
// 179: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017b:  R_X86_64_64  _Py_Dealloc
// 183: 4c 89 e7                      movq    %r12, %rdi
// 186: ff d0                         callq   *%rax
// 188: eb 0a                         jmp     0x194 <_JIT_ENTRY+0x194>
// 18a: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 000000000000018c:  R_X86_64_64  _Py_FalseStruct
// 194: 4c 89 6b f8                   movq    %r13, -0x8(%rbx)
// 198: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000019a:  R_X86_64_64  _JIT_CONTINUE
// 1a2: 4c 89 f7                      movq    %r14, %rdi
// 1a5: 48 89 de                      movq    %rbx, %rsi
// 1a8: 4c 89 fa                      movq    %r15, %rdx
// 1ab: 5b                            popq    %rbx
// 1ac: 41 5c                         popq    %r12
// 1ae: 41 5d                         popq    %r13
// 1b0: 41 5e                         popq    %r14
// 1b2: 41 5f                         popq    %r15
// 1b4: ff e0                         jmpq    *%rax
// 1b6: 
static const unsigned char _DELETE_DEREFplus_TO_BOOL_STR_code_body[439] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x38, 0x85, 0xc0, 0x79, 0x5a, 0xeb, 0x6a, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0xeb, 0x75, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x47, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x56, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x49, 0x8b, 0x06, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0xaa, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x05, 0x00, 0xa1, 0x00, 0x00, 0x49, 0x39, 0xc4, 0x74, 0x5c, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xcb, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x2d, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x1b, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0xeb, 0x0a, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_TO_BOOL_STR_code_holes[19] = {
    {0x14, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x49, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x56, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x78, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x82, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb4, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0xd7, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0xf7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x10a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyUnicode_Type, 0x0},
    {0x11b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyRuntime, 0x0},
    {0x139, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x15b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0x169, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x17b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x18c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0x19a, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_TO_BOOL_STR_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_TO_BOOL_STR_data_holes[1];

// _DELETE_DEREFplus_UNARY_INVERT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_UNARY_INVERT.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 21                         je      0x50 <_JIT_ENTRY+0x50>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 34                         jle     0x74 <_JIT_ENTRY+0x74>
// 40: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000042:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a: 85 c0                         testl   %eax, %eax
// 4c: 79 56                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 4e: eb 6b                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 50: 49 8b 36                      movq    (%r14), %rsi
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _JIT_OPARG
// 5d: 0f b7 d0                      movzwl  %ax, %edx
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _PyEval_FormatExcUnbound
// 6a: 4c 89 ff                      movq    %r15, %rdi
// 6d: ff d0                         callq   *%rax
// 6f: e9 de 00 00 00                jmp     0x152 <_JIT_ENTRY+0x152>
// 74: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000076:  R_X86_64_64  .rodata.str1.1
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _Py_NegativeRefcount
// 88: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 49 8b 04 24                   movq    (%r12), %rax
// 96: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000098:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 17                         js      0xbb <_JIT_ENTRY+0xbb>
// a4: ff d5                         callq   *%rbp
// a6: 49 ff 0c 24                   decq    (%r12)
// aa: 75 0f                         jne     0xbb <_JIT_ENTRY+0xbb>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_Dealloc
// b6: 4c 89 e7                      movq    %r12, %rdi
// b9: ff d0                         callq   *%rax
// bb: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c1:  R_X86_64_64  PyNumber_Invert
// c9: 4c 89 ef                      movq    %r13, %rdi
// cc: ff d0                         callq   *%rax
// ce: 49 89 c4                      movq    %rax, %r12
// d1: 49 8b 45 00                   movq    (%r13), %rax
// d5: 48 85 c0                      testq   %rax, %rax
// d8: 7e 06                         jle     0xe0 <_JIT_ENTRY+0xe0>
// da: 85 c0                         testl   %eax, %eax
// dc: 79 28                         jns     0x106 <_JIT_ENTRY+0x106>
// de: eb 2e                         jmp     0x10e <_JIT_ENTRY+0x10e>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be e6 00 00 00                movl    $0xe6, %esi
// f9: 4c 89 ea                      movq    %r13, %rdx
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 08                         js      0x10e <_JIT_ENTRY+0x10e>
// 106: ff d5                         callq   *%rbp
// 108: 49 ff 4d 00                   decq    (%r13)
// 10c: 74 2c                         je      0x13a <_JIT_ENTRY+0x13a>
// 10e: 4d 85 e4                      testq   %r12, %r12
// 111: 74 3b                         je      0x14e <_JIT_ENTRY+0x14e>
// 113: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _JIT_CONTINUE
// 121: 4c 89 f7                      movq    %r14, %rdi
// 124: 48 89 de                      movq    %rbx, %rsi
// 127: 4c 89 fa                      movq    %r15, %rdx
// 12a: 48 83 c4 08                   addq    $0x8, %rsp
// 12e: 5b                            popq    %rbx
// 12f: 41 5c                         popq    %r12
// 131: 41 5d                         popq    %r13
// 133: 41 5e                         popq    %r14
// 135: 41 5f                         popq    %r15
// 137: 5d                            popq    %rbp
// 138: ff e0                         jmpq    *%rax
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _Py_Dealloc
// 144: 4c 89 ef                      movq    %r13, %rdi
// 147: ff d0                         callq   *%rax
// 149: 4d 85 e4                      testq   %r12, %r12
// 14c: 75 c5                         jne     0x113 <_JIT_ENTRY+0x113>
// 14e: 48 83 c3 f8                   addq    $-0x8, %rbx
// 152: 4c 29 f3                      subq    %r14, %rbx
// 155: 48 83 c3 b8                   addq    $-0x48, %rbx
// 159: 48 c1 eb 03                   shrq    $0x3, %rbx
// 15d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 161: 31 c0                         xorl    %eax, %eax
// 163: 48 83 c4 08                   addq    $0x8, %rsp
// 167: 5b                            popq    %rbx
// 168: 41 5c                         popq    %r12
// 16a: 41 5d                         popq    %r13
// 16c: 41 5e                         popq    %r14
// 16e: 41 5f                         popq    %r15
// 170: 5d                            popq    %rbp
// 171: c3                            retq
// 172: 
static const unsigned char _DELETE_DEREFplus_UNARY_INVERT_code_body[371] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x21, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x34, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x56, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xde, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x2e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xe6, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd5, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x2c, 0x4d, 0x85, 0xe4, 0x74, 0x3b, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xc5, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_UNARY_INVERT_code_holes[14] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Invert, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_UNARY_INVERT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_UNARY_INVERT_data_holes[1];

// _DELETE_DEREFplus_UNARY_NEGATIVE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_UNARY_NEGATIVE.o:    file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 21                         je      0x50 <_JIT_ENTRY+0x50>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 34                         jle     0x74 <_JIT_ENTRY+0x74>
// 40: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000042:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a: 85 c0                         testl   %eax, %eax
// 4c: 79 56                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 4e: eb 6b                         jmp     0xbb <_JIT_ENTRY+0xbb>
// 50: 49 8b 36                      movq    (%r14), %rsi
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _JIT_OPARG
// 5d: 0f b7 d0                      movzwl  %ax, %edx
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _PyEval_FormatExcUnbound
// 6a: 4c 89 ff                      movq    %r15, %rdi
// 6d: ff d0                         callq   *%rax
// 6f: e9 de 00 00 00                jmp     0x152 <_JIT_ENTRY+0x152>
// 74: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000076:  R_X86_64_64  .rodata.str1.1
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _Py_NegativeRefcount
// 88: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 49 8b 04 24                   movq    (%r12), %rax
// 96: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 0000000000000098:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 17                         js      0xbb <_JIT_ENTRY+0xbb>
// a4: ff d5                         callq   *%rbp
// a6: 49 ff 0c 24                   decq    (%r12)
// aa: 75 0f                         jne     0xbb <_JIT_ENTRY+0xbb>
// ac: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ae:  R_X86_64_64  _Py_Dealloc
// b6: 4c 89 e7                      movq    %r12, %rdi
// b9: ff d0                         callq   *%rax
// bb: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// bf: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c1:  R_X86_64_64  PyNumber_Negative
// c9: 4c 89 ef                      movq    %r13, %rdi
// cc: ff d0                         callq   *%rax
// ce: 49 89 c4                      movq    %rax, %r12
// d1: 49 8b 45 00                   movq    (%r13), %rax
// d5: 48 85 c0                      testq   %rax, %rax
// d8: 7e 06                         jle     0xe0 <_JIT_ENTRY+0xe0>
// da: 85 c0                         testl   %eax, %eax
// dc: 79 28                         jns     0x106 <_JIT_ENTRY+0x106>
// de: eb 2e                         jmp     0x10e <_JIT_ENTRY+0x10e>
// e0: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000e2:  R_X86_64_64  .rodata.str1.1
// ea: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ec:  R_X86_64_64  _Py_NegativeRefcount
// f4: be 71 00 00 00                movl    $0x71, %esi
// f9: 4c 89 ea                      movq    %r13, %rdx
// fc: ff d0                         callq   *%rax
// fe: 49 8b 45 00                   movq    (%r13), %rax
// 102: 85 c0                         testl   %eax, %eax
// 104: 78 08                         js      0x10e <_JIT_ENTRY+0x10e>
// 106: ff d5                         callq   *%rbp
// 108: 49 ff 4d 00                   decq    (%r13)
// 10c: 74 2c                         je      0x13a <_JIT_ENTRY+0x13a>
// 10e: 4d 85 e4                      testq   %r12, %r12
// 111: 74 3b                         je      0x14e <_JIT_ENTRY+0x14e>
// 113: 4c 89 63 f8                   movq    %r12, -0x8(%rbx)
// 117: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000119:  R_X86_64_64  _JIT_CONTINUE
// 121: 4c 89 f7                      movq    %r14, %rdi
// 124: 48 89 de                      movq    %rbx, %rsi
// 127: 4c 89 fa                      movq    %r15, %rdx
// 12a: 48 83 c4 08                   addq    $0x8, %rsp
// 12e: 5b                            popq    %rbx
// 12f: 41 5c                         popq    %r12
// 131: 41 5d                         popq    %r13
// 133: 41 5e                         popq    %r14
// 135: 41 5f                         popq    %r15
// 137: 5d                            popq    %rbp
// 138: ff e0                         jmpq    *%rax
// 13a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013c:  R_X86_64_64  _Py_Dealloc
// 144: 4c 89 ef                      movq    %r13, %rdi
// 147: ff d0                         callq   *%rax
// 149: 4d 85 e4                      testq   %r12, %r12
// 14c: 75 c5                         jne     0x113 <_JIT_ENTRY+0x113>
// 14e: 48 83 c3 f8                   addq    $-0x8, %rbx
// 152: 4c 29 f3                      subq    %r14, %rbx
// 155: 48 83 c3 b8                   addq    $-0x48, %rbx
// 159: 48 c1 eb 03                   shrq    $0x3, %rbx
// 15d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 161: 31 c0                         xorl    %eax, %eax
// 163: 48 83 c4 08                   addq    $0x8, %rsp
// 167: 5b                            popq    %rbx
// 168: 41 5c                         popq    %r12
// 16a: 41 5d                         popq    %r13
// 16c: 41 5e                         popq    %r14
// 16e: 41 5f                         popq    %r15
// 170: 5d                            popq    %rbp
// 171: c3                            retq
// 172: 
static const unsigned char _DELETE_DEREFplus_UNARY_NEGATIVE_code_body[371] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x21, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x34, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x56, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0xde, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x17, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x6b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x49, 0x89, 0xc4, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x2e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x71, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xea, 0xff, 0xd0, 0x49, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x08, 0xff, 0xd5, 0x49, 0xff, 0x4d, 0x00, 0x74, 0x2c, 0x4d, 0x85, 0xe4, 0x74, 0x3b, 0x4c, 0x89, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x4d, 0x85, 0xe4, 0x75, 0xc5, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_UNARY_NEGATIVE_code_holes[14] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xae, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc1, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyNumber_Negative, 0x0},
    {0xe2, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x119, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
    {0x13c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_UNARY_NEGATIVE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_UNARY_NEGATIVE_data_holes[1];

// _DELETE_DEREFplus_UNARY_NOT
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_UNARY_NOT.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 41 57                         pushq   %r15
// 2: 41 56                         pushq   %r14
// 4: 41 54                         pushq   %r12
// 6: 53                            pushq   %rbx
// 7: 50                            pushq   %rax
// 8: 49 89 d7                      movq    %rdx, %r15
// b: 48 89 f3                      movq    %rsi, %rbx
// e: 49 89 fe                      movq    %rdi, %r14
// 11: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000013:  R_X86_64_64  _JIT_OPARG
// 1b: 0f b7 c0                      movzwl  %ax, %eax
// 1e: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 23: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 27: 4d 85 e4                      testq   %r12, %r12
// 2a: 74 1a                         je      0x46 <_JIT_ENTRY+0x46>
// 2c: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 34: 49 8b 04 24                   movq    (%r12), %rax
// 38: 48 85 c0                      testq   %rax, %rax
// 3b: 7e 45                         jle     0x82 <_JIT_ENTRY+0x82>
// 3d: 85 c0                         testl   %eax, %eax
// 3f: 79 67                         jns     0xa8 <_JIT_ENTRY+0xa8>
// 41: e9 83 00 00 00                jmp     0xc9 <_JIT_ENTRY+0xc9>
// 46: 49 8b 36                      movq    (%r14), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 4c 29 f3                      subq    %r14, %rbx
// 68: 48 83 c3 b8                   addq    $-0x48, %rbx
// 6c: 48 c1 eb 03                   shrq    $0x3, %rbx
// 70: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 74: 31 c0                         xorl    %eax, %eax
// 76: 48 83 c4 08                   addq    $0x8, %rsp
// 7a: 5b                            popq    %rbx
// 7b: 41 5c                         popq    %r12
// 7d: 41 5e                         popq    %r14
// 7f: 41 5f                         popq    %r15
// 81: c3                            retq
// 82: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000084:  R_X86_64_64  .rodata.str1.1
// 8c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008e:  R_X86_64_64  _Py_NegativeRefcount
// 96: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 9b: 4c 89 e2                      movq    %r12, %rdx
// 9e: ff d0                         callq   *%rax
// a0: 49 8b 04 24                   movq    (%r12), %rax
// a4: 85 c0                         testl   %eax, %eax
// a6: 78 21                         js      0xc9 <_JIT_ENTRY+0xc9>
// a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// b2: ff d0                         callq   *%rax
// b4: 49 ff 0c 24                   decq    (%r12)
// b8: 75 0f                         jne     0xc9 <_JIT_ENTRY+0xc9>
// ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bc:  R_X86_64_64  _Py_Dealloc
// c4: 4c 89 e7                      movq    %r12, %rdi
// c7: ff d0                         callq   *%rax
// c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000cb:  R_X86_64_64  _Py_FalseStruct
// d3: 48 39 43 f8                   cmpq    %rax, -0x8(%rbx)
// d7: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000000d9:  R_X86_64_64  _Py_TrueStruct
// e1: 48 0f 45 c8                   cmovneq %rax, %rcx
// e5: 48 89 4b f8                   movq    %rcx, -0x8(%rbx)
// e9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000eb:  R_X86_64_64  _JIT_CONTINUE
// f3: 4c 89 f7                      movq    %r14, %rdi
// f6: 48 89 de                      movq    %rbx, %rsi
// f9: 4c 89 fa                      movq    %r15, %rdx
// fc: 48 83 c4 08                   addq    $0x8, %rsp
// 100: 5b                            popq    %rbx
// 101: 41 5c                         popq    %r12
// 103: 41 5e                         popq    %r14
// 105: 41 5f                         popq    %r15
// 107: ff e0                         jmpq    *%rax
// 109: 
static const unsigned char _DELETE_DEREFplus_UNARY_NOT_code_body[266] = {0x41, 0x57, 0x41, 0x56, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1a, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x45, 0x85, 0xc0, 0x79, 0x67, 0xe9, 0x83, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x43, 0xf8, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x0f, 0x45, 0xc8, 0x48, 0x89, 0x4b, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5e, 0x41, 0x5f, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_UNARY_NOT_code_holes[11] = {
    {0x13, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x84, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xaa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xcb, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_FalseStruct, 0x0},
    {0xd9, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_TrueStruct, 0x0},
    {0xeb, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_UNARY_NOT_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_UNARY_NOT_data_holes[1];

// _DELETE_DEREFplus_UNPACK_EX
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_UNPACK_EX.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 21                         je      0x50 <_JIT_ENTRY+0x50>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 34                         jle     0x74 <_JIT_ENTRY+0x74>
// 40: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000042:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a: 85 c0                         testl   %eax, %eax
// 4c: 79 56                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 4e: eb 6c                         jmp     0xbc <_JIT_ENTRY+0xbc>
// 50: 49 8b 36                      movq    (%r14), %rsi
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _JIT_OPARG
// 5d: 0f b7 d0                      movzwl  %ax, %edx
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _PyEval_FormatExcUnbound
// 6a: 4c 89 ff                      movq    %r15, %rdi
// 6d: ff d0                         callq   *%rax
// 6f: e9 0e 01 00 00                jmp     0x182 <_JIT_ENTRY+0x182>
// 74: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000076:  R_X86_64_64  .rodata.str1.1
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _Py_NegativeRefcount
// 88: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 49 8b 04 24                   movq    (%r12), %rax
// 96: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000098:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 18                         js      0xbc <_JIT_ENTRY+0xbc>
// a4: 41 ff d5                      callq   *%r13
// a7: 49 ff 0c 24                   decq    (%r12)
// ab: 75 0f                         jne     0xbc <_JIT_ENTRY+0xbc>
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_Dealloc
// b7: 4c 89 e7                      movq    %r12, %rdi
// ba: ff d0                         callq   *%rax
// bc: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _JIT_OPARG
// ca: 0f b6 cc                      movzbl  %ah, %ecx
// cd: 0f b6 d0                      movzbl  %al, %edx
// d0: 8d 04 0a                      leal    (%rdx,%rcx), %eax
// d3: ff c0                         incl    %eax
// d5: 4c 8d 44 c3 f8                leaq    -0x8(%rbx,%rax,8), %r8
// da: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000dc:  R_X86_64_64  _PyEval_UnpackIterable
// e4: 4c 89 ff                      movq    %r15, %rdi
// e7: 4c 89 e6                      movq    %r12, %rsi
// ea: ff d0                         callq   *%rax
// ec: 89 c5                         movl    %eax, %ebp
// ee: 49 8b 04 24                   movq    (%r12), %rax
// f2: 48 85 c0                      testq   %rax, %rax
// f5: 7e 06                         jle     0xfd <_JIT_ENTRY+0xfd>
// f7: 85 c0                         testl   %eax, %eax
// f9: 79 28                         jns     0x123 <_JIT_ENTRY+0x123>
// fb: eb 3e                         jmp     0x13b <_JIT_ENTRY+0x13b>
// fd: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000ff:  R_X86_64_64  .rodata.str1.1
// 107: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000109:  R_X86_64_64  _Py_NegativeRefcount
// 111: be b7 03 00 00                movl    $0x3b7, %esi            # imm = 0x3B7
// 116: 4c 89 e2                      movq    %r12, %rdx
// 119: ff d0                         callq   *%rax
// 11b: 49 8b 04 24                   movq    (%r12), %rax
// 11f: 85 c0                         testl   %eax, %eax
// 121: 78 18                         js      0x13b <_JIT_ENTRY+0x13b>
// 123: 41 ff d5                      callq   *%r13
// 126: 49 ff 0c 24                   decq    (%r12)
// 12a: 75 0f                         jne     0x13b <_JIT_ENTRY+0x13b>
// 12c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012e:  R_X86_64_64  _Py_Dealloc
// 136: 4c 89 e7                      movq    %r12, %rdi
// 139: ff d0                         callq   *%rax
// 13b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000013d:  R_X86_64_64  _JIT_OPARG
// 145: 0f b6 c8                      movzbl  %al, %ecx
// 148: 0f b6 c4                      movzbl  %ah, %eax
// 14b: 01 c8                         addl    %ecx, %eax
// 14d: 31 c9                         xorl    %ecx, %ecx
// 14f: 85 ed                         testl   %ebp, %ebp
// 151: 48 0f 45 c8                   cmovneq %rax, %rcx
// 155: 48 8d 1c cb                   leaq    (%rbx,%rcx,8), %rbx
// 159: 74 23                         je      0x17e <_JIT_ENTRY+0x17e>
// 15b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015d:  R_X86_64_64  _JIT_CONTINUE
// 165: 4c 89 f7                      movq    %r14, %rdi
// 168: 48 89 de                      movq    %rbx, %rsi
// 16b: 4c 89 fa                      movq    %r15, %rdx
// 16e: 48 83 c4 08                   addq    $0x8, %rsp
// 172: 5b                            popq    %rbx
// 173: 41 5c                         popq    %r12
// 175: 41 5d                         popq    %r13
// 177: 41 5e                         popq    %r14
// 179: 41 5f                         popq    %r15
// 17b: 5d                            popq    %rbp
// 17c: ff e0                         jmpq    *%rax
// 17e: 48 83 c3 f8                   addq    $-0x8, %rbx
// 182: 4c 29 f3                      subq    %r14, %rbx
// 185: 48 83 c3 b8                   addq    $-0x48, %rbx
// 189: 48 c1 eb 03                   shrq    $0x3, %rbx
// 18d: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 191: 31 c0                         xorl    %eax, %eax
// 193: 48 83 c4 08                   addq    $0x8, %rsp
// 197: 5b                            popq    %rbx
// 198: 41 5c                         popq    %r12
// 19a: 41 5d                         popq    %r13
// 19c: 41 5e                         popq    %r14
// 19e: 41 5f                         popq    %r15
// 1a0: 5d                            popq    %rbp
// 1a1: c3                            retq
// 1a2: 
static const unsigned char _DELETE_DEREFplus_UNPACK_EX_code_body[419] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x21, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x34, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x56, 0xeb, 0x6c, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x0e, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0xcc, 0x0f, 0xb6, 0xd0, 0x8d, 0x04, 0x0a, 0xff, 0xc0, 0x4c, 0x8d, 0x44, 0xc3, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x3e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xb7, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0xc8, 0x0f, 0xb6, 0xc4, 0x01, 0xc8, 0x31, 0xc9, 0x85, 0xed, 0x48, 0x0f, 0x45, 0xc8, 0x48, 0x8d, 0x1c, 0xcb, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_UNPACK_EX_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xdc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0xff, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x109, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x12e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x13d, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x15d, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_UNPACK_EX_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_UNPACK_EX_data_holes[1];

// _DELETE_DEREFplus_UNPACK_SEQUENCE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_UNPACK_SEQUENCE.o:   file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 48 89 f3                      movq    %rsi, %rbx
// 11: 49 89 fe                      movq    %rdi, %r14
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 21                         je      0x50 <_JIT_ENTRY+0x50>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 34                         jle     0x74 <_JIT_ENTRY+0x74>
// 40: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000042:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 4a: 85 c0                         testl   %eax, %eax
// 4c: 79 56                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 4e: eb 6c                         jmp     0xbc <_JIT_ENTRY+0xbc>
// 50: 49 8b 36                      movq    (%r14), %rsi
// 53: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000055:  R_X86_64_64  _JIT_OPARG
// 5d: 0f b7 d0                      movzwl  %ax, %edx
// 60: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000062:  R_X86_64_64  _PyEval_FormatExcUnbound
// 6a: 4c 89 ff                      movq    %r15, %rdi
// 6d: ff d0                         callq   *%rax
// 6f: e9 0f 01 00 00                jmp     0x183 <_JIT_ENTRY+0x183>
// 74: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000076:  R_X86_64_64  .rodata.str1.1
// 7e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000080:  R_X86_64_64  _Py_NegativeRefcount
// 88: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8d: 4c 89 e2                      movq    %r12, %rdx
// 90: ff d0                         callq   *%rax
// 92: 49 8b 04 24                   movq    (%r12), %rax
// 96: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 0000000000000098:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 18                         js      0xbc <_JIT_ENTRY+0xbc>
// a4: 41 ff d5                      callq   *%r13
// a7: 49 ff 0c 24                   decq    (%r12)
// ab: 75 0f                         jne     0xbc <_JIT_ENTRY+0xbc>
// ad: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000af:  R_X86_64_64  _Py_Dealloc
// b7: 4c 89 e7                      movq    %r12, %rdi
// ba: ff d0                         callq   *%rax
// bc: 4c 8b 63 f8                   movq    -0x8(%rbx), %r12
// c0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c2:  R_X86_64_64  _JIT_OPARG
// ca: 0f b7 c8                      movzwl  %ax, %ecx
// cd: 4c 8d 04 cb                   leaq    (%rbx,%rcx,8), %r8
// d1: 49 83 c0 f8                   addq    $-0x8, %r8
// d5: 0f b7 d0                      movzwl  %ax, %edx
// d8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000da:  R_X86_64_64  _PyEval_UnpackIterable
// e2: 4c 89 ff                      movq    %r15, %rdi
// e5: 4c 89 e6                      movq    %r12, %rsi
// e8: b9 ff ff ff ff                movl    $0xffffffff, %ecx       # imm = 0xFFFFFFFF
// ed: ff d0                         callq   *%rax
// ef: 89 c5                         movl    %eax, %ebp
// f1: 49 8b 04 24                   movq    (%r12), %rax
// f5: 48 85 c0                      testq   %rax, %rax
// f8: 7e 06                         jle     0x100 <_JIT_ENTRY+0x100>
// fa: 85 c0                         testl   %eax, %eax
// fc: 79 28                         jns     0x126 <_JIT_ENTRY+0x126>
// fe: eb 3e                         jmp     0x13e <_JIT_ENTRY+0x13e>
// 100: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000102:  R_X86_64_64  .rodata.str1.1
// 10a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000010c:  R_X86_64_64  _Py_NegativeRefcount
// 114: be 75 03 00 00                movl    $0x375, %esi            # imm = 0x375
// 119: 4c 89 e2                      movq    %r12, %rdx
// 11c: ff d0                         callq   *%rax
// 11e: 49 8b 04 24                   movq    (%r12), %rax
// 122: 85 c0                         testl   %eax, %eax
// 124: 78 18                         js      0x13e <_JIT_ENTRY+0x13e>
// 126: 41 ff d5                      callq   *%r13
// 129: 49 ff 0c 24                   decq    (%r12)
// 12d: 75 0f                         jne     0x13e <_JIT_ENTRY+0x13e>
// 12f: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000131:  R_X86_64_64  _Py_Dealloc
// 139: 4c 89 e7                      movq    %r12, %rdi
// 13c: ff d0                         callq   *%rax
// 13e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000140:  R_X86_64_64  _JIT_OPARG
// 148: 0f b7 c0                      movzwl  %ax, %eax
// 14b: 48 ff c8                      decq    %rax
// 14e: 31 c9                         xorl    %ecx, %ecx
// 150: 85 ed                         testl   %ebp, %ebp
// 152: 48 0f 45 c8                   cmovneq %rax, %rcx
// 156: 48 8d 1c cb                   leaq    (%rbx,%rcx,8), %rbx
// 15a: 74 23                         je      0x17f <_JIT_ENTRY+0x17f>
// 15c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015e:  R_X86_64_64  _JIT_CONTINUE
// 166: 4c 89 f7                      movq    %r14, %rdi
// 169: 48 89 de                      movq    %rbx, %rsi
// 16c: 4c 89 fa                      movq    %r15, %rdx
// 16f: 48 83 c4 08                   addq    $0x8, %rsp
// 173: 5b                            popq    %rbx
// 174: 41 5c                         popq    %r12
// 176: 41 5d                         popq    %r13
// 178: 41 5e                         popq    %r14
// 17a: 41 5f                         popq    %r15
// 17c: 5d                            popq    %rbp
// 17d: ff e0                         jmpq    *%rax
// 17f: 48 83 c3 f8                   addq    $-0x8, %rbx
// 183: 4c 29 f3                      subq    %r14, %rbx
// 186: 48 83 c3 b8                   addq    $-0x48, %rbx
// 18a: 48 c1 eb 03                   shrq    $0x3, %rbx
// 18e: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 192: 31 c0                         xorl    %eax, %eax
// 194: 48 83 c4 08                   addq    $0x8, %rsp
// 198: 5b                            popq    %rbx
// 199: 41 5c                         popq    %r12
// 19b: 41 5d                         popq    %r13
// 19d: 41 5e                         popq    %r14
// 19f: 41 5f                         popq    %r15
// 1a1: 5d                            popq    %rbp
// 1a2: c3                            retq
// 1a3: 
static const unsigned char _DELETE_DEREFplus_UNPACK_SEQUENCE_code_body[420] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x21, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x34, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x79, 0x56, 0xeb, 0x6c, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0xe9, 0x0f, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc8, 0x4c, 0x8d, 0x04, 0xcb, 0x49, 0x83, 0xc0, 0xf8, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xe6, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x89, 0xc5, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x06, 0x85, 0xc0, 0x79, 0x28, 0xeb, 0x3e, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x75, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x18, 0x41, 0xff, 0xd5, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0xff, 0xc8, 0x31, 0xc9, 0x85, 0xed, 0x48, 0x0f, 0x45, 0xc8, 0x48, 0x8d, 0x1c, 0xcb, 0x74, 0x23, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x48, 0x83, 0xc3, 0xf8, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_UNPACK_SEQUENCE_code_holes[16] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x42, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x55, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x62, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x76, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x98, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xaf, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_UnpackIterable, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x10c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x131, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x140, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x15e, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_UNPACK_SEQUENCE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_UNPACK_SEQUENCE_data_holes[1];

// _DELETE_DEREFplus_UNPACK_SEQUENCE_LIST
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_UNPACK_SEQUENCE_LIST.o:      file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 18                   subq    $0x18, %rsp
// e: 49 89 d7                      movq    %rdx, %r15
// 11: 49 89 f6                      movq    %rsi, %r14
// 14: 48 89 fb                      movq    %rdi, %rbx
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 29: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2d: 4d 85 e4                      testq   %r12, %r12
// 30: 74 17                         je      0x49 <_JIT_ENTRY+0x49>
// 32: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3a: 49 8b 04 24                   movq    (%r12), %rax
// 3e: 48 85 c0                      testq   %rax, %rax
// 41: 7e 3b                         jle     0x7e <_JIT_ENTRY+0x7e>
// 43: 85 c0                         testl   %eax, %eax
// 45: 79 5d                         jns     0xa4 <_JIT_ENTRY+0xa4>
// 47: eb 71                         jmp     0xba <_JIT_ENTRY+0xba>
// 49: 48 8b 33                      movq    (%rbx), %rsi
// 4c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004e:  R_X86_64_64  _JIT_OPARG
// 56: 0f b7 d0                      movzwl  %ax, %edx
// 59: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000005b:  R_X86_64_64  _PyEval_FormatExcUnbound
// 63: 4c 89 ff                      movq    %r15, %rdi
// 66: ff d0                         callq   *%rax
// 68: 49 29 de                      subq    %rbx, %r14
// 6b: 49 83 c6 b8                   addq    $-0x48, %r14
// 6f: 49 c1 ee 03                   shrq    $0x3, %r14
// 73: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 77: 31 c0                         xorl    %eax, %eax
// 79: e9 39 01 00 00                jmp     0x1b7 <_JIT_ENTRY+0x1b7>
// 7e: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000080:  R_X86_64_64  .rodata.str1.1
// 88: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000008a:  R_X86_64_64  _Py_NegativeRefcount
// 92: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 97: 4c 89 e2                      movq    %r12, %rdx
// 9a: ff d0                         callq   *%rax
// 9c: 49 8b 04 24                   movq    (%r12), %rax
// a0: 85 c0                         testl   %eax, %eax
// a2: 78 16                         js      0xba <_JIT_ENTRY+0xba>
// a4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a6:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ae: ff d0                         callq   *%rax
// b0: 49 ff 0c 24                   decq    (%r12)
// b4: 0f 84 ae 00 00 00             je      0x168 <_JIT_ENTRY+0x168>
// ba: 49 8b 4e f8                   movq    -0x8(%r14), %rcx
// be: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c0:  R_X86_64_64  PyList_Type
// c8: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// cc: 0f 85 bd 00 00 00             jne     0x18f <_JIT_ENTRY+0x18f>
// d2: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d4:  R_X86_64_64  _JIT_OPARG
// dc: 0f b7 c0                      movzwl  %ax, %eax
// df: 48 39 41 10                   cmpq    %rax, 0x10(%rcx)
// e3: 0f 85 a6 00 00 00             jne     0x18f <_JIT_ENTRY+0x18f>
// e9: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// ee: 4c 89 7c 24 10                movq    %r15, 0x10(%rsp)
// f3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000f5:  R_X86_64_64  _JIT_OPARG
// fd: a9 ff ff 00 00                testl   $0xffff, %eax           # imm = 0xFFFF
// 102: 0f 8e be 00 00 00             jle     0x1c6 <_JIT_ENTRY+0x1c6>
// 108: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 10c: 48 8b 44 24 08                movq    0x8(%rsp), %rax
// 111: 48 8b 68 18                   movq    0x18(%rax), %rbp
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _JIT_OPARG
// 11f: 44 0f b7 f8                   movzwl  %ax, %r15d
// 123: 49 ff c7                      incq    %r15
// 126: eb 1d                         jmp     0x145 <_JIT_ENTRY+0x145>
// 128: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
// 130: 4d 89 65 00                   movq    %r12, (%r13)
// 134: 49 83 c5 08                   addq    $0x8, %r13
// 138: 49 ff cf                      decq    %r15
// 13b: 49 83 ff 01                   cmpq    $0x1, %r15
// 13f: 0f 8e 81 00 00 00             jle     0x1c6 <_JIT_ENTRY+0x1c6>
// 145: 41 8d 47 fe                   leal    -0x2(%r15), %eax
// 149: 4c 8b 64 c5 00                movq    (%rbp,%rax,8), %r12
// 14e: 41 8b 04 24                   movl    (%r12), %eax
// 152: ff c0                         incl    %eax
// 154: 74 da                         je      0x130 <_JIT_ENTRY+0x130>
// 156: 41 89 04 24                   movl    %eax, (%r12)
// 15a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015c:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 164: ff d0                         callq   *%rax
// 166: eb c8                         jmp     0x130 <_JIT_ENTRY+0x130>
// 168: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000016a:  R_X86_64_64  _Py_Dealloc
// 172: 4c 89 e7                      movq    %r12, %rdi
// 175: ff d0                         callq   *%rax
// 177: 49 8b 4e f8                   movq    -0x8(%r14), %rcx
// 17b: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000017d:  R_X86_64_64  PyList_Type
// 185: 48 39 41 08                   cmpq    %rax, 0x8(%rcx)
// 189: 0f 84 43 ff ff ff             je      0xd2 <_JIT_ENTRY+0xd2>
// 18f: 49 29 de                      subq    %rbx, %r14
// 192: 49 83 c6 b8                   addq    $-0x48, %r14
// 196: 49 c1 ee 03                   shrq    $0x3, %r14
// 19a: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 19e: 48 8b 03                      movq    (%rbx), %rax
// 1a1: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 00000000000001a3:  R_X86_64_64  _JIT_TARGET
// 1ab: 89 c9                         movl    %ecx, %ecx
// 1ad: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 1b1: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 1b7: 48 83 c4 18                   addq    $0x18, %rsp
// 1bb: 5b                            popq    %rbx
// 1bc: 41 5c                         popq    %r12
// 1be: 41 5d                         popq    %r13
// 1c0: 41 5e                         popq    %r14
// 1c2: 41 5f                         popq    %r15
// 1c4: 5d                            popq    %rbp
// 1c5: c3                            retq
// 1c6: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
// 1cb: 49 8b 04 24                   movq    (%r12), %rax
// 1cf: 48 85 c0                      testq   %rax, %rax
// 1d2: 7f 22                         jg      0x1f6 <_JIT_ENTRY+0x1f6>
// 1d4: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001d6:  R_X86_64_64  .rodata.str1.1
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _Py_NegativeRefcount
// 1e8: be ab 03 00 00                movl    $0x3ab, %esi            # imm = 0x3AB
// 1ed: 4c 89 e2                      movq    %r12, %rdx
// 1f0: ff d0                         callq   *%rax
// 1f2: 49 8b 04 24                   movq    (%r12), %rax
// 1f6: 85 c0                         testl   %eax, %eax
// 1f8: 4c 8b 7c 24 10                movq    0x10(%rsp), %r15
// 1fd: 78 21                         js      0x220 <_JIT_ENTRY+0x220>
// 1ff: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000201:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 209: ff d0                         callq   *%rax
// 20b: 49 ff 0c 24                   decq    (%r12)
// 20f: 75 0f                         jne     0x220 <_JIT_ENTRY+0x220>
// 211: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000213:  R_X86_64_64  _Py_Dealloc
// 21b: 4c 89 e7                      movq    %r12, %rdi
// 21e: ff d0                         callq   *%rax
// 220: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000222:  R_X86_64_64  _JIT_OPARG
// 22a: 0f b7 c0                      movzwl  %ax, %eax
// 22d: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 231: 48 83 c6 f8                   addq    $-0x8, %rsi
// 235: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000237:  R_X86_64_64  _JIT_CONTINUE
// 23f: 48 89 df                      movq    %rbx, %rdi
// 242: 4c 89 fa                      movq    %r15, %rdx
// 245: 48 83 c4 18                   addq    $0x18, %rsp
// 249: 5b                            popq    %rbx
// 24a: 41 5c                         popq    %r12
// 24c: 41 5d                         popq    %r13
// 24e: 41 5e                         popq    %r14
// 250: 41 5f                         popq    %r15
// 252: 5d                            popq    %rbp
// 253: ff e0                         jmpq    *%rax
// 255: 
static const unsigned char _DELETE_DEREFplus_UNPACK_SEQUENCE_LIST_code_body[598] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x18, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x71, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x39, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0xae, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x4e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x0f, 0x85, 0xbd, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x39, 0x41, 0x10, 0x0f, 0x85, 0xa6, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0x7c, 0x24, 0x10, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0xbe, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x6e, 0xf8, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b, 0x68, 0x18, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xf8, 0x49, 0xff, 0xc7, 0xeb, 0x1d, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x65, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x0f, 0x8e, 0x81, 0x00, 0x00, 0x00, 0x41, 0x8d, 0x47, 0xfe, 0x4c, 0x8b, 0x64, 0xc5, 0x00, 0x41, 0x8b, 0x04, 0x24, 0xff, 0xc0, 0x74, 0xda, 0x41, 0x89, 0x04, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xc8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x49, 0x8b, 0x4e, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0x41, 0x08, 0x0f, 0x84, 0x43, 0xff, 0xff, 0xff, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x4c, 0x8b, 0x64, 0x24, 0x08, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xab, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x7c, 0x24, 0x10, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x18, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_UNPACK_SEQUENCE_LIST_code_holes[21] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4e, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x5b, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x80, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x8a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa6, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xc0, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0xd4, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xf5, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x16a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyList_Type, 0x0},
    {0x1a3, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1d6, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x201, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x213, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x222, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x237, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_UNPACK_SEQUENCE_LIST_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_UNPACK_SEQUENCE_LIST_data_holes[1];

// _DELETE_DEREFplus_UNPACK_SEQUENCE_TUPLE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_UNPACK_SEQUENCE_TUPLE.o:     file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 3b                         jle     0x7b <_JIT_ENTRY+0x7b>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 5d                         jns     0xa1 <_JIT_ENTRY+0xa1>
// 44: eb 71                         jmp     0xb7 <_JIT_ENTRY+0xb7>
// 46: 48 8b 33                      movq    (%rbx), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 49 29 de                      subq    %rbx, %r14
// 68: 49 83 c6 b8                   addq    $-0x48, %r14
// 6c: 49 c1 ee 03                   shrq    $0x3, %r14
// 70: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 74: 31 c0                         xorl    %eax, %eax
// 76: e9 16 01 00 00                jmp     0x191 <_JIT_ENTRY+0x191>
// 7b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007d:  R_X86_64_64  .rodata.str1.1
// 85: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000087:  R_X86_64_64  _Py_NegativeRefcount
// 8f: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 94: 4c 89 e2                      movq    %r12, %rdx
// 97: ff d0                         callq   *%rax
// 99: 49 8b 04 24                   movq    (%r12), %rax
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 16                         js      0xb7 <_JIT_ENTRY+0xb7>
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ab: ff d0                         callq   *%rax
// ad: 49 ff 0c 24                   decq    (%r12)
// b1: 0f 84 8a 00 00 00             je      0x141 <_JIT_ENTRY+0x141>
// b7: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// bb: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000bd:  R_X86_64_64  PyTuple_Type
// c5: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// ca: 0f 85 99 00 00 00             jne     0x169 <_JIT_ENTRY+0x169>
// d0: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000d2:  R_X86_64_64  _JIT_OPARG
// da: 0f b7 c0                      movzwl  %ax, %eax
// dd: 49 39 44 24 10                cmpq    %rax, 0x10(%r12)
// e2: 0f 85 81 00 00 00             jne     0x169 <_JIT_ENTRY+0x169>
// e8: 4c 89 3c 24                   movq    %r15, (%rsp)
// ec: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ee:  R_X86_64_64  _JIT_OPARG
// f6: a9 ff ff 00 00                testl   $0xffff, %eax           # imm = 0xFFFF
// fb: 0f 8e 9f 00 00 00             jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 101: 4d 8d 6e f8                   leaq    -0x8(%r14), %r13
// 105: 0f b7 e8                      movzwl  %ax, %ebp
// 108: 48 ff c5                      incq    %rbp
// 10b: eb 14                         jmp     0x121 <_JIT_ENTRY+0x121>
// 10d: 0f 1f 00                      nopl    (%rax)
// 110: 4d 89 7d 00                   movq    %r15, (%r13)
// 114: 49 83 c5 08                   addq    $0x8, %r13
// 118: 48 ff cd                      decq    %rbp
// 11b: 48 83 fd 01                   cmpq    $0x1, %rbp
// 11f: 7e 7f                         jle     0x1a0 <_JIT_ENTRY+0x1a0>
// 121: 8d 45 fe                      leal    -0x2(%rbp), %eax
// 124: 4d 8b 7c c4 18                movq    0x18(%r12,%rax,8), %r15
// 129: 41 8b 07                      movl    (%r15), %eax
// 12c: ff c0                         incl    %eax
// 12e: 74 e0                         je      0x110 <_JIT_ENTRY+0x110>
// 130: 41 89 07                      movl    %eax, (%r15)
// 133: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000135:  R_X86_64_64  _Py_INCREF_IncRefTotal
// 13d: ff d0                         callq   *%rax
// 13f: eb cf                         jmp     0x110 <_JIT_ENTRY+0x110>
// 141: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000143:  R_X86_64_64  _Py_Dealloc
// 14b: 4c 89 e7                      movq    %r12, %rdi
// 14e: ff d0                         callq   *%rax
// 150: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 154: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000156:  R_X86_64_64  PyTuple_Type
// 15e: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 163: 0f 84 67 ff ff ff             je      0xd0 <_JIT_ENTRY+0xd0>
// 169: 49 29 de                      subq    %rbx, %r14
// 16c: 49 83 c6 b8                   addq    $-0x48, %r14
// 170: 49 c1 ee 03                   shrq    $0x3, %r14
// 174: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 178: 48 8b 03                      movq    (%rbx), %rax
// 17b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000017d:  R_X86_64_64  _JIT_TARGET
// 185: 89 c9                         movl    %ecx, %ecx
// 187: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 18b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 191: 48 83 c4 08                   addq    $0x8, %rsp
// 195: 5b                            popq    %rbx
// 196: 41 5c                         popq    %r12
// 198: 41 5d                         popq    %r13
// 19a: 41 5e                         popq    %r14
// 19c: 41 5f                         popq    %r15
// 19e: 5d                            popq    %rbp
// 19f: c3                            retq
// 1a0: 49 8b 04 24                   movq    (%r12), %rax
// 1a4: 48 85 c0                      testq   %rax, %rax
// 1a7: 7f 22                         jg      0x1cb <_JIT_ENTRY+0x1cb>
// 1a9: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000001ab:  R_X86_64_64  .rodata.str1.1
// 1b3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001b5:  R_X86_64_64  _Py_NegativeRefcount
// 1bd: be 99 03 00 00                movl    $0x399, %esi            # imm = 0x399
// 1c2: 4c 89 e2                      movq    %r12, %rdx
// 1c5: ff d0                         callq   *%rax
// 1c7: 49 8b 04 24                   movq    (%r12), %rax
// 1cb: 85 c0                         testl   %eax, %eax
// 1cd: 4c 8b 3c 24                   movq    (%rsp), %r15
// 1d1: 78 21                         js      0x1f4 <_JIT_ENTRY+0x1f4>
// 1d3: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001d5:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1dd: ff d0                         callq   *%rax
// 1df: 49 ff 0c 24                   decq    (%r12)
// 1e3: 75 0f                         jne     0x1f4 <_JIT_ENTRY+0x1f4>
// 1e5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e7:  R_X86_64_64  _Py_Dealloc
// 1ef: 4c 89 e7                      movq    %r12, %rdi
// 1f2: ff d0                         callq   *%rax
// 1f4: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001f6:  R_X86_64_64  _JIT_OPARG
// 1fe: 0f b7 c0                      movzwl  %ax, %eax
// 201: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 205: 48 83 c6 f8                   addq    $-0x8, %rsi
// 209: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000020b:  R_X86_64_64  _JIT_CONTINUE
// 213: 48 89 df                      movq    %rbx, %rdi
// 216: 4c 89 fa                      movq    %r15, %rdx
// 219: 48 83 c4 08                   addq    $0x8, %rsp
// 21d: 5b                            popq    %rbx
// 21e: 41 5c                         popq    %r12
// 220: 41 5d                         popq    %r13
// 222: 41 5e                         popq    %r14
// 224: 41 5f                         popq    %r15
// 226: 5d                            popq    %rbp
// 227: ff e0                         jmpq    *%rax
// 229: 
static const unsigned char _DELETE_DEREFplus_UNPACK_SEQUENCE_TUPLE_code_body[554] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x71, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0x16, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x0f, 0x84, 0x8a, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x85, 0x99, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x39, 0x44, 0x24, 0x10, 0x0f, 0x85, 0x81, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x3c, 0x24, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0xff, 0xff, 0x00, 0x00, 0x0f, 0x8e, 0x9f, 0x00, 0x00, 0x00, 0x4d, 0x8d, 0x6e, 0xf8, 0x0f, 0xb7, 0xe8, 0x48, 0xff, 0xc5, 0xeb, 0x14, 0x0f, 0x1f, 0x00, 0x4d, 0x89, 0x7d, 0x00, 0x49, 0x83, 0xc5, 0x08, 0x48, 0xff, 0xcd, 0x48, 0x83, 0xfd, 0x01, 0x7e, 0x7f, 0x8d, 0x45, 0xfe, 0x4d, 0x8b, 0x7c, 0xc4, 0x18, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0xe0, 0x41, 0x89, 0x07, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0xeb, 0xcf, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x0f, 0x84, 0x67, 0xff, 0xff, 0xff, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x22, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x99, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x4c, 0x8b, 0x3c, 0x24, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_UNPACK_SEQUENCE_TUPLE_code_holes[20] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x87, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xbd, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0xd2, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0xee, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x135, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x143, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x156, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x17d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x1ab, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x1b5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1d5, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1e7, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1f6, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x20b, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_UNPACK_SEQUENCE_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_UNPACK_SEQUENCE_TUPLE_data_holes[1];

// _DELETE_DEREFplus_UNPACK_SEQUENCE_TWO_TUPLE
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_UNPACK_SEQUENCE_TWO_TUPLE.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 50                            pushq   %rax
// b: 49 89 d7                      movq    %rdx, %r15
// e: 49 89 f6                      movq    %rsi, %r14
// 11: 48 89 fb                      movq    %rdi, %rbx
// 14: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000016:  R_X86_64_64  _JIT_OPARG
// 1e: 0f b7 c0                      movzwl  %ax, %eax
// 21: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 26: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2a: 4d 85 e4                      testq   %r12, %r12
// 2d: 74 17                         je      0x46 <_JIT_ENTRY+0x46>
// 2f: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 37: 49 8b 04 24                   movq    (%r12), %rax
// 3b: 48 85 c0                      testq   %rax, %rax
// 3e: 7e 3b                         jle     0x7b <_JIT_ENTRY+0x7b>
// 40: 85 c0                         testl   %eax, %eax
// 42: 79 5d                         jns     0xa1 <_JIT_ENTRY+0xa1>
// 44: eb 6d                         jmp     0xb3 <_JIT_ENTRY+0xb3>
// 46: 48 8b 33                      movq    (%rbx), %rsi
// 49: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000004b:  R_X86_64_64  _JIT_OPARG
// 53: 0f b7 d0                      movzwl  %ax, %edx
// 56: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000058:  R_X86_64_64  _PyEval_FormatExcUnbound
// 60: 4c 89 ff                      movq    %r15, %rdi
// 63: ff d0                         callq   *%rax
// 65: 49 29 de                      subq    %rbx, %r14
// 68: 49 83 c6 b8                   addq    $-0x48, %r14
// 6c: 49 c1 ee 03                   shrq    $0x3, %r14
// 70: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 74: 31 c0                         xorl    %eax, %eax
// 76: e9 e6 00 00 00                jmp     0x161 <_JIT_ENTRY+0x161>
// 7b: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 000000000000007d:  R_X86_64_64  .rodata.str1.1
// 85: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000087:  R_X86_64_64  _Py_NegativeRefcount
// 8f: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 94: 4c 89 e2                      movq    %r12, %rdx
// 97: ff d0                         callq   *%rax
// 99: 49 8b 04 24                   movq    (%r12), %rax
// 9d: 85 c0                         testl   %eax, %eax
// 9f: 78 12                         js      0xb3 <_JIT_ENTRY+0xb3>
// a1: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000a3:  R_X86_64_64  _Py_DECREF_DecRefTotal
// ab: ff d0                         callq   *%rax
// ad: 49 ff 0c 24                   decq    (%r12)
// b1: 74 62                         je      0x115 <_JIT_ENTRY+0x115>
// b3: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// b7: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000b9:  R_X86_64_64  PyTuple_Type
// c1: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// c6: 75 71                         jne     0x139 <_JIT_ENTRY+0x139>
// c8: 49 83 7c 24 10 02             cmpq    $0x2, 0x10(%r12)
// ce: 75 69                         jne     0x139 <_JIT_ENTRY+0x139>
// d0: 49 8b 6c 24 20                movq    0x20(%r12), %rbp
// d5: 8b 45 00                      movl    (%rbp), %eax
// d8: 49 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %r13
// 00000000000000da:  R_X86_64_64  _Py_INCREF_IncRefTotal
// e2: ff c0                         incl    %eax
// e4: 74 06                         je      0xec <_JIT_ENTRY+0xec>
// e6: 89 45 00                      movl    %eax, (%rbp)
// e9: 41 ff d5                      callq   *%r13
// ec: 49 89 6e f8                   movq    %rbp, -0x8(%r14)
// f0: 49 8b 6c 24 18                movq    0x18(%r12), %rbp
// f5: 8b 45 00                      movl    (%rbp), %eax
// f8: ff c0                         incl    %eax
// fa: 75 74                         jne     0x170 <_JIT_ENTRY+0x170>
// fc: 49 89 2e                      movq    %rbp, (%r14)
// ff: 49 8b 04 24                   movq    (%r12), %rax
// 103: 48 85 c0                      testq   %rax, %rax
// 106: 7e 7a                         jle     0x182 <_JIT_ENTRY+0x182>
// 108: 85 c0                         testl   %eax, %eax
// 10a: 0f 89 98 00 00 00             jns     0x1a8 <_JIT_ENTRY+0x1a8>
// 110: e9 b4 00 00 00                jmp     0x1c9 <_JIT_ENTRY+0x1c9>
// 115: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000117:  R_X86_64_64  _Py_Dealloc
// 11f: 4c 89 e7                      movq    %r12, %rdi
// 122: ff d0                         callq   *%rax
// 124: 4d 8b 66 f8                   movq    -0x8(%r14), %r12
// 128: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000012a:  R_X86_64_64  PyTuple_Type
// 132: 49 39 44 24 08                cmpq    %rax, 0x8(%r12)
// 137: 74 8f                         je      0xc8 <_JIT_ENTRY+0xc8>
// 139: 49 29 de                      subq    %rbx, %r14
// 13c: 49 83 c6 b8                   addq    $-0x48, %r14
// 140: 49 c1 ee 03                   shrq    $0x3, %r14
// 144: 44 89 73 40                   movl    %r14d, 0x40(%rbx)
// 148: 48 8b 03                      movq    (%rbx), %rax
// 14b: 48 b9 00 00 00 00 00 00 00 00 movabsq $0x0, %rcx
// 000000000000014d:  R_X86_64_64  _JIT_TARGET
// 155: 89 c9                         movl    %ecx, %ecx
// 157: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
// 15b: 48 05 c8 00 00 00             addq    $0xc8, %rax
// 161: 48 83 c4 08                   addq    $0x8, %rsp
// 165: 5b                            popq    %rbx
// 166: 41 5c                         popq    %r12
// 168: 41 5d                         popq    %r13
// 16a: 41 5e                         popq    %r14
// 16c: 41 5f                         popq    %r15
// 16e: 5d                            popq    %rbp
// 16f: c3                            retq
// 170: 89 45 00                      movl    %eax, (%rbp)
// 173: 41 ff d5                      callq   *%r13
// 176: 49 89 2e                      movq    %rbp, (%r14)
// 179: 49 8b 04 24                   movq    (%r12), %rax
// 17d: 48 85 c0                      testq   %rax, %rax
// 180: 7f 86                         jg      0x108 <_JIT_ENTRY+0x108>
// 182: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000184:  R_X86_64_64  .rodata.str1.1
// 18c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000018e:  R_X86_64_64  _Py_NegativeRefcount
// 196: be 87 03 00 00                movl    $0x387, %esi            # imm = 0x387
// 19b: 4c 89 e2                      movq    %r12, %rdx
// 19e: ff d0                         callq   *%rax
// 1a0: 49 8b 04 24                   movq    (%r12), %rax
// 1a4: 85 c0                         testl   %eax, %eax
// 1a6: 78 21                         js      0x1c9 <_JIT_ENTRY+0x1c9>
// 1a8: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001aa:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 1b2: ff d0                         callq   *%rax
// 1b4: 49 ff 0c 24                   decq    (%r12)
// 1b8: 75 0f                         jne     0x1c9 <_JIT_ENTRY+0x1c9>
// 1ba: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001bc:  R_X86_64_64  _Py_Dealloc
// 1c4: 4c 89 e7                      movq    %r12, %rdi
// 1c7: ff d0                         callq   *%rax
// 1c9: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001cb:  R_X86_64_64  _JIT_OPARG
// 1d3: 0f b7 c0                      movzwl  %ax, %eax
// 1d6: 49 8d 34 c6                   leaq    (%r14,%rax,8), %rsi
// 1da: 48 83 c6 f8                   addq    $-0x8, %rsi
// 1de: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000001e0:  R_X86_64_64  _JIT_CONTINUE
// 1e8: 48 89 df                      movq    %rbx, %rdi
// 1eb: 4c 89 fa                      movq    %r15, %rdx
// 1ee: 48 83 c4 08                   addq    $0x8, %rsp
// 1f2: 5b                            popq    %rbx
// 1f3: 41 5c                         popq    %r12
// 1f5: 41 5d                         popq    %r13
// 1f7: 41 5e                         popq    %r14
// 1f9: 41 5f                         popq    %r15
// 1fb: 5d                            popq    %rbp
// 1fc: ff e0                         jmpq    *%rax
// 1fe: 
static const unsigned char _DELETE_DEREFplus_UNPACK_SEQUENCE_TWO_TUPLE_code_body[511] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x50, 0x49, 0x89, 0xd7, 0x49, 0x89, 0xf6, 0x48, 0x89, 0xfb, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x17, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x3b, 0x85, 0xc0, 0x79, 0x5d, 0xeb, 0x6d, 0x48, 0x8b, 0x33, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xff, 0xff, 0xd0, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x31, 0xc0, 0xe9, 0xe6, 0x00, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x12, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x74, 0x62, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x75, 0x71, 0x49, 0x83, 0x7c, 0x24, 0x10, 0x02, 0x75, 0x69, 0x49, 0x8b, 0x6c, 0x24, 0x20, 0x8b, 0x45, 0x00, 0x49, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x74, 0x06, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd5, 0x49, 0x89, 0x6e, 0xf8, 0x49, 0x8b, 0x6c, 0x24, 0x18, 0x8b, 0x45, 0x00, 0xff, 0xc0, 0x75, 0x74, 0x49, 0x89, 0x2e, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x7a, 0x85, 0xc0, 0x0f, 0x89, 0x98, 0x00, 0x00, 0x00, 0xe9, 0xb4, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4d, 0x8b, 0x66, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x39, 0x44, 0x24, 0x08, 0x74, 0x8f, 0x49, 0x29, 0xde, 0x49, 0x83, 0xc6, 0xb8, 0x49, 0xc1, 0xee, 0x03, 0x44, 0x89, 0x73, 0x40, 0x48, 0x8b, 0x03, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc9, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3, 0x89, 0x45, 0x00, 0x41, 0xff, 0xd5, 0x49, 0x89, 0x2e, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7f, 0x86, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x87, 0x03, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x49, 0x8d, 0x34, 0xc6, 0x48, 0x83, 0xc6, 0xf8, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x4c, 0x89, 0xfa, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0};
static const Hole _DELETE_DEREFplus_UNPACK_SEQUENCE_TWO_TUPLE_code_holes[18] = {
    {0x16, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x4b, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x58, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x7d, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x87, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0xa3, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xb9, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0xda, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_INCREF_IncRefTotal, 0x0},
    {0x117, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x12a, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyTuple_Type, 0x0},
    {0x14d, HoleKind_R_X86_64_64, HoleValue_TARGET, NULL, 0x0},
    {0x184, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x18e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x1aa, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x1bc, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x1cb, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x1e0, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_UNPACK_SEQUENCE_TWO_TUPLE_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_UNPACK_SEQUENCE_TWO_TUPLE_data_holes[1];

// _DELETE_DEREFplus_WITH_EXCEPT_START
// 
// /tmp/tmpbzuzfy6a/_DELETE_DEREFplus_WITH_EXCEPT_START.o: file format elf64-x86-64
// 
// Disassembly of section .text:
// 
// 0000000000000000 <_JIT_ENTRY>:
// 0: 55                            pushq   %rbp
// 1: 41 57                         pushq   %r15
// 3: 41 56                         pushq   %r14
// 5: 41 55                         pushq   %r13
// 7: 41 54                         pushq   %r12
// 9: 53                            pushq   %rbx
// a: 48 83 ec 38                   subq    $0x38, %rsp
// e: 48 89 d1                      movq    %rdx, %rcx
// 11: 48 89 f3                      movq    %rsi, %rbx
// 14: 49 89 fe                      movq    %rdi, %r14
// 17: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000019:  R_X86_64_64  _JIT_OPARG
// 21: 0f b7 c0                      movzwl  %ax, %eax
// 24: 48 8b 44 c7 48                movq    0x48(%rdi,%rax,8), %rax
// 29: 4c 8b 60 10                   movq    0x10(%rax), %r12
// 2d: 4d 85 e4                      testq   %r12, %r12
// 30: 74 1c                         je      0x4e <_JIT_ENTRY+0x4e>
// 32: 48 89 4c 24 08                movq    %rcx, 0x8(%rsp)
// 37: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
// 3f: 49 8b 04 24                   movq    (%r12), %rax
// 43: 48 85 c0                      testq   %rax, %rax
// 46: 7e 2a                         jle     0x72 <_JIT_ENTRY+0x72>
// 48: 85 c0                         testl   %eax, %eax
// 4a: 79 4c                         jns     0x98 <_JIT_ENTRY+0x98>
// 4c: eb 6b                         jmp     0xb9 <_JIT_ENTRY+0xb9>
// 4e: 49 8b 36                      movq    (%r14), %rsi
// 51: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000053:  R_X86_64_64  _JIT_OPARG
// 5b: 0f b7 d0                      movzwl  %ax, %edx
// 5e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000060:  R_X86_64_64  _PyEval_FormatExcUnbound
// 68: 48 89 cf                      movq    %rcx, %rdi
// 6b: ff d0                         callq   *%rax
// 6d: e9 34 01 00 00                jmp     0x1a6 <_JIT_ENTRY+0x1a6>
// 72: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 0000000000000074:  R_X86_64_64  .rodata.str1.1
// 7c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000007e:  R_X86_64_64  _Py_NegativeRefcount
// 86: be c4 04 00 00                movl    $0x4c4, %esi            # imm = 0x4C4
// 8b: 4c 89 e2                      movq    %r12, %rdx
// 8e: ff d0                         callq   *%rax
// 90: 49 8b 04 24                   movq    (%r12), %rax
// 94: 85 c0                         testl   %eax, %eax
// 96: 78 21                         js      0xb9 <_JIT_ENTRY+0xb9>
// 98: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000009a:  R_X86_64_64  _Py_DECREF_DecRefTotal
// a2: ff d0                         callq   *%rax
// a4: 49 ff 0c 24                   decq    (%r12)
// a8: 75 0f                         jne     0xb9 <_JIT_ENTRY+0xb9>
// aa: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000ac:  R_X86_64_64  _Py_Dealloc
// b4: 4c 89 e7                      movq    %r12, %rdi
// b7: ff d0                         callq   *%rax
// b9: 4c 8b 63 e0                   movq    -0x20(%rbx), %r12
// bd: 4c 8b 6b f8                   movq    -0x8(%rbx), %r13
// c1: 4d 8b 7d 08                   movq    0x8(%r13), %r15
// c5: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 00000000000000c7:  R_X86_64_64  PyException_GetTraceback
// cf: 4c 89 ef                      movq    %r13, %rdi
// d2: ff d0                         callq   *%rax
// d4: 48 85 c0                      testq   %rax, %rax
// d7: 74 11                         je      0xea <_JIT_ENTRY+0xea>
// d9: 48 89 c5                      movq    %rax, %rbp
// dc: 48 8b 00                      movq    (%rax), %rax
// df: 48 85 c0                      testq   %rax, %rax
// e2: 7e 12                         jle     0xf6 <_JIT_ENTRY+0xf6>
// e4: 85 c0                         testl   %eax, %eax
// e6: 79 34                         jns     0x11c <_JIT_ENTRY+0x11c>
// e8: eb 53                         jmp     0x13d <_JIT_ENTRY+0x13d>
// ea: 48 bd 00 00 00 00 00 00 00 00 movabsq $0x0, %rbp
// 00000000000000ec:  R_X86_64_64  _Py_NoneStruct
// f4: eb 47                         jmp     0x13d <_JIT_ENTRY+0x13d>
// f6: 48 bf 00 00 00 00 00 00 00 00 movabsq $0x0, %rdi
// 00000000000000f8:  R_X86_64_64  .rodata.str1.1
// 100: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000102:  R_X86_64_64  _Py_NegativeRefcount
// 10a: be 64 09 00 00                movl    $0x964, %esi            # imm = 0x964
// 10f: 48 89 ea                      movq    %rbp, %rdx
// 112: ff d0                         callq   *%rax
// 114: 48 8b 45 00                   movq    (%rbp), %rax
// 118: 85 c0                         testl   %eax, %eax
// 11a: 78 21                         js      0x13d <_JIT_ENTRY+0x13d>
// 11c: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000011e:  R_X86_64_64  _Py_DECREF_DecRefTotal
// 126: ff d0                         callq   *%rax
// 128: 48 ff 4d 00                   decq    (%rbp)
// 12c: 75 0f                         jne     0x13d <_JIT_ENTRY+0x13d>
// 12e: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000130:  R_X86_64_64  _Py_Dealloc
// 138: 48 89 ef                      movq    %rbp, %rdi
// 13b: ff d0                         callq   *%rax
// 13d: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
// 146: 48 8d 74 24 18                leaq    0x18(%rsp), %rsi
// 14b: 4c 89 7c 24 18                movq    %r15, 0x18(%rsp)
// 150: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
// 155: 48 89 6c 24 28                movq    %rbp, 0x28(%rsp)
// 15a: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 000000000000015c:  R_X86_64_64  PyObject_Vectorcall
// 164: 48 ba 03 00 00 00 00 00 00 80 movabsq $-0x7ffffffffffffffd, %rdx # imm = 0x8000000000000003
// 16e: 4c 89 e7                      movq    %r12, %rdi
// 171: 31 c9                         xorl    %ecx, %ecx
// 173: ff d0                         callq   *%rax
// 175: 48 85 c0                      testq   %rax, %rax
// 178: 74 2c                         je      0x1a6 <_JIT_ENTRY+0x1a6>
// 17a: 48 89 03                      movq    %rax, (%rbx)
// 17d: 48 83 c3 08                   addq    $0x8, %rbx
// 181: 48 b8 00 00 00 00 00 00 00 00 movabsq $0x0, %rax
// 0000000000000183:  R_X86_64_64  _JIT_CONTINUE
// 18b: 4c 89 f7                      movq    %r14, %rdi
// 18e: 48 89 de                      movq    %rbx, %rsi
// 191: 48 8b 54 24 08                movq    0x8(%rsp), %rdx
// 196: 48 83 c4 38                   addq    $0x38, %rsp
// 19a: 5b                            popq    %rbx
// 19b: 41 5c                         popq    %r12
// 19d: 41 5d                         popq    %r13
// 19f: 41 5e                         popq    %r14
// 1a1: 41 5f                         popq    %r15
// 1a3: 5d                            popq    %rbp
// 1a4: ff e0                         jmpq    *%rax
// 1a6: 4c 29 f3                      subq    %r14, %rbx
// 1a9: 48 83 c3 b8                   addq    $-0x48, %rbx
// 1ad: 48 c1 eb 03                   shrq    $0x3, %rbx
// 1b1: 41 89 5e 40                   movl    %ebx, 0x40(%r14)
// 1b5: 31 c0                         xorl    %eax, %eax
// 1b7: 48 83 c4 38                   addq    $0x38, %rsp
// 1bb: 5b                            popq    %rbx
// 1bc: 41 5c                         popq    %r12
// 1be: 41 5d                         popq    %r13
// 1c0: 41 5e                         popq    %r14
// 1c2: 41 5f                         popq    %r15
// 1c4: 5d                            popq    %rbp
// 1c5: c3                            retq
// 1c6: 
static const unsigned char _DELETE_DEREFplus_WITH_EXCEPT_START_code_body[455] = {0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x53, 0x48, 0x83, 0xec, 0x38, 0x48, 0x89, 0xd1, 0x48, 0x89, 0xf3, 0x49, 0x89, 0xfe, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8b, 0x44, 0xc7, 0x48, 0x4c, 0x8b, 0x60, 0x10, 0x4d, 0x85, 0xe4, 0x74, 0x1c, 0x48, 0x89, 0x4c, 0x24, 0x08, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x7e, 0x2a, 0x85, 0xc0, 0x79, 0x4c, 0xeb, 0x6b, 0x49, 0x8b, 0x36, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd0, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xcf, 0xff, 0xd0, 0xe9, 0x34, 0x01, 0x00, 0x00, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xc4, 0x04, 0x00, 0x00, 0x4c, 0x89, 0xe2, 0xff, 0xd0, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x49, 0xff, 0x0c, 0x24, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0xd0, 0x4c, 0x8b, 0x63, 0xe0, 0x4c, 0x8b, 0x6b, 0xf8, 0x4d, 0x8b, 0x7d, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xef, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x11, 0x48, 0x89, 0xc5, 0x48, 0x8b, 0x00, 0x48, 0x85, 0xc0, 0x7e, 0x12, 0x85, 0xc0, 0x79, 0x34, 0xeb, 0x53, 0x48, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x47, 0x48, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x64, 0x09, 0x00, 0x00, 0x48, 0x89, 0xea, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0x00, 0x85, 0xc0, 0x78, 0x21, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0xff, 0x4d, 0x00, 0x75, 0x0f, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xef, 0xff, 0xd0, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x74, 0x24, 0x18, 0x4c, 0x89, 0x7c, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x48, 0x89, 0x6c, 0x24, 0x28, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x4c, 0x89, 0xe7, 0x31, 0xc9, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x74, 0x2c, 0x48, 0x89, 0x03, 0x48, 0x83, 0xc3, 0x08, 0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0x48, 0x8b, 0x54, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xff, 0xe0, 0x4c, 0x29, 0xf3, 0x48, 0x83, 0xc3, 0xb8, 0x48, 0xc1, 0xeb, 0x03, 0x41, 0x89, 0x5e, 0x40, 0x31, 0xc0, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x41, 0x5c, 0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3};
static const Hole _DELETE_DEREFplus_WITH_EXCEPT_START_code_holes[16] = {
    {0x19, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x53, HoleKind_R_X86_64_64, HoleValue_OPARG, NULL, 0x0},
    {0x60, HoleKind_R_X86_64_64, HoleValue_ZERO, &_PyEval_FormatExcUnbound, 0x0},
    {0x74, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x7e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x9a, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0xac, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0xc7, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyException_GetTraceback, 0x0},
    {0xec, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NoneStruct, 0x0},
    {0xf8, HoleKind_R_X86_64_64, HoleValue_DATA, NULL, 0x0},
    {0x102, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_NegativeRefcount, 0x0},
    {0x11e, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_DECREF_DecRefTotal, 0x0},
    {0x130, HoleKind_R_X86_64_64, HoleValue_ZERO, &_Py_Dealloc, 0x0},
    {0x15c, HoleKind_R_X86_64_64, HoleValue_ZERO, &PyObject_Vectorcall, 0x0},
    {0x183, HoleKind_R_X86_64_64, HoleValue_CONTINUE, NULL, 0x0},
};
// 0: '/home/jglass/Documents/cpython/Python/executor_cases.c.h\x00'
// 39: 00 00 00 00 00 00 00
static const unsigned char _DELETE_DEREFplus_WITH_EXCEPT_START_data_body[65] = {0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x6a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const Hole _DELETE_DEREFplus_WITH_EXCEPT_START_data_holes[1];

#define INIT_STENCIL(STENCIL) {                         \
    .body_size = Py_ARRAY_LENGTH(STENCIL##_body) - 1,   \
    .body = STENCIL##_body,                             \
    .holes_size = Py_ARRAY_LENGTH(STENCIL##_holes) - 1, \
    .holes = STENCIL##_holes,                           \
}

#define INIT_STENCIL_GROUP(OP) {     \
    .code = INIT_STENCIL(OP##_code), \
    .data = INIT_STENCIL(OP##_data), \
}

static const StencilGroup stencil_groups[512] = {
    [_DELETE_DEREFplus_BEFORE_ASYNC_WITH] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BEFORE_ASYNC_WITH),
    [_DELETE_DEREFplus_BEFORE_WITH] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BEFORE_WITH),
    [_DELETE_DEREFplus_BINARY_OP] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BINARY_OP),
    [_DELETE_DEREFplus_BINARY_OP_ADD_FLOAT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BINARY_OP_ADD_FLOAT),
    [_DELETE_DEREFplus_BINARY_OP_ADD_INT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BINARY_OP_ADD_INT),
    [_DELETE_DEREFplus_BINARY_OP_ADD_UNICODE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BINARY_OP_ADD_UNICODE),
    [_DELETE_DEREFplus_BINARY_OP_MULTIPLY_FLOAT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BINARY_OP_MULTIPLY_FLOAT),
    [_DELETE_DEREFplus_BINARY_OP_MULTIPLY_INT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BINARY_OP_MULTIPLY_INT),
    [_DELETE_DEREFplus_BINARY_OP_SUBTRACT_FLOAT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BINARY_OP_SUBTRACT_FLOAT),
    [_DELETE_DEREFplus_BINARY_OP_SUBTRACT_INT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BINARY_OP_SUBTRACT_INT),
    [_DELETE_DEREFplus_BINARY_SLICE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BINARY_SLICE),
    [_DELETE_DEREFplus_BINARY_SUBSCR] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BINARY_SUBSCR),
    [_DELETE_DEREFplus_BINARY_SUBSCR_DICT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BINARY_SUBSCR_DICT),
    [_DELETE_DEREFplus_BINARY_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BINARY_SUBSCR_LIST_INT),
    [_DELETE_DEREFplus_BINARY_SUBSCR_STR_INT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BINARY_SUBSCR_STR_INT),
    [_DELETE_DEREFplus_BINARY_SUBSCR_TUPLE_INT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BINARY_SUBSCR_TUPLE_INT),
    [_DELETE_DEREFplus_BUILD_CONST_KEY_MAP] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BUILD_CONST_KEY_MAP),
    [_DELETE_DEREFplus_BUILD_LIST] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BUILD_LIST),
    [_DELETE_DEREFplus_BUILD_MAP] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BUILD_MAP),
    [_DELETE_DEREFplus_BUILD_SET] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BUILD_SET),
    [_DELETE_DEREFplus_BUILD_SLICE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BUILD_SLICE),
    [_DELETE_DEREFplus_BUILD_STRING] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BUILD_STRING),
    [_DELETE_DEREFplus_BUILD_TUPLE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_BUILD_TUPLE),
    [_DELETE_DEREFplus_CALL_BUILTIN_CLASS] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CALL_BUILTIN_CLASS),
    [_DELETE_DEREFplus_CALL_BUILTIN_FAST] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CALL_BUILTIN_FAST),
    [_DELETE_DEREFplus_CALL_BUILTIN_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CALL_BUILTIN_FAST_WITH_KEYWORDS),
    [_DELETE_DEREFplus_CALL_BUILTIN_O] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CALL_BUILTIN_O),
    [_DELETE_DEREFplus_CALL_INTRINSIC_1] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CALL_INTRINSIC_1),
    [_DELETE_DEREFplus_CALL_INTRINSIC_2] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CALL_INTRINSIC_2),
    [_DELETE_DEREFplus_CALL_ISINSTANCE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CALL_ISINSTANCE),
    [_DELETE_DEREFplus_CALL_LEN] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CALL_LEN),
    [_DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_FAST] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_FAST),
    [_DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS),
    [_DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_NOARGS] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_NOARGS),
    [_DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_O] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CALL_METHOD_DESCRIPTOR_O),
    [_DELETE_DEREFplus_CALL_STR_1] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CALL_STR_1),
    [_DELETE_DEREFplus_CALL_TUPLE_1] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CALL_TUPLE_1),
    [_DELETE_DEREFplus_CALL_TYPE_1] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CALL_TYPE_1),
    [_DELETE_DEREFplus_CHECK_ATTR_CLASS] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CHECK_ATTR_CLASS),
    [_DELETE_DEREFplus_CHECK_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CHECK_ATTR_METHOD_LAZY_DICT),
    [_DELETE_DEREFplus_CHECK_ATTR_MODULE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CHECK_ATTR_MODULE),
    [_DELETE_DEREFplus_CHECK_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CHECK_ATTR_WITH_HINT),
    [_DELETE_DEREFplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CHECK_CALL_BOUND_METHOD_EXACT_ARGS),
    [_DELETE_DEREFplus_CHECK_EG_MATCH] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CHECK_EG_MATCH),
    [_DELETE_DEREFplus_CHECK_EXC_MATCH] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CHECK_EXC_MATCH),
    [_DELETE_DEREFplus_CHECK_FUNCTION_EXACT_ARGS] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CHECK_FUNCTION_EXACT_ARGS),
    [_DELETE_DEREFplus_CHECK_MANAGED_OBJECT_HAS_VALUES] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CHECK_MANAGED_OBJECT_HAS_VALUES),
    [_DELETE_DEREFplus_CHECK_PEP_523] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CHECK_PEP_523),
    [_DELETE_DEREFplus_CHECK_STACK_SPACE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CHECK_STACK_SPACE),
    [_DELETE_DEREFplus_CHECK_VALIDITY] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CHECK_VALIDITY),
    [_DELETE_DEREFplus_COMPARE_OP] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_COMPARE_OP),
    [_DELETE_DEREFplus_COMPARE_OP_FLOAT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_COMPARE_OP_FLOAT),
    [_DELETE_DEREFplus_COMPARE_OP_INT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_COMPARE_OP_INT),
    [_DELETE_DEREFplus_COMPARE_OP_STR] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_COMPARE_OP_STR),
    [_DELETE_DEREFplus_CONTAINS_OP] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CONTAINS_OP),
    [_DELETE_DEREFplus_CONVERT_VALUE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_CONVERT_VALUE),
    [_DELETE_DEREFplus_COPY] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_COPY),
    [_DELETE_DEREFplus_COPY_FREE_VARS] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_COPY_FREE_VARS),
    [_DELETE_DEREFplus_DELETE_ATTR] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_DELETE_ATTR),
    [_DELETE_DEREFplus_DELETE_DEREF] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_DELETE_DEREF),
    [_DELETE_DEREFplus_DELETE_FAST] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_DELETE_FAST),
    [_DELETE_DEREFplus_DELETE_GLOBAL] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_DELETE_GLOBAL),
    [_DELETE_DEREFplus_DELETE_NAME] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_DELETE_NAME),
    [_DELETE_DEREFplus_DELETE_SUBSCR] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_DELETE_SUBSCR),
    [_DELETE_DEREFplus_DICT_MERGE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_DICT_MERGE),
    [_DELETE_DEREFplus_DICT_UPDATE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_DICT_UPDATE),
    [_DELETE_DEREFplus_END_SEND] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_END_SEND),
    [_DELETE_DEREFplus_EXIT_INIT_CHECK] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_EXIT_INIT_CHECK),
    [_DELETE_DEREFplus_EXIT_TRACE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_EXIT_TRACE),
    [_DELETE_DEREFplus_FORMAT_SIMPLE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_FORMAT_SIMPLE),
    [_DELETE_DEREFplus_FORMAT_WITH_SPEC] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_FORMAT_WITH_SPEC),
    [_DELETE_DEREFplus_FOR_ITER_TIER_TWO] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_FOR_ITER_TIER_TWO),
    [_DELETE_DEREFplus_GET_AITER] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_GET_AITER),
    [_DELETE_DEREFplus_GET_ANEXT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_GET_ANEXT),
    [_DELETE_DEREFplus_GET_AWAITABLE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_GET_AWAITABLE),
    [_DELETE_DEREFplus_GET_ITER] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_GET_ITER),
    [_DELETE_DEREFplus_GET_LEN] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_GET_LEN),
    [_DELETE_DEREFplus_GET_YIELD_FROM_ITER] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_GET_YIELD_FROM_ITER),
    [_DELETE_DEREFplus_GUARD_BOTH_FLOAT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_GUARD_BOTH_FLOAT),
    [_DELETE_DEREFplus_GUARD_BOTH_INT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_GUARD_BOTH_INT),
    [_DELETE_DEREFplus_GUARD_BOTH_UNICODE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_GUARD_BOTH_UNICODE),
    [_DELETE_DEREFplus_GUARD_BUILTINS_VERSION] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_GUARD_BUILTINS_VERSION),
    [_DELETE_DEREFplus_GUARD_DORV_VALUES] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_GUARD_DORV_VALUES),
    [_DELETE_DEREFplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT),
    [_DELETE_DEREFplus_GUARD_GLOBALS_VERSION] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_GUARD_GLOBALS_VERSION),
    [_DELETE_DEREFplus_GUARD_IS_FALSE_POP] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_GUARD_IS_FALSE_POP),
    [_DELETE_DEREFplus_GUARD_IS_NONE_POP] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_GUARD_IS_NONE_POP),
    [_DELETE_DEREFplus_GUARD_IS_NOT_NONE_POP] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_GUARD_IS_NOT_NONE_POP),
    [_DELETE_DEREFplus_GUARD_IS_TRUE_POP] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_GUARD_IS_TRUE_POP),
    [_DELETE_DEREFplus_GUARD_KEYS_VERSION] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_GUARD_KEYS_VERSION),
    [_DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_LIST] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_LIST),
    [_DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_RANGE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_RANGE),
    [_DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_TUPLE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_GUARD_NOT_EXHAUSTED_TUPLE),
    [_DELETE_DEREFplus_GUARD_TYPE_VERSION] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_GUARD_TYPE_VERSION),
    [_DELETE_DEREFplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_INIT_CALL_BOUND_METHOD_EXACT_ARGS),
    [_DELETE_DEREFplus_INIT_CALL_PY_EXACT_ARGS] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_INIT_CALL_PY_EXACT_ARGS),
    [_DELETE_DEREFplus_INSERT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_INSERT),
    [_DELETE_DEREFplus_IS_NONE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_IS_NONE),
    [_DELETE_DEREFplus_IS_OP] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_IS_OP),
    [_DELETE_DEREFplus_ITER_CHECK_LIST] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_ITER_CHECK_LIST),
    [_DELETE_DEREFplus_ITER_CHECK_RANGE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_ITER_CHECK_RANGE),
    [_DELETE_DEREFplus_ITER_CHECK_TUPLE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_ITER_CHECK_TUPLE),
    [_DELETE_DEREFplus_ITER_NEXT_LIST] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_ITER_NEXT_LIST),
    [_DELETE_DEREFplus_ITER_NEXT_RANGE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_ITER_NEXT_RANGE),
    [_DELETE_DEREFplus_ITER_NEXT_TUPLE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_ITER_NEXT_TUPLE),
    [_DELETE_DEREFplus_JUMP_TO_TOP] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_JUMP_TO_TOP),
    [_DELETE_DEREFplus_LIST_APPEND] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LIST_APPEND),
    [_DELETE_DEREFplus_LIST_EXTEND] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LIST_EXTEND),
    [_DELETE_DEREFplus_LOAD_ASSERTION_ERROR] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_ASSERTION_ERROR),
    [_DELETE_DEREFplus_LOAD_ATTR] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_ATTR),
    [_DELETE_DEREFplus_LOAD_ATTR_CLASS] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_ATTR_CLASS),
    [_DELETE_DEREFplus_LOAD_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_ATTR_INSTANCE_VALUE),
    [_DELETE_DEREFplus_LOAD_ATTR_METHOD_LAZY_DICT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_ATTR_METHOD_LAZY_DICT),
    [_DELETE_DEREFplus_LOAD_ATTR_METHOD_NO_DICT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_ATTR_METHOD_NO_DICT),
    [_DELETE_DEREFplus_LOAD_ATTR_METHOD_WITH_VALUES] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_ATTR_METHOD_WITH_VALUES),
    [_DELETE_DEREFplus_LOAD_ATTR_MODULE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_ATTR_MODULE),
    [_DELETE_DEREFplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_ATTR_NONDESCRIPTOR_NO_DICT),
    [_DELETE_DEREFplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES),
    [_DELETE_DEREFplus_LOAD_ATTR_SLOT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_ATTR_SLOT),
    [_DELETE_DEREFplus_LOAD_ATTR_WITH_HINT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_ATTR_WITH_HINT),
    [_DELETE_DEREFplus_LOAD_BUILD_CLASS] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_BUILD_CLASS),
    [_DELETE_DEREFplus_LOAD_CONST] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_CONST),
    [_DELETE_DEREFplus_LOAD_DEREF] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_DEREF),
    [_DELETE_DEREFplus_LOAD_FAST] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_FAST),
    [_DELETE_DEREFplus_LOAD_FAST_AND_CLEAR] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_FAST_AND_CLEAR),
    [_DELETE_DEREFplus_LOAD_FAST_CHECK] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_FAST_CHECK),
    [_DELETE_DEREFplus_LOAD_FROM_DICT_OR_DEREF] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_FROM_DICT_OR_DEREF),
    [_DELETE_DEREFplus_LOAD_FROM_DICT_OR_GLOBALS] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_FROM_DICT_OR_GLOBALS),
    [_DELETE_DEREFplus_LOAD_GLOBAL] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_GLOBAL),
    [_DELETE_DEREFplus_LOAD_GLOBAL_BUILTINS] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_GLOBAL_BUILTINS),
    [_DELETE_DEREFplus_LOAD_GLOBAL_MODULE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_GLOBAL_MODULE),
    [_DELETE_DEREFplus_LOAD_LOCALS] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_LOCALS),
    [_DELETE_DEREFplus_LOAD_NAME] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_NAME),
    [_DELETE_DEREFplus_LOAD_SUPER_ATTR_ATTR] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_SUPER_ATTR_ATTR),
    [_DELETE_DEREFplus_LOAD_SUPER_ATTR_METHOD] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_LOAD_SUPER_ATTR_METHOD),
    [_DELETE_DEREFplus_MAKE_CELL] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_MAKE_CELL),
    [_DELETE_DEREFplus_MAKE_FUNCTION] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_MAKE_FUNCTION),
    [_DELETE_DEREFplus_MAP_ADD] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_MAP_ADD),
    [_DELETE_DEREFplus_MATCH_CLASS] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_MATCH_CLASS),
    [_DELETE_DEREFplus_MATCH_KEYS] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_MATCH_KEYS),
    [_DELETE_DEREFplus_MATCH_MAPPING] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_MATCH_MAPPING),
    [_DELETE_DEREFplus_MATCH_SEQUENCE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_MATCH_SEQUENCE),
    [_DELETE_DEREFplus_NOP] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_NOP),
    [_DELETE_DEREFplus_POP_EXCEPT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_POP_EXCEPT),
    [_DELETE_DEREFplus_POP_FRAME] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_POP_FRAME),
    [_DELETE_DEREFplus_POP_TOP] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_POP_TOP),
    [_DELETE_DEREFplus_PUSH_EXC_INFO] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_PUSH_EXC_INFO),
    [_DELETE_DEREFplus_PUSH_FRAME] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_PUSH_FRAME),
    [_DELETE_DEREFplus_PUSH_NULL] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_PUSH_NULL),
    [_DELETE_DEREFplus_RESUME_CHECK] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_RESUME_CHECK),
    [_DELETE_DEREFplus_SAVE_RETURN_OFFSET] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_SAVE_RETURN_OFFSET),
    [_DELETE_DEREFplus_SETUP_ANNOTATIONS] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_SETUP_ANNOTATIONS),
    [_DELETE_DEREFplus_SET_ADD] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_SET_ADD),
    [_DELETE_DEREFplus_SET_FUNCTION_ATTRIBUTE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_SET_FUNCTION_ATTRIBUTE),
    [_DELETE_DEREFplus_SET_IP] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_SET_IP),
    [_DELETE_DEREFplus_SET_UPDATE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_SET_UPDATE),
    [_DELETE_DEREFplus_STORE_ATTR] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_STORE_ATTR),
    [_DELETE_DEREFplus_STORE_ATTR_INSTANCE_VALUE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_STORE_ATTR_INSTANCE_VALUE),
    [_DELETE_DEREFplus_STORE_ATTR_SLOT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_STORE_ATTR_SLOT),
    [_DELETE_DEREFplus_STORE_DEREF] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_STORE_DEREF),
    [_DELETE_DEREFplus_STORE_FAST] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_STORE_FAST),
    [_DELETE_DEREFplus_STORE_GLOBAL] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_STORE_GLOBAL),
    [_DELETE_DEREFplus_STORE_NAME] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_STORE_NAME),
    [_DELETE_DEREFplus_STORE_SLICE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_STORE_SLICE),
    [_DELETE_DEREFplus_STORE_SUBSCR] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_STORE_SUBSCR),
    [_DELETE_DEREFplus_STORE_SUBSCR_DICT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_STORE_SUBSCR_DICT),
    [_DELETE_DEREFplus_STORE_SUBSCR_LIST_INT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_STORE_SUBSCR_LIST_INT),
    [_DELETE_DEREFplus_SWAP] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_SWAP),
    [_DELETE_DEREFplus_TO_BOOL] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_TO_BOOL),
    [_DELETE_DEREFplus_TO_BOOL_ALWAYS_TRUE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_TO_BOOL_ALWAYS_TRUE),
    [_DELETE_DEREFplus_TO_BOOL_BOOL] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_TO_BOOL_BOOL),
    [_DELETE_DEREFplus_TO_BOOL_INT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_TO_BOOL_INT),
    [_DELETE_DEREFplus_TO_BOOL_LIST] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_TO_BOOL_LIST),
    [_DELETE_DEREFplus_TO_BOOL_NONE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_TO_BOOL_NONE),
    [_DELETE_DEREFplus_TO_BOOL_STR] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_TO_BOOL_STR),
    [_DELETE_DEREFplus_UNARY_INVERT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_UNARY_INVERT),
    [_DELETE_DEREFplus_UNARY_NEGATIVE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_UNARY_NEGATIVE),
    [_DELETE_DEREFplus_UNARY_NOT] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_UNARY_NOT),
    [_DELETE_DEREFplus_UNPACK_EX] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_UNPACK_EX),
    [_DELETE_DEREFplus_UNPACK_SEQUENCE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_UNPACK_SEQUENCE),
    [_DELETE_DEREFplus_UNPACK_SEQUENCE_LIST] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_UNPACK_SEQUENCE_LIST),
    [_DELETE_DEREFplus_UNPACK_SEQUENCE_TUPLE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_UNPACK_SEQUENCE_TUPLE),
    [_DELETE_DEREFplus_UNPACK_SEQUENCE_TWO_TUPLE] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_UNPACK_SEQUENCE_TWO_TUPLE),
    [_DELETE_DEREFplus_WITH_EXCEPT_START] = INIT_STENCIL_GROUP(_DELETE_DEREFplus_WITH_EXCEPT_START),
};

#define GET_PATCHES() { \
    [HoleValue_CODE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_CONTINUE] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_DATA] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_EXECUTOR] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_GOT] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPARG] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_OPERAND] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TARGET] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_TOP] = (uint64_t)0xBADBADBADBADBADB, \
    [HoleValue_ZERO] = (uint64_t)0xBADBADBADBADBADB, \
}
